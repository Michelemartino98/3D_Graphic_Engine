
test_lt24_touch.elf:     file format elf32-littlenios2
test_lt24_touch.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05040248

Program Header:
    LOAD off    0x00001000 vaddr 0x05040000 paddr 0x05040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05040020 paddr 0x05040020 align 2**12
         filesz 0x00021480 memsz 0x00021480 flags r-x
    LOAD off    0x000224a0 vaddr 0x050614a0 paddr 0x05063470 align 2**12
         filesz 0x00001fd0 memsz 0x00001fd0 flags rw-
    LOAD off    0x00025440 vaddr 0x05065440 paddr 0x05065440 align 2**12
         filesz 0x00000000 memsz 0x000005b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05040000  05040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  05040020  05040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000209e0  05040248  05040248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000878  05060c28  05060c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fd0  050614a0  05063470  000224a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000005b4  05065440  05065440  00025440  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000000  00000000  00024470  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  050659f4  050659f4  00024470  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001418  00000000  00000000  00024498  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00030b17  00000000  00000000  000258b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c701  00000000  00000000  000563c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000127bc  00000000  00000000  00062ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000039d8  00000000  00000000  00075284  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005c16  00000000  00000000  00078c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00021c88  00000000  00000000  0007e872  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000a04fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000020c0  00000000  00000000  000a0560  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a7551  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000a7554  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a7560  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a7561  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a7562  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a7566  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a756a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a756e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a7579  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a7584  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000001f  00000000  00000000  000a758f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a75ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000bf6e2  00000000  00000000  000a760c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05040000 l    d  .entry	00000000 .entry
05040020 l    d  .exceptions	00000000 .exceptions
05040248 l    d  .text	00000000 .text
05060c28 l    d  .rodata	00000000 .rodata
050614a0 l    d  .rwdata	00000000 .rwdata
05065440 l    d  .bss	00000000 .bss
00000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
050659f4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/vanno/OneDrive/Documents/GitKraken/3D_Graphic_Engine/test_accelerometro_vga_lt24/software/test_lt24_touch_bsp//obj/HAL/src/crt0.o
05040290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 LT24_interface.cpp
00000000 l    df *ABS*	00000000 accelerometer.cpp
05065444 l     O .bss	00000002 _ZZ24accelerometer_controllervE15slider_data_reg
05065448 l     O .bss	00000004 _ZZ24accelerometer_controllervE5x_acc
0506544c l     O .bss	00000004 _ZZ24accelerometer_controllervE5y_acc
05065450 l     O .bss	00000002 _ZZ24accelerometer_controllervE15edge_capture_k1
0506342c l     O .rwdata	00000001 _ZZ24accelerometer_controllervE10command_sw
05065454 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_rx
05065458 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_ry
0506545c l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_tx
05065460 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_ty
00000000 l    df *ABS*	00000000 functions.cpp
00000000 l    df *ABS*	00000000 graphic_object.cpp
00000000 l    df *ABS*	00000000 test_render.cpp
050488ac l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
05048900 l     F .text	00000030 _GLOBAL__sub_I_pixel_buf_dma_dev
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 s_tan.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
05060fb4 l     O .rodata	00000108 two_over_pi
05060f34 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
050610fc l     O .rodata	00000010 init_jk
050610bc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 k_tan.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
05061252 l     O .rodata	00000010 zeroes.4389
05061262 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
05061272 l     O .rodata	00000010 zeroes.4404
050542a8 l     F .text	000000bc __sbprintf
05061282 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
050545dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0505610c l     F .text	00000008 __fp_unlock
05056120 l     F .text	0000019c __sinit.part.1
050562bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
05061cc0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
05062104 l     O .rwdata	00000020 lc_ctype_charset
050620e4 l     O .rwdata	00000020 lc_message_charset
05062124 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
050612b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
050613e8 l     O .rodata	00000010 blanks.4332
050613d8 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
05059ff4 l     F .text	000000fc __sprint_r.part.0
05061408 l     O .rodata	00000010 blanks.4348
050613f8 l     O .rodata	00000010 zeroes.4349
0505b580 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0505cce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0505cdf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0505ce20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0505d08c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0505d16c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0505d258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0505d42c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05063464 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0505d84c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0505d980 l     F .text	00000034 alt_dev_reg
05062304 l     O .rwdata	00001060 jtag_uart_0
05063364 l     O .rwdata	0000002c accelerometer_spi
05063390 l     O .rwdata	00000054 video_pixel_buffer_dma_0
050633e4 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0505df4c l     F .text	00000210 altera_avalon_jtag_uart_irq
0505e15c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0505e990 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0505ff9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05060200 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
05060340 l     F .text	0000003c alt_get_errno
0506037c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
05046d68 g     F .text	00000634 _ZN7Cube_3D22vector_matrix_multiplyEv
050654a4 g     O .bss	00000004 alt_instruction_exception_handler
05041aec g     F .text	0000007c vid_draw_horiz_line
05058280 g     F .text	00000074 _mprec_log10
0505836c g     F .text	0000008c __any_on
0505bb1c g     F .text	00000054 _isatty_r
050612c0 g     O .rodata	00000028 __mprec_tinytens
05040420 g     F .text	0000007c LCD_DrawPoint
0505d368 g     F .text	0000007c alt_main
0504fd94 g     F .text	00000090 strcpy
0505f81c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0504fba8 g     F .text	000000c0 _puts_r
050658f4 g     O .bss	00000100 alt_irq
0504af3c g     F .text	00000014 fabs
0505bb70 g     F .text	00000060 _lseek_r
05041c54 g     F .text	0000006c vid_color_convert16_24
05063470 g       *ABS*	00000000 __flash_rwdata_start
0504daa8 g     F .text	00000088 .hidden __eqdf2
0504453c g     F .text	00000168 touch_enable_penirq
050659f4 g       *ABS*	00000000 __alt_heap_start
05040b0c g     F .text	0000013c LCD_Pattern_Horizon
0504fb6c g     F .text	0000003c printf
0505bd88 g     F .text	0000009c _wcrtomb_r
05058aa8 g     F .text	0000005c __sseek
0505645c g     F .text	00000010 __sinit
0505bc30 g     F .text	00000140 __swbuf_r
05056f24 g     F .text	0000007c _setlocale_r
050562c4 g     F .text	00000068 __sfmoreglue
0505d408 g     F .text	00000024 __malloc_unlock
05041728 g     F .text	00000158 vid_draw_box
0504b970 g     F .text	00000440 .hidden __divsf3
050435e0 g     F .text	00000264 vid_print_string_alpha
050654a0 g     O .bss	00000004 altera_avalon_timer_ts_freq
050572a0 g     F .text	0000015c memmove
05056444 g     F .text	00000018 _cleanup
050573fc g     F .text	000000a8 _Balloc
050614a0 g     O .rwdata	00000415 cour10_font_array
0504c690 g     F .text	00000070 .hidden __fixsfsi
0505ef84 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0504db30 g     F .text	000000dc .hidden __gtdf2
05041504 g     F .text	0000011c vid_move_block
05060594 g     F .text	00000024 altera_nios2_gen2_irq_init
05043f44 g     F .text	000000e8 vid_string_pixel_length_alpha
0505ef48 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
05040000 g     F .entry	0000001c __reset
05046588 g     F .text	000002b8 _ZN7Cube_3D24update_rotation_relativeEfi
0505ece4 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
05040020 g       *ABS*	00000000 __flash_exceptions_start
0504039c g     F .text	00000084 LCD_Clear
0505bac0 g     F .text	0000005c _fstat_r
05065474 g     O .bss	00000004 errno
0504af50 g     F .text	000001ec floor
05058a24 g     F .text	00000008 __seofread
05058db8 g     F .text	0000123c ___svfiprintf_internal_r
0506548c g     O .bss	00000004 alt_argv
0506b428 g       *ABS*	00000000 _gp
0505d81c g     F .text	00000030 usleep
0504c1ac g     F .text	000004e4 .hidden __subsf3
0505f118 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
05046038 g     F .text	000000f0 _ZN7Cube_3D27update_translation_relativeEfi
05043844 g     F .text	00000148 seperate_color_channels
05062184 g     O .rwdata	00000180 alt_fd_list
05048c64 g     F .text	0000076c __ieee754_rem_pio2
0506013c g     F .text	00000090 alt_find_dev
0504f8cc g     F .text	00000148 memcpy
05045070 g     F .text	00000360 _Z24accelerometer_controllerv
05056114 g     F .text	0000000c _cleanup_r
0504eca0 g     F .text	000000dc .hidden __floatsidf
0504247c g     F .text	0000073c vid_round_corner_points
05044190 g     F .text	0000006c Touch_UnInit
050602c4 g     F .text	0000007c alt_io_redirect
0505ca20 g     F .text	000000f4 .hidden __ltdf2
05060c28 g       *ABS*	00000000 __DTOR_END__
0504fc68 g     F .text	00000014 puts
050607f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
05040ee4 g     F .text	00000064 vid_clean_screen
0505895c g     F .text	00000074 __fpclassifyd
050581dc g     F .text	000000a4 __ratio
0505b564 g     F .text	0000001c __vfiprintf_internal
0505f1d4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
05041058 g     F .text	0000014c vid_scroll_string_init
0505e354 g     F .text	0000021c altera_avalon_jtag_uart_read
0504f098 g     F .text	00000014 malloc
0504fb3c g     F .text	00000030 _printf_r
0504402c g     F .text	00000164 Touch_Init
05040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0504b3ec g     F .text	00000064 .hidden __udivsi3
0505d0c8 g     F .text	000000a4 isatty
05061310 g     O .rodata	000000c8 __mprec_tens
0505f60c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
05056fa0 g     F .text	0000000c __locale_charset
050493d0 g     F .text	000004a4 __kernel_cos
05054454 g     F .text	00000034 vsnprintf
05060764 g     F .text	00000090 alt_icache_flush
05065470 g     O .bss	00000004 __malloc_top_pad
0504739c g     F .text	00000fa4 _ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_
05063440 g     O .rwdata	00000004 __mb_cur_max
05056fd0 g     F .text	0000000c _localeconv_r
05057808 g     F .text	0000003c __i2b
050568e0 g     F .text	000004bc __sfvwrite_r
050464e0 g     F .text	000000a8 _ZN7Cube_3D15update_rotationEfi
0504fc7c g     F .text	00000054 _sbrk_r
0505fb30 g     F .text	00000084 helper_plot_pixel
050444c8 g     F .text	00000034 touch_empty_fifo
0505bbd0 g     F .text	00000060 _read_r
05063458 g     O .rwdata	00000004 alt_max_fd
0505b7b4 g     F .text	000000f0 _fclose_r
050560dc g     F .text	00000030 fflush
0506546c g     O .bss	00000004 __malloc_max_sbrked_mem
0505cf0c g     F .text	00000180 alt_irq_register
0504a604 g     F .text	000002cc __kernel_sin
0504ed7c g     F .text	00000110 .hidden __extendsfdf2
0504c914 g     F .text	000008ac .hidden __adddf3
05057f84 g     F .text	0000010c __b2d
0505f208 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0505c4e8 g     F .text	00000538 .hidden __umoddi3
0505d294 g     F .text	000000d4 lseek
05063438 g     O .rwdata	00000004 _global_impure_ptr
05041f78 g     F .text	00000148 vid_draw_circle
050583f8 g     F .text	00000564 _realloc_r
050659f4 g       *ABS*	00000000 __bss_end
0505f330 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
0505d714 g     F .text	00000108 alt_tick
0505bf70 g     F .text	00000578 .hidden __udivdi3
0505ba1c g     F .text	00000024 _fputwc_r
05046960 g     F .text	000000f0 _ZN7Cube_3D23update_scaling_relativeEfi
050612e8 g     O .rodata	00000028 __mprec_bigtens
050575ec g     F .text	00000104 __s2b
05041d04 g     F .text	00000274 vid_draw_sloped_line
0505cb14 g     F .text	000000a8 .hidden __floatunsidf
05057cc4 g     F .text	00000060 __mcmp
0505647c g     F .text	00000018 __fp_lock_all
050420c0 g     F .text	000003bc vid_draw_round_corner_box
0505d678 g     F .text	0000009c alt_alarm_stop
05046840 g     F .text	00000078 _ZN7Cube_3D14update_scalingEfff
05065484 g     O .bss	00000004 alt_irq_active
05040c48 g     F .text	000000e4 LCD_Pattern_Vertical
050400fc g     F .exceptions	000000d8 alt_irq_handler
0506215c g     O .rwdata	00000028 alt_dev_null
05049874 g     F .text	00000d90 __kernel_rem_pio2
0505ff54 g     F .text	00000048 alt_dcache_flush_all
050576f0 g     F .text	00000068 __hi0bits
0505fa68 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
05044a0c g     F .text	00000070 touch_alarm_callback
0504ec20 g     F .text	00000080 .hidden __fixdfsi
050444fc g     F .text	00000040 touch_is_pen_pressed
05063470 g       *ABS*	00000000 __ram_rwdata_end
0504300c g     F .text	000003b4 vid_draw_triangle
050654bc g     O .bss	00000410 Cube
05063450 g     O .rwdata	00000008 alt_dev_list
0505d888 g     F .text	000000f8 write
0505eb78 g     F .text	00000020 alt_timestamp_freq
0505fbb4 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
050434ac g     F .text	00000134 CropImage16
050614a0 g       *ABS*	00000000 __ram_rodata_end
0505ce5c g     F .text	000000b0 fstat
0505ca20 g     F .text	000000f4 .hidden __ledf2
050411a4 g     F .text	00000360 vid_scroll_string
05040d60 g     F .text	0000006c myprintf
050446d8 g     F .text	00000334 touch_get_xy
05057a3c g     F .text	00000140 __pow5mult
0505a108 g     F .text	0000145c ___vfiprintf_internal_r
05065480 g     O .bss	00000004 __nlocale_changed
0504b450 g     F .text	00000058 .hidden __umodsi3
050443a4 g     F .text	00000124 touch_isr
050433c0 g     F .text	000000ec CopyImage16
050659f4 g       *ABS*	00000000 end
05065440 g     O .bss	00000004 accelerometer_dev
0505de98 g     F .text	000000b4 altera_avalon_jtag_uart_init
050401d4 g     F .exceptions	00000074 alt_instruction_exception_entry
05041880 g     F .text	000000f0 vid_print_char
05060c24 g       *ABS*	00000000 __CTOR_LIST__
05067100 g       *ABS*	00000000 __alt_stack_pointer
0505ea0c g     F .text	00000074 alt_avalon_timer_sc_init
0504f034 g     F .text	00000064 .hidden __clzsi2
050483a0 g     F .text	00000108 _Z11display_fpsm
0505e570 g     F .text	00000224 altera_avalon_jtag_uart_write
050489e8 g     F .text	000000ec cos
05042c0c g     F .text	00000054 min3
05040f48 g     F .text	000000cc vid_draw_line
0505646c g     F .text	00000004 __sfp_lock_acquire
050571bc g     F .text	000000e4 memchr
05052094 g     F .text	000021f8 ___vfprintf_internal_r
0504fcd0 g     F .text	00000058 _sprintf_r
050565d0 g     F .text	00000310 _free_r
05056fac g     F .text	00000010 __locale_mb_cur_max
050402e4 g     F .text	000000b8 LCD_SetCursor
050468b8 g     F .text	000000a8 _ZN7Cube_3D14update_scalingEfi
05060a70 g     F .text	00000180 __call_exitprocs
0504554c g     F .text	00000084 _Z35helper_plot_pixel_enhanced_clippingjiiiii
0506547c g     O .bss	00000004 __mlocale_changed
05063430 g     O .rwdata	00000004 __malloc_sbrk_base
05040248 g     F .text	0000004c _start
05065494 g     O .bss	00000004 _alt_tick_rate
05065464 g     O .bss	00000004 pixel_buf_dma_dev
05048ad4 g     F .text	000000f0 sin
050446a4 g     F .text	00000034 touch_clear_input
05057b7c g     F .text	00000148 __lshift
0505e794 g     F .text	000001fc alt_avalon_spi_command
05065498 g     O .bss	00000004 _alt_nticks
05042cc4 g     F .text	00000104 vid_put_pixel_in_span_map
0505d468 g     F .text	000000fc read
0505d9ec g     F .text	00000348 alt_sys_init
0505ebd4 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
0504c700 g     F .text	00000124 .hidden __floatsisf
05058be8 g     F .text	000001d0 __ssprint_r
05060958 g     F .text	00000118 __register_exitproc
05048340 g     F .text	00000060 _Z13display_digith
05057844 g     F .text	000001f8 __multiply
05041a54 g     F .text	00000098 vid_paint_block
0505e1fc g     F .text	00000068 altera_avalon_jtag_uart_close
050614a0 g       *ABS*	00000000 __ram_rwdata_start
05060c28 g       *ABS*	00000000 __ram_rodata_start
050658cc g     O .bss	00000028 __malloc_current_mallinfo
05058090 g     F .text	0000014c __d2b
05045f90 g     F .text	000000a8 _ZN7Cube_3D18update_translationEfi
05041bb4 g     F .text	000000a0 vid_color_convert24_16
05045954 g     F .text	000005c4 _ZN7Cube_3DC1Ev
0505dd34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
050606c0 g     F .text	000000a4 alt_get_fd
0505fdfc g     F .text	00000158 alt_busy_sleep
0505edb0 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
0505b69c g     F .text	00000054 _close_r
05043b00 g     F .text	0000025c alpha_blending
050608dc g     F .text	0000007c memcmp
0505ddf4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
050659f4 g       *ABS*	00000000 __alt_stack_base
0505de44 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05054488 g     F .text	00000154 __swsetup_r
0504d1c0 g     F .text	000008e8 .hidden __divdf3
0505632c g     F .text	00000118 __sfp
050582f4 g     F .text	00000078 __copybits
050618b8 g     O .rwdata	00000408 __malloc_av_
05056478 g     F .text	00000004 __sinit_lock_release
05054364 g     F .text	000000f0 _vsnprintf_r
0504dc0c g     F .text	00000718 .hidden __muldf3
050589d0 g     F .text	00000054 __sread
050605b8 g     F .text	00000108 alt_find_file
0505ffd8 g     F .text	000000a4 alt_dev_llist_insert
0505d3e4 g     F .text	00000024 __malloc_lock
05041cc0 g     F .text	00000044 vid_copy_line_to_frame_buffer
0505d5c8 g     F .text	000000b0 sbrk
0504febc g     F .text	000021d8 ___svfprintf_internal_r
05056080 g     F .text	0000005c _fflush_r
0505b6f0 g     F .text	000000c4 _calloc_r
05065440 g       *ABS*	00000000 __bss_start
0504049c g     F .text	00000670 LCD_Init
0504fa14 g     F .text	00000128 memset
050484a8 g     F .text	00000404 main
05045f18 g     F .text	00000078 _ZN7Cube_3D18update_translationEfff
05065490 g     O .bss	00000004 alt_envp
05065468 g     O .bss	00000004 __malloc_max_total_mem
0505f174 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
05040dcc g     F .text	00000088 myprintf_hexarray
0505dd94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
05045014 g     F .text	0000005c _Z18init_accelerometerv
0505bd70 g     F .text	00000018 __swbuf
05058b04 g     F .text	00000008 __sclose
05067100 g       *ABS*	00000000 __alt_heap_limit
05043d5c g     F .text	000001e8 vid_print_char_alpha
0505b8a4 g     F .text	00000014 fclose
0504ee8c g     F .text	000001a8 .hidden __truncdfsf2
05063428 g     O .rwdata	00000004 cour10_font
0505ea80 g     F .text	00000078 alt_timestamp_start
050547dc g     F .text	00001688 _dtoa_r
0504f0c0 g     F .text	0000080c _malloc_r
0505bee4 g     F .text	00000030 __ascii_wctomb
0506345c g     O .rwdata	00000004 alt_errno
05056d9c g     F .text	000000c4 _fwalk
0504b2f4 g     F .text	00000084 .hidden __divsi3
05040294 g     F .text	00000050 Delay_Ms
050564ac g     F .text	00000124 _malloc_trim_r
05060c28 g       *ABS*	00000000 __CTOR_END__
0504bdb0 g     F .text	000003fc .hidden __mulsf3
05058b0c g     F .text	000000dc strcmp
05043abc g     F .text	00000044 read_from_frame
05060c28 g       *ABS*	00000000 __flash_rodata_start
05060c28 g       *ABS*	00000000 __DTOR_LIST__
05048bc4 g     F .text	000000a0 tan
05041a14 g     F .text	00000040 vid_get_pixel
0504b2d8 g     F .text	0000001c copysign
05045954 g     F .text	000005c4 _ZN7Cube_3DC2Ev
0504daa8 g     F .text	00000088 .hidden __nedf2
0505d9b4 g     F .text	00000038 alt_irq_init
0505d564 g     F .text	00000064 alt_release_fd
0504fd28 g     F .text	0000006c sprintf
0506110c g     O .rodata	00000100 .hidden __clz_tab
05040d2c g     F .text	00000034 debug_output
05065478 g     O .bss	00000004 _PathLocale
05060890 g     F .text	00000014 atexit
0505b63c g     F .text	00000060 _write_r
05056fdc g     F .text	00000018 setlocale
05048930  w    F .text	000000b8 _ZN7Cube_3D19calculate_renderingEv
0506343c g     O .rwdata	00000004 _impure_ptr
05065488 g     O .bss	00000004 alt_argc
05055e64 g     F .text	0000021c __sflush_r
0504b13c g     F .text	0000019c scalbn
0506549c g     O .bss	00000004 altera_avalon_timer_ts_base
050600dc g     F .text	00000060 _do_dtors
05056fc8 g     F .text	00000008 __locale_cjk_lang
05040e54 g     F .text	00000090 myprintf_dwordarray
05044ee0 g     F .text	00000134 _Z14evaluate_swipePvP5SWIPE
05040020 g       .exceptions	00000000 alt_irq_entry
05057f20 g     F .text	00000064 __ulp
05056494 g     F .text	00000018 __fp_unlock_all
05044238 g     F .text	0000016c Touch_GetXY
05063448 g     O .rwdata	00000008 alt_fs_list
05041620 g     F .text	00000108 vid_print_string
05040020 g       *ABS*	00000000 __ram_exceptions_start
0505eb98 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
05056ff4 g     F .text	0000000c localeconv
0505eaf8 g     F .text	00000080 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
05063470 g       *ABS*	00000000 _edata
050659f4 g       *ABS*	00000000 _end
05042bb8 g     F .text	00000054 max3
0505b8b8 g     F .text	00000164 __fputwc
05040248 g       *ABS*	00000000 __ram_exceptions_end
0505e264 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
05044e5c g     F .text	00000084 _Z16is_point_in_rectP5POINTP4RECT
05041b68 g     F .text	0000004c vid_merge_colors
05058a2c g     F .text	0000007c __swrite
05063434 g     O .rwdata	00000004 __malloc_trim_threshold
05056fbc g     F .text	0000000c __locale_msgcharset
050608a4 g     F .text	00000038 exit
05056e60 g     F .text	000000c4 _fwalk_reent
0504c824 g     F .text	000000f0 .hidden __floatunsisf
05057d24 g     F .text	000001fc __mdiff
0504b378 g     F .text	00000074 .hidden __modsi3
0505ee7c g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
05067100 g       *ABS*	00000000 __alt_data_end
05040020 g     F .exceptions	00000000 alt_exception
05056470 g     F .text	00000004 __sfp_lock_release
05044a7c g     F .text	000000dc touch_xy_transform
05041970 g     F .text	000000a4 vid_set_pixel
05060bf0 g     F .text	00000034 _exit
0505cbbc g     F .text	0000012c alt_alarm_start
05041014 g     F .text	00000044 vid_scroll_string_quit
0505ec18 g     F .text	00000068 alt_up_accelerometer_spi_read
0505ec80 g     F .text	00000064 alt_up_accelerometer_spi_write
05057000 g     F .text	000001bc __smakebuf_r
0504fe24 g     F .text	00000098 strlen
05060440 g     F .text	00000154 open
0504db30 g     F .text	000000dc .hidden __gedf2
05063444 g     O .rwdata	00000004 __wctomb
0505a0f0 g     F .text	00000018 __sprint_r
050601cc g     F .text	00000034 alt_icache_flush_all
05063460 g     O .rwdata	00000004 alt_priority_mask
05046128 g     F .text	000003b8 _ZN7Cube_3D15update_rotationEfff
050455d0 g     F .text	00000384 _Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii
0505428c g     F .text	0000001c __vfprintf_internal
050453d0 g     F .text	0000017c _Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi
0505bf14 g     F .text	0000005c _wctomb_r
05044c68 g     F .text	000001f4 _Z13GUI_desk_initP4RECTS0_S0_
0504e324 g     F .text	000008fc .hidden __subdf3
05042dc8 g     F .text	00000244 vid_bres_scan_edges
05057758 g     F .text	000000b0 __lo0bits
05046a50 g     F .text	00000318 _ZN7Cube_3D13display_frameEv
05063468 g     O .rwdata	00000008 alt_alarm_list
0504a8d0 g     F .text	0000066c __kernel_tan
05042c60 g     F .text	00000064 max_diff3
0506007c g     F .text	00000060 _do_ctors
0504398c g     F .text	00000130 merge_color_channels
050654a8 g     O .bss	00000014 Display
0505be24 g     F .text	000000c0 wcrtomb
0505cd24 g     F .text	000000d0 close
0504b4a8 g     F .text	000004c8 .hidden __addsf3
0505d1d4 g     F .text	00000084 alt_load
050441fc g     F .text	0000003c Touch_EmptyFifo
05044b58 g     F .text	00000110 _Z16GUI_show_welcomev
0505ba40 g     F .text	00000080 fputwc
0504f0ac g     F .text	00000014 free
05056474 g     F .text	00000004 __sinit_lock_acquire
050574cc g     F .text	00000120 __multadd
050574a4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

05040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 504000c:	00bffd16 	blt	zero,r2,5040004 <_gp+0xfffd4bdc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5040010:	00414134 	movhi	at,1284
    ori r1, r1, %lo(_start)
 5040014:	08409214 	ori	at,at,584
    jmp r1
 5040018:	0800683a 	jmp	at
 504001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>

Disassembly of section .exceptions:

05040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 504002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 504003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 504004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 504005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 504006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 504007c:	10000326 	beq	r2,zero,504008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5040080:	20000226 	beq	r4,zero,504008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5040084:	50400fc0 	call	50400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5040088:	00000706 	br	50400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 504008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5040098:	50401d40 	call	50401d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 504009c:	1000021e 	bne	r2,zero,50400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50400f8:	ef80083a 	eret

050400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50400fc:	defff904 	addi	sp,sp,-28
 5040100:	dfc00615 	stw	ra,24(sp)
 5040104:	df000515 	stw	fp,20(sp)
 5040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 504010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5040110:	0005313a 	rdctl	r2,ipending
 5040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 504011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5040124:	00800044 	movi	r2,1
 5040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 504012c:	e0fffb17 	ldw	r3,-20(fp)
 5040130:	e0bffc17 	ldw	r2,-16(fp)
 5040134:	1884703a 	and	r2,r3,r2
 5040138:	10001526 	beq	r2,zero,5040190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 504013c:	008141b4 	movhi	r2,1286
 5040140:	10963d04 	addi	r2,r2,22772
 5040144:	e0fffd17 	ldw	r3,-12(fp)
 5040148:	180690fa 	slli	r3,r3,3
 504014c:	10c5883a 	add	r2,r2,r3
 5040150:	10c00017 	ldw	r3,0(r2)
 5040154:	008141b4 	movhi	r2,1286
 5040158:	10963d04 	addi	r2,r2,22772
 504015c:	e13ffd17 	ldw	r4,-12(fp)
 5040160:	200890fa 	slli	r4,r4,3
 5040164:	1105883a 	add	r2,r2,r4
 5040168:	10800104 	addi	r2,r2,4
 504016c:	10800017 	ldw	r2,0(r2)
 5040170:	e17ffd17 	ldw	r5,-12(fp)
 5040174:	1009883a 	mov	r4,r2
 5040178:	183ee83a 	callr	r3
#endif
        break;
 504017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5040180:	0005313a 	rdctl	r2,ipending
 5040184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5040188:	e0bfff17 	ldw	r2,-4(fp)
 504018c:	00000706 	br	50401ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 5040190:	e0bffc17 	ldw	r2,-16(fp)
 5040194:	1085883a 	add	r2,r2,r2
 5040198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 504019c:	e0bffd17 	ldw	r2,-12(fp)
 50401a0:	10800044 	addi	r2,r2,1
 50401a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50401a8:	003fe006 	br	504012c <_gp+0xfffd4d04>

    active = alt_irq_pending ();
 50401ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50401b0:	e0bffb17 	ldw	r2,-20(fp)
 50401b4:	103fda1e 	bne	r2,zero,5040120 <_gp+0xfffd4cf8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50401b8:	0001883a 	nop
}
 50401bc:	0001883a 	nop
 50401c0:	e037883a 	mov	sp,fp
 50401c4:	dfc00117 	ldw	ra,4(sp)
 50401c8:	df000017 	ldw	fp,0(sp)
 50401cc:	dec00204 	addi	sp,sp,8
 50401d0:	f800283a 	ret

050401d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50401d4:	defffb04 	addi	sp,sp,-20
 50401d8:	dfc00415 	stw	ra,16(sp)
 50401dc:	df000315 	stw	fp,12(sp)
 50401e0:	df000304 	addi	fp,sp,12
 50401e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 50401e8:	000531fa 	rdctl	r2,exception
 50401ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 50401f0:	e0bffd17 	ldw	r2,-12(fp)
 50401f4:	10801f0c 	andi	r2,r2,124
 50401f8:	1004d0ba 	srli	r2,r2,2
 50401fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 5040200:	0005333a 	rdctl	r2,badaddr
 5040204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 5040208:	d0a81f17 	ldw	r2,-24452(gp)
 504020c:	10000726 	beq	r2,zero,504022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 5040210:	d0a81f17 	ldw	r2,-24452(gp)
 5040214:	e0fffd17 	ldw	r3,-12(fp)
 5040218:	e1bffe17 	ldw	r6,-8(fp)
 504021c:	e17fff17 	ldw	r5,-4(fp)
 5040220:	1809883a 	mov	r4,r3
 5040224:	103ee83a 	callr	r2
 5040228:	00000206 	br	5040234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 504022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 5040230:	0005883a 	mov	r2,zero
}
 5040234:	e037883a 	mov	sp,fp
 5040238:	dfc00117 	ldw	ra,4(sp)
 504023c:	df000017 	ldw	fp,0(sp)
 5040240:	dec00204 	addi	sp,sp,8
 5040244:	f800283a 	ret

Disassembly of section .text:

05040248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 5040248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 504024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 5040250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 5040254:	00bffd16 	blt	zero,r2,504024c <_gp+0xfffd4e24>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5040258:	06c141b4 	movhi	sp,1286
    ori sp, sp, %lo(__alt_stack_pointer)
 504025c:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
 5040260:	068141b4 	movhi	gp,1286
    ori gp, gp, %lo(_gp)
 5040264:	d6ad0a14 	ori	gp,gp,46120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5040268:	008141b4 	movhi	r2,1286
    ori r2, r2, %lo(__bss_start)
 504026c:	10951014 	ori	r2,r2,21568

    movhi r3, %hi(__bss_end)
 5040270:	00c141b4 	movhi	r3,1286
    ori r3, r3, %lo(__bss_end)
 5040274:	18d67d14 	ori	r3,r3,23028

    beq r2, r3, 1f
 5040278:	10c00326 	beq	r2,r3,5040288 <_start+0x40>

0:
    stw zero, (r2)
 504027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 5040280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5040284:	10fffd36 	bltu	r2,r3,504027c <_gp+0xfffd4e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5040288:	505d1d40 	call	505d1d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 504028c:	505d3680 	call	505d368 <alt_main>

05040290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 5040290:	003fff06 	br	5040290 <_gp+0xfffd4e68>

05040294 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 5040294:	defffd04 	addi	sp,sp,-12
 5040298:	dfc00215 	stw	ra,8(sp)
 504029c:	df000115 	stw	fp,4(sp)
 50402a0:	df000104 	addi	fp,sp,4
 50402a4:	2005883a 	mov	r2,r4
 50402a8:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 50402ac:	00000206 	br	50402b8 <Delay_Ms+0x24>
    {
        usleep(1000);
 50402b0:	0100fa04 	movi	r4,1000
 50402b4:	505d81c0 	call	505d81c <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 50402b8:	e0bfff0b 	ldhu	r2,-4(fp)
 50402bc:	10ffffc4 	addi	r3,r2,-1
 50402c0:	e0ffff0d 	sth	r3,-4(fp)
 50402c4:	10bfffcc 	andi	r2,r2,65535
 50402c8:	103ff91e 	bne	r2,zero,50402b0 <_gp+0xfffd4e88>
    {
        usleep(1000);
    }
}
 50402cc:	0001883a 	nop
 50402d0:	e037883a 	mov	sp,fp
 50402d4:	dfc00117 	ldw	ra,4(sp)
 50402d8:	df000017 	ldw	fp,0(sp)
 50402dc:	dec00204 	addi	sp,sp,8
 50402e0:	f800283a 	ret

050402e4 <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 50402e4:	defffd04 	addi	sp,sp,-12
 50402e8:	df000215 	stw	fp,8(sp)
 50402ec:	df000204 	addi	fp,sp,8
 50402f0:	2007883a 	mov	r3,r4
 50402f4:	2805883a 	mov	r2,r5
 50402f8:	e0fffe0d 	sth	r3,-8(fp)
 50402fc:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
 5040300:	00c00a84 	movi	r3,42
 5040304:	00810034 	movhi	r2,1024
 5040308:	10801404 	addi	r2,r2,80
 504030c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
 5040310:	e0bffe0b 	ldhu	r2,-8(fp)
 5040314:	1004d23a 	srli	r2,r2,8
 5040318:	10ffffcc 	andi	r3,r2,65535
 504031c:	00810034 	movhi	r2,1024
 5040320:	10801504 	addi	r2,r2,84
 5040324:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 5040328:	e0bffe0b 	ldhu	r2,-8(fp)
 504032c:	10c03fcc 	andi	r3,r2,255
 5040330:	00810034 	movhi	r2,1024
 5040334:	10801504 	addi	r2,r2,84
 5040338:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 504033c:	00c00ac4 	movi	r3,43
 5040340:	00810034 	movhi	r2,1024
 5040344:	10801404 	addi	r2,r2,80
 5040348:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
 504034c:	e0bfff0b 	ldhu	r2,-4(fp)
 5040350:	1004d23a 	srli	r2,r2,8
 5040354:	10ffffcc 	andi	r3,r2,65535
 5040358:	00810034 	movhi	r2,1024
 504035c:	10801504 	addi	r2,r2,84
 5040360:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 5040364:	e0bfff0b 	ldhu	r2,-4(fp)
 5040368:	10c03fcc 	andi	r3,r2,255
 504036c:	00810034 	movhi	r2,1024
 5040370:	10801504 	addi	r2,r2,84
 5040374:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 5040378:	00c00b04 	movi	r3,44
 504037c:	00810034 	movhi	r2,1024
 5040380:	10801404 	addi	r2,r2,80
 5040384:	10c00035 	stwio	r3,0(r2)
}
 5040388:	0001883a 	nop
 504038c:	e037883a 	mov	sp,fp
 5040390:	df000017 	ldw	fp,0(sp)
 5040394:	dec00104 	addi	sp,sp,4
 5040398:	f800283a 	ret

0504039c <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 504039c:	defffc04 	addi	sp,sp,-16
 50403a0:	dfc00315 	stw	ra,12(sp)
 50403a4:	df000215 	stw	fp,8(sp)
 50403a8:	df000204 	addi	fp,sp,8
 50403ac:	2005883a 	mov	r2,r4
 50403b0:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 50403b4:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 50403b8:	000b883a 	mov	r5,zero
 50403bc:	0009883a 	mov	r4,zero
 50403c0:	50402e40 	call	50402e4 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 50403c4:	00c00b04 	movi	r3,44
 50403c8:	00810034 	movhi	r2,1024
 50403cc:	10801404 	addi	r2,r2,80
 50403d0:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 50403d4:	e03ffe15 	stw	zero,-8(fp)
 50403d8:	00000706 	br	50403f8 <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
 50403dc:	e0ffff0b 	ldhu	r3,-4(fp)
 50403e0:	00810034 	movhi	r2,1024
 50403e4:	10801504 	addi	r2,r2,84
 50403e8:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 50403ec:	e0bffe17 	ldw	r2,-8(fp)
 50403f0:	10800044 	addi	r2,r2,1
 50403f4:	e0bffe15 	stw	r2,-8(fp)
 50403f8:	e0fffe17 	ldw	r3,-8(fp)
 50403fc:	00800074 	movhi	r2,1
 5040400:	108affc4 	addi	r2,r2,11263
 5040404:	10fff52e 	bgeu	r2,r3,50403dc <_gp+0xfffd4fb4>
        {
        	LCD_WR_DATA(Color);
        }
}
 5040408:	0001883a 	nop
 504040c:	e037883a 	mov	sp,fp
 5040410:	dfc00117 	ldw	ra,4(sp)
 5040414:	df000017 	ldw	fp,0(sp)
 5040418:	dec00204 	addi	sp,sp,8
 504041c:	f800283a 	ret

05040420 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 5040420:	defffb04 	addi	sp,sp,-20
 5040424:	dfc00415 	stw	ra,16(sp)
 5040428:	df000315 	stw	fp,12(sp)
 504042c:	df000304 	addi	fp,sp,12
 5040430:	2807883a 	mov	r3,r5
 5040434:	3005883a 	mov	r2,r6
 5040438:	e13ffd0d 	sth	r4,-12(fp)
 504043c:	e0fffe0d 	sth	r3,-8(fp)
 5040440:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(239-y,x); //modificato per rigirare di 90 gradi il display
 5040444:	e0bffe0b 	ldhu	r2,-8(fp)
 5040448:	00c03bc4 	movi	r3,239
 504044c:	1885c83a 	sub	r2,r3,r2
 5040450:	10bfffcc 	andi	r2,r2,65535
 5040454:	e0fffd0b 	ldhu	r3,-12(fp)
 5040458:	180b883a 	mov	r5,r3
 504045c:	1009883a 	mov	r4,r2
 5040460:	50402e40 	call	50402e4 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 5040464:	00c00b04 	movi	r3,44
 5040468:	00810034 	movhi	r2,1024
 504046c:	10801404 	addi	r2,r2,80
 5040470:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
 5040474:	e0ffff0b 	ldhu	r3,-4(fp)
 5040478:	00810034 	movhi	r2,1024
 504047c:	10801504 	addi	r2,r2,84
 5040480:	10c00035 	stwio	r3,0(r2)
}
 5040484:	0001883a 	nop
 5040488:	e037883a 	mov	sp,fp
 504048c:	dfc00117 	ldw	ra,4(sp)
 5040490:	df000017 	ldw	fp,0(sp)
 5040494:	dec00204 	addi	sp,sp,8
 5040498:	f800283a 	ret

0504049c <LCD_Init>:
void LCD_Init()
{
 504049c:	defffe04 	addi	sp,sp,-8
 50404a0:	dfc00115 	stw	ra,4(sp)
 50404a4:	df000015 	stw	fp,0(sp)
 50404a8:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 50404ac:	00c00044 	movi	r3,1
 50404b0:	00810034 	movhi	r2,1024
 50404b4:	10801004 	addi	r2,r2,64
 50404b8:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 50404bc:	01000044 	movi	r4,1
 50404c0:	50402940 	call	5040294 <Delay_Ms>
	Clr_LCD_RST;
 50404c4:	0007883a 	mov	r3,zero
 50404c8:	00810034 	movhi	r2,1024
 50404cc:	10801004 	addi	r2,r2,64
 50404d0:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 50404d4:	01000284 	movi	r4,10
 50404d8:	50402940 	call	5040294 <Delay_Ms>
	Set_LCD_RST;
 50404dc:	00c00044 	movi	r3,1
 50404e0:	00810034 	movhi	r2,1024
 50404e4:	10801004 	addi	r2,r2,64
 50404e8:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 50404ec:	01001e04 	movi	r4,120
 50404f0:	50402940 	call	5040294 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 50404f4:	00c00444 	movi	r3,17
 50404f8:	00810034 	movhi	r2,1024
 50404fc:	10801404 	addi	r2,r2,80
 5040500:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
 5040504:	00c033c4 	movi	r3,207
 5040508:	00810034 	movhi	r2,1024
 504050c:	10801404 	addi	r2,r2,80
 5040510:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040514:	0007883a 	mov	r3,zero
 5040518:	00810034 	movhi	r2,1024
 504051c:	10801504 	addi	r2,r2,84
 5040520:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
 5040524:	00c02044 	movi	r3,129
 5040528:	00810034 	movhi	r2,1024
 504052c:	10801504 	addi	r2,r2,84
 5040530:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
 5040534:	00c03004 	movi	r3,192
 5040538:	00810034 	movhi	r2,1024
 504053c:	10801504 	addi	r2,r2,84
 5040540:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
 5040544:	00c03b44 	movi	r3,237
 5040548:	00810034 	movhi	r2,1024
 504054c:	10801404 	addi	r2,r2,80
 5040550:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
 5040554:	00c01904 	movi	r3,100
 5040558:	00810034 	movhi	r2,1024
 504055c:	10801504 	addi	r2,r2,84
 5040560:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
 5040564:	00c000c4 	movi	r3,3
 5040568:	00810034 	movhi	r2,1024
 504056c:	10801504 	addi	r2,r2,84
 5040570:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
 5040574:	00c00484 	movi	r3,18
 5040578:	00810034 	movhi	r2,1024
 504057c:	10801504 	addi	r2,r2,84
 5040580:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
 5040584:	00c02044 	movi	r3,129
 5040588:	00810034 	movhi	r2,1024
 504058c:	10801504 	addi	r2,r2,84
 5040590:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
 5040594:	00c03a04 	movi	r3,232
 5040598:	00810034 	movhi	r2,1024
 504059c:	10801404 	addi	r2,r2,80
 50405a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
 50405a4:	00c02144 	movi	r3,133
 50405a8:	00810034 	movhi	r2,1024
 50405ac:	10801504 	addi	r2,r2,84
 50405b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 50405b4:	00c00044 	movi	r3,1
 50405b8:	00810034 	movhi	r2,1024
 50405bc:	10801504 	addi	r2,r2,84
 50405c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
 50405c4:	00c1e604 	movi	r3,1944
 50405c8:	00810034 	movhi	r2,1024
 50405cc:	10801504 	addi	r2,r2,84
 50405d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
 50405d4:	00c032c4 	movi	r3,203
 50405d8:	00810034 	movhi	r2,1024
 50405dc:	10801404 	addi	r2,r2,80
 50405e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
 50405e4:	00c00e44 	movi	r3,57
 50405e8:	00810034 	movhi	r2,1024
 50405ec:	10801504 	addi	r2,r2,84
 50405f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
 50405f4:	00c00b04 	movi	r3,44
 50405f8:	00810034 	movhi	r2,1024
 50405fc:	10801504 	addi	r2,r2,84
 5040600:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040604:	0007883a 	mov	r3,zero
 5040608:	00810034 	movhi	r2,1024
 504060c:	10801504 	addi	r2,r2,84
 5040610:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 5040614:	00c00d04 	movi	r3,52
 5040618:	00810034 	movhi	r2,1024
 504061c:	10801504 	addi	r2,r2,84
 5040620:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
 5040624:	00c00084 	movi	r3,2
 5040628:	00810034 	movhi	r2,1024
 504062c:	10801504 	addi	r2,r2,84
 5040630:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
 5040634:	00c03dc4 	movi	r3,247
 5040638:	00810034 	movhi	r2,1024
 504063c:	10801404 	addi	r2,r2,80
 5040640:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 5040644:	00c00804 	movi	r3,32
 5040648:	00810034 	movhi	r2,1024
 504064c:	10801504 	addi	r2,r2,84
 5040650:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
 5040654:	00c03a84 	movi	r3,234
 5040658:	00810034 	movhi	r2,1024
 504065c:	10801404 	addi	r2,r2,80
 5040660:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040664:	0007883a 	mov	r3,zero
 5040668:	00810034 	movhi	r2,1024
 504066c:	10801504 	addi	r2,r2,84
 5040670:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040674:	0007883a 	mov	r3,zero
 5040678:	00810034 	movhi	r2,1024
 504067c:	10801504 	addi	r2,r2,84
 5040680:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
 5040684:	00c02c44 	movi	r3,177
 5040688:	00810034 	movhi	r2,1024
 504068c:	10801404 	addi	r2,r2,80
 5040690:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040694:	0007883a 	mov	r3,zero
 5040698:	00810034 	movhi	r2,1024
 504069c:	10801504 	addi	r2,r2,84
 50406a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
 50406a4:	00c006c4 	movi	r3,27
 50406a8:	00810034 	movhi	r2,1024
 50406ac:	10801504 	addi	r2,r2,84
 50406b0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
 50406b4:	00c02d84 	movi	r3,182
 50406b8:	00810034 	movhi	r2,1024
 50406bc:	10801404 	addi	r2,r2,80
 50406c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
 50406c4:	00c00284 	movi	r3,10
 50406c8:	00810034 	movhi	r2,1024
 50406cc:	10801504 	addi	r2,r2,84
 50406d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
 50406d4:	00c02884 	movi	r3,162
 50406d8:	00810034 	movhi	r2,1024
 50406dc:	10801504 	addi	r2,r2,84
 50406e0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
 50406e4:	00c03004 	movi	r3,192
 50406e8:	00810034 	movhi	r2,1024
 50406ec:	10801404 	addi	r2,r2,80
 50406f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 50406f4:	00c00144 	movi	r3,5
 50406f8:	00810034 	movhi	r2,1024
 50406fc:	10801504 	addi	r2,r2,84
 5040700:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
 5040704:	00c03044 	movi	r3,193
 5040708:	00810034 	movhi	r2,1024
 504070c:	10801404 	addi	r2,r2,80
 5040710:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 5040714:	00c00444 	movi	r3,17
 5040718:	00810034 	movhi	r2,1024
 504071c:	10801504 	addi	r2,r2,84
 5040720:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
 5040724:	00c03144 	movi	r3,197
 5040728:	00810034 	movhi	r2,1024
 504072c:	10801404 	addi	r2,r2,80
 5040730:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
 5040734:	00c01144 	movi	r3,69
 5040738:	00810034 	movhi	r2,1024
 504073c:	10801504 	addi	r2,r2,84
 5040740:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
 5040744:	00c01144 	movi	r3,69
 5040748:	00810034 	movhi	r2,1024
 504074c:	10801504 	addi	r2,r2,84
 5040750:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
 5040754:	00c031c4 	movi	r3,199
 5040758:	00810034 	movhi	r2,1024
 504075c:	10801404 	addi	r2,r2,80
 5040760:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
 5040764:	00c02884 	movi	r3,162
 5040768:	00810034 	movhi	r2,1024
 504076c:	10801504 	addi	r2,r2,84
 5040770:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
 5040774:	00c00d84 	movi	r3,54
 5040778:	00810034 	movhi	r2,1024
 504077c:	10801404 	addi	r2,r2,80
 5040780:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
 5040784:	00c00204 	movi	r3,8
 5040788:	00810034 	movhi	r2,1024
 504078c:	10801504 	addi	r2,r2,84
 5040790:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 5040794:	00c03c84 	movi	r3,242
 5040798:	00810034 	movhi	r2,1024
 504079c:	10801404 	addi	r2,r2,80
 50407a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 50407a4:	0007883a 	mov	r3,zero
 50407a8:	00810034 	movhi	r2,1024
 50407ac:	10801504 	addi	r2,r2,84
 50407b0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 50407b4:	00c00984 	movi	r3,38
 50407b8:	00810034 	movhi	r2,1024
 50407bc:	10801404 	addi	r2,r2,80
 50407c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 50407c4:	00c00044 	movi	r3,1
 50407c8:	00810034 	movhi	r2,1024
 50407cc:	10801504 	addi	r2,r2,84
 50407d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
 50407d4:	00c03804 	movi	r3,224
 50407d8:	00810034 	movhi	r2,1024
 50407dc:	10801404 	addi	r2,r2,80
 50407e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
 50407e4:	00c003c4 	movi	r3,15
 50407e8:	00810034 	movhi	r2,1024
 50407ec:	10801504 	addi	r2,r2,84
 50407f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
 50407f4:	00c00984 	movi	r3,38
 50407f8:	00810034 	movhi	r2,1024
 50407fc:	10801504 	addi	r2,r2,84
 5040800:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
 5040804:	00c00904 	movi	r3,36
 5040808:	00810034 	movhi	r2,1024
 504080c:	10801504 	addi	r2,r2,84
 5040810:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 5040814:	00c002c4 	movi	r3,11
 5040818:	00810034 	movhi	r2,1024
 504081c:	10801504 	addi	r2,r2,84
 5040820:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
 5040824:	00c00384 	movi	r3,14
 5040828:	00810034 	movhi	r2,1024
 504082c:	10801504 	addi	r2,r2,84
 5040830:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 5040834:	00c00204 	movi	r3,8
 5040838:	00810034 	movhi	r2,1024
 504083c:	10801504 	addi	r2,r2,84
 5040840:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
 5040844:	00c012c4 	movi	r3,75
 5040848:	00810034 	movhi	r2,1024
 504084c:	10801504 	addi	r2,r2,84
 5040850:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
 5040854:	00c02a04 	movi	r3,168
 5040858:	00810034 	movhi	r2,1024
 504085c:	10801504 	addi	r2,r2,84
 5040860:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
 5040864:	00c00ec4 	movi	r3,59
 5040868:	00810034 	movhi	r2,1024
 504086c:	10801504 	addi	r2,r2,84
 5040870:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
 5040874:	00c00284 	movi	r3,10
 5040878:	00810034 	movhi	r2,1024
 504087c:	10801504 	addi	r2,r2,84
 5040880:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
 5040884:	00c00504 	movi	r3,20
 5040888:	00810034 	movhi	r2,1024
 504088c:	10801504 	addi	r2,r2,84
 5040890:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
 5040894:	00c00184 	movi	r3,6
 5040898:	00810034 	movhi	r2,1024
 504089c:	10801504 	addi	r2,r2,84
 50408a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 50408a4:	00c00404 	movi	r3,16
 50408a8:	00810034 	movhi	r2,1024
 50408ac:	10801504 	addi	r2,r2,84
 50408b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 50408b4:	00c00244 	movi	r3,9
 50408b8:	00810034 	movhi	r2,1024
 50408bc:	10801504 	addi	r2,r2,84
 50408c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 50408c4:	0007883a 	mov	r3,zero
 50408c8:	00810034 	movhi	r2,1024
 50408cc:	10801504 	addi	r2,r2,84
 50408d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 50408d4:	00c03844 	movi	r3,225
 50408d8:	00810034 	movhi	r2,1024
 50408dc:	10801404 	addi	r2,r2,80
 50408e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 50408e4:	0007883a 	mov	r3,zero
 50408e8:	00810034 	movhi	r2,1024
 50408ec:	10801504 	addi	r2,r2,84
 50408f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
 50408f4:	00c00704 	movi	r3,28
 50408f8:	00810034 	movhi	r2,1024
 50408fc:	10801504 	addi	r2,r2,84
 5040900:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 5040904:	00c00804 	movi	r3,32
 5040908:	00810034 	movhi	r2,1024
 504090c:	10801504 	addi	r2,r2,84
 5040910:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
 5040914:	00c00104 	movi	r3,4
 5040918:	00810034 	movhi	r2,1024
 504091c:	10801504 	addi	r2,r2,84
 5040920:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 5040924:	00c00404 	movi	r3,16
 5040928:	00810034 	movhi	r2,1024
 504092c:	10801504 	addi	r2,r2,84
 5040930:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 5040934:	00c00204 	movi	r3,8
 5040938:	00810034 	movhi	r2,1024
 504093c:	10801504 	addi	r2,r2,84
 5040940:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 5040944:	00c00d04 	movi	r3,52
 5040948:	00810034 	movhi	r2,1024
 504094c:	10801504 	addi	r2,r2,84
 5040950:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
 5040954:	00c011c4 	movi	r3,71
 5040958:	00810034 	movhi	r2,1024
 504095c:	10801504 	addi	r2,r2,84
 5040960:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
 5040964:	00c01104 	movi	r3,68
 5040968:	00810034 	movhi	r2,1024
 504096c:	10801504 	addi	r2,r2,84
 5040970:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
 5040974:	00c00144 	movi	r3,5
 5040978:	00810034 	movhi	r2,1024
 504097c:	10801504 	addi	r2,r2,84
 5040980:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 5040984:	00c002c4 	movi	r3,11
 5040988:	00810034 	movhi	r2,1024
 504098c:	10801504 	addi	r2,r2,84
 5040990:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 5040994:	00c00244 	movi	r3,9
 5040998:	00810034 	movhi	r2,1024
 504099c:	10801504 	addi	r2,r2,84
 50409a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
 50409a4:	00c00bc4 	movi	r3,47
 50409a8:	00810034 	movhi	r2,1024
 50409ac:	10801504 	addi	r2,r2,84
 50409b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
 50409b4:	00c00d84 	movi	r3,54
 50409b8:	00810034 	movhi	r2,1024
 50409bc:	10801504 	addi	r2,r2,84
 50409c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
 50409c4:	00c003c4 	movi	r3,15
 50409c8:	00810034 	movhi	r2,1024
 50409cc:	10801504 	addi	r2,r2,84
 50409d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
 50409d4:	00c00a84 	movi	r3,42
 50409d8:	00810034 	movhi	r2,1024
 50409dc:	10801404 	addi	r2,r2,80
 50409e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 50409e4:	0007883a 	mov	r3,zero
 50409e8:	00810034 	movhi	r2,1024
 50409ec:	10801504 	addi	r2,r2,84
 50409f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 50409f4:	0007883a 	mov	r3,zero
 50409f8:	00810034 	movhi	r2,1024
 50409fc:	10801504 	addi	r2,r2,84
 5040a00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040a04:	0007883a 	mov	r3,zero
 5040a08:	00810034 	movhi	r2,1024
 5040a0c:	10801504 	addi	r2,r2,84
 5040a10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
 5040a14:	00c03bc4 	movi	r3,239
 5040a18:	00810034 	movhi	r2,1024
 5040a1c:	10801504 	addi	r2,r2,84
 5040a20:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
 5040a24:	00c00ac4 	movi	r3,43
 5040a28:	00810034 	movhi	r2,1024
 5040a2c:	10801404 	addi	r2,r2,80
 5040a30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040a34:	0007883a 	mov	r3,zero
 5040a38:	00810034 	movhi	r2,1024
 5040a3c:	10801504 	addi	r2,r2,84
 5040a40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040a44:	0007883a 	mov	r3,zero
 5040a48:	00810034 	movhi	r2,1024
 5040a4c:	10801504 	addi	r2,r2,84
 5040a50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 5040a54:	00c00044 	movi	r3,1
 5040a58:	00810034 	movhi	r2,1024
 5040a5c:	10801504 	addi	r2,r2,84
 5040a60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
 5040a64:	00c00fc4 	movi	r3,63
 5040a68:	00810034 	movhi	r2,1024
 5040a6c:	10801504 	addi	r2,r2,84
 5040a70:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
 5040a74:	00c00e84 	movi	r3,58
 5040a78:	00810034 	movhi	r2,1024
 5040a7c:	10801404 	addi	r2,r2,80
 5040a80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
 5040a84:	00c01544 	movi	r3,85
 5040a88:	00810034 	movhi	r2,1024
 5040a8c:	10801504 	addi	r2,r2,84
 5040a90:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
 5040a94:	00c03d84 	movi	r3,246
 5040a98:	00810034 	movhi	r2,1024
 5040a9c:	10801404 	addi	r2,r2,80
 5040aa0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 5040aa4:	00c00044 	movi	r3,1
 5040aa8:	00810034 	movhi	r2,1024
 5040aac:	10801504 	addi	r2,r2,84
 5040ab0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
 5040ab4:	00c00c04 	movi	r3,48
 5040ab8:	00810034 	movhi	r2,1024
 5040abc:	10801504 	addi	r2,r2,84
 5040ac0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 5040ac4:	0007883a 	mov	r3,zero
 5040ac8:	00810034 	movhi	r2,1024
 5040acc:	10801504 	addi	r2,r2,84
 5040ad0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
 5040ad4:	00c00a44 	movi	r3,41
 5040ad8:	00810034 	movhi	r2,1024
 5040adc:	10801404 	addi	r2,r2,80
 5040ae0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
 5040ae4:	00c00b04 	movi	r3,44
 5040ae8:	00810034 	movhi	r2,1024
 5040aec:	10801404 	addi	r2,r2,80
 5040af0:	10c00035 	stwio	r3,0(r2)

}
 5040af4:	0001883a 	nop
 5040af8:	e037883a 	mov	sp,fp
 5040afc:	dfc00117 	ldw	ra,4(sp)
 5040b00:	df000017 	ldw	fp,0(sp)
 5040b04:	dec00204 	addi	sp,sp,8
 5040b08:	f800283a 	ret

05040b0c <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 5040b0c:	defffc04 	addi	sp,sp,-16
 5040b10:	dfc00315 	stw	ra,12(sp)
 5040b14:	df000215 	stw	fp,8(sp)
 5040b18:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 5040b1c:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
 5040b20:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 5040b24:	000b883a 	mov	r5,zero
 5040b28:	0009883a 	mov	r4,zero
 5040b2c:	50402e40 	call	50402e4 <LCD_SetCursor>
        data=0x0000;
 5040b30:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
 5040b34:	e03ffe15 	stw	zero,-8(fp)
 5040b38:	00000706 	br	5040b58 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
 5040b3c:	e0ffff0b 	ldhu	r3,-4(fp)
 5040b40:	00810034 	movhi	r2,1024
 5040b44:	10801504 	addi	r2,r2,84
 5040b48:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 5040b4c:	e0bffe17 	ldw	r2,-8(fp)
 5040b50:	10800044 	addi	r2,r2,1
 5040b54:	e0bffe15 	stw	r2,-8(fp)
 5040b58:	e0bffe17 	ldw	r2,-8(fp)
 5040b5c:	1092c030 	cmpltui	r2,r2,19200
 5040b60:	103ff61e 	bne	r2,zero,5040b3c <_gp+0xfffd5714>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 5040b64:	01401404 	movi	r5,80
 5040b68:	0009883a 	mov	r4,zero
 5040b6c:	50402e40 	call	50402e4 <LCD_SetCursor>
        data=RED;
 5040b70:	00be0004 	movi	r2,-2048
 5040b74:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 5040b78:	e03ffe15 	stw	zero,-8(fp)
 5040b7c:	00000706 	br	5040b9c <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
 5040b80:	e0ffff0b 	ldhu	r3,-4(fp)
 5040b84:	00810034 	movhi	r2,1024
 5040b88:	10801504 	addi	r2,r2,84
 5040b8c:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 5040b90:	e0bffe17 	ldw	r2,-8(fp)
 5040b94:	10800044 	addi	r2,r2,1
 5040b98:	e0bffe15 	stw	r2,-8(fp)
 5040b9c:	e0bffe17 	ldw	r2,-8(fp)
 5040ba0:	1092c030 	cmpltui	r2,r2,19200
 5040ba4:	103ff61e 	bne	r2,zero,5040b80 <_gp+0xfffd5758>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 5040ba8:	01402804 	movi	r5,160
 5040bac:	0009883a 	mov	r4,zero
 5040bb0:	50402e40 	call	50402e4 <LCD_SetCursor>
		data=GREEN;
 5040bb4:	0081f804 	movi	r2,2016
 5040bb8:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 5040bbc:	e03ffe15 	stw	zero,-8(fp)
 5040bc0:	00000706 	br	5040be0 <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
 5040bc4:	e0ffff0b 	ldhu	r3,-4(fp)
 5040bc8:	00810034 	movhi	r2,1024
 5040bcc:	10801504 	addi	r2,r2,84
 5040bd0:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 5040bd4:	e0bffe17 	ldw	r2,-8(fp)
 5040bd8:	10800044 	addi	r2,r2,1
 5040bdc:	e0bffe15 	stw	r2,-8(fp)
 5040be0:	e0bffe17 	ldw	r2,-8(fp)
 5040be4:	1092c030 	cmpltui	r2,r2,19200
 5040be8:	103ff61e 	bne	r2,zero,5040bc4 <_gp+0xfffd579c>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 5040bec:	01403c04 	movi	r5,240
 5040bf0:	0009883a 	mov	r4,zero
 5040bf4:	50402e40 	call	50402e4 <LCD_SetCursor>
		data=BLUE;
 5040bf8:	008007c4 	movi	r2,31
 5040bfc:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 5040c00:	e03ffe15 	stw	zero,-8(fp)
 5040c04:	00000706 	br	5040c24 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
 5040c08:	e0ffff0b 	ldhu	r3,-4(fp)
 5040c0c:	00810034 	movhi	r2,1024
 5040c10:	10801504 	addi	r2,r2,84
 5040c14:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 5040c18:	e0bffe17 	ldw	r2,-8(fp)
 5040c1c:	10800044 	addi	r2,r2,1
 5040c20:	e0bffe15 	stw	r2,-8(fp)
 5040c24:	e0bffe17 	ldw	r2,-8(fp)
 5040c28:	1092c030 	cmpltui	r2,r2,19200
 5040c2c:	103ff61e 	bne	r2,zero,5040c08 <_gp+0xfffd57e0>
		{
			LCD_WR_DATA(data);
		}
}
 5040c30:	0001883a 	nop
 5040c34:	e037883a 	mov	sp,fp
 5040c38:	dfc00117 	ldw	ra,4(sp)
 5040c3c:	df000017 	ldw	fp,0(sp)
 5040c40:	dec00204 	addi	sp,sp,8
 5040c44:	f800283a 	ret

05040c48 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 5040c48:	defff804 	addi	sp,sp,-32
 5040c4c:	dfc00715 	stw	ra,28(sp)
 5040c50:	df000615 	stw	fp,24(sp)
 5040c54:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 5040c58:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 5040c5c:	00bfffc4 	movi	r2,-1
 5040c60:	e0bffd8d 	sth	r2,-10(fp)
 5040c64:	008007c4 	movi	r2,31
 5040c68:	e0bffe0d 	sth	r2,-8(fp)
 5040c6c:	0081f804 	movi	r2,2016
 5040c70:	e0bffe8d 	sth	r2,-6(fp)
 5040c74:	00be0004 	movi	r2,-2048
 5040c78:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 5040c7c:	000b883a 	mov	r5,zero
 5040c80:	0009883a 	mov	r4,zero
 5040c84:	50402e40 	call	50402e4 <LCD_SetCursor>
        for(m=0;m<320;m++)
 5040c88:	e03ffc15 	stw	zero,-16(fp)
 5040c8c:	00001e06 	br	5040d08 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
 5040c90:	e03ffa15 	stw	zero,-24(fp)
 5040c94:	00001606 	br	5040cf0 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
 5040c98:	e0bffa17 	ldw	r2,-24(fp)
 5040c9c:	1085883a 	add	r2,r2,r2
 5040ca0:	e0fffa04 	addi	r3,fp,-24
 5040ca4:	1885883a 	add	r2,r3,r2
 5040ca8:	10800384 	addi	r2,r2,14
 5040cac:	1080000b 	ldhu	r2,0(r2)
 5040cb0:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
 5040cb4:	e03ffb15 	stw	zero,-20(fp)
 5040cb8:	00000706 	br	5040cd8 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
 5040cbc:	e0fffd0b 	ldhu	r3,-12(fp)
 5040cc0:	00810034 	movhi	r2,1024
 5040cc4:	10801504 	addi	r2,r2,84
 5040cc8:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 5040ccc:	e0bffb17 	ldw	r2,-20(fp)
 5040cd0:	10800044 	addi	r2,r2,1
 5040cd4:	e0bffb15 	stw	r2,-20(fp)
 5040cd8:	e0bffb17 	ldw	r2,-20(fp)
 5040cdc:	10800f10 	cmplti	r2,r2,60
 5040ce0:	103ff61e 	bne	r2,zero,5040cbc <_gp+0xfffd5894>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 5040ce4:	e0bffa17 	ldw	r2,-24(fp)
 5040ce8:	10800044 	addi	r2,r2,1
 5040cec:	e0bffa15 	stw	r2,-24(fp)
 5040cf0:	e0bffa17 	ldw	r2,-24(fp)
 5040cf4:	10800110 	cmplti	r2,r2,4
 5040cf8:	103fe71e 	bne	r2,zero,5040c98 <_gp+0xfffd5870>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 5040cfc:	e0bffc17 	ldw	r2,-16(fp)
 5040d00:	10800044 	addi	r2,r2,1
 5040d04:	e0bffc15 	stw	r2,-16(fp)
 5040d08:	e0bffc17 	ldw	r2,-16(fp)
 5040d0c:	10805010 	cmplti	r2,r2,320
 5040d10:	103fdf1e 	bne	r2,zero,5040c90 <_gp+0xfffd5868>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 5040d14:	0001883a 	nop
 5040d18:	e037883a 	mov	sp,fp
 5040d1c:	dfc00117 	ldw	ra,4(sp)
 5040d20:	df000017 	ldw	fp,0(sp)
 5040d24:	dec00204 	addi	sp,sp,8
 5040d28:	f800283a 	ret

05040d2c <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 5040d2c:	defffd04 	addi	sp,sp,-12
 5040d30:	dfc00215 	stw	ra,8(sp)
 5040d34:	df000115 	stw	fp,4(sp)
 5040d38:	df000104 	addi	fp,sp,4
 5040d3c:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 5040d40:	e13fff17 	ldw	r4,-4(fp)
 5040d44:	504fb6c0 	call	504fb6c <printf>
}
 5040d48:	0001883a 	nop
 5040d4c:	e037883a 	mov	sp,fp
 5040d50:	dfc00117 	ldw	ra,4(sp)
 5040d54:	df000017 	ldw	fp,0(sp)
 5040d58:	dec00204 	addi	sp,sp,8
 5040d5c:	f800283a 	ret

05040d60 <myprintf>:





int myprintf(char *format, ...){
 5040d60:	deff7804 	addi	sp,sp,-544
 5040d64:	dfc08415 	stw	ra,528(sp)
 5040d68:	df008315 	stw	fp,524(sp)
 5040d6c:	df008304 	addi	fp,sp,524
 5040d70:	e13fff15 	stw	r4,-4(fp)
 5040d74:	e1400215 	stw	r5,8(fp)
 5040d78:	e1800315 	stw	r6,12(fp)
 5040d7c:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 5040d80:	e0800204 	addi	r2,fp,8
 5040d84:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 5040d88:	e0fffe17 	ldw	r3,-8(fp)
 5040d8c:	e0bf7e04 	addi	r2,fp,-520
 5040d90:	180f883a 	mov	r7,r3
 5040d94:	e1bfff17 	ldw	r6,-4(fp)
 5040d98:	01408004 	movi	r5,512
 5040d9c:	1009883a 	mov	r4,r2
 5040da0:	50544540 	call	5054454 <vsnprintf>
 5040da4:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 5040da8:	e0bf7e04 	addi	r2,fp,-520
 5040dac:	1009883a 	mov	r4,r2
 5040db0:	5040d2c0 	call	5040d2c <debug_output>

    return rc;    
 5040db4:	e0bf7d17 	ldw	r2,-524(fp)
}
 5040db8:	e037883a 	mov	sp,fp
 5040dbc:	dfc00117 	ldw	ra,4(sp)
 5040dc0:	df000017 	ldw	fp,0(sp)
 5040dc4:	dec00504 	addi	sp,sp,20
 5040dc8:	f800283a 	ret

05040dcc <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 5040dcc:	defff704 	addi	sp,sp,-36
 5040dd0:	dfc00815 	stw	ra,32(sp)
 5040dd4:	df000715 	stw	fp,28(sp)
 5040dd8:	df000704 	addi	fp,sp,28
 5040ddc:	e13ffe15 	stw	r4,-8(fp)
 5040de0:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5040de4:	e03ff915 	stw	zero,-28(fp)
 5040de8:	00001106 	br	5040e30 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 5040dec:	e0bff917 	ldw	r2,-28(fp)
 5040df0:	e0fffe17 	ldw	r3,-8(fp)
 5040df4:	1885883a 	add	r2,r3,r2
 5040df8:	10800003 	ldbu	r2,0(r2)
 5040dfc:	10c03fcc 	andi	r3,r2,255
 5040e00:	e0bffa04 	addi	r2,fp,-24
 5040e04:	180d883a 	mov	r6,r3
 5040e08:	014141b4 	movhi	r5,1286
 5040e0c:	29430a04 	addi	r5,r5,3112
 5040e10:	1009883a 	mov	r4,r2
 5040e14:	504fd280 	call	504fd28 <sprintf>
        DEBUG((szText));
 5040e18:	e0bffa04 	addi	r2,fp,-24
 5040e1c:	1009883a 	mov	r4,r2
 5040e20:	5040d600 	call	5040d60 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5040e24:	e0bff917 	ldw	r2,-28(fp)
 5040e28:	10800044 	addi	r2,r2,1
 5040e2c:	e0bff915 	stw	r2,-28(fp)
 5040e30:	e0fff917 	ldw	r3,-28(fp)
 5040e34:	e0bfff17 	ldw	r2,-4(fp)
 5040e38:	18bfec16 	blt	r3,r2,5040dec <_gp+0xfffd59c4>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 5040e3c:	e0bfff17 	ldw	r2,-4(fp)
}
 5040e40:	e037883a 	mov	sp,fp
 5040e44:	dfc00117 	ldw	ra,4(sp)
 5040e48:	df000017 	ldw	fp,0(sp)
 5040e4c:	dec00204 	addi	sp,sp,8
 5040e50:	f800283a 	ret

05040e54 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 5040e54:	defff704 	addi	sp,sp,-36
 5040e58:	dfc00815 	stw	ra,32(sp)
 5040e5c:	df000715 	stw	fp,28(sp)
 5040e60:	df000704 	addi	fp,sp,28
 5040e64:	e13ffe15 	stw	r4,-8(fp)
 5040e68:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5040e6c:	e03ff915 	stw	zero,-28(fp)
 5040e70:	00001306 	br	5040ec0 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 5040e74:	e0bff917 	ldw	r2,-28(fp)
 5040e78:	1085883a 	add	r2,r2,r2
 5040e7c:	1085883a 	add	r2,r2,r2
 5040e80:	1007883a 	mov	r3,r2
 5040e84:	e0bffe17 	ldw	r2,-8(fp)
 5040e88:	10c5883a 	add	r2,r2,r3
 5040e8c:	10c00017 	ldw	r3,0(r2)
 5040e90:	e0bffa04 	addi	r2,fp,-24
 5040e94:	180d883a 	mov	r6,r3
 5040e98:	014141b4 	movhi	r5,1286
 5040e9c:	29430c04 	addi	r5,r5,3120
 5040ea0:	1009883a 	mov	r4,r2
 5040ea4:	504fd280 	call	504fd28 <sprintf>
        DEBUG((szText));
 5040ea8:	e0bffa04 	addi	r2,fp,-24
 5040eac:	1009883a 	mov	r4,r2
 5040eb0:	5040d600 	call	5040d60 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5040eb4:	e0bff917 	ldw	r2,-28(fp)
 5040eb8:	10800044 	addi	r2,r2,1
 5040ebc:	e0bff915 	stw	r2,-28(fp)
 5040ec0:	e0fff917 	ldw	r3,-28(fp)
 5040ec4:	e0bfff17 	ldw	r2,-4(fp)
 5040ec8:	18bfea16 	blt	r3,r2,5040e74 <_gp+0xfffd5a4c>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 5040ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 5040ed0:	e037883a 	mov	sp,fp
 5040ed4:	dfc00117 	ldw	ra,4(sp)
 5040ed8:	df000017 	ldw	fp,0(sp)
 5040edc:	dec00204 	addi	sp,sp,8
 5040ee0:	f800283a 	ret

05040ee4 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 5040ee4:	defffa04 	addi	sp,sp,-24
 5040ee8:	dfc00515 	stw	ra,20(sp)
 5040eec:	df000415 	stw	fp,16(sp)
 5040ef0:	df000404 	addi	fp,sp,16
 5040ef4:	e13ffe15 	stw	r4,-8(fp)
 5040ef8:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 5040efc:	e0bffe17 	ldw	r2,-8(fp)
 5040f00:	10c00117 	ldw	r3,4(r2)
 5040f04:	e0bffe17 	ldw	r2,-8(fp)
 5040f08:	11000217 	ldw	r4,8(r2)
 5040f0c:	e0bffe17 	ldw	r2,-8(fp)
 5040f10:	d8800115 	stw	r2,4(sp)
 5040f14:	e0bfff17 	ldw	r2,-4(fp)
 5040f18:	d8800015 	stw	r2,0(sp)
 5040f1c:	200f883a 	mov	r7,r4
 5040f20:	180d883a 	mov	r6,r3
 5040f24:	000b883a 	mov	r5,zero
 5040f28:	0009883a 	mov	r4,zero
 5040f2c:	5041a540 	call	5041a54 <vid_paint_block>
}
 5040f30:	0001883a 	nop
 5040f34:	e037883a 	mov	sp,fp
 5040f38:	dfc00117 	ldw	ra,4(sp)
 5040f3c:	df000017 	ldw	fp,0(sp)
 5040f40:	dec00204 	addi	sp,sp,8
 5040f44:	f800283a 	ret

05040f48 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 5040f48:	defff704 	addi	sp,sp,-36
 5040f4c:	dfc00815 	stw	ra,32(sp)
 5040f50:	df000715 	stw	fp,28(sp)
 5040f54:	df000704 	addi	fp,sp,28
 5040f58:	e13ffc15 	stw	r4,-16(fp)
 5040f5c:	e17ffd15 	stw	r5,-12(fp)
 5040f60:	e1bffe15 	stw	r6,-8(fp)
 5040f64:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 5040f68:	e0fffd17 	ldw	r3,-12(fp)
 5040f6c:	e0bfff17 	ldw	r2,-4(fp)
 5040f70:	1880121e 	bne	r3,r2,5040fbc <vid_draw_line+0x74>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 5040f74:	e0bffc17 	ldw	r2,-16(fp)
 5040f78:	10ffffcc 	andi	r3,r2,65535
 5040f7c:	18e0001c 	xori	r3,r3,32768
 5040f80:	18e00004 	addi	r3,r3,-32768
 5040f84:	e0bffe17 	ldw	r2,-8(fp)
 5040f88:	113fffcc 	andi	r4,r2,65535
 5040f8c:	2120001c 	xori	r4,r4,32768
 5040f90:	21200004 	addi	r4,r4,-32768
 5040f94:	e0bffd17 	ldw	r2,-12(fp)
 5040f98:	117fffcc 	andi	r5,r2,65535
 5040f9c:	e0800417 	ldw	r2,16(fp)
 5040fa0:	d8800015 	stw	r2,0(sp)
 5040fa4:	e1c00317 	ldw	r7,12(fp)
 5040fa8:	280d883a 	mov	r6,r5
 5040fac:	200b883a 	mov	r5,r4
 5040fb0:	1809883a 	mov	r4,r3
 5040fb4:	5041aec0 	call	5041aec <vid_draw_horiz_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 5040fb8:	00001006 	br	5040ffc <vid_draw_line+0xb4>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 5040fbc:	e0bffc17 	ldw	r2,-16(fp)
 5040fc0:	113fffcc 	andi	r4,r2,65535
 5040fc4:	e0bffd17 	ldw	r2,-12(fp)
 5040fc8:	117fffcc 	andi	r5,r2,65535
 5040fcc:	e0bffe17 	ldw	r2,-8(fp)
 5040fd0:	11bfffcc 	andi	r6,r2,65535
 5040fd4:	e0bfff17 	ldw	r2,-4(fp)
 5040fd8:	11ffffcc 	andi	r7,r2,65535
 5040fdc:	e0800217 	ldw	r2,8(fp)
 5040fe0:	10bfffcc 	andi	r2,r2,65535
 5040fe4:	e0c00417 	ldw	r3,16(fp)
 5040fe8:	d8c00215 	stw	r3,8(sp)
 5040fec:	e0c00317 	ldw	r3,12(fp)
 5040ff0:	d8c00115 	stw	r3,4(sp)
 5040ff4:	d8800015 	stw	r2,0(sp)
 5040ff8:	5041d040 	call	5041d04 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 5040ffc:	0001883a 	nop
 5041000:	e037883a 	mov	sp,fp
 5041004:	dfc00117 	ldw	ra,4(sp)
 5041008:	df000017 	ldw	fp,0(sp)
 504100c:	dec00204 	addi	sp,sp,8
 5041010:	f800283a 	ret

05041014 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 5041014:	defffd04 	addi	sp,sp,-12
 5041018:	dfc00215 	stw	ra,8(sp)
 504101c:	df000115 	stw	fp,4(sp)
 5041020:	df000104 	addi	fp,sp,4
 5041024:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 5041028:	e0bfff17 	ldw	r2,-4(fp)
 504102c:	10800517 	ldw	r2,20(r2)
 5041030:	1009883a 	mov	r4,r2
 5041034:	504f0ac0 	call	504f0ac <free>
  free(scroll);
 5041038:	e13fff17 	ldw	r4,-4(fp)
 504103c:	504f0ac0 	call	504f0ac <free>
}
 5041040:	0001883a 	nop
 5041044:	e037883a 	mov	sp,fp
 5041048:	dfc00117 	ldw	ra,4(sp)
 504104c:	df000017 	ldw	fp,0(sp)
 5041050:	dec00204 	addi	sp,sp,8
 5041054:	f800283a 	ret

05041058 <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 5041058:	defff904 	addi	sp,sp,-28
 504105c:	dfc00615 	stw	ra,24(sp)
 5041060:	df000515 	stw	fp,20(sp)
 5041064:	df000504 	addi	fp,sp,20
 5041068:	e13ffc15 	stw	r4,-16(fp)
 504106c:	e17ffd15 	stw	r5,-12(fp)
 5041070:	e1bffe15 	stw	r6,-8(fp)
 5041074:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 5041078:	01000f04 	movi	r4,60
 504107c:	504f0980 	call	504f098 <malloc>
 5041080:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 5041084:	e0bffb17 	ldw	r2,-20(fp)
 5041088:	e0fffc17 	ldw	r3,-16(fp)
 504108c:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 5041090:	e0bffb17 	ldw	r2,-20(fp)
 5041094:	e0fffd17 	ldw	r3,-12(fp)
 5041098:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 504109c:	e0bffb17 	ldw	r2,-20(fp)
 50410a0:	e0fffe17 	ldw	r3,-8(fp)
 50410a4:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 50410a8:	e0bffb17 	ldw	r2,-20(fp)
 50410ac:	e0ffff17 	ldw	r3,-4(fp)
 50410b0:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 50410b4:	e0bffb17 	ldw	r2,-20(fp)
 50410b8:	e0c00217 	ldw	r3,8(fp)
 50410bc:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 50410c0:	e1000517 	ldw	r4,20(fp)
 50410c4:	504fe240 	call	504fe24 <strlen>
 50410c8:	10800084 	addi	r2,r2,2
 50410cc:	1009883a 	mov	r4,r2
 50410d0:	504f0980 	call	504f098 <malloc>
 50410d4:	1007883a 	mov	r3,r2
 50410d8:	e0bffb17 	ldw	r2,-20(fp)
 50410dc:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 50410e0:	e0bffb17 	ldw	r2,-20(fp)
 50410e4:	10800517 	ldw	r2,20(r2)
 50410e8:	e1400517 	ldw	r5,20(fp)
 50410ec:	1009883a 	mov	r4,r2
 50410f0:	504fd940 	call	504fd94 <strcpy>
  scroll->font = font;
 50410f4:	e0bffb17 	ldw	r2,-20(fp)
 50410f8:	e0c00317 	ldw	r3,12(fp)
 50410fc:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 5041100:	e0bffb17 	ldw	r2,-20(fp)
 5041104:	e0c00417 	ldw	r3,16(fp)
 5041108:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 504110c:	d0a81c17 	ldw	r2,-24464(gp)
  scroll->ticks_at_last_move = alt_nticks();
 5041110:	1007883a 	mov	r3,r2
 5041114:	e0bffb17 	ldw	r2,-20(fp)
 5041118:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 504111c:	e0bffb17 	ldw	r2,-20(fp)
 5041120:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 5041124:	e0bffb17 	ldw	r2,-20(fp)
 5041128:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 504112c:	e0bffb17 	ldw	r2,-20(fp)
 5041130:	10c00217 	ldw	r3,8(r2)
 5041134:	e0bffb17 	ldw	r2,-20(fp)
 5041138:	10800017 	ldw	r2,0(r2)
 504113c:	1887c83a 	sub	r3,r3,r2
 5041140:	e0bffb17 	ldw	r2,-20(fp)
 5041144:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 5041148:	e1000517 	ldw	r4,20(fp)
 504114c:	504fe240 	call	504fe24 <strlen>
 5041150:	1007883a 	mov	r3,r2
 5041154:	e0bffb17 	ldw	r2,-20(fp)
 5041158:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 504115c:	e0bffb17 	ldw	r2,-20(fp)
 5041160:	10800c17 	ldw	r2,48(r2)
 5041164:	100690fa 	slli	r3,r2,3
 5041168:	e0bffb17 	ldw	r2,-20(fp)
 504116c:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 5041170:	e0bffb17 	ldw	r2,-20(fp)
 5041174:	10c00b17 	ldw	r3,44(r2)
 5041178:	e0bffb17 	ldw	r2,-20(fp)
 504117c:	10800e17 	ldw	r2,56(r2)
 5041180:	1887883a 	add	r3,r3,r2
 5041184:	e0bffb17 	ldw	r2,-20(fp)
 5041188:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 504118c:	e0bffb17 	ldw	r2,-20(fp)
  
}
 5041190:	e037883a 	mov	sp,fp
 5041194:	dfc00117 	ldw	ra,4(sp)
 5041198:	df000017 	ldw	fp,0(sp)
 504119c:	dec00204 	addi	sp,sp,8
 50411a0:	f800283a 	ret

050411a4 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 50411a4:	deffec04 	addi	sp,sp,-80
 50411a8:	dfc01315 	stw	ra,76(sp)
 50411ac:	df001215 	stw	fp,72(sp)
 50411b0:	dc401115 	stw	r17,68(sp)
 50411b4:	dc001015 	stw	r16,64(sp)
 50411b8:	df001204 	addi	fp,sp,72
 50411bc:	e13ffc15 	stw	r4,-16(fp)
 50411c0:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 50411c4:	00800044 	movi	r2,1
 50411c8:	e0bff605 	stb	r2,-40(fp)
 50411cc:	d4281c17 	ldw	r16,-24464(gp)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 50411d0:	e0bffc17 	ldw	r2,-16(fp)
 50411d4:	10800817 	ldw	r2,32(r2)
 50411d8:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 50411dc:	d0a81b17 	ldw	r2,-24468(gp)
 50411e0:	e0fffc17 	ldw	r3,-16(fp)
 50411e4:	18c00717 	ldw	r3,28(r3)
 50411e8:	10c5383a 	mul	r2,r2,r3
 50411ec:	0140fa04 	movi	r5,1000
 50411f0:	1009883a 	mov	r4,r2
 50411f4:	504b3ec0 	call	504b3ec <__udivsi3>
 50411f8:	8885883a 	add	r2,r17,r2
 50411fc:	8080b936 	bltu	r16,r2,50414e4 <vid_scroll_string+0x340>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5041200:	d0a81c17 	ldw	r2,-24464(gp)
    scroll->ticks_at_last_move = alt_nticks();
 5041204:	1007883a 	mov	r3,r2
 5041208:	e0bffc17 	ldw	r2,-16(fp)
 504120c:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 5041210:	e0bffc17 	ldw	r2,-16(fp)
 5041214:	10800a03 	ldbu	r2,40(r2)
 5041218:	10803fcc 	andi	r2,r2,255
 504121c:	1080201c 	xori	r2,r2,128
 5041220:	10bfe004 	addi	r2,r2,-128
 5041224:	1000061e 	bne	r2,zero,5041240 <vid_scroll_string+0x9c>
      scroll->text_scroll_index = 0;
 5041228:	e0bffc17 	ldw	r2,-16(fp)
 504122c:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 5041230:	e0bffc17 	ldw	r2,-16(fp)
 5041234:	00c00044 	movi	r3,1
 5041238:	10c00a05 	stb	r3,40(r2)
 504123c:	00000e06 	br	5041278 <vid_scroll_string+0xd4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 5041240:	e0bffc17 	ldw	r2,-16(fp)
 5041244:	10c00917 	ldw	r3,36(r2)
 5041248:	e0bffc17 	ldw	r2,-16(fp)
 504124c:	10800d17 	ldw	r2,52(r2)
 5041250:	18800316 	blt	r3,r2,5041260 <vid_scroll_string+0xbc>
      scroll->text_scroll_started = 0;
 5041254:	e0bffc17 	ldw	r2,-16(fp)
 5041258:	10000a05 	stb	zero,40(r2)
 504125c:	00000606 	br	5041278 <vid_scroll_string+0xd4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 5041260:	e0bffc17 	ldw	r2,-16(fp)
 5041264:	10c00917 	ldw	r3,36(r2)
 5041268:	e0bff607 	ldb	r2,-40(fp)
 504126c:	1887883a 	add	r3,r3,r2
 5041270:	e0bffc17 	ldw	r2,-16(fp)
 5041274:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 5041278:	e0bffc17 	ldw	r2,-16(fp)
 504127c:	10c00917 	ldw	r3,36(r2)
 5041280:	e0bffc17 	ldw	r2,-16(fp)
 5041284:	10800b17 	ldw	r2,44(r2)
 5041288:	18800a0e 	bge	r3,r2,50412b4 <vid_scroll_string+0x110>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 504128c:	e0bffc17 	ldw	r2,-16(fp)
 5041290:	10c00017 	ldw	r3,0(r2)
 5041294:	e0bffc17 	ldw	r2,-16(fp)
 5041298:	10800b17 	ldw	r2,44(r2)
 504129c:	1887883a 	add	r3,r3,r2
 50412a0:	e0bffc17 	ldw	r2,-16(fp)
 50412a4:	10800917 	ldw	r2,36(r2)
 50412a8:	1885c83a 	sub	r2,r3,r2
 50412ac:	e0bff115 	stw	r2,-60(fp)
 50412b0:	00000306 	br	50412c0 <vid_scroll_string+0x11c>
    } else {
      x_start = scroll->hbegin;
 50412b4:	e0bffc17 	ldw	r2,-16(fp)
 50412b8:	10800017 	ldw	r2,0(r2)
 50412bc:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 50412c0:	e0bffc17 	ldw	r2,-16(fp)
 50412c4:	10800e17 	ldw	r2,56(r2)
 50412c8:	e0fffc17 	ldw	r3,-16(fp)
 50412cc:	18c00917 	ldw	r3,36(r3)
 50412d0:	1880040e 	bge	r3,r2,50412e4 <vid_scroll_string+0x140>
      x_end = scroll->hend;
 50412d4:	e0bffc17 	ldw	r2,-16(fp)
 50412d8:	10800217 	ldw	r2,8(r2)
 50412dc:	e0bff215 	stw	r2,-56(fp)
 50412e0:	00000906 	br	5041308 <vid_scroll_string+0x164>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 50412e4:	e0bffc17 	ldw	r2,-16(fp)
 50412e8:	10c00217 	ldw	r3,8(r2)
 50412ec:	e0bffc17 	ldw	r2,-16(fp)
 50412f0:	10800917 	ldw	r2,36(r2)
 50412f4:	1887c83a 	sub	r3,r3,r2
 50412f8:	e0bffc17 	ldw	r2,-16(fp)
 50412fc:	10800e17 	ldw	r2,56(r2)
 5041300:	1885883a 	add	r2,r3,r2
 5041304:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 5041308:	e0bff117 	ldw	r2,-60(fp)
 504130c:	e0bff315 	stw	r2,-52(fp)
 5041310:	00006006 	br	5041494 <vid_scroll_string+0x2f0>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 5041314:	e0bffc17 	ldw	r2,-16(fp)
 5041318:	10c00917 	ldw	r3,36(r2)
 504131c:	e0bffc17 	ldw	r2,-16(fp)
 5041320:	10800b17 	ldw	r2,44(r2)
 5041324:	1880050e 	bge	r3,r2,504133c <vid_scroll_string+0x198>
        string_x_index = (x_index - x_start);
 5041328:	e0fff317 	ldw	r3,-52(fp)
 504132c:	e0bff117 	ldw	r2,-60(fp)
 5041330:	1885c83a 	sub	r2,r3,r2
 5041334:	e0bff415 	stw	r2,-48(fp)
 5041338:	00000a06 	br	5041364 <vid_scroll_string+0x1c0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 504133c:	e0bffc17 	ldw	r2,-16(fp)
 5041340:	10c00917 	ldw	r3,36(r2)
 5041344:	e0bffc17 	ldw	r2,-16(fp)
 5041348:	10800b17 	ldw	r2,44(r2)
 504134c:	1887c83a 	sub	r3,r3,r2
 5041350:	e0bff317 	ldw	r2,-52(fp)
 5041354:	1887883a 	add	r3,r3,r2
 5041358:	e0bff117 	ldw	r2,-60(fp)
 504135c:	1885c83a 	sub	r2,r3,r2
 5041360:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 5041364:	e0bff417 	ldw	r2,-48(fp)
 5041368:	1000010e 	bge	r2,zero,5041370 <vid_scroll_string+0x1cc>
 504136c:	108001c4 	addi	r2,r2,7
 5041370:	1005d0fa 	srai	r2,r2,3
 5041374:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 5041378:	e0bffc17 	ldw	r2,-16(fp)
 504137c:	10c00517 	ldw	r3,20(r2)
 5041380:	e0bff717 	ldw	r2,-36(fp)
 5041384:	1885883a 	add	r2,r3,r2
 5041388:	10800003 	ldbu	r2,0(r2)
 504138c:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 5041390:	e0fff417 	ldw	r3,-48(fp)
 5041394:	00a00034 	movhi	r2,32768
 5041398:	108001c4 	addi	r2,r2,7
 504139c:	1884703a 	and	r2,r3,r2
 50413a0:	1000040e 	bge	r2,zero,50413b4 <vid_scroll_string+0x210>
 50413a4:	10bfffc4 	addi	r2,r2,-1
 50413a8:	00fffe04 	movi	r3,-8
 50413ac:	10c4b03a 	or	r2,r2,r3
 50413b0:	10800044 	addi	r2,r2,1
 50413b4:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 50413b8:	00c02004 	movi	r3,128
 50413bc:	e0bff917 	ldw	r2,-28(fp)
 50413c0:	1884d83a 	srl	r2,r3,r2
 50413c4:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 50413c8:	e0bffc17 	ldw	r2,-16(fp)
 50413cc:	10800617 	ldw	r2,24(r2)
 50413d0:	e0fff807 	ldb	r3,-32(fp)
 50413d4:	18fff804 	addi	r3,r3,-32
 50413d8:	18c002e4 	muli	r3,r3,11
 50413dc:	10c5883a 	add	r2,r2,r3
 50413e0:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 50413e4:	e03ff515 	stw	zero,-44(fp)
 50413e8:	00002406 	br	504147c <vid_scroll_string+0x2d8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 50413ec:	e0bff517 	ldw	r2,-44(fp)
 50413f0:	e0fffb17 	ldw	r3,-20(fp)
 50413f4:	1885883a 	add	r2,r3,r2
 50413f8:	10c00003 	ldbu	r3,0(r2)
 50413fc:	e0bffa03 	ldbu	r2,-24(fp)
 5041400:	1884703a 	and	r2,r3,r2
 5041404:	10803fcc 	andi	r2,r2,255
 5041408:	1080201c 	xori	r2,r2,128
 504140c:	10bfe004 	addi	r2,r2,-128
 5041410:	10000c26 	beq	r2,zero,5041444 <vid_scroll_string+0x2a0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 5041414:	e0bffc17 	ldw	r2,-16(fp)
 5041418:	10c00117 	ldw	r3,4(r2)
 504141c:	e0bff517 	ldw	r2,-44(fp)
 5041420:	1887883a 	add	r3,r3,r2
 5041424:	e0bffc17 	ldw	r2,-16(fp)
 5041428:	10800317 	ldw	r2,12(r2)
 504142c:	e1fffd17 	ldw	r7,-12(fp)
 5041430:	100d883a 	mov	r6,r2
 5041434:	180b883a 	mov	r5,r3
 5041438:	e13ff317 	ldw	r4,-52(fp)
 504143c:	50419700 	call	5041970 <vid_set_pixel>
 5041440:	00000b06 	br	5041470 <vid_scroll_string+0x2cc>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 5041444:	e0bffc17 	ldw	r2,-16(fp)
 5041448:	10c00117 	ldw	r3,4(r2)
 504144c:	e0bff517 	ldw	r2,-44(fp)
 5041450:	1887883a 	add	r3,r3,r2
 5041454:	e0bffc17 	ldw	r2,-16(fp)
 5041458:	10800417 	ldw	r2,16(r2)
 504145c:	e1fffd17 	ldw	r7,-12(fp)
 5041460:	100d883a 	mov	r6,r2
 5041464:	180b883a 	mov	r5,r3
 5041468:	e13ff317 	ldw	r4,-52(fp)
 504146c:	50419700 	call	5041970 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 5041470:	e0bff517 	ldw	r2,-44(fp)
 5041474:	10800044 	addi	r2,r2,1
 5041478:	e0bff515 	stw	r2,-44(fp)
 504147c:	e0bff517 	ldw	r2,-44(fp)
 5041480:	108002d0 	cmplti	r2,r2,11
 5041484:	103fd91e 	bne	r2,zero,50413ec <_gp+0xfffd5fc4>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 5041488:	e0bff317 	ldw	r2,-52(fp)
 504148c:	10800044 	addi	r2,r2,1
 5041490:	e0bff315 	stw	r2,-52(fp)
 5041494:	e0fff317 	ldw	r3,-52(fp)
 5041498:	e0bff217 	ldw	r2,-56(fp)
 504149c:	18bf9d16 	blt	r3,r2,5041314 <_gp+0xfffd5eec>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 50414a0:	e0bffc17 	ldw	r2,-16(fp)
 50414a4:	11000117 	ldw	r4,4(r2)
 50414a8:	e0bffc17 	ldw	r2,-16(fp)
 50414ac:	10800117 	ldw	r2,4(r2)
 50414b0:	11400284 	addi	r5,r2,10
 50414b4:	e0bffc17 	ldw	r2,-16(fp)
 50414b8:	10800417 	ldw	r2,16(r2)
 50414bc:	e0fffd17 	ldw	r3,-12(fp)
 50414c0:	d8c00215 	stw	r3,8(sp)
 50414c4:	d8800115 	stw	r2,4(sp)
 50414c8:	00800044 	movi	r2,1
 50414cc:	d8800015 	stw	r2,0(sp)
 50414d0:	280f883a 	mov	r7,r5
 50414d4:	e1bff217 	ldw	r6,-56(fp)
 50414d8:	200b883a 	mov	r5,r4
 50414dc:	e13ff217 	ldw	r4,-56(fp)
 50414e0:	5040f480 	call	5040f48 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 50414e4:	0005883a 	mov	r2,zero
}
 50414e8:	e6fffe04 	addi	sp,fp,-8
 50414ec:	dfc00317 	ldw	ra,12(sp)
 50414f0:	df000217 	ldw	fp,8(sp)
 50414f4:	dc400117 	ldw	r17,4(sp)
 50414f8:	dc000017 	ldw	r16,0(sp)
 50414fc:	dec00404 	addi	sp,sp,16
 5041500:	f800283a 	ret

05041504 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 5041504:	defff504 	addi	sp,sp,-44
 5041508:	dfc00a15 	stw	ra,40(sp)
 504150c:	df000915 	stw	fp,36(sp)
 5041510:	df000904 	addi	fp,sp,36
 5041514:	e13ffc15 	stw	r4,-16(fp)
 5041518:	e17ffd15 	stw	r5,-12(fp)
 504151c:	e1bffe15 	stw	r6,-8(fp)
 5041520:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 5041524:	e0800217 	ldw	r2,8(fp)
 5041528:	00803716 	blt	zero,r2,5041608 <vid_move_block+0x104>
 504152c:	e0800317 	ldw	r2,12(fp)
 5041530:	00803516 	blt	zero,r2,5041608 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 5041534:	e0bffd17 	ldw	r2,-12(fp)
 5041538:	e0bff815 	stw	r2,-32(fp)
 504153c:	00002f06 	br	50415fc <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 5041540:	e0fff817 	ldw	r3,-32(fp)
 5041544:	e0800317 	ldw	r2,12(fp)
 5041548:	1885883a 	add	r2,r3,r2
 504154c:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 5041550:	e0bffc17 	ldw	r2,-16(fp)
 5041554:	e0bff715 	stw	r2,-36(fp)
 5041558:	00002206 	br	50415e4 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 504155c:	e0fff717 	ldw	r3,-36(fp)
 5041560:	e0800217 	ldw	r2,8(fp)
 5041564:	1885883a 	add	r2,r3,r2
 5041568:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 504156c:	e1800517 	ldw	r6,20(fp)
 5041570:	e17ff817 	ldw	r5,-32(fp)
 5041574:	e13ff717 	ldw	r4,-36(fp)
 5041578:	5041a140 	call	5041a14 <vid_get_pixel>
 504157c:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 5041580:	e0bffb0f 	ldh	r2,-20(fp)
 5041584:	e1c00517 	ldw	r7,20(fp)
 5041588:	100d883a 	mov	r6,r2
 504158c:	e17ff917 	ldw	r5,-28(fp)
 5041590:	e13ffa17 	ldw	r4,-24(fp)
 5041594:	50419700 	call	5041970 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 5041598:	e0fffe17 	ldw	r3,-8(fp)
 504159c:	e0800217 	ldw	r2,8(fp)
 50415a0:	1885883a 	add	r2,r3,r2
 50415a4:	e0fff717 	ldw	r3,-36(fp)
 50415a8:	1880050e 	bge	r3,r2,50415c0 <vid_move_block+0xbc>
 50415ac:	e0ffff17 	ldw	r3,-4(fp)
 50415b0:	e0800317 	ldw	r2,12(fp)
 50415b4:	1885883a 	add	r2,r3,r2
 50415b8:	e0fff817 	ldw	r3,-32(fp)
 50415bc:	18800616 	blt	r3,r2,50415d8 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 50415c0:	e0800417 	ldw	r2,16(fp)
 50415c4:	e1c00517 	ldw	r7,20(fp)
 50415c8:	100d883a 	mov	r6,r2
 50415cc:	e17ff817 	ldw	r5,-32(fp)
 50415d0:	e13ff717 	ldw	r4,-36(fp)
 50415d4:	50419700 	call	5041970 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 50415d8:	e0bff717 	ldw	r2,-36(fp)
 50415dc:	10800044 	addi	r2,r2,1
 50415e0:	e0bff715 	stw	r2,-36(fp)
 50415e4:	e0fff717 	ldw	r3,-36(fp)
 50415e8:	e0bffe17 	ldw	r2,-8(fp)
 50415ec:	18bfdb16 	blt	r3,r2,504155c <_gp+0xfffd6134>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 50415f0:	e0bff817 	ldw	r2,-32(fp)
 50415f4:	10800044 	addi	r2,r2,1
 50415f8:	e0bff815 	stw	r2,-32(fp)
 50415fc:	e0fff817 	ldw	r3,-32(fp)
 5041600:	e0bfff17 	ldw	r2,-4(fp)
 5041604:	18bfce16 	blt	r3,r2,5041540 <_gp+0xfffd6118>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 5041608:	0005883a 	mov	r2,zero
}
 504160c:	e037883a 	mov	sp,fp
 5041610:	dfc00117 	ldw	ra,4(sp)
 5041614:	df000017 	ldw	fp,0(sp)
 5041618:	dec00204 	addi	sp,sp,8
 504161c:	f800283a 	ret

05041620 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 5041620:	defff604 	addi	sp,sp,-40
 5041624:	dfc00915 	stw	ra,36(sp)
 5041628:	df000815 	stw	fp,32(sp)
 504162c:	df000804 	addi	fp,sp,32
 5041630:	e13ffc15 	stw	r4,-16(fp)
 5041634:	e17ffd15 	stw	r5,-12(fp)
 5041638:	e1bffe15 	stw	r6,-8(fp)
 504163c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 5041640:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 5041644:	e0bffc17 	ldw	r2,-16(fp)
 5041648:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 504164c:	00002806 	br	50416f0 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 5041650:	e0bffa17 	ldw	r2,-24(fp)
 5041654:	e0c00317 	ldw	r3,12(fp)
 5041658:	1885883a 	add	r2,r3,r2
 504165c:	10800003 	ldbu	r2,0(r2)
 5041660:	10803fcc 	andi	r2,r2,255
 5041664:	1080201c 	xori	r2,r2,128
 5041668:	10bfe004 	addi	r2,r2,-128
 504166c:	10800298 	cmpnei	r2,r2,10
 5041670:	1000091e 	bne	r2,zero,5041698 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 5041674:	e0bffb17 	ldw	r2,-20(fp)
 5041678:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 504167c:	e0bffd17 	ldw	r2,-12(fp)
 5041680:	10800304 	addi	r2,r2,12
 5041684:	e0bffd15 	stw	r2,-12(fp)
      i++;
 5041688:	e0bffa17 	ldw	r2,-24(fp)
 504168c:	10800044 	addi	r2,r2,1
 5041690:	e0bffa15 	stw	r2,-24(fp)
      continue;
 5041694:	00001606 	br	50416f0 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 5041698:	e0bffa17 	ldw	r2,-24(fp)
 504169c:	e0c00317 	ldw	r3,12(fp)
 50416a0:	1885883a 	add	r2,r3,r2
 50416a4:	10800003 	ldbu	r2,0(r2)
 50416a8:	10c03fcc 	andi	r3,r2,255
 50416ac:	18c0201c 	xori	r3,r3,128
 50416b0:	18ffe004 	addi	r3,r3,-128
 50416b4:	e0800217 	ldw	r2,8(fp)
 50416b8:	d8800115 	stw	r2,4(sp)
 50416bc:	e0bfff17 	ldw	r2,-4(fp)
 50416c0:	d8800015 	stw	r2,0(sp)
 50416c4:	180f883a 	mov	r7,r3
 50416c8:	e1bffe17 	ldw	r6,-8(fp)
 50416cc:	e17ffd17 	ldw	r5,-12(fp)
 50416d0:	e13ffc17 	ldw	r4,-16(fp)
 50416d4:	50418800 	call	5041880 <vid_print_char>
    i++;
 50416d8:	e0bffa17 	ldw	r2,-24(fp)
 50416dc:	10800044 	addi	r2,r2,1
 50416e0:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 50416e4:	e0bffc17 	ldw	r2,-16(fp)
 50416e8:	10800204 	addi	r2,r2,8
 50416ec:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 50416f0:	e0bffa17 	ldw	r2,-24(fp)
 50416f4:	e0c00317 	ldw	r3,12(fp)
 50416f8:	1885883a 	add	r2,r3,r2
 50416fc:	10800003 	ldbu	r2,0(r2)
 5041700:	10803fcc 	andi	r2,r2,255
 5041704:	1080201c 	xori	r2,r2,128
 5041708:	10bfe004 	addi	r2,r2,-128
 504170c:	103fd01e 	bne	r2,zero,5041650 <_gp+0xfffd6228>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 5041710:	0005883a 	mov	r2,zero
}
 5041714:	e037883a 	mov	sp,fp
 5041718:	dfc00117 	ldw	ra,4(sp)
 504171c:	df000017 	ldw	fp,0(sp)
 5041720:	dec00204 	addi	sp,sp,8
 5041724:	f800283a 	ret

05041728 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 5041728:	defff704 	addi	sp,sp,-36
 504172c:	dfc00815 	stw	ra,32(sp)
 5041730:	df000715 	stw	fp,28(sp)
 5041734:	df000704 	addi	fp,sp,28
 5041738:	e13ffc15 	stw	r4,-16(fp)
 504173c:	e17ffd15 	stw	r5,-12(fp)
 5041740:	e1bffe15 	stw	r6,-8(fp)
 5041744:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 5041748:	e0800317 	ldw	r2,12(fp)
 504174c:	10000a26 	beq	r2,zero,5041778 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 5041750:	e0800417 	ldw	r2,16(fp)
 5041754:	d8800115 	stw	r2,4(sp)
 5041758:	e0800217 	ldw	r2,8(fp)
 504175c:	d8800015 	stw	r2,0(sp)
 5041760:	e1ffff17 	ldw	r7,-4(fp)
 5041764:	e1bffe17 	ldw	r6,-8(fp)
 5041768:	e17ffd17 	ldw	r5,-12(fp)
 504176c:	e13ffc17 	ldw	r4,-16(fp)
 5041770:	5041a540 	call	5041a54 <vid_paint_block>
 5041774:	00003c06 	br	5041868 <vid_draw_box+0x140>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 3, color, display);
 5041778:	e0bfff17 	ldw	r2,-4(fp)
 504177c:	10ffffc4 	addi	r3,r2,-1
 5041780:	e0800417 	ldw	r2,16(fp)
 5041784:	d8800215 	stw	r2,8(sp)
 5041788:	e0800217 	ldw	r2,8(fp)
 504178c:	d8800115 	stw	r2,4(sp)
 5041790:	008000c4 	movi	r2,3
 5041794:	d8800015 	stw	r2,0(sp)
 5041798:	180f883a 	mov	r7,r3
 504179c:	e1bffc17 	ldw	r6,-16(fp)
 50417a0:	e17ffd17 	ldw	r5,-12(fp)
 50417a4:	e13ffc17 	ldw	r4,-16(fp)
 50417a8:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 3, color, display);
 50417ac:	e0bffe17 	ldw	r2,-8(fp)
 50417b0:	10ffffc4 	addi	r3,r2,-1
 50417b4:	e0bffe17 	ldw	r2,-8(fp)
 50417b8:	113fffc4 	addi	r4,r2,-1
 50417bc:	e0bfff17 	ldw	r2,-4(fp)
 50417c0:	117fffc4 	addi	r5,r2,-1
 50417c4:	e0800417 	ldw	r2,16(fp)
 50417c8:	d8800215 	stw	r2,8(sp)
 50417cc:	e0800217 	ldw	r2,8(fp)
 50417d0:	d8800115 	stw	r2,4(sp)
 50417d4:	008000c4 	movi	r2,3
 50417d8:	d8800015 	stw	r2,0(sp)
 50417dc:	280f883a 	mov	r7,r5
 50417e0:	200d883a 	mov	r6,r4
 50417e4:	e17ffd17 	ldw	r5,-12(fp)
 50417e8:	1809883a 	mov	r4,r3
 50417ec:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 3, color, display);
 50417f0:	e0bffe17 	ldw	r2,-8(fp)
 50417f4:	10ffffc4 	addi	r3,r2,-1
 50417f8:	e0800417 	ldw	r2,16(fp)
 50417fc:	d8800215 	stw	r2,8(sp)
 5041800:	e0800217 	ldw	r2,8(fp)
 5041804:	d8800115 	stw	r2,4(sp)
 5041808:	008000c4 	movi	r2,3
 504180c:	d8800015 	stw	r2,0(sp)
 5041810:	e1fffd17 	ldw	r7,-12(fp)
 5041814:	180d883a 	mov	r6,r3
 5041818:	e17ffd17 	ldw	r5,-12(fp)
 504181c:	e13ffc17 	ldw	r4,-16(fp)
 5041820:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 3, color, display);
 5041824:	e0bfff17 	ldw	r2,-4(fp)
 5041828:	10ffffc4 	addi	r3,r2,-1
 504182c:	e0bffe17 	ldw	r2,-8(fp)
 5041830:	113fffc4 	addi	r4,r2,-1
 5041834:	e0bfff17 	ldw	r2,-4(fp)
 5041838:	117fffc4 	addi	r5,r2,-1
 504183c:	e0800417 	ldw	r2,16(fp)
 5041840:	d8800215 	stw	r2,8(sp)
 5041844:	e0800217 	ldw	r2,8(fp)
 5041848:	d8800115 	stw	r2,4(sp)
 504184c:	008000c4 	movi	r2,3
 5041850:	d8800015 	stw	r2,0(sp)
 5041854:	280f883a 	mov	r7,r5
 5041858:	200d883a 	mov	r6,r4
 504185c:	180b883a 	mov	r5,r3
 5041860:	e13ffc17 	ldw	r4,-16(fp)
 5041864:	5040f480 	call	5040f48 <vid_draw_line>
  }

  return (0);
 5041868:	0005883a 	mov	r2,zero
}
 504186c:	e037883a 	mov	sp,fp
 5041870:	dfc00117 	ldw	ra,4(sp)
 5041874:	df000017 	ldw	fp,0(sp)
 5041878:	dec00204 	addi	sp,sp,8
 504187c:	f800283a 	ret

05041880 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 5041880:	defff704 	addi	sp,sp,-36
 5041884:	dfc00815 	stw	ra,32(sp)
 5041888:	df000715 	stw	fp,28(sp)
 504188c:	df000704 	addi	fp,sp,28
 5041890:	e13ffc15 	stw	r4,-16(fp)
 5041894:	e17ffd15 	stw	r5,-12(fp)
 5041898:	e1bffe15 	stw	r6,-8(fp)
 504189c:	3805883a 	mov	r2,r7
 50418a0:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 50418a4:	e0bfff03 	ldbu	r2,-4(fp)
 50418a8:	10bff804 	addi	r2,r2,-32
 50418ac:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 50418b0:	e03ff915 	stw	zero,-28(fp)
 50418b4:	00002506 	br	504194c <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 50418b8:	e0bffb07 	ldb	r2,-20(fp)
 50418bc:	108002e4 	muli	r2,r2,11
 50418c0:	1007883a 	mov	r3,r2
 50418c4:	e0bff917 	ldw	r2,-28(fp)
 50418c8:	1885883a 	add	r2,r3,r2
 50418cc:	e0c00217 	ldw	r3,8(fp)
 50418d0:	1885883a 	add	r2,r3,r2
 50418d4:	10800003 	ldbu	r2,0(r2)
 50418d8:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 50418dc:	e03ffa15 	stw	zero,-24(fp)
 50418e0:	00001406 	br	5041934 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 50418e4:	e0fffb47 	ldb	r3,-19(fp)
 50418e8:	01002004 	movi	r4,128
 50418ec:	e0bffa17 	ldw	r2,-24(fp)
 50418f0:	2085d83a 	sra	r2,r4,r2
 50418f4:	1884703a 	and	r2,r3,r2
 50418f8:	10000b26 	beq	r2,zero,5041928 <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 50418fc:	e0fffc17 	ldw	r3,-16(fp)
 5041900:	e0bffa17 	ldw	r2,-24(fp)
 5041904:	1889883a 	add	r4,r3,r2
 5041908:	e0fffd17 	ldw	r3,-12(fp)
 504190c:	e0bff917 	ldw	r2,-28(fp)
 5041910:	1885883a 	add	r2,r3,r2
 5041914:	e0fffe17 	ldw	r3,-8(fp)
 5041918:	e1c00317 	ldw	r7,12(fp)
 504191c:	180d883a 	mov	r6,r3
 5041920:	100b883a 	mov	r5,r2
 5041924:	50419700 	call	5041970 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 5041928:	e0bffa17 	ldw	r2,-24(fp)
 504192c:	10800044 	addi	r2,r2,1
 5041930:	e0bffa15 	stw	r2,-24(fp)
 5041934:	e0bffa17 	ldw	r2,-24(fp)
 5041938:	10800210 	cmplti	r2,r2,8
 504193c:	103fe91e 	bne	r2,zero,50418e4 <_gp+0xfffd64bc>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 5041940:	e0bff917 	ldw	r2,-28(fp)
 5041944:	10800044 	addi	r2,r2,1
 5041948:	e0bff915 	stw	r2,-28(fp)
 504194c:	e0bff917 	ldw	r2,-28(fp)
 5041950:	108002d0 	cmplti	r2,r2,11
 5041954:	103fd81e 	bne	r2,zero,50418b8 <_gp+0xfffd6490>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 5041958:	0005883a 	mov	r2,zero
}
 504195c:	e037883a 	mov	sp,fp
 5041960:	dfc00117 	ldw	ra,4(sp)
 5041964:	df000017 	ldw	fp,0(sp)
 5041968:	dec00204 	addi	sp,sp,8
 504196c:	f800283a 	ret

05041970 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 5041970:	defff904 	addi	sp,sp,-28
 5041974:	dfc00615 	stw	ra,24(sp)
 5041978:	df000515 	stw	fp,20(sp)
 504197c:	df000504 	addi	fp,sp,20
 5041980:	e13ffc15 	stw	r4,-16(fp)
 5041984:	e17ffd15 	stw	r5,-12(fp)
 5041988:	e1bffe15 	stw	r6,-8(fp)
 504198c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 5041990:	e0bffe17 	ldw	r2,-8(fp)
 5041994:	10803fcc 	andi	r2,r2,255
 5041998:	1004d0fa 	srli	r2,r2,3
 504199c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 50419a0:	e0bffe17 	ldw	r2,-8(fp)
 50419a4:	10bf000c 	andi	r2,r2,64512
 50419a8:	1004d17a 	srli	r2,r2,5
 50419ac:	1007883a 	mov	r3,r2
 50419b0:	e0bffb0b 	ldhu	r2,-20(fp)
 50419b4:	1884b03a 	or	r2,r3,r2
 50419b8:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 50419bc:	e0bffe17 	ldw	r2,-8(fp)
 50419c0:	10803e2c 	andhi	r2,r2,248
 50419c4:	1004d23a 	srli	r2,r2,8
 50419c8:	1007883a 	mov	r3,r2
 50419cc:	e0bffb0b 	ldhu	r2,-20(fp)
 50419d0:	1884b03a 	or	r2,r3,r2
 50419d4:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
 50419d8:	e0bffc17 	ldw	r2,-16(fp)
 50419dc:	10ffffcc 	andi	r3,r2,65535
 50419e0:	e0bffd17 	ldw	r2,-12(fp)
 50419e4:	10bfffcc 	andi	r2,r2,65535
 50419e8:	e13ffb0b 	ldhu	r4,-20(fp)
 50419ec:	200d883a 	mov	r6,r4
 50419f0:	100b883a 	mov	r5,r2
 50419f4:	1809883a 	mov	r4,r3
 50419f8:	50404200 	call	5040420 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
 50419fc:	0001883a 	nop
 5041a00:	e037883a 	mov	sp,fp
 5041a04:	dfc00117 	ldw	ra,4(sp)
 5041a08:	df000017 	ldw	fp,0(sp)
 5041a0c:	dec00204 	addi	sp,sp,8
 5041a10:	f800283a 	ret

05041a14 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 5041a14:	defffb04 	addi	sp,sp,-20
 5041a18:	dfc00415 	stw	ra,16(sp)
 5041a1c:	df000315 	stw	fp,12(sp)
 5041a20:	df000304 	addi	fp,sp,12
 5041a24:	e13ffd15 	stw	r4,-12(fp)
 5041a28:	e17ffe15 	stw	r5,-8(fp)
 5041a2c:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
 5041a30:	010141b4 	movhi	r4,1286
 5041a34:	21030e04 	addi	r4,r4,3128
 5041a38:	504fc680 	call	504fc68 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
 5041a3c:	0001883a 	nop
 5041a40:	e037883a 	mov	sp,fp
 5041a44:	dfc00117 	ldw	ra,4(sp)
 5041a48:	df000017 	ldw	fp,0(sp)
 5041a4c:	dec00204 	addi	sp,sp,8
 5041a50:	f800283a 	ret

05041a54 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 5041a54:	defff804 	addi	sp,sp,-32
 5041a58:	dfc00715 	stw	ra,28(sp)
 5041a5c:	df000615 	stw	fp,24(sp)
 5041a60:	df000604 	addi	fp,sp,24
 5041a64:	e13ffc15 	stw	r4,-16(fp)
 5041a68:	e17ffd15 	stw	r5,-12(fp)
 5041a6c:	e1bffe15 	stw	r6,-8(fp)
 5041a70:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 5041a74:	e0bffd17 	ldw	r2,-12(fp)
 5041a78:	e0bffb15 	stw	r2,-20(fp)
 5041a7c:	00001206 	br	5041ac8 <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
 5041a80:	e0bffc17 	ldw	r2,-16(fp)
 5041a84:	e0bffa15 	stw	r2,-24(fp)
 5041a88:	00000906 	br	5041ab0 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
 5041a8c:	e0800217 	ldw	r2,8(fp)
 5041a90:	e1c00317 	ldw	r7,12(fp)
 5041a94:	100d883a 	mov	r6,r2
 5041a98:	e17ffb17 	ldw	r5,-20(fp)
 5041a9c:	e13ffa17 	ldw	r4,-24(fp)
 5041aa0:	50419700 	call	5041970 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 5041aa4:	e0bffa17 	ldw	r2,-24(fp)
 5041aa8:	10800044 	addi	r2,r2,1
 5041aac:	e0bffa15 	stw	r2,-24(fp)
 5041ab0:	e0fffa17 	ldw	r3,-24(fp)
 5041ab4:	e0bffe17 	ldw	r2,-8(fp)
 5041ab8:	18bff416 	blt	r3,r2,5041a8c <_gp+0xfffd6664>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 5041abc:	e0bffb17 	ldw	r2,-20(fp)
 5041ac0:	10800044 	addi	r2,r2,1
 5041ac4:	e0bffb15 	stw	r2,-20(fp)
 5041ac8:	e0fffb17 	ldw	r3,-20(fp)
 5041acc:	e0bfff17 	ldw	r2,-4(fp)
 5041ad0:	18bfeb16 	blt	r3,r2,5041a80 <_gp+0xfffd6658>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
 5041ad4:	0001883a 	nop
 5041ad8:	e037883a 	mov	sp,fp
 5041adc:	dfc00117 	ldw	ra,4(sp)
 5041ae0:	df000017 	ldw	fp,0(sp)
 5041ae4:	dec00204 	addi	sp,sp,8
 5041ae8:	f800283a 	ret

05041aec <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 5041aec:	defff904 	addi	sp,sp,-28
 5041af0:	dfc00615 	stw	ra,24(sp)
 5041af4:	df000515 	stw	fp,20(sp)
 5041af8:	df000504 	addi	fp,sp,20
 5041afc:	2007883a 	mov	r3,r4
 5041b00:	2805883a 	mov	r2,r5
 5041b04:	e1bffe15 	stw	r6,-8(fp)
 5041b08:	e1ffff15 	stw	r7,-4(fp)
 5041b0c:	e0fffc0d 	sth	r3,-16(fp)
 5041b10:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 5041b14:	e0bffc0f 	ldh	r2,-16(fp)
 5041b18:	e0bffb15 	stw	r2,-20(fp)
 5041b1c:	00000906 	br	5041b44 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
 5041b20:	e0bfff17 	ldw	r2,-4(fp)
 5041b24:	e1c00217 	ldw	r7,8(fp)
 5041b28:	100d883a 	mov	r6,r2
 5041b2c:	e17ffe17 	ldw	r5,-8(fp)
 5041b30:	e13ffb17 	ldw	r4,-20(fp)
 5041b34:	50419700 	call	5041970 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 5041b38:	e0bffb17 	ldw	r2,-20(fp)
 5041b3c:	10800044 	addi	r2,r2,1
 5041b40:	e0bffb15 	stw	r2,-20(fp)
 5041b44:	e0bffd0f 	ldh	r2,-12(fp)
 5041b48:	e0fffb17 	ldw	r3,-20(fp)
 5041b4c:	18bff416 	blt	r3,r2,5041b20 <_gp+0xfffd66f8>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
 5041b50:	0001883a 	nop
 5041b54:	e037883a 	mov	sp,fp
 5041b58:	dfc00117 	ldw	ra,4(sp)
 5041b5c:	df000017 	ldw	fp,0(sp)
 5041b60:	dec00204 	addi	sp,sp,8
 5041b64:	f800283a 	ret

05041b68 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 5041b68:	defffc04 	addi	sp,sp,-16
 5041b6c:	df000315 	stw	fp,12(sp)
 5041b70:	df000304 	addi	fp,sp,12
 5041b74:	e13ffd15 	stw	r4,-12(fp)
 5041b78:	e17ffe15 	stw	r5,-8(fp)
 5041b7c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 5041b80:	e0bffe17 	ldw	r2,-8(fp)
 5041b84:	1085883a 	add	r2,r2,r2
 5041b88:	10800054 	ori	r2,r2,1
 5041b8c:	1006917a 	slli	r3,r2,5
 5041b90:	e0bfff17 	ldw	r2,-4(fp)
 5041b94:	1886b03a 	or	r3,r3,r2
 5041b98:	e0bffd17 	ldw	r2,-12(fp)
 5041b9c:	100492fa 	slli	r2,r2,11
 5041ba0:	1884b03a 	or	r2,r3,r2
}
 5041ba4:	e037883a 	mov	sp,fp
 5041ba8:	df000017 	ldw	fp,0(sp)
 5041bac:	dec00104 	addi	sp,sp,4
 5041bb0:	f800283a 	ret

05041bb4 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 5041bb4:	defffc04 	addi	sp,sp,-16
 5041bb8:	df000315 	stw	fp,12(sp)
 5041bbc:	df000304 	addi	fp,sp,12
 5041bc0:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 5041bc4:	e0bfff17 	ldw	r2,-4(fp)
 5041bc8:	10800003 	ldbu	r2,0(r2)
 5041bcc:	1007883a 	mov	r3,r2
 5041bd0:	00bffe04 	movi	r2,-8
 5041bd4:	1884703a 	and	r2,r3,r2
 5041bd8:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 5041bdc:	e0bfff17 	ldw	r2,-4(fp)
 5041be0:	10800044 	addi	r2,r2,1
 5041be4:	10800003 	ldbu	r2,0(r2)
 5041be8:	1007883a 	mov	r3,r2
 5041bec:	00bfff04 	movi	r2,-4
 5041bf0:	1884703a 	and	r2,r3,r2
 5041bf4:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 5041bf8:	e0bfff17 	ldw	r2,-4(fp)
 5041bfc:	10800084 	addi	r2,r2,2
 5041c00:	10800003 	ldbu	r2,0(r2)
 5041c04:	1007883a 	mov	r3,r2
 5041c08:	00bffe04 	movi	r2,-8
 5041c0c:	1884703a 	and	r2,r3,r2
 5041c10:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 5041c14:	e0bffd83 	ldbu	r2,-10(fp)
 5041c18:	1004d0fa 	srli	r2,r2,3
 5041c1c:	10803fcc 	andi	r2,r2,255
 5041c20:	e0fffd43 	ldbu	r3,-11(fp)
 5041c24:	180690fa 	slli	r3,r3,3
 5041c28:	10c4b03a 	or	r2,r2,r3
 5041c2c:	1007883a 	mov	r3,r2
 5041c30:	e0bffd03 	ldbu	r2,-12(fp)
 5041c34:	1004923a 	slli	r2,r2,8
 5041c38:	1884b03a 	or	r2,r3,r2
 5041c3c:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 5041c40:	e0bffe0b 	ldhu	r2,-8(fp)
}
 5041c44:	e037883a 	mov	sp,fp
 5041c48:	df000017 	ldw	fp,0(sp)
 5041c4c:	dec00104 	addi	sp,sp,4
 5041c50:	f800283a 	ret

05041c54 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 5041c54:	defffd04 	addi	sp,sp,-12
 5041c58:	df000215 	stw	fp,8(sp)
 5041c5c:	df000204 	addi	fp,sp,8
 5041c60:	2005883a 	mov	r2,r4
 5041c64:	e17fff15 	stw	r5,-4(fp)
 5041c68:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 5041c6c:	e0bffe0b 	ldhu	r2,-8(fp)
 5041c70:	1004d2fa 	srli	r2,r2,11
 5041c74:	1007883a 	mov	r3,r2
 5041c78:	e0bfff17 	ldw	r2,-4(fp)
 5041c7c:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 5041c80:	e0bfff17 	ldw	r2,-4(fp)
 5041c84:	10800044 	addi	r2,r2,1
 5041c88:	e0fffe0b 	ldhu	r3,-8(fp)
 5041c8c:	18c00f8c 	andi	r3,r3,62
 5041c90:	1807d17a 	srai	r3,r3,5
 5041c94:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 5041c98:	e0bfff17 	ldw	r2,-4(fp)
 5041c9c:	10800084 	addi	r2,r2,2
 5041ca0:	e0fffe0b 	ldhu	r3,-8(fp)
 5041ca4:	18c007cc 	andi	r3,r3,31
 5041ca8:	10c00005 	stb	r3,0(r2)
	
	return (0);
 5041cac:	0005883a 	mov	r2,zero
}
 5041cb0:	e037883a 	mov	sp,fp
 5041cb4:	df000017 	ldw	fp,0(sp)
 5041cb8:	dec00104 	addi	sp,sp,4
 5041cbc:	f800283a 	ret

05041cc0 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 5041cc0:	defffa04 	addi	sp,sp,-24
 5041cc4:	dfc00515 	stw	ra,20(sp)
 5041cc8:	df000415 	stw	fp,16(sp)
 5041ccc:	df000404 	addi	fp,sp,16
 5041cd0:	e13ffc15 	stw	r4,-16(fp)
 5041cd4:	e17ffd15 	stw	r5,-12(fp)
 5041cd8:	e1bffe15 	stw	r6,-8(fp)
 5041cdc:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
 5041ce0:	010141b4 	movhi	r4,1286
 5041ce4:	21031704 	addi	r4,r4,3164
 5041ce8:	504fc680 	call	504fc68 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
 5041cec:	0001883a 	nop
 5041cf0:	e037883a 	mov	sp,fp
 5041cf4:	dfc00117 	ldw	ra,4(sp)
 5041cf8:	df000017 	ldw	fp,0(sp)
 5041cfc:	dec00204 	addi	sp,sp,8
 5041d00:	f800283a 	ret

05041d04 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 5041d04:	deffef04 	addi	sp,sp,-68
 5041d08:	dfc01015 	stw	ra,64(sp)
 5041d0c:	df000f15 	stw	fp,60(sp)
 5041d10:	df000f04 	addi	fp,sp,60
 5041d14:	2011883a 	mov	r8,r4
 5041d18:	3009883a 	mov	r4,r6
 5041d1c:	3807883a 	mov	r3,r7
 5041d20:	e0800217 	ldw	r2,8(fp)
 5041d24:	e23ffb0d 	sth	r8,-20(fp)
 5041d28:	e17ffc0d 	sth	r5,-16(fp)
 5041d2c:	e13ffd0d 	sth	r4,-12(fp)
 5041d30:	e0fffe0d 	sth	r3,-8(fp)
 5041d34:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 5041d38:	e0fffd0b 	ldhu	r3,-12(fp)
 5041d3c:	e0bffb0b 	ldhu	r2,-20(fp)
 5041d40:	1885c83a 	sub	r2,r3,r2
 5041d44:	1000010e 	bge	r2,zero,5041d4c <vid_draw_sloped_line+0x48>
 5041d48:	0085c83a 	sub	r2,zero,r2
 5041d4c:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 5041d50:	e0fffe0b 	ldhu	r3,-8(fp)
 5041d54:	e0bffc0b 	ldhu	r2,-16(fp)
 5041d58:	1885c83a 	sub	r2,r3,r2
 5041d5c:	1000010e 	bge	r2,zero,5041d64 <vid_draw_sloped_line+0x60>
 5041d60:	0085c83a 	sub	r2,zero,r2
 5041d64:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 5041d68:	e0bffb0b 	ldhu	r2,-20(fp)
 5041d6c:	e0fffd0b 	ldhu	r3,-12(fp)
 5041d70:	1880032e 	bgeu	r3,r2,5041d80 <vid_draw_sloped_line+0x7c>
 5041d74:	00bfffc4 	movi	r2,-1
 5041d78:	e0bff315 	stw	r2,-52(fp)
 5041d7c:	00000206 	br	5041d88 <vid_draw_sloped_line+0x84>
 5041d80:	00800044 	movi	r2,1
 5041d84:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 5041d88:	e0bffc0b 	ldhu	r2,-16(fp)
 5041d8c:	e0fffe0b 	ldhu	r3,-8(fp)
 5041d90:	1880032e 	bgeu	r3,r2,5041da0 <vid_draw_sloped_line+0x9c>
 5041d94:	00bfffc4 	movi	r2,-1
 5041d98:	e0bff415 	stw	r2,-48(fp)
 5041d9c:	00000206 	br	5041da8 <vid_draw_sloped_line+0xa4>
 5041da0:	00800044 	movi	r2,1
 5041da4:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 5041da8:	e0fff117 	ldw	r3,-60(fp)
 5041dac:	e0bff217 	ldw	r2,-56(fp)
 5041db0:	18803616 	blt	r3,r2,5041e8c <vid_draw_sloped_line+0x188>
    int dPr   = vert_delta<<1;
 5041db4:	e0bff217 	ldw	r2,-56(fp)
 5041db8:	1085883a 	add	r2,r2,r2
 5041dbc:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 5041dc0:	e0bff117 	ldw	r2,-60(fp)
 5041dc4:	1085883a 	add	r2,r2,r2
 5041dc8:	1007883a 	mov	r3,r2
 5041dcc:	e0bff717 	ldw	r2,-36(fp)
 5041dd0:	10c5c83a 	sub	r2,r2,r3
 5041dd4:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 5041dd8:	e0fff717 	ldw	r3,-36(fp)
 5041ddc:	e0bff117 	ldw	r2,-60(fp)
 5041de0:	1885c83a 	sub	r2,r3,r2
 5041de4:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 5041de8:	00002506 	br	5041e80 <vid_draw_sloped_line+0x17c>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 5041dec:	e0bffb0b 	ldhu	r2,-20(fp)
 5041df0:	e0fffc0b 	ldhu	r3,-16(fp)
 5041df4:	e1000317 	ldw	r4,12(fp)
 5041df8:	e1c00417 	ldw	r7,16(fp)
 5041dfc:	200d883a 	mov	r6,r4
 5041e00:	180b883a 	mov	r5,r3
 5041e04:	1009883a 	mov	r4,r2
 5041e08:	50419700 	call	5041970 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 5041e0c:	e0bff517 	ldw	r2,-44(fp)
 5041e10:	00800f0e 	bge	zero,r2,5041e50 <vid_draw_sloped_line+0x14c>
        horiz_start+=horiz_incr;
 5041e14:	e0bff317 	ldw	r2,-52(fp)
 5041e18:	1007883a 	mov	r3,r2
 5041e1c:	e0bffb0b 	ldhu	r2,-20(fp)
 5041e20:	1885883a 	add	r2,r3,r2
 5041e24:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 5041e28:	e0bff417 	ldw	r2,-48(fp)
 5041e2c:	1007883a 	mov	r3,r2
 5041e30:	e0bffc0b 	ldhu	r2,-16(fp)
 5041e34:	1885883a 	add	r2,r3,r2
 5041e38:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 5041e3c:	e0fff517 	ldw	r3,-44(fp)
 5041e40:	e0bff817 	ldw	r2,-32(fp)
 5041e44:	1885883a 	add	r2,r3,r2
 5041e48:	e0bff515 	stw	r2,-44(fp)
 5041e4c:	00000906 	br	5041e74 <vid_draw_sloped_line+0x170>
      } else {
        horiz_start+=horiz_incr;
 5041e50:	e0bff317 	ldw	r2,-52(fp)
 5041e54:	1007883a 	mov	r3,r2
 5041e58:	e0bffb0b 	ldhu	r2,-20(fp)
 5041e5c:	1885883a 	add	r2,r3,r2
 5041e60:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 5041e64:	e0fff517 	ldw	r3,-44(fp)
 5041e68:	e0bff717 	ldw	r2,-36(fp)
 5041e6c:	1885883a 	add	r2,r3,r2
 5041e70:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 5041e74:	e0bff117 	ldw	r2,-60(fp)
 5041e78:	10bfffc4 	addi	r2,r2,-1
 5041e7c:	e0bff115 	stw	r2,-60(fp)
 5041e80:	e0bff117 	ldw	r2,-60(fp)
 5041e84:	103fd90e 	bge	r2,zero,5041dec <_gp+0xfffd69c4>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 5041e88:	00003506 	br	5041f60 <vid_draw_sloped_line+0x25c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 5041e8c:	e0bff117 	ldw	r2,-60(fp)
 5041e90:	1085883a 	add	r2,r2,r2
 5041e94:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 5041e98:	e0bff217 	ldw	r2,-56(fp)
 5041e9c:	1085883a 	add	r2,r2,r2
 5041ea0:	1007883a 	mov	r3,r2
 5041ea4:	e0bff917 	ldw	r2,-28(fp)
 5041ea8:	10c5c83a 	sub	r2,r2,r3
 5041eac:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 5041eb0:	e0fff917 	ldw	r3,-28(fp)
 5041eb4:	e0bff217 	ldw	r2,-56(fp)
 5041eb8:	1885c83a 	sub	r2,r3,r2
 5041ebc:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 5041ec0:	00002506 	br	5041f58 <vid_draw_sloped_line+0x254>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 5041ec4:	e0bffb0b 	ldhu	r2,-20(fp)
 5041ec8:	e0fffc0b 	ldhu	r3,-16(fp)
 5041ecc:	e1000317 	ldw	r4,12(fp)
 5041ed0:	e1c00417 	ldw	r7,16(fp)
 5041ed4:	200d883a 	mov	r6,r4
 5041ed8:	180b883a 	mov	r5,r3
 5041edc:	1009883a 	mov	r4,r2
 5041ee0:	50419700 	call	5041970 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 5041ee4:	e0bff617 	ldw	r2,-40(fp)
 5041ee8:	00800f0e 	bge	zero,r2,5041f28 <vid_draw_sloped_line+0x224>
        horiz_start+=horiz_incr;
 5041eec:	e0bff317 	ldw	r2,-52(fp)
 5041ef0:	1007883a 	mov	r3,r2
 5041ef4:	e0bffb0b 	ldhu	r2,-20(fp)
 5041ef8:	1885883a 	add	r2,r3,r2
 5041efc:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 5041f00:	e0bff417 	ldw	r2,-48(fp)
 5041f04:	1007883a 	mov	r3,r2
 5041f08:	e0bffc0b 	ldhu	r2,-16(fp)
 5041f0c:	1885883a 	add	r2,r3,r2
 5041f10:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 5041f14:	e0fff617 	ldw	r3,-40(fp)
 5041f18:	e0bffa17 	ldw	r2,-24(fp)
 5041f1c:	1885883a 	add	r2,r3,r2
 5041f20:	e0bff615 	stw	r2,-40(fp)
 5041f24:	00000906 	br	5041f4c <vid_draw_sloped_line+0x248>
      } else {
        vert_start+=vert_incr;
 5041f28:	e0bff417 	ldw	r2,-48(fp)
 5041f2c:	1007883a 	mov	r3,r2
 5041f30:	e0bffc0b 	ldhu	r2,-16(fp)
 5041f34:	1885883a 	add	r2,r3,r2
 5041f38:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 5041f3c:	e0fff617 	ldw	r3,-40(fp)
 5041f40:	e0bff917 	ldw	r2,-28(fp)
 5041f44:	1885883a 	add	r2,r3,r2
 5041f48:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 5041f4c:	e0bff217 	ldw	r2,-56(fp)
 5041f50:	10bfffc4 	addi	r2,r2,-1
 5041f54:	e0bff215 	stw	r2,-56(fp)
 5041f58:	e0bff217 	ldw	r2,-56(fp)
 5041f5c:	103fd90e 	bge	r2,zero,5041ec4 <_gp+0xfffd6a9c>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 5041f60:	0001883a 	nop
 5041f64:	e037883a 	mov	sp,fp
 5041f68:	dfc00117 	ldw	ra,4(sp)
 5041f6c:	df000017 	ldw	fp,0(sp)
 5041f70:	dec00204 	addi	sp,sp,8
 5041f74:	f800283a 	ret

05041f78 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 5041f78:	defff104 	addi	sp,sp,-60
 5041f7c:	dfc00e15 	stw	ra,56(sp)
 5041f80:	df000d15 	stw	fp,52(sp)
 5041f84:	df000d04 	addi	fp,sp,52
 5041f88:	e13ffb15 	stw	r4,-20(fp)
 5041f8c:	e17ffc15 	stw	r5,-16(fp)
 5041f90:	e1bffd15 	stw	r6,-12(fp)
 5041f94:	e1fffe15 	stw	r7,-8(fp)
 5041f98:	e0800217 	ldw	r2,8(fp)
 5041f9c:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 5041fa0:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 5041fa4:	e0bffd17 	ldw	r2,-12(fp)
 5041fa8:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 5041fac:	e0bffd17 	ldw	r2,-12(fp)
 5041fb0:	1085883a 	add	r2,r2,r2
 5041fb4:	1085883a 	add	r2,r2,r2
 5041fb8:	1007883a 	mov	r3,r2
 5041fbc:	00800144 	movi	r2,5
 5041fc0:	10c5c83a 	sub	r2,r2,r3
 5041fc4:	1000010e 	bge	r2,zero,5041fcc <vid_draw_circle+0x54>
 5041fc8:	108000c4 	addi	r2,r2,3
 5041fcc:	1005d0ba 	srai	r2,r2,2
 5041fd0:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 5041fd4:	e0bfff07 	ldb	r2,-4(fp)
 5041fd8:	e0c00317 	ldw	r3,12(fp)
 5041fdc:	d8c00415 	stw	r3,16(sp)
 5041fe0:	d8800315 	stw	r2,12(sp)
 5041fe4:	e0bffe17 	ldw	r2,-8(fp)
 5041fe8:	d8800215 	stw	r2,8(sp)
 5041fec:	d8000115 	stw	zero,4(sp)
 5041ff0:	d8000015 	stw	zero,0(sp)
 5041ff4:	e1fff917 	ldw	r7,-28(fp)
 5041ff8:	e1bff817 	ldw	r6,-32(fp)
 5041ffc:	e17ffc17 	ldw	r5,-16(fp)
 5042000:	e13ffb17 	ldw	r4,-20(fp)
 5042004:	504247c0 	call	504247c <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 5042008:	00002406 	br	504209c <vid_draw_circle+0x124>
    x++;
 504200c:	e0bff817 	ldw	r2,-32(fp)
 5042010:	10800044 	addi	r2,r2,1
 5042014:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 5042018:	e0bffa17 	ldw	r2,-24(fp)
 504201c:	1000070e 	bge	r2,zero,504203c <vid_draw_circle+0xc4>
      p += 2*x+1;
 5042020:	e0bff817 	ldw	r2,-32(fp)
 5042024:	1085883a 	add	r2,r2,r2
 5042028:	10800044 	addi	r2,r2,1
 504202c:	e0fffa17 	ldw	r3,-24(fp)
 5042030:	1885883a 	add	r2,r3,r2
 5042034:	e0bffa15 	stw	r2,-24(fp)
 5042038:	00000b06 	br	5042068 <vid_draw_circle+0xf0>
    } else {
      y--;
 504203c:	e0bff917 	ldw	r2,-28(fp)
 5042040:	10bfffc4 	addi	r2,r2,-1
 5042044:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 5042048:	e0fff817 	ldw	r3,-32(fp)
 504204c:	e0bff917 	ldw	r2,-28(fp)
 5042050:	1885c83a 	sub	r2,r3,r2
 5042054:	1085883a 	add	r2,r2,r2
 5042058:	10800044 	addi	r2,r2,1
 504205c:	e0fffa17 	ldw	r3,-24(fp)
 5042060:	1885883a 	add	r2,r3,r2
 5042064:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 5042068:	e0bfff07 	ldb	r2,-4(fp)
 504206c:	e0c00317 	ldw	r3,12(fp)
 5042070:	d8c00415 	stw	r3,16(sp)
 5042074:	d8800315 	stw	r2,12(sp)
 5042078:	e0bffe17 	ldw	r2,-8(fp)
 504207c:	d8800215 	stw	r2,8(sp)
 5042080:	d8000115 	stw	zero,4(sp)
 5042084:	d8000015 	stw	zero,0(sp)
 5042088:	e1fff917 	ldw	r7,-28(fp)
 504208c:	e1bff817 	ldw	r6,-32(fp)
 5042090:	e17ffc17 	ldw	r5,-16(fp)
 5042094:	e13ffb17 	ldw	r4,-20(fp)
 5042098:	504247c0 	call	504247c <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 504209c:	e0fff817 	ldw	r3,-32(fp)
 50420a0:	e0bff917 	ldw	r2,-28(fp)
 50420a4:	18bfd916 	blt	r3,r2,504200c <_gp+0xfffd6be4>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 50420a8:	0005883a 	mov	r2,zero
}
 50420ac:	e037883a 	mov	sp,fp
 50420b0:	dfc00117 	ldw	ra,4(sp)
 50420b4:	df000017 	ldw	fp,0(sp)
 50420b8:	dec00204 	addi	sp,sp,8
 50420bc:	f800283a 	ret

050420c0 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 50420c0:	deffec04 	addi	sp,sp,-80
 50420c4:	dfc01315 	stw	ra,76(sp)
 50420c8:	df001215 	stw	fp,72(sp)
 50420cc:	df001204 	addi	fp,sp,72
 50420d0:	e13ffc15 	stw	r4,-16(fp)
 50420d4:	e17ffd15 	stw	r5,-12(fp)
 50420d8:	e1bffe15 	stw	r6,-8(fp)
 50420dc:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 50420e0:	e0bffc17 	ldw	r2,-16(fp)
 50420e4:	e0fffe17 	ldw	r3,-8(fp)
 50420e8:	1880060e 	bge	r3,r2,5042104 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 50420ec:	e0bffe17 	ldw	r2,-8(fp)
 50420f0:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 50420f4:	e0bffc17 	ldw	r2,-16(fp)
 50420f8:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 50420fc:	e0bff617 	ldw	r2,-40(fp)
 5042100:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 5042104:	e0bffd17 	ldw	r2,-12(fp)
 5042108:	e0ffff17 	ldw	r3,-4(fp)
 504210c:	1880060e 	bge	r3,r2,5042128 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 5042110:	e0bfff17 	ldw	r2,-4(fp)
 5042114:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 5042118:	e0bffd17 	ldw	r2,-12(fp)
 504211c:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 5042120:	e0bff617 	ldw	r2,-40(fp)
 5042124:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 5042128:	e0fffe17 	ldw	r3,-8(fp)
 504212c:	e0bffc17 	ldw	r2,-16(fp)
 5042130:	1885c83a 	sub	r2,r3,r2
 5042134:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 5042138:	e0ffff17 	ldw	r3,-4(fp)
 504213c:	e0bffd17 	ldw	r2,-12(fp)
 5042140:	1885c83a 	sub	r2,r3,r2
 5042144:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 5042148:	e0bff717 	ldw	r2,-36(fp)
 504214c:	1006d07a 	srli	r3,r2,1
 5042150:	e0800217 	ldw	r2,8(fp)
 5042154:	1880032e 	bgeu	r3,r2,5042164 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 5042158:	e0bff717 	ldw	r2,-36(fp)
 504215c:	1004d07a 	srli	r2,r2,1
 5042160:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 5042164:	e0bff817 	ldw	r2,-32(fp)
 5042168:	1006d07a 	srli	r3,r2,1
 504216c:	e0800217 	ldw	r2,8(fp)
 5042170:	1880032e 	bgeu	r3,r2,5042180 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 5042174:	e0bff817 	ldw	r2,-32(fp)
 5042178:	1004d07a 	srli	r2,r2,1
 504217c:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 5042180:	e0800217 	ldw	r2,8(fp)
 5042184:	1085883a 	add	r2,r2,r2
 5042188:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 504218c:	e0bff917 	ldw	r2,-28(fp)
 5042190:	e0fff717 	ldw	r3,-36(fp)
 5042194:	1885c83a 	sub	r2,r3,r2
 5042198:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 504219c:	e0bff917 	ldw	r2,-28(fp)
 50421a0:	e0fff817 	ldw	r3,-32(fp)
 50421a4:	1885c83a 	sub	r2,r3,r2
 50421a8:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 50421ac:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 50421b0:	e0800217 	ldw	r2,8(fp)
 50421b4:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 50421b8:	e0800217 	ldw	r2,8(fp)
 50421bc:	1085883a 	add	r2,r2,r2
 50421c0:	1085883a 	add	r2,r2,r2
 50421c4:	1007883a 	mov	r3,r2
 50421c8:	00800144 	movi	r2,5
 50421cc:	10c5c83a 	sub	r2,r2,r3
 50421d0:	1000010e 	bge	r2,zero,50421d8 <vid_draw_round_corner_box+0x118>
 50421d4:	108000c4 	addi	r2,r2,3
 50421d8:	1005d0ba 	srai	r2,r2,2
 50421dc:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 50421e0:	e0fffc17 	ldw	r3,-16(fp)
 50421e4:	e0800217 	ldw	r2,8(fp)
 50421e8:	1891883a 	add	r8,r3,r2
 50421ec:	e0fffd17 	ldw	r3,-12(fp)
 50421f0:	e0800217 	ldw	r2,8(fp)
 50421f4:	1893883a 	add	r9,r3,r2
 50421f8:	e1bff317 	ldw	r6,-52(fp)
 50421fc:	e1fff417 	ldw	r7,-48(fp)
 5042200:	e0bffa17 	ldw	r2,-24(fp)
 5042204:	e0fffb17 	ldw	r3,-20(fp)
 5042208:	e1000417 	ldw	r4,16(fp)
 504220c:	21003fcc 	andi	r4,r4,255
 5042210:	2100201c 	xori	r4,r4,128
 5042214:	213fe004 	addi	r4,r4,-128
 5042218:	e1400517 	ldw	r5,20(fp)
 504221c:	d9400415 	stw	r5,16(sp)
 5042220:	d9000315 	stw	r4,12(sp)
 5042224:	e1000317 	ldw	r4,12(fp)
 5042228:	d9000215 	stw	r4,8(sp)
 504222c:	d8c00115 	stw	r3,4(sp)
 5042230:	d8800015 	stw	r2,0(sp)
 5042234:	480b883a 	mov	r5,r9
 5042238:	4009883a 	mov	r4,r8
 504223c:	504247c0 	call	504247c <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 5042240:	00003106 	br	5042308 <vid_draw_round_corner_box+0x248>
    x++;
 5042244:	e0bff317 	ldw	r2,-52(fp)
 5042248:	10800044 	addi	r2,r2,1
 504224c:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 5042250:	e0bff517 	ldw	r2,-44(fp)
 5042254:	1000080e 	bge	r2,zero,5042278 <vid_draw_round_corner_box+0x1b8>
      p += 2*x+1;
 5042258:	e0bff317 	ldw	r2,-52(fp)
 504225c:	1085883a 	add	r2,r2,r2
 5042260:	1007883a 	mov	r3,r2
 5042264:	e0bff517 	ldw	r2,-44(fp)
 5042268:	1885883a 	add	r2,r3,r2
 504226c:	10800044 	addi	r2,r2,1
 5042270:	e0bff515 	stw	r2,-44(fp)
 5042274:	00000c06 	br	50422a8 <vid_draw_round_corner_box+0x1e8>
    } else {
      y--;
 5042278:	e0bff417 	ldw	r2,-48(fp)
 504227c:	10bfffc4 	addi	r2,r2,-1
 5042280:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 5042284:	e0fff317 	ldw	r3,-52(fp)
 5042288:	e0bff417 	ldw	r2,-48(fp)
 504228c:	1885c83a 	sub	r2,r3,r2
 5042290:	1085883a 	add	r2,r2,r2
 5042294:	1007883a 	mov	r3,r2
 5042298:	e0bff517 	ldw	r2,-44(fp)
 504229c:	1885883a 	add	r2,r3,r2
 50422a0:	10800044 	addi	r2,r2,1
 50422a4:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 50422a8:	e0fffc17 	ldw	r3,-16(fp)
 50422ac:	e0800217 	ldw	r2,8(fp)
 50422b0:	1891883a 	add	r8,r3,r2
 50422b4:	e0fffd17 	ldw	r3,-12(fp)
 50422b8:	e0800217 	ldw	r2,8(fp)
 50422bc:	1893883a 	add	r9,r3,r2
 50422c0:	e1bff317 	ldw	r6,-52(fp)
 50422c4:	e1fff417 	ldw	r7,-48(fp)
 50422c8:	e0bffa17 	ldw	r2,-24(fp)
 50422cc:	e0fffb17 	ldw	r3,-20(fp)
 50422d0:	e1000417 	ldw	r4,16(fp)
 50422d4:	21003fcc 	andi	r4,r4,255
 50422d8:	2100201c 	xori	r4,r4,128
 50422dc:	213fe004 	addi	r4,r4,-128
 50422e0:	e1400517 	ldw	r5,20(fp)
 50422e4:	d9400415 	stw	r5,16(sp)
 50422e8:	d9000315 	stw	r4,12(sp)
 50422ec:	e1000317 	ldw	r4,12(fp)
 50422f0:	d9000215 	stw	r4,8(sp)
 50422f4:	d8c00115 	stw	r3,4(sp)
 50422f8:	d8800015 	stw	r2,0(sp)
 50422fc:	480b883a 	mov	r5,r9
 5042300:	4009883a 	mov	r4,r8
 5042304:	504247c0 	call	504247c <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 5042308:	e0fff317 	ldw	r3,-52(fp)
 504230c:	e0bff417 	ldw	r2,-48(fp)
 5042310:	18bfcc36 	bltu	r3,r2,5042244 <_gp+0xfffd6e1c>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 5042314:	e0800417 	ldw	r2,16(fp)
 5042318:	10001026 	beq	r2,zero,504235c <vid_draw_round_corner_box+0x29c>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 504231c:	e0fffd17 	ldw	r3,-12(fp)
 5042320:	e0800217 	ldw	r2,8(fp)
 5042324:	1889883a 	add	r4,r3,r2
 5042328:	e0ffff17 	ldw	r3,-4(fp)
 504232c:	e0800217 	ldw	r2,8(fp)
 5042330:	1887c83a 	sub	r3,r3,r2
 5042334:	e0800517 	ldw	r2,20(fp)
 5042338:	d8800115 	stw	r2,4(sp)
 504233c:	e0800317 	ldw	r2,12(fp)
 5042340:	d8800015 	stw	r2,0(sp)
 5042344:	180f883a 	mov	r7,r3
 5042348:	e1bffe17 	ldw	r6,-8(fp)
 504234c:	200b883a 	mov	r5,r4
 5042350:	e13ffc17 	ldw	r4,-16(fp)
 5042354:	5041a540 	call	5041a54 <vid_paint_block>
 5042358:	00004206 	br	5042464 <vid_draw_round_corner_box+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 504235c:	e0fffd17 	ldw	r3,-12(fp)
 5042360:	e0800217 	ldw	r2,8(fp)
 5042364:	1889883a 	add	r4,r3,r2
 5042368:	e0ffff17 	ldw	r3,-4(fp)
 504236c:	e0800217 	ldw	r2,8(fp)
 5042370:	1887c83a 	sub	r3,r3,r2
 5042374:	e0800517 	ldw	r2,20(fp)
 5042378:	d8800215 	stw	r2,8(sp)
 504237c:	e0800317 	ldw	r2,12(fp)
 5042380:	d8800115 	stw	r2,4(sp)
 5042384:	00800044 	movi	r2,1
 5042388:	d8800015 	stw	r2,0(sp)
 504238c:	180f883a 	mov	r7,r3
 5042390:	e1bffc17 	ldw	r6,-16(fp)
 5042394:	200b883a 	mov	r5,r4
 5042398:	e13ffc17 	ldw	r4,-16(fp)
 504239c:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 50423a0:	e0fffd17 	ldw	r3,-12(fp)
 50423a4:	e0800217 	ldw	r2,8(fp)
 50423a8:	1889883a 	add	r4,r3,r2
 50423ac:	e0ffff17 	ldw	r3,-4(fp)
 50423b0:	e0800217 	ldw	r2,8(fp)
 50423b4:	1887c83a 	sub	r3,r3,r2
 50423b8:	e0800517 	ldw	r2,20(fp)
 50423bc:	d8800215 	stw	r2,8(sp)
 50423c0:	e0800317 	ldw	r2,12(fp)
 50423c4:	d8800115 	stw	r2,4(sp)
 50423c8:	00800044 	movi	r2,1
 50423cc:	d8800015 	stw	r2,0(sp)
 50423d0:	180f883a 	mov	r7,r3
 50423d4:	e1bffe17 	ldw	r6,-8(fp)
 50423d8:	200b883a 	mov	r5,r4
 50423dc:	e13ffe17 	ldw	r4,-8(fp)
 50423e0:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 50423e4:	e0fffc17 	ldw	r3,-16(fp)
 50423e8:	e0800217 	ldw	r2,8(fp)
 50423ec:	1889883a 	add	r4,r3,r2
 50423f0:	e0fffe17 	ldw	r3,-8(fp)
 50423f4:	e0800217 	ldw	r2,8(fp)
 50423f8:	1887c83a 	sub	r3,r3,r2
 50423fc:	e0800517 	ldw	r2,20(fp)
 5042400:	d8800215 	stw	r2,8(sp)
 5042404:	e0800317 	ldw	r2,12(fp)
 5042408:	d8800115 	stw	r2,4(sp)
 504240c:	00800044 	movi	r2,1
 5042410:	d8800015 	stw	r2,0(sp)
 5042414:	e1fffd17 	ldw	r7,-12(fp)
 5042418:	180d883a 	mov	r6,r3
 504241c:	e17ffd17 	ldw	r5,-12(fp)
 5042420:	5040f480 	call	5040f48 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 5042424:	e0fffc17 	ldw	r3,-16(fp)
 5042428:	e0800217 	ldw	r2,8(fp)
 504242c:	1889883a 	add	r4,r3,r2
 5042430:	e0fffe17 	ldw	r3,-8(fp)
 5042434:	e0800217 	ldw	r2,8(fp)
 5042438:	1887c83a 	sub	r3,r3,r2
 504243c:	e0800517 	ldw	r2,20(fp)
 5042440:	d8800215 	stw	r2,8(sp)
 5042444:	e0800317 	ldw	r2,12(fp)
 5042448:	d8800115 	stw	r2,4(sp)
 504244c:	00800044 	movi	r2,1
 5042450:	d8800015 	stw	r2,0(sp)
 5042454:	e1ffff17 	ldw	r7,-4(fp)
 5042458:	180d883a 	mov	r6,r3
 504245c:	e17fff17 	ldw	r5,-4(fp)
 5042460:	5040f480 	call	5040f48 <vid_draw_line>
  }

  return (0);
 5042464:	0005883a 	mov	r2,zero
}
 5042468:	e037883a 	mov	sp,fp
 504246c:	dfc00117 	ldw	ra,4(sp)
 5042470:	df000017 	ldw	fp,0(sp)
 5042474:	dec00204 	addi	sp,sp,8
 5042478:	f800283a 	ret

0504247c <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 504247c:	defff604 	addi	sp,sp,-40
 5042480:	dfc00915 	stw	ra,36(sp)
 5042484:	df000815 	stw	fp,32(sp)
 5042488:	df000804 	addi	fp,sp,32
 504248c:	e13ffb15 	stw	r4,-20(fp)
 5042490:	e17ffc15 	stw	r5,-16(fp)
 5042494:	e1bffd15 	stw	r6,-12(fp)
 5042498:	e1fffe15 	stw	r7,-8(fp)
 504249c:	e0800517 	ldw	r2,20(fp)
 50424a0:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 50424a4:	e0bffd17 	ldw	r2,-12(fp)
 50424a8:	1000841e 	bne	r2,zero,50426bc <vid_round_corner_points+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 50424ac:	e0fffc17 	ldw	r3,-16(fp)
 50424b0:	e0bffe17 	ldw	r2,-8(fp)
 50424b4:	1887883a 	add	r3,r3,r2
 50424b8:	e0800317 	ldw	r2,12(fp)
 50424bc:	1885883a 	add	r2,r3,r2
 50424c0:	e0c00417 	ldw	r3,16(fp)
 50424c4:	e1c00617 	ldw	r7,24(fp)
 50424c8:	180d883a 	mov	r6,r3
 50424cc:	100b883a 	mov	r5,r2
 50424d0:	e13ffb17 	ldw	r4,-20(fp)
 50424d4:	50419700 	call	5041970 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 50424d8:	e0fffb17 	ldw	r3,-20(fp)
 50424dc:	e0800217 	ldw	r2,8(fp)
 50424e0:	1889883a 	add	r4,r3,r2
 50424e4:	e0fffc17 	ldw	r3,-16(fp)
 50424e8:	e0bffe17 	ldw	r2,-8(fp)
 50424ec:	1887883a 	add	r3,r3,r2
 50424f0:	e0800317 	ldw	r2,12(fp)
 50424f4:	1885883a 	add	r2,r3,r2
 50424f8:	e0c00417 	ldw	r3,16(fp)
 50424fc:	e1c00617 	ldw	r7,24(fp)
 5042500:	180d883a 	mov	r6,r3
 5042504:	100b883a 	mov	r5,r2
 5042508:	50419700 	call	5041970 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 504250c:	e0fffc17 	ldw	r3,-16(fp)
 5042510:	e0bffe17 	ldw	r2,-8(fp)
 5042514:	1885c83a 	sub	r2,r3,r2
 5042518:	e0c00417 	ldw	r3,16(fp)
 504251c:	e1c00617 	ldw	r7,24(fp)
 5042520:	180d883a 	mov	r6,r3
 5042524:	100b883a 	mov	r5,r2
 5042528:	e13ffb17 	ldw	r4,-20(fp)
 504252c:	50419700 	call	5041970 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 5042530:	e0fffb17 	ldw	r3,-20(fp)
 5042534:	e0800217 	ldw	r2,8(fp)
 5042538:	1889883a 	add	r4,r3,r2
 504253c:	e0fffc17 	ldw	r3,-16(fp)
 5042540:	e0bffe17 	ldw	r2,-8(fp)
 5042544:	1885c83a 	sub	r2,r3,r2
 5042548:	e0c00417 	ldw	r3,16(fp)
 504254c:	e1c00617 	ldw	r7,24(fp)
 5042550:	180d883a 	mov	r6,r3
 5042554:	100b883a 	mov	r5,r2
 5042558:	50419700 	call	5041970 <vid_set_pixel>

        if(fill) {
 504255c:	e0bfff07 	ldb	r2,-4(fp)
 5042560:	10002926 	beq	r2,zero,5042608 <vid_round_corner_points+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 5042564:	e0fffb17 	ldw	r3,-20(fp)
 5042568:	e0bffe17 	ldw	r2,-8(fp)
 504256c:	1889c83a 	sub	r4,r3,r2
 5042570:	e0fffb17 	ldw	r3,-20(fp)
 5042574:	e0bffe17 	ldw	r2,-8(fp)
 5042578:	1887883a 	add	r3,r3,r2
 504257c:	e0800217 	ldw	r2,8(fp)
 5042580:	1887883a 	add	r3,r3,r2
 5042584:	e0800617 	ldw	r2,24(fp)
 5042588:	d8800215 	stw	r2,8(sp)
 504258c:	e0800417 	ldw	r2,16(fp)
 5042590:	d8800115 	stw	r2,4(sp)
 5042594:	00800044 	movi	r2,1
 5042598:	d8800015 	stw	r2,0(sp)
 504259c:	e1fffc17 	ldw	r7,-16(fp)
 50425a0:	180d883a 	mov	r6,r3
 50425a4:	e17ffc17 	ldw	r5,-16(fp)
 50425a8:	5040f480 	call	5040f48 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 50425ac:	e0fffb17 	ldw	r3,-20(fp)
 50425b0:	e0bffe17 	ldw	r2,-8(fp)
 50425b4:	1889c83a 	sub	r4,r3,r2
 50425b8:	e0fffc17 	ldw	r3,-16(fp)
 50425bc:	e0800317 	ldw	r2,12(fp)
 50425c0:	188b883a 	add	r5,r3,r2
 50425c4:	e0fffb17 	ldw	r3,-20(fp)
 50425c8:	e0bffe17 	ldw	r2,-8(fp)
 50425cc:	1887883a 	add	r3,r3,r2
 50425d0:	e0800217 	ldw	r2,8(fp)
 50425d4:	188d883a 	add	r6,r3,r2
 50425d8:	e0fffc17 	ldw	r3,-16(fp)
 50425dc:	e0800317 	ldw	r2,12(fp)
 50425e0:	1887883a 	add	r3,r3,r2
 50425e4:	e0800617 	ldw	r2,24(fp)
 50425e8:	d8800215 	stw	r2,8(sp)
 50425ec:	e0800417 	ldw	r2,16(fp)
 50425f0:	d8800115 	stw	r2,4(sp)
 50425f4:	00800044 	movi	r2,1
 50425f8:	d8800015 	stw	r2,0(sp)
 50425fc:	180f883a 	mov	r7,r3
 5042600:	5040f480 	call	5040f48 <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 5042604:	00016606 	br	5042ba0 <vid_round_corner_points+0x724>
        if(fill) {
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 5042608:	e0fffb17 	ldw	r3,-20(fp)
 504260c:	e0bffe17 	ldw	r2,-8(fp)
 5042610:	1887883a 	add	r3,r3,r2
 5042614:	e0800217 	ldw	r2,8(fp)
 5042618:	1885883a 	add	r2,r3,r2
 504261c:	e0c00417 	ldw	r3,16(fp)
 5042620:	e1c00617 	ldw	r7,24(fp)
 5042624:	180d883a 	mov	r6,r3
 5042628:	e17ffc17 	ldw	r5,-16(fp)
 504262c:	1009883a 	mov	r4,r2
 5042630:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 5042634:	e0fffb17 	ldw	r3,-20(fp)
 5042638:	e0bffe17 	ldw	r2,-8(fp)
 504263c:	1887883a 	add	r3,r3,r2
 5042640:	e0800217 	ldw	r2,8(fp)
 5042644:	1889883a 	add	r4,r3,r2
 5042648:	e0fffc17 	ldw	r3,-16(fp)
 504264c:	e0800317 	ldw	r2,12(fp)
 5042650:	1885883a 	add	r2,r3,r2
 5042654:	e0c00417 	ldw	r3,16(fp)
 5042658:	e1c00617 	ldw	r7,24(fp)
 504265c:	180d883a 	mov	r6,r3
 5042660:	100b883a 	mov	r5,r2
 5042664:	50419700 	call	5041970 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 5042668:	e0fffb17 	ldw	r3,-20(fp)
 504266c:	e0bffe17 	ldw	r2,-8(fp)
 5042670:	1885c83a 	sub	r2,r3,r2
 5042674:	e0c00417 	ldw	r3,16(fp)
 5042678:	e1c00617 	ldw	r7,24(fp)
 504267c:	180d883a 	mov	r6,r3
 5042680:	e17ffc17 	ldw	r5,-16(fp)
 5042684:	1009883a 	mov	r4,r2
 5042688:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 504268c:	e0fffb17 	ldw	r3,-20(fp)
 5042690:	e0bffe17 	ldw	r2,-8(fp)
 5042694:	1889c83a 	sub	r4,r3,r2
 5042698:	e0fffc17 	ldw	r3,-16(fp)
 504269c:	e0800317 	ldw	r2,12(fp)
 50426a0:	1885883a 	add	r2,r3,r2
 50426a4:	e0c00417 	ldw	r3,16(fp)
 50426a8:	e1c00617 	ldw	r7,24(fp)
 50426ac:	180d883a 	mov	r6,r3
 50426b0:	100b883a 	mov	r5,r2
 50426b4:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 50426b8:	00013906 	br	5042ba0 <vid_round_corner_points+0x724>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 50426bc:	e0fffd17 	ldw	r3,-12(fp)
 50426c0:	e0bffe17 	ldw	r2,-8(fp)
 50426c4:	1880681e 	bne	r3,r2,5042868 <vid_round_corner_points+0x3ec>
      if(fill) {
 50426c8:	e0bfff07 	ldb	r2,-4(fp)
 50426cc:	10003126 	beq	r2,zero,5042794 <vid_round_corner_points+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 50426d0:	e0fffb17 	ldw	r3,-20(fp)
 50426d4:	e0bffd17 	ldw	r2,-12(fp)
 50426d8:	1889c83a 	sub	r4,r3,r2
 50426dc:	e0fffc17 	ldw	r3,-16(fp)
 50426e0:	e0bffe17 	ldw	r2,-8(fp)
 50426e4:	1887883a 	add	r3,r3,r2
 50426e8:	e0800317 	ldw	r2,12(fp)
 50426ec:	188b883a 	add	r5,r3,r2
 50426f0:	e0fffb17 	ldw	r3,-20(fp)
 50426f4:	e0bffd17 	ldw	r2,-12(fp)
 50426f8:	1887883a 	add	r3,r3,r2
 50426fc:	e0800217 	ldw	r2,8(fp)
 5042700:	188d883a 	add	r6,r3,r2
 5042704:	e0fffc17 	ldw	r3,-16(fp)
 5042708:	e0bffe17 	ldw	r2,-8(fp)
 504270c:	1887883a 	add	r3,r3,r2
 5042710:	e0800317 	ldw	r2,12(fp)
 5042714:	1887883a 	add	r3,r3,r2
 5042718:	e0800617 	ldw	r2,24(fp)
 504271c:	d8800215 	stw	r2,8(sp)
 5042720:	e0800417 	ldw	r2,16(fp)
 5042724:	d8800115 	stw	r2,4(sp)
 5042728:	00800044 	movi	r2,1
 504272c:	d8800015 	stw	r2,0(sp)
 5042730:	180f883a 	mov	r7,r3
 5042734:	5040f480 	call	5040f48 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 5042738:	e0fffb17 	ldw	r3,-20(fp)
 504273c:	e0bffd17 	ldw	r2,-12(fp)
 5042740:	1889c83a 	sub	r4,r3,r2
 5042744:	e0fffc17 	ldw	r3,-16(fp)
 5042748:	e0bffe17 	ldw	r2,-8(fp)
 504274c:	188bc83a 	sub	r5,r3,r2
 5042750:	e0fffb17 	ldw	r3,-20(fp)
 5042754:	e0bffd17 	ldw	r2,-12(fp)
 5042758:	1887883a 	add	r3,r3,r2
 504275c:	e0800217 	ldw	r2,8(fp)
 5042760:	188d883a 	add	r6,r3,r2
 5042764:	e0fffc17 	ldw	r3,-16(fp)
 5042768:	e0bffe17 	ldw	r2,-8(fp)
 504276c:	1887c83a 	sub	r3,r3,r2
 5042770:	e0800617 	ldw	r2,24(fp)
 5042774:	d8800215 	stw	r2,8(sp)
 5042778:	e0800417 	ldw	r2,16(fp)
 504277c:	d8800115 	stw	r2,4(sp)
 5042780:	00800044 	movi	r2,1
 5042784:	d8800015 	stw	r2,0(sp)
 5042788:	180f883a 	mov	r7,r3
 504278c:	5040f480 	call	5040f48 <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 5042790:	00010306 	br	5042ba0 <vid_round_corner_points+0x724>
      if(fill) {
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 5042794:	e0fffb17 	ldw	r3,-20(fp)
 5042798:	e0bffd17 	ldw	r2,-12(fp)
 504279c:	1887883a 	add	r3,r3,r2
 50427a0:	e0800217 	ldw	r2,8(fp)
 50427a4:	1889883a 	add	r4,r3,r2
 50427a8:	e0fffc17 	ldw	r3,-16(fp)
 50427ac:	e0bffe17 	ldw	r2,-8(fp)
 50427b0:	1887883a 	add	r3,r3,r2
 50427b4:	e0800317 	ldw	r2,12(fp)
 50427b8:	1885883a 	add	r2,r3,r2
 50427bc:	e0c00417 	ldw	r3,16(fp)
 50427c0:	e1c00617 	ldw	r7,24(fp)
 50427c4:	180d883a 	mov	r6,r3
 50427c8:	100b883a 	mov	r5,r2
 50427cc:	50419700 	call	5041970 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 50427d0:	e0fffb17 	ldw	r3,-20(fp)
 50427d4:	e0bffd17 	ldw	r2,-12(fp)
 50427d8:	1889c83a 	sub	r4,r3,r2
 50427dc:	e0fffc17 	ldw	r3,-16(fp)
 50427e0:	e0bffe17 	ldw	r2,-8(fp)
 50427e4:	1887883a 	add	r3,r3,r2
 50427e8:	e0800317 	ldw	r2,12(fp)
 50427ec:	1885883a 	add	r2,r3,r2
 50427f0:	e0c00417 	ldw	r3,16(fp)
 50427f4:	e1c00617 	ldw	r7,24(fp)
 50427f8:	180d883a 	mov	r6,r3
 50427fc:	100b883a 	mov	r5,r2
 5042800:	50419700 	call	5041970 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 5042804:	e0fffb17 	ldw	r3,-20(fp)
 5042808:	e0bffd17 	ldw	r2,-12(fp)
 504280c:	1887883a 	add	r3,r3,r2
 5042810:	e0800217 	ldw	r2,8(fp)
 5042814:	1889883a 	add	r4,r3,r2
 5042818:	e0fffc17 	ldw	r3,-16(fp)
 504281c:	e0bffe17 	ldw	r2,-8(fp)
 5042820:	1885c83a 	sub	r2,r3,r2
 5042824:	e0c00417 	ldw	r3,16(fp)
 5042828:	e1c00617 	ldw	r7,24(fp)
 504282c:	180d883a 	mov	r6,r3
 5042830:	100b883a 	mov	r5,r2
 5042834:	50419700 	call	5041970 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 5042838:	e0fffb17 	ldw	r3,-20(fp)
 504283c:	e0bffd17 	ldw	r2,-12(fp)
 5042840:	1889c83a 	sub	r4,r3,r2
 5042844:	e0fffc17 	ldw	r3,-16(fp)
 5042848:	e0bffe17 	ldw	r2,-8(fp)
 504284c:	1885c83a 	sub	r2,r3,r2
 5042850:	e0c00417 	ldw	r3,16(fp)
 5042854:	e1c00617 	ldw	r7,24(fp)
 5042858:	180d883a 	mov	r6,r3
 504285c:	100b883a 	mov	r5,r2
 5042860:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 5042864:	0000ce06 	br	5042ba0 <vid_round_corner_points+0x724>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
        vid_set_pixel(cx - x, cy - y, color, display); // top left
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 5042868:	e0fffd17 	ldw	r3,-12(fp)
 504286c:	e0bffe17 	ldw	r2,-8(fp)
 5042870:	1880cb0e 	bge	r3,r2,5042ba0 <vid_round_corner_points+0x724>
        if(fill) {
 5042874:	e0bfff07 	ldb	r2,-4(fp)
 5042878:	10006126 	beq	r2,zero,5042a00 <vid_round_corner_points+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 504287c:	e0fffb17 	ldw	r3,-20(fp)
 5042880:	e0bffd17 	ldw	r2,-12(fp)
 5042884:	1889c83a 	sub	r4,r3,r2
 5042888:	e0fffc17 	ldw	r3,-16(fp)
 504288c:	e0bffe17 	ldw	r2,-8(fp)
 5042890:	1887883a 	add	r3,r3,r2
 5042894:	e0800317 	ldw	r2,12(fp)
 5042898:	188b883a 	add	r5,r3,r2
 504289c:	e0fffb17 	ldw	r3,-20(fp)
 50428a0:	e0bffd17 	ldw	r2,-12(fp)
 50428a4:	1887883a 	add	r3,r3,r2
 50428a8:	e0800217 	ldw	r2,8(fp)
 50428ac:	188d883a 	add	r6,r3,r2
 50428b0:	e0fffc17 	ldw	r3,-16(fp)
 50428b4:	e0bffe17 	ldw	r2,-8(fp)
 50428b8:	1887883a 	add	r3,r3,r2
 50428bc:	e0800317 	ldw	r2,12(fp)
 50428c0:	1887883a 	add	r3,r3,r2
 50428c4:	e0800617 	ldw	r2,24(fp)
 50428c8:	d8800215 	stw	r2,8(sp)
 50428cc:	e0800417 	ldw	r2,16(fp)
 50428d0:	d8800115 	stw	r2,4(sp)
 50428d4:	00800044 	movi	r2,1
 50428d8:	d8800015 	stw	r2,0(sp)
 50428dc:	180f883a 	mov	r7,r3
 50428e0:	5040f480 	call	5040f48 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 50428e4:	e0fffb17 	ldw	r3,-20(fp)
 50428e8:	e0bffe17 	ldw	r2,-8(fp)
 50428ec:	1889c83a 	sub	r4,r3,r2
 50428f0:	e0fffc17 	ldw	r3,-16(fp)
 50428f4:	e0bffd17 	ldw	r2,-12(fp)
 50428f8:	1887883a 	add	r3,r3,r2
 50428fc:	e0800317 	ldw	r2,12(fp)
 5042900:	188b883a 	add	r5,r3,r2
 5042904:	e0fffb17 	ldw	r3,-20(fp)
 5042908:	e0bffe17 	ldw	r2,-8(fp)
 504290c:	1887883a 	add	r3,r3,r2
 5042910:	e0800217 	ldw	r2,8(fp)
 5042914:	188d883a 	add	r6,r3,r2
 5042918:	e0fffc17 	ldw	r3,-16(fp)
 504291c:	e0bffd17 	ldw	r2,-12(fp)
 5042920:	1887883a 	add	r3,r3,r2
 5042924:	e0800317 	ldw	r2,12(fp)
 5042928:	1887883a 	add	r3,r3,r2
 504292c:	e0800617 	ldw	r2,24(fp)
 5042930:	d8800215 	stw	r2,8(sp)
 5042934:	e0800417 	ldw	r2,16(fp)
 5042938:	d8800115 	stw	r2,4(sp)
 504293c:	00800044 	movi	r2,1
 5042940:	d8800015 	stw	r2,0(sp)
 5042944:	180f883a 	mov	r7,r3
 5042948:	5040f480 	call	5040f48 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 504294c:	e0fffb17 	ldw	r3,-20(fp)
 5042950:	e0bffe17 	ldw	r2,-8(fp)
 5042954:	1889c83a 	sub	r4,r3,r2
 5042958:	e0fffc17 	ldw	r3,-16(fp)
 504295c:	e0bffd17 	ldw	r2,-12(fp)
 5042960:	188bc83a 	sub	r5,r3,r2
 5042964:	e0fffb17 	ldw	r3,-20(fp)
 5042968:	e0bffe17 	ldw	r2,-8(fp)
 504296c:	1887883a 	add	r3,r3,r2
 5042970:	e0800217 	ldw	r2,8(fp)
 5042974:	188d883a 	add	r6,r3,r2
 5042978:	e0fffc17 	ldw	r3,-16(fp)
 504297c:	e0bffd17 	ldw	r2,-12(fp)
 5042980:	1887c83a 	sub	r3,r3,r2
 5042984:	e0800617 	ldw	r2,24(fp)
 5042988:	d8800215 	stw	r2,8(sp)
 504298c:	e0800417 	ldw	r2,16(fp)
 5042990:	d8800115 	stw	r2,4(sp)
 5042994:	00800044 	movi	r2,1
 5042998:	d8800015 	stw	r2,0(sp)
 504299c:	180f883a 	mov	r7,r3
 50429a0:	5040f480 	call	5040f48 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 50429a4:	e0fffb17 	ldw	r3,-20(fp)
 50429a8:	e0bffd17 	ldw	r2,-12(fp)
 50429ac:	1889c83a 	sub	r4,r3,r2
 50429b0:	e0fffc17 	ldw	r3,-16(fp)
 50429b4:	e0bffe17 	ldw	r2,-8(fp)
 50429b8:	188bc83a 	sub	r5,r3,r2
 50429bc:	e0fffb17 	ldw	r3,-20(fp)
 50429c0:	e0bffd17 	ldw	r2,-12(fp)
 50429c4:	1887883a 	add	r3,r3,r2
 50429c8:	e0800217 	ldw	r2,8(fp)
 50429cc:	188d883a 	add	r6,r3,r2
 50429d0:	e0fffc17 	ldw	r3,-16(fp)
 50429d4:	e0bffe17 	ldw	r2,-8(fp)
 50429d8:	1887c83a 	sub	r3,r3,r2
 50429dc:	e0800617 	ldw	r2,24(fp)
 50429e0:	d8800215 	stw	r2,8(sp)
 50429e4:	e0800417 	ldw	r2,16(fp)
 50429e8:	d8800115 	stw	r2,4(sp)
 50429ec:	00800044 	movi	r2,1
 50429f0:	d8800015 	stw	r2,0(sp)
 50429f4:	180f883a 	mov	r7,r3
 50429f8:	5040f480 	call	5040f48 <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 50429fc:	00006806 	br	5042ba0 <vid_round_corner_points+0x724>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 5042a00:	e0fffb17 	ldw	r3,-20(fp)
 5042a04:	e0bffd17 	ldw	r2,-12(fp)
 5042a08:	1887883a 	add	r3,r3,r2
 5042a0c:	e0800217 	ldw	r2,8(fp)
 5042a10:	1889883a 	add	r4,r3,r2
 5042a14:	e0fffc17 	ldw	r3,-16(fp)
 5042a18:	e0bffe17 	ldw	r2,-8(fp)
 5042a1c:	1887883a 	add	r3,r3,r2
 5042a20:	e0800317 	ldw	r2,12(fp)
 5042a24:	1885883a 	add	r2,r3,r2
 5042a28:	e0c00417 	ldw	r3,16(fp)
 5042a2c:	e1c00617 	ldw	r7,24(fp)
 5042a30:	180d883a 	mov	r6,r3
 5042a34:	100b883a 	mov	r5,r2
 5042a38:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 5042a3c:	e0fffb17 	ldw	r3,-20(fp)
 5042a40:	e0bffd17 	ldw	r2,-12(fp)
 5042a44:	1889c83a 	sub	r4,r3,r2
 5042a48:	e0fffc17 	ldw	r3,-16(fp)
 5042a4c:	e0bffe17 	ldw	r2,-8(fp)
 5042a50:	1887883a 	add	r3,r3,r2
 5042a54:	e0800317 	ldw	r2,12(fp)
 5042a58:	1885883a 	add	r2,r3,r2
 5042a5c:	e0c00417 	ldw	r3,16(fp)
 5042a60:	e1c00617 	ldw	r7,24(fp)
 5042a64:	180d883a 	mov	r6,r3
 5042a68:	100b883a 	mov	r5,r2
 5042a6c:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 5042a70:	e0fffb17 	ldw	r3,-20(fp)
 5042a74:	e0bffd17 	ldw	r2,-12(fp)
 5042a78:	1887883a 	add	r3,r3,r2
 5042a7c:	e0800217 	ldw	r2,8(fp)
 5042a80:	1889883a 	add	r4,r3,r2
 5042a84:	e0fffc17 	ldw	r3,-16(fp)
 5042a88:	e0bffe17 	ldw	r2,-8(fp)
 5042a8c:	1885c83a 	sub	r2,r3,r2
 5042a90:	e0c00417 	ldw	r3,16(fp)
 5042a94:	e1c00617 	ldw	r7,24(fp)
 5042a98:	180d883a 	mov	r6,r3
 5042a9c:	100b883a 	mov	r5,r2
 5042aa0:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 5042aa4:	e0fffb17 	ldw	r3,-20(fp)
 5042aa8:	e0bffd17 	ldw	r2,-12(fp)
 5042aac:	1889c83a 	sub	r4,r3,r2
 5042ab0:	e0fffc17 	ldw	r3,-16(fp)
 5042ab4:	e0bffe17 	ldw	r2,-8(fp)
 5042ab8:	1885c83a 	sub	r2,r3,r2
 5042abc:	e0c00417 	ldw	r3,16(fp)
 5042ac0:	e1c00617 	ldw	r7,24(fp)
 5042ac4:	180d883a 	mov	r6,r3
 5042ac8:	100b883a 	mov	r5,r2
 5042acc:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 5042ad0:	e0fffb17 	ldw	r3,-20(fp)
 5042ad4:	e0bffe17 	ldw	r2,-8(fp)
 5042ad8:	1887883a 	add	r3,r3,r2
 5042adc:	e0800217 	ldw	r2,8(fp)
 5042ae0:	1889883a 	add	r4,r3,r2
 5042ae4:	e0fffc17 	ldw	r3,-16(fp)
 5042ae8:	e0bffd17 	ldw	r2,-12(fp)
 5042aec:	1887883a 	add	r3,r3,r2
 5042af0:	e0800317 	ldw	r2,12(fp)
 5042af4:	1885883a 	add	r2,r3,r2
 5042af8:	e0c00417 	ldw	r3,16(fp)
 5042afc:	e1c00617 	ldw	r7,24(fp)
 5042b00:	180d883a 	mov	r6,r3
 5042b04:	100b883a 	mov	r5,r2
 5042b08:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 5042b0c:	e0fffb17 	ldw	r3,-20(fp)
 5042b10:	e0bffe17 	ldw	r2,-8(fp)
 5042b14:	1889c83a 	sub	r4,r3,r2
 5042b18:	e0fffc17 	ldw	r3,-16(fp)
 5042b1c:	e0bffd17 	ldw	r2,-12(fp)
 5042b20:	1887883a 	add	r3,r3,r2
 5042b24:	e0800317 	ldw	r2,12(fp)
 5042b28:	1885883a 	add	r2,r3,r2
 5042b2c:	e0c00417 	ldw	r3,16(fp)
 5042b30:	e1c00617 	ldw	r7,24(fp)
 5042b34:	180d883a 	mov	r6,r3
 5042b38:	100b883a 	mov	r5,r2
 5042b3c:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 5042b40:	e0fffb17 	ldw	r3,-20(fp)
 5042b44:	e0bffe17 	ldw	r2,-8(fp)
 5042b48:	1887883a 	add	r3,r3,r2
 5042b4c:	e0800217 	ldw	r2,8(fp)
 5042b50:	1889883a 	add	r4,r3,r2
 5042b54:	e0fffc17 	ldw	r3,-16(fp)
 5042b58:	e0bffd17 	ldw	r2,-12(fp)
 5042b5c:	1885c83a 	sub	r2,r3,r2
 5042b60:	e0c00417 	ldw	r3,16(fp)
 5042b64:	e1c00617 	ldw	r7,24(fp)
 5042b68:	180d883a 	mov	r6,r3
 5042b6c:	100b883a 	mov	r5,r2
 5042b70:	50419700 	call	5041970 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 5042b74:	e0fffb17 	ldw	r3,-20(fp)
 5042b78:	e0bffe17 	ldw	r2,-8(fp)
 5042b7c:	1889c83a 	sub	r4,r3,r2
 5042b80:	e0fffc17 	ldw	r3,-16(fp)
 5042b84:	e0bffd17 	ldw	r2,-12(fp)
 5042b88:	1885c83a 	sub	r2,r3,r2
 5042b8c:	e0c00417 	ldw	r3,16(fp)
 5042b90:	e1c00617 	ldw	r7,24(fp)
 5042b94:	180d883a 	mov	r6,r3
 5042b98:	100b883a 	mov	r5,r2
 5042b9c:	50419700 	call	5041970 <vid_set_pixel>
        }
    }
}
 5042ba0:	0001883a 	nop
 5042ba4:	e037883a 	mov	sp,fp
 5042ba8:	dfc00117 	ldw	ra,4(sp)
 5042bac:	df000017 	ldw	fp,0(sp)
 5042bb0:	dec00204 	addi	sp,sp,8
 5042bb4:	f800283a 	ret

05042bb8 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
int max3( int a, int b, int c )
{
 5042bb8:	defffc04 	addi	sp,sp,-16
 5042bbc:	df000315 	stw	fp,12(sp)
 5042bc0:	df000304 	addi	fp,sp,12
 5042bc4:	e13ffd15 	stw	r4,-12(fp)
 5042bc8:	e17ffe15 	stw	r5,-8(fp)
 5042bcc:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 5042bd0:	e0fffd17 	ldw	r3,-12(fp)
 5042bd4:	e0bffe17 	ldw	r2,-8(fp)
 5042bd8:	1880020e 	bge	r3,r2,5042be4 <max3+0x2c>
    a = b;
 5042bdc:	e0bffe17 	ldw	r2,-8(fp)
 5042be0:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 5042be4:	e0fffd17 	ldw	r3,-12(fp)
 5042be8:	e0bfff17 	ldw	r2,-4(fp)
 5042bec:	1880020e 	bge	r3,r2,5042bf8 <max3+0x40>
    a = c;
 5042bf0:	e0bfff17 	ldw	r2,-4(fp)
 5042bf4:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 5042bf8:	e0bffd17 	ldw	r2,-12(fp)
}
 5042bfc:	e037883a 	mov	sp,fp
 5042c00:	df000017 	ldw	fp,0(sp)
 5042c04:	dec00104 	addi	sp,sp,4
 5042c08:	f800283a 	ret

05042c0c <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
int min3( int a, int b, int c )
{
 5042c0c:	defffc04 	addi	sp,sp,-16
 5042c10:	df000315 	stw	fp,12(sp)
 5042c14:	df000304 	addi	fp,sp,12
 5042c18:	e13ffd15 	stw	r4,-12(fp)
 5042c1c:	e17ffe15 	stw	r5,-8(fp)
 5042c20:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 5042c24:	e0bffd17 	ldw	r2,-12(fp)
 5042c28:	e0fffe17 	ldw	r3,-8(fp)
 5042c2c:	1880020e 	bge	r3,r2,5042c38 <min3+0x2c>
    a = b;
 5042c30:	e0bffe17 	ldw	r2,-8(fp)
 5042c34:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 5042c38:	e0bffd17 	ldw	r2,-12(fp)
 5042c3c:	e0ffff17 	ldw	r3,-4(fp)
 5042c40:	1880020e 	bge	r3,r2,5042c4c <min3+0x40>
    a = c;
 5042c44:	e0bfff17 	ldw	r2,-4(fp)
 5042c48:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 5042c4c:	e0bffd17 	ldw	r2,-12(fp)
}
 5042c50:	e037883a 	mov	sp,fp
 5042c54:	df000017 	ldw	fp,0(sp)
 5042c58:	dec00104 	addi	sp,sp,4
 5042c5c:	f800283a 	ret

05042c60 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
int max_diff3(int a, int b, int c)
{
 5042c60:	defff904 	addi	sp,sp,-28
 5042c64:	dfc00615 	stw	ra,24(sp)
 5042c68:	df000515 	stw	fp,20(sp)
 5042c6c:	df000504 	addi	fp,sp,20
 5042c70:	e13ffd15 	stw	r4,-12(fp)
 5042c74:	e17ffe15 	stw	r5,-8(fp)
 5042c78:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 5042c7c:	e1bfff17 	ldw	r6,-4(fp)
 5042c80:	e17ffe17 	ldw	r5,-8(fp)
 5042c84:	e13ffd17 	ldw	r4,-12(fp)
 5042c88:	5042bb80 	call	5042bb8 <max3>
 5042c8c:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 5042c90:	e1bfff17 	ldw	r6,-4(fp)
 5042c94:	e17ffe17 	ldw	r5,-8(fp)
 5042c98:	e13ffd17 	ldw	r4,-12(fp)
 5042c9c:	5042c0c0 	call	5042c0c <min3>
 5042ca0:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 5042ca4:	e0fffb17 	ldw	r3,-20(fp)
 5042ca8:	e0bffc17 	ldw	r2,-16(fp)
 5042cac:	1885c83a 	sub	r2,r3,r2
}
 5042cb0:	e037883a 	mov	sp,fp
 5042cb4:	dfc00117 	ldw	ra,4(sp)
 5042cb8:	df000017 	ldw	fp,0(sp)
 5042cbc:	dec00204 	addi	sp,sp,8
 5042cc0:	f800283a 	ret

05042cc4 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 5042cc4:	defffc04 	addi	sp,sp,-16
 5042cc8:	df000315 	stw	fp,12(sp)
 5042ccc:	df000304 	addi	fp,sp,12
 5042cd0:	e13ffd15 	stw	r4,-12(fp)
 5042cd4:	e17ffe15 	stw	r5,-8(fp)
 5042cd8:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 5042cdc:	e0bffe17 	ldw	r2,-8(fp)
 5042ce0:	100490fa 	slli	r2,r2,3
 5042ce4:	1007883a 	mov	r3,r2
 5042ce8:	e0bfff17 	ldw	r2,-4(fp)
 5042cec:	10c5883a 	add	r2,r2,r3
 5042cf0:	10800017 	ldw	r2,0(r2)
 5042cf4:	10bfffd8 	cmpnei	r2,r2,-1
 5042cf8:	10000f1e 	bne	r2,zero,5042d38 <vid_put_pixel_in_span_map+0x74>
  {
    span_array[y*2] = x;
 5042cfc:	e0bffe17 	ldw	r2,-8(fp)
 5042d00:	100490fa 	slli	r2,r2,3
 5042d04:	1007883a 	mov	r3,r2
 5042d08:	e0bfff17 	ldw	r2,-4(fp)
 5042d0c:	10c5883a 	add	r2,r2,r3
 5042d10:	e0fffd17 	ldw	r3,-12(fp)
 5042d14:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 5042d18:	e0bffe17 	ldw	r2,-8(fp)
 5042d1c:	100490fa 	slli	r2,r2,3
 5042d20:	10800104 	addi	r2,r2,4
 5042d24:	e0ffff17 	ldw	r3,-4(fp)
 5042d28:	1885883a 	add	r2,r3,r2
 5042d2c:	e0fffd17 	ldw	r3,-12(fp)
 5042d30:	10c00015 	stw	r3,0(r2)
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 5042d34:	00001f06 	br	5042db4 <vid_put_pixel_in_span_map+0xf0>
  if (span_array[y*2] == -1)
  {
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
 5042d38:	e0bffe17 	ldw	r2,-8(fp)
 5042d3c:	100490fa 	slli	r2,r2,3
 5042d40:	1007883a 	mov	r3,r2
 5042d44:	e0bfff17 	ldw	r2,-4(fp)
 5042d48:	10c5883a 	add	r2,r2,r3
 5042d4c:	10800017 	ldw	r2,0(r2)
 5042d50:	e0fffd17 	ldw	r3,-12(fp)
 5042d54:	1880080e 	bge	r3,r2,5042d78 <vid_put_pixel_in_span_map+0xb4>
    span_array[y*2] = x;
 5042d58:	e0bffe17 	ldw	r2,-8(fp)
 5042d5c:	100490fa 	slli	r2,r2,3
 5042d60:	1007883a 	mov	r3,r2
 5042d64:	e0bfff17 	ldw	r2,-4(fp)
 5042d68:	10c5883a 	add	r2,r2,r3
 5042d6c:	e0fffd17 	ldw	r3,-12(fp)
 5042d70:	10c00015 	stw	r3,0(r2)
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 5042d74:	00000f06 	br	5042db4 <vid_put_pixel_in_span_map+0xf0>
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
 5042d78:	e0bffe17 	ldw	r2,-8(fp)
 5042d7c:	100490fa 	slli	r2,r2,3
 5042d80:	10800104 	addi	r2,r2,4
 5042d84:	e0ffff17 	ldw	r3,-4(fp)
 5042d88:	1885883a 	add	r2,r3,r2
 5042d8c:	10c00017 	ldw	r3,0(r2)
 5042d90:	e0bffd17 	ldw	r2,-12(fp)
 5042d94:	1880070e 	bge	r3,r2,5042db4 <vid_put_pixel_in_span_map+0xf0>
    span_array[(y*2)+1] = x;
 5042d98:	e0bffe17 	ldw	r2,-8(fp)
 5042d9c:	100490fa 	slli	r2,r2,3
 5042da0:	10800104 	addi	r2,r2,4
 5042da4:	e0ffff17 	ldw	r3,-4(fp)
 5042da8:	1885883a 	add	r2,r3,r2
 5042dac:	e0fffd17 	ldw	r3,-12(fp)
 5042db0:	10c00015 	stw	r3,0(r2)
}
 5042db4:	0001883a 	nop
 5042db8:	e037883a 	mov	sp,fp
 5042dbc:	df000017 	ldw	fp,0(sp)
 5042dc0:	dec00104 	addi	sp,sp,4
 5042dc4:	f800283a 	ret

05042dc8 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 5042dc8:	deffee04 	addi	sp,sp,-72
 5042dcc:	dfc01115 	stw	ra,68(sp)
 5042dd0:	df001015 	stw	fp,64(sp)
 5042dd4:	df001004 	addi	fp,sp,64
 5042dd8:	e13ffc15 	stw	r4,-16(fp)
 5042ddc:	e17ffd15 	stw	r5,-12(fp)
 5042de0:	e1bffe15 	stw	r6,-8(fp)
 5042de4:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 5042de8:	e0bffc17 	ldw	r2,-16(fp)
 5042dec:	e0fffe17 	ldw	r3,-8(fp)
 5042df0:	18800c0e 	bge	r3,r2,5042e24 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 5042df4:	e0bffe17 	ldw	r2,-8(fp)
 5042df8:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 5042dfc:	e0bffc17 	ldw	r2,-16(fp)
 5042e00:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 5042e04:	e0bff517 	ldw	r2,-44(fp)
 5042e08:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 5042e0c:	e0bfff17 	ldw	r2,-4(fp)
 5042e10:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 5042e14:	e0bffd17 	ldw	r2,-12(fp)
 5042e18:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 5042e1c:	e0bff617 	ldw	r2,-40(fp)
 5042e20:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 5042e24:	e0fffd17 	ldw	r3,-12(fp)
 5042e28:	e0bfff17 	ldw	r2,-4(fp)
 5042e2c:	1885c83a 	sub	r2,r3,r2
 5042e30:	1000010e 	bge	r2,zero,5042e38 <vid_bres_scan_edges+0x70>
 5042e34:	0085c83a 	sub	r2,zero,r2
 5042e38:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 5042e3c:	e0fffe17 	ldw	r3,-8(fp)
 5042e40:	e0bffc17 	ldw	r2,-16(fp)
 5042e44:	1885c83a 	sub	r2,r3,r2
 5042e48:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 5042e4c:	e0bffd17 	ldw	r2,-12(fp)
 5042e50:	e0ffff17 	ldw	r3,-4(fp)
 5042e54:	1880030e 	bge	r3,r2,5042e64 <vid_bres_scan_edges+0x9c>
 5042e58:	00bfffc4 	movi	r2,-1
 5042e5c:	e0bff015 	stw	r2,-64(fp)
 5042e60:	00000206 	br	5042e6c <vid_bres_scan_edges+0xa4>
 5042e64:	00800044 	movi	r2,1
 5042e68:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 5042e6c:	00800044 	movi	r2,1
 5042e70:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 5042e74:	e0fff217 	ldw	r3,-56(fp)
 5042e78:	e0bff117 	ldw	r2,-60(fp)
 5042e7c:	18802f16 	blt	r3,r2,5042f3c <vid_bres_scan_edges+0x174>
    int dPr   = y_delta<<1;
 5042e80:	e0bff117 	ldw	r2,-60(fp)
 5042e84:	1085883a 	add	r2,r2,r2
 5042e88:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 5042e8c:	e0bff217 	ldw	r2,-56(fp)
 5042e90:	1085883a 	add	r2,r2,r2
 5042e94:	1007883a 	mov	r3,r2
 5042e98:	e0bff817 	ldw	r2,-32(fp)
 5042e9c:	10c5c83a 	sub	r2,r2,r3
 5042ea0:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 5042ea4:	e0fff817 	ldw	r3,-32(fp)
 5042ea8:	e0bff217 	ldw	r2,-56(fp)
 5042eac:	1885c83a 	sub	r2,r3,r2
 5042eb0:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 5042eb4:	00001e06 	br	5042f30 <vid_bres_scan_edges+0x168>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 5042eb8:	e1800217 	ldw	r6,8(fp)
 5042ebc:	e17ffd17 	ldw	r5,-12(fp)
 5042ec0:	e13ffc17 	ldw	r4,-16(fp)
 5042ec4:	5042cc40 	call	5042cc4 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 5042ec8:	e0bff317 	ldw	r2,-52(fp)
 5042ecc:	00800d0e 	bge	zero,r2,5042f04 <vid_bres_scan_edges+0x13c>
        x1+=x_incr;
 5042ed0:	e0fffc17 	ldw	r3,-16(fp)
 5042ed4:	e0bff717 	ldw	r2,-36(fp)
 5042ed8:	1885883a 	add	r2,r3,r2
 5042edc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 5042ee0:	e0fffd17 	ldw	r3,-12(fp)
 5042ee4:	e0bff017 	ldw	r2,-64(fp)
 5042ee8:	1885883a 	add	r2,r3,r2
 5042eec:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 5042ef0:	e0fff317 	ldw	r3,-52(fp)
 5042ef4:	e0bff917 	ldw	r2,-28(fp)
 5042ef8:	1885883a 	add	r2,r3,r2
 5042efc:	e0bff315 	stw	r2,-52(fp)
 5042f00:	00000806 	br	5042f24 <vid_bres_scan_edges+0x15c>
      } else {
        x1+=x_incr;
 5042f04:	e0fffc17 	ldw	r3,-16(fp)
 5042f08:	e0bff717 	ldw	r2,-36(fp)
 5042f0c:	1885883a 	add	r2,r3,r2
 5042f10:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 5042f14:	e0fff317 	ldw	r3,-52(fp)
 5042f18:	e0bff817 	ldw	r2,-32(fp)
 5042f1c:	1885883a 	add	r2,r3,r2
 5042f20:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 5042f24:	e0bff217 	ldw	r2,-56(fp)
 5042f28:	10bfffc4 	addi	r2,r2,-1
 5042f2c:	e0bff215 	stw	r2,-56(fp)
 5042f30:	e0bff217 	ldw	r2,-56(fp)
 5042f34:	103fe00e 	bge	r2,zero,5042eb8 <_gp+0xfffd7a90>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 5042f38:	00002e06 	br	5042ff4 <vid_bres_scan_edges+0x22c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 5042f3c:	e0bff217 	ldw	r2,-56(fp)
 5042f40:	1085883a 	add	r2,r2,r2
 5042f44:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 5042f48:	e0bff117 	ldw	r2,-60(fp)
 5042f4c:	1085883a 	add	r2,r2,r2
 5042f50:	1007883a 	mov	r3,r2
 5042f54:	e0bffa17 	ldw	r2,-24(fp)
 5042f58:	10c5c83a 	sub	r2,r2,r3
 5042f5c:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 5042f60:	e0fffa17 	ldw	r3,-24(fp)
 5042f64:	e0bff117 	ldw	r2,-60(fp)
 5042f68:	1885c83a 	sub	r2,r3,r2
 5042f6c:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 5042f70:	00001e06 	br	5042fec <vid_bres_scan_edges+0x224>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 5042f74:	e1800217 	ldw	r6,8(fp)
 5042f78:	e17ffd17 	ldw	r5,-12(fp)
 5042f7c:	e13ffc17 	ldw	r4,-16(fp)
 5042f80:	5042cc40 	call	5042cc4 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 5042f84:	e0bff417 	ldw	r2,-48(fp)
 5042f88:	00800d0e 	bge	zero,r2,5042fc0 <vid_bres_scan_edges+0x1f8>
        x1+=x_incr;
 5042f8c:	e0fffc17 	ldw	r3,-16(fp)
 5042f90:	e0bff717 	ldw	r2,-36(fp)
 5042f94:	1885883a 	add	r2,r3,r2
 5042f98:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 5042f9c:	e0fffd17 	ldw	r3,-12(fp)
 5042fa0:	e0bff017 	ldw	r2,-64(fp)
 5042fa4:	1885883a 	add	r2,r3,r2
 5042fa8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 5042fac:	e0fff417 	ldw	r3,-48(fp)
 5042fb0:	e0bffb17 	ldw	r2,-20(fp)
 5042fb4:	1885883a 	add	r2,r3,r2
 5042fb8:	e0bff415 	stw	r2,-48(fp)
 5042fbc:	00000806 	br	5042fe0 <vid_bres_scan_edges+0x218>
      } else {
        y1+=y_incr;
 5042fc0:	e0fffd17 	ldw	r3,-12(fp)
 5042fc4:	e0bff017 	ldw	r2,-64(fp)
 5042fc8:	1885883a 	add	r2,r3,r2
 5042fcc:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 5042fd0:	e0fff417 	ldw	r3,-48(fp)
 5042fd4:	e0bffa17 	ldw	r2,-24(fp)
 5042fd8:	1885883a 	add	r2,r3,r2
 5042fdc:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 5042fe0:	e0bff117 	ldw	r2,-60(fp)
 5042fe4:	10bfffc4 	addi	r2,r2,-1
 5042fe8:	e0bff115 	stw	r2,-60(fp)
 5042fec:	e0bff117 	ldw	r2,-60(fp)
 5042ff0:	103fe00e 	bge	r2,zero,5042f74 <_gp+0xfffd7b4c>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 5042ff4:	0001883a 	nop
 5042ff8:	e037883a 	mov	sp,fp
 5042ffc:	dfc00117 	ldw	ra,4(sp)
 5043000:	df000017 	ldw	fp,0(sp)
 5043004:	dec00204 	addi	sp,sp,8
 5043008:	f800283a 	ret

0504300c <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 504300c:	defff804 	addi	sp,sp,-32
 5043010:	dfc00715 	stw	ra,28(sp)
 5043014:	df000615 	stw	fp,24(sp)
 5043018:	df000604 	addi	fp,sp,24
 504301c:	e13ffe15 	stw	r4,-8(fp)
 5043020:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 5043024:	e0bffe17 	ldw	r2,-8(fp)
 5043028:	11000017 	ldw	r4,0(r2)
 504302c:	e0bffe17 	ldw	r2,-8(fp)
 5043030:	11400317 	ldw	r5,12(r2)
 5043034:	e0bffe17 	ldw	r2,-8(fp)
 5043038:	11800117 	ldw	r6,4(r2)
 504303c:	e0bffe17 	ldw	r2,-8(fp)
 5043040:	11c00417 	ldw	r7,16(r2)
 5043044:	e0bffe17 	ldw	r2,-8(fp)
 5043048:	10800a17 	ldw	r2,40(r2)
 504304c:	e0ffff17 	ldw	r3,-4(fp)
 5043050:	d8c00215 	stw	r3,8(sp)
 5043054:	d8800115 	stw	r2,4(sp)
 5043058:	00800044 	movi	r2,1
 504305c:	d8800015 	stw	r2,0(sp)
 5043060:	5040f480 	call	5040f48 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 5043064:	e0bffe17 	ldw	r2,-8(fp)
 5043068:	11000117 	ldw	r4,4(r2)
 504306c:	e0bffe17 	ldw	r2,-8(fp)
 5043070:	11400417 	ldw	r5,16(r2)
 5043074:	e0bffe17 	ldw	r2,-8(fp)
 5043078:	11800217 	ldw	r6,8(r2)
 504307c:	e0bffe17 	ldw	r2,-8(fp)
 5043080:	11c00517 	ldw	r7,20(r2)
 5043084:	e0bffe17 	ldw	r2,-8(fp)
 5043088:	10800a17 	ldw	r2,40(r2)
 504308c:	e0ffff17 	ldw	r3,-4(fp)
 5043090:	d8c00215 	stw	r3,8(sp)
 5043094:	d8800115 	stw	r2,4(sp)
 5043098:	00800044 	movi	r2,1
 504309c:	d8800015 	stw	r2,0(sp)
 50430a0:	5040f480 	call	5040f48 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 50430a4:	e0bffe17 	ldw	r2,-8(fp)
 50430a8:	11000217 	ldw	r4,8(r2)
 50430ac:	e0bffe17 	ldw	r2,-8(fp)
 50430b0:	11400517 	ldw	r5,20(r2)
 50430b4:	e0bffe17 	ldw	r2,-8(fp)
 50430b8:	11800017 	ldw	r6,0(r2)
 50430bc:	e0bffe17 	ldw	r2,-8(fp)
 50430c0:	11c00317 	ldw	r7,12(r2)
 50430c4:	e0bffe17 	ldw	r2,-8(fp)
 50430c8:	10800a17 	ldw	r2,40(r2)
 50430cc:	e0ffff17 	ldw	r3,-4(fp)
 50430d0:	d8c00215 	stw	r3,8(sp)
 50430d4:	d8800115 	stw	r2,4(sp)
 50430d8:	00800044 	movi	r2,1
 50430dc:	d8800015 	stw	r2,0(sp)
 50430e0:	5040f480 	call	5040f48 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 50430e4:	e0bffe17 	ldw	r2,-8(fp)
 50430e8:	10800b17 	ldw	r2,44(r2)
 50430ec:	10800058 	cmpnei	r2,r2,1
 50430f0:	1000ad1e 	bne	r2,zero,50433a8 <vid_draw_triangle+0x39c>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 50430f4:	e0bffe17 	ldw	r2,-8(fp)
 50430f8:	10c00317 	ldw	r3,12(r2)
 50430fc:	e0bffe17 	ldw	r2,-8(fp)
 5043100:	11000417 	ldw	r4,16(r2)
 5043104:	e0bffe17 	ldw	r2,-8(fp)
 5043108:	10800517 	ldw	r2,20(r2)
 504310c:	100d883a 	mov	r6,r2
 5043110:	200b883a 	mov	r5,r4
 5043114:	1809883a 	mov	r4,r3
 5043118:	5042c0c0 	call	5042c0c <min3>
 504311c:	1007883a 	mov	r3,r2
 5043120:	e0bffe17 	ldw	r2,-8(fp)
 5043124:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 5043128:	e0bffe17 	ldw	r2,-8(fp)
 504312c:	10c00317 	ldw	r3,12(r2)
 5043130:	e0bffe17 	ldw	r2,-8(fp)
 5043134:	11000417 	ldw	r4,16(r2)
 5043138:	e0bffe17 	ldw	r2,-8(fp)
 504313c:	10800517 	ldw	r2,20(r2)
 5043140:	100d883a 	mov	r6,r2
 5043144:	200b883a 	mov	r5,r4
 5043148:	1809883a 	mov	r4,r3
 504314c:	5042bb80 	call	5042bb8 <max3>
 5043150:	1007883a 	mov	r3,r2
 5043154:	e0bffe17 	ldw	r2,-8(fp)
 5043158:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 504315c:	e0bffe17 	ldw	r2,-8(fp)
 5043160:	10c00317 	ldw	r3,12(r2)
 5043164:	e0bffe17 	ldw	r2,-8(fp)
 5043168:	11000417 	ldw	r4,16(r2)
 504316c:	e0bffe17 	ldw	r2,-8(fp)
 5043170:	10800517 	ldw	r2,20(r2)
 5043174:	100d883a 	mov	r6,r2
 5043178:	200b883a 	mov	r5,r4
 504317c:	1809883a 	mov	r4,r3
 5043180:	5042c600 	call	5042c60 <max_diff3>
 5043184:	1007883a 	mov	r3,r2
 5043188:	e0bffe17 	ldw	r2,-8(fp)
 504318c:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 5043190:	e0bffe17 	ldw	r2,-8(fp)
 5043194:	10c00017 	ldw	r3,0(r2)
 5043198:	e0bffe17 	ldw	r2,-8(fp)
 504319c:	11000117 	ldw	r4,4(r2)
 50431a0:	e0bffe17 	ldw	r2,-8(fp)
 50431a4:	10800217 	ldw	r2,8(r2)
 50431a8:	100d883a 	mov	r6,r2
 50431ac:	200b883a 	mov	r5,r4
 50431b0:	1809883a 	mov	r4,r3
 50431b4:	5042c600 	call	5042c60 <max_diff3>
 50431b8:	1007883a 	mov	r3,r2
 50431bc:	e0bffe17 	ldw	r2,-8(fp)
 50431c0:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
 50431c4:	e0bfff17 	ldw	r2,-4(fp)
 50431c8:	10800217 	ldw	r2,8(r2)
 50431cc:	100490fa 	slli	r2,r2,3
 50431d0:	1009883a 	mov	r4,r2
 50431d4:	504f0980 	call	504f098 <malloc>
 50431d8:	1007883a 	mov	r3,r2
 50431dc:	e0bffe17 	ldw	r2,-8(fp)
 50431e0:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 50431e4:	e0bffe17 	ldw	r2,-8(fp)
 50431e8:	10800817 	ldw	r2,32(r2)
 50431ec:	e0bffd15 	stw	r2,-12(fp)
 50431f0:	00001206 	br	504323c <vid_draw_triangle+0x230>
    {
      tri->span_array[i*2] = -1;
 50431f4:	e0bffe17 	ldw	r2,-8(fp)
 50431f8:	10800d17 	ldw	r2,52(r2)
 50431fc:	e0fffd17 	ldw	r3,-12(fp)
 5043200:	180690fa 	slli	r3,r3,3
 5043204:	10c5883a 	add	r2,r2,r3
 5043208:	00ffffc4 	movi	r3,-1
 504320c:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 5043210:	e0bffe17 	ldw	r2,-8(fp)
 5043214:	10c00d17 	ldw	r3,52(r2)
 5043218:	e0bffd17 	ldw	r2,-12(fp)
 504321c:	100490fa 	slli	r2,r2,3
 5043220:	10800104 	addi	r2,r2,4
 5043224:	1885883a 	add	r2,r3,r2
 5043228:	00ffffc4 	movi	r3,-1
 504322c:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 5043230:	e0bffd17 	ldw	r2,-12(fp)
 5043234:	10800044 	addi	r2,r2,1
 5043238:	e0bffd15 	stw	r2,-12(fp)
 504323c:	e0bffe17 	ldw	r2,-8(fp)
 5043240:	10c00917 	ldw	r3,36(r2)
 5043244:	e0bffd17 	ldw	r2,-12(fp)
 5043248:	18bfea0e 	bge	r3,r2,50431f4 <_gp+0xfffd7dcc>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 504324c:	e0bffe17 	ldw	r2,-8(fp)
 5043250:	10c00017 	ldw	r3,0(r2)
 5043254:	e0bffe17 	ldw	r2,-8(fp)
 5043258:	11000317 	ldw	r4,12(r2)
 504325c:	e0bffe17 	ldw	r2,-8(fp)
 5043260:	11400117 	ldw	r5,4(r2)
 5043264:	e0bffe17 	ldw	r2,-8(fp)
 5043268:	11800417 	ldw	r6,16(r2)
 504326c:	e0bffe17 	ldw	r2,-8(fp)
 5043270:	10800d17 	ldw	r2,52(r2)
 5043274:	d8800015 	stw	r2,0(sp)
 5043278:	300f883a 	mov	r7,r6
 504327c:	280d883a 	mov	r6,r5
 5043280:	200b883a 	mov	r5,r4
 5043284:	1809883a 	mov	r4,r3
 5043288:	5042dc80 	call	5042dc8 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 504328c:	e0bffe17 	ldw	r2,-8(fp)
 5043290:	10c00117 	ldw	r3,4(r2)
 5043294:	e0bffe17 	ldw	r2,-8(fp)
 5043298:	11000417 	ldw	r4,16(r2)
 504329c:	e0bffe17 	ldw	r2,-8(fp)
 50432a0:	11400217 	ldw	r5,8(r2)
 50432a4:	e0bffe17 	ldw	r2,-8(fp)
 50432a8:	11800517 	ldw	r6,20(r2)
 50432ac:	e0bffe17 	ldw	r2,-8(fp)
 50432b0:	10800d17 	ldw	r2,52(r2)
 50432b4:	d8800015 	stw	r2,0(sp)
 50432b8:	300f883a 	mov	r7,r6
 50432bc:	280d883a 	mov	r6,r5
 50432c0:	200b883a 	mov	r5,r4
 50432c4:	1809883a 	mov	r4,r3
 50432c8:	5042dc80 	call	5042dc8 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 50432cc:	e0bffe17 	ldw	r2,-8(fp)
 50432d0:	10c00217 	ldw	r3,8(r2)
 50432d4:	e0bffe17 	ldw	r2,-8(fp)
 50432d8:	11000517 	ldw	r4,20(r2)
 50432dc:	e0bffe17 	ldw	r2,-8(fp)
 50432e0:	11400017 	ldw	r5,0(r2)
 50432e4:	e0bffe17 	ldw	r2,-8(fp)
 50432e8:	11800317 	ldw	r6,12(r2)
 50432ec:	e0bffe17 	ldw	r2,-8(fp)
 50432f0:	10800d17 	ldw	r2,52(r2)
 50432f4:	d8800015 	stw	r2,0(sp)
 50432f8:	300f883a 	mov	r7,r6
 50432fc:	280d883a 	mov	r6,r5
 5043300:	200b883a 	mov	r5,r4
 5043304:	1809883a 	mov	r4,r3
 5043308:	5042dc80 	call	5042dc8 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 504330c:	e0bffe17 	ldw	r2,-8(fp)
 5043310:	10800817 	ldw	r2,32(r2)
 5043314:	e0bffd15 	stw	r2,-12(fp)
 5043318:	00001b06 	br	5043388 <vid_draw_triangle+0x37c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 504331c:	e0bffe17 	ldw	r2,-8(fp)
 5043320:	10800d17 	ldw	r2,52(r2)
 5043324:	e0fffd17 	ldw	r3,-12(fp)
 5043328:	180690fa 	slli	r3,r3,3
 504332c:	10c5883a 	add	r2,r2,r3
 5043330:	11000017 	ldw	r4,0(r2)
 5043334:	e0bffe17 	ldw	r2,-8(fp)
 5043338:	10c00d17 	ldw	r3,52(r2)
 504333c:	e0bffd17 	ldw	r2,-12(fp)
 5043340:	100490fa 	slli	r2,r2,3
 5043344:	10800104 	addi	r2,r2,4
 5043348:	1885883a 	add	r2,r3,r2
 504334c:	11400017 	ldw	r5,0(r2)
 5043350:	e0bffe17 	ldw	r2,-8(fp)
 5043354:	10800a17 	ldw	r2,40(r2)
 5043358:	e0ffff17 	ldw	r3,-4(fp)
 504335c:	d8c00215 	stw	r3,8(sp)
 5043360:	d8800115 	stw	r2,4(sp)
 5043364:	00800044 	movi	r2,1
 5043368:	d8800015 	stw	r2,0(sp)
 504336c:	e1fffd17 	ldw	r7,-12(fp)
 5043370:	280d883a 	mov	r6,r5
 5043374:	e17ffd17 	ldw	r5,-12(fp)
 5043378:	5040f480 	call	5040f48 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 504337c:	e0bffd17 	ldw	r2,-12(fp)
 5043380:	10800044 	addi	r2,r2,1
 5043384:	e0bffd15 	stw	r2,-12(fp)
 5043388:	e0bffe17 	ldw	r2,-8(fp)
 504338c:	10c00917 	ldw	r3,36(r2)
 5043390:	e0bffd17 	ldw	r2,-12(fp)
 5043394:	18bfe10e 	bge	r3,r2,504331c <_gp+0xfffd7ef4>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 5043398:	e0bffe17 	ldw	r2,-8(fp)
 504339c:	10800d17 	ldw	r2,52(r2)
 50433a0:	1009883a 	mov	r4,r2
 50433a4:	504f0ac0 	call	504f0ac <free>
  }
}
 50433a8:	0001883a 	nop
 50433ac:	e037883a 	mov	sp,fp
 50433b0:	dfc00117 	ldw	ra,4(sp)
 50433b4:	df000017 	ldw	fp,0(sp)
 50433b8:	dec00204 	addi	sp,sp,8
 50433bc:	f800283a 	ret

050433c0 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 50433c0:	defff404 	addi	sp,sp,-48
 50433c4:	dfc00b15 	stw	ra,44(sp)
 50433c8:	df000a15 	stw	fp,40(sp)
 50433cc:	df000a04 	addi	fp,sp,40
 50433d0:	e13ffa15 	stw	r4,-24(fp)
 50433d4:	e17ffb15 	stw	r5,-20(fp)
 50433d8:	300b883a 	mov	r5,r6
 50433dc:	3809883a 	mov	r4,r7
 50433e0:	e0c00217 	ldw	r3,8(fp)
 50433e4:	e0800317 	ldw	r2,12(fp)
 50433e8:	e17ffc0d 	sth	r5,-16(fp)
 50433ec:	e13ffd0d 	sth	r4,-12(fp)
 50433f0:	e0fffe0d 	sth	r3,-8(fp)
 50433f4:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 50433f8:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 50433fc:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 5043400:	e03ff615 	stw	zero,-40(fp)
 5043404:	e03ff715 	stw	zero,-36(fp)
 5043408:	00001e06 	br	5043484 <CopyImage16+0xc4>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 504340c:	e0bff917 	ldw	r2,-28(fp)
 5043410:	1085883a 	add	r2,r2,r2
 5043414:	1007883a 	mov	r3,r2
 5043418:	e0bffb17 	ldw	r2,-20(fp)
 504341c:	10c7883a 	add	r3,r2,r3
 5043420:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 5043424:	1085883a 	add	r2,r2,r2
 5043428:	1009883a 	mov	r4,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 504342c:	e0bffa17 	ldw	r2,-24(fp)
 5043430:	1109883a 	add	r4,r2,r4
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 5043434:	e0bffc0f 	ldh	r2,-16(fp)
 5043438:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 504343c:	100d883a 	mov	r6,r2
 5043440:	200b883a 	mov	r5,r4
 5043444:	1809883a 	mov	r4,r3
 5043448:	504f8cc0 	call	504f8cc <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 504344c:	e0bff617 	ldw	r2,-40(fp)
 5043450:	10800044 	addi	r2,r2,1
 5043454:	e0bff615 	stw	r2,-40(fp)
 5043458:	e0bff717 	ldw	r2,-36(fp)
 504345c:	10800044 	addi	r2,r2,1
 5043460:	e0bff715 	stw	r2,-36(fp)
 5043464:	e0bffc0f 	ldh	r2,-16(fp)
 5043468:	e0fff817 	ldw	r3,-32(fp)
 504346c:	1885883a 	add	r2,r3,r2
 5043470:	e0bff815 	stw	r2,-32(fp)
 5043474:	e0bffe0f 	ldh	r2,-8(fp)
 5043478:	e0fff917 	ldw	r3,-28(fp)
 504347c:	1885883a 	add	r2,r3,r2
 5043480:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 5043484:	e0bffd0f 	ldh	r2,-12(fp)
 5043488:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 504348c:	e0bff617 	ldw	r2,-40(fp)
 5043490:	18bfde0e 	bge	r3,r2,504340c <_gp+0xfffd7fe4>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 5043494:	0001883a 	nop
 5043498:	e037883a 	mov	sp,fp
 504349c:	dfc00117 	ldw	ra,4(sp)
 50434a0:	df000017 	ldw	fp,0(sp)
 50434a4:	dec00204 	addi	sp,sp,8
 50434a8:	f800283a 	ret

050434ac <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 50434ac:	defff004 	addi	sp,sp,-64
 50434b0:	dfc00f15 	stw	ra,60(sp)
 50434b4:	df000e15 	stw	fp,56(sp)
 50434b8:	df000e04 	addi	fp,sp,56
 50434bc:	e13ff615 	stw	r4,-40(fp)
 50434c0:	e17ff715 	stw	r5,-36(fp)
 50434c4:	3013883a 	mov	r9,r6
 50434c8:	3811883a 	mov	r8,r7
 50434cc:	e1c00217 	ldw	r7,8(fp)
 50434d0:	e1800317 	ldw	r6,12(fp)
 50434d4:	e1400417 	ldw	r5,16(fp)
 50434d8:	e1000517 	ldw	r4,20(fp)
 50434dc:	e0c00617 	ldw	r3,24(fp)
 50434e0:	e0800717 	ldw	r2,28(fp)
 50434e4:	e27ff80d 	sth	r9,-32(fp)
 50434e8:	e23ff90d 	sth	r8,-28(fp)
 50434ec:	e1fffa0d 	sth	r7,-24(fp)
 50434f0:	e1bffb0d 	sth	r6,-20(fp)
 50434f4:	e17ffc0d 	sth	r5,-16(fp)
 50434f8:	e13ffd0d 	sth	r4,-12(fp)
 50434fc:	e0fffe0d 	sth	r3,-8(fp)
 5043500:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 5043504:	e0fff80f 	ldh	r3,-32(fp)
 5043508:	e0bffc0f 	ldh	r2,-16(fp)
 504350c:	1885383a 	mul	r2,r3,r2
 5043510:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 5043514:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 5043518:	e0bffc0f 	ldh	r2,-16(fp)
 504351c:	e0bff215 	stw	r2,-56(fp)
 5043520:	e03ff315 	stw	zero,-52(fp)
 5043524:	00002206 	br	50435b0 <CropImage16+0x104>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 5043528:	e0bff517 	ldw	r2,-44(fp)
 504352c:	1085883a 	add	r2,r2,r2
 5043530:	1007883a 	mov	r3,r2
 5043534:	e0bff717 	ldw	r2,-36(fp)
 5043538:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 504353c:	e0fffa0f 	ldh	r3,-24(fp)
 5043540:	e0bff417 	ldw	r2,-48(fp)
 5043544:	1885883a 	add	r2,r3,r2
 5043548:	1085883a 	add	r2,r2,r2
 504354c:	1007883a 	mov	r3,r2
 5043550:	e0bff617 	ldw	r2,-40(fp)
 5043554:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 5043558:	e0fff80f 	ldh	r3,-32(fp)
 504355c:	e0bffa0f 	ldh	r2,-24(fp)
 5043560:	1887c83a 	sub	r3,r3,r2
 5043564:	e0bffb0f 	ldh	r2,-20(fp)
 5043568:	1885c83a 	sub	r2,r3,r2
 504356c:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 5043570:	100d883a 	mov	r6,r2
 5043574:	504f8cc0 	call	504f8cc <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 5043578:	e0bff217 	ldw	r2,-56(fp)
 504357c:	10800044 	addi	r2,r2,1
 5043580:	e0bff215 	stw	r2,-56(fp)
 5043584:	e0bff317 	ldw	r2,-52(fp)
 5043588:	10800044 	addi	r2,r2,1
 504358c:	e0bff315 	stw	r2,-52(fp)
 5043590:	e0bff80f 	ldh	r2,-32(fp)
 5043594:	e0fff417 	ldw	r3,-48(fp)
 5043598:	1885883a 	add	r2,r3,r2
 504359c:	e0bff415 	stw	r2,-48(fp)
 50435a0:	e0bffe0f 	ldh	r2,-8(fp)
 50435a4:	e0fff517 	ldw	r3,-44(fp)
 50435a8:	1885883a 	add	r2,r3,r2
 50435ac:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 50435b0:	e0fff90f 	ldh	r3,-28(fp)
 50435b4:	e0bffd0f 	ldh	r2,-12(fp)
 50435b8:	1885c83a 	sub	r2,r3,r2
 50435bc:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 50435c0:	e0bff217 	ldw	r2,-56(fp)
 50435c4:	18bfd80e 	bge	r3,r2,5043528 <_gp+0xfffd8100>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 50435c8:	0001883a 	nop
 50435cc:	e037883a 	mov	sp,fp
 50435d0:	dfc00117 	ldw	ra,4(sp)
 50435d4:	df000017 	ldw	fp,0(sp)
 50435d8:	dec00204 	addi	sp,sp,8
 50435dc:	f800283a 	ret

050435e0 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 50435e0:	defff404 	addi	sp,sp,-48
 50435e4:	dfc00b15 	stw	ra,44(sp)
 50435e8:	df000a15 	stw	fp,40(sp)
 50435ec:	df000a04 	addi	fp,sp,40
 50435f0:	e13ffc15 	stw	r4,-16(fp)
 50435f4:	e17ffd15 	stw	r5,-12(fp)
 50435f8:	e1bffe15 	stw	r6,-8(fp)
 50435fc:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 5043600:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 5043604:	e0bffc17 	ldw	r2,-16(fp)
 5043608:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 504360c:	00007f06 	br	504380c <vid_print_string_alpha+0x22c>
    //Handle newline char here.
    if (string[i] == '\n') {
 5043610:	e0bff917 	ldw	r2,-28(fp)
 5043614:	e0c00417 	ldw	r3,16(fp)
 5043618:	1885883a 	add	r2,r3,r2
 504361c:	10800003 	ldbu	r2,0(r2)
 5043620:	10803fcc 	andi	r2,r2,255
 5043624:	1080201c 	xori	r2,r2,128
 5043628:	10bfe004 	addi	r2,r2,-128
 504362c:	10800298 	cmpnei	r2,r2,10
 5043630:	10000c1e 	bne	r2,zero,5043664 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 5043634:	e0bffb17 	ldw	r2,-20(fp)
 5043638:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 504363c:	e0800217 	ldw	r2,8(fp)
 5043640:	1082d804 	addi	r2,r2,2912
 5043644:	10c00517 	ldw	r3,20(r2)
 5043648:	e0bffd17 	ldw	r2,-12(fp)
 504364c:	1885883a 	add	r2,r3,r2
 5043650:	e0bffd15 	stw	r2,-12(fp)
      i++;
 5043654:	e0bff917 	ldw	r2,-28(fp)
 5043658:	10800044 	addi	r2,r2,1
 504365c:	e0bff915 	stw	r2,-28(fp)
      continue;
 5043660:	00006a06 	br	504380c <vid_print_string_alpha+0x22c>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 5043664:	e0bff917 	ldw	r2,-28(fp)
 5043668:	e0c00417 	ldw	r3,16(fp)
 504366c:	1885883a 	add	r2,r3,r2
 5043670:	10800003 	ldbu	r2,0(r2)
 5043674:	10803fcc 	andi	r2,r2,255
 5043678:	1080201c 	xori	r2,r2,128
 504367c:	10bfe004 	addi	r2,r2,-128
 5043680:	10800818 	cmpnei	r2,r2,32
 5043684:	1000151e 	bne	r2,zero,50436dc <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 5043688:	e0bfff17 	ldw	r2,-4(fp)
 504368c:	10bfffe0 	cmpeqi	r2,r2,-1
 5043690:	10000b1e 	bne	r2,zero,50436c0 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 5043694:	e0800317 	ldw	r2,12(fp)
 5043698:	d8800215 	stw	r2,8(sp)
 504369c:	e0800217 	ldw	r2,8(fp)
 50436a0:	d8800115 	stw	r2,4(sp)
 50436a4:	e0bfff17 	ldw	r2,-4(fp)
 50436a8:	d8800015 	stw	r2,0(sp)
 50436ac:	01c00b44 	movi	r7,45
 50436b0:	e1bfff17 	ldw	r6,-4(fp)
 50436b4:	e17ffd17 	ldw	r5,-12(fp)
 50436b8:	e13ffc17 	ldw	r4,-16(fp)
 50436bc:	5043d5c0 	call	5043d5c <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 50436c0:	e0800217 	ldw	r2,8(fp)
 50436c4:	10806004 	addi	r2,r2,384
 50436c8:	10c00417 	ldw	r3,16(r2)
 50436cc:	e0bffc17 	ldw	r2,-16(fp)
 50436d0:	1885883a 	add	r2,r3,r2
 50436d4:	e0bffc15 	stw	r2,-16(fp)
 50436d8:	00004906 	br	5043800 <vid_print_string_alpha+0x220>
    }
    else if(string[i] == '\t')  // this is a tab
 50436dc:	e0bff917 	ldw	r2,-28(fp)
 50436e0:	e0c00417 	ldw	r3,16(fp)
 50436e4:	1885883a 	add	r2,r3,r2
 50436e8:	10800003 	ldbu	r2,0(r2)
 50436ec:	10803fcc 	andi	r2,r2,255
 50436f0:	1080201c 	xori	r2,r2,128
 50436f4:	10bfe004 	addi	r2,r2,-128
 50436f8:	10800258 	cmpnei	r2,r2,9
 50436fc:	10001d1e 	bne	r2,zero,5043774 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 5043700:	e03ffa15 	stw	zero,-24(fp)
 5043704:	00001706 	br	5043764 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 5043708:	e0bfff17 	ldw	r2,-4(fp)
 504370c:	10bfffe0 	cmpeqi	r2,r2,-1
 5043710:	10000b1e 	bne	r2,zero,5043740 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 5043714:	e0800317 	ldw	r2,12(fp)
 5043718:	d8800215 	stw	r2,8(sp)
 504371c:	e0800217 	ldw	r2,8(fp)
 5043720:	d8800115 	stw	r2,4(sp)
 5043724:	e0bfff17 	ldw	r2,-4(fp)
 5043728:	d8800015 	stw	r2,0(sp)
 504372c:	01c00b44 	movi	r7,45
 5043730:	e1bfff17 	ldw	r6,-4(fp)
 5043734:	e17ffd17 	ldw	r5,-12(fp)
 5043738:	e13ffc17 	ldw	r4,-16(fp)
 504373c:	5043d5c0 	call	5043d5c <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 5043740:	e0800217 	ldw	r2,8(fp)
 5043744:	10806004 	addi	r2,r2,384
 5043748:	10c00417 	ldw	r3,16(r2)
 504374c:	e0bffc17 	ldw	r2,-16(fp)
 5043750:	1885883a 	add	r2,r3,r2
 5043754:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 5043758:	e0bffa17 	ldw	r2,-24(fp)
 504375c:	10800044 	addi	r2,r2,1
 5043760:	e0bffa15 	stw	r2,-24(fp)
 5043764:	e0bffa17 	ldw	r2,-24(fp)
 5043768:	10800090 	cmplti	r2,r2,2
 504376c:	103fe61e 	bne	r2,zero,5043708 <_gp+0xfffd82e0>
 5043770:	00002306 	br	5043800 <vid_print_string_alpha+0x220>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 5043774:	e0bff917 	ldw	r2,-28(fp)
 5043778:	e0c00417 	ldw	r3,16(fp)
 504377c:	1885883a 	add	r2,r3,r2
 5043780:	10800003 	ldbu	r2,0(r2)
 5043784:	10c03fcc 	andi	r3,r2,255
 5043788:	18c0201c 	xori	r3,r3,128
 504378c:	18ffe004 	addi	r3,r3,-128
 5043790:	e0800317 	ldw	r2,12(fp)
 5043794:	d8800215 	stw	r2,8(sp)
 5043798:	e0800217 	ldw	r2,8(fp)
 504379c:	d8800115 	stw	r2,4(sp)
 50437a0:	e0bfff17 	ldw	r2,-4(fp)
 50437a4:	d8800015 	stw	r2,0(sp)
 50437a8:	180f883a 	mov	r7,r3
 50437ac:	e1bffe17 	ldw	r6,-8(fp)
 50437b0:	e17ffd17 	ldw	r5,-12(fp)
 50437b4:	e13ffc17 	ldw	r4,-16(fp)
 50437b8:	5043d5c0 	call	5043d5c <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 50437bc:	e0bff917 	ldw	r2,-28(fp)
 50437c0:	e0c00417 	ldw	r3,16(fp)
 50437c4:	1885883a 	add	r2,r3,r2
 50437c8:	10800003 	ldbu	r2,0(r2)
 50437cc:	10c03fcc 	andi	r3,r2,255
 50437d0:	18c0201c 	xori	r3,r3,128
 50437d4:	18ffe004 	addi	r3,r3,-128
 50437d8:	00820034 	movhi	r2,2048
 50437dc:	10bff7c4 	addi	r2,r2,-33
 50437e0:	1885883a 	add	r2,r3,r2
 50437e4:	1004917a 	slli	r2,r2,5
 50437e8:	e0c00217 	ldw	r3,8(fp)
 50437ec:	1885883a 	add	r2,r3,r2
 50437f0:	10c00417 	ldw	r3,16(r2)
 50437f4:	e0bffc17 	ldw	r2,-16(fp)
 50437f8:	1885883a 	add	r2,r3,r2
 50437fc:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 5043800:	e0bff917 	ldw	r2,-28(fp)
 5043804:	10800044 	addi	r2,r2,1
 5043808:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 504380c:	e0bff917 	ldw	r2,-28(fp)
 5043810:	e0c00417 	ldw	r3,16(fp)
 5043814:	1885883a 	add	r2,r3,r2
 5043818:	10800003 	ldbu	r2,0(r2)
 504381c:	10803fcc 	andi	r2,r2,255
 5043820:	1080201c 	xori	r2,r2,128
 5043824:	10bfe004 	addi	r2,r2,-128
 5043828:	103f791e 	bne	r2,zero,5043610 <_gp+0xfffd81e8>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 504382c:	0005883a 	mov	r2,zero
}
 5043830:	e037883a 	mov	sp,fp
 5043834:	dfc00117 	ldw	ra,4(sp)
 5043838:	df000017 	ldw	fp,0(sp)
 504383c:	dec00204 	addi	sp,sp,8
 5043840:	f800283a 	ret

05043844 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 5043844:	defff904 	addi	sp,sp,-28
 5043848:	df000615 	stw	fp,24(sp)
 504384c:	df000604 	addi	fp,sp,24
 5043850:	e13ffc15 	stw	r4,-16(fp)
 5043854:	e17ffd15 	stw	r5,-12(fp)
 5043858:	e1bffe15 	stw	r6,-8(fp)
 504385c:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 5043860:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 5043864:	e0bffc17 	ldw	r2,-16(fp)
 5043868:	10800418 	cmpnei	r2,r2,16
 504386c:	1000221e 	bne	r2,zero,50438f8 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 5043870:	e0bffd17 	ldw	r2,-12(fp)
 5043874:	10c00044 	addi	r3,r2,1
 5043878:	e0fffd15 	stw	r3,-12(fp)
 504387c:	10800003 	ldbu	r2,0(r2)
 5043880:	10803fcc 	andi	r2,r2,255
 5043884:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 5043888:	e0bffd17 	ldw	r2,-12(fp)
 504388c:	10800003 	ldbu	r2,0(r2)
 5043890:	10803fcc 	andi	r2,r2,255
 5043894:	1004923a 	slli	r2,r2,8
 5043898:	1007883a 	mov	r3,r2
 504389c:	e0bffb0b 	ldhu	r2,-20(fp)
 50438a0:	1885883a 	add	r2,r3,r2
 50438a4:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 50438a8:	e0bffb0b 	ldhu	r2,-20(fp)
 50438ac:	108007cc 	andi	r2,r2,31
 50438b0:	1007883a 	mov	r3,r2
 50438b4:	e0800117 	ldw	r2,4(fp)
 50438b8:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 50438bc:	e0bffb0b 	ldhu	r2,-20(fp)
 50438c0:	1004d17a 	srli	r2,r2,5
 50438c4:	10800fcc 	andi	r2,r2,63
 50438c8:	1007883a 	mov	r3,r2
 50438cc:	e0bfff17 	ldw	r2,-4(fp)
 50438d0:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 50438d4:	e0bffb0b 	ldhu	r2,-20(fp)
 50438d8:	1004d2fa 	srli	r2,r2,11
 50438dc:	108007cc 	andi	r2,r2,31
 50438e0:	1007883a 	mov	r3,r2
 50438e4:	e0bffe17 	ldw	r2,-8(fp)
 50438e8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 50438ec:	00800044 	movi	r2,1
 50438f0:	e0bffa15 	stw	r2,-24(fp)
 50438f4:	00002006 	br	5043978 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 50438f8:	e0bffc17 	ldw	r2,-16(fp)
 50438fc:	10800620 	cmpeqi	r2,r2,24
 5043900:	1000031e 	bne	r2,zero,5043910 <seperate_color_channels+0xcc>
 5043904:	e0bffc17 	ldw	r2,-16(fp)
 5043908:	10800818 	cmpnei	r2,r2,32
 504390c:	1000131e 	bne	r2,zero,504395c <seperate_color_channels+0x118>
  {
    *blue = *color++;
 5043910:	e0bffd17 	ldw	r2,-12(fp)
 5043914:	10c00044 	addi	r3,r2,1
 5043918:	e0fffd15 	stw	r3,-12(fp)
 504391c:	10c00003 	ldbu	r3,0(r2)
 5043920:	e0800117 	ldw	r2,4(fp)
 5043924:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 5043928:	e0bffd17 	ldw	r2,-12(fp)
 504392c:	10c00044 	addi	r3,r2,1
 5043930:	e0fffd15 	stw	r3,-12(fp)
 5043934:	10c00003 	ldbu	r3,0(r2)
 5043938:	e0bfff17 	ldw	r2,-4(fp)
 504393c:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 5043940:	e0bffd17 	ldw	r2,-12(fp)
 5043944:	10c00003 	ldbu	r3,0(r2)
 5043948:	e0bffe17 	ldw	r2,-8(fp)
 504394c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 5043950:	00800044 	movi	r2,1
 5043954:	e0bffa15 	stw	r2,-24(fp)
 5043958:	00000706 	br	5043978 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 504395c:	e0bffe17 	ldw	r2,-8(fp)
 5043960:	10000005 	stb	zero,0(r2)
    *green = 0;
 5043964:	e0bfff17 	ldw	r2,-4(fp)
 5043968:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 504396c:	e0800117 	ldw	r2,4(fp)
 5043970:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 5043974:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 5043978:	e0bffa17 	ldw	r2,-24(fp)
}
 504397c:	e037883a 	mov	sp,fp
 5043980:	df000017 	ldw	fp,0(sp)
 5043984:	dec00104 	addi	sp,sp,4
 5043988:	f800283a 	ret

0504398c <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 504398c:	defff904 	addi	sp,sp,-28
 5043990:	df000615 	stw	fp,24(sp)
 5043994:	df000604 	addi	fp,sp,24
 5043998:	e13ffc15 	stw	r4,-16(fp)
 504399c:	2809883a 	mov	r4,r5
 50439a0:	3007883a 	mov	r3,r6
 50439a4:	3805883a 	mov	r2,r7
 50439a8:	e13ffd05 	stb	r4,-12(fp)
 50439ac:	e0fffe05 	stb	r3,-8(fp)
 50439b0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 50439b4:	e0bffc17 	ldw	r2,-16(fp)
 50439b8:	10800418 	cmpnei	r2,r2,16
 50439bc:	1000191e 	bne	r2,zero,5043a24 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 50439c0:	e0bfff03 	ldbu	r2,-4(fp)
 50439c4:	108007cc 	andi	r2,r2,31
 50439c8:	1007883a 	mov	r3,r2
 50439cc:	e0bffe03 	ldbu	r2,-8(fp)
 50439d0:	10800fcc 	andi	r2,r2,63
 50439d4:	1004917a 	slli	r2,r2,5
 50439d8:	1884b03a 	or	r2,r3,r2
 50439dc:	1007883a 	mov	r3,r2
 50439e0:	e0bffd03 	ldbu	r2,-12(fp)
 50439e4:	100492fa 	slli	r2,r2,11
 50439e8:	1884b03a 	or	r2,r3,r2
 50439ec:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 50439f0:	e0800117 	ldw	r2,4(fp)
 50439f4:	10c00044 	addi	r3,r2,1
 50439f8:	e0c00115 	stw	r3,4(fp)
 50439fc:	e0fffb0b 	ldhu	r3,-20(fp)
 5043a00:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 5043a04:	e0bffb0b 	ldhu	r2,-20(fp)
 5043a08:	1004d23a 	srli	r2,r2,8
 5043a0c:	1007883a 	mov	r3,r2
 5043a10:	e0800117 	ldw	r2,4(fp)
 5043a14:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 5043a18:	00800044 	movi	r2,1
 5043a1c:	e0bffa15 	stw	r2,-24(fp)
 5043a20:	00002106 	br	5043aa8 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 5043a24:	e0bffc17 	ldw	r2,-16(fp)
 5043a28:	10800620 	cmpeqi	r2,r2,24
 5043a2c:	1000031e 	bne	r2,zero,5043a3c <merge_color_channels+0xb0>
 5043a30:	e0bffc17 	ldw	r2,-16(fp)
 5043a34:	10800818 	cmpnei	r2,r2,32
 5043a38:	1000101e 	bne	r2,zero,5043a7c <merge_color_channels+0xf0>
  {
    *color++ = blue;
 5043a3c:	e0800117 	ldw	r2,4(fp)
 5043a40:	10c00044 	addi	r3,r2,1
 5043a44:	e0c00115 	stw	r3,4(fp)
 5043a48:	e0ffff03 	ldbu	r3,-4(fp)
 5043a4c:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 5043a50:	e0800117 	ldw	r2,4(fp)
 5043a54:	10c00044 	addi	r3,r2,1
 5043a58:	e0c00115 	stw	r3,4(fp)
 5043a5c:	e0fffe03 	ldbu	r3,-8(fp)
 5043a60:	10c00005 	stb	r3,0(r2)
    *color = red;
 5043a64:	e0800117 	ldw	r2,4(fp)
 5043a68:	e0fffd03 	ldbu	r3,-12(fp)
 5043a6c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 5043a70:	00800044 	movi	r2,1
 5043a74:	e0bffa15 	stw	r2,-24(fp)
 5043a78:	00000b06 	br	5043aa8 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 5043a7c:	e0800117 	ldw	r2,4(fp)
 5043a80:	10c00044 	addi	r3,r2,1
 5043a84:	e0c00115 	stw	r3,4(fp)
 5043a88:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 5043a8c:	e0800117 	ldw	r2,4(fp)
 5043a90:	10c00044 	addi	r3,r2,1
 5043a94:	e0c00115 	stw	r3,4(fp)
 5043a98:	10000005 	stb	zero,0(r2)
    *color = 0;
 5043a9c:	e0800117 	ldw	r2,4(fp)
 5043aa0:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 5043aa4:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 5043aa8:	e0bffa17 	ldw	r2,-24(fp)
}
 5043aac:	e037883a 	mov	sp,fp
 5043ab0:	df000017 	ldw	fp,0(sp)
 5043ab4:	dec00104 	addi	sp,sp,4
 5043ab8:	f800283a 	ret

05043abc <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 5043abc:	defffa04 	addi	sp,sp,-24
 5043ac0:	dfc00515 	stw	ra,20(sp)
 5043ac4:	df000415 	stw	fp,16(sp)
 5043ac8:	df000404 	addi	fp,sp,16
 5043acc:	e13ffc15 	stw	r4,-16(fp)
 5043ad0:	e17ffd15 	stw	r5,-12(fp)
 5043ad4:	e1bffe15 	stw	r6,-8(fp)
 5043ad8:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
 5043adc:	010141b4 	movhi	r4,1286
 5043ae0:	21032404 	addi	r4,r4,3216
 5043ae4:	504fc680 	call	504fc68 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
 5043ae8:	0001883a 	nop
 5043aec:	e037883a 	mov	sp,fp
 5043af0:	dfc00117 	ldw	ra,4(sp)
 5043af4:	df000017 	ldw	fp,0(sp)
 5043af8:	dec00204 	addi	sp,sp,8
 5043afc:	f800283a 	ret

05043b00 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 5043b00:	defff304 	addi	sp,sp,-52
 5043b04:	dfc00c15 	stw	ra,48(sp)
 5043b08:	df000b15 	stw	fp,44(sp)
 5043b0c:	df000b04 	addi	fp,sp,44
 5043b10:	e13ffc15 	stw	r4,-16(fp)
 5043b14:	e17ffd15 	stw	r5,-12(fp)
 5043b18:	e1bffe15 	stw	r6,-8(fp)
 5043b1c:	3805883a 	mov	r2,r7
 5043b20:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 5043b24:	e0bffe17 	ldw	r2,-8(fp)
 5043b28:	10bfffd8 	cmpnei	r2,r2,-1
 5043b2c:	10000c1e 	bne	r2,zero,5043b60 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 5043b30:	e13ffb44 	addi	r4,fp,-19
 5043b34:	e0fffb04 	addi	r3,fp,-20
 5043b38:	e0800517 	ldw	r2,20(fp)
 5043b3c:	d8800115 	stw	r2,4(sp)
 5043b40:	e0bffb84 	addi	r2,fp,-18
 5043b44:	d8800015 	stw	r2,0(sp)
 5043b48:	200f883a 	mov	r7,r4
 5043b4c:	180d883a 	mov	r6,r3
 5043b50:	e17ffd17 	ldw	r5,-12(fp)
 5043b54:	e13ffc17 	ldw	r4,-16(fp)
 5043b58:	5043abc0 	call	5043abc <read_from_frame>
 5043b5c:	00000c06 	br	5043b90 <alpha_blending+0x90>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 5043b60:	e0800517 	ldw	r2,20(fp)
 5043b64:	10c00017 	ldw	r3,0(r2)
 5043b68:	e1bffb44 	addi	r6,fp,-19
 5043b6c:	e17ffb04 	addi	r5,fp,-20
 5043b70:	e13ffe04 	addi	r4,fp,-8
 5043b74:	e0bffb84 	addi	r2,fp,-18
 5043b78:	d8800015 	stw	r2,0(sp)
 5043b7c:	300f883a 	mov	r7,r6
 5043b80:	280d883a 	mov	r6,r5
 5043b84:	200b883a 	mov	r5,r4
 5043b88:	1809883a 	mov	r4,r3
 5043b8c:	50438440 	call	5043844 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 5043b90:	e0800217 	ldw	r2,8(fp)
 5043b94:	10800003 	ldbu	r2,0(r2)
 5043b98:	10c03fcc 	andi	r3,r2,255
 5043b9c:	e0bfff03 	ldbu	r2,-4(fp)
 5043ba0:	1887383a 	mul	r3,r3,r2
 5043ba4:	e0bffb03 	ldbu	r2,-20(fp)
 5043ba8:	11003fcc 	andi	r4,r2,255
 5043bac:	e0bfff03 	ldbu	r2,-4(fp)
 5043bb0:	01403fc4 	movi	r5,255
 5043bb4:	2885c83a 	sub	r2,r5,r2
 5043bb8:	2085383a 	mul	r2,r4,r2
 5043bbc:	1885883a 	add	r2,r3,r2
 5043bc0:	01403fc4 	movi	r5,255
 5043bc4:	1009883a 	mov	r4,r2
 5043bc8:	504b2f40 	call	504b2f4 <__divsi3>
 5043bcc:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 5043bd0:	e0800317 	ldw	r2,12(fp)
 5043bd4:	10800003 	ldbu	r2,0(r2)
 5043bd8:	10c03fcc 	andi	r3,r2,255
 5043bdc:	e0bfff03 	ldbu	r2,-4(fp)
 5043be0:	1887383a 	mul	r3,r3,r2
 5043be4:	e0bffb43 	ldbu	r2,-19(fp)
 5043be8:	11003fcc 	andi	r4,r2,255
 5043bec:	e0bfff03 	ldbu	r2,-4(fp)
 5043bf0:	01403fc4 	movi	r5,255
 5043bf4:	2885c83a 	sub	r2,r5,r2
 5043bf8:	2085383a 	mul	r2,r4,r2
 5043bfc:	1885883a 	add	r2,r3,r2
 5043c00:	01403fc4 	movi	r5,255
 5043c04:	1009883a 	mov	r4,r2
 5043c08:	504b2f40 	call	504b2f4 <__divsi3>
 5043c0c:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 5043c10:	e0800417 	ldw	r2,16(fp)
 5043c14:	10800003 	ldbu	r2,0(r2)
 5043c18:	10c03fcc 	andi	r3,r2,255
 5043c1c:	e0bfff03 	ldbu	r2,-4(fp)
 5043c20:	1887383a 	mul	r3,r3,r2
 5043c24:	e0bffb83 	ldbu	r2,-18(fp)
 5043c28:	11003fcc 	andi	r4,r2,255
 5043c2c:	e0bfff03 	ldbu	r2,-4(fp)
 5043c30:	01403fc4 	movi	r5,255
 5043c34:	2885c83a 	sub	r2,r5,r2
 5043c38:	2085383a 	mul	r2,r4,r2
 5043c3c:	1885883a 	add	r2,r3,r2
 5043c40:	01403fc4 	movi	r5,255
 5043c44:	1009883a 	mov	r4,r2
 5043c48:	504b2f40 	call	504b2f4 <__divsi3>
 5043c4c:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 5043c50:	e0800517 	ldw	r2,20(fp)
 5043c54:	10800017 	ldw	r2,0(r2)
 5043c58:	10800418 	cmpnei	r2,r2,16
 5043c5c:	1000181e 	bne	r2,zero,5043cc0 <alpha_blending+0x1c0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 5043c60:	e0bff817 	ldw	r2,-32(fp)
 5043c64:	10c00830 	cmpltui	r3,r2,32
 5043c68:	1800011e 	bne	r3,zero,5043c70 <alpha_blending+0x170>
 5043c6c:	008007c4 	movi	r2,31
 5043c70:	1007883a 	mov	r3,r2
 5043c74:	e0800217 	ldw	r2,8(fp)
 5043c78:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 5043c7c:	e0bff917 	ldw	r2,-28(fp)
 5043c80:	10c01030 	cmpltui	r3,r2,64
 5043c84:	1800011e 	bne	r3,zero,5043c8c <alpha_blending+0x18c>
 5043c88:	00800fc4 	movi	r2,63
 5043c8c:	1007883a 	mov	r3,r2
 5043c90:	e0800317 	ldw	r2,12(fp)
 5043c94:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 5043c98:	e0bffa17 	ldw	r2,-24(fp)
 5043c9c:	10c00830 	cmpltui	r3,r2,32
 5043ca0:	1800011e 	bne	r3,zero,5043ca8 <alpha_blending+0x1a8>
 5043ca4:	008007c4 	movi	r2,31
 5043ca8:	1007883a 	mov	r3,r2
 5043cac:	e0800417 	ldw	r2,16(fp)
 5043cb0:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 5043cb4:	00800044 	movi	r2,1
 5043cb8:	e0bff715 	stw	r2,-36(fp)
 5043cbc:	00002106 	br	5043d44 <alpha_blending+0x244>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 5043cc0:	e0800517 	ldw	r2,20(fp)
 5043cc4:	10800017 	ldw	r2,0(r2)
 5043cc8:	10800620 	cmpeqi	r2,r2,24
 5043ccc:	1000041e 	bne	r2,zero,5043ce0 <alpha_blending+0x1e0>
 5043cd0:	e0800517 	ldw	r2,20(fp)
 5043cd4:	10800017 	ldw	r2,0(r2)
 5043cd8:	10800818 	cmpnei	r2,r2,32
 5043cdc:	1000181e 	bne	r2,zero,5043d40 <alpha_blending+0x240>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 5043ce0:	e0bff817 	ldw	r2,-32(fp)
 5043ce4:	10c04030 	cmpltui	r3,r2,256
 5043ce8:	1800011e 	bne	r3,zero,5043cf0 <alpha_blending+0x1f0>
 5043cec:	00803fc4 	movi	r2,255
 5043cf0:	1007883a 	mov	r3,r2
 5043cf4:	e0800217 	ldw	r2,8(fp)
 5043cf8:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 5043cfc:	e0bff917 	ldw	r2,-28(fp)
 5043d00:	10c04030 	cmpltui	r3,r2,256
 5043d04:	1800011e 	bne	r3,zero,5043d0c <alpha_blending+0x20c>
 5043d08:	00803fc4 	movi	r2,255
 5043d0c:	1007883a 	mov	r3,r2
 5043d10:	e0800317 	ldw	r2,12(fp)
 5043d14:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 5043d18:	e0bffa17 	ldw	r2,-24(fp)
 5043d1c:	10c04030 	cmpltui	r3,r2,256
 5043d20:	1800011e 	bne	r3,zero,5043d28 <alpha_blending+0x228>
 5043d24:	00803fc4 	movi	r2,255
 5043d28:	1007883a 	mov	r3,r2
 5043d2c:	e0800417 	ldw	r2,16(fp)
 5043d30:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 5043d34:	00800044 	movi	r2,1
 5043d38:	e0bff715 	stw	r2,-36(fp)
 5043d3c:	00000106 	br	5043d44 <alpha_blending+0x244>
  }
  else
  {
    return_value = 0;     
 5043d40:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 5043d44:	e0bff717 	ldw	r2,-36(fp)
} 
 5043d48:	e037883a 	mov	sp,fp
 5043d4c:	dfc00117 	ldw	ra,4(sp)
 5043d50:	df000017 	ldw	fp,0(sp)
 5043d54:	dec00204 	addi	sp,sp,8
 5043d58:	f800283a 	ret

05043d5c <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 5043d5c:	defff004 	addi	sp,sp,-64
 5043d60:	dfc00f15 	stw	ra,60(sp)
 5043d64:	df000e15 	stw	fp,56(sp)
 5043d68:	df000e04 	addi	fp,sp,56
 5043d6c:	e13ffc15 	stw	r4,-16(fp)
 5043d70:	e17ffd15 	stw	r5,-12(fp)
 5043d74:	e1bffe15 	stw	r6,-8(fp)
 5043d78:	3805883a 	mov	r2,r7
 5043d7c:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 5043d80:	e0ffff07 	ldb	r3,-4(fp)
 5043d84:	00820034 	movhi	r2,2048
 5043d88:	10bff7c4 	addi	r2,r2,-33
 5043d8c:	1885883a 	add	r2,r3,r2
 5043d90:	1004917a 	slli	r2,r2,5
 5043d94:	e0c00317 	ldw	r3,12(fp)
 5043d98:	1885883a 	add	r2,r3,r2
 5043d9c:	10800617 	ldw	r2,24(r2)
 5043da0:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 5043da4:	e0800417 	ldw	r2,16(fp)
 5043da8:	10c00017 	ldw	r3,0(r2)
 5043dac:	e1bff984 	addi	r6,fp,-26
 5043db0:	e17ff904 	addi	r5,fp,-28
 5043db4:	e13ffe04 	addi	r4,fp,-8
 5043db8:	e0bff944 	addi	r2,fp,-27
 5043dbc:	d8800015 	stw	r2,0(sp)
 5043dc0:	300f883a 	mov	r7,r6
 5043dc4:	280d883a 	mov	r6,r5
 5043dc8:	200b883a 	mov	r5,r4
 5043dcc:	1809883a 	mov	r4,r3
 5043dd0:	50438440 	call	5043844 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 5043dd4:	e03ff615 	stw	zero,-40(fp)
 5043dd8:	00004a06 	br	5043f04 <vid_print_char_alpha+0x1a8>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 5043ddc:	e03ff715 	stw	zero,-36(fp)
 5043de0:	00003b06 	br	5043ed0 <vid_print_char_alpha+0x174>
      red = original_red;
 5043de4:	e0bff903 	ldbu	r2,-28(fp)
 5043de8:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 5043dec:	e0bff983 	ldbu	r2,-26(fp)
 5043df0:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 5043df4:	e0bff943 	ldbu	r2,-27(fp)
 5043df8:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 5043dfc:	e0fffc17 	ldw	r3,-16(fp)
 5043e00:	e0bff717 	ldw	r2,-36(fp)
 5043e04:	1889883a 	add	r4,r3,r2
 5043e08:	e0fffd17 	ldw	r3,-12(fp)
 5043e0c:	e0bff617 	ldw	r2,-40(fp)
 5043e10:	1887883a 	add	r3,r3,r2
 5043e14:	e0bff817 	ldw	r2,-32(fp)
 5043e18:	10800003 	ldbu	r2,0(r2)
 5043e1c:	11403fcc 	andi	r5,r2,255
 5043e20:	e0800417 	ldw	r2,16(fp)
 5043e24:	d8800315 	stw	r2,12(sp)
 5043e28:	e0bffa44 	addi	r2,fp,-23
 5043e2c:	d8800215 	stw	r2,8(sp)
 5043e30:	e0bffa04 	addi	r2,fp,-24
 5043e34:	d8800115 	stw	r2,4(sp)
 5043e38:	e0bff9c4 	addi	r2,fp,-25
 5043e3c:	d8800015 	stw	r2,0(sp)
 5043e40:	280f883a 	mov	r7,r5
 5043e44:	e1800217 	ldw	r6,8(fp)
 5043e48:	180b883a 	mov	r5,r3
 5043e4c:	5043b000 	call	5043b00 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 5043e50:	e0800417 	ldw	r2,16(fp)
 5043e54:	10c00017 	ldw	r3,0(r2)
 5043e58:	e0bff9c3 	ldbu	r2,-25(fp)
 5043e5c:	11003fcc 	andi	r4,r2,255
 5043e60:	e0bffa03 	ldbu	r2,-24(fp)
 5043e64:	11403fcc 	andi	r5,r2,255
 5043e68:	e0bffa43 	ldbu	r2,-23(fp)
 5043e6c:	11803fcc 	andi	r6,r2,255
 5043e70:	e0bffb04 	addi	r2,fp,-20
 5043e74:	d8800015 	stw	r2,0(sp)
 5043e78:	300f883a 	mov	r7,r6
 5043e7c:	280d883a 	mov	r6,r5
 5043e80:	200b883a 	mov	r5,r4
 5043e84:	1809883a 	mov	r4,r3
 5043e88:	504398c0 	call	504398c <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 5043e8c:	e0fffc17 	ldw	r3,-16(fp)
 5043e90:	e0bff717 	ldw	r2,-36(fp)
 5043e94:	1889883a 	add	r4,r3,r2
 5043e98:	e0fffd17 	ldw	r3,-12(fp)
 5043e9c:	e0bff617 	ldw	r2,-40(fp)
 5043ea0:	1885883a 	add	r2,r3,r2
 5043ea4:	e0fffb17 	ldw	r3,-20(fp)
 5043ea8:	e1c00417 	ldw	r7,16(fp)
 5043eac:	180d883a 	mov	r6,r3
 5043eb0:	100b883a 	mov	r5,r2
 5043eb4:	50419700 	call	5041970 <vid_set_pixel>

      alpha++;
 5043eb8:	e0bff817 	ldw	r2,-32(fp)
 5043ebc:	10800044 	addi	r2,r2,1
 5043ec0:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 5043ec4:	e0bff717 	ldw	r2,-36(fp)
 5043ec8:	10800044 	addi	r2,r2,1
 5043ecc:	e0bff715 	stw	r2,-36(fp)
 5043ed0:	e0ffff07 	ldb	r3,-4(fp)
 5043ed4:	00820034 	movhi	r2,2048
 5043ed8:	10bff7c4 	addi	r2,r2,-33
 5043edc:	1885883a 	add	r2,r3,r2
 5043ee0:	1004917a 	slli	r2,r2,5
 5043ee4:	e0c00317 	ldw	r3,12(fp)
 5043ee8:	1885883a 	add	r2,r3,r2
 5043eec:	10800417 	ldw	r2,16(r2)
 5043ef0:	e0fff717 	ldw	r3,-36(fp)
 5043ef4:	18bfbb36 	bltu	r3,r2,5043de4 <_gp+0xfffd89bc>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 5043ef8:	e0bff617 	ldw	r2,-40(fp)
 5043efc:	10800044 	addi	r2,r2,1
 5043f00:	e0bff615 	stw	r2,-40(fp)
 5043f04:	e0ffff07 	ldb	r3,-4(fp)
 5043f08:	00820034 	movhi	r2,2048
 5043f0c:	10bff7c4 	addi	r2,r2,-33
 5043f10:	1885883a 	add	r2,r3,r2
 5043f14:	1004917a 	slli	r2,r2,5
 5043f18:	e0c00317 	ldw	r3,12(fp)
 5043f1c:	1885883a 	add	r2,r3,r2
 5043f20:	10800517 	ldw	r2,20(r2)
 5043f24:	e0fff617 	ldw	r3,-40(fp)
 5043f28:	18bfac36 	bltu	r3,r2,5043ddc <_gp+0xfffd89b4>

      alpha++;
    }
  }

  return(0);
 5043f2c:	0005883a 	mov	r2,zero
}
 5043f30:	e037883a 	mov	sp,fp
 5043f34:	dfc00117 	ldw	ra,4(sp)
 5043f38:	df000017 	ldw	fp,0(sp)
 5043f3c:	dec00204 	addi	sp,sp,8
 5043f40:	f800283a 	ret

05043f44 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 5043f44:	defffb04 	addi	sp,sp,-20
 5043f48:	df000415 	stw	fp,16(sp)
 5043f4c:	df000404 	addi	fp,sp,16
 5043f50:	e13ffe15 	stw	r4,-8(fp)
 5043f54:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 5043f58:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 5043f5c:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 5043f60:	e03ffc15 	stw	zero,-16(fp)
 5043f64:	00002406 	br	5043ff8 <vid_string_pixel_length_alpha+0xb4>
  {
    if( string[i] == ' ' )
 5043f68:	e0bffc17 	ldw	r2,-16(fp)
 5043f6c:	e0ffff17 	ldw	r3,-4(fp)
 5043f70:	1885883a 	add	r2,r3,r2
 5043f74:	10800003 	ldbu	r2,0(r2)
 5043f78:	10803fcc 	andi	r2,r2,255
 5043f7c:	1080201c 	xori	r2,r2,128
 5043f80:	10bfe004 	addi	r2,r2,-128
 5043f84:	10800818 	cmpnei	r2,r2,32
 5043f88:	1000071e 	bne	r2,zero,5043fa8 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 5043f8c:	e0bffe17 	ldw	r2,-8(fp)
 5043f90:	10806004 	addi	r2,r2,384
 5043f94:	10c00417 	ldw	r3,16(r2)
 5043f98:	e0bffd17 	ldw	r2,-12(fp)
 5043f9c:	1885883a 	add	r2,r3,r2
 5043fa0:	e0bffd15 	stw	r2,-12(fp)
 5043fa4:	00001106 	br	5043fec <vid_string_pixel_length_alpha+0xa8>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 5043fa8:	e0bffc17 	ldw	r2,-16(fp)
 5043fac:	e0ffff17 	ldw	r3,-4(fp)
 5043fb0:	1885883a 	add	r2,r3,r2
 5043fb4:	10800003 	ldbu	r2,0(r2)
 5043fb8:	10c03fcc 	andi	r3,r2,255
 5043fbc:	18c0201c 	xori	r3,r3,128
 5043fc0:	18ffe004 	addi	r3,r3,-128
 5043fc4:	00820034 	movhi	r2,2048
 5043fc8:	10bff7c4 	addi	r2,r2,-33
 5043fcc:	1885883a 	add	r2,r3,r2
 5043fd0:	1004917a 	slli	r2,r2,5
 5043fd4:	e0fffe17 	ldw	r3,-8(fp)
 5043fd8:	1885883a 	add	r2,r3,r2
 5043fdc:	10c00417 	ldw	r3,16(r2)
 5043fe0:	e0bffd17 	ldw	r2,-12(fp)
 5043fe4:	1885883a 	add	r2,r3,r2
 5043fe8:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 5043fec:	e0bffc17 	ldw	r2,-16(fp)
 5043ff0:	10800044 	addi	r2,r2,1
 5043ff4:	e0bffc15 	stw	r2,-16(fp)
 5043ff8:	e0bffc17 	ldw	r2,-16(fp)
 5043ffc:	e0ffff17 	ldw	r3,-4(fp)
 5044000:	1885883a 	add	r2,r3,r2
 5044004:	10800003 	ldbu	r2,0(r2)
 5044008:	10803fcc 	andi	r2,r2,255
 504400c:	1080201c 	xori	r2,r2,128
 5044010:	10bfe004 	addi	r2,r2,-128
 5044014:	103fd41e 	bne	r2,zero,5043f68 <_gp+0xfffd8b40>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 5044018:	e0bffd17 	ldw	r2,-12(fp)
}
 504401c:	e037883a 	mov	sp,fp
 5044020:	df000017 	ldw	fp,0(sp)
 5044024:	dec00104 	addi	sp,sp,4
 5044028:	f800283a 	ret

0504402c <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
 504402c:	defff904 	addi	sp,sp,-28
 5044030:	dfc00615 	stw	ra,24(sp)
 5044034:	df000515 	stw	fp,20(sp)
 5044038:	df000504 	addi	fp,sp,20
 504403c:	e13ffd15 	stw	r4,-12(fp)
 5044040:	e17ffe15 	stw	r5,-8(fp)
 5044044:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
 5044048:	00800044 	movi	r2,1
 504404c:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
 5044050:	01001804 	movi	r4,96
 5044054:	504f0980 	call	504f098 <malloc>
 5044058:	e0bffc15 	stw	r2,-16(fp)

    if (!p)
 504405c:	e0bffc17 	ldw	r2,-16(fp)
 5044060:	1000021e 	bne	r2,zero,504406c <Touch_Init+0x40>
        return p;
 5044064:	e0bffc17 	ldw	r2,-16(fp)
 5044068:	00004406 	br	504417c <Touch_Init+0x150>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
 504406c:	01801804 	movi	r6,96
 5044070:	000b883a 	mov	r5,zero
 5044074:	e13ffc17 	ldw	r4,-16(fp)
 5044078:	504fa140 	call	504fa14 <memset>
    p->spi_base = spi_base;
 504407c:	e0bffc17 	ldw	r2,-16(fp)
 5044080:	e0fffd17 	ldw	r3,-12(fp)
 5044084:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
 5044088:	e0bffc17 	ldw	r2,-16(fp)
 504408c:	e0fffe17 	ldw	r3,-8(fp)
 5044090:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
 5044094:	e0bffc17 	ldw	r2,-16(fp)
 5044098:	00c00044 	movi	r3,1
 504409c:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
 50440a0:	e0bffc17 	ldw	r2,-16(fp)
 50440a4:	e0ffff17 	ldw	r3,-4(fp)
 50440a8:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 50440ac:	d0a81b17 	ldw	r2,-24468(gp)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
 50440b0:	01401e04 	movi	r5,120
 50440b4:	1009883a 	mov	r4,r2
 50440b8:	504b3ec0 	call	504b3ec <__udivsi3>
 50440bc:	1007883a 	mov	r3,r2
 50440c0:	e0bffc17 	ldw	r2,-16(fp)
 50440c4:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
 50440c8:	e13ffc17 	ldw	r4,-16(fp)
 50440cc:	504453c0 	call	504453c <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
 50440d0:	e0bffc17 	ldw	r2,-16(fp)
 50440d4:	10800117 	ldw	r2,4(r2)
 50440d8:	10800204 	addi	r2,r2,8
 50440dc:	1007883a 	mov	r3,r2
 50440e0:	e0bffc17 	ldw	r2,-16(fp)
 50440e4:	10800317 	ldw	r2,12(r2)
 50440e8:	18800035 	stwio	r2,0(r3)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
 50440ec:	e0bffc17 	ldw	r2,-16(fp)
 50440f0:	10800117 	ldw	r2,4(r2)
 50440f4:	10800304 	addi	r2,r2,12
 50440f8:	0007883a 	mov	r3,zero
 50440fc:	10c00035 	stwio	r3,0(r2)
		                   touch_isr,
		                   (void *)p,
		                   NULL
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 5044100:	e0bffc17 	ldw	r2,-16(fp)
 5044104:	10800217 	ldw	r2,8(r2)
 5044108:	01814134 	movhi	r6,1284
 504410c:	3190e904 	addi	r6,r6,17316
 5044110:	e17ffc17 	ldw	r5,-16(fp)
 5044114:	1009883a 	mov	r4,r2
 5044118:	505cf0c0 	call	505cf0c <alt_irq_register>
 504411c:	10000126 	beq	r2,zero,5044124 <Touch_Init+0xf8>
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
 5044120:	e03ffb15 	stw	zero,-20(fp)

    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
 5044124:	e0bffb17 	ldw	r2,-20(fp)
 5044128:	10000c26 	beq	r2,zero,504415c <Touch_Init+0x130>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
 504412c:	e0bffc17 	ldw	r2,-16(fp)
 5044130:	10c01004 	addi	r3,r2,64
 5044134:	e0bffc17 	ldw	r2,-16(fp)
 5044138:	10801617 	ldw	r2,88(r2)
 504413c:	e1fffc17 	ldw	r7,-16(fp)
 5044140:	01814134 	movhi	r6,1284
 5044144:	31928304 	addi	r6,r6,18956
 5044148:	100b883a 	mov	r5,r2
 504414c:	1809883a 	mov	r4,r3
 5044150:	505cbbc0 	call	505cbbc <alt_alarm_start>
 5044154:	10000126 	beq	r2,zero,504415c <Touch_Init+0x130>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
 5044158:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
 504415c:	e0bffb17 	ldw	r2,-20(fp)
 5044160:	1000051e 	bne	r2,zero,5044178 <Touch_Init+0x14c>
 5044164:	e0bffc17 	ldw	r2,-16(fp)
 5044168:	10000326 	beq	r2,zero,5044178 <Touch_Init+0x14c>
        free(p);
 504416c:	e13ffc17 	ldw	r4,-16(fp)
 5044170:	504f0ac0 	call	504f0ac <free>
        p = NULL;
 5044174:	e03ffc15 	stw	zero,-16(fp)

    }        
                
    return p;        
 5044178:	e0bffc17 	ldw	r2,-16(fp)
    

}
 504417c:	e037883a 	mov	sp,fp
 5044180:	dfc00117 	ldw	ra,4(sp)
 5044184:	df000017 	ldw	fp,0(sp)
 5044188:	dec00204 	addi	sp,sp,8
 504418c:	f800283a 	ret

05044190 <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
 5044190:	defffc04 	addi	sp,sp,-16
 5044194:	dfc00315 	stw	ra,12(sp)
 5044198:	df000215 	stw	fp,8(sp)
 504419c:	df000204 	addi	fp,sp,8
 50441a0:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 50441a4:	e0bfff17 	ldw	r2,-4(fp)
 50441a8:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
 50441ac:	e0bffe17 	ldw	r2,-8(fp)
 50441b0:	10000c26 	beq	r2,zero,50441e4 <Touch_UnInit+0x54>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
 50441b4:	e0bffe17 	ldw	r2,-8(fp)
 50441b8:	10801004 	addi	r2,r2,64
 50441bc:	1009883a 	mov	r4,r2
 50441c0:	505d6780 	call	505d678 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
 50441c4:	e0bffe17 	ldw	r2,-8(fp)
 50441c8:	10800117 	ldw	r2,4(r2)
 50441cc:	10800204 	addi	r2,r2,8
 50441d0:	0007883a 	mov	r3,zero
 50441d4:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
 50441d8:	e13ffe17 	ldw	r4,-8(fp)
 50441dc:	504f0ac0 	call	504f0ac <free>
 50441e0:	00000106 	br	50441e8 <Touch_UnInit+0x58>

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
    if (!p)
        return;
 50441e4:	0001883a 	nop
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
    
    // zero varialbe
    free(p);
}
 50441e8:	e037883a 	mov	sp,fp
 50441ec:	dfc00117 	ldw	ra,4(sp)
 50441f0:	df000017 	ldw	fp,0(sp)
 50441f4:	dec00204 	addi	sp,sp,8
 50441f8:	f800283a 	ret

050441fc <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
 50441fc:	defffc04 	addi	sp,sp,-16
 5044200:	dfc00315 	stw	ra,12(sp)
 5044204:	df000215 	stw	fp,8(sp)
 5044208:	df000204 	addi	fp,sp,8
 504420c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 5044210:	e0bfff17 	ldw	r2,-4(fp)
 5044214:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
 5044218:	e13ffe17 	ldw	r4,-8(fp)
 504421c:	50444c80 	call	50444c8 <touch_empty_fifo>
}
 5044220:	0001883a 	nop
 5044224:	e037883a 	mov	sp,fp
 5044228:	dfc00117 	ldw	ra,4(sp)
 504422c:	df000017 	ldw	fp,0(sp)
 5044230:	dec00204 	addi	sp,sp,8
 5044234:	f800283a 	ret

05044238 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
 5044238:	defff804 	addi	sp,sp,-32
 504423c:	dfc00715 	stw	ra,28(sp)
 5044240:	df000615 	stw	fp,24(sp)
 5044244:	dc000515 	stw	r16,20(sp)
 5044248:	df000604 	addi	fp,sp,24
 504424c:	e13ffc15 	stw	r4,-16(fp)
 5044250:	e17ffd15 	stw	r5,-12(fp)
 5044254:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 5044258:	e0bffc17 	ldw	r2,-16(fp)
 504425c:	e0bffa15 	stw	r2,-24(fp)
    if (!p)
 5044260:	e0bffa17 	ldw	r2,-24(fp)
 5044264:	1000021e 	bne	r2,zero,5044270 <Touch_GetXY+0x38>
        return FALSE;    
 5044268:	0005883a 	mov	r2,zero
 504426c:	00004706 	br	504438c <Touch_GetXY+0x154>
    
    if (p->fifo_front == p->fifo_rear){
 5044270:	e0bffa17 	ldw	r2,-24(fp)
 5044274:	10c0040b 	ldhu	r3,16(r2)
 5044278:	e0bffa17 	ldw	r2,-24(fp)
 504427c:	1080048b 	ldhu	r2,18(r2)
 5044280:	18ffffcc 	andi	r3,r3,65535
 5044284:	10bfffcc 	andi	r2,r2,65535
 5044288:	1880021e 	bne	r3,r2,5044294 <Touch_GetXY+0x5c>
        // empty
        return FALSE;
 504428c:	0005883a 	mov	r2,zero
 5044290:	00003e06 	br	504438c <Touch_GetXY+0x154>
    }
    *x = p->fifo_x[p->fifo_rear];
 5044294:	e0bffa17 	ldw	r2,-24(fp)
 5044298:	1080048b 	ldhu	r2,18(r2)
 504429c:	10bfffcc 	andi	r2,r2,65535
 50442a0:	e0fffa17 	ldw	r3,-24(fp)
 50442a4:	10800284 	addi	r2,r2,10
 50442a8:	1085883a 	add	r2,r2,r2
 50442ac:	1885883a 	add	r2,r3,r2
 50442b0:	1080000b 	ldhu	r2,0(r2)
 50442b4:	10ffffcc 	andi	r3,r2,65535
 50442b8:	e0bffd17 	ldw	r2,-12(fp)
 50442bc:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
 50442c0:	e0bffa17 	ldw	r2,-24(fp)
 50442c4:	1080048b 	ldhu	r2,18(r2)
 50442c8:	10bfffcc 	andi	r2,r2,65535
 50442cc:	e0fffa17 	ldw	r3,-24(fp)
 50442d0:	10800504 	addi	r2,r2,20
 50442d4:	1085883a 	add	r2,r2,r2
 50442d8:	1885883a 	add	r2,r3,r2
 50442dc:	1080000b 	ldhu	r2,0(r2)
 50442e0:	10ffffcc 	andi	r3,r2,65535
 50442e4:	e0bffe17 	ldw	r2,-8(fp)
 50442e8:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
 50442ec:	e0bffa17 	ldw	r2,-24(fp)
 50442f0:	1080048b 	ldhu	r2,18(r2)
 50442f4:	10800044 	addi	r2,r2,1
 50442f8:	1007883a 	mov	r3,r2
 50442fc:	e0bffa17 	ldw	r2,-24(fp)
 5044300:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
 5044304:	e0bffa17 	ldw	r2,-24(fp)
 5044308:	1080048b 	ldhu	r2,18(r2)
 504430c:	10bfffcc 	andi	r2,r2,65535
 5044310:	01400284 	movi	r5,10
 5044314:	1009883a 	mov	r4,r2
 5044318:	504b4500 	call	504b450 <__umodsi3>
 504431c:	1007883a 	mov	r3,r2
 5044320:	e0bffa17 	ldw	r2,-24(fp)
 5044324:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
 5044328:	e17ffe17 	ldw	r5,-8(fp)
 504432c:	e13ffd17 	ldw	r4,-12(fp)
 5044330:	5044a7c0 	call	5044a7c <touch_xy_transform>

////////////////////
//modificato da noi, per girare l'orientamento dell'lt24
    alt_u32 temp=*x;
 5044334:	e0bffd17 	ldw	r2,-12(fp)
 5044338:	10800017 	ldw	r2,0(r2)
 504433c:	e0bffb15 	stw	r2,-20(fp)
    *x=*y;
 5044340:	e0bffe17 	ldw	r2,-8(fp)
 5044344:	10c00017 	ldw	r3,0(r2)
 5044348:	e0bffd17 	ldw	r2,-12(fp)
 504434c:	10c00015 	stw	r3,0(r2)
    *y=240 - temp;
 5044350:	00c03c04 	movi	r3,240
 5044354:	e0bffb17 	ldw	r2,-20(fp)
 5044358:	1885c83a 	sub	r2,r3,r2
 504435c:	1007883a 	mov	r3,r2
 5044360:	e0bffe17 	ldw	r2,-8(fp)
 5044364:	10c00015 	stw	r3,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5044368:	d4281c17 	ldw	r16,-24464(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 504436c:	d0a81b17 	ldw	r2,-24468(gp)
////////////////////

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 5044370:	01400f04 	movi	r5,60
 5044374:	1009883a 	mov	r4,r2
 5044378:	504b3ec0 	call	504b3ec <__udivsi3>
 504437c:	8087883a 	add	r3,r16,r2
 5044380:	e0bffa17 	ldw	r2,-24(fp)
 5044384:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
 5044388:	00800044 	movi	r2,1
}
 504438c:	e6ffff04 	addi	sp,fp,-4
 5044390:	dfc00217 	ldw	ra,8(sp)
 5044394:	df000117 	ldw	fp,4(sp)
 5044398:	dc000017 	ldw	r16,0(sp)
 504439c:	dec00304 	addi	sp,sp,12
 50443a0:	f800283a 	ret

050443a4 <touch_isr>:

// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
#else
void touch_isr(void* context, alt_u32 id){
 50443a4:	defff204 	addi	sp,sp,-56
 50443a8:	dfc00d15 	stw	ra,52(sp)
 50443ac:	df000c15 	stw	fp,48(sp)
 50443b0:	df000c04 	addi	fp,sp,48
 50443b4:	e13ffe15 	stw	r4,-8(fp)
 50443b8:	e17fff15 	stw	r5,-4(fp)
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 50443bc:	e0bffe17 	ldw	r2,-8(fp)
 50443c0:	e0bff415 	stw	r2,-48(fp)
 50443c4:	e0bfff17 	ldw	r2,-4(fp)
 50443c8:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50443cc:	0005303a 	rdctl	r2,status
 50443d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50443d4:	e0fffb17 	ldw	r3,-20(fp)
 50443d8:	00bfff84 	movi	r2,-2
 50443dc:	1884703a 	and	r2,r3,r2
 50443e0:	1001703a 	wrctl	status,r2
  
  return context;
 50443e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 50443e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 50443ec:	00c00044 	movi	r3,1
 50443f0:	e0bff617 	ldw	r2,-40(fp)
 50443f4:	1884983a 	sll	r2,r3,r2
 50443f8:	0084303a 	nor	r2,zero,r2
 50443fc:	1007883a 	mov	r3,r2
 5044400:	d0a81717 	ldw	r2,-24484(gp)
 5044404:	1884703a 	and	r2,r3,r2
 5044408:	d0a81715 	stw	r2,-24484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 504440c:	d0a81717 	ldw	r2,-24484(gp)
 5044410:	100170fa 	wrctl	ienable,r2
 5044414:	e0bffc17 	ldw	r2,-16(fp)
 5044418:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 504441c:	e0bffd17 	ldw	r2,-12(fp)
 5044420:	1001703a 	wrctl	status,r2
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
 5044424:	e0bff417 	ldw	r2,-48(fp)
 5044428:	10800117 	ldw	r2,4(r2)
 504442c:	10800304 	addi	r2,r2,12
 5044430:	10800037 	ldwio	r2,0(r2)
 5044434:	e0bff505 	stb	r2,-44(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
 5044438:	0100fa04 	movi	r4,1000
 504443c:	505d81c0 	call	505d81c <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
 5044440:	e0bff417 	ldw	r2,-48(fp)
 5044444:	10800117 	ldw	r2,4(r2)
 5044448:	10800304 	addi	r2,r2,12
 504444c:	0007883a 	mov	r3,zero
 5044450:	10c00035 	stwio	r3,0(r2)
 5044454:	e0bfff17 	ldw	r2,-4(fp)
 5044458:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 504445c:	0005303a 	rdctl	r2,status
 5044460:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5044464:	e0fff817 	ldw	r3,-32(fp)
 5044468:	00bfff84 	movi	r2,-2
 504446c:	1884703a 	and	r2,r3,r2
 5044470:	1001703a 	wrctl	status,r2
  
  return context;
 5044474:	e0bff817 	ldw	r2,-32(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5044478:	e0bff915 	stw	r2,-28(fp)

  alt_irq_active |= (1 << id);
 504447c:	00c00044 	movi	r3,1
 5044480:	e0bff717 	ldw	r2,-36(fp)
 5044484:	1884983a 	sll	r2,r3,r2
 5044488:	1007883a 	mov	r3,r2
 504448c:	d0a81717 	ldw	r2,-24484(gp)
 5044490:	1884b03a 	or	r2,r3,r2
 5044494:	d0a81715 	stw	r2,-24484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5044498:	d0a81717 	ldw	r2,-24484(gp)
 504449c:	100170fa 	wrctl	ienable,r2
 50444a0:	e0bff917 	ldw	r2,-28(fp)
 50444a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50444a8:	e0bffa17 	ldw	r2,-24(fp)
 50444ac:	1001703a 	wrctl	status,r2
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
#else
    alt_irq_enable(id);
#endif

}
 50444b0:	0001883a 	nop
 50444b4:	e037883a 	mov	sp,fp
 50444b8:	dfc00117 	ldw	ra,4(sp)
 50444bc:	df000017 	ldw	fp,0(sp)
 50444c0:	dec00204 	addi	sp,sp,8
 50444c4:	f800283a 	ret

050444c8 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
 50444c8:	defffe04 	addi	sp,sp,-8
 50444cc:	df000115 	stw	fp,4(sp)
 50444d0:	df000104 	addi	fp,sp,4
 50444d4:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
 50444d8:	e0bfff17 	ldw	r2,-4(fp)
 50444dc:	10c0040b 	ldhu	r3,16(r2)
 50444e0:	e0bfff17 	ldw	r2,-4(fp)
 50444e4:	10c0048d 	sth	r3,18(r2)
}
 50444e8:	0001883a 	nop
 50444ec:	e037883a 	mov	sp,fp
 50444f0:	df000017 	ldw	fp,0(sp)
 50444f4:	dec00104 	addi	sp,sp,4
 50444f8:	f800283a 	ret

050444fc <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
 50444fc:	defffd04 	addi	sp,sp,-12
 5044500:	df000215 	stw	fp,8(sp)
 5044504:	df000204 	addi	fp,sp,8
 5044508:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
 504450c:	e0bfff17 	ldw	r2,-4(fp)
 5044510:	10800117 	ldw	r2,4(r2)
 5044514:	10800037 	ldwio	r2,0(r2)
 5044518:	1080004c 	andi	r2,r2,1
 504451c:	1005003a 	cmpeq	r2,r2,zero
 5044520:	10803fcc 	andi	r2,r2,255
 5044524:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
 5044528:	e0bffe17 	ldw	r2,-8(fp)
}
 504452c:	e037883a 	mov	sp,fp
 5044530:	df000017 	ldw	fp,0(sp)
 5044534:	dec00104 	addi	sp,sp,4
 5044538:	f800283a 	ret

0504453c <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
 504453c:	defff904 	addi	sp,sp,-28
 5044540:	dfc00615 	stw	ra,24(sp)
 5044544:	df000515 	stw	fp,20(sp)
 5044548:	df000504 	addi	fp,sp,20
 504454c:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
 5044550:	00bfe084 	movi	r2,-126
 5044554:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 5044558:	00bff484 	movi	r2,-46
 504455c:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 5044560:	e0bfff17 	ldw	r2,-4(fp)
 5044564:	10c00017 	ldw	r3,0(r2)
 5044568:	00800044 	movi	r2,1
 504456c:	d8800215 	stw	r2,8(sp)
 5044570:	d8000115 	stw	zero,4(sp)
 5044574:	d8000015 	stw	zero,0(sp)
 5044578:	e1fffe04 	addi	r7,fp,-8
 504457c:	01800044 	movi	r6,1
 5044580:	000b883a 	mov	r5,zero
 5044584:	1809883a 	mov	r4,r3
 5044588:	505e7940 	call	505e794 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 504458c:	e0bfff17 	ldw	r2,-4(fp)
 5044590:	10c00017 	ldw	r3,0(r2)
 5044594:	00800044 	movi	r2,1
 5044598:	d8800215 	stw	r2,8(sp)
 504459c:	e0bffe84 	addi	r2,fp,-6
 50445a0:	d8800115 	stw	r2,4(sp)
 50445a4:	00800044 	movi	r2,1
 50445a8:	d8800015 	stw	r2,0(sp)
 50445ac:	000f883a 	mov	r7,zero
 50445b0:	000d883a 	mov	r6,zero
 50445b4:	000b883a 	mov	r5,zero
 50445b8:	1809883a 	mov	r4,r3
 50445bc:	505e7940 	call	505e794 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 50445c0:	e0bfff17 	ldw	r2,-4(fp)
 50445c4:	10c00017 	ldw	r3,0(r2)
 50445c8:	00800084 	movi	r2,2
 50445cc:	d8800215 	stw	r2,8(sp)
 50445d0:	e0bffe84 	addi	r2,fp,-6
 50445d4:	d8800115 	stw	r2,4(sp)
 50445d8:	00800044 	movi	r2,1
 50445dc:	d8800015 	stw	r2,0(sp)
 50445e0:	000f883a 	mov	r7,zero
 50445e4:	000d883a 	mov	r6,zero
 50445e8:	000b883a 	mov	r5,zero
 50445ec:	1809883a 	mov	r4,r3
 50445f0:	505e7940 	call	505e794 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 50445f4:	e0bfff17 	ldw	r2,-4(fp)
 50445f8:	10c00017 	ldw	r3,0(r2)
 50445fc:	e13ffe44 	addi	r4,fp,-7
 5044600:	00800044 	movi	r2,1
 5044604:	d8800215 	stw	r2,8(sp)
 5044608:	d8000115 	stw	zero,4(sp)
 504460c:	d8000015 	stw	zero,0(sp)
 5044610:	200f883a 	mov	r7,r4
 5044614:	01800044 	movi	r6,1
 5044618:	000b883a 	mov	r5,zero
 504461c:	1809883a 	mov	r4,r3
 5044620:	505e7940 	call	505e794 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 5044624:	e0bfff17 	ldw	r2,-4(fp)
 5044628:	10c00017 	ldw	r3,0(r2)
 504462c:	00800044 	movi	r2,1
 5044630:	d8800215 	stw	r2,8(sp)
 5044634:	e0bffe84 	addi	r2,fp,-6
 5044638:	d8800115 	stw	r2,4(sp)
 504463c:	00800044 	movi	r2,1
 5044640:	d8800015 	stw	r2,0(sp)
 5044644:	000f883a 	mov	r7,zero
 5044648:	000d883a 	mov	r6,zero
 504464c:	000b883a 	mov	r5,zero
 5044650:	1809883a 	mov	r4,r3
 5044654:	505e7940 	call	505e794 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 5044658:	e0bfff17 	ldw	r2,-4(fp)
 504465c:	10c00017 	ldw	r3,0(r2)
 5044660:	00800084 	movi	r2,2
 5044664:	d8800215 	stw	r2,8(sp)
 5044668:	e0bffe84 	addi	r2,fp,-6
 504466c:	d8800115 	stw	r2,4(sp)
 5044670:	00800044 	movi	r2,1
 5044674:	d8800015 	stw	r2,0(sp)
 5044678:	000f883a 	mov	r7,zero
 504467c:	000d883a 	mov	r6,zero
 5044680:	000b883a 	mov	r5,zero
 5044684:	1809883a 	mov	r4,r3
 5044688:	505e7940 	call	505e794 <alt_avalon_spi_command>
}
 504468c:	0001883a 	nop
 5044690:	e037883a 	mov	sp,fp
 5044694:	dfc00117 	ldw	ra,4(sp)
 5044698:	df000017 	ldw	fp,0(sp)
 504469c:	dec00204 	addi	sp,sp,8
 50446a0:	f800283a 	ret

050446a4 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
 50446a4:	defffd04 	addi	sp,sp,-12
 50446a8:	dfc00215 	stw	ra,8(sp)
 50446ac:	df000115 	stw	fp,4(sp)
 50446b0:	df000104 	addi	fp,sp,4
 50446b4:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
 50446b8:	e13fff17 	ldw	r4,-4(fp)
 50446bc:	504453c0 	call	504453c <touch_enable_penirq>
}
 50446c0:	0001883a 	nop
 50446c4:	e037883a 	mov	sp,fp
 50446c8:	dfc00117 	ldw	ra,4(sp)
 50446cc:	df000017 	ldw	fp,0(sp)
 50446d0:	dec00204 	addi	sp,sp,8
 50446d4:	f800283a 	ret

050446d8 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
 50446d8:	defff604 	addi	sp,sp,-40
 50446dc:	dfc00915 	stw	ra,36(sp)
 50446e0:	df000815 	stw	fp,32(sp)
 50446e4:	df000804 	addi	fp,sp,32
 50446e8:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
 50446ec:	00bfe484 	movi	r2,-110
 50446f0:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 50446f4:	00bff484 	movi	r2,-46
 50446f8:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 50446fc:	e0bfff17 	ldw	r2,-4(fp)
 5044700:	10c00017 	ldw	r3,0(r2)
 5044704:	e13ffe04 	addi	r4,fp,-8
 5044708:	00800044 	movi	r2,1
 504470c:	d8800215 	stw	r2,8(sp)
 5044710:	d8000115 	stw	zero,4(sp)
 5044714:	d8000015 	stw	zero,0(sp)
 5044718:	200f883a 	mov	r7,r4
 504471c:	01800044 	movi	r6,1
 5044720:	000b883a 	mov	r5,zero
 5044724:	1809883a 	mov	r4,r3
 5044728:	505e7940 	call	505e794 <alt_avalon_spi_command>
 504472c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 5044730:	e0bfff17 	ldw	r2,-4(fp)
 5044734:	10c00017 	ldw	r3,0(r2)
 5044738:	00800044 	movi	r2,1
 504473c:	d8800215 	stw	r2,8(sp)
 5044740:	e0bffe84 	addi	r2,fp,-6
 5044744:	d8800115 	stw	r2,4(sp)
 5044748:	00800044 	movi	r2,1
 504474c:	d8800015 	stw	r2,0(sp)
 5044750:	000f883a 	mov	r7,zero
 5044754:	000d883a 	mov	r6,zero
 5044758:	000b883a 	mov	r5,zero
 504475c:	1809883a 	mov	r4,r3
 5044760:	505e7940 	call	505e794 <alt_avalon_spi_command>
 5044764:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 5044768:	e0bffb17 	ldw	r2,-20(fp)
 504476c:	10800060 	cmpeqi	r2,r2,1
 5044770:	10009826 	beq	r2,zero,50449d4 <touch_get_xy+0x2fc>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 5044774:	e0bfff17 	ldw	r2,-4(fp)
 5044778:	10c00017 	ldw	r3,0(r2)
 504477c:	00800084 	movi	r2,2
 5044780:	d8800215 	stw	r2,8(sp)
 5044784:	e0bffec4 	addi	r2,fp,-5
 5044788:	d8800115 	stw	r2,4(sp)
 504478c:	00800044 	movi	r2,1
 5044790:	d8800015 	stw	r2,0(sp)
 5044794:	000f883a 	mov	r7,zero
 5044798:	000d883a 	mov	r6,zero
 504479c:	000b883a 	mov	r5,zero
 50447a0:	1809883a 	mov	r4,r3
 50447a4:	505e7940 	call	505e794 <alt_avalon_spi_command>
 50447a8:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 50447ac:	e0bffb17 	ldw	r2,-20(fp)
 50447b0:	10800060 	cmpeqi	r2,r2,1
 50447b4:	10008926 	beq	r2,zero,50449dc <touch_get_xy+0x304>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
 50447b8:	e0bffe83 	ldbu	r2,-6(fp)
 50447bc:	10803fcc 	andi	r2,r2,255
 50447c0:	1004923a 	slli	r2,r2,8
 50447c4:	1007883a 	mov	r3,r2
 50447c8:	e0bffec3 	ldbu	r2,-5(fp)
 50447cc:	10803fcc 	andi	r2,r2,255
 50447d0:	1884b03a 	or	r2,r3,r2
 50447d4:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 50447d8:	e0bfff17 	ldw	r2,-4(fp)
 50447dc:	10c00017 	ldw	r3,0(r2)
 50447e0:	e13ffe44 	addi	r4,fp,-7
 50447e4:	00800044 	movi	r2,1
 50447e8:	d8800215 	stw	r2,8(sp)
 50447ec:	d8000115 	stw	zero,4(sp)
 50447f0:	d8000015 	stw	zero,0(sp)
 50447f4:	200f883a 	mov	r7,r4
 50447f8:	01800044 	movi	r6,1
 50447fc:	000b883a 	mov	r5,zero
 5044800:	1809883a 	mov	r4,r3
 5044804:	505e7940 	call	505e794 <alt_avalon_spi_command>
 5044808:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 504480c:	e0bfff17 	ldw	r2,-4(fp)
 5044810:	10c00017 	ldw	r3,0(r2)
 5044814:	00800044 	movi	r2,1
 5044818:	d8800215 	stw	r2,8(sp)
 504481c:	e0bffe84 	addi	r2,fp,-6
 5044820:	d8800115 	stw	r2,4(sp)
 5044824:	00800044 	movi	r2,1
 5044828:	d8800015 	stw	r2,0(sp)
 504482c:	000f883a 	mov	r7,zero
 5044830:	000d883a 	mov	r6,zero
 5044834:	000b883a 	mov	r5,zero
 5044838:	1809883a 	mov	r4,r3
 504483c:	505e7940 	call	505e794 <alt_avalon_spi_command>
 5044840:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 5044844:	e0bffb17 	ldw	r2,-20(fp)
 5044848:	10800060 	cmpeqi	r2,r2,1
 504484c:	10006526 	beq	r2,zero,50449e4 <touch_get_xy+0x30c>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 5044850:	e0bfff17 	ldw	r2,-4(fp)
 5044854:	10c00017 	ldw	r3,0(r2)
 5044858:	00800084 	movi	r2,2
 504485c:	d8800215 	stw	r2,8(sp)
 5044860:	e0bffec4 	addi	r2,fp,-5
 5044864:	d8800115 	stw	r2,4(sp)
 5044868:	00800044 	movi	r2,1
 504486c:	d8800015 	stw	r2,0(sp)
 5044870:	000f883a 	mov	r7,zero
 5044874:	000d883a 	mov	r6,zero
 5044878:	000b883a 	mov	r5,zero
 504487c:	1809883a 	mov	r4,r3
 5044880:	505e7940 	call	505e794 <alt_avalon_spi_command>
 5044884:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 5044888:	e0bffb17 	ldw	r2,-20(fp)
 504488c:	10800060 	cmpeqi	r2,r2,1
 5044890:	10005626 	beq	r2,zero,50449ec <touch_get_xy+0x314>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
 5044894:	e0bffe83 	ldbu	r2,-6(fp)
 5044898:	10803fcc 	andi	r2,r2,255
 504489c:	1004923a 	slli	r2,r2,8
 50448a0:	1007883a 	mov	r3,r2
 50448a4:	e0bffec3 	ldbu	r2,-5(fp)
 50448a8:	10803fcc 	andi	r2,r2,255
 50448ac:	1884b03a 	or	r2,r3,r2
 50448b0:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
 50448b4:	e13fff17 	ldw	r4,-4(fp)
 50448b8:	50444fc0 	call	50444fc <touch_is_pen_pressed>
 50448bc:	10004d26 	beq	r2,zero,50449f4 <touch_get_xy+0x31c>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
 50448c0:	e0bffc0b 	ldhu	r2,-16(fp)
 50448c4:	1004d0fa 	srli	r2,r2,3
 50448c8:	1083ffcc 	andi	r2,r2,4095
 50448cc:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 50448d0:	e0bffc8b 	ldhu	r2,-14(fp)
 50448d4:	1004d0fa 	srli	r2,r2,3
 50448d8:	1083ffcc 	andi	r2,r2,4095
 50448dc:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
 50448e0:	e0bfff17 	ldw	r2,-4(fp)
 50448e4:	1080040b 	ldhu	r2,16(r2)
 50448e8:	10bfffcc 	andi	r2,r2,65535
 50448ec:	10800044 	addi	r2,r2,1
 50448f0:	01400284 	movi	r5,10
 50448f4:	1009883a 	mov	r4,r2
 50448f8:	504b3780 	call	504b378 <__modsi3>
 50448fc:	1007883a 	mov	r3,r2
 5044900:	e0bfff17 	ldw	r2,-4(fp)
 5044904:	1080048b 	ldhu	r2,18(r2)
 5044908:	10bfffcc 	andi	r2,r2,65535
 504490c:	18800f1e 	bne	r3,r2,504494c <touch_get_xy+0x274>
        // full, pop an old one
        p->fifo_rear++;
 5044910:	e0bfff17 	ldw	r2,-4(fp)
 5044914:	1080048b 	ldhu	r2,18(r2)
 5044918:	10800044 	addi	r2,r2,1
 504491c:	1007883a 	mov	r3,r2
 5044920:	e0bfff17 	ldw	r2,-4(fp)
 5044924:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
 5044928:	e0bfff17 	ldw	r2,-4(fp)
 504492c:	1080048b 	ldhu	r2,18(r2)
 5044930:	10bfffcc 	andi	r2,r2,65535
 5044934:	01400284 	movi	r5,10
 5044938:	1009883a 	mov	r4,r2
 504493c:	504b4500 	call	504b450 <__umodsi3>
 5044940:	1007883a 	mov	r3,r2
 5044944:	e0bfff17 	ldw	r2,-4(fp)
 5044948:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
 504494c:	e0bfff17 	ldw	r2,-4(fp)
 5044950:	1080040b 	ldhu	r2,16(r2)
 5044954:	10bfffcc 	andi	r2,r2,65535
 5044958:	e0ffff17 	ldw	r3,-4(fp)
 504495c:	10800284 	addi	r2,r2,10
 5044960:	1085883a 	add	r2,r2,r2
 5044964:	1885883a 	add	r2,r3,r2
 5044968:	e0fffd0b 	ldhu	r3,-12(fp)
 504496c:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
 5044970:	e0bfff17 	ldw	r2,-4(fp)
 5044974:	1080040b 	ldhu	r2,16(r2)
 5044978:	10bfffcc 	andi	r2,r2,65535
 504497c:	e0ffff17 	ldw	r3,-4(fp)
 5044980:	10800504 	addi	r2,r2,20
 5044984:	1085883a 	add	r2,r2,r2
 5044988:	1885883a 	add	r2,r3,r2
 504498c:	e0fffd8b 	ldhu	r3,-10(fp)
 5044990:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
 5044994:	e0bfff17 	ldw	r2,-4(fp)
 5044998:	1080040b 	ldhu	r2,16(r2)
 504499c:	10800044 	addi	r2,r2,1
 50449a0:	1007883a 	mov	r3,r2
 50449a4:	e0bfff17 	ldw	r2,-4(fp)
 50449a8:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
 50449ac:	e0bfff17 	ldw	r2,-4(fp)
 50449b0:	1080040b 	ldhu	r2,16(r2)
 50449b4:	10bfffcc 	andi	r2,r2,65535
 50449b8:	01400284 	movi	r5,10
 50449bc:	1009883a 	mov	r4,r2
 50449c0:	504b4500 	call	504b450 <__umodsi3>
 50449c4:	1007883a 	mov	r3,r2
 50449c8:	e0bfff17 	ldw	r2,-4(fp)
 50449cc:	10c0040d 	sth	r3,16(r2)
 50449d0:	00000906 	br	50449f8 <touch_get_xy+0x320>
    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
    if (result != sizeof(high_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 50449d4:	0001883a 	nop
 50449d8:	00000706 	br	50449f8 <touch_get_xy+0x320>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
    if (result != sizeof(low_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 50449dc:	0001883a 	nop
 50449e0:	00000506 	br	50449f8 <touch_get_xy+0x320>
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
    if (result != sizeof(high_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 50449e4:	0001883a 	nop
 50449e8:	00000306 	br	50449f8 <touch_get_xy+0x320>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
    if (result != sizeof(low_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 50449ec:	0001883a 	nop
 50449f0:	00000106 	br	50449f8 <touch_get_xy+0x320>
    }  
    ResponseY = (high_byte << 8) | low_byte;        

    if (!touch_is_pen_pressed(p))
        return; // do not use this data    
 50449f4:	0001883a 	nop
    p->fifo_x[p->fifo_front] = x;
    p->fifo_y[p->fifo_front] = y;    
    p->fifo_front++;
    p->fifo_front %= FIFO_SIZE;   
    
}
 50449f8:	e037883a 	mov	sp,fp
 50449fc:	dfc00117 	ldw	ra,4(sp)
 5044a00:	df000017 	ldw	fp,0(sp)
 5044a04:	dec00204 	addi	sp,sp,8
 5044a08:	f800283a 	ret

05044a0c <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
 5044a0c:	defffc04 	addi	sp,sp,-16
 5044a10:	dfc00315 	stw	ra,12(sp)
 5044a14:	df000215 	stw	fp,8(sp)
 5044a18:	df000204 	addi	fp,sp,8
 5044a1c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 5044a20:	e0bfff17 	ldw	r2,-4(fp)
 5044a24:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
 5044a28:	e13ffe17 	ldw	r4,-8(fp)
 5044a2c:	50444fc0 	call	50444fc <touch_is_pen_pressed>
 5044a30:	10000726 	beq	r2,zero,5044a50 <touch_alarm_callback+0x44>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5044a34:	d0a81c17 	ldw	r2,-24464(gp)
        if (alt_nticks() > p->next_active_time)
 5044a38:	e0fffe17 	ldw	r3,-8(fp)
 5044a3c:	18c01717 	ldw	r3,92(r3)
 5044a40:	1880072e 	bgeu	r3,r2,5044a60 <touch_alarm_callback+0x54>
            touch_get_xy(p);
 5044a44:	e13ffe17 	ldw	r4,-8(fp)
 5044a48:	50446d80 	call	50446d8 <touch_get_xy>
 5044a4c:	00000406 	br	5044a60 <touch_alarm_callback+0x54>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
 5044a50:	e13ffe17 	ldw	r4,-8(fp)
 5044a54:	504453c0 	call	504453c <touch_enable_penirq>
         touch_clear_input(p);
 5044a58:	e13ffe17 	ldw	r4,-8(fp)
 5044a5c:	50446a40 	call	50446a4 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
 5044a60:	e0bffe17 	ldw	r2,-8(fp)
 5044a64:	10801617 	ldw	r2,88(r2)
}
 5044a68:	e037883a 	mov	sp,fp
 5044a6c:	dfc00117 	ldw	ra,4(sp)
 5044a70:	df000017 	ldw	fp,0(sp)
 5044a74:	dec00204 	addi	sp,sp,8
 5044a78:	f800283a 	ret

05044a7c <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
 5044a7c:	defff904 	addi	sp,sp,-28
 5044a80:	dfc00615 	stw	ra,24(sp)
 5044a84:	df000515 	stw	fp,20(sp)
 5044a88:	df000504 	addi	fp,sp,20
 5044a8c:	e13ffe15 	stw	r4,-8(fp)
 5044a90:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
 5044a94:	00803204 	movi	r2,200
 5044a98:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
 5044a9c:	e0bfff17 	ldw	r2,-4(fp)
 5044aa0:	10800017 	ldw	r2,0(r2)
 5044aa4:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
 5044aa8:	e0bffe17 	ldw	r2,-8(fp)
 5044aac:	10800017 	ldw	r2,0(r2)
 5044ab0:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
 5044ab4:	e0bffd17 	ldw	r2,-12(fp)
 5044ab8:	10803c24 	muli	r2,r2,240
 5044abc:	1000010e 	bge	r2,zero,5044ac4 <touch_xy_transform+0x48>
 5044ac0:	1083ffc4 	addi	r2,r2,4095
 5044ac4:	1005d33a 	srai	r2,r2,12
 5044ac8:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
 5044acc:	00c40004 	movi	r3,4096
 5044ad0:	e0bffc17 	ldw	r2,-16(fp)
 5044ad4:	1887c83a 	sub	r3,r3,r2
 5044ad8:	e0bffb17 	ldw	r2,-20(fp)
 5044adc:	1880040e 	bge	r3,r2,5044af0 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
 5044ae0:	00c40004 	movi	r3,4096
 5044ae4:	e0bffc17 	ldw	r2,-16(fp)
 5044ae8:	1885c83a 	sub	r2,r3,r2
 5044aec:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
 5044af0:	e0bffb17 	ldw	r2,-20(fp)
 5044af4:	1103ffe4 	muli	r4,r2,4095
 5044af8:	00c40004 	movi	r3,4096
 5044afc:	e0bffc17 	ldw	r2,-16(fp)
 5044b00:	1885c83a 	sub	r2,r3,r2
 5044b04:	100b883a 	mov	r5,r2
 5044b08:	504b2f40 	call	504b2f4 <__divsi3>
 5044b0c:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
 5044b10:	e0bffb17 	ldw	r2,-20(fp)
 5044b14:	10805024 	muli	r2,r2,320
 5044b18:	1000010e 	bge	r2,zero,5044b20 <touch_xy_transform+0xa4>
 5044b1c:	1083ffc4 	addi	r2,r2,4095
 5044b20:	1005d33a 	srai	r2,r2,12
 5044b24:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
 5044b28:	e0bffe17 	ldw	r2,-8(fp)
 5044b2c:	e0fffd17 	ldw	r3,-12(fp)
 5044b30:	10c00015 	stw	r3,0(r2)
    *y = yy;    
 5044b34:	e0bfff17 	ldw	r2,-4(fp)
 5044b38:	e0fffb17 	ldw	r3,-20(fp)
 5044b3c:	10c00015 	stw	r3,0(r2)
    
}
 5044b40:	0001883a 	nop
 5044b44:	e037883a 	mov	sp,fp
 5044b48:	dfc00117 	ldw	ra,4(sp)
 5044b4c:	df000017 	ldw	fp,0(sp)
 5044b50:	dec00204 	addi	sp,sp,8
 5044b54:	f800283a 	ret

05044b58 <_Z16GUI_show_welcomev>:
extern alt_video_display Display;

#define SWIPE_MINIMUM_POINT 8
#define MAX_DISTANCE_BETWEEN_POINT XXX

void GUI_show_welcome(){
 5044b58:	defffa04 	addi	sp,sp,-24
 5044b5c:	dfc00515 	stw	ra,20(sp)
 5044b60:	df000415 	stw	fp,16(sp)
 5044b64:	df000404 	addi	fp,sp,16
	int x, y;

    LCD_Clear(WHITE_24);
 5044b68:	013fffd4 	movui	r4,65535
 5044b6c:	504039c0 	call	504039c <LCD_Clear>
	x = Display.width / 2 - 60;
 5044b70:	008141b4 	movhi	r2,1286
 5044b74:	10952a04 	addi	r2,r2,21672
 5044b78:	10800117 	ldw	r2,4(r2)
 5044b7c:	1006d7fa 	srli	r3,r2,31
 5044b80:	1885883a 	add	r2,r3,r2
 5044b84:	1005d07a 	srai	r2,r2,1
 5044b88:	10bff104 	addi	r2,r2,-60
 5044b8c:	e0bffe15 	stw	r2,-8(fp)
	y = Display.height / 2 - 40;
 5044b90:	008141b4 	movhi	r2,1286
 5044b94:	10952a04 	addi	r2,r2,21672
 5044b98:	10800217 	ldw	r2,8(r2)
 5044b9c:	1006d7fa 	srli	r3,r2,31
 5044ba0:	1885883a 	add	r2,r3,r2
 5044ba4:	1005d07a 	srai	r2,r2,1
 5044ba8:	10bff604 	addi	r2,r2,-40
 5044bac:	e0bfff15 	stw	r2,-4(fp)

	vid_print_string(x, y,    GREEN_24, cour10_font, &Display, "3D GRAPHIC ENGINE");
 5044bb0:	d0e00017 	ldw	r3,-32768(gp)
 5044bb4:	008141b4 	movhi	r2,1286
 5044bb8:	10832e04 	addi	r2,r2,3256
 5044bbc:	d8800115 	stw	r2,4(sp)
 5044bc0:	008141b4 	movhi	r2,1286
 5044bc4:	10952a04 	addi	r2,r2,21672
 5044bc8:	d8800015 	stw	r2,0(sp)
 5044bcc:	180f883a 	mov	r7,r3
 5044bd0:	01a00014 	movui	r6,32768
 5044bd4:	e17fff17 	ldw	r5,-4(fp)
 5044bd8:	e13ffe17 	ldw	r4,-8(fp)
 5044bdc:	50416200 	call	5041620 <vid_print_string>
	vid_print_string(x, y+22, GREEN_24, cour10_font, &Display, "by");
 5044be0:	e0bfff17 	ldw	r2,-4(fp)
 5044be4:	10c00584 	addi	r3,r2,22
 5044be8:	d1200017 	ldw	r4,-32768(gp)
 5044bec:	008141b4 	movhi	r2,1286
 5044bf0:	10833304 	addi	r2,r2,3276
 5044bf4:	d8800115 	stw	r2,4(sp)
 5044bf8:	008141b4 	movhi	r2,1286
 5044bfc:	10952a04 	addi	r2,r2,21672
 5044c00:	d8800015 	stw	r2,0(sp)
 5044c04:	200f883a 	mov	r7,r4
 5044c08:	01a00014 	movui	r6,32768
 5044c0c:	180b883a 	mov	r5,r3
 5044c10:	e13ffe17 	ldw	r4,-8(fp)
 5044c14:	50416200 	call	5041620 <vid_print_string>
    vid_print_string(x, y+44, GREEN_24, cour10_font, &Display, "Martino, Vannoni, Zocco");
 5044c18:	e0bfff17 	ldw	r2,-4(fp)
 5044c1c:	10c00b04 	addi	r3,r2,44
 5044c20:	d1200017 	ldw	r4,-32768(gp)
 5044c24:	008141b4 	movhi	r2,1286
 5044c28:	10833404 	addi	r2,r2,3280
 5044c2c:	d8800115 	stw	r2,4(sp)
 5044c30:	008141b4 	movhi	r2,1286
 5044c34:	10952a04 	addi	r2,r2,21672
 5044c38:	d8800015 	stw	r2,0(sp)
 5044c3c:	200f883a 	mov	r7,r4
 5044c40:	01a00014 	movui	r6,32768
 5044c44:	180b883a 	mov	r5,r3
 5044c48:	e13ffe17 	ldw	r4,-8(fp)
 5044c4c:	50416200 	call	5041620 <vid_print_string>
}
 5044c50:	0001883a 	nop
 5044c54:	e037883a 	mov	sp,fp
 5044c58:	dfc00117 	ldw	ra,4(sp)
 5044c5c:	df000017 	ldw	fp,0(sp)
 5044c60:	dec00204 	addi	sp,sp,8
 5044c64:	f800283a 	ret

05044c68 <_Z13GUI_desk_initP4RECTS0_S0_>:

void GUI_desk_init( RECT *rect_xy_ctrl, RECT *rect_z_ctrl, RECT *rect_cmd_ctrl){
 5044c68:	defff804 	addi	sp,sp,-32
 5044c6c:	dfc00715 	stw	ra,28(sp)
 5044c70:	df000615 	stw	fp,24(sp)
 5044c74:	df000604 	addi	fp,sp,24
 5044c78:	e13ffd15 	stw	r4,-12(fp)
 5044c7c:	e17ffe15 	stw	r5,-8(fp)
 5044c80:	e1bfff15 	stw	r6,-4(fp)

    //box per controllo z
    rect_z_ctrl->left = 0;
 5044c84:	e0bffe17 	ldw	r2,-8(fp)
 5044c88:	10000015 	stw	zero,0(r2)
	rect_z_ctrl->top = 40;
 5044c8c:	e0bffe17 	ldw	r2,-8(fp)
 5044c90:	00c00a04 	movi	r3,40
 5044c94:	10c00215 	stw	r3,8(r2)
	rect_z_ctrl->right = 80;
 5044c98:	e0bffe17 	ldw	r2,-8(fp)
 5044c9c:	00c01404 	movi	r3,80
 5044ca0:	10c00115 	stw	r3,4(r2)
	rect_z_ctrl->bottom = 240;
 5044ca4:	e0bffe17 	ldw	r2,-8(fp)
 5044ca8:	00c03c04 	movi	r3,240
 5044cac:	10c00315 	stw	r3,12(r2)
    //box per controllo xy
    rect_xy_ctrl->left = 81; //80 + 1 per evitare la sovrapposizione dei bordi dei rettangoli
 5044cb0:	e0bffd17 	ldw	r2,-12(fp)
 5044cb4:	00c01444 	movi	r3,81
 5044cb8:	10c00015 	stw	r3,0(r2)
	rect_xy_ctrl->top = 40; 
 5044cbc:	e0bffd17 	ldw	r2,-12(fp)
 5044cc0:	00c00a04 	movi	r3,40
 5044cc4:	10c00215 	stw	r3,8(r2)
	rect_xy_ctrl->right = 320;
 5044cc8:	e0bffd17 	ldw	r2,-12(fp)
 5044ccc:	00c05004 	movi	r3,320
 5044cd0:	10c00115 	stw	r3,4(r2)
	rect_xy_ctrl->bottom = 240;
 5044cd4:	e0bffd17 	ldw	r2,-12(fp)
 5044cd8:	00c03c04 	movi	r3,240
 5044cdc:	10c00315 	stw	r3,12(r2)
    //box per controllo comandi (S,T,R)
    rect_cmd_ctrl->left = 0;
 5044ce0:	e0bfff17 	ldw	r2,-4(fp)
 5044ce4:	10000015 	stw	zero,0(r2)
	rect_cmd_ctrl->top = 0;
 5044ce8:	e0bfff17 	ldw	r2,-4(fp)
 5044cec:	10000215 	stw	zero,8(r2)
	rect_cmd_ctrl->right = 320;
 5044cf0:	e0bfff17 	ldw	r2,-4(fp)
 5044cf4:	00c05004 	movi	r3,320
 5044cf8:	10c00115 	stw	r3,4(r2)
	rect_cmd_ctrl->bottom = 39;//stesso discorso di 80 + 1
 5044cfc:	e0bfff17 	ldw	r2,-4(fp)
 5044d00:	00c009c4 	movi	r3,39
 5044d04:	10c00315 	stw	r3,12(r2)

	vid_draw_box(rect_xy_ctrl->left,rect_xy_ctrl->top,rect_xy_ctrl->right,rect_xy_ctrl->bottom, RED_24, 0, &Display );
 5044d08:	e0bffd17 	ldw	r2,-12(fp)
 5044d0c:	10c00017 	ldw	r3,0(r2)
 5044d10:	e0bffd17 	ldw	r2,-12(fp)
 5044d14:	11000217 	ldw	r4,8(r2)
 5044d18:	e0bffd17 	ldw	r2,-12(fp)
 5044d1c:	11400117 	ldw	r5,4(r2)
 5044d20:	e0bffd17 	ldw	r2,-12(fp)
 5044d24:	11800317 	ldw	r6,12(r2)
 5044d28:	008141b4 	movhi	r2,1286
 5044d2c:	10952a04 	addi	r2,r2,21672
 5044d30:	d8800215 	stw	r2,8(sp)
 5044d34:	d8000115 	stw	zero,4(sp)
 5044d38:	00803ff4 	movhi	r2,255
 5044d3c:	d8800015 	stw	r2,0(sp)
 5044d40:	300f883a 	mov	r7,r6
 5044d44:	280d883a 	mov	r6,r5
 5044d48:	200b883a 	mov	r5,r4
 5044d4c:	1809883a 	mov	r4,r3
 5044d50:	50417280 	call	5041728 <vid_draw_box>
    vid_draw_box(rect_z_ctrl->left,rect_z_ctrl->top,rect_z_ctrl->right,rect_z_ctrl->bottom, GREEN_24, 0, &Display );
 5044d54:	e0bffe17 	ldw	r2,-8(fp)
 5044d58:	10c00017 	ldw	r3,0(r2)
 5044d5c:	e0bffe17 	ldw	r2,-8(fp)
 5044d60:	11000217 	ldw	r4,8(r2)
 5044d64:	e0bffe17 	ldw	r2,-8(fp)
 5044d68:	11400117 	ldw	r5,4(r2)
 5044d6c:	e0bffe17 	ldw	r2,-8(fp)
 5044d70:	11800317 	ldw	r6,12(r2)
 5044d74:	008141b4 	movhi	r2,1286
 5044d78:	10952a04 	addi	r2,r2,21672
 5044d7c:	d8800215 	stw	r2,8(sp)
 5044d80:	d8000115 	stw	zero,4(sp)
 5044d84:	00a00014 	movui	r2,32768
 5044d88:	d8800015 	stw	r2,0(sp)
 5044d8c:	300f883a 	mov	r7,r6
 5044d90:	280d883a 	mov	r6,r5
 5044d94:	200b883a 	mov	r5,r4
 5044d98:	1809883a 	mov	r4,r3
 5044d9c:	50417280 	call	5041728 <vid_draw_box>
    vid_draw_box(rect_cmd_ctrl->left,rect_cmd_ctrl->top,rect_cmd_ctrl->right,rect_cmd_ctrl->bottom, BLUE_24, 0, &Display );
 5044da0:	e0bfff17 	ldw	r2,-4(fp)
 5044da4:	10c00017 	ldw	r3,0(r2)
 5044da8:	e0bfff17 	ldw	r2,-4(fp)
 5044dac:	11000217 	ldw	r4,8(r2)
 5044db0:	e0bfff17 	ldw	r2,-4(fp)
 5044db4:	11400117 	ldw	r5,4(r2)
 5044db8:	e0bfff17 	ldw	r2,-4(fp)
 5044dbc:	11800317 	ldw	r6,12(r2)
 5044dc0:	008141b4 	movhi	r2,1286
 5044dc4:	10952a04 	addi	r2,r2,21672
 5044dc8:	d8800215 	stw	r2,8(sp)
 5044dcc:	d8000115 	stw	zero,4(sp)
 5044dd0:	00803fc4 	movi	r2,255
 5044dd4:	d8800015 	stw	r2,0(sp)
 5044dd8:	300f883a 	mov	r7,r6
 5044ddc:	280d883a 	mov	r6,r5
 5044de0:	200b883a 	mov	r5,r4
 5044de4:	1809883a 	mov	r4,r3
 5044de8:	50417280 	call	5041728 <vid_draw_box>
	vid_print_string( rect_cmd_ctrl->right/2 , rect_cmd_ctrl->bottom/2 , GREEN_24, cour10_font, &Display, "PRESS TO INIT");
 5044dec:	e0bfff17 	ldw	r2,-4(fp)
 5044df0:	10800117 	ldw	r2,4(r2)
 5044df4:	1006d7fa 	srli	r3,r2,31
 5044df8:	1885883a 	add	r2,r3,r2
 5044dfc:	1005d07a 	srai	r2,r2,1
 5044e00:	1009883a 	mov	r4,r2
 5044e04:	e0bfff17 	ldw	r2,-4(fp)
 5044e08:	10800317 	ldw	r2,12(r2)
 5044e0c:	1006d7fa 	srli	r3,r2,31
 5044e10:	1885883a 	add	r2,r3,r2
 5044e14:	1005d07a 	srai	r2,r2,1
 5044e18:	100b883a 	mov	r5,r2
 5044e1c:	d0e00017 	ldw	r3,-32768(gp)
 5044e20:	008141b4 	movhi	r2,1286
 5044e24:	10833a04 	addi	r2,r2,3304
 5044e28:	d8800115 	stw	r2,4(sp)
 5044e2c:	008141b4 	movhi	r2,1286
 5044e30:	10952a04 	addi	r2,r2,21672
 5044e34:	d8800015 	stw	r2,0(sp)
 5044e38:	180f883a 	mov	r7,r3
 5044e3c:	01a00014 	movui	r6,32768
 5044e40:	50416200 	call	5041620 <vid_print_string>
}
 5044e44:	0001883a 	nop
 5044e48:	e037883a 	mov	sp,fp
 5044e4c:	dfc00117 	ldw	ra,4(sp)
 5044e50:	df000017 	ldw	fp,0(sp)
 5044e54:	dec00204 	addi	sp,sp,8
 5044e58:	f800283a 	ret

05044e5c <_Z16is_point_in_rectP5POINTP4RECT>:

bool is_point_in_rect(POINT *pt, RECT *rc){ //valuta in quale box è avvenuto il tocco
 5044e5c:	defffc04 	addi	sp,sp,-16
 5044e60:	df000315 	stw	fp,12(sp)
 5044e64:	df000304 	addi	fp,sp,12
 5044e68:	e13ffe15 	stw	r4,-8(fp)
 5044e6c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 5044e70:	e03ffd05 	stb	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 5044e74:	e0bffe17 	ldw	r2,-8(fp)
 5044e78:	10c00017 	ldw	r3,0(r2)
 5044e7c:	e0bfff17 	ldw	r2,-4(fp)
 5044e80:	10800017 	ldw	r2,0(r2)
 5044e84:	18801116 	blt	r3,r2,5044ecc <_Z16is_point_in_rectP5POINTP4RECT+0x70>
 5044e88:	e0bffe17 	ldw	r2,-8(fp)
 5044e8c:	10800017 	ldw	r2,0(r2)
 5044e90:	e0ffff17 	ldw	r3,-4(fp)
 5044e94:	18c00117 	ldw	r3,4(r3)
 5044e98:	18800c16 	blt	r3,r2,5044ecc <_Z16is_point_in_rectP5POINTP4RECT+0x70>
 5044e9c:	e0bffe17 	ldw	r2,-8(fp)
 5044ea0:	10c00117 	ldw	r3,4(r2)
 5044ea4:	e0bfff17 	ldw	r2,-4(fp)
 5044ea8:	10800217 	ldw	r2,8(r2)
 5044eac:	18800716 	blt	r3,r2,5044ecc <_Z16is_point_in_rectP5POINTP4RECT+0x70>
 5044eb0:	e0bffe17 	ldw	r2,-8(fp)
 5044eb4:	10800117 	ldw	r2,4(r2)
 5044eb8:	e0ffff17 	ldw	r3,-4(fp)
 5044ebc:	18c00317 	ldw	r3,12(r3)
 5044ec0:	18800216 	blt	r3,r2,5044ecc <_Z16is_point_in_rectP5POINTP4RECT+0x70>
        bYes = TRUE;
 5044ec4:	00800044 	movi	r2,1
 5044ec8:	e0bffd05 	stb	r2,-12(fp)
    
    return bYes;
 5044ecc:	e0bffd03 	ldbu	r2,-12(fp)
}
 5044ed0:	e037883a 	mov	sp,fp
 5044ed4:	df000017 	ldw	fp,0(sp)
 5044ed8:	dec00104 	addi	sp,sp,4
 5044edc:	f800283a 	ret

05044ee0 <_Z14evaluate_swipePvP5SWIPE>:

bool evaluate_swipe(TOUCH_HANDLE pHandle, SWIPE *touch_swipe){
 5044ee0:	deffe804 	addi	sp,sp,-96
 5044ee4:	dfc01715 	stw	ra,92(sp)
 5044ee8:	df001615 	stw	fp,88(sp)
 5044eec:	df001604 	addi	fp,sp,88
 5044ef0:	e13ffe15 	stw	r4,-8(fp)
 5044ef4:	e17fff15 	stw	r5,-4(fp)
	bool swipe_ok = false;
 5044ef8:	e03feb05 	stb	zero,-84(fp)
	// if (p->fifo_front - p->fifo_rear < SWIPE_MINIMUM_POINT){ 
    //     // non abbastanza punti per calcolare lo swipe
    // 	return FALSE;
    // }

	for( int i=0; i<SWIPE_MINIMUM_POINT; i++ ){
 5044efc:	e03fea15 	stw	zero,-88(fp)
 5044f00:	e0bfea17 	ldw	r2,-88(fp)
 5044f04:	10800208 	cmpgei	r2,r2,8
 5044f08:	10003a1e 	bne	r2,zero,5044ff4 <_Z14evaluate_swipePvP5SWIPE+0x114>
		if(Touch_GetXY(pHandle, &x, &y)){
 5044f0c:	e0fffd04 	addi	r3,fp,-12
 5044f10:	e0bffc04 	addi	r2,fp,-16
 5044f14:	180d883a 	mov	r6,r3
 5044f18:	100b883a 	mov	r5,r2
 5044f1c:	e13ffe17 	ldw	r4,-8(fp)
 5044f20:	50442380 	call	5044238 <Touch_GetXY>
 5044f24:	1004c03a 	cmpne	r2,r2,zero
 5044f28:	10803fcc 	andi	r2,r2,255
 5044f2c:	10002a26 	beq	r2,zero,5044fd8 <_Z14evaluate_swipePvP5SWIPE+0xf8>
		my_fifo[i*2]=x;
 5044f30:	e0bfea17 	ldw	r2,-88(fp)
 5044f34:	1085883a 	add	r2,r2,r2
 5044f38:	e0fffc17 	ldw	r3,-16(fp)
 5044f3c:	1085883a 	add	r2,r2,r2
 5044f40:	1085883a 	add	r2,r2,r2
 5044f44:	e13fea04 	addi	r4,fp,-88
 5044f48:	2085883a 	add	r2,r4,r2
 5044f4c:	10800204 	addi	r2,r2,8
 5044f50:	10c00015 	stw	r3,0(r2)
		my_fifo[i*2+1]=y;
 5044f54:	e0bfea17 	ldw	r2,-88(fp)
 5044f58:	1085883a 	add	r2,r2,r2
 5044f5c:	10800044 	addi	r2,r2,1
 5044f60:	e0fffd17 	ldw	r3,-12(fp)
 5044f64:	1085883a 	add	r2,r2,r2
 5044f68:	1085883a 	add	r2,r2,r2
 5044f6c:	e13fea04 	addi	r4,fp,-88
 5044f70:	2085883a 	add	r2,r4,r2
 5044f74:	10800204 	addi	r2,r2,8
 5044f78:	10c00015 	stw	r3,0(r2)
		printf("x,y: %d,  %d\n", my_fifo[i*2] , my_fifo[i*2+1]);
 5044f7c:	e0bfea17 	ldw	r2,-88(fp)
 5044f80:	1085883a 	add	r2,r2,r2
 5044f84:	1085883a 	add	r2,r2,r2
 5044f88:	1085883a 	add	r2,r2,r2
 5044f8c:	e0ffea04 	addi	r3,fp,-88
 5044f90:	1885883a 	add	r2,r3,r2
 5044f94:	10800204 	addi	r2,r2,8
 5044f98:	10c00017 	ldw	r3,0(r2)
 5044f9c:	e0bfea17 	ldw	r2,-88(fp)
 5044fa0:	1085883a 	add	r2,r2,r2
 5044fa4:	10800044 	addi	r2,r2,1
 5044fa8:	1085883a 	add	r2,r2,r2
 5044fac:	1085883a 	add	r2,r2,r2
 5044fb0:	e13fea04 	addi	r4,fp,-88
 5044fb4:	2085883a 	add	r2,r4,r2
 5044fb8:	10800204 	addi	r2,r2,8
 5044fbc:	10800017 	ldw	r2,0(r2)
 5044fc0:	100d883a 	mov	r6,r2
 5044fc4:	180b883a 	mov	r5,r3
 5044fc8:	010141b4 	movhi	r4,1286
 5044fcc:	21033e04 	addi	r4,r4,3320
 5044fd0:	504fb6c0 	call	504fb6c <printf>
 5044fd4:	00000306 	br	5044fe4 <_Z14evaluate_swipePvP5SWIPE+0x104>
		}
		else
			printf("empty\n");
 5044fd8:	010141b4 	movhi	r4,1286
 5044fdc:	21034204 	addi	r4,r4,3336
 5044fe0:	504fc680 	call	504fc68 <puts>
	// if (p->fifo_front - p->fifo_rear < SWIPE_MINIMUM_POINT){ 
    //     // non abbastanza punti per calcolare lo swipe
    // 	return FALSE;
    // }

	for( int i=0; i<SWIPE_MINIMUM_POINT; i++ ){
 5044fe4:	e0bfea17 	ldw	r2,-88(fp)
 5044fe8:	10800044 	addi	r2,r2,1
 5044fec:	e0bfea15 	stw	r2,-88(fp)
 5044ff0:	003fc306 	br	5044f00 <_gp+0xfffd9ad8>
		printf("x,y: %d,  %d\n", my_fifo[i*2] , my_fifo[i*2+1]);
		}
		else
			printf("empty\n");
	}
	swipe_ok = true;
 5044ff4:	00800044 	movi	r2,1
 5044ff8:	e0bfeb05 	stb	r2,-84(fp)

	return swipe_ok;
 5044ffc:	e0bfeb03 	ldbu	r2,-84(fp)
}
 5045000:	e037883a 	mov	sp,fp
 5045004:	dfc00117 	ldw	ra,4(sp)
 5045008:	df000017 	ldw	fp,0(sp)
 504500c:	dec00204 	addi	sp,sp,8
 5045010:	f800283a 	ret

05045014 <_Z18init_accelerometerv>:

alt_up_accelerometer_spi_dev * accelerometer_dev;

extern Cube_3D Cube;

void init_accelerometer(){
 5045014:	defffe04 	addi	sp,sp,-8
 5045018:	dfc00115 	stw	ra,4(sp)
 504501c:	df000015 	stw	fp,0(sp)
 5045020:	d839883a 	mov	fp,sp
    accelerometer_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi");
 5045024:	010141b4 	movhi	r4,1286
 5045028:	21034404 	addi	r4,r4,3344
 504502c:	505eb980 	call	505eb98 <alt_up_accelerometer_spi_open_dev>
 5045030:	d0a80615 	stw	r2,-24552(gp)
    //#ifdef DEBUG_ACC
    if ( accelerometer_dev == NULL)
 5045034:	d0a80617 	ldw	r2,-24552(gp)
 5045038:	1000041e 	bne	r2,zero,504504c <_Z18init_accelerometerv+0x38>
        printf ("Error: could not open acc device \n");
 504503c:	010141b4 	movhi	r4,1286
 5045040:	21034a04 	addi	r4,r4,3368
 5045044:	504fc680 	call	504fc68 <puts>
    else
        printf ("Opened accelerometer device \n");
//#endif
}
 5045048:	00000306 	br	5045058 <_Z18init_accelerometerv+0x44>
    accelerometer_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi");
    //#ifdef DEBUG_ACC
    if ( accelerometer_dev == NULL)
        printf ("Error: could not open acc device \n");
    else
        printf ("Opened accelerometer device \n");
 504504c:	010141b4 	movhi	r4,1286
 5045050:	21035304 	addi	r4,r4,3404
 5045054:	504fc680 	call	504fc68 <puts>
//#endif
}
 5045058:	0001883a 	nop
 504505c:	e037883a 	mov	sp,fp
 5045060:	dfc00117 	ldw	ra,4(sp)
 5045064:	df000017 	ldw	fp,0(sp)
 5045068:	dec00204 	addi	sp,sp,8
 504506c:	f800283a 	ret

05045070 <_Z24accelerometer_controllerv>:



void accelerometer_controller(){
 5045070:	defffe04 	addi	sp,sp,-8
 5045074:	dfc00115 	stw	ra,4(sp)
 5045078:	df000015 	stw	fp,0(sp)
 504507c:	d839883a 	mov	fp,sp

    static float inc_rx=0;
    static float inc_ry=0;


    slider_data_reg = IORD_ALTERA_AVALON_PIO_DATA(SLIDERS_BASE);
 5045080:	00814034 	movhi	r2,1280
 5045084:	10841c04 	addi	r2,r2,4208
 5045088:	10800037 	ldwio	r2,0(r2)
 504508c:	d0a8070d 	sth	r2,-24548(gp)
    alt_up_accelerometer_spi_read_x_axis(accelerometer_dev, &x_acc);
 5045090:	d0a80617 	ldw	r2,-24552(gp)
 5045094:	d1680804 	addi	r5,gp,-24544
 5045098:	1009883a 	mov	r4,r2
 504509c:	505ece40 	call	505ece4 <alt_up_accelerometer_spi_read_x_axis>
    alt_up_accelerometer_spi_read_y_axis(accelerometer_dev, &y_acc);
 50450a0:	d0a80617 	ldw	r2,-24552(gp)
 50450a4:	d1680904 	addi	r5,gp,-24540
 50450a8:	1009883a 	mov	r4,r2
 50450ac:	505edb00 	call	505edb0 <alt_up_accelerometer_spi_read_y_axis>
    
    //uso key1 per passare dal controllo della rotazione a quello della traslazione tramite accelerometro
    edge_capture_k1 =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & BIT(KEY1);
 50450b0:	00814034 	movhi	r2,1280
 50450b4:	10842304 	addi	r2,r2,4236
 50450b8:	10800037 	ldwio	r2,0(r2)
 50450bc:	1080004c 	andi	r2,r2,1
 50450c0:	d0a80a0d 	sth	r2,-24536(gp)
    if( edge_capture_k1 ) {
 50450c4:	d0a80a0b 	ldhu	r2,-24536(gp)
 50450c8:	10bfffcc 	andi	r2,r2,65535
 50450cc:	10000826 	beq	r2,zero,50450f0 <_Z24accelerometer_controllerv+0x80>
        command_sw=!command_sw;
 50450d0:	d0a00103 	ldbu	r2,-32764(gp)
 50450d4:	1080005c 	xori	r2,r2,1
 50450d8:	d0a00105 	stb	r2,-32764(gp)
        edge_capture_k1 = 0;
 50450dc:	d0280a0d 	sth	zero,-24536(gp)
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, BIT(KEY1));
 50450e0:	00c00044 	movi	r3,1
 50450e4:	00814034 	movhi	r2,1280
 50450e8:	10842304 	addi	r2,r2,4236
 50450ec:	10c00035 	stwio	r3,0(r2)
    }
    //ROTAZIONE
    if(command_sw){
 50450f0:	d0a00103 	ldbu	r2,-32764(gp)
 50450f4:	10803fcc 	andi	r2,r2,255
 50450f8:	10003726 	beq	r2,zero,50451d8 <_Z24accelerometer_controllerv+0x168>
        if( ABS(x_acc) > ACC_TH || ABS(y_acc) > ACC_TH){    // ACC_TH è una soglia per filtrare un po' l'accelerometro e evitare che anche in piano il cubo si muova
 50450fc:	d0a80817 	ldw	r2,-24544(gp)
 5045100:	1000010e 	bge	r2,zero,5045108 <_Z24accelerometer_controllerv+0x98>
 5045104:	0085c83a 	sub	r2,zero,r2
 5045108:	10800148 	cmpgei	r2,r2,5
 504510c:	1000051e 	bne	r2,zero,5045124 <_Z24accelerometer_controllerv+0xb4>
 5045110:	d0a80917 	ldw	r2,-24540(gp)
 5045114:	1000010e 	bge	r2,zero,504511c <_Z24accelerometer_controllerv+0xac>
 5045118:	0085c83a 	sub	r2,zero,r2
 504511c:	10800150 	cmplti	r2,r2,5
 5045120:	1000641e 	bne	r2,zero,50452b4 <_Z24accelerometer_controllerv+0x244>
            inc_rx= (float)y_acc / G_ACC * MAX_INC_R;
 5045124:	d0a80917 	ldw	r2,-24540(gp)
 5045128:	1009883a 	mov	r4,r2
 504512c:	504c7000 	call	504c700 <__floatsisf>
 5045130:	1007883a 	mov	r3,r2
 5045134:	0150dfb4 	movhi	r5,17278
 5045138:	1809883a 	mov	r4,r3
 504513c:	504b9700 	call	504b970 <__divsf3>
 5045140:	1007883a 	mov	r3,r2
 5045144:	1805883a 	mov	r2,r3
 5045148:	014f6074 	movhi	r5,15745
 504514c:	296b7f44 	addi	r5,r5,-20995
 5045150:	1009883a 	mov	r4,r2
 5045154:	504bdb00 	call	504bdb0 <__mulsf3>
 5045158:	1007883a 	mov	r3,r2
 504515c:	1805883a 	mov	r2,r3
 5045160:	d0a80b15 	stw	r2,-24532(gp)
            Cube.update_rotation_relative( inc_rx, X);
 5045164:	d0a80b17 	ldw	r2,-24532(gp)
 5045168:	000d883a 	mov	r6,zero
 504516c:	100b883a 	mov	r5,r2
 5045170:	010141b4 	movhi	r4,1286
 5045174:	21152f04 	addi	r4,r4,21692
 5045178:	50465880 	call	5046588 <_ZN7Cube_3D24update_rotation_relativeEfi>
            inc_ry= (float)x_acc / G_ACC * MAX_INC_R;
 504517c:	d0a80817 	ldw	r2,-24544(gp)
 5045180:	1009883a 	mov	r4,r2
 5045184:	504c7000 	call	504c700 <__floatsisf>
 5045188:	1007883a 	mov	r3,r2
 504518c:	0150dfb4 	movhi	r5,17278
 5045190:	1809883a 	mov	r4,r3
 5045194:	504b9700 	call	504b970 <__divsf3>
 5045198:	1007883a 	mov	r3,r2
 504519c:	1805883a 	mov	r2,r3
 50451a0:	014f6074 	movhi	r5,15745
 50451a4:	296b7f44 	addi	r5,r5,-20995
 50451a8:	1009883a 	mov	r4,r2
 50451ac:	504bdb00 	call	504bdb0 <__mulsf3>
 50451b0:	1007883a 	mov	r3,r2
 50451b4:	1805883a 	mov	r2,r3
 50451b8:	d0a80c15 	stw	r2,-24528(gp)
            Cube.update_rotation_relative( inc_ry, Z);
 50451bc:	d0a80c17 	ldw	r2,-24528(gp)
 50451c0:	01800084 	movi	r6,2
 50451c4:	100b883a 	mov	r5,r2
 50451c8:	010141b4 	movhi	r4,1286
 50451cc:	21152f04 	addi	r4,r4,21692
 50451d0:	50465880 	call	5046588 <_ZN7Cube_3D24update_rotation_relativeEfi>
 50451d4:	00003706 	br	50452b4 <_Z24accelerometer_controllerv+0x244>
        }
    }
    //TRASLAZIONE
    else{
        if( ABS(x_acc) > ACC_TH || ABS(y_acc) > ACC_TH){
 50451d8:	d0a80817 	ldw	r2,-24544(gp)
 50451dc:	1000010e 	bge	r2,zero,50451e4 <_Z24accelerometer_controllerv+0x174>
 50451e0:	0085c83a 	sub	r2,zero,r2
 50451e4:	10800148 	cmpgei	r2,r2,5
 50451e8:	1000051e 	bne	r2,zero,5045200 <_Z24accelerometer_controllerv+0x190>
 50451ec:	d0a80917 	ldw	r2,-24540(gp)
 50451f0:	1000010e 	bge	r2,zero,50451f8 <_Z24accelerometer_controllerv+0x188>
 50451f4:	0085c83a 	sub	r2,zero,r2
 50451f8:	10800150 	cmplti	r2,r2,5
 50451fc:	10002d1e 	bne	r2,zero,50452b4 <_Z24accelerometer_controllerv+0x244>
            inc_tx= (float)-x_acc / G_ACC * MAX_INC_T;
 5045200:	d0a80817 	ldw	r2,-24544(gp)
 5045204:	0085c83a 	sub	r2,zero,r2
 5045208:	1009883a 	mov	r4,r2
 504520c:	504c7000 	call	504c700 <__floatsisf>
 5045210:	1007883a 	mov	r3,r2
 5045214:	0150dfb4 	movhi	r5,17278
 5045218:	1809883a 	mov	r4,r3
 504521c:	504b9700 	call	504b970 <__divsf3>
 5045220:	1007883a 	mov	r3,r2
 5045224:	1805883a 	mov	r2,r3
 5045228:	014f4934 	movhi	r5,15652
 504522c:	2975c284 	addi	r5,r5,-10486
 5045230:	1009883a 	mov	r4,r2
 5045234:	504bdb00 	call	504bdb0 <__mulsf3>
 5045238:	1007883a 	mov	r3,r2
 504523c:	1805883a 	mov	r2,r3
 5045240:	d0a80d15 	stw	r2,-24524(gp)
            Cube.update_translation_relative(inc_tx , X);
 5045244:	d0a80d17 	ldw	r2,-24524(gp)
 5045248:	000d883a 	mov	r6,zero
 504524c:	100b883a 	mov	r5,r2
 5045250:	010141b4 	movhi	r4,1286
 5045254:	21152f04 	addi	r4,r4,21692
 5045258:	50460380 	call	5046038 <_ZN7Cube_3D27update_translation_relativeEfi>
            inc_ty= (float)y_acc / G_ACC * MAX_INC_T;
 504525c:	d0a80917 	ldw	r2,-24540(gp)
 5045260:	1009883a 	mov	r4,r2
 5045264:	504c7000 	call	504c700 <__floatsisf>
 5045268:	1007883a 	mov	r3,r2
 504526c:	0150dfb4 	movhi	r5,17278
 5045270:	1809883a 	mov	r4,r3
 5045274:	504b9700 	call	504b970 <__divsf3>
 5045278:	1007883a 	mov	r3,r2
 504527c:	1805883a 	mov	r2,r3
 5045280:	014f4934 	movhi	r5,15652
 5045284:	2975c284 	addi	r5,r5,-10486
 5045288:	1009883a 	mov	r4,r2
 504528c:	504bdb00 	call	504bdb0 <__mulsf3>
 5045290:	1007883a 	mov	r3,r2
 5045294:	1805883a 	mov	r2,r3
 5045298:	d0a80e15 	stw	r2,-24520(gp)
            Cube.update_translation_relative(inc_ty , Y);
 504529c:	d0a80e17 	ldw	r2,-24520(gp)
 50452a0:	01800044 	movi	r6,1
 50452a4:	100b883a 	mov	r5,r2
 50452a8:	010141b4 	movhi	r4,1286
 50452ac:	21152f04 	addi	r4,r4,21692
 50452b0:	50460380 	call	5046038 <_ZN7Cube_3D27update_translation_relativeEfi>
        } 
    }
    //SCALA
    if(slider_data_reg & BIT(9)){                       //il segno dell'incremento della scala sta su slider9    
 50452b4:	d0a8070b 	ldhu	r2,-24548(gp)
 50452b8:	10bfffcc 	andi	r2,r2,65535
 50452bc:	1080800c 	andi	r2,r2,512
 50452c0:	10001f26 	beq	r2,zero,5045340 <_Z24accelerometer_controllerv+0x2d0>
        if(slider_data_reg & BIT(0)){                   //scala x
 50452c4:	d0a8070b 	ldhu	r2,-24548(gp)
 50452c8:	10bfffcc 	andi	r2,r2,65535
 50452cc:	1080004c 	andi	r2,r2,1
 50452d0:	10000626 	beq	r2,zero,50452ec <_Z24accelerometer_controllerv+0x27c>
            Cube.update_scaling_relative( INC_S , X );
 50452d4:	000d883a 	mov	r6,zero
 50452d8:	014ea0f4 	movhi	r5,14979
 50452dc:	29449bc4 	addi	r5,r5,4719
 50452e0:	010141b4 	movhi	r4,1286
 50452e4:	21152f04 	addi	r4,r4,21692
 50452e8:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(1)){                   //scala y
 50452ec:	d0a8070b 	ldhu	r2,-24548(gp)
 50452f0:	10bfffcc 	andi	r2,r2,65535
 50452f4:	1080008c 	andi	r2,r2,2
 50452f8:	10000626 	beq	r2,zero,5045314 <_Z24accelerometer_controllerv+0x2a4>
            Cube.update_scaling_relative( INC_S , Y );
 50452fc:	01800044 	movi	r6,1
 5045300:	014ea0f4 	movhi	r5,14979
 5045304:	29449bc4 	addi	r5,r5,4719
 5045308:	010141b4 	movhi	r4,1286
 504530c:	21152f04 	addi	r4,r4,21692
 5045310:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(2)){                   //scala z
 5045314:	d0a8070b 	ldhu	r2,-24548(gp)
 5045318:	10bfffcc 	andi	r2,r2,65535
 504531c:	1080010c 	andi	r2,r2,4
 5045320:	10002526 	beq	r2,zero,50453b8 <_Z24accelerometer_controllerv+0x348>
            Cube.update_scaling_relative( INC_S , Z );
 5045324:	01800084 	movi	r6,2
 5045328:	014ea0f4 	movhi	r5,14979
 504532c:	29449bc4 	addi	r5,r5,4719
 5045330:	010141b4 	movhi	r4,1286
 5045334:	21152f04 	addi	r4,r4,21692
 5045338:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
    }
    #ifdef DEBUG_ACC
    printf("%f %f \n", inc_rx, inc_rz );
    #endif

}
 504533c:	00001e06 	br	50453b8 <_Z24accelerometer_controllerv+0x348>
        if(slider_data_reg & BIT(2)){                   //scala z
            Cube.update_scaling_relative( INC_S , Z );
        }
    }
    else {                                              //incremento negativo
        if(slider_data_reg & BIT(0)){ 
 5045340:	d0a8070b 	ldhu	r2,-24548(gp)
 5045344:	10bfffcc 	andi	r2,r2,65535
 5045348:	1080004c 	andi	r2,r2,1
 504534c:	10000626 	beq	r2,zero,5045368 <_Z24accelerometer_controllerv+0x2f8>
            Cube.update_scaling_relative( -INC_S , X );
 5045350:	000d883a 	mov	r6,zero
 5045354:	016ea0f4 	movhi	r5,47747
 5045358:	29449bc4 	addi	r5,r5,4719
 504535c:	010141b4 	movhi	r4,1286
 5045360:	21152f04 	addi	r4,r4,21692
 5045364:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(1)){ 
 5045368:	d0a8070b 	ldhu	r2,-24548(gp)
 504536c:	10bfffcc 	andi	r2,r2,65535
 5045370:	1080008c 	andi	r2,r2,2
 5045374:	10000626 	beq	r2,zero,5045390 <_Z24accelerometer_controllerv+0x320>
            Cube.update_scaling_relative( -INC_S , Y );
 5045378:	01800044 	movi	r6,1
 504537c:	016ea0f4 	movhi	r5,47747
 5045380:	29449bc4 	addi	r5,r5,4719
 5045384:	010141b4 	movhi	r4,1286
 5045388:	21152f04 	addi	r4,r4,21692
 504538c:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(2)){ 
 5045390:	d0a8070b 	ldhu	r2,-24548(gp)
 5045394:	10bfffcc 	andi	r2,r2,65535
 5045398:	1080010c 	andi	r2,r2,4
 504539c:	10000626 	beq	r2,zero,50453b8 <_Z24accelerometer_controllerv+0x348>
            Cube.update_scaling_relative( -INC_S , Z );
 50453a0:	01800084 	movi	r6,2
 50453a4:	016ea0f4 	movhi	r5,47747
 50453a8:	29449bc4 	addi	r5,r5,4719
 50453ac:	010141b4 	movhi	r4,1286
 50453b0:	21152f04 	addi	r4,r4,21692
 50453b4:	50469600 	call	5046960 <_ZN7Cube_3D23update_scaling_relativeEfi>
    }
    #ifdef DEBUG_ACC
    printf("%f %f \n", inc_rx, inc_rz );
    #endif

}
 50453b8:	0001883a 	nop
 50453bc:	e037883a 	mov	sp,fp
 50453c0:	dfc00117 	ldw	ra,4(sp)
 50453c4:	df000017 	ldw	fp,0(sp)
 50453c8:	dec00204 	addi	sp,sp,8
 50453cc:	f800283a 	ret

050453d0 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi>:



void alt_up_pixel_buffer_dma_clear_screen_delayed(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 50453d0:	defff704 	addi	sp,sp,-36
 50453d4:	df000815 	stw	fp,32(sp)
 50453d8:	dd400715 	stw	r21,28(sp)
 50453dc:	dd000615 	stw	r20,24(sp)
 50453e0:	dcc00515 	stw	r19,20(sp)
 50453e4:	dc800415 	stw	r18,16(sp)
 50453e8:	dc400315 	stw	r17,12(sp)
 50453ec:	dc000215 	stw	r16,8(sp)
 50453f0:	df000804 	addi	fp,sp,32
 50453f4:	e13ff815 	stw	r4,-32(fp)
 50453f8:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 50453fc:	e0bff917 	ldw	r2,-28(fp)
 5045400:	10800058 	cmpnei	r2,r2,1
 5045404:	1000031e 	bne	r2,zero,5045414 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 5045408:	e0bff817 	ldw	r2,-32(fp)
 504540c:	14400c17 	ldw	r17,48(r2)
 5045410:	00000206 	br	504541c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 5045414:	e0bff817 	ldw	r2,-32(fp)
 5045418:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 504541c:	e0bff817 	ldw	r2,-32(fp)
 5045420:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 5045424:	e0bff817 	ldw	r2,-32(fp)
 5045428:	10800e17 	ldw	r2,56(r2)
 504542c:	10800098 	cmpnei	r2,r2,2
 5045430:	1000031e 	bne	r2,zero,5045440 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x70>
		limit_x = limit_x << 1;
 5045434:	8405883a 	add	r2,r16,r16
 5045438:	1021883a 	mov	r16,r2
 504543c:	00000306 	br	504544c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x7c>
	} else {
		limit_x = limit_x << 2;
 5045440:	8405883a 	add	r2,r16,r16
 5045444:	1085883a 	add	r2,r2,r2
 5045448:	1021883a 	mov	r16,r2
	}
	limit_y = pixel_buffer->y_resolution;
 504544c:	e0bff817 	ldw	r2,-32(fp)
 5045450:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 5045454:	e0bff817 	ldw	r2,-32(fp)
 5045458:	10800d17 	ldw	r2,52(r2)
 504545c:	10001b1e 	bne	r2,zero,50454cc <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0xfc>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 5045460:	e0bff817 	ldw	r2,-32(fp)
 5045464:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 5045468:	0029883a 	mov	r20,zero
 504546c:	a4802c2e 	bgeu	r20,r18,5045520 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x150>
		{
			for (x = 0; x < limit_x; x = x + 4)
 5045470:	0027883a 	mov	r19,zero
 5045474:	9c00102e 	bgeu	r19,r16,50454b8 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0xe8>
			{
				IOWR_32DIRECT(addr, x, 0);
 5045478:	9c45883a 	add	r2,r19,r17
 504547c:	0007883a 	mov	r3,zero
 5045480:	10c00035 	stwio	r3,0(r2)
				asm("nop");
 5045484:	0001883a 	nop
				asm("nop");
 5045488:	0001883a 	nop
				asm("nop");
 504548c:	0001883a 	nop
				asm("nop");
 5045490:	0001883a 	nop
				asm("nop");
 5045494:	0001883a 	nop
				asm("nop");
 5045498:	0001883a 	nop
				asm("nop");
 504549c:	0001883a 	nop
				asm("nop");
 50454a0:	0001883a 	nop
				asm("nop");
 50454a4:	0001883a 	nop
				asm("nop");
 50454a8:	0001883a 	nop
				asm("nop");
 50454ac:	0001883a 	nop
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 50454b0:	9cc00104 	addi	r19,r19,4
 50454b4:	003fef06 	br	5045474 <_gp+0xfffda04c>
				asm("nop");
				asm("nop");
				asm("nop");

			}
			addr = addr + (1 << offset_y);
 50454b8:	00800044 	movi	r2,1
 50454bc:	1544983a 	sll	r2,r2,r21
 50454c0:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 50454c4:	a5000044 	addi	r20,r20,1
 50454c8:	003fe806 	br	504546c <_gp+0xfffda044>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;
 50454cc:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 50454d0:	0021883a 	mov	r16,zero
 50454d4:	8005883a 	mov	r2,r16
 50454d8:	1480112e 	bgeu	r2,r18,5045520 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x150>
		{
			IOWR_32DIRECT(addr, x, 0);
 50454dc:	8005883a 	mov	r2,r16
 50454e0:	1445883a 	add	r2,r2,r17
 50454e4:	0007883a 	mov	r3,zero
 50454e8:	10c00035 	stwio	r3,0(r2)
			asm("nop");
 50454ec:	0001883a 	nop
			asm("nop");
 50454f0:	0001883a 	nop
			asm("nop");
 50454f4:	0001883a 	nop
			asm("nop");
 50454f8:	0001883a 	nop
			asm("nop");
 50454fc:	0001883a 	nop
			asm("nop");
 5045500:	0001883a 	nop
			asm("nop");
 5045504:	0001883a 	nop
			asm("nop");
 5045508:	0001883a 	nop
			asm("nop");
 504550c:	0001883a 	nop
			asm("nop");
 5045510:	0001883a 	nop
			asm("nop");
 5045514:	0001883a 	nop
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;

		for (x = 0; x < limit_y; x = x + 4)
 5045518:	84000104 	addi	r16,r16,4
 504551c:	003fed06 	br	50454d4 <_gp+0xfffda0ac>
			asm("nop");
			asm("nop");

		}
	}
}
 5045520:	0001883a 	nop
 5045524:	e6fffa04 	addi	sp,fp,-24
 5045528:	df000617 	ldw	fp,24(sp)
 504552c:	dd400517 	ldw	r21,20(sp)
 5045530:	dd000417 	ldw	r20,16(sp)
 5045534:	dcc00317 	ldw	r19,12(sp)
 5045538:	dc800217 	ldw	r18,8(sp)
 504553c:	dc400117 	ldw	r17,4(sp)
 5045540:	dc000017 	ldw	r16,0(sp)
 5045544:	dec00704 	addi	sp,sp,28
 5045548:	f800283a 	ret

0504554c <_Z35helper_plot_pixel_enhanced_clippingjiiiii>:

void helper_plot_pixel_enhanced_clipping(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 504554c:	deffff04 	addi	sp,sp,-4
 5045550:	df000015 	stw	fp,0(sp)
 5045554:	d839883a 	mov	fp,sp
 5045558:	2005883a 	mov	r2,r4
 504555c:	3007883a 	mov	r3,r6
 5045560:	3809883a 	mov	r4,r7
 5045564:	e1800117 	ldw	r6,4(fp)
 5045568:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 504556c:	3800051e 	bne	r7,zero,5045584 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 5045570:	2909383a 	mul	r4,r5,r4
 5045574:	20c7883a 	add	r3,r4,r3
 5045578:	1885883a 	add	r2,r3,r2
 504557c:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 5045580:	00000e06 	br	50455bc <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 5045584:	39c00058 	cmpnei	r7,r7,1
 5045588:	3800061e 	bne	r7,zero,50455a4 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 504558c:	2909383a 	mul	r4,r5,r4
 5045590:	20c7883a 	add	r3,r4,r3
 5045594:	18c7883a 	add	r3,r3,r3
 5045598:	1885883a 	add	r2,r3,r2
 504559c:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 50455a0:	00000606 	br	50455bc <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 50455a4:	2909383a 	mul	r4,r5,r4
 50455a8:	20c7883a 	add	r3,r4,r3
 50455ac:	18c7883a 	add	r3,r3,r3
 50455b0:	18c7883a 	add	r3,r3,r3
 50455b4:	1885883a 	add	r2,r3,r2
 50455b8:	11800035 	stwio	r6,0(r2)
}
 50455bc:	0001883a 	nop
 50455c0:	e037883a 	mov	sp,fp
 50455c4:	df000017 	ldw	fp,0(sp)
 50455c8:	dec00104 	addi	sp,sp,4
 50455cc:	f800283a 	ret

050455d0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>:
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not checks if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries.
 * 
 * Aggiunto il controllo per il bordo, per ora si limita a non disegnare le linee
 */
{
 50455d0:	deffeb04 	addi	sp,sp,-84
 50455d4:	dfc01415 	stw	ra,80(sp)
 50455d8:	df001315 	stw	fp,76(sp)
 50455dc:	ddc01215 	stw	r23,72(sp)
 50455e0:	dd801115 	stw	r22,68(sp)
 50455e4:	dd401015 	stw	r21,64(sp)
 50455e8:	dd000f15 	stw	r20,60(sp)
 50455ec:	dcc00e15 	stw	r19,56(sp)
 50455f0:	dc800d15 	stw	r18,52(sp)
 50455f4:	dc400c15 	stw	r17,48(sp)
 50455f8:	dc000b15 	stw	r16,44(sp)
 50455fc:	df001304 	addi	fp,sp,76
 5045600:	e13fef15 	stw	r4,-68(fp)
 5045604:	e17ff015 	stw	r5,-64(fp)
 5045608:	e1bff115 	stw	r6,-60(fp)
 504560c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 5045610:	e4bff017 	ldw	r18,-64(fp)
	register int y_0 = y0;
 5045614:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 5045618:	e47ff217 	ldw	r17,-56(fp)
	register int y_1 = y1;
 504561c:	e5000217 	ldw	r20,8(fp)

	//overkill per ora, utile se serve fare clipping vero e proprio
	register char x0_valid = ((x_0 >=0) && (x_0<X_RESOLUTION)) ? 1 : 0;
 5045620:	90000616 	blt	r18,zero,504563c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x6c>
 5045624:	d0a80f17 	ldw	r2,-24516(gp)
 5045628:	10800f17 	ldw	r2,60(r2)
 504562c:	9007883a 	mov	r3,r18
 5045630:	1880022e 	bgeu	r3,r2,504563c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x6c>
 5045634:	00800044 	movi	r2,1
 5045638:	00000106 	br	5045640 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x70>
 504563c:	0005883a 	mov	r2,zero
 5045640:	102f883a 	mov	r23,r2
	register char x1_valid = ((x_1 >=0) && (x_1<X_RESOLUTION)) ? 1 : 0;
 5045644:	88000616 	blt	r17,zero,5045660 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x90>
 5045648:	d0a80f17 	ldw	r2,-24516(gp)
 504564c:	10800f17 	ldw	r2,60(r2)
 5045650:	8807883a 	mov	r3,r17
 5045654:	1880022e 	bgeu	r3,r2,5045660 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x90>
 5045658:	00800044 	movi	r2,1
 504565c:	00000106 	br	5045664 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x94>
 5045660:	0005883a 	mov	r2,zero
 5045664:	102d883a 	mov	r22,r2
	register char y0_valid = ((y_0 >=0) && (y_0<Y_RESOLUTION)) ? 1 : 0;
 5045668:	98000616 	blt	r19,zero,5045684 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb4>
 504566c:	d0a80f17 	ldw	r2,-24516(gp)
 5045670:	10801017 	ldw	r2,64(r2)
 5045674:	9807883a 	mov	r3,r19
 5045678:	1880022e 	bgeu	r3,r2,5045684 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb4>
 504567c:	00800044 	movi	r2,1
 5045680:	00000106 	br	5045688 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb8>
 5045684:	0005883a 	mov	r2,zero
 5045688:	102b883a 	mov	r21,r2
	register char y1_valid = ((y_1 >=0) && (y_1<Y_RESOLUTION)) ? 1 : 0;
 504568c:	a0000616 	blt	r20,zero,50456a8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xd8>
 5045690:	d0a80f17 	ldw	r2,-24516(gp)
 5045694:	10801017 	ldw	r2,64(r2)
 5045698:	a007883a 	mov	r3,r20
 504569c:	1880022e 	bgeu	r3,r2,50456a8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xd8>
 50456a0:	00800044 	movi	r2,1
 50456a4:	00000106 	br	50456ac <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xdc>
 50456a8:	0005883a 	mov	r2,zero
 50456ac:	1021883a 	mov	r16,r2
	register char p0_valid = x0_valid && y0_valid;
 50456b0:	b8803fcc 	andi	r2,r23,255
 50456b4:	1080201c 	xori	r2,r2,128
 50456b8:	10bfe004 	addi	r2,r2,-128
 50456bc:	10000626 	beq	r2,zero,50456d8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x108>
 50456c0:	a8803fcc 	andi	r2,r21,255
 50456c4:	1080201c 	xori	r2,r2,128
 50456c8:	10bfe004 	addi	r2,r2,-128
 50456cc:	10000226 	beq	r2,zero,50456d8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x108>
 50456d0:	00800044 	movi	r2,1
 50456d4:	00000106 	br	50456dc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x10c>
 50456d8:	0005883a 	mov	r2,zero
 50456dc:	102b883a 	mov	r21,r2
	register char p1_valid = x1_valid && y1_valid;
 50456e0:	b0803fcc 	andi	r2,r22,255
 50456e4:	1080201c 	xori	r2,r2,128
 50456e8:	10bfe004 	addi	r2,r2,-128
 50456ec:	10000626 	beq	r2,zero,5045708 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x138>
 50456f0:	80803fcc 	andi	r2,r16,255
 50456f4:	1080201c 	xori	r2,r2,128
 50456f8:	10bfe004 	addi	r2,r2,-128
 50456fc:	10000226 	beq	r2,zero,5045708 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x138>
 5045700:	00800044 	movi	r2,1
 5045704:	00000106 	br	504570c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x13c>
 5045708:	0005883a 	mov	r2,zero
 504570c:	1021883a 	mov	r16,r2
	register char all_valid = p0_valid && p1_valid;
 5045710:	a8803fcc 	andi	r2,r21,255
 5045714:	1080201c 	xori	r2,r2,128
 5045718:	10bfe004 	addi	r2,r2,-128
 504571c:	10000626 	beq	r2,zero,5045738 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x168>
 5045720:	80803fcc 	andi	r2,r16,255
 5045724:	1080201c 	xori	r2,r2,128
 5045728:	10bfe004 	addi	r2,r2,-128
 504572c:	10000226 	beq	r2,zero,5045738 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x168>
 5045730:	00800044 	movi	r2,1
 5045734:	00000106 	br	504573c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x16c>
 5045738:	0005883a 	mov	r2,zero
 504573c:	1021883a 	mov	r16,r2

	//
	if(all_valid){
 5045740:	80803fcc 	andi	r2,r16,255
 5045744:	1080201c 	xori	r2,r2,128
 5045748:	10bfe004 	addi	r2,r2,-128
 504574c:	10007326 	beq	r2,zero,504591c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
		register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 5045750:	a4c5c83a 	sub	r2,r20,r19
 5045754:	1000010e 	bge	r2,zero,504575c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x18c>
 5045758:	0085c83a 	sub	r2,zero,r2
 504575c:	1007883a 	mov	r3,r2
 5045760:	8c85c83a 	sub	r2,r17,r18
 5045764:	1000010e 	bge	r2,zero,504576c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x19c>
 5045768:	0085c83a 	sub	r2,zero,r2
 504576c:	10c0020e 	bge	r2,r3,5045778 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1a8>
 5045770:	00800044 	movi	r2,1
 5045774:	00000106 	br	504577c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1ac>
 5045778:	0005883a 	mov	r2,zero
 504577c:	e0bff305 	stb	r2,-52(fp)
		register int deltax, deltay, error, ystep, x, y;
		register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 5045780:	e0bfef17 	ldw	r2,-68(fp)
 5045784:	10800e17 	ldw	r2,56(r2)
									(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 5045788:	10800060 	cmpeqi	r2,r2,1
 504578c:	1000081e 	bne	r2,zero,50457b0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e0>
 5045790:	e0bfef17 	ldw	r2,-68(fp)
 5045794:	10800e17 	ldw	r2,56(r2)
 5045798:	10800098 	cmpnei	r2,r2,2
 504579c:	1000021e 	bne	r2,zero,50457a8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1d8>
 50457a0:	00800044 	movi	r2,1
 50457a4:	00000306 	br	50457b4 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e4>
 50457a8:	00800084 	movi	r2,2
 50457ac:	00000106 	br	50457b4 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e4>
 50457b0:	0005883a 	mov	r2,zero
 50457b4:	e0bff415 	stw	r2,-48(fp)
		register int line_color = color;
 50457b8:	e0800317 	ldw	r2,12(fp)
 50457bc:	e0bff515 	stw	r2,-44(fp)
		register unsigned int buffer_start;
		register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 50457c0:	e0bfef17 	ldw	r2,-68(fp)
 50457c4:	10800d17 	ldw	r2,52(r2)
 50457c8:	1000071e 	bne	r2,zero,50457e8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x218>
 50457cc:	e0bfef17 	ldw	r2,-68(fp)
 50457d0:	10801317 	ldw	r2,76(r2)
 50457d4:	e0fff417 	ldw	r3,-48(fp)
 50457d8:	10c5c83a 	sub	r2,r2,r3
 50457dc:	00c00044 	movi	r3,1
 50457e0:	1884983a 	sll	r2,r3,r2
 50457e4:	00000206 	br	50457f0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x220>
 50457e8:	e0bfef17 	ldw	r2,-68(fp)
 50457ec:	10800f17 	ldw	r2,60(r2)
 50457f0:	e0bff615 	stw	r2,-40(fp)

		if (backbuffer == 1)
 50457f4:	e0800417 	ldw	r2,16(fp)
 50457f8:	10800058 	cmpnei	r2,r2,1
 50457fc:	1000031e 	bne	r2,zero,504580c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x23c>
			buffer_start = pixel_buffer->back_buffer_start_address;
 5045800:	e0bfef17 	ldw	r2,-68(fp)
 5045804:	15c00c17 	ldw	r23,48(r2)
 5045808:	00000206 	br	5045814 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x244>
		else
			buffer_start = pixel_buffer->buffer_start_address;
 504580c:	e0bfef17 	ldw	r2,-68(fp)
 5045810:	15c00b17 	ldw	r23,44(r2)

		/* Preprocessing inputs */
		if (steep > 0) {
 5045814:	e0bff307 	ldb	r2,-52(fp)
 5045818:	0080060e 	bge	zero,r2,5045834 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x264>
			// Swap x_0 and y_0
			error = x_0;
 504581c:	9021883a 	mov	r16,r18
			x_0 = y_0;
 5045820:	9825883a 	mov	r18,r19
			y_0 = error;
 5045824:	8027883a 	mov	r19,r16
			// Swap x_1 and y_1
			error = x_1;
 5045828:	8821883a 	mov	r16,r17
			x_1 = y_1;
 504582c:	a023883a 	mov	r17,r20
			y_1 = error;
 5045830:	8029883a 	mov	r20,r16
		}
		if (x_0 > x_1) {
 5045834:	8c80060e 	bge	r17,r18,5045850 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x280>
			// Swap x_0 and x_1
			error = x_0;
 5045838:	9021883a 	mov	r16,r18
			x_0 = x_1;
 504583c:	8825883a 	mov	r18,r17
			x_1 = error;
 5045840:	8023883a 	mov	r17,r16
			// Swap y_0 and y_1
			error = y_0;
 5045844:	9821883a 	mov	r16,r19
			y_0 = y_1;
 5045848:	a027883a 	mov	r19,r20
			y_1 = error;
 504584c:	8029883a 	mov	r20,r16
		}

		/* Setup local variables */
		deltax = x_1 - x_0;
 5045850:	8cabc83a 	sub	r21,r17,r18
		deltay = ABS(y_1 - y_0);
 5045854:	a4c5c83a 	sub	r2,r20,r19
 5045858:	1000010e 	bge	r2,zero,5045860 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x290>
 504585c:	0085c83a 	sub	r2,zero,r2
 5045860:	e0bff715 	stw	r2,-36(fp)
		error = -(deltax / 2); 
 5045864:	a804d7fa 	srli	r2,r21,31
 5045868:	1545883a 	add	r2,r2,r21
 504586c:	1005d07a 	srai	r2,r2,1
 5045870:	00a1c83a 	sub	r16,zero,r2
		y = y_0;
 5045874:	982d883a 	mov	r22,r19
		if (y_0 < y_1)
 5045878:	9d00020e 	bge	r19,r20,5045884 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x2b4>
			ystep = 1;
 504587c:	04c00044 	movi	r19,1
 5045880:	00000106 	br	5045888 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x2b8>
		else
			ystep = -1;
 5045884:	04ffffc4 	movi	r19,-1

		/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
		 * compile well on low optimization levels. */
		if (steep == 1)
 5045888:	e0bff307 	ldb	r2,-52(fp)
 504588c:	10800058 	cmpnei	r2,r2,1
 5045890:	1000111e 	bne	r2,zero,50458d8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x308>
		{
			for (x=x_0; x <= x_1; x++) {
 5045894:	8c802116 	blt	r17,r18,504591c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
				helper_plot_pixel_enhanced_clipping(buffer_start, line_size, y, x, line_color, color_mode);
 5045898:	e0bff417 	ldw	r2,-48(fp)
 504589c:	d8800115 	stw	r2,4(sp)
 50458a0:	e0bff517 	ldw	r2,-44(fp)
 50458a4:	d8800015 	stw	r2,0(sp)
 50458a8:	900f883a 	mov	r7,r18
 50458ac:	b00d883a 	mov	r6,r22
 50458b0:	e17ff617 	ldw	r5,-40(fp)
 50458b4:	b809883a 	mov	r4,r23
 50458b8:	504554c0 	call	504554c <_Z35helper_plot_pixel_enhanced_clippingjiiiii>
				error = error + deltay;
 50458bc:	e0bff717 	ldw	r2,-36(fp)
 50458c0:	80a1883a 	add	r16,r16,r2
				if (error > 0) {
 50458c4:	0400020e 	bge	zero,r16,50458d0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x300>
					y = y + ystep;
 50458c8:	b4ed883a 	add	r22,r22,r19
					error = error - deltax;
 50458cc:	8561c83a 	sub	r16,r16,r21

		/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
		 * compile well on low optimization levels. */
		if (steep == 1)
		{
			for (x=x_0; x <= x_1; x++) {
 50458d0:	94800044 	addi	r18,r18,1
 50458d4:	003fef06 	br	5045894 <_gp+0xfffda46c>
				}
			}
		}
		else
		{
			for (x=x_0; x <= x_1; x++) {
 50458d8:	8c801016 	blt	r17,r18,504591c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
				helper_plot_pixel_enhanced_clipping(buffer_start, line_size, x, y, line_color, color_mode);
 50458dc:	e0bff417 	ldw	r2,-48(fp)
 50458e0:	d8800115 	stw	r2,4(sp)
 50458e4:	e0bff517 	ldw	r2,-44(fp)
 50458e8:	d8800015 	stw	r2,0(sp)
 50458ec:	b00f883a 	mov	r7,r22
 50458f0:	900d883a 	mov	r6,r18
 50458f4:	e17ff617 	ldw	r5,-40(fp)
 50458f8:	b809883a 	mov	r4,r23
 50458fc:	504554c0 	call	504554c <_Z35helper_plot_pixel_enhanced_clippingjiiiii>
				error = error + deltay;
 5045900:	e0bff717 	ldw	r2,-36(fp)
 5045904:	80a1883a 	add	r16,r16,r2
				if (error > 0) {
 5045908:	0400020e 	bge	zero,r16,5045914 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x344>
					y = y + ystep;
 504590c:	b4ed883a 	add	r22,r22,r19
					error = error - deltax;
 5045910:	8561c83a 	sub	r16,r16,r21
				}
			}
		}
		else
		{
			for (x=x_0; x <= x_1; x++) {
 5045914:	94800044 	addi	r18,r18,1
 5045918:	003fef06 	br	50458d8 <_gp+0xfffda4b0>
					error = error - deltax;
				}
			}
		}
	}
}
 504591c:	0001883a 	nop
 5045920:	e6fff804 	addi	sp,fp,-32
 5045924:	dfc00917 	ldw	ra,36(sp)
 5045928:	df000817 	ldw	fp,32(sp)
 504592c:	ddc00717 	ldw	r23,28(sp)
 5045930:	dd800617 	ldw	r22,24(sp)
 5045934:	dd400517 	ldw	r21,20(sp)
 5045938:	dd000417 	ldw	r20,16(sp)
 504593c:	dcc00317 	ldw	r19,12(sp)
 5045940:	dc800217 	ldw	r18,8(sp)
 5045944:	dc400117 	ldw	r17,4(sp)
 5045948:	dc000017 	ldw	r16,0(sp)
 504594c:	dec00a04 	addi	sp,sp,40
 5045950:	f800283a 	ret

05045954 <_ZN7Cube_3DC1Ev>:
#include "../inc/config.h"

extern alt_up_pixel_buffer_dma_dev *pixel_buf_dma_dev;

Cube_3D::Cube_3D(){
 5045954:	defffb04 	addi	sp,sp,-20
 5045958:	dfc00415 	stw	ra,16(sp)
 504595c:	df000315 	stw	fp,12(sp)
 5045960:	dc400215 	stw	r17,8(sp)
 5045964:	dc000115 	stw	r16,4(sp)
 5045968:	df000304 	addi	fp,sp,12
 504596c:	e13ffd15 	stw	r4,-12(fp)
 5045970:	e0fffd17 	ldw	r3,-12(fp)
 5045974:	008f7374 	movhi	r2,15821
 5045978:	10b33344 	addi	r2,r2,-13107
 504597c:	18800915 	stw	r2,36(r3)
 5045980:	e0bffd17 	ldw	r2,-12(fp)
 5045984:	00d0b234 	movhi	r3,17096
 5045988:	10c00a15 	stw	r3,40(r2)
 504598c:	e0bffd17 	ldw	r2,-12(fp)
 5045990:	00d08d34 	movhi	r3,16948
 5045994:	10c00f15 	stw	r3,60(r2)
 5045998:	e0fffd17 	ldw	r3,-12(fp)
 504599c:	008feaf4 	movhi	r2,16299
 50459a0:	10aaaac4 	addi	r2,r2,-21845
 50459a4:	18801015 	stw	r2,64(r3)
        float n = 0.1; 
        float f = 100;
        float r, l, t, b; 
        float angleOfView = 45;
        float imageAspectRatio = (float)4/3;
        float scale = tan(angleOfView * 0.5 * M_PI / 180) * n; //= 0.1;          //tan(angleOfView * 0.5 * M_PI / 180) * n;  
 50459a8:	e0bffd17 	ldw	r2,-12(fp)
 50459ac:	10c00f17 	ldw	r3,60(r2)
 50459b0:	1809883a 	mov	r4,r3
 50459b4:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50459b8:	1011883a 	mov	r8,r2
 50459bc:	1813883a 	mov	r9,r3
 50459c0:	000d883a 	mov	r6,zero
 50459c4:	01cff834 	movhi	r7,16352
 50459c8:	4009883a 	mov	r4,r8
 50459cc:	480b883a 	mov	r5,r9
 50459d0:	504dc0c0 	call	504dc0c <__muldf3>
 50459d4:	1009883a 	mov	r4,r2
 50459d8:	180b883a 	mov	r5,r3
 50459dc:	2005883a 	mov	r2,r4
 50459e0:	2807883a 	mov	r3,r5
 50459e4:	01951134 	movhi	r6,21572
 50459e8:	318b4604 	addi	r6,r6,11544
 50459ec:	01d00274 	movhi	r7,16393
 50459f0:	39c87ec4 	addi	r7,r7,8699
 50459f4:	1009883a 	mov	r4,r2
 50459f8:	180b883a 	mov	r5,r3
 50459fc:	504dc0c0 	call	504dc0c <__muldf3>
 5045a00:	1009883a 	mov	r4,r2
 5045a04:	180b883a 	mov	r5,r3
 5045a08:	2005883a 	mov	r2,r4
 5045a0c:	2807883a 	mov	r3,r5
 5045a10:	000d883a 	mov	r6,zero
 5045a14:	01d019f4 	movhi	r7,16487
 5045a18:	39e00004 	addi	r7,r7,-32768
 5045a1c:	1009883a 	mov	r4,r2
 5045a20:	180b883a 	mov	r5,r3
 5045a24:	504d1c00 	call	504d1c0 <__divdf3>
 5045a28:	1009883a 	mov	r4,r2
 5045a2c:	180b883a 	mov	r5,r3
 5045a30:	2005883a 	mov	r2,r4
 5045a34:	2807883a 	mov	r3,r5
 5045a38:	1009883a 	mov	r4,r2
 5045a3c:	180b883a 	mov	r5,r3
 5045a40:	5048bc40 	call	5048bc4 <tan>
 5045a44:	1021883a 	mov	r16,r2
 5045a48:	1823883a 	mov	r17,r3
 5045a4c:	e0bffd17 	ldw	r2,-12(fp)
 5045a50:	10c00917 	ldw	r3,36(r2)
 5045a54:	1809883a 	mov	r4,r3
 5045a58:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5045a5c:	1009883a 	mov	r4,r2
 5045a60:	180b883a 	mov	r5,r3
 5045a64:	200d883a 	mov	r6,r4
 5045a68:	280f883a 	mov	r7,r5
 5045a6c:	8009883a 	mov	r4,r16
 5045a70:	880b883a 	mov	r5,r17
 5045a74:	504dc0c0 	call	504dc0c <__muldf3>
 5045a78:	1009883a 	mov	r4,r2
 5045a7c:	180b883a 	mov	r5,r3
 5045a80:	2005883a 	mov	r2,r4
 5045a84:	2807883a 	mov	r3,r5
 5045a88:	1009883a 	mov	r4,r2
 5045a8c:	180b883a 	mov	r5,r3
 5045a90:	504ee8c0 	call	504ee8c <__truncdfsf2>
 5045a94:	1007883a 	mov	r3,r2
 5045a98:	e0bffd17 	ldw	r2,-12(fp)
 5045a9c:	10c01115 	stw	r3,68(r2)
 5045aa0:	e0fffd17 	ldw	r3,-12(fp)
 5045aa4:	008141b4 	movhi	r2,1286
 5045aa8:	10835b04 	addi	r2,r2,3436
 5045aac:	18c01204 	addi	r3,r3,72
 5045ab0:	1009883a 	mov	r4,r2
 5045ab4:	00802004 	movi	r2,128
 5045ab8:	100d883a 	mov	r6,r2
 5045abc:	200b883a 	mov	r5,r4
 5045ac0:	1809883a 	mov	r4,r3
 5045ac4:	504f8cc0 	call	504f8cc <memcpy>
 5045ac8:	e0bffd17 	ldw	r2,-12(fp)
 5045acc:	1080d204 	addi	r2,r2,840
 5045ad0:	00c01004 	movi	r3,64
 5045ad4:	180d883a 	mov	r6,r3
 5045ad8:	000b883a 	mov	r5,zero
 5045adc:	1009883a 	mov	r4,r2
 5045ae0:	504fa140 	call	504fa14 <memset>
 5045ae4:	e0fffd17 	ldw	r3,-12(fp)
 5045ae8:	008141b4 	movhi	r2,1286
 5045aec:	10837b04 	addi	r2,r2,3564
 5045af0:	18c0e204 	addi	r3,r3,904
 5045af4:	1009883a 	mov	r4,r2
 5045af8:	00801004 	movi	r2,64
 5045afc:	100d883a 	mov	r6,r2
 5045b00:	200b883a 	mov	r5,r4
 5045b04:	1809883a 	mov	r4,r3
 5045b08:	504f8cc0 	call	504f8cc <memcpy>
 5045b0c:	e0fffd17 	ldw	r3,-12(fp)
 5045b10:	008141b4 	movhi	r2,1286
 5045b14:	10838b04 	addi	r2,r2,3628
 5045b18:	18c0f204 	addi	r3,r3,968
 5045b1c:	1009883a 	mov	r4,r2
 5045b20:	00801204 	movi	r2,72
 5045b24:	100d883a 	mov	r6,r2
 5045b28:	200b883a 	mov	r5,r4
 5045b2c:	1809883a 	mov	r4,r3
 5045b30:	504f8cc0 	call	504f8cc <memcpy>
    //la traslazione inziale sull'asse z serve a spostare indietro l'oggetto nel mondo, altrimenti la camera si troverebbe nell'origine e sarebbe "dentro" il cubo(e si vede la croce delle diagonali)
    //NB: se l'oggetto finisce alle spalle della camera viene visto "all'indietro" (front e back del cubo sono invertiti)
    
    //inizializzo matrice di traslazione
    translation_matrix[M4(0,0)] = 1; 
 5045b34:	e0bffd17 	ldw	r2,-12(fp)
 5045b38:	00cfe034 	movhi	r3,16256
 5045b3c:	10c08215 	stw	r3,520(r2)
    translation_matrix[M4(0,1)] = 0; 
 5045b40:	e0bffd17 	ldw	r2,-12(fp)
 5045b44:	10008315 	stw	zero,524(r2)
    translation_matrix[M4(0,2)] = 0; 
 5045b48:	e0bffd17 	ldw	r2,-12(fp)
 5045b4c:	10008415 	stw	zero,528(r2)

    translation_matrix[M4(1,0)] = 0; 
 5045b50:	e0bffd17 	ldw	r2,-12(fp)
 5045b54:	10008615 	stw	zero,536(r2)
    translation_matrix[M4(1,1)] = 1; 
 5045b58:	e0bffd17 	ldw	r2,-12(fp)
 5045b5c:	00cfe034 	movhi	r3,16256
 5045b60:	10c08715 	stw	r3,540(r2)
    translation_matrix[M4(1,2)] = 0; 
 5045b64:	e0bffd17 	ldw	r2,-12(fp)
 5045b68:	10008815 	stw	zero,544(r2)

    translation_matrix[M4(2,0)] = 0; 
 5045b6c:	e0bffd17 	ldw	r2,-12(fp)
 5045b70:	10008a15 	stw	zero,552(r2)
    translation_matrix[M4(2,1)] = 0; 
 5045b74:	e0bffd17 	ldw	r2,-12(fp)
 5045b78:	10008b15 	stw	zero,556(r2)
    translation_matrix[M4(2,2)] = 1; 
 5045b7c:	e0bffd17 	ldw	r2,-12(fp)
 5045b80:	00cfe034 	movhi	r3,16256
 5045b84:	10c08c15 	stw	r3,560(r2)

    translation_matrix[M4(3,0)] = 0; 
 5045b88:	e0bffd17 	ldw	r2,-12(fp)
 5045b8c:	10008e15 	stw	zero,568(r2)
    translation_matrix[M4(3,1)] = 0;
 5045b90:	e0bffd17 	ldw	r2,-12(fp)
 5045b94:	10008f15 	stw	zero,572(r2)
    translation_matrix[M4(3,2)] = 0;
 5045b98:	e0bffd17 	ldw	r2,-12(fp)
 5045b9c:	10009015 	stw	zero,576(r2)
    translation_matrix[M4(3,3)] = 1;
 5045ba0:	e0bffd17 	ldw	r2,-12(fp)
 5045ba4:	00cfe034 	movhi	r3,16256
 5045ba8:	10c09115 	stw	r3,580(r2)

    update_translation(0, 0, -3);
 5045bac:	01f01034 	movhi	r7,49216
 5045bb0:	000d883a 	mov	r6,zero
 5045bb4:	000b883a 	mov	r5,zero
 5045bb8:	e13ffd17 	ldw	r4,-12(fp)
 5045bbc:	5045f180 	call	5045f18 <_ZN7Cube_3D18update_translationEfff>

    //inizializzo matrice di rotazione
    
    rotation_matrix[M4(0,3)] = 0;
 5045bc0:	e0bffd17 	ldw	r2,-12(fp)
 5045bc4:	10007515 	stw	zero,468(r2)
    rotation_matrix[M4(1,3)] = 0; 
 5045bc8:	e0bffd17 	ldw	r2,-12(fp)
 5045bcc:	10007915 	stw	zero,484(r2)
    rotation_matrix[M4(2,3)] = 0;
 5045bd0:	e0bffd17 	ldw	r2,-12(fp)
 5045bd4:	10007d15 	stw	zero,500(r2)
    rotation_matrix[M4(3,0)] = 0;
 5045bd8:	e0bffd17 	ldw	r2,-12(fp)
 5045bdc:	10007e15 	stw	zero,504(r2)
    rotation_matrix[M4(3,1)] = 0;
 5045be0:	e0bffd17 	ldw	r2,-12(fp)
 5045be4:	10007f15 	stw	zero,508(r2)
    rotation_matrix[M4(3,2)] = 0;
 5045be8:	e0bffd17 	ldw	r2,-12(fp)
 5045bec:	10008015 	stw	zero,512(r2)
    rotation_matrix[M4(3,3)] = 1;
 5045bf0:	e0bffd17 	ldw	r2,-12(fp)
 5045bf4:	00cfe034 	movhi	r3,16256
 5045bf8:	10c08115 	stw	r3,516(r2)
    update_rotation(0, 0, 0);
 5045bfc:	000f883a 	mov	r7,zero
 5045c00:	000d883a 	mov	r6,zero
 5045c04:	000b883a 	mov	r5,zero
 5045c08:	e13ffd17 	ldw	r4,-12(fp)
 5045c0c:	50461280 	call	5046128 <_ZN7Cube_3D15update_rotationEfff>

    //inizializzo matrice di scala
    scaling_matrix[M4(0,1)] = 0; 
 5045c10:	e0bffd17 	ldw	r2,-12(fp)
 5045c14:	10009315 	stw	zero,588(r2)
    scaling_matrix[M4(0,2)] = 0; 
 5045c18:	e0bffd17 	ldw	r2,-12(fp)
 5045c1c:	10009415 	stw	zero,592(r2)
    scaling_matrix[M4(0,3)] = 0; 
 5045c20:	e0bffd17 	ldw	r2,-12(fp)
 5045c24:	10009515 	stw	zero,596(r2)

    scaling_matrix[M4(1,0)] = 0; 
 5045c28:	e0bffd17 	ldw	r2,-12(fp)
 5045c2c:	10009615 	stw	zero,600(r2)
    scaling_matrix[M4(1,2)] = 0; 
 5045c30:	e0bffd17 	ldw	r2,-12(fp)
 5045c34:	10009815 	stw	zero,608(r2)
    scaling_matrix[M4(1,3)] = 0; 
 5045c38:	e0bffd17 	ldw	r2,-12(fp)
 5045c3c:	10009915 	stw	zero,612(r2)

    scaling_matrix[M4(2,0)] = 0; 
 5045c40:	e0bffd17 	ldw	r2,-12(fp)
 5045c44:	10009a15 	stw	zero,616(r2)
    scaling_matrix[M4(2,1)] = 0; 
 5045c48:	e0bffd17 	ldw	r2,-12(fp)
 5045c4c:	10009b15 	stw	zero,620(r2)
    scaling_matrix[M4(2,3)] = 0; 
 5045c50:	e0bffd17 	ldw	r2,-12(fp)
 5045c54:	10009d15 	stw	zero,628(r2)

    scaling_matrix[M4(3,0)] = 0; 
 5045c58:	e0bffd17 	ldw	r2,-12(fp)
 5045c5c:	10009e15 	stw	zero,632(r2)
    scaling_matrix[M4(3,1)] = 0; 
 5045c60:	e0bffd17 	ldw	r2,-12(fp)
 5045c64:	10009f15 	stw	zero,636(r2)
    scaling_matrix[M4(3,2)] = 0; 
 5045c68:	e0bffd17 	ldw	r2,-12(fp)
 5045c6c:	1000a015 	stw	zero,640(r2)
    scaling_matrix[M4(3,3)] = 1; 
 5045c70:	e0bffd17 	ldw	r2,-12(fp)
 5045c74:	00cfe034 	movhi	r3,16256
 5045c78:	10c0a115 	stw	r3,644(r2)
    update_scaling(0.4, 0.4, 0.4);
 5045c7c:	01cfb374 	movhi	r7,16077
 5045c80:	39f33344 	addi	r7,r7,-13107
 5045c84:	018fb374 	movhi	r6,16077
 5045c88:	31b33344 	addi	r6,r6,-13107
 5045c8c:	014fb374 	movhi	r5,16077
 5045c90:	29733344 	addi	r5,r5,-13107
 5045c94:	e13ffd17 	ldw	r4,-12(fp)
 5045c98:	50468400 	call	5046840 <_ZN7Cube_3D14update_scalingEfff>

    
    
    // set OpenGL perspective projection matrix
    r = imageAspectRatio * scale;
 5045c9c:	e0bffd17 	ldw	r2,-12(fp)
 5045ca0:	10c01017 	ldw	r3,64(r2)
 5045ca4:	e0bffd17 	ldw	r2,-12(fp)
 5045ca8:	11001117 	ldw	r4,68(r2)
 5045cac:	200b883a 	mov	r5,r4
 5045cb0:	1809883a 	mov	r4,r3
 5045cb4:	504bdb00 	call	504bdb0 <__mulsf3>
 5045cb8:	1009883a 	mov	r4,r2
 5045cbc:	2007883a 	mov	r3,r4
 5045cc0:	e0bffd17 	ldw	r2,-12(fp)
 5045cc4:	10c00b15 	stw	r3,44(r2)
    l = -r;
 5045cc8:	e0fffd17 	ldw	r3,-12(fp)
 5045ccc:	18800b17 	ldw	r2,44(r3)
 5045cd0:	10e0003c 	xorhi	r3,r2,32768
 5045cd4:	e0bffd17 	ldw	r2,-12(fp)
 5045cd8:	10c00c15 	stw	r3,48(r2)
    t = scale;
 5045cdc:	e0bffd17 	ldw	r2,-12(fp)
 5045ce0:	10c01117 	ldw	r3,68(r2)
 5045ce4:	e0bffd17 	ldw	r2,-12(fp)
 5045ce8:	10c00d15 	stw	r3,52(r2)
    b = -t;
 5045cec:	e0fffd17 	ldw	r3,-12(fp)
 5045cf0:	18800d17 	ldw	r2,52(r3)
 5045cf4:	10e0003c 	xorhi	r3,r2,32768
 5045cf8:	e0bffd17 	ldw	r2,-12(fp)
 5045cfc:	10c00e15 	stw	r3,56(r2)

    projection_matrix[M4(0,0)] = (float)(2 * n) / (r - l); 
 5045d00:	e0fffd17 	ldw	r3,-12(fp)
 5045d04:	18800917 	ldw	r2,36(r3)
 5045d08:	100b883a 	mov	r5,r2
 5045d0c:	1009883a 	mov	r4,r2
 5045d10:	504b4a80 	call	504b4a8 <__addsf3>
 5045d14:	1007883a 	mov	r3,r2
 5045d18:	1821883a 	mov	r16,r3
 5045d1c:	e0bffd17 	ldw	r2,-12(fp)
 5045d20:	10c00b17 	ldw	r3,44(r2)
 5045d24:	e0bffd17 	ldw	r2,-12(fp)
 5045d28:	11000c17 	ldw	r4,48(r2)
 5045d2c:	200b883a 	mov	r5,r4
 5045d30:	1809883a 	mov	r4,r3
 5045d34:	504c1ac0 	call	504c1ac <__subsf3>
 5045d38:	1007883a 	mov	r3,r2
 5045d3c:	1805883a 	mov	r2,r3
 5045d40:	100b883a 	mov	r5,r2
 5045d44:	8009883a 	mov	r4,r16
 5045d48:	504b9700 	call	504b970 <__divsf3>
 5045d4c:	1009883a 	mov	r4,r2
 5045d50:	2007883a 	mov	r3,r4
 5045d54:	e0bffd17 	ldw	r2,-12(fp)
 5045d58:	10c06215 	stw	r3,392(r2)
    projection_matrix[M4(1,0)] = (float)0; 
 5045d5c:	e0bffd17 	ldw	r2,-12(fp)
 5045d60:	10006615 	stw	zero,408(r2)
    projection_matrix[M4(2,0)] = (float)0; 
 5045d64:	e0bffd17 	ldw	r2,-12(fp)
 5045d68:	10006a15 	stw	zero,424(r2)
    projection_matrix[M4(3,0)] = (float)0; 
 5045d6c:	e0bffd17 	ldw	r2,-12(fp)
 5045d70:	10006e15 	stw	zero,440(r2)

    projection_matrix[M4(0,1)] = (float)0; 
 5045d74:	e0bffd17 	ldw	r2,-12(fp)
 5045d78:	10006315 	stw	zero,396(r2)
    projection_matrix[M4(1,1)] = (float)2 * n / (t - b); 
 5045d7c:	e0fffd17 	ldw	r3,-12(fp)
 5045d80:	18800917 	ldw	r2,36(r3)
 5045d84:	100b883a 	mov	r5,r2
 5045d88:	1009883a 	mov	r4,r2
 5045d8c:	504b4a80 	call	504b4a8 <__addsf3>
 5045d90:	1007883a 	mov	r3,r2
 5045d94:	1821883a 	mov	r16,r3
 5045d98:	e0bffd17 	ldw	r2,-12(fp)
 5045d9c:	10c00d17 	ldw	r3,52(r2)
 5045da0:	e0bffd17 	ldw	r2,-12(fp)
 5045da4:	11000e17 	ldw	r4,56(r2)
 5045da8:	200b883a 	mov	r5,r4
 5045dac:	1809883a 	mov	r4,r3
 5045db0:	504c1ac0 	call	504c1ac <__subsf3>
 5045db4:	1007883a 	mov	r3,r2
 5045db8:	1805883a 	mov	r2,r3
 5045dbc:	100b883a 	mov	r5,r2
 5045dc0:	8009883a 	mov	r4,r16
 5045dc4:	504b9700 	call	504b970 <__divsf3>
 5045dc8:	1009883a 	mov	r4,r2
 5045dcc:	2007883a 	mov	r3,r4
 5045dd0:	e0bffd17 	ldw	r2,-12(fp)
 5045dd4:	10c06715 	stw	r3,412(r2)
    projection_matrix[M4(2,1)] = (float)0; 
 5045dd8:	e0bffd17 	ldw	r2,-12(fp)
 5045ddc:	10006b15 	stw	zero,428(r2)
    projection_matrix[M4(3,1)] = (float)0; 
 5045de0:	e0bffd17 	ldw	r2,-12(fp)
 5045de4:	10006f15 	stw	zero,444(r2)

    projection_matrix[M4(0,2)] = (float)0; 
 5045de8:	e0bffd17 	ldw	r2,-12(fp)
 5045dec:	10006415 	stw	zero,400(r2)
    projection_matrix[M4(1,2)] = (float)0; 
 5045df0:	e0bffd17 	ldw	r2,-12(fp)
 5045df4:	10006815 	stw	zero,416(r2)
    projection_matrix[M4(2,2)] = (float)-(f + n) / (f - n); 
 5045df8:	e0bffd17 	ldw	r2,-12(fp)
 5045dfc:	10c00a17 	ldw	r3,40(r2)
 5045e00:	e0bffd17 	ldw	r2,-12(fp)
 5045e04:	11000917 	ldw	r4,36(r2)
 5045e08:	200b883a 	mov	r5,r4
 5045e0c:	1809883a 	mov	r4,r3
 5045e10:	504b4a80 	call	504b4a8 <__addsf3>
 5045e14:	1007883a 	mov	r3,r2
 5045e18:	1805883a 	mov	r2,r3
 5045e1c:	1420003c 	xorhi	r16,r2,32768
 5045e20:	e0bffd17 	ldw	r2,-12(fp)
 5045e24:	10c00a17 	ldw	r3,40(r2)
 5045e28:	e0bffd17 	ldw	r2,-12(fp)
 5045e2c:	11000917 	ldw	r4,36(r2)
 5045e30:	200b883a 	mov	r5,r4
 5045e34:	1809883a 	mov	r4,r3
 5045e38:	504c1ac0 	call	504c1ac <__subsf3>
 5045e3c:	1007883a 	mov	r3,r2
 5045e40:	1805883a 	mov	r2,r3
 5045e44:	100b883a 	mov	r5,r2
 5045e48:	8009883a 	mov	r4,r16
 5045e4c:	504b9700 	call	504b970 <__divsf3>
 5045e50:	1009883a 	mov	r4,r2
 5045e54:	2007883a 	mov	r3,r4
 5045e58:	e0bffd17 	ldw	r2,-12(fp)
 5045e5c:	10c06c15 	stw	r3,432(r2)
    projection_matrix[M4(3,2)] = (float)-1;
 5045e60:	e0bffd17 	ldw	r2,-12(fp)
 5045e64:	00efe034 	movhi	r3,49024
 5045e68:	10c07015 	stw	r3,448(r2)

    projection_matrix[M4(0,3)] = (float)0; 
 5045e6c:	e0bffd17 	ldw	r2,-12(fp)
 5045e70:	10006515 	stw	zero,404(r2)
    projection_matrix[M4(1,3)] = (float)0; 
 5045e74:	e0bffd17 	ldw	r2,-12(fp)
 5045e78:	10006915 	stw	zero,420(r2)
    projection_matrix[M4(2,3)] = (float) -2 * f * n / (f - n);
 5045e7c:	e0bffd17 	ldw	r2,-12(fp)
 5045e80:	10c00a17 	ldw	r3,40(r2)
 5045e84:	01700034 	movhi	r5,49152
 5045e88:	1809883a 	mov	r4,r3
 5045e8c:	504bdb00 	call	504bdb0 <__mulsf3>
 5045e90:	1007883a 	mov	r3,r2
 5045e94:	1809883a 	mov	r4,r3
 5045e98:	e0bffd17 	ldw	r2,-12(fp)
 5045e9c:	10c00917 	ldw	r3,36(r2)
 5045ea0:	180b883a 	mov	r5,r3
 5045ea4:	504bdb00 	call	504bdb0 <__mulsf3>
 5045ea8:	1007883a 	mov	r3,r2
 5045eac:	1821883a 	mov	r16,r3
 5045eb0:	e0bffd17 	ldw	r2,-12(fp)
 5045eb4:	10c00a17 	ldw	r3,40(r2)
 5045eb8:	e0bffd17 	ldw	r2,-12(fp)
 5045ebc:	11000917 	ldw	r4,36(r2)
 5045ec0:	200b883a 	mov	r5,r4
 5045ec4:	1809883a 	mov	r4,r3
 5045ec8:	504c1ac0 	call	504c1ac <__subsf3>
 5045ecc:	1007883a 	mov	r3,r2
 5045ed0:	1805883a 	mov	r2,r3
 5045ed4:	100b883a 	mov	r5,r2
 5045ed8:	8009883a 	mov	r4,r16
 5045edc:	504b9700 	call	504b970 <__divsf3>
 5045ee0:	1009883a 	mov	r4,r2
 5045ee4:	2007883a 	mov	r3,r4
 5045ee8:	e0bffd17 	ldw	r2,-12(fp)
 5045eec:	10c06d15 	stw	r3,436(r2)
    projection_matrix[M4(3,3)] = (float)0; 
 5045ef0:	e0bffd17 	ldw	r2,-12(fp)
 5045ef4:	10007115 	stw	zero,452(r2)

    

   
}
 5045ef8:	0001883a 	nop
 5045efc:	e6fffe04 	addi	sp,fp,-8
 5045f00:	dfc00317 	ldw	ra,12(sp)
 5045f04:	df000217 	ldw	fp,8(sp)
 5045f08:	dc400117 	ldw	r17,4(sp)
 5045f0c:	dc000017 	ldw	r16,0(sp)
 5045f10:	dec00404 	addi	sp,sp,16
 5045f14:	f800283a 	ret

05045f18 <_ZN7Cube_3D18update_translationEfff>:

void Cube_3D::update_translation(float x, float y,float z){
 5045f18:	defffb04 	addi	sp,sp,-20
 5045f1c:	df000415 	stw	fp,16(sp)
 5045f20:	df000404 	addi	fp,sp,16
 5045f24:	e13ffc15 	stw	r4,-16(fp)
 5045f28:	e17ffd15 	stw	r5,-12(fp)
 5045f2c:	e1bffe15 	stw	r6,-8(fp)
 5045f30:	e1ffff15 	stw	r7,-4(fp)
    translation_matrix[M4(0,3)] = x;
 5045f34:	e0bffc17 	ldw	r2,-16(fp)
 5045f38:	e0fffd17 	ldw	r3,-12(fp)
 5045f3c:	10c08515 	stw	r3,532(r2)
    translation[X] = x;
 5045f40:	e0bffc17 	ldw	r2,-16(fp)
 5045f44:	e0fffd17 	ldw	r3,-12(fp)
 5045f48:	10c00015 	stw	r3,0(r2)

    translation_matrix[M4(1,3)] = y;
 5045f4c:	e0bffc17 	ldw	r2,-16(fp)
 5045f50:	e0fffe17 	ldw	r3,-8(fp)
 5045f54:	10c08915 	stw	r3,548(r2)
    translation[Y] = y;
 5045f58:	e0bffc17 	ldw	r2,-16(fp)
 5045f5c:	e0fffe17 	ldw	r3,-8(fp)
 5045f60:	10c00115 	stw	r3,4(r2)

    translation_matrix[M4(2,3)] = z;
 5045f64:	e0bffc17 	ldw	r2,-16(fp)
 5045f68:	e0ffff17 	ldw	r3,-4(fp)
 5045f6c:	10c08d15 	stw	r3,564(r2)
    translation[Z] = z;
 5045f70:	e0bffc17 	ldw	r2,-16(fp)
 5045f74:	e0ffff17 	ldw	r3,-4(fp)
 5045f78:	10c00215 	stw	r3,8(r2)
}
 5045f7c:	0001883a 	nop
 5045f80:	e037883a 	mov	sp,fp
 5045f84:	df000017 	ldw	fp,0(sp)
 5045f88:	dec00104 	addi	sp,sp,4
 5045f8c:	f800283a 	ret

05045f90 <_ZN7Cube_3D18update_translationEfi>:

void Cube_3D::update_translation(float new_value, int axis){
 5045f90:	defffb04 	addi	sp,sp,-20
 5045f94:	dfc00415 	stw	ra,16(sp)
 5045f98:	df000315 	stw	fp,12(sp)
 5045f9c:	df000304 	addi	fp,sp,12
 5045fa0:	e13ffd15 	stw	r4,-12(fp)
 5045fa4:	e17ffe15 	stw	r5,-8(fp)
 5045fa8:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 5045fac:	e0bfff17 	ldw	r2,-4(fp)
 5045fb0:	10c00060 	cmpeqi	r3,r2,1
 5045fb4:	1800071e 	bne	r3,zero,5045fd4 <_ZN7Cube_3D18update_translationEfi+0x44>
 5045fb8:	10c000a0 	cmpeqi	r3,r2,2
 5045fbc:	1800091e 	bne	r3,zero,5045fe4 <_ZN7Cube_3D18update_translationEfi+0x54>
 5045fc0:	10000c1e 	bne	r2,zero,5045ff4 <_ZN7Cube_3D18update_translationEfi+0x64>
    {
        case X:
            translation[X] = new_value;
 5045fc4:	e0bffd17 	ldw	r2,-12(fp)
 5045fc8:	e0fffe17 	ldw	r3,-8(fp)
 5045fcc:	10c00015 	stw	r3,0(r2)
            break;
 5045fd0:	00000806 	br	5045ff4 <_ZN7Cube_3D18update_translationEfi+0x64>
        case Y:
            translation[Y] = new_value;
 5045fd4:	e0bffd17 	ldw	r2,-12(fp)
 5045fd8:	e0fffe17 	ldw	r3,-8(fp)
 5045fdc:	10c00115 	stw	r3,4(r2)
            break;
 5045fe0:	00000406 	br	5045ff4 <_ZN7Cube_3D18update_translationEfi+0x64>
        case Z:
            translation[Z] = new_value;
 5045fe4:	e0bffd17 	ldw	r2,-12(fp)
 5045fe8:	e0fffe17 	ldw	r3,-8(fp)
 5045fec:	10c00215 	stw	r3,8(r2)
            break;
 5045ff0:	0001883a 	nop
    }
    update_translation(translation[X], translation[Y], translation[Z]);
 5045ff4:	e0bffd17 	ldw	r2,-12(fp)
 5045ff8:	10c00017 	ldw	r3,0(r2)
 5045ffc:	e0bffd17 	ldw	r2,-12(fp)
 5046000:	11000117 	ldw	r4,4(r2)
 5046004:	e0bffd17 	ldw	r2,-12(fp)
 5046008:	11400217 	ldw	r5,8(r2)
 504600c:	280f883a 	mov	r7,r5
 5046010:	200d883a 	mov	r6,r4
 5046014:	180b883a 	mov	r5,r3
 5046018:	e13ffd17 	ldw	r4,-12(fp)
 504601c:	5045f180 	call	5045f18 <_ZN7Cube_3D18update_translationEfff>
}
 5046020:	0001883a 	nop
 5046024:	e037883a 	mov	sp,fp
 5046028:	dfc00117 	ldw	ra,4(sp)
 504602c:	df000017 	ldw	fp,0(sp)
 5046030:	dec00204 	addi	sp,sp,8
 5046034:	f800283a 	ret

05046038 <_ZN7Cube_3D27update_translation_relativeEfi>:

void Cube_3D::update_translation_relative(float relative_value, int axis ){
 5046038:	defffb04 	addi	sp,sp,-20
 504603c:	dfc00415 	stw	ra,16(sp)
 5046040:	df000315 	stw	fp,12(sp)
 5046044:	df000304 	addi	fp,sp,12
 5046048:	e13ffd15 	stw	r4,-12(fp)
 504604c:	e17ffe15 	stw	r5,-8(fp)
 5046050:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 5046054:	e0bfff17 	ldw	r2,-4(fp)
 5046058:	10c00060 	cmpeqi	r3,r2,1
 504605c:	18000d1e 	bne	r3,zero,5046094 <_ZN7Cube_3D27update_translation_relativeEfi+0x5c>
 5046060:	10c000a0 	cmpeqi	r3,r2,2
 5046064:	1800151e 	bne	r3,zero,50460bc <_ZN7Cube_3D27update_translation_relativeEfi+0x84>
 5046068:	10001e1e 	bne	r2,zero,50460e4 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
    {
        case X:
            translation[X] += relative_value;
 504606c:	e0bffd17 	ldw	r2,-12(fp)
 5046070:	10c00017 	ldw	r3,0(r2)
 5046074:	e17ffe17 	ldw	r5,-8(fp)
 5046078:	1809883a 	mov	r4,r3
 504607c:	504b4a80 	call	504b4a8 <__addsf3>
 5046080:	1009883a 	mov	r4,r2
 5046084:	2007883a 	mov	r3,r4
 5046088:	e0bffd17 	ldw	r2,-12(fp)
 504608c:	10c00015 	stw	r3,0(r2)
            break;
 5046090:	00001406 	br	50460e4 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
        case Y:
            translation[Y] += relative_value;
 5046094:	e0bffd17 	ldw	r2,-12(fp)
 5046098:	10c00117 	ldw	r3,4(r2)
 504609c:	e17ffe17 	ldw	r5,-8(fp)
 50460a0:	1809883a 	mov	r4,r3
 50460a4:	504b4a80 	call	504b4a8 <__addsf3>
 50460a8:	1009883a 	mov	r4,r2
 50460ac:	2007883a 	mov	r3,r4
 50460b0:	e0bffd17 	ldw	r2,-12(fp)
 50460b4:	10c00115 	stw	r3,4(r2)
            break;
 50460b8:	00000a06 	br	50460e4 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
        case Z:
            translation[Z] += relative_value;
 50460bc:	e0bffd17 	ldw	r2,-12(fp)
 50460c0:	10c00217 	ldw	r3,8(r2)
 50460c4:	e17ffe17 	ldw	r5,-8(fp)
 50460c8:	1809883a 	mov	r4,r3
 50460cc:	504b4a80 	call	504b4a8 <__addsf3>
 50460d0:	1009883a 	mov	r4,r2
 50460d4:	2007883a 	mov	r3,r4
 50460d8:	e0bffd17 	ldw	r2,-12(fp)
 50460dc:	10c00215 	stw	r3,8(r2)
            break;
 50460e0:	0001883a 	nop
    }
    update_translation(translation[X], translation[Y], translation[Z]);
 50460e4:	e0bffd17 	ldw	r2,-12(fp)
 50460e8:	10c00017 	ldw	r3,0(r2)
 50460ec:	e0bffd17 	ldw	r2,-12(fp)
 50460f0:	11000117 	ldw	r4,4(r2)
 50460f4:	e0bffd17 	ldw	r2,-12(fp)
 50460f8:	11400217 	ldw	r5,8(r2)
 50460fc:	280f883a 	mov	r7,r5
 5046100:	200d883a 	mov	r6,r4
 5046104:	180b883a 	mov	r5,r3
 5046108:	e13ffd17 	ldw	r4,-12(fp)
 504610c:	5045f180 	call	5045f18 <_ZN7Cube_3D18update_translationEfff>
}
 5046110:	0001883a 	nop
 5046114:	e037883a 	mov	sp,fp
 5046118:	dfc00117 	ldw	ra,4(sp)
 504611c:	df000017 	ldw	fp,0(sp)
 5046120:	dec00204 	addi	sp,sp,8
 5046124:	f800283a 	ret

05046128 <_ZN7Cube_3D15update_rotationEfff>:


void Cube_3D::update_rotation(float rx, float ry, float rz){
 5046128:	defff104 	addi	sp,sp,-60
 504612c:	dfc00e15 	stw	ra,56(sp)
 5046130:	df000d15 	stw	fp,52(sp)
 5046134:	dc000c15 	stw	r16,48(sp)
 5046138:	df000d04 	addi	fp,sp,52
 504613c:	e13ffb15 	stw	r4,-20(fp)
 5046140:	e17ffc15 	stw	r5,-16(fp)
 5046144:	e1bffd15 	stw	r6,-12(fp)
 5046148:	e1fffe15 	stw	r7,-8(fp)
    //reference: http://www.opengl-tutorial.org/assets/faq_quaternions/index.html#Q36
    rotation[X] = rx;
 504614c:	e0bffb17 	ldw	r2,-20(fp)
 5046150:	e0fffc17 	ldw	r3,-16(fp)
 5046154:	10c00315 	stw	r3,12(r2)
    rotation[Y] = ry;
 5046158:	e0bffb17 	ldw	r2,-20(fp)
 504615c:	e0fffd17 	ldw	r3,-12(fp)
 5046160:	10c00415 	stw	r3,16(r2)
    rotation[Z] = rz;
 5046164:	e0bffb17 	ldw	r2,-20(fp)
 5046168:	e0fffe17 	ldw	r3,-8(fp)
 504616c:	10c00515 	stw	r3,20(r2)

    float a, b, c, d, e, f;
    float ad, bd;
    //calcolo individualmente i coseni proiettori
    a = cos(rotation[X]);
 5046170:	e0bffb17 	ldw	r2,-20(fp)
 5046174:	10c00317 	ldw	r3,12(r2)
 5046178:	1809883a 	mov	r4,r3
 504617c:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5046180:	100b883a 	mov	r5,r2
 5046184:	180d883a 	mov	r6,r3
 5046188:	2809883a 	mov	r4,r5
 504618c:	300b883a 	mov	r5,r6
 5046190:	50489e80 	call	50489e8 <cos>
 5046194:	100b883a 	mov	r5,r2
 5046198:	180d883a 	mov	r6,r3
 504619c:	2809883a 	mov	r4,r5
 50461a0:	300b883a 	mov	r5,r6
 50461a4:	504ee8c0 	call	504ee8c <__truncdfsf2>
 50461a8:	1007883a 	mov	r3,r2
 50461ac:	e0fff315 	stw	r3,-52(fp)
    b = sin(rotation[X]);
 50461b0:	e0bffb17 	ldw	r2,-20(fp)
 50461b4:	10c00317 	ldw	r3,12(r2)
 50461b8:	1809883a 	mov	r4,r3
 50461bc:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50461c0:	100b883a 	mov	r5,r2
 50461c4:	180d883a 	mov	r6,r3
 50461c8:	2809883a 	mov	r4,r5
 50461cc:	300b883a 	mov	r5,r6
 50461d0:	5048ad40 	call	5048ad4 <sin>
 50461d4:	100b883a 	mov	r5,r2
 50461d8:	180d883a 	mov	r6,r3
 50461dc:	2809883a 	mov	r4,r5
 50461e0:	300b883a 	mov	r5,r6
 50461e4:	504ee8c0 	call	504ee8c <__truncdfsf2>
 50461e8:	1007883a 	mov	r3,r2
 50461ec:	e0fff415 	stw	r3,-48(fp)
    c = cos(rotation[Y]); 
 50461f0:	e0bffb17 	ldw	r2,-20(fp)
 50461f4:	10c00417 	ldw	r3,16(r2)
 50461f8:	1809883a 	mov	r4,r3
 50461fc:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5046200:	100b883a 	mov	r5,r2
 5046204:	180d883a 	mov	r6,r3
 5046208:	2809883a 	mov	r4,r5
 504620c:	300b883a 	mov	r5,r6
 5046210:	50489e80 	call	50489e8 <cos>
 5046214:	100b883a 	mov	r5,r2
 5046218:	180d883a 	mov	r6,r3
 504621c:	2809883a 	mov	r4,r5
 5046220:	300b883a 	mov	r5,r6
 5046224:	504ee8c0 	call	504ee8c <__truncdfsf2>
 5046228:	1007883a 	mov	r3,r2
 504622c:	e0fff515 	stw	r3,-44(fp)
    d = sin(rotation[Y]);
 5046230:	e0bffb17 	ldw	r2,-20(fp)
 5046234:	10c00417 	ldw	r3,16(r2)
 5046238:	1809883a 	mov	r4,r3
 504623c:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5046240:	100b883a 	mov	r5,r2
 5046244:	180d883a 	mov	r6,r3
 5046248:	2809883a 	mov	r4,r5
 504624c:	300b883a 	mov	r5,r6
 5046250:	5048ad40 	call	5048ad4 <sin>
 5046254:	100b883a 	mov	r5,r2
 5046258:	180d883a 	mov	r6,r3
 504625c:	2809883a 	mov	r4,r5
 5046260:	300b883a 	mov	r5,r6
 5046264:	504ee8c0 	call	504ee8c <__truncdfsf2>
 5046268:	1007883a 	mov	r3,r2
 504626c:	e0fff615 	stw	r3,-40(fp)
    e = cos(rotation[Z]);
 5046270:	e0bffb17 	ldw	r2,-20(fp)
 5046274:	10c00517 	ldw	r3,20(r2)
 5046278:	1809883a 	mov	r4,r3
 504627c:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5046280:	100b883a 	mov	r5,r2
 5046284:	180d883a 	mov	r6,r3
 5046288:	2809883a 	mov	r4,r5
 504628c:	300b883a 	mov	r5,r6
 5046290:	50489e80 	call	50489e8 <cos>
 5046294:	100b883a 	mov	r5,r2
 5046298:	180d883a 	mov	r6,r3
 504629c:	2809883a 	mov	r4,r5
 50462a0:	300b883a 	mov	r5,r6
 50462a4:	504ee8c0 	call	504ee8c <__truncdfsf2>
 50462a8:	1007883a 	mov	r3,r2
 50462ac:	e0fff715 	stw	r3,-36(fp)
    f = sin(rotation[Z]);
 50462b0:	e0bffb17 	ldw	r2,-20(fp)
 50462b4:	10c00517 	ldw	r3,20(r2)
 50462b8:	1809883a 	mov	r4,r3
 50462bc:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50462c0:	100b883a 	mov	r5,r2
 50462c4:	180d883a 	mov	r6,r3
 50462c8:	2809883a 	mov	r4,r5
 50462cc:	300b883a 	mov	r5,r6
 50462d0:	5048ad40 	call	5048ad4 <sin>
 50462d4:	100b883a 	mov	r5,r2
 50462d8:	180d883a 	mov	r6,r3
 50462dc:	2809883a 	mov	r4,r5
 50462e0:	300b883a 	mov	r5,r6
 50462e4:	504ee8c0 	call	504ee8c <__truncdfsf2>
 50462e8:	1007883a 	mov	r3,r2
 50462ec:	e0fff815 	stw	r3,-32(fp)
    
    ad = a*d;
 50462f0:	e17ff617 	ldw	r5,-40(fp)
 50462f4:	e13ff317 	ldw	r4,-52(fp)
 50462f8:	504bdb00 	call	504bdb0 <__mulsf3>
 50462fc:	1007883a 	mov	r3,r2
 5046300:	e0fff915 	stw	r3,-28(fp)
    bd = b*d;
 5046304:	e17ff617 	ldw	r5,-40(fp)
 5046308:	e13ff417 	ldw	r4,-48(fp)
 504630c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046310:	1007883a 	mov	r3,r2
 5046314:	e0fffa15 	stw	r3,-24(fp)

    rotation_matrix[M4(0,0)] = c*e; 
 5046318:	e17ff717 	ldw	r5,-36(fp)
 504631c:	e13ff517 	ldw	r4,-44(fp)
 5046320:	504bdb00 	call	504bdb0 <__mulsf3>
 5046324:	1009883a 	mov	r4,r2
 5046328:	2007883a 	mov	r3,r4
 504632c:	e0bffb17 	ldw	r2,-20(fp)
 5046330:	10c07215 	stw	r3,456(r2)
    rotation_matrix[M4(0,1)] = -c*f;
 5046334:	e0bff517 	ldw	r2,-44(fp)
 5046338:	10a0003c 	xorhi	r2,r2,32768
 504633c:	e17ff817 	ldw	r5,-32(fp)
 5046340:	1009883a 	mov	r4,r2
 5046344:	504bdb00 	call	504bdb0 <__mulsf3>
 5046348:	1009883a 	mov	r4,r2
 504634c:	2007883a 	mov	r3,r4
 5046350:	e0bffb17 	ldw	r2,-20(fp)
 5046354:	10c07315 	stw	r3,460(r2)
    rotation_matrix[M4(0,2)] = d;
 5046358:	e0bffb17 	ldw	r2,-20(fp)
 504635c:	e0fff617 	ldw	r3,-40(fp)
 5046360:	10c07415 	stw	r3,464(r2)

    rotation_matrix[M4(1,0)] = bd*e + a*f; 
 5046364:	e17ff717 	ldw	r5,-36(fp)
 5046368:	e13ffa17 	ldw	r4,-24(fp)
 504636c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046370:	1007883a 	mov	r3,r2
 5046374:	1821883a 	mov	r16,r3
 5046378:	e17ff817 	ldw	r5,-32(fp)
 504637c:	e13ff317 	ldw	r4,-52(fp)
 5046380:	504bdb00 	call	504bdb0 <__mulsf3>
 5046384:	1007883a 	mov	r3,r2
 5046388:	1805883a 	mov	r2,r3
 504638c:	100b883a 	mov	r5,r2
 5046390:	8009883a 	mov	r4,r16
 5046394:	504b4a80 	call	504b4a8 <__addsf3>
 5046398:	1009883a 	mov	r4,r2
 504639c:	2007883a 	mov	r3,r4
 50463a0:	e0bffb17 	ldw	r2,-20(fp)
 50463a4:	10c07615 	stw	r3,472(r2)
    rotation_matrix[M4(1,1)] = -bd*f + a*e; 
 50463a8:	e0bffa17 	ldw	r2,-24(fp)
 50463ac:	10a0003c 	xorhi	r2,r2,32768
 50463b0:	e17ff817 	ldw	r5,-32(fp)
 50463b4:	1009883a 	mov	r4,r2
 50463b8:	504bdb00 	call	504bdb0 <__mulsf3>
 50463bc:	1007883a 	mov	r3,r2
 50463c0:	1821883a 	mov	r16,r3
 50463c4:	e17ff717 	ldw	r5,-36(fp)
 50463c8:	e13ff317 	ldw	r4,-52(fp)
 50463cc:	504bdb00 	call	504bdb0 <__mulsf3>
 50463d0:	1007883a 	mov	r3,r2
 50463d4:	1805883a 	mov	r2,r3
 50463d8:	100b883a 	mov	r5,r2
 50463dc:	8009883a 	mov	r4,r16
 50463e0:	504b4a80 	call	504b4a8 <__addsf3>
 50463e4:	1009883a 	mov	r4,r2
 50463e8:	2007883a 	mov	r3,r4
 50463ec:	e0bffb17 	ldw	r2,-20(fp)
 50463f0:	10c07715 	stw	r3,476(r2)
    rotation_matrix[M4(1,2)] = - b*c;  
 50463f4:	e0bff417 	ldw	r2,-48(fp)
 50463f8:	10a0003c 	xorhi	r2,r2,32768
 50463fc:	e17ff517 	ldw	r5,-44(fp)
 5046400:	1009883a 	mov	r4,r2
 5046404:	504bdb00 	call	504bdb0 <__mulsf3>
 5046408:	1009883a 	mov	r4,r2
 504640c:	2007883a 	mov	r3,r4
 5046410:	e0bffb17 	ldw	r2,-20(fp)
 5046414:	10c07815 	stw	r3,480(r2)

    rotation_matrix[M4(2,0)] = -ad*e + b*f; 
 5046418:	e0bff917 	ldw	r2,-28(fp)
 504641c:	10a0003c 	xorhi	r2,r2,32768
 5046420:	e17ff717 	ldw	r5,-36(fp)
 5046424:	1009883a 	mov	r4,r2
 5046428:	504bdb00 	call	504bdb0 <__mulsf3>
 504642c:	1007883a 	mov	r3,r2
 5046430:	1821883a 	mov	r16,r3
 5046434:	e17ff817 	ldw	r5,-32(fp)
 5046438:	e13ff417 	ldw	r4,-48(fp)
 504643c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046440:	1007883a 	mov	r3,r2
 5046444:	1805883a 	mov	r2,r3
 5046448:	100b883a 	mov	r5,r2
 504644c:	8009883a 	mov	r4,r16
 5046450:	504b4a80 	call	504b4a8 <__addsf3>
 5046454:	1009883a 	mov	r4,r2
 5046458:	2007883a 	mov	r3,r4
 504645c:	e0bffb17 	ldw	r2,-20(fp)
 5046460:	10c07a15 	stw	r3,488(r2)
    rotation_matrix[M4(2,1)] = ad*f + b*e;
 5046464:	e17ff817 	ldw	r5,-32(fp)
 5046468:	e13ff917 	ldw	r4,-28(fp)
 504646c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046470:	1007883a 	mov	r3,r2
 5046474:	1821883a 	mov	r16,r3
 5046478:	e17ff717 	ldw	r5,-36(fp)
 504647c:	e13ff417 	ldw	r4,-48(fp)
 5046480:	504bdb00 	call	504bdb0 <__mulsf3>
 5046484:	1007883a 	mov	r3,r2
 5046488:	1805883a 	mov	r2,r3
 504648c:	100b883a 	mov	r5,r2
 5046490:	8009883a 	mov	r4,r16
 5046494:	504b4a80 	call	504b4a8 <__addsf3>
 5046498:	1009883a 	mov	r4,r2
 504649c:	2007883a 	mov	r3,r4
 50464a0:	e0bffb17 	ldw	r2,-20(fp)
 50464a4:	10c07b15 	stw	r3,492(r2)
    rotation_matrix[M4(2,2)] = a*c;
 50464a8:	e17ff517 	ldw	r5,-44(fp)
 50464ac:	e13ff317 	ldw	r4,-52(fp)
 50464b0:	504bdb00 	call	504bdb0 <__mulsf3>
 50464b4:	1009883a 	mov	r4,r2
 50464b8:	2007883a 	mov	r3,r4
 50464bc:	e0bffb17 	ldw	r2,-20(fp)
 50464c0:	10c07c15 	stw	r3,496(r2)
}
 50464c4:	0001883a 	nop
 50464c8:	e6ffff04 	addi	sp,fp,-4
 50464cc:	dfc00217 	ldw	ra,8(sp)
 50464d0:	df000117 	ldw	fp,4(sp)
 50464d4:	dc000017 	ldw	r16,0(sp)
 50464d8:	dec00304 	addi	sp,sp,12
 50464dc:	f800283a 	ret

050464e0 <_ZN7Cube_3D15update_rotationEfi>:

void Cube_3D::update_rotation(float new_value, int axis){
 50464e0:	defffb04 	addi	sp,sp,-20
 50464e4:	dfc00415 	stw	ra,16(sp)
 50464e8:	df000315 	stw	fp,12(sp)
 50464ec:	df000304 	addi	fp,sp,12
 50464f0:	e13ffd15 	stw	r4,-12(fp)
 50464f4:	e17ffe15 	stw	r5,-8(fp)
 50464f8:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 50464fc:	e0bfff17 	ldw	r2,-4(fp)
 5046500:	10c00060 	cmpeqi	r3,r2,1
 5046504:	1800071e 	bne	r3,zero,5046524 <_ZN7Cube_3D15update_rotationEfi+0x44>
 5046508:	10c000a0 	cmpeqi	r3,r2,2
 504650c:	1800091e 	bne	r3,zero,5046534 <_ZN7Cube_3D15update_rotationEfi+0x54>
 5046510:	10000c1e 	bne	r2,zero,5046544 <_ZN7Cube_3D15update_rotationEfi+0x64>
    {
        case X:
            rotation[X] = new_value;
 5046514:	e0bffd17 	ldw	r2,-12(fp)
 5046518:	e0fffe17 	ldw	r3,-8(fp)
 504651c:	10c00315 	stw	r3,12(r2)
            break;
 5046520:	00000806 	br	5046544 <_ZN7Cube_3D15update_rotationEfi+0x64>
        case Y:
            rotation[Y] = new_value;
 5046524:	e0bffd17 	ldw	r2,-12(fp)
 5046528:	e0fffe17 	ldw	r3,-8(fp)
 504652c:	10c00415 	stw	r3,16(r2)
            break;
 5046530:	00000406 	br	5046544 <_ZN7Cube_3D15update_rotationEfi+0x64>
        case Z:
            rotation[Z] = new_value;
 5046534:	e0bffd17 	ldw	r2,-12(fp)
 5046538:	e0fffe17 	ldw	r3,-8(fp)
 504653c:	10c00515 	stw	r3,20(r2)
            break;
 5046540:	0001883a 	nop
    }
    update_rotation(rotation[X], rotation[Y], rotation[Z]);
 5046544:	e0bffd17 	ldw	r2,-12(fp)
 5046548:	10c00317 	ldw	r3,12(r2)
 504654c:	e0bffd17 	ldw	r2,-12(fp)
 5046550:	11000417 	ldw	r4,16(r2)
 5046554:	e0bffd17 	ldw	r2,-12(fp)
 5046558:	11400517 	ldw	r5,20(r2)
 504655c:	280f883a 	mov	r7,r5
 5046560:	200d883a 	mov	r6,r4
 5046564:	180b883a 	mov	r5,r3
 5046568:	e13ffd17 	ldw	r4,-12(fp)
 504656c:	50461280 	call	5046128 <_ZN7Cube_3D15update_rotationEfff>
}
 5046570:	0001883a 	nop
 5046574:	e037883a 	mov	sp,fp
 5046578:	dfc00117 	ldw	ra,4(sp)
 504657c:	df000017 	ldw	fp,0(sp)
 5046580:	dec00204 	addi	sp,sp,8
 5046584:	f800283a 	ret

05046588 <_ZN7Cube_3D24update_rotation_relativeEfi>:

void Cube_3D::update_rotation_relative(float new_value, int axis){
 5046588:	defffb04 	addi	sp,sp,-20
 504658c:	dfc00415 	stw	ra,16(sp)
 5046590:	df000315 	stw	fp,12(sp)
 5046594:	df000304 	addi	fp,sp,12
 5046598:	e13ffd15 	stw	r4,-12(fp)
 504659c:	e17ffe15 	stw	r5,-8(fp)
 50465a0:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 50465a4:	e0bfff17 	ldw	r2,-4(fp)
 50465a8:	10c00060 	cmpeqi	r3,r2,1
 50465ac:	1800331e 	bne	r3,zero,504667c <_ZN7Cube_3D24update_rotation_relativeEfi+0xf4>
 50465b0:	10c000a0 	cmpeqi	r3,r2,2
 50465b4:	1800611e 	bne	r3,zero,504673c <_ZN7Cube_3D24update_rotation_relativeEfi+0x1b4>
 50465b8:	1000901e 	bne	r2,zero,50467fc <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
    {
        case X:
            rotation[X] += new_value;
 50465bc:	e0bffd17 	ldw	r2,-12(fp)
 50465c0:	10c00317 	ldw	r3,12(r2)
 50465c4:	e17ffe17 	ldw	r5,-8(fp)
 50465c8:	1809883a 	mov	r4,r3
 50465cc:	504b4a80 	call	504b4a8 <__addsf3>
 50465d0:	1009883a 	mov	r4,r2
 50465d4:	2007883a 	mov	r3,r4
 50465d8:	e0bffd17 	ldw	r2,-12(fp)
 50465dc:	10c00315 	stw	r3,12(r2)
            if(rotation[X]>2*M_PI)
 50465e0:	e0bffd17 	ldw	r2,-12(fp)
 50465e4:	10c00317 	ldw	r3,12(r2)
 50465e8:	1809883a 	mov	r4,r3
 50465ec:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50465f0:	1011883a 	mov	r8,r2
 50465f4:	1813883a 	mov	r9,r3
 50465f8:	01951134 	movhi	r6,21572
 50465fc:	318b4604 	addi	r6,r6,11544
 5046600:	01d00674 	movhi	r7,16409
 5046604:	39c87ec4 	addi	r7,r7,8699
 5046608:	4009883a 	mov	r4,r8
 504660c:	480b883a 	mov	r5,r9
 5046610:	504db300 	call	504db30 <__gedf2>
 5046614:	00800116 	blt	zero,r2,504661c <_ZN7Cube_3D24update_rotation_relativeEfi+0x94>
                rotation[X]-=2*M_PI;
            break;
 5046618:	00007806 	br	50467fc <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
    switch(axis)
    {
        case X:
            rotation[X] += new_value;
            if(rotation[X]>2*M_PI)
                rotation[X]-=2*M_PI;
 504661c:	e0bffd17 	ldw	r2,-12(fp)
 5046620:	10c00317 	ldw	r3,12(r2)
 5046624:	1809883a 	mov	r4,r3
 5046628:	504ed7c0 	call	504ed7c <__extendsfdf2>
 504662c:	1011883a 	mov	r8,r2
 5046630:	1813883a 	mov	r9,r3
 5046634:	01951134 	movhi	r6,21572
 5046638:	318b4604 	addi	r6,r6,11544
 504663c:	01d00674 	movhi	r7,16409
 5046640:	39c87ec4 	addi	r7,r7,8699
 5046644:	4009883a 	mov	r4,r8
 5046648:	480b883a 	mov	r5,r9
 504664c:	504e3240 	call	504e324 <__subdf3>
 5046650:	1009883a 	mov	r4,r2
 5046654:	180b883a 	mov	r5,r3
 5046658:	2005883a 	mov	r2,r4
 504665c:	2807883a 	mov	r3,r5
 5046660:	1009883a 	mov	r4,r2
 5046664:	180b883a 	mov	r5,r3
 5046668:	504ee8c0 	call	504ee8c <__truncdfsf2>
 504666c:	1007883a 	mov	r3,r2
 5046670:	e0bffd17 	ldw	r2,-12(fp)
 5046674:	10c00315 	stw	r3,12(r2)
            break;
 5046678:	00006006 	br	50467fc <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
        case Y:
            rotation[Y] += new_value;
 504667c:	e0bffd17 	ldw	r2,-12(fp)
 5046680:	10c00417 	ldw	r3,16(r2)
 5046684:	e17ffe17 	ldw	r5,-8(fp)
 5046688:	1809883a 	mov	r4,r3
 504668c:	504b4a80 	call	504b4a8 <__addsf3>
 5046690:	1009883a 	mov	r4,r2
 5046694:	2007883a 	mov	r3,r4
 5046698:	e0bffd17 	ldw	r2,-12(fp)
 504669c:	10c00415 	stw	r3,16(r2)
            if(rotation[Y]>2*M_PI)
 50466a0:	e0bffd17 	ldw	r2,-12(fp)
 50466a4:	10c00417 	ldw	r3,16(r2)
 50466a8:	1809883a 	mov	r4,r3
 50466ac:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50466b0:	1011883a 	mov	r8,r2
 50466b4:	1813883a 	mov	r9,r3
 50466b8:	01951134 	movhi	r6,21572
 50466bc:	318b4604 	addi	r6,r6,11544
 50466c0:	01d00674 	movhi	r7,16409
 50466c4:	39c87ec4 	addi	r7,r7,8699
 50466c8:	4009883a 	mov	r4,r8
 50466cc:	480b883a 	mov	r5,r9
 50466d0:	504db300 	call	504db30 <__gedf2>
 50466d4:	00800116 	blt	zero,r2,50466dc <_ZN7Cube_3D24update_rotation_relativeEfi+0x154>
                rotation[Y]-=2*M_PI;
            break;
 50466d8:	00004806 	br	50467fc <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
                rotation[X]-=2*M_PI;
            break;
        case Y:
            rotation[Y] += new_value;
            if(rotation[Y]>2*M_PI)
                rotation[Y]-=2*M_PI;
 50466dc:	e0bffd17 	ldw	r2,-12(fp)
 50466e0:	10c00417 	ldw	r3,16(r2)
 50466e4:	1809883a 	mov	r4,r3
 50466e8:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50466ec:	1011883a 	mov	r8,r2
 50466f0:	1813883a 	mov	r9,r3
 50466f4:	01951134 	movhi	r6,21572
 50466f8:	318b4604 	addi	r6,r6,11544
 50466fc:	01d00674 	movhi	r7,16409
 5046700:	39c87ec4 	addi	r7,r7,8699
 5046704:	4009883a 	mov	r4,r8
 5046708:	480b883a 	mov	r5,r9
 504670c:	504e3240 	call	504e324 <__subdf3>
 5046710:	1009883a 	mov	r4,r2
 5046714:	180b883a 	mov	r5,r3
 5046718:	2005883a 	mov	r2,r4
 504671c:	2807883a 	mov	r3,r5
 5046720:	1009883a 	mov	r4,r2
 5046724:	180b883a 	mov	r5,r3
 5046728:	504ee8c0 	call	504ee8c <__truncdfsf2>
 504672c:	1007883a 	mov	r3,r2
 5046730:	e0bffd17 	ldw	r2,-12(fp)
 5046734:	10c00415 	stw	r3,16(r2)
            break;
 5046738:	00003006 	br	50467fc <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
        case Z:
            rotation[Z] += new_value;
 504673c:	e0bffd17 	ldw	r2,-12(fp)
 5046740:	10c00517 	ldw	r3,20(r2)
 5046744:	e17ffe17 	ldw	r5,-8(fp)
 5046748:	1809883a 	mov	r4,r3
 504674c:	504b4a80 	call	504b4a8 <__addsf3>
 5046750:	1009883a 	mov	r4,r2
 5046754:	2007883a 	mov	r3,r4
 5046758:	e0bffd17 	ldw	r2,-12(fp)
 504675c:	10c00515 	stw	r3,20(r2)
            if(rotation[Z]>2*M_PI)
 5046760:	e0bffd17 	ldw	r2,-12(fp)
 5046764:	10c00517 	ldw	r3,20(r2)
 5046768:	1809883a 	mov	r4,r3
 504676c:	504ed7c0 	call	504ed7c <__extendsfdf2>
 5046770:	1011883a 	mov	r8,r2
 5046774:	1813883a 	mov	r9,r3
 5046778:	01951134 	movhi	r6,21572
 504677c:	318b4604 	addi	r6,r6,11544
 5046780:	01d00674 	movhi	r7,16409
 5046784:	39c87ec4 	addi	r7,r7,8699
 5046788:	4009883a 	mov	r4,r8
 504678c:	480b883a 	mov	r5,r9
 5046790:	504db300 	call	504db30 <__gedf2>
 5046794:	00800116 	blt	zero,r2,504679c <_ZN7Cube_3D24update_rotation_relativeEfi+0x214>
                rotation[Z]-=2*M_PI;
            break;
 5046798:	00001706 	br	50467f8 <_ZN7Cube_3D24update_rotation_relativeEfi+0x270>
                rotation[Y]-=2*M_PI;
            break;
        case Z:
            rotation[Z] += new_value;
            if(rotation[Z]>2*M_PI)
                rotation[Z]-=2*M_PI;
 504679c:	e0bffd17 	ldw	r2,-12(fp)
 50467a0:	10c00517 	ldw	r3,20(r2)
 50467a4:	1809883a 	mov	r4,r3
 50467a8:	504ed7c0 	call	504ed7c <__extendsfdf2>
 50467ac:	1011883a 	mov	r8,r2
 50467b0:	1813883a 	mov	r9,r3
 50467b4:	01951134 	movhi	r6,21572
 50467b8:	318b4604 	addi	r6,r6,11544
 50467bc:	01d00674 	movhi	r7,16409
 50467c0:	39c87ec4 	addi	r7,r7,8699
 50467c4:	4009883a 	mov	r4,r8
 50467c8:	480b883a 	mov	r5,r9
 50467cc:	504e3240 	call	504e324 <__subdf3>
 50467d0:	1009883a 	mov	r4,r2
 50467d4:	180b883a 	mov	r5,r3
 50467d8:	2005883a 	mov	r2,r4
 50467dc:	2807883a 	mov	r3,r5
 50467e0:	1009883a 	mov	r4,r2
 50467e4:	180b883a 	mov	r5,r3
 50467e8:	504ee8c0 	call	504ee8c <__truncdfsf2>
 50467ec:	1007883a 	mov	r3,r2
 50467f0:	e0bffd17 	ldw	r2,-12(fp)
 50467f4:	10c00515 	stw	r3,20(r2)
            break;
 50467f8:	0001883a 	nop
    }
    update_rotation(rotation[X], rotation[Y], rotation[Z]);
 50467fc:	e0bffd17 	ldw	r2,-12(fp)
 5046800:	10c00317 	ldw	r3,12(r2)
 5046804:	e0bffd17 	ldw	r2,-12(fp)
 5046808:	11000417 	ldw	r4,16(r2)
 504680c:	e0bffd17 	ldw	r2,-12(fp)
 5046810:	11400517 	ldw	r5,20(r2)
 5046814:	280f883a 	mov	r7,r5
 5046818:	200d883a 	mov	r6,r4
 504681c:	180b883a 	mov	r5,r3
 5046820:	e13ffd17 	ldw	r4,-12(fp)
 5046824:	50461280 	call	5046128 <_ZN7Cube_3D15update_rotationEfff>
    #ifdef DEBUG_ACC
    printf("rx=%f,ry=%f,rz=%f /n",rotation[X],rotation[Y],rotation[Z]);
    #endif
}
 5046828:	0001883a 	nop
 504682c:	e037883a 	mov	sp,fp
 5046830:	dfc00117 	ldw	ra,4(sp)
 5046834:	df000017 	ldw	fp,0(sp)
 5046838:	dec00204 	addi	sp,sp,8
 504683c:	f800283a 	ret

05046840 <_ZN7Cube_3D14update_scalingEfff>:

void Cube_3D::update_scaling(float sx, float sy, float sz){
 5046840:	defffb04 	addi	sp,sp,-20
 5046844:	df000415 	stw	fp,16(sp)
 5046848:	df000404 	addi	fp,sp,16
 504684c:	e13ffc15 	stw	r4,-16(fp)
 5046850:	e17ffd15 	stw	r5,-12(fp)
 5046854:	e1bffe15 	stw	r6,-8(fp)
 5046858:	e1ffff15 	stw	r7,-4(fp)
    scaling[X] = sx;
 504685c:	e0bffc17 	ldw	r2,-16(fp)
 5046860:	e0fffd17 	ldw	r3,-12(fp)
 5046864:	10c00615 	stw	r3,24(r2)
    scaling_matrix[M4(0,0)] = sx;
 5046868:	e0bffc17 	ldw	r2,-16(fp)
 504686c:	e0fffd17 	ldw	r3,-12(fp)
 5046870:	10c09215 	stw	r3,584(r2)

    scaling[Y] = sy;
 5046874:	e0bffc17 	ldw	r2,-16(fp)
 5046878:	e0fffe17 	ldw	r3,-8(fp)
 504687c:	10c00715 	stw	r3,28(r2)
    scaling_matrix[M4(1,1)] = sy;
 5046880:	e0bffc17 	ldw	r2,-16(fp)
 5046884:	e0fffe17 	ldw	r3,-8(fp)
 5046888:	10c09715 	stw	r3,604(r2)

    scaling[Z] = sz;
 504688c:	e0bffc17 	ldw	r2,-16(fp)
 5046890:	e0ffff17 	ldw	r3,-4(fp)
 5046894:	10c00815 	stw	r3,32(r2)
    scaling_matrix[M4(2,2)] = sz;
 5046898:	e0bffc17 	ldw	r2,-16(fp)
 504689c:	e0ffff17 	ldw	r3,-4(fp)
 50468a0:	10c09c15 	stw	r3,624(r2)
}
 50468a4:	0001883a 	nop
 50468a8:	e037883a 	mov	sp,fp
 50468ac:	df000017 	ldw	fp,0(sp)
 50468b0:	dec00104 	addi	sp,sp,4
 50468b4:	f800283a 	ret

050468b8 <_ZN7Cube_3D14update_scalingEfi>:

void Cube_3D::update_scaling(float new_value, int axis){
 50468b8:	defffb04 	addi	sp,sp,-20
 50468bc:	dfc00415 	stw	ra,16(sp)
 50468c0:	df000315 	stw	fp,12(sp)
 50468c4:	df000304 	addi	fp,sp,12
 50468c8:	e13ffd15 	stw	r4,-12(fp)
 50468cc:	e17ffe15 	stw	r5,-8(fp)
 50468d0:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 50468d4:	e0bfff17 	ldw	r2,-4(fp)
 50468d8:	10c00060 	cmpeqi	r3,r2,1
 50468dc:	1800071e 	bne	r3,zero,50468fc <_ZN7Cube_3D14update_scalingEfi+0x44>
 50468e0:	10c000a0 	cmpeqi	r3,r2,2
 50468e4:	1800091e 	bne	r3,zero,504690c <_ZN7Cube_3D14update_scalingEfi+0x54>
 50468e8:	10000c1e 	bne	r2,zero,504691c <_ZN7Cube_3D14update_scalingEfi+0x64>
    {
        case X:
            scaling[X] = new_value;
 50468ec:	e0bffd17 	ldw	r2,-12(fp)
 50468f0:	e0fffe17 	ldw	r3,-8(fp)
 50468f4:	10c00615 	stw	r3,24(r2)
            break;
 50468f8:	00000806 	br	504691c <_ZN7Cube_3D14update_scalingEfi+0x64>
        case Y:
            scaling[Y] = new_value;
 50468fc:	e0bffd17 	ldw	r2,-12(fp)
 5046900:	e0fffe17 	ldw	r3,-8(fp)
 5046904:	10c00715 	stw	r3,28(r2)
            break;
 5046908:	00000406 	br	504691c <_ZN7Cube_3D14update_scalingEfi+0x64>
        case Z:
            scaling[Z] = new_value;
 504690c:	e0bffd17 	ldw	r2,-12(fp)
 5046910:	e0fffe17 	ldw	r3,-8(fp)
 5046914:	10c00815 	stw	r3,32(r2)
            break;
 5046918:	0001883a 	nop
    }
    update_scaling(scaling[X], scaling[Y], scaling[Z]);
 504691c:	e0bffd17 	ldw	r2,-12(fp)
 5046920:	10c00617 	ldw	r3,24(r2)
 5046924:	e0bffd17 	ldw	r2,-12(fp)
 5046928:	11000717 	ldw	r4,28(r2)
 504692c:	e0bffd17 	ldw	r2,-12(fp)
 5046930:	11400817 	ldw	r5,32(r2)
 5046934:	280f883a 	mov	r7,r5
 5046938:	200d883a 	mov	r6,r4
 504693c:	180b883a 	mov	r5,r3
 5046940:	e13ffd17 	ldw	r4,-12(fp)
 5046944:	50468400 	call	5046840 <_ZN7Cube_3D14update_scalingEfff>
}
 5046948:	0001883a 	nop
 504694c:	e037883a 	mov	sp,fp
 5046950:	dfc00117 	ldw	ra,4(sp)
 5046954:	df000017 	ldw	fp,0(sp)
 5046958:	dec00204 	addi	sp,sp,8
 504695c:	f800283a 	ret

05046960 <_ZN7Cube_3D23update_scaling_relativeEfi>:

void Cube_3D::update_scaling_relative(float new_value, int axis){
 5046960:	defffb04 	addi	sp,sp,-20
 5046964:	dfc00415 	stw	ra,16(sp)
 5046968:	df000315 	stw	fp,12(sp)
 504696c:	df000304 	addi	fp,sp,12
 5046970:	e13ffd15 	stw	r4,-12(fp)
 5046974:	e17ffe15 	stw	r5,-8(fp)
 5046978:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
 504697c:	e0bfff17 	ldw	r2,-4(fp)
 5046980:	10c00060 	cmpeqi	r3,r2,1
 5046984:	18000d1e 	bne	r3,zero,50469bc <_ZN7Cube_3D23update_scaling_relativeEfi+0x5c>
 5046988:	10c000a0 	cmpeqi	r3,r2,2
 504698c:	1800151e 	bne	r3,zero,50469e4 <_ZN7Cube_3D23update_scaling_relativeEfi+0x84>
 5046990:	10001e1e 	bne	r2,zero,5046a0c <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
    {
        case X:
            scaling[X] += new_value;
 5046994:	e0bffd17 	ldw	r2,-12(fp)
 5046998:	10c00617 	ldw	r3,24(r2)
 504699c:	e17ffe17 	ldw	r5,-8(fp)
 50469a0:	1809883a 	mov	r4,r3
 50469a4:	504b4a80 	call	504b4a8 <__addsf3>
 50469a8:	1009883a 	mov	r4,r2
 50469ac:	2007883a 	mov	r3,r4
 50469b0:	e0bffd17 	ldw	r2,-12(fp)
 50469b4:	10c00615 	stw	r3,24(r2)
            break;
 50469b8:	00001406 	br	5046a0c <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
        case Y:
            scaling[Y] += new_value;
 50469bc:	e0bffd17 	ldw	r2,-12(fp)
 50469c0:	10c00717 	ldw	r3,28(r2)
 50469c4:	e17ffe17 	ldw	r5,-8(fp)
 50469c8:	1809883a 	mov	r4,r3
 50469cc:	504b4a80 	call	504b4a8 <__addsf3>
 50469d0:	1009883a 	mov	r4,r2
 50469d4:	2007883a 	mov	r3,r4
 50469d8:	e0bffd17 	ldw	r2,-12(fp)
 50469dc:	10c00715 	stw	r3,28(r2)
            break;
 50469e0:	00000a06 	br	5046a0c <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
        case Z:
            scaling[Z] += new_value;
 50469e4:	e0bffd17 	ldw	r2,-12(fp)
 50469e8:	10c00817 	ldw	r3,32(r2)
 50469ec:	e17ffe17 	ldw	r5,-8(fp)
 50469f0:	1809883a 	mov	r4,r3
 50469f4:	504b4a80 	call	504b4a8 <__addsf3>
 50469f8:	1009883a 	mov	r4,r2
 50469fc:	2007883a 	mov	r3,r4
 5046a00:	e0bffd17 	ldw	r2,-12(fp)
 5046a04:	10c00815 	stw	r3,32(r2)
            break;
 5046a08:	0001883a 	nop
    }
    update_scaling(scaling[X], scaling[Y], scaling[Z]);
 5046a0c:	e0bffd17 	ldw	r2,-12(fp)
 5046a10:	10c00617 	ldw	r3,24(r2)
 5046a14:	e0bffd17 	ldw	r2,-12(fp)
 5046a18:	11000717 	ldw	r4,28(r2)
 5046a1c:	e0bffd17 	ldw	r2,-12(fp)
 5046a20:	11400817 	ldw	r5,32(r2)
 5046a24:	280f883a 	mov	r7,r5
 5046a28:	200d883a 	mov	r6,r4
 5046a2c:	180b883a 	mov	r5,r3
 5046a30:	e13ffd17 	ldw	r4,-12(fp)
 5046a34:	50468400 	call	5046840 <_ZN7Cube_3D14update_scalingEfff>
}
 5046a38:	0001883a 	nop
 5046a3c:	e037883a 	mov	sp,fp
 5046a40:	dfc00117 	ldw	ra,4(sp)
 5046a44:	df000017 	ldw	fp,0(sp)
 5046a48:	dec00204 	addi	sp,sp,8
 5046a4c:	f800283a 	ret

05046a50 <_ZN7Cube_3D13display_frameEv>:


int Cube_3D::display_frame(){
 5046a50:	defff904 	addi	sp,sp,-28
 5046a54:	dfc00615 	stw	ra,24(sp)
 5046a58:	df000515 	stw	fp,20(sp)
 5046a5c:	df000504 	addi	fp,sp,20
 5046a60:	e13fff15 	stw	r4,-4(fp)
    //pulisco il back buffer
    alt_up_pixel_buffer_dma_clear_screen_delayed(pixel_buf_dma_dev,1);
 5046a64:	d0a80f17 	ldw	r2,-24516(gp)
 5046a68:	01400044 	movi	r5,1
 5046a6c:	1009883a 	mov	r4,r2
 5046a70:	50453d00 	call	50453d0 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi>
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[5][X],vertex_on_2D[5][Y],vertex_on_2D[6][X],vertex_on_2D[6][Y], YELLOW, 1);
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[6][X],vertex_on_2D[6][Y],vertex_on_2D[7][X],vertex_on_2D[7][Y], YELLOW, 1);

    //disegno il cubo tramite i vari triangoli
    //disegno una linea tra i vertici dei triangoli, indicizzando la matrice vertex_on_2D con il contenuto di faces, che contiene il n. del vertice di ciascun triangolo
    for(int i=0; i<N_FACES; i++){
 5046a74:	e03ffe15 	stw	zero,-8(fp)
 5046a78:	e0bffe17 	ldw	r2,-8(fp)
 5046a7c:	10800308 	cmpgei	r2,r2,12
 5046a80:	1000a91e 	bne	r2,zero,5046d28 <_ZN7Cube_3D13display_frameEv+0x2d8>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][A]][X], vertex_on_2D[faces[i][A]][Y],vertex_on_2D[faces[i][B]][X],vertex_on_2D[faces[i][B]][Y], GREEN, 1);
 5046a84:	d1280f17 	ldw	r4,-24516(gp)
 5046a88:	e0ffff17 	ldw	r3,-4(fp)
 5046a8c:	e0bffe17 	ldw	r2,-8(fp)
 5046a90:	108001a4 	muli	r2,r2,6
 5046a94:	1885883a 	add	r2,r3,r2
 5046a98:	1080f204 	addi	r2,r2,968
 5046a9c:	1080000b 	ldhu	r2,0(r2)
 5046aa0:	10bfffcc 	andi	r2,r2,65535
 5046aa4:	e0ffff17 	ldw	r3,-4(fp)
 5046aa8:	10800a44 	addi	r2,r2,41
 5046aac:	100490fa 	slli	r2,r2,3
 5046ab0:	1885883a 	add	r2,r3,r2
 5046ab4:	11400017 	ldw	r5,0(r2)
 5046ab8:	e0ffff17 	ldw	r3,-4(fp)
 5046abc:	e0bffe17 	ldw	r2,-8(fp)
 5046ac0:	108001a4 	muli	r2,r2,6
 5046ac4:	1885883a 	add	r2,r3,r2
 5046ac8:	1080f204 	addi	r2,r2,968
 5046acc:	1080000b 	ldhu	r2,0(r2)
 5046ad0:	10bfffcc 	andi	r2,r2,65535
 5046ad4:	e0ffff17 	ldw	r3,-4(fp)
 5046ad8:	100490fa 	slli	r2,r2,3
 5046adc:	1885883a 	add	r2,r3,r2
 5046ae0:	10805304 	addi	r2,r2,332
 5046ae4:	11800017 	ldw	r6,0(r2)
 5046ae8:	e0ffff17 	ldw	r3,-4(fp)
 5046aec:	e0bffe17 	ldw	r2,-8(fp)
 5046af0:	108001a4 	muli	r2,r2,6
 5046af4:	1885883a 	add	r2,r3,r2
 5046af8:	1080f284 	addi	r2,r2,970
 5046afc:	1080000b 	ldhu	r2,0(r2)
 5046b00:	10bfffcc 	andi	r2,r2,65535
 5046b04:	e0ffff17 	ldw	r3,-4(fp)
 5046b08:	10800a44 	addi	r2,r2,41
 5046b0c:	100490fa 	slli	r2,r2,3
 5046b10:	1885883a 	add	r2,r3,r2
 5046b14:	11c00017 	ldw	r7,0(r2)
 5046b18:	e0ffff17 	ldw	r3,-4(fp)
 5046b1c:	e0bffe17 	ldw	r2,-8(fp)
 5046b20:	108001a4 	muli	r2,r2,6
 5046b24:	1885883a 	add	r2,r3,r2
 5046b28:	1080f284 	addi	r2,r2,970
 5046b2c:	1080000b 	ldhu	r2,0(r2)
 5046b30:	10bfffcc 	andi	r2,r2,65535
 5046b34:	e0ffff17 	ldw	r3,-4(fp)
 5046b38:	100490fa 	slli	r2,r2,3
 5046b3c:	1885883a 	add	r2,r3,r2
 5046b40:	10805304 	addi	r2,r2,332
 5046b44:	10800017 	ldw	r2,0(r2)
 5046b48:	00c00044 	movi	r3,1
 5046b4c:	d8c00215 	stw	r3,8(sp)
 5046b50:	00c1f804 	movi	r3,2016
 5046b54:	d8c00115 	stw	r3,4(sp)
 5046b58:	d8800015 	stw	r2,0(sp)
 5046b5c:	50455d00 	call	50455d0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][B]][X], vertex_on_2D[faces[i][B]][Y],vertex_on_2D[faces[i][C]][X],vertex_on_2D[faces[i][C]][Y], GREEN, 1);
 5046b60:	d1280f17 	ldw	r4,-24516(gp)
 5046b64:	e0ffff17 	ldw	r3,-4(fp)
 5046b68:	e0bffe17 	ldw	r2,-8(fp)
 5046b6c:	108001a4 	muli	r2,r2,6
 5046b70:	1885883a 	add	r2,r3,r2
 5046b74:	1080f284 	addi	r2,r2,970
 5046b78:	1080000b 	ldhu	r2,0(r2)
 5046b7c:	10bfffcc 	andi	r2,r2,65535
 5046b80:	e0ffff17 	ldw	r3,-4(fp)
 5046b84:	10800a44 	addi	r2,r2,41
 5046b88:	100490fa 	slli	r2,r2,3
 5046b8c:	1885883a 	add	r2,r3,r2
 5046b90:	11400017 	ldw	r5,0(r2)
 5046b94:	e0ffff17 	ldw	r3,-4(fp)
 5046b98:	e0bffe17 	ldw	r2,-8(fp)
 5046b9c:	108001a4 	muli	r2,r2,6
 5046ba0:	1885883a 	add	r2,r3,r2
 5046ba4:	1080f284 	addi	r2,r2,970
 5046ba8:	1080000b 	ldhu	r2,0(r2)
 5046bac:	10bfffcc 	andi	r2,r2,65535
 5046bb0:	e0ffff17 	ldw	r3,-4(fp)
 5046bb4:	100490fa 	slli	r2,r2,3
 5046bb8:	1885883a 	add	r2,r3,r2
 5046bbc:	10805304 	addi	r2,r2,332
 5046bc0:	11800017 	ldw	r6,0(r2)
 5046bc4:	e0ffff17 	ldw	r3,-4(fp)
 5046bc8:	e0bffe17 	ldw	r2,-8(fp)
 5046bcc:	108001a4 	muli	r2,r2,6
 5046bd0:	1885883a 	add	r2,r3,r2
 5046bd4:	1080f304 	addi	r2,r2,972
 5046bd8:	1080000b 	ldhu	r2,0(r2)
 5046bdc:	10bfffcc 	andi	r2,r2,65535
 5046be0:	e0ffff17 	ldw	r3,-4(fp)
 5046be4:	10800a44 	addi	r2,r2,41
 5046be8:	100490fa 	slli	r2,r2,3
 5046bec:	1885883a 	add	r2,r3,r2
 5046bf0:	11c00017 	ldw	r7,0(r2)
 5046bf4:	e0ffff17 	ldw	r3,-4(fp)
 5046bf8:	e0bffe17 	ldw	r2,-8(fp)
 5046bfc:	108001a4 	muli	r2,r2,6
 5046c00:	1885883a 	add	r2,r3,r2
 5046c04:	1080f304 	addi	r2,r2,972
 5046c08:	1080000b 	ldhu	r2,0(r2)
 5046c0c:	10bfffcc 	andi	r2,r2,65535
 5046c10:	e0ffff17 	ldw	r3,-4(fp)
 5046c14:	100490fa 	slli	r2,r2,3
 5046c18:	1885883a 	add	r2,r3,r2
 5046c1c:	10805304 	addi	r2,r2,332
 5046c20:	10800017 	ldw	r2,0(r2)
 5046c24:	00c00044 	movi	r3,1
 5046c28:	d8c00215 	stw	r3,8(sp)
 5046c2c:	00c1f804 	movi	r3,2016
 5046c30:	d8c00115 	stw	r3,4(sp)
 5046c34:	d8800015 	stw	r2,0(sp)
 5046c38:	50455d00 	call	50455d0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][C]][X], vertex_on_2D[faces[i][C]][Y],vertex_on_2D[faces[i][A]][X],vertex_on_2D[faces[i][A]][Y], GREEN, 1);
 5046c3c:	d1280f17 	ldw	r4,-24516(gp)
 5046c40:	e0ffff17 	ldw	r3,-4(fp)
 5046c44:	e0bffe17 	ldw	r2,-8(fp)
 5046c48:	108001a4 	muli	r2,r2,6
 5046c4c:	1885883a 	add	r2,r3,r2
 5046c50:	1080f304 	addi	r2,r2,972
 5046c54:	1080000b 	ldhu	r2,0(r2)
 5046c58:	10bfffcc 	andi	r2,r2,65535
 5046c5c:	e0ffff17 	ldw	r3,-4(fp)
 5046c60:	10800a44 	addi	r2,r2,41
 5046c64:	100490fa 	slli	r2,r2,3
 5046c68:	1885883a 	add	r2,r3,r2
 5046c6c:	11400017 	ldw	r5,0(r2)
 5046c70:	e0ffff17 	ldw	r3,-4(fp)
 5046c74:	e0bffe17 	ldw	r2,-8(fp)
 5046c78:	108001a4 	muli	r2,r2,6
 5046c7c:	1885883a 	add	r2,r3,r2
 5046c80:	1080f304 	addi	r2,r2,972
 5046c84:	1080000b 	ldhu	r2,0(r2)
 5046c88:	10bfffcc 	andi	r2,r2,65535
 5046c8c:	e0ffff17 	ldw	r3,-4(fp)
 5046c90:	100490fa 	slli	r2,r2,3
 5046c94:	1885883a 	add	r2,r3,r2
 5046c98:	10805304 	addi	r2,r2,332
 5046c9c:	11800017 	ldw	r6,0(r2)
 5046ca0:	e0ffff17 	ldw	r3,-4(fp)
 5046ca4:	e0bffe17 	ldw	r2,-8(fp)
 5046ca8:	108001a4 	muli	r2,r2,6
 5046cac:	1885883a 	add	r2,r3,r2
 5046cb0:	1080f204 	addi	r2,r2,968
 5046cb4:	1080000b 	ldhu	r2,0(r2)
 5046cb8:	10bfffcc 	andi	r2,r2,65535
 5046cbc:	e0ffff17 	ldw	r3,-4(fp)
 5046cc0:	10800a44 	addi	r2,r2,41
 5046cc4:	100490fa 	slli	r2,r2,3
 5046cc8:	1885883a 	add	r2,r3,r2
 5046ccc:	11c00017 	ldw	r7,0(r2)
 5046cd0:	e0ffff17 	ldw	r3,-4(fp)
 5046cd4:	e0bffe17 	ldw	r2,-8(fp)
 5046cd8:	108001a4 	muli	r2,r2,6
 5046cdc:	1885883a 	add	r2,r3,r2
 5046ce0:	1080f204 	addi	r2,r2,968
 5046ce4:	1080000b 	ldhu	r2,0(r2)
 5046ce8:	10bfffcc 	andi	r2,r2,65535
 5046cec:	e0ffff17 	ldw	r3,-4(fp)
 5046cf0:	100490fa 	slli	r2,r2,3
 5046cf4:	1885883a 	add	r2,r3,r2
 5046cf8:	10805304 	addi	r2,r2,332
 5046cfc:	10800017 	ldw	r2,0(r2)
 5046d00:	00c00044 	movi	r3,1
 5046d04:	d8c00215 	stw	r3,8(sp)
 5046d08:	00c1f804 	movi	r3,2016
 5046d0c:	d8c00115 	stw	r3,4(sp)
 5046d10:	d8800015 	stw	r2,0(sp)
 5046d14:	50455d00 	call	50455d0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[5][X],vertex_on_2D[5][Y],vertex_on_2D[6][X],vertex_on_2D[6][Y], YELLOW, 1);
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[6][X],vertex_on_2D[6][Y],vertex_on_2D[7][X],vertex_on_2D[7][Y], YELLOW, 1);

    //disegno il cubo tramite i vari triangoli
    //disegno una linea tra i vertici dei triangoli, indicizzando la matrice vertex_on_2D con il contenuto di faces, che contiene il n. del vertice di ciascun triangolo
    for(int i=0; i<N_FACES; i++){
 5046d18:	e0bffe17 	ldw	r2,-8(fp)
 5046d1c:	10800044 	addi	r2,r2,1
 5046d20:	e0bffe15 	stw	r2,-8(fp)
 5046d24:	003f5406 	br	5046a78 <_gp+0xfffdb650>
    }
    //disegna linea giusto per vedere se effettivamente programma
    //alt_up_pixel_buffer_dma_draw_line(pixel_buf_dma_dev,25, 70,100,100, WHITE, 1);

    //swap del buffer, e attesa che sia eseguito
    alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dma_dev);
 5046d28:	d0a80f17 	ldw	r2,-24516(gp)
 5046d2c:	1009883a 	mov	r4,r2
 5046d30:	505f1740 	call	505f174 <alt_up_pixel_buffer_dma_swap_buffers>
    while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev)){;}
 5046d34:	d0a80f17 	ldw	r2,-24516(gp)
 5046d38:	1009883a 	mov	r4,r2
 5046d3c:	505f1d40 	call	505f1d4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 5046d40:	1004c03a 	cmpne	r2,r2,zero
 5046d44:	10803fcc 	andi	r2,r2,255
 5046d48:	10000126 	beq	r2,zero,5046d50 <_ZN7Cube_3D13display_frameEv+0x300>
 5046d4c:	003ff906 	br	5046d34 <_gp+0xfffdb90c>
    return 0;
 5046d50:	0005883a 	mov	r2,zero
}
 5046d54:	e037883a 	mov	sp,fp
 5046d58:	dfc00117 	ldw	ra,4(sp)
 5046d5c:	df000017 	ldw	fp,0(sp)
 5046d60:	dec00204 	addi	sp,sp,8
 5046d64:	f800283a 	ret

05046d68 <_ZN7Cube_3D22vector_matrix_multiplyEv>:

void Cube_3D::vector_matrix_multiply(){
 5046d68:	defff604 	addi	sp,sp,-40
 5046d6c:	dfc00915 	stw	ra,36(sp)
 5046d70:	df000815 	stw	fp,32(sp)
 5046d74:	dc400715 	stw	r17,28(sp)
 5046d78:	dc000615 	stw	r16,24(sp)
 5046d7c:	df000804 	addi	fp,sp,32
 5046d80:	e13ffd15 	stw	r4,-12(fp)
    #ifdef DEBUG_VECTORS
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
 5046d84:	e03ff815 	stw	zero,-32(fp)
 5046d88:	e0bff817 	ldw	r2,-32(fp)
 5046d8c:	10800208 	cmpgei	r2,r2,8
 5046d90:	10017a1e 	bne	r2,zero,504737c <_ZN7Cube_3D22vector_matrix_multiplyEv+0x614>
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
 5046d94:	e0bffd17 	ldw	r2,-12(fp)
 5046d98:	1100c217 	ldw	r4,776(r2)
 5046d9c:	e0fffd17 	ldw	r3,-12(fp)
 5046da0:	e0bff817 	ldw	r2,-32(fp)
 5046da4:	10800484 	addi	r2,r2,18
 5046da8:	1085883a 	add	r2,r2,r2
 5046dac:	1085883a 	add	r2,r2,r2
 5046db0:	1885883a 	add	r2,r3,r2
 5046db4:	10c00017 	ldw	r3,0(r2)
 5046db8:	180b883a 	mov	r5,r3
 5046dbc:	504bdb00 	call	504bdb0 <__mulsf3>
 5046dc0:	1007883a 	mov	r3,r2
 5046dc4:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
 5046dc8:	e0bffd17 	ldw	r2,-12(fp)
 5046dcc:	1100c317 	ldw	r4,780(r2)
 5046dd0:	e0bff817 	ldw	r2,-32(fp)
 5046dd4:	10800204 	addi	r2,r2,8
 5046dd8:	e0fffd17 	ldw	r3,-12(fp)
 5046ddc:	10800484 	addi	r2,r2,18
 5046de0:	1085883a 	add	r2,r2,r2
 5046de4:	1085883a 	add	r2,r2,r2
 5046de8:	1885883a 	add	r2,r3,r2
 5046dec:	10c00017 	ldw	r3,0(r2)
 5046df0:	180b883a 	mov	r5,r3
 5046df4:	504bdb00 	call	504bdb0 <__mulsf3>
 5046df8:	1007883a 	mov	r3,r2
 5046dfc:	1805883a 	mov	r2,r3
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
 5046e00:	100b883a 	mov	r5,r2
 5046e04:	8009883a 	mov	r4,r16
 5046e08:	504b4a80 	call	504b4a8 <__addsf3>
 5046e0c:	1007883a 	mov	r3,r2
 5046e10:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
 5046e14:	e0bffd17 	ldw	r2,-12(fp)
 5046e18:	1100c417 	ldw	r4,784(r2)
 5046e1c:	e0bff817 	ldw	r2,-32(fp)
 5046e20:	10800404 	addi	r2,r2,16
 5046e24:	e0fffd17 	ldw	r3,-12(fp)
 5046e28:	10800484 	addi	r2,r2,18
 5046e2c:	1085883a 	add	r2,r2,r2
 5046e30:	1085883a 	add	r2,r2,r2
 5046e34:	1885883a 	add	r2,r3,r2
 5046e38:	10c00017 	ldw	r3,0(r2)
 5046e3c:	180b883a 	mov	r5,r3
 5046e40:	504bdb00 	call	504bdb0 <__mulsf3>
 5046e44:	1007883a 	mov	r3,r2
 5046e48:	1805883a 	mov	r2,r3
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
 5046e4c:	100b883a 	mov	r5,r2
 5046e50:	8009883a 	mov	r4,r16
 5046e54:	504b4a80 	call	504b4a8 <__addsf3>
 5046e58:	1007883a 	mov	r3,r2
 5046e5c:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];
 5046e60:	e0bffd17 	ldw	r2,-12(fp)
 5046e64:	1100c517 	ldw	r4,788(r2)
 5046e68:	e0bff817 	ldw	r2,-32(fp)
 5046e6c:	10800604 	addi	r2,r2,24
 5046e70:	e0fffd17 	ldw	r3,-12(fp)
 5046e74:	10800484 	addi	r2,r2,18
 5046e78:	1085883a 	add	r2,r2,r2
 5046e7c:	1085883a 	add	r2,r2,r2
 5046e80:	1885883a 	add	r2,r3,r2
 5046e84:	10c00017 	ldw	r3,0(r2)
 5046e88:	180b883a 	mov	r5,r3
 5046e8c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046e90:	1007883a 	mov	r3,r2
 5046e94:	1805883a 	mov	r2,r3

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
 5046e98:	100b883a 	mov	r5,r2
 5046e9c:	8009883a 	mov	r4,r16
 5046ea0:	504b4a80 	call	504b4a8 <__addsf3>
 5046ea4:	1007883a 	mov	r3,r2
 5046ea8:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];
 5046eac:	e0bff915 	stw	r2,-28(fp)

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
 5046eb0:	e0bffd17 	ldw	r2,-12(fp)
 5046eb4:	1100c617 	ldw	r4,792(r2)
 5046eb8:	e0fffd17 	ldw	r3,-12(fp)
 5046ebc:	e0bff817 	ldw	r2,-32(fp)
 5046ec0:	10800484 	addi	r2,r2,18
 5046ec4:	1085883a 	add	r2,r2,r2
 5046ec8:	1085883a 	add	r2,r2,r2
 5046ecc:	1885883a 	add	r2,r3,r2
 5046ed0:	10c00017 	ldw	r3,0(r2)
 5046ed4:	180b883a 	mov	r5,r3
 5046ed8:	504bdb00 	call	504bdb0 <__mulsf3>
 5046edc:	1007883a 	mov	r3,r2
 5046ee0:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
 5046ee4:	e0bffd17 	ldw	r2,-12(fp)
 5046ee8:	1100c717 	ldw	r4,796(r2)
 5046eec:	e0bff817 	ldw	r2,-32(fp)
 5046ef0:	10800204 	addi	r2,r2,8
 5046ef4:	e0fffd17 	ldw	r3,-12(fp)
 5046ef8:	10800484 	addi	r2,r2,18
 5046efc:	1085883a 	add	r2,r2,r2
 5046f00:	1085883a 	add	r2,r2,r2
 5046f04:	1885883a 	add	r2,r3,r2
 5046f08:	10c00017 	ldw	r3,0(r2)
 5046f0c:	180b883a 	mov	r5,r3
 5046f10:	504bdb00 	call	504bdb0 <__mulsf3>
 5046f14:	1007883a 	mov	r3,r2
 5046f18:	1805883a 	mov	r2,r3
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
 5046f1c:	100b883a 	mov	r5,r2
 5046f20:	8009883a 	mov	r4,r16
 5046f24:	504b4a80 	call	504b4a8 <__addsf3>
 5046f28:	1007883a 	mov	r3,r2
 5046f2c:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
 5046f30:	e0bffd17 	ldw	r2,-12(fp)
 5046f34:	1100c817 	ldw	r4,800(r2)
 5046f38:	e0bff817 	ldw	r2,-32(fp)
 5046f3c:	10800404 	addi	r2,r2,16
 5046f40:	e0fffd17 	ldw	r3,-12(fp)
 5046f44:	10800484 	addi	r2,r2,18
 5046f48:	1085883a 	add	r2,r2,r2
 5046f4c:	1085883a 	add	r2,r2,r2
 5046f50:	1885883a 	add	r2,r3,r2
 5046f54:	10c00017 	ldw	r3,0(r2)
 5046f58:	180b883a 	mov	r5,r3
 5046f5c:	504bdb00 	call	504bdb0 <__mulsf3>
 5046f60:	1007883a 	mov	r3,r2
 5046f64:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
 5046f68:	100b883a 	mov	r5,r2
 5046f6c:	8009883a 	mov	r4,r16
 5046f70:	504b4a80 	call	504b4a8 <__addsf3>
 5046f74:	1007883a 	mov	r3,r2
 5046f78:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];
 5046f7c:	e0bffd17 	ldw	r2,-12(fp)
 5046f80:	1100c917 	ldw	r4,804(r2)
 5046f84:	e0bff817 	ldw	r2,-32(fp)
 5046f88:	10800604 	addi	r2,r2,24
 5046f8c:	e0fffd17 	ldw	r3,-12(fp)
 5046f90:	10800484 	addi	r2,r2,18
 5046f94:	1085883a 	add	r2,r2,r2
 5046f98:	1085883a 	add	r2,r2,r2
 5046f9c:	1885883a 	add	r2,r3,r2
 5046fa0:	10c00017 	ldw	r3,0(r2)
 5046fa4:	180b883a 	mov	r5,r3
 5046fa8:	504bdb00 	call	504bdb0 <__mulsf3>
 5046fac:	1007883a 	mov	r3,r2
 5046fb0:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
 5046fb4:	100b883a 	mov	r5,r2
 5046fb8:	8009883a 	mov	r4,r16
 5046fbc:	504b4a80 	call	504b4a8 <__addsf3>
 5046fc0:	1007883a 	mov	r3,r2
 5046fc4:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];
 5046fc8:	e0bffa15 	stw	r2,-24(fp)

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
 5046fcc:	e0bffd17 	ldw	r2,-12(fp)
 5046fd0:	1100ca17 	ldw	r4,808(r2)
 5046fd4:	e0fffd17 	ldw	r3,-12(fp)
 5046fd8:	e0bff817 	ldw	r2,-32(fp)
 5046fdc:	10800484 	addi	r2,r2,18
 5046fe0:	1085883a 	add	r2,r2,r2
 5046fe4:	1085883a 	add	r2,r2,r2
 5046fe8:	1885883a 	add	r2,r3,r2
 5046fec:	10c00017 	ldw	r3,0(r2)
 5046ff0:	180b883a 	mov	r5,r3
 5046ff4:	504bdb00 	call	504bdb0 <__mulsf3>
 5046ff8:	1007883a 	mov	r3,r2
 5046ffc:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
 5047000:	e0bffd17 	ldw	r2,-12(fp)
 5047004:	1100cb17 	ldw	r4,812(r2)
 5047008:	e0bff817 	ldw	r2,-32(fp)
 504700c:	10800204 	addi	r2,r2,8
 5047010:	e0fffd17 	ldw	r3,-12(fp)
 5047014:	10800484 	addi	r2,r2,18
 5047018:	1085883a 	add	r2,r2,r2
 504701c:	1085883a 	add	r2,r2,r2
 5047020:	1885883a 	add	r2,r3,r2
 5047024:	10c00017 	ldw	r3,0(r2)
 5047028:	180b883a 	mov	r5,r3
 504702c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047030:	1007883a 	mov	r3,r2
 5047034:	1805883a 	mov	r2,r3
         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
 5047038:	100b883a 	mov	r5,r2
 504703c:	8009883a 	mov	r4,r16
 5047040:	504b4a80 	call	504b4a8 <__addsf3>
 5047044:	1007883a 	mov	r3,r2
 5047048:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
 504704c:	e0bffd17 	ldw	r2,-12(fp)
 5047050:	1100cc17 	ldw	r4,816(r2)
 5047054:	e0bff817 	ldw	r2,-32(fp)
 5047058:	10800404 	addi	r2,r2,16
 504705c:	e0fffd17 	ldw	r3,-12(fp)
 5047060:	10800484 	addi	r2,r2,18
 5047064:	1085883a 	add	r2,r2,r2
 5047068:	1085883a 	add	r2,r2,r2
 504706c:	1885883a 	add	r2,r3,r2
 5047070:	10c00017 	ldw	r3,0(r2)
 5047074:	180b883a 	mov	r5,r3
 5047078:	504bdb00 	call	504bdb0 <__mulsf3>
 504707c:	1007883a 	mov	r3,r2
 5047080:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
 5047084:	100b883a 	mov	r5,r2
 5047088:	8009883a 	mov	r4,r16
 504708c:	504b4a80 	call	504b4a8 <__addsf3>
 5047090:	1007883a 	mov	r3,r2
 5047094:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];
 5047098:	e0bffd17 	ldw	r2,-12(fp)
 504709c:	1100cd17 	ldw	r4,820(r2)
 50470a0:	e0bff817 	ldw	r2,-32(fp)
 50470a4:	10800604 	addi	r2,r2,24
 50470a8:	e0fffd17 	ldw	r3,-12(fp)
 50470ac:	10800484 	addi	r2,r2,18
 50470b0:	1085883a 	add	r2,r2,r2
 50470b4:	1085883a 	add	r2,r2,r2
 50470b8:	1885883a 	add	r2,r3,r2
 50470bc:	10c00017 	ldw	r3,0(r2)
 50470c0:	180b883a 	mov	r5,r3
 50470c4:	504bdb00 	call	504bdb0 <__mulsf3>
 50470c8:	1007883a 	mov	r3,r2
 50470cc:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
 50470d0:	100b883a 	mov	r5,r2
 50470d4:	8009883a 	mov	r4,r16
 50470d8:	504b4a80 	call	504b4a8 <__addsf3>
 50470dc:	1007883a 	mov	r3,r2
 50470e0:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];
 50470e4:	e0bffb15 	stw	r2,-20(fp)

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
 50470e8:	e0bffd17 	ldw	r2,-12(fp)
 50470ec:	1100ce17 	ldw	r4,824(r2)
 50470f0:	e0fffd17 	ldw	r3,-12(fp)
 50470f4:	e0bff817 	ldw	r2,-32(fp)
 50470f8:	10800484 	addi	r2,r2,18
 50470fc:	1085883a 	add	r2,r2,r2
 5047100:	1085883a 	add	r2,r2,r2
 5047104:	1885883a 	add	r2,r3,r2
 5047108:	10c00017 	ldw	r3,0(r2)
 504710c:	180b883a 	mov	r5,r3
 5047110:	504bdb00 	call	504bdb0 <__mulsf3>
 5047114:	1007883a 	mov	r3,r2
 5047118:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
 504711c:	e0bffd17 	ldw	r2,-12(fp)
 5047120:	1100cf17 	ldw	r4,828(r2)
 5047124:	e0bff817 	ldw	r2,-32(fp)
 5047128:	10800204 	addi	r2,r2,8
 504712c:	e0fffd17 	ldw	r3,-12(fp)
 5047130:	10800484 	addi	r2,r2,18
 5047134:	1085883a 	add	r2,r2,r2
 5047138:	1085883a 	add	r2,r2,r2
 504713c:	1885883a 	add	r2,r3,r2
 5047140:	10c00017 	ldw	r3,0(r2)
 5047144:	180b883a 	mov	r5,r3
 5047148:	504bdb00 	call	504bdb0 <__mulsf3>
 504714c:	1007883a 	mov	r3,r2
 5047150:	1805883a 	mov	r2,r3
         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
 5047154:	100b883a 	mov	r5,r2
 5047158:	8009883a 	mov	r4,r16
 504715c:	504b4a80 	call	504b4a8 <__addsf3>
 5047160:	1007883a 	mov	r3,r2
 5047164:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
 5047168:	e0bffd17 	ldw	r2,-12(fp)
 504716c:	1100d017 	ldw	r4,832(r2)
 5047170:	e0bff817 	ldw	r2,-32(fp)
 5047174:	10800404 	addi	r2,r2,16
 5047178:	e0fffd17 	ldw	r3,-12(fp)
 504717c:	10800484 	addi	r2,r2,18
 5047180:	1085883a 	add	r2,r2,r2
 5047184:	1085883a 	add	r2,r2,r2
 5047188:	1885883a 	add	r2,r3,r2
 504718c:	10c00017 	ldw	r3,0(r2)
 5047190:	180b883a 	mov	r5,r3
 5047194:	504bdb00 	call	504bdb0 <__mulsf3>
 5047198:	1007883a 	mov	r3,r2
 504719c:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
 50471a0:	100b883a 	mov	r5,r2
 50471a4:	8009883a 	mov	r4,r16
 50471a8:	504b4a80 	call	504b4a8 <__addsf3>
 50471ac:	1007883a 	mov	r3,r2
 50471b0:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(3,3)] * vertex[M8(W,i)];
 50471b4:	e0bffd17 	ldw	r2,-12(fp)
 50471b8:	1100d117 	ldw	r4,836(r2)
 50471bc:	e0bff817 	ldw	r2,-32(fp)
 50471c0:	10800604 	addi	r2,r2,24
 50471c4:	e0fffd17 	ldw	r3,-12(fp)
 50471c8:	10800484 	addi	r2,r2,18
 50471cc:	1085883a 	add	r2,r2,r2
 50471d0:	1085883a 	add	r2,r2,r2
 50471d4:	1885883a 	add	r2,r3,r2
 50471d8:	10c00017 	ldw	r3,0(r2)
 50471dc:	180b883a 	mov	r5,r3
 50471e0:	504bdb00 	call	504bdb0 <__mulsf3>
 50471e4:	1007883a 	mov	r3,r2
 50471e8:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
 50471ec:	100b883a 	mov	r5,r2
 50471f0:	8009883a 	mov	r4,r16
 50471f4:	504b4a80 	call	504b4a8 <__addsf3>
 50471f8:	1007883a 	mov	r3,r2
 50471fc:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(3,3)] * vertex[M8(W,i)];
 5047200:	e0bffc15 	stw	r2,-16(fp)
        printf("p%d : y%f\n", i, temp_transformed_vertex[Y]);
        printf("p%d : z%f\n", i, temp_transformed_vertex[Z]);
        printf("p%d : w%f\n", i, temp_transformed_vertex[W]);
        #endif

        temp_transformed_vertex[X]/=temp_transformed_vertex[W];
 5047204:	e0bff917 	ldw	r2,-28(fp)
 5047208:	e0fffc17 	ldw	r3,-16(fp)
 504720c:	180b883a 	mov	r5,r3
 5047210:	1009883a 	mov	r4,r2
 5047214:	504b9700 	call	504b970 <__divsf3>
 5047218:	1007883a 	mov	r3,r2
 504721c:	1805883a 	mov	r2,r3
 5047220:	e0bff915 	stw	r2,-28(fp)
    	temp_transformed_vertex[Y]/=temp_transformed_vertex[W];
 5047224:	e0bffa17 	ldw	r2,-24(fp)
 5047228:	e0fffc17 	ldw	r3,-16(fp)
 504722c:	180b883a 	mov	r5,r3
 5047230:	1009883a 	mov	r4,r2
 5047234:	504b9700 	call	504b970 <__divsf3>
 5047238:	1007883a 	mov	r3,r2
 504723c:	1805883a 	mov	r2,r3
 5047240:	e0bffa15 	stw	r2,-24(fp)
    	temp_transformed_vertex[Z]/=temp_transformed_vertex[W];
 5047244:	e0bffb17 	ldw	r2,-20(fp)
 5047248:	e0fffc17 	ldw	r3,-16(fp)
 504724c:	180b883a 	mov	r5,r3
 5047250:	1009883a 	mov	r4,r2
 5047254:	504b9700 	call	504b970 <__divsf3>
 5047258:	1007883a 	mov	r3,r2
 504725c:	1805883a 	mov	r2,r3
 5047260:	e0bffb15 	stw	r2,-20(fp)
    	temp_transformed_vertex[W]=1;
 5047264:	008fe034 	movhi	r2,16256
 5047268:	e0bffc15 	stw	r2,-16(fp)
    *   |                   |       |                   |
    *   |       VGA         |       |       CUBO        |    
    *   |                   |       |    normalizzato   |
    *   (0,240)---------(320,240)   (-1,-1)----------(1,-1)
    */
        vertex_on_2D[i][X] = ((temp_transformed_vertex[X]*(X_RESOLUTION/2))+(X_RESOLUTION/2));
 504726c:	e43ff917 	ldw	r16,-28(fp)
 5047270:	d0a80f17 	ldw	r2,-24516(gp)
 5047274:	10800f17 	ldw	r2,60(r2)
 5047278:	1004d07a 	srli	r2,r2,1
 504727c:	1009883a 	mov	r4,r2
 5047280:	504c8240 	call	504c824 <__floatunsisf>
 5047284:	1007883a 	mov	r3,r2
 5047288:	180b883a 	mov	r5,r3
 504728c:	8009883a 	mov	r4,r16
 5047290:	504bdb00 	call	504bdb0 <__mulsf3>
 5047294:	1007883a 	mov	r3,r2
 5047298:	1821883a 	mov	r16,r3
 504729c:	d0a80f17 	ldw	r2,-24516(gp)
 50472a0:	10800f17 	ldw	r2,60(r2)
 50472a4:	1004d07a 	srli	r2,r2,1
 50472a8:	1009883a 	mov	r4,r2
 50472ac:	504c8240 	call	504c824 <__floatunsisf>
 50472b0:	1007883a 	mov	r3,r2
 50472b4:	180b883a 	mov	r5,r3
 50472b8:	8009883a 	mov	r4,r16
 50472bc:	504b4a80 	call	504b4a8 <__addsf3>
 50472c0:	1007883a 	mov	r3,r2
 50472c4:	1805883a 	mov	r2,r3
 50472c8:	1009883a 	mov	r4,r2
 50472cc:	504c6900 	call	504c690 <__fixsfsi>
 50472d0:	1009883a 	mov	r4,r2
 50472d4:	e0fffd17 	ldw	r3,-12(fp)
 50472d8:	e0bff817 	ldw	r2,-32(fp)
 50472dc:	10800a44 	addi	r2,r2,41
 50472e0:	100490fa 	slli	r2,r2,3
 50472e4:	1885883a 	add	r2,r3,r2
 50472e8:	11000015 	stw	r4,0(r2)
        //il meno è necessario per mappare nell'origine della vga, il valore y=1 nelle coordinate normalizzate del cubo
        vertex_on_2D[i][Y] = (-(temp_transformed_vertex[Y]*(Y_RESOLUTION/2))+(Y_RESOLUTION/2));
 50472ec:	d0a80f17 	ldw	r2,-24516(gp)
 50472f0:	10801017 	ldw	r2,64(r2)
 50472f4:	1004d07a 	srli	r2,r2,1
 50472f8:	1009883a 	mov	r4,r2
 50472fc:	504c8240 	call	504c824 <__floatunsisf>
 5047300:	1023883a 	mov	r17,r2
 5047304:	e43ffa17 	ldw	r16,-24(fp)
 5047308:	d0a80f17 	ldw	r2,-24516(gp)
 504730c:	10801017 	ldw	r2,64(r2)
 5047310:	1004d07a 	srli	r2,r2,1
 5047314:	1009883a 	mov	r4,r2
 5047318:	504c8240 	call	504c824 <__floatunsisf>
 504731c:	1007883a 	mov	r3,r2
 5047320:	180b883a 	mov	r5,r3
 5047324:	8009883a 	mov	r4,r16
 5047328:	504bdb00 	call	504bdb0 <__mulsf3>
 504732c:	1007883a 	mov	r3,r2
 5047330:	1805883a 	mov	r2,r3
 5047334:	100b883a 	mov	r5,r2
 5047338:	8809883a 	mov	r4,r17
 504733c:	504c1ac0 	call	504c1ac <__subsf3>
 5047340:	1007883a 	mov	r3,r2
 5047344:	1805883a 	mov	r2,r3
 5047348:	1009883a 	mov	r4,r2
 504734c:	504c6900 	call	504c690 <__fixsfsi>
 5047350:	1009883a 	mov	r4,r2
 5047354:	e0fffd17 	ldw	r3,-12(fp)
 5047358:	e0bff817 	ldw	r2,-32(fp)
 504735c:	100490fa 	slli	r2,r2,3
 5047360:	1885883a 	add	r2,r3,r2
 5047364:	10805304 	addi	r2,r2,332
 5047368:	11000015 	stw	r4,0(r2)
    #ifdef DEBUG_VECTORS
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
 504736c:	e0bff817 	ldw	r2,-32(fp)
 5047370:	10800044 	addi	r2,r2,1
 5047374:	e0bff815 	stw	r2,-32(fp)
 5047378:	003e8306 	br	5046d88 <_gp+0xfffdb960>
                                
    }
    #ifdef DEBUG_1
    printf("END PRINT COORDINATES\n");
    #endif
}
 504737c:	0001883a 	nop
 5047380:	e6fffe04 	addi	sp,fp,-8
 5047384:	dfc00317 	ldw	ra,12(sp)
 5047388:	df000217 	ldw	fp,8(sp)
 504738c:	dc400117 	ldw	r17,4(sp)
 5047390:	dc000017 	ldw	r16,0(sp)
 5047394:	dec00404 	addi	sp,sp,16
 5047398:	f800283a 	ret

0504739c <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>:

void Cube_3D::Matrix4x4MultiplyBy4x4 (float src1[4*4], float src2[4*4], float dest[4*4])
{ 
 504739c:	defff804 	addi	sp,sp,-32
 50473a0:	dfc00715 	stw	ra,28(sp)
 50473a4:	df000615 	stw	fp,24(sp)
 50473a8:	dc400515 	stw	r17,20(sp)
 50473ac:	dc000415 	stw	r16,16(sp)
 50473b0:	df000604 	addi	fp,sp,24
 50473b4:	e13ffa15 	stw	r4,-24(fp)
 50473b8:	e17ffb15 	stw	r5,-20(fp)
 50473bc:	e1bffc15 	stw	r6,-16(fp)
 50473c0:	e1fffd15 	stw	r7,-12(fp)
    dest[M4(0,0)] = src1[M4(0,0)] * src2[M4(0,0)] + src1[M4(0,1)] * src2[M4(1,0)] + src1[M4(0,2)] * src2[M4(2,0)] + src1[M4(0,3)] * src2[M4(3,0)]; 
 50473c4:	e0bffb17 	ldw	r2,-20(fp)
 50473c8:	10c00017 	ldw	r3,0(r2)
 50473cc:	e0bffc17 	ldw	r2,-16(fp)
 50473d0:	11000017 	ldw	r4,0(r2)
 50473d4:	200b883a 	mov	r5,r4
 50473d8:	1809883a 	mov	r4,r3
 50473dc:	504bdb00 	call	504bdb0 <__mulsf3>
 50473e0:	1007883a 	mov	r3,r2
 50473e4:	1821883a 	mov	r16,r3
 50473e8:	e0bffb17 	ldw	r2,-20(fp)
 50473ec:	10800104 	addi	r2,r2,4
 50473f0:	10c00017 	ldw	r3,0(r2)
 50473f4:	e0bffc17 	ldw	r2,-16(fp)
 50473f8:	10800404 	addi	r2,r2,16
 50473fc:	11000017 	ldw	r4,0(r2)
 5047400:	200b883a 	mov	r5,r4
 5047404:	1809883a 	mov	r4,r3
 5047408:	504bdb00 	call	504bdb0 <__mulsf3>
 504740c:	1007883a 	mov	r3,r2
 5047410:	1805883a 	mov	r2,r3
 5047414:	100b883a 	mov	r5,r2
 5047418:	8009883a 	mov	r4,r16
 504741c:	504b4a80 	call	504b4a8 <__addsf3>
 5047420:	1007883a 	mov	r3,r2
 5047424:	1821883a 	mov	r16,r3
 5047428:	e0bffb17 	ldw	r2,-20(fp)
 504742c:	10800204 	addi	r2,r2,8
 5047430:	10c00017 	ldw	r3,0(r2)
 5047434:	e0bffc17 	ldw	r2,-16(fp)
 5047438:	10800804 	addi	r2,r2,32
 504743c:	11000017 	ldw	r4,0(r2)
 5047440:	200b883a 	mov	r5,r4
 5047444:	1809883a 	mov	r4,r3
 5047448:	504bdb00 	call	504bdb0 <__mulsf3>
 504744c:	1007883a 	mov	r3,r2
 5047450:	1805883a 	mov	r2,r3
 5047454:	100b883a 	mov	r5,r2
 5047458:	8009883a 	mov	r4,r16
 504745c:	504b4a80 	call	504b4a8 <__addsf3>
 5047460:	1007883a 	mov	r3,r2
 5047464:	1821883a 	mov	r16,r3
 5047468:	e0bffb17 	ldw	r2,-20(fp)
 504746c:	10800304 	addi	r2,r2,12
 5047470:	10c00017 	ldw	r3,0(r2)
 5047474:	e0bffc17 	ldw	r2,-16(fp)
 5047478:	10800c04 	addi	r2,r2,48
 504747c:	11000017 	ldw	r4,0(r2)
 5047480:	200b883a 	mov	r5,r4
 5047484:	1809883a 	mov	r4,r3
 5047488:	504bdb00 	call	504bdb0 <__mulsf3>
 504748c:	1007883a 	mov	r3,r2
 5047490:	1805883a 	mov	r2,r3
 5047494:	100b883a 	mov	r5,r2
 5047498:	8009883a 	mov	r4,r16
 504749c:	504b4a80 	call	504b4a8 <__addsf3>
 50474a0:	1009883a 	mov	r4,r2
 50474a4:	2007883a 	mov	r3,r4
 50474a8:	e0bffd17 	ldw	r2,-12(fp)
 50474ac:	10c00015 	stw	r3,0(r2)
    dest[M4(0,1)] = src1[M4(0,0)] * src2[M4(0,1)] + src1[M4(0,1)] * src2[M4(1,1)] + src1[M4(0,2)] * src2[M4(2,1)] + src1[M4(0,3)] * src2[M4(3,1)]; 
 50474b0:	e0bffd17 	ldw	r2,-12(fp)
 50474b4:	14000104 	addi	r16,r2,4
 50474b8:	e0bffb17 	ldw	r2,-20(fp)
 50474bc:	10c00017 	ldw	r3,0(r2)
 50474c0:	e0bffc17 	ldw	r2,-16(fp)
 50474c4:	10800104 	addi	r2,r2,4
 50474c8:	11000017 	ldw	r4,0(r2)
 50474cc:	200b883a 	mov	r5,r4
 50474d0:	1809883a 	mov	r4,r3
 50474d4:	504bdb00 	call	504bdb0 <__mulsf3>
 50474d8:	1007883a 	mov	r3,r2
 50474dc:	1823883a 	mov	r17,r3
 50474e0:	e0bffb17 	ldw	r2,-20(fp)
 50474e4:	10800104 	addi	r2,r2,4
 50474e8:	10c00017 	ldw	r3,0(r2)
 50474ec:	e0bffc17 	ldw	r2,-16(fp)
 50474f0:	10800504 	addi	r2,r2,20
 50474f4:	11000017 	ldw	r4,0(r2)
 50474f8:	200b883a 	mov	r5,r4
 50474fc:	1809883a 	mov	r4,r3
 5047500:	504bdb00 	call	504bdb0 <__mulsf3>
 5047504:	1007883a 	mov	r3,r2
 5047508:	1805883a 	mov	r2,r3
 504750c:	100b883a 	mov	r5,r2
 5047510:	8809883a 	mov	r4,r17
 5047514:	504b4a80 	call	504b4a8 <__addsf3>
 5047518:	1007883a 	mov	r3,r2
 504751c:	1823883a 	mov	r17,r3
 5047520:	e0bffb17 	ldw	r2,-20(fp)
 5047524:	10800204 	addi	r2,r2,8
 5047528:	10c00017 	ldw	r3,0(r2)
 504752c:	e0bffc17 	ldw	r2,-16(fp)
 5047530:	10800904 	addi	r2,r2,36
 5047534:	11000017 	ldw	r4,0(r2)
 5047538:	200b883a 	mov	r5,r4
 504753c:	1809883a 	mov	r4,r3
 5047540:	504bdb00 	call	504bdb0 <__mulsf3>
 5047544:	1007883a 	mov	r3,r2
 5047548:	1805883a 	mov	r2,r3
 504754c:	100b883a 	mov	r5,r2
 5047550:	8809883a 	mov	r4,r17
 5047554:	504b4a80 	call	504b4a8 <__addsf3>
 5047558:	1007883a 	mov	r3,r2
 504755c:	1823883a 	mov	r17,r3
 5047560:	e0bffb17 	ldw	r2,-20(fp)
 5047564:	10800304 	addi	r2,r2,12
 5047568:	10c00017 	ldw	r3,0(r2)
 504756c:	e0bffc17 	ldw	r2,-16(fp)
 5047570:	10800d04 	addi	r2,r2,52
 5047574:	11000017 	ldw	r4,0(r2)
 5047578:	200b883a 	mov	r5,r4
 504757c:	1809883a 	mov	r4,r3
 5047580:	504bdb00 	call	504bdb0 <__mulsf3>
 5047584:	1007883a 	mov	r3,r2
 5047588:	1805883a 	mov	r2,r3
 504758c:	100b883a 	mov	r5,r2
 5047590:	8809883a 	mov	r4,r17
 5047594:	504b4a80 	call	504b4a8 <__addsf3>
 5047598:	1007883a 	mov	r3,r2
 504759c:	1805883a 	mov	r2,r3
 50475a0:	80800015 	stw	r2,0(r16)
    dest[M4(0,2)] = src1[M4(0,0)] * src2[M4(0,2)] + src1[M4(0,1)] * src2[M4(1,2)] + src1[M4(0,2)] * src2[M4(2,2)] + src1[M4(0,3)] * src2[M4(3,2)]; 
 50475a4:	e0bffd17 	ldw	r2,-12(fp)
 50475a8:	14000204 	addi	r16,r2,8
 50475ac:	e0bffb17 	ldw	r2,-20(fp)
 50475b0:	10c00017 	ldw	r3,0(r2)
 50475b4:	e0bffc17 	ldw	r2,-16(fp)
 50475b8:	10800204 	addi	r2,r2,8
 50475bc:	11000017 	ldw	r4,0(r2)
 50475c0:	200b883a 	mov	r5,r4
 50475c4:	1809883a 	mov	r4,r3
 50475c8:	504bdb00 	call	504bdb0 <__mulsf3>
 50475cc:	1007883a 	mov	r3,r2
 50475d0:	1823883a 	mov	r17,r3
 50475d4:	e0bffb17 	ldw	r2,-20(fp)
 50475d8:	10800104 	addi	r2,r2,4
 50475dc:	10c00017 	ldw	r3,0(r2)
 50475e0:	e0bffc17 	ldw	r2,-16(fp)
 50475e4:	10800604 	addi	r2,r2,24
 50475e8:	11000017 	ldw	r4,0(r2)
 50475ec:	200b883a 	mov	r5,r4
 50475f0:	1809883a 	mov	r4,r3
 50475f4:	504bdb00 	call	504bdb0 <__mulsf3>
 50475f8:	1007883a 	mov	r3,r2
 50475fc:	1805883a 	mov	r2,r3
 5047600:	100b883a 	mov	r5,r2
 5047604:	8809883a 	mov	r4,r17
 5047608:	504b4a80 	call	504b4a8 <__addsf3>
 504760c:	1007883a 	mov	r3,r2
 5047610:	1823883a 	mov	r17,r3
 5047614:	e0bffb17 	ldw	r2,-20(fp)
 5047618:	10800204 	addi	r2,r2,8
 504761c:	10c00017 	ldw	r3,0(r2)
 5047620:	e0bffc17 	ldw	r2,-16(fp)
 5047624:	10800a04 	addi	r2,r2,40
 5047628:	11000017 	ldw	r4,0(r2)
 504762c:	200b883a 	mov	r5,r4
 5047630:	1809883a 	mov	r4,r3
 5047634:	504bdb00 	call	504bdb0 <__mulsf3>
 5047638:	1007883a 	mov	r3,r2
 504763c:	1805883a 	mov	r2,r3
 5047640:	100b883a 	mov	r5,r2
 5047644:	8809883a 	mov	r4,r17
 5047648:	504b4a80 	call	504b4a8 <__addsf3>
 504764c:	1007883a 	mov	r3,r2
 5047650:	1823883a 	mov	r17,r3
 5047654:	e0bffb17 	ldw	r2,-20(fp)
 5047658:	10800304 	addi	r2,r2,12
 504765c:	10c00017 	ldw	r3,0(r2)
 5047660:	e0bffc17 	ldw	r2,-16(fp)
 5047664:	10800e04 	addi	r2,r2,56
 5047668:	11000017 	ldw	r4,0(r2)
 504766c:	200b883a 	mov	r5,r4
 5047670:	1809883a 	mov	r4,r3
 5047674:	504bdb00 	call	504bdb0 <__mulsf3>
 5047678:	1007883a 	mov	r3,r2
 504767c:	1805883a 	mov	r2,r3
 5047680:	100b883a 	mov	r5,r2
 5047684:	8809883a 	mov	r4,r17
 5047688:	504b4a80 	call	504b4a8 <__addsf3>
 504768c:	1007883a 	mov	r3,r2
 5047690:	1805883a 	mov	r2,r3
 5047694:	80800015 	stw	r2,0(r16)
    dest[M4(0,3)] = src1[M4(0,0)] * src2[M4(0,3)] + src1[M4(0,1)] * src2[M4(1,3)] + src1[M4(0,2)] * src2[M4(2,3)] + src1[M4(0,3)] * src2[M4(3,3)]; 
 5047698:	e0bffd17 	ldw	r2,-12(fp)
 504769c:	14000304 	addi	r16,r2,12
 50476a0:	e0bffb17 	ldw	r2,-20(fp)
 50476a4:	10c00017 	ldw	r3,0(r2)
 50476a8:	e0bffc17 	ldw	r2,-16(fp)
 50476ac:	10800304 	addi	r2,r2,12
 50476b0:	11000017 	ldw	r4,0(r2)
 50476b4:	200b883a 	mov	r5,r4
 50476b8:	1809883a 	mov	r4,r3
 50476bc:	504bdb00 	call	504bdb0 <__mulsf3>
 50476c0:	1007883a 	mov	r3,r2
 50476c4:	1823883a 	mov	r17,r3
 50476c8:	e0bffb17 	ldw	r2,-20(fp)
 50476cc:	10800104 	addi	r2,r2,4
 50476d0:	10c00017 	ldw	r3,0(r2)
 50476d4:	e0bffc17 	ldw	r2,-16(fp)
 50476d8:	10800704 	addi	r2,r2,28
 50476dc:	11000017 	ldw	r4,0(r2)
 50476e0:	200b883a 	mov	r5,r4
 50476e4:	1809883a 	mov	r4,r3
 50476e8:	504bdb00 	call	504bdb0 <__mulsf3>
 50476ec:	1007883a 	mov	r3,r2
 50476f0:	1805883a 	mov	r2,r3
 50476f4:	100b883a 	mov	r5,r2
 50476f8:	8809883a 	mov	r4,r17
 50476fc:	504b4a80 	call	504b4a8 <__addsf3>
 5047700:	1007883a 	mov	r3,r2
 5047704:	1823883a 	mov	r17,r3
 5047708:	e0bffb17 	ldw	r2,-20(fp)
 504770c:	10800204 	addi	r2,r2,8
 5047710:	10c00017 	ldw	r3,0(r2)
 5047714:	e0bffc17 	ldw	r2,-16(fp)
 5047718:	10800b04 	addi	r2,r2,44
 504771c:	11000017 	ldw	r4,0(r2)
 5047720:	200b883a 	mov	r5,r4
 5047724:	1809883a 	mov	r4,r3
 5047728:	504bdb00 	call	504bdb0 <__mulsf3>
 504772c:	1007883a 	mov	r3,r2
 5047730:	1805883a 	mov	r2,r3
 5047734:	100b883a 	mov	r5,r2
 5047738:	8809883a 	mov	r4,r17
 504773c:	504b4a80 	call	504b4a8 <__addsf3>
 5047740:	1007883a 	mov	r3,r2
 5047744:	1823883a 	mov	r17,r3
 5047748:	e0bffb17 	ldw	r2,-20(fp)
 504774c:	10800304 	addi	r2,r2,12
 5047750:	10c00017 	ldw	r3,0(r2)
 5047754:	e0bffc17 	ldw	r2,-16(fp)
 5047758:	10800f04 	addi	r2,r2,60
 504775c:	11000017 	ldw	r4,0(r2)
 5047760:	200b883a 	mov	r5,r4
 5047764:	1809883a 	mov	r4,r3
 5047768:	504bdb00 	call	504bdb0 <__mulsf3>
 504776c:	1007883a 	mov	r3,r2
 5047770:	1805883a 	mov	r2,r3
 5047774:	100b883a 	mov	r5,r2
 5047778:	8809883a 	mov	r4,r17
 504777c:	504b4a80 	call	504b4a8 <__addsf3>
 5047780:	1007883a 	mov	r3,r2
 5047784:	1805883a 	mov	r2,r3
 5047788:	80800015 	stw	r2,0(r16)
    dest[M4(1,0)] = src1[M4(1,0)] * src2[M4(0,0)] + src1[M4(1,1)] * src2[M4(1,0)] + src1[M4(1,2)] * src2[M4(2,0)] + src1[M4(1,3)] * src2[M4(3,0)]; 
 504778c:	e0bffd17 	ldw	r2,-12(fp)
 5047790:	14000404 	addi	r16,r2,16
 5047794:	e0bffb17 	ldw	r2,-20(fp)
 5047798:	10800404 	addi	r2,r2,16
 504779c:	10c00017 	ldw	r3,0(r2)
 50477a0:	e0bffc17 	ldw	r2,-16(fp)
 50477a4:	11000017 	ldw	r4,0(r2)
 50477a8:	200b883a 	mov	r5,r4
 50477ac:	1809883a 	mov	r4,r3
 50477b0:	504bdb00 	call	504bdb0 <__mulsf3>
 50477b4:	1007883a 	mov	r3,r2
 50477b8:	1823883a 	mov	r17,r3
 50477bc:	e0bffb17 	ldw	r2,-20(fp)
 50477c0:	10800504 	addi	r2,r2,20
 50477c4:	10c00017 	ldw	r3,0(r2)
 50477c8:	e0bffc17 	ldw	r2,-16(fp)
 50477cc:	10800404 	addi	r2,r2,16
 50477d0:	11000017 	ldw	r4,0(r2)
 50477d4:	200b883a 	mov	r5,r4
 50477d8:	1809883a 	mov	r4,r3
 50477dc:	504bdb00 	call	504bdb0 <__mulsf3>
 50477e0:	1007883a 	mov	r3,r2
 50477e4:	1805883a 	mov	r2,r3
 50477e8:	100b883a 	mov	r5,r2
 50477ec:	8809883a 	mov	r4,r17
 50477f0:	504b4a80 	call	504b4a8 <__addsf3>
 50477f4:	1007883a 	mov	r3,r2
 50477f8:	1823883a 	mov	r17,r3
 50477fc:	e0bffb17 	ldw	r2,-20(fp)
 5047800:	10800604 	addi	r2,r2,24
 5047804:	10c00017 	ldw	r3,0(r2)
 5047808:	e0bffc17 	ldw	r2,-16(fp)
 504780c:	10800804 	addi	r2,r2,32
 5047810:	11000017 	ldw	r4,0(r2)
 5047814:	200b883a 	mov	r5,r4
 5047818:	1809883a 	mov	r4,r3
 504781c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047820:	1007883a 	mov	r3,r2
 5047824:	1805883a 	mov	r2,r3
 5047828:	100b883a 	mov	r5,r2
 504782c:	8809883a 	mov	r4,r17
 5047830:	504b4a80 	call	504b4a8 <__addsf3>
 5047834:	1007883a 	mov	r3,r2
 5047838:	1823883a 	mov	r17,r3
 504783c:	e0bffb17 	ldw	r2,-20(fp)
 5047840:	10800704 	addi	r2,r2,28
 5047844:	10c00017 	ldw	r3,0(r2)
 5047848:	e0bffc17 	ldw	r2,-16(fp)
 504784c:	10800c04 	addi	r2,r2,48
 5047850:	11000017 	ldw	r4,0(r2)
 5047854:	200b883a 	mov	r5,r4
 5047858:	1809883a 	mov	r4,r3
 504785c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047860:	1007883a 	mov	r3,r2
 5047864:	1805883a 	mov	r2,r3
 5047868:	100b883a 	mov	r5,r2
 504786c:	8809883a 	mov	r4,r17
 5047870:	504b4a80 	call	504b4a8 <__addsf3>
 5047874:	1007883a 	mov	r3,r2
 5047878:	1805883a 	mov	r2,r3
 504787c:	80800015 	stw	r2,0(r16)
    dest[M4(1,1)] = src1[M4(1,0)] * src2[M4(0,1)] + src1[M4(1,1)] * src2[M4(1,1)] + src1[M4(1,2)] * src2[M4(2,1)] + src1[M4(1,3)] * src2[M4(3,1)]; 
 5047880:	e0bffd17 	ldw	r2,-12(fp)
 5047884:	14000504 	addi	r16,r2,20
 5047888:	e0bffb17 	ldw	r2,-20(fp)
 504788c:	10800404 	addi	r2,r2,16
 5047890:	10c00017 	ldw	r3,0(r2)
 5047894:	e0bffc17 	ldw	r2,-16(fp)
 5047898:	10800104 	addi	r2,r2,4
 504789c:	11000017 	ldw	r4,0(r2)
 50478a0:	200b883a 	mov	r5,r4
 50478a4:	1809883a 	mov	r4,r3
 50478a8:	504bdb00 	call	504bdb0 <__mulsf3>
 50478ac:	1007883a 	mov	r3,r2
 50478b0:	1823883a 	mov	r17,r3
 50478b4:	e0bffb17 	ldw	r2,-20(fp)
 50478b8:	10800504 	addi	r2,r2,20
 50478bc:	10c00017 	ldw	r3,0(r2)
 50478c0:	e0bffc17 	ldw	r2,-16(fp)
 50478c4:	10800504 	addi	r2,r2,20
 50478c8:	11000017 	ldw	r4,0(r2)
 50478cc:	200b883a 	mov	r5,r4
 50478d0:	1809883a 	mov	r4,r3
 50478d4:	504bdb00 	call	504bdb0 <__mulsf3>
 50478d8:	1007883a 	mov	r3,r2
 50478dc:	1805883a 	mov	r2,r3
 50478e0:	100b883a 	mov	r5,r2
 50478e4:	8809883a 	mov	r4,r17
 50478e8:	504b4a80 	call	504b4a8 <__addsf3>
 50478ec:	1007883a 	mov	r3,r2
 50478f0:	1823883a 	mov	r17,r3
 50478f4:	e0bffb17 	ldw	r2,-20(fp)
 50478f8:	10800604 	addi	r2,r2,24
 50478fc:	10c00017 	ldw	r3,0(r2)
 5047900:	e0bffc17 	ldw	r2,-16(fp)
 5047904:	10800904 	addi	r2,r2,36
 5047908:	11000017 	ldw	r4,0(r2)
 504790c:	200b883a 	mov	r5,r4
 5047910:	1809883a 	mov	r4,r3
 5047914:	504bdb00 	call	504bdb0 <__mulsf3>
 5047918:	1007883a 	mov	r3,r2
 504791c:	1805883a 	mov	r2,r3
 5047920:	100b883a 	mov	r5,r2
 5047924:	8809883a 	mov	r4,r17
 5047928:	504b4a80 	call	504b4a8 <__addsf3>
 504792c:	1007883a 	mov	r3,r2
 5047930:	1823883a 	mov	r17,r3
 5047934:	e0bffb17 	ldw	r2,-20(fp)
 5047938:	10800704 	addi	r2,r2,28
 504793c:	10c00017 	ldw	r3,0(r2)
 5047940:	e0bffc17 	ldw	r2,-16(fp)
 5047944:	10800d04 	addi	r2,r2,52
 5047948:	11000017 	ldw	r4,0(r2)
 504794c:	200b883a 	mov	r5,r4
 5047950:	1809883a 	mov	r4,r3
 5047954:	504bdb00 	call	504bdb0 <__mulsf3>
 5047958:	1007883a 	mov	r3,r2
 504795c:	1805883a 	mov	r2,r3
 5047960:	100b883a 	mov	r5,r2
 5047964:	8809883a 	mov	r4,r17
 5047968:	504b4a80 	call	504b4a8 <__addsf3>
 504796c:	1007883a 	mov	r3,r2
 5047970:	1805883a 	mov	r2,r3
 5047974:	80800015 	stw	r2,0(r16)
    dest[M4(1,2)] = src1[M4(1,0)] * src2[M4(0,2)] + src1[M4(1,1)] * src2[M4(1,2)] + src1[M4(1,2)] * src2[M4(2,2)] + src1[M4(1,3)] * src2[M4(3,2)]; 
 5047978:	e0bffd17 	ldw	r2,-12(fp)
 504797c:	14000604 	addi	r16,r2,24
 5047980:	e0bffb17 	ldw	r2,-20(fp)
 5047984:	10800404 	addi	r2,r2,16
 5047988:	10c00017 	ldw	r3,0(r2)
 504798c:	e0bffc17 	ldw	r2,-16(fp)
 5047990:	10800204 	addi	r2,r2,8
 5047994:	11000017 	ldw	r4,0(r2)
 5047998:	200b883a 	mov	r5,r4
 504799c:	1809883a 	mov	r4,r3
 50479a0:	504bdb00 	call	504bdb0 <__mulsf3>
 50479a4:	1007883a 	mov	r3,r2
 50479a8:	1823883a 	mov	r17,r3
 50479ac:	e0bffb17 	ldw	r2,-20(fp)
 50479b0:	10800504 	addi	r2,r2,20
 50479b4:	10c00017 	ldw	r3,0(r2)
 50479b8:	e0bffc17 	ldw	r2,-16(fp)
 50479bc:	10800604 	addi	r2,r2,24
 50479c0:	11000017 	ldw	r4,0(r2)
 50479c4:	200b883a 	mov	r5,r4
 50479c8:	1809883a 	mov	r4,r3
 50479cc:	504bdb00 	call	504bdb0 <__mulsf3>
 50479d0:	1007883a 	mov	r3,r2
 50479d4:	1805883a 	mov	r2,r3
 50479d8:	100b883a 	mov	r5,r2
 50479dc:	8809883a 	mov	r4,r17
 50479e0:	504b4a80 	call	504b4a8 <__addsf3>
 50479e4:	1007883a 	mov	r3,r2
 50479e8:	1823883a 	mov	r17,r3
 50479ec:	e0bffb17 	ldw	r2,-20(fp)
 50479f0:	10800604 	addi	r2,r2,24
 50479f4:	10c00017 	ldw	r3,0(r2)
 50479f8:	e0bffc17 	ldw	r2,-16(fp)
 50479fc:	10800a04 	addi	r2,r2,40
 5047a00:	11000017 	ldw	r4,0(r2)
 5047a04:	200b883a 	mov	r5,r4
 5047a08:	1809883a 	mov	r4,r3
 5047a0c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047a10:	1007883a 	mov	r3,r2
 5047a14:	1805883a 	mov	r2,r3
 5047a18:	100b883a 	mov	r5,r2
 5047a1c:	8809883a 	mov	r4,r17
 5047a20:	504b4a80 	call	504b4a8 <__addsf3>
 5047a24:	1007883a 	mov	r3,r2
 5047a28:	1823883a 	mov	r17,r3
 5047a2c:	e0bffb17 	ldw	r2,-20(fp)
 5047a30:	10800704 	addi	r2,r2,28
 5047a34:	10c00017 	ldw	r3,0(r2)
 5047a38:	e0bffc17 	ldw	r2,-16(fp)
 5047a3c:	10800e04 	addi	r2,r2,56
 5047a40:	11000017 	ldw	r4,0(r2)
 5047a44:	200b883a 	mov	r5,r4
 5047a48:	1809883a 	mov	r4,r3
 5047a4c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047a50:	1007883a 	mov	r3,r2
 5047a54:	1805883a 	mov	r2,r3
 5047a58:	100b883a 	mov	r5,r2
 5047a5c:	8809883a 	mov	r4,r17
 5047a60:	504b4a80 	call	504b4a8 <__addsf3>
 5047a64:	1007883a 	mov	r3,r2
 5047a68:	1805883a 	mov	r2,r3
 5047a6c:	80800015 	stw	r2,0(r16)
    dest[M4(1,3)] = src1[M4(1,0)] * src2[M4(0,3)] + src1[M4(1,1)] * src2[M4(1,3)] + src1[M4(1,2)] * src2[M4(2,3)] + src1[M4(1,3)] * src2[M4(3,3)]; 
 5047a70:	e0bffd17 	ldw	r2,-12(fp)
 5047a74:	14000704 	addi	r16,r2,28
 5047a78:	e0bffb17 	ldw	r2,-20(fp)
 5047a7c:	10800404 	addi	r2,r2,16
 5047a80:	10c00017 	ldw	r3,0(r2)
 5047a84:	e0bffc17 	ldw	r2,-16(fp)
 5047a88:	10800304 	addi	r2,r2,12
 5047a8c:	11000017 	ldw	r4,0(r2)
 5047a90:	200b883a 	mov	r5,r4
 5047a94:	1809883a 	mov	r4,r3
 5047a98:	504bdb00 	call	504bdb0 <__mulsf3>
 5047a9c:	1007883a 	mov	r3,r2
 5047aa0:	1823883a 	mov	r17,r3
 5047aa4:	e0bffb17 	ldw	r2,-20(fp)
 5047aa8:	10800504 	addi	r2,r2,20
 5047aac:	10c00017 	ldw	r3,0(r2)
 5047ab0:	e0bffc17 	ldw	r2,-16(fp)
 5047ab4:	10800704 	addi	r2,r2,28
 5047ab8:	11000017 	ldw	r4,0(r2)
 5047abc:	200b883a 	mov	r5,r4
 5047ac0:	1809883a 	mov	r4,r3
 5047ac4:	504bdb00 	call	504bdb0 <__mulsf3>
 5047ac8:	1007883a 	mov	r3,r2
 5047acc:	1805883a 	mov	r2,r3
 5047ad0:	100b883a 	mov	r5,r2
 5047ad4:	8809883a 	mov	r4,r17
 5047ad8:	504b4a80 	call	504b4a8 <__addsf3>
 5047adc:	1007883a 	mov	r3,r2
 5047ae0:	1823883a 	mov	r17,r3
 5047ae4:	e0bffb17 	ldw	r2,-20(fp)
 5047ae8:	10800604 	addi	r2,r2,24
 5047aec:	10c00017 	ldw	r3,0(r2)
 5047af0:	e0bffc17 	ldw	r2,-16(fp)
 5047af4:	10800b04 	addi	r2,r2,44
 5047af8:	11000017 	ldw	r4,0(r2)
 5047afc:	200b883a 	mov	r5,r4
 5047b00:	1809883a 	mov	r4,r3
 5047b04:	504bdb00 	call	504bdb0 <__mulsf3>
 5047b08:	1007883a 	mov	r3,r2
 5047b0c:	1805883a 	mov	r2,r3
 5047b10:	100b883a 	mov	r5,r2
 5047b14:	8809883a 	mov	r4,r17
 5047b18:	504b4a80 	call	504b4a8 <__addsf3>
 5047b1c:	1007883a 	mov	r3,r2
 5047b20:	1823883a 	mov	r17,r3
 5047b24:	e0bffb17 	ldw	r2,-20(fp)
 5047b28:	10800704 	addi	r2,r2,28
 5047b2c:	10c00017 	ldw	r3,0(r2)
 5047b30:	e0bffc17 	ldw	r2,-16(fp)
 5047b34:	10800f04 	addi	r2,r2,60
 5047b38:	11000017 	ldw	r4,0(r2)
 5047b3c:	200b883a 	mov	r5,r4
 5047b40:	1809883a 	mov	r4,r3
 5047b44:	504bdb00 	call	504bdb0 <__mulsf3>
 5047b48:	1007883a 	mov	r3,r2
 5047b4c:	1805883a 	mov	r2,r3
 5047b50:	100b883a 	mov	r5,r2
 5047b54:	8809883a 	mov	r4,r17
 5047b58:	504b4a80 	call	504b4a8 <__addsf3>
 5047b5c:	1007883a 	mov	r3,r2
 5047b60:	1805883a 	mov	r2,r3
 5047b64:	80800015 	stw	r2,0(r16)
    dest[M4(2,0)] = src1[M4(2,0)] * src2[M4(0,0)] + src1[M4(2,1)] * src2[M4(1,0)] + src1[M4(2,2)] * src2[M4(2,0)] + src1[M4(2,3)] * src2[M4(3,0)]; 
 5047b68:	e0bffd17 	ldw	r2,-12(fp)
 5047b6c:	14000804 	addi	r16,r2,32
 5047b70:	e0bffb17 	ldw	r2,-20(fp)
 5047b74:	10800804 	addi	r2,r2,32
 5047b78:	10c00017 	ldw	r3,0(r2)
 5047b7c:	e0bffc17 	ldw	r2,-16(fp)
 5047b80:	11000017 	ldw	r4,0(r2)
 5047b84:	200b883a 	mov	r5,r4
 5047b88:	1809883a 	mov	r4,r3
 5047b8c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047b90:	1007883a 	mov	r3,r2
 5047b94:	1823883a 	mov	r17,r3
 5047b98:	e0bffb17 	ldw	r2,-20(fp)
 5047b9c:	10800904 	addi	r2,r2,36
 5047ba0:	10c00017 	ldw	r3,0(r2)
 5047ba4:	e0bffc17 	ldw	r2,-16(fp)
 5047ba8:	10800404 	addi	r2,r2,16
 5047bac:	11000017 	ldw	r4,0(r2)
 5047bb0:	200b883a 	mov	r5,r4
 5047bb4:	1809883a 	mov	r4,r3
 5047bb8:	504bdb00 	call	504bdb0 <__mulsf3>
 5047bbc:	1007883a 	mov	r3,r2
 5047bc0:	1805883a 	mov	r2,r3
 5047bc4:	100b883a 	mov	r5,r2
 5047bc8:	8809883a 	mov	r4,r17
 5047bcc:	504b4a80 	call	504b4a8 <__addsf3>
 5047bd0:	1007883a 	mov	r3,r2
 5047bd4:	1823883a 	mov	r17,r3
 5047bd8:	e0bffb17 	ldw	r2,-20(fp)
 5047bdc:	10800a04 	addi	r2,r2,40
 5047be0:	10c00017 	ldw	r3,0(r2)
 5047be4:	e0bffc17 	ldw	r2,-16(fp)
 5047be8:	10800804 	addi	r2,r2,32
 5047bec:	11000017 	ldw	r4,0(r2)
 5047bf0:	200b883a 	mov	r5,r4
 5047bf4:	1809883a 	mov	r4,r3
 5047bf8:	504bdb00 	call	504bdb0 <__mulsf3>
 5047bfc:	1007883a 	mov	r3,r2
 5047c00:	1805883a 	mov	r2,r3
 5047c04:	100b883a 	mov	r5,r2
 5047c08:	8809883a 	mov	r4,r17
 5047c0c:	504b4a80 	call	504b4a8 <__addsf3>
 5047c10:	1007883a 	mov	r3,r2
 5047c14:	1823883a 	mov	r17,r3
 5047c18:	e0bffb17 	ldw	r2,-20(fp)
 5047c1c:	10800b04 	addi	r2,r2,44
 5047c20:	10c00017 	ldw	r3,0(r2)
 5047c24:	e0bffc17 	ldw	r2,-16(fp)
 5047c28:	10800c04 	addi	r2,r2,48
 5047c2c:	11000017 	ldw	r4,0(r2)
 5047c30:	200b883a 	mov	r5,r4
 5047c34:	1809883a 	mov	r4,r3
 5047c38:	504bdb00 	call	504bdb0 <__mulsf3>
 5047c3c:	1007883a 	mov	r3,r2
 5047c40:	1805883a 	mov	r2,r3
 5047c44:	100b883a 	mov	r5,r2
 5047c48:	8809883a 	mov	r4,r17
 5047c4c:	504b4a80 	call	504b4a8 <__addsf3>
 5047c50:	1007883a 	mov	r3,r2
 5047c54:	1805883a 	mov	r2,r3
 5047c58:	80800015 	stw	r2,0(r16)
    dest[M4(2,1)] = src1[M4(2,0)] * src2[M4(0,1)] + src1[M4(2,1)] * src2[M4(1,1)] + src1[M4(2,2)] * src2[M4(2,1)] + src1[M4(2,3)] * src2[M4(3,1)]; 
 5047c5c:	e0bffd17 	ldw	r2,-12(fp)
 5047c60:	14000904 	addi	r16,r2,36
 5047c64:	e0bffb17 	ldw	r2,-20(fp)
 5047c68:	10800804 	addi	r2,r2,32
 5047c6c:	10c00017 	ldw	r3,0(r2)
 5047c70:	e0bffc17 	ldw	r2,-16(fp)
 5047c74:	10800104 	addi	r2,r2,4
 5047c78:	11000017 	ldw	r4,0(r2)
 5047c7c:	200b883a 	mov	r5,r4
 5047c80:	1809883a 	mov	r4,r3
 5047c84:	504bdb00 	call	504bdb0 <__mulsf3>
 5047c88:	1007883a 	mov	r3,r2
 5047c8c:	1823883a 	mov	r17,r3
 5047c90:	e0bffb17 	ldw	r2,-20(fp)
 5047c94:	10800904 	addi	r2,r2,36
 5047c98:	10c00017 	ldw	r3,0(r2)
 5047c9c:	e0bffc17 	ldw	r2,-16(fp)
 5047ca0:	10800504 	addi	r2,r2,20
 5047ca4:	11000017 	ldw	r4,0(r2)
 5047ca8:	200b883a 	mov	r5,r4
 5047cac:	1809883a 	mov	r4,r3
 5047cb0:	504bdb00 	call	504bdb0 <__mulsf3>
 5047cb4:	1007883a 	mov	r3,r2
 5047cb8:	1805883a 	mov	r2,r3
 5047cbc:	100b883a 	mov	r5,r2
 5047cc0:	8809883a 	mov	r4,r17
 5047cc4:	504b4a80 	call	504b4a8 <__addsf3>
 5047cc8:	1007883a 	mov	r3,r2
 5047ccc:	1823883a 	mov	r17,r3
 5047cd0:	e0bffb17 	ldw	r2,-20(fp)
 5047cd4:	10800a04 	addi	r2,r2,40
 5047cd8:	10c00017 	ldw	r3,0(r2)
 5047cdc:	e0bffc17 	ldw	r2,-16(fp)
 5047ce0:	10800904 	addi	r2,r2,36
 5047ce4:	11000017 	ldw	r4,0(r2)
 5047ce8:	200b883a 	mov	r5,r4
 5047cec:	1809883a 	mov	r4,r3
 5047cf0:	504bdb00 	call	504bdb0 <__mulsf3>
 5047cf4:	1007883a 	mov	r3,r2
 5047cf8:	1805883a 	mov	r2,r3
 5047cfc:	100b883a 	mov	r5,r2
 5047d00:	8809883a 	mov	r4,r17
 5047d04:	504b4a80 	call	504b4a8 <__addsf3>
 5047d08:	1007883a 	mov	r3,r2
 5047d0c:	1823883a 	mov	r17,r3
 5047d10:	e0bffb17 	ldw	r2,-20(fp)
 5047d14:	10800b04 	addi	r2,r2,44
 5047d18:	10c00017 	ldw	r3,0(r2)
 5047d1c:	e0bffc17 	ldw	r2,-16(fp)
 5047d20:	10800d04 	addi	r2,r2,52
 5047d24:	11000017 	ldw	r4,0(r2)
 5047d28:	200b883a 	mov	r5,r4
 5047d2c:	1809883a 	mov	r4,r3
 5047d30:	504bdb00 	call	504bdb0 <__mulsf3>
 5047d34:	1007883a 	mov	r3,r2
 5047d38:	1805883a 	mov	r2,r3
 5047d3c:	100b883a 	mov	r5,r2
 5047d40:	8809883a 	mov	r4,r17
 5047d44:	504b4a80 	call	504b4a8 <__addsf3>
 5047d48:	1007883a 	mov	r3,r2
 5047d4c:	1805883a 	mov	r2,r3
 5047d50:	80800015 	stw	r2,0(r16)
    dest[M4(2,2)] = src1[M4(2,0)] * src2[M4(0,2)] + src1[M4(2,1)] * src2[M4(1,2)] + src1[M4(2,2)] * src2[M4(2,2)] + src1[M4(2,3)] * src2[M4(3,2)]; 
 5047d54:	e0bffd17 	ldw	r2,-12(fp)
 5047d58:	14000a04 	addi	r16,r2,40
 5047d5c:	e0bffb17 	ldw	r2,-20(fp)
 5047d60:	10800804 	addi	r2,r2,32
 5047d64:	10c00017 	ldw	r3,0(r2)
 5047d68:	e0bffc17 	ldw	r2,-16(fp)
 5047d6c:	10800204 	addi	r2,r2,8
 5047d70:	11000017 	ldw	r4,0(r2)
 5047d74:	200b883a 	mov	r5,r4
 5047d78:	1809883a 	mov	r4,r3
 5047d7c:	504bdb00 	call	504bdb0 <__mulsf3>
 5047d80:	1007883a 	mov	r3,r2
 5047d84:	1823883a 	mov	r17,r3
 5047d88:	e0bffb17 	ldw	r2,-20(fp)
 5047d8c:	10800904 	addi	r2,r2,36
 5047d90:	10c00017 	ldw	r3,0(r2)
 5047d94:	e0bffc17 	ldw	r2,-16(fp)
 5047d98:	10800604 	addi	r2,r2,24
 5047d9c:	11000017 	ldw	r4,0(r2)
 5047da0:	200b883a 	mov	r5,r4
 5047da4:	1809883a 	mov	r4,r3
 5047da8:	504bdb00 	call	504bdb0 <__mulsf3>
 5047dac:	1007883a 	mov	r3,r2
 5047db0:	1805883a 	mov	r2,r3
 5047db4:	100b883a 	mov	r5,r2
 5047db8:	8809883a 	mov	r4,r17
 5047dbc:	504b4a80 	call	504b4a8 <__addsf3>
 5047dc0:	1007883a 	mov	r3,r2
 5047dc4:	1823883a 	mov	r17,r3
 5047dc8:	e0bffb17 	ldw	r2,-20(fp)
 5047dcc:	10800a04 	addi	r2,r2,40
 5047dd0:	10c00017 	ldw	r3,0(r2)
 5047dd4:	e0bffc17 	ldw	r2,-16(fp)
 5047dd8:	10800a04 	addi	r2,r2,40
 5047ddc:	11000017 	ldw	r4,0(r2)
 5047de0:	200b883a 	mov	r5,r4
 5047de4:	1809883a 	mov	r4,r3
 5047de8:	504bdb00 	call	504bdb0 <__mulsf3>
 5047dec:	1007883a 	mov	r3,r2
 5047df0:	1805883a 	mov	r2,r3
 5047df4:	100b883a 	mov	r5,r2
 5047df8:	8809883a 	mov	r4,r17
 5047dfc:	504b4a80 	call	504b4a8 <__addsf3>
 5047e00:	1007883a 	mov	r3,r2
 5047e04:	1823883a 	mov	r17,r3
 5047e08:	e0bffb17 	ldw	r2,-20(fp)
 5047e0c:	10800b04 	addi	r2,r2,44
 5047e10:	10c00017 	ldw	r3,0(r2)
 5047e14:	e0bffc17 	ldw	r2,-16(fp)
 5047e18:	10800e04 	addi	r2,r2,56
 5047e1c:	11000017 	ldw	r4,0(r2)
 5047e20:	200b883a 	mov	r5,r4
 5047e24:	1809883a 	mov	r4,r3
 5047e28:	504bdb00 	call	504bdb0 <__mulsf3>
 5047e2c:	1007883a 	mov	r3,r2
 5047e30:	1805883a 	mov	r2,r3
 5047e34:	100b883a 	mov	r5,r2
 5047e38:	8809883a 	mov	r4,r17
 5047e3c:	504b4a80 	call	504b4a8 <__addsf3>
 5047e40:	1007883a 	mov	r3,r2
 5047e44:	1805883a 	mov	r2,r3
 5047e48:	80800015 	stw	r2,0(r16)
    dest[M4(2,3)] = src1[M4(2,0)] * src2[M4(0,3)] + src1[M4(2,1)] * src2[M4(1,3)] + src1[M4(2,2)] * src2[M4(2,3)] + src1[M4(2,3)] * src2[M4(3,3)]; 
 5047e4c:	e0bffd17 	ldw	r2,-12(fp)
 5047e50:	14000b04 	addi	r16,r2,44
 5047e54:	e0bffb17 	ldw	r2,-20(fp)
 5047e58:	10800804 	addi	r2,r2,32
 5047e5c:	10c00017 	ldw	r3,0(r2)
 5047e60:	e0bffc17 	ldw	r2,-16(fp)
 5047e64:	10800304 	addi	r2,r2,12
 5047e68:	11000017 	ldw	r4,0(r2)
 5047e6c:	200b883a 	mov	r5,r4
 5047e70:	1809883a 	mov	r4,r3
 5047e74:	504bdb00 	call	504bdb0 <__mulsf3>
 5047e78:	1007883a 	mov	r3,r2
 5047e7c:	1823883a 	mov	r17,r3
 5047e80:	e0bffb17 	ldw	r2,-20(fp)
 5047e84:	10800904 	addi	r2,r2,36
 5047e88:	10c00017 	ldw	r3,0(r2)
 5047e8c:	e0bffc17 	ldw	r2,-16(fp)
 5047e90:	10800704 	addi	r2,r2,28
 5047e94:	11000017 	ldw	r4,0(r2)
 5047e98:	200b883a 	mov	r5,r4
 5047e9c:	1809883a 	mov	r4,r3
 5047ea0:	504bdb00 	call	504bdb0 <__mulsf3>
 5047ea4:	1007883a 	mov	r3,r2
 5047ea8:	1805883a 	mov	r2,r3
 5047eac:	100b883a 	mov	r5,r2
 5047eb0:	8809883a 	mov	r4,r17
 5047eb4:	504b4a80 	call	504b4a8 <__addsf3>
 5047eb8:	1007883a 	mov	r3,r2
 5047ebc:	1823883a 	mov	r17,r3
 5047ec0:	e0bffb17 	ldw	r2,-20(fp)
 5047ec4:	10800a04 	addi	r2,r2,40
 5047ec8:	10c00017 	ldw	r3,0(r2)
 5047ecc:	e0bffc17 	ldw	r2,-16(fp)
 5047ed0:	10800b04 	addi	r2,r2,44
 5047ed4:	11000017 	ldw	r4,0(r2)
 5047ed8:	200b883a 	mov	r5,r4
 5047edc:	1809883a 	mov	r4,r3
 5047ee0:	504bdb00 	call	504bdb0 <__mulsf3>
 5047ee4:	1007883a 	mov	r3,r2
 5047ee8:	1805883a 	mov	r2,r3
 5047eec:	100b883a 	mov	r5,r2
 5047ef0:	8809883a 	mov	r4,r17
 5047ef4:	504b4a80 	call	504b4a8 <__addsf3>
 5047ef8:	1007883a 	mov	r3,r2
 5047efc:	1823883a 	mov	r17,r3
 5047f00:	e0bffb17 	ldw	r2,-20(fp)
 5047f04:	10800b04 	addi	r2,r2,44
 5047f08:	10c00017 	ldw	r3,0(r2)
 5047f0c:	e0bffc17 	ldw	r2,-16(fp)
 5047f10:	10800f04 	addi	r2,r2,60
 5047f14:	11000017 	ldw	r4,0(r2)
 5047f18:	200b883a 	mov	r5,r4
 5047f1c:	1809883a 	mov	r4,r3
 5047f20:	504bdb00 	call	504bdb0 <__mulsf3>
 5047f24:	1007883a 	mov	r3,r2
 5047f28:	1805883a 	mov	r2,r3
 5047f2c:	100b883a 	mov	r5,r2
 5047f30:	8809883a 	mov	r4,r17
 5047f34:	504b4a80 	call	504b4a8 <__addsf3>
 5047f38:	1007883a 	mov	r3,r2
 5047f3c:	1805883a 	mov	r2,r3
 5047f40:	80800015 	stw	r2,0(r16)
    dest[M4(3,0)] = src1[M4(3,0)] * src2[M4(0,0)] + src1[M4(3,1)] * src2[M4(1,0)] + src1[M4(3,2)] * src2[M4(2,0)] + src1[M4(3,3)] * src2[M4(3,0)]; 
 5047f44:	e0bffd17 	ldw	r2,-12(fp)
 5047f48:	14000c04 	addi	r16,r2,48
 5047f4c:	e0bffb17 	ldw	r2,-20(fp)
 5047f50:	10800c04 	addi	r2,r2,48
 5047f54:	10c00017 	ldw	r3,0(r2)
 5047f58:	e0bffc17 	ldw	r2,-16(fp)
 5047f5c:	11000017 	ldw	r4,0(r2)
 5047f60:	200b883a 	mov	r5,r4
 5047f64:	1809883a 	mov	r4,r3
 5047f68:	504bdb00 	call	504bdb0 <__mulsf3>
 5047f6c:	1007883a 	mov	r3,r2
 5047f70:	1823883a 	mov	r17,r3
 5047f74:	e0bffb17 	ldw	r2,-20(fp)
 5047f78:	10800d04 	addi	r2,r2,52
 5047f7c:	10c00017 	ldw	r3,0(r2)
 5047f80:	e0bffc17 	ldw	r2,-16(fp)
 5047f84:	10800404 	addi	r2,r2,16
 5047f88:	11000017 	ldw	r4,0(r2)
 5047f8c:	200b883a 	mov	r5,r4
 5047f90:	1809883a 	mov	r4,r3
 5047f94:	504bdb00 	call	504bdb0 <__mulsf3>
 5047f98:	1007883a 	mov	r3,r2
 5047f9c:	1805883a 	mov	r2,r3
 5047fa0:	100b883a 	mov	r5,r2
 5047fa4:	8809883a 	mov	r4,r17
 5047fa8:	504b4a80 	call	504b4a8 <__addsf3>
 5047fac:	1007883a 	mov	r3,r2
 5047fb0:	1823883a 	mov	r17,r3
 5047fb4:	e0bffb17 	ldw	r2,-20(fp)
 5047fb8:	10800e04 	addi	r2,r2,56
 5047fbc:	10c00017 	ldw	r3,0(r2)
 5047fc0:	e0bffc17 	ldw	r2,-16(fp)
 5047fc4:	10800804 	addi	r2,r2,32
 5047fc8:	11000017 	ldw	r4,0(r2)
 5047fcc:	200b883a 	mov	r5,r4
 5047fd0:	1809883a 	mov	r4,r3
 5047fd4:	504bdb00 	call	504bdb0 <__mulsf3>
 5047fd8:	1007883a 	mov	r3,r2
 5047fdc:	1805883a 	mov	r2,r3
 5047fe0:	100b883a 	mov	r5,r2
 5047fe4:	8809883a 	mov	r4,r17
 5047fe8:	504b4a80 	call	504b4a8 <__addsf3>
 5047fec:	1007883a 	mov	r3,r2
 5047ff0:	1823883a 	mov	r17,r3
 5047ff4:	e0bffb17 	ldw	r2,-20(fp)
 5047ff8:	10800f04 	addi	r2,r2,60
 5047ffc:	10c00017 	ldw	r3,0(r2)
 5048000:	e0bffc17 	ldw	r2,-16(fp)
 5048004:	10800c04 	addi	r2,r2,48
 5048008:	11000017 	ldw	r4,0(r2)
 504800c:	200b883a 	mov	r5,r4
 5048010:	1809883a 	mov	r4,r3
 5048014:	504bdb00 	call	504bdb0 <__mulsf3>
 5048018:	1007883a 	mov	r3,r2
 504801c:	1805883a 	mov	r2,r3
 5048020:	100b883a 	mov	r5,r2
 5048024:	8809883a 	mov	r4,r17
 5048028:	504b4a80 	call	504b4a8 <__addsf3>
 504802c:	1007883a 	mov	r3,r2
 5048030:	1805883a 	mov	r2,r3
 5048034:	80800015 	stw	r2,0(r16)
    dest[M4(3,1)] = src1[M4(3,0)] * src2[M4(0,1)] + src1[M4(3,1)] * src2[M4(1,1)] + src1[M4(3,2)] * src2[M4(2,1)] + src1[M4(3,3)] * src2[M4(3,1)]; 
 5048038:	e0bffd17 	ldw	r2,-12(fp)
 504803c:	14000d04 	addi	r16,r2,52
 5048040:	e0bffb17 	ldw	r2,-20(fp)
 5048044:	10800c04 	addi	r2,r2,48
 5048048:	10c00017 	ldw	r3,0(r2)
 504804c:	e0bffc17 	ldw	r2,-16(fp)
 5048050:	10800104 	addi	r2,r2,4
 5048054:	11000017 	ldw	r4,0(r2)
 5048058:	200b883a 	mov	r5,r4
 504805c:	1809883a 	mov	r4,r3
 5048060:	504bdb00 	call	504bdb0 <__mulsf3>
 5048064:	1007883a 	mov	r3,r2
 5048068:	1823883a 	mov	r17,r3
 504806c:	e0bffb17 	ldw	r2,-20(fp)
 5048070:	10800d04 	addi	r2,r2,52
 5048074:	10c00017 	ldw	r3,0(r2)
 5048078:	e0bffc17 	ldw	r2,-16(fp)
 504807c:	10800504 	addi	r2,r2,20
 5048080:	11000017 	ldw	r4,0(r2)
 5048084:	200b883a 	mov	r5,r4
 5048088:	1809883a 	mov	r4,r3
 504808c:	504bdb00 	call	504bdb0 <__mulsf3>
 5048090:	1007883a 	mov	r3,r2
 5048094:	1805883a 	mov	r2,r3
 5048098:	100b883a 	mov	r5,r2
 504809c:	8809883a 	mov	r4,r17
 50480a0:	504b4a80 	call	504b4a8 <__addsf3>
 50480a4:	1007883a 	mov	r3,r2
 50480a8:	1823883a 	mov	r17,r3
 50480ac:	e0bffb17 	ldw	r2,-20(fp)
 50480b0:	10800e04 	addi	r2,r2,56
 50480b4:	10c00017 	ldw	r3,0(r2)
 50480b8:	e0bffc17 	ldw	r2,-16(fp)
 50480bc:	10800904 	addi	r2,r2,36
 50480c0:	11000017 	ldw	r4,0(r2)
 50480c4:	200b883a 	mov	r5,r4
 50480c8:	1809883a 	mov	r4,r3
 50480cc:	504bdb00 	call	504bdb0 <__mulsf3>
 50480d0:	1007883a 	mov	r3,r2
 50480d4:	1805883a 	mov	r2,r3
 50480d8:	100b883a 	mov	r5,r2
 50480dc:	8809883a 	mov	r4,r17
 50480e0:	504b4a80 	call	504b4a8 <__addsf3>
 50480e4:	1007883a 	mov	r3,r2
 50480e8:	1823883a 	mov	r17,r3
 50480ec:	e0bffb17 	ldw	r2,-20(fp)
 50480f0:	10800f04 	addi	r2,r2,60
 50480f4:	10c00017 	ldw	r3,0(r2)
 50480f8:	e0bffc17 	ldw	r2,-16(fp)
 50480fc:	10800d04 	addi	r2,r2,52
 5048100:	11000017 	ldw	r4,0(r2)
 5048104:	200b883a 	mov	r5,r4
 5048108:	1809883a 	mov	r4,r3
 504810c:	504bdb00 	call	504bdb0 <__mulsf3>
 5048110:	1007883a 	mov	r3,r2
 5048114:	1805883a 	mov	r2,r3
 5048118:	100b883a 	mov	r5,r2
 504811c:	8809883a 	mov	r4,r17
 5048120:	504b4a80 	call	504b4a8 <__addsf3>
 5048124:	1007883a 	mov	r3,r2
 5048128:	1805883a 	mov	r2,r3
 504812c:	80800015 	stw	r2,0(r16)
    dest[M4(3,2)] = src1[M4(3,0)] * src2[M4(0,2)] + src1[M4(3,1)] * src2[M4(1,2)] + src1[M4(3,2)] * src2[M4(2,2)] + src1[M4(3,3)] * src2[M4(3,2)]; 
 5048130:	e0bffd17 	ldw	r2,-12(fp)
 5048134:	14000e04 	addi	r16,r2,56
 5048138:	e0bffb17 	ldw	r2,-20(fp)
 504813c:	10800c04 	addi	r2,r2,48
 5048140:	10c00017 	ldw	r3,0(r2)
 5048144:	e0bffc17 	ldw	r2,-16(fp)
 5048148:	10800204 	addi	r2,r2,8
 504814c:	11000017 	ldw	r4,0(r2)
 5048150:	200b883a 	mov	r5,r4
 5048154:	1809883a 	mov	r4,r3
 5048158:	504bdb00 	call	504bdb0 <__mulsf3>
 504815c:	1007883a 	mov	r3,r2
 5048160:	1823883a 	mov	r17,r3
 5048164:	e0bffb17 	ldw	r2,-20(fp)
 5048168:	10800d04 	addi	r2,r2,52
 504816c:	10c00017 	ldw	r3,0(r2)
 5048170:	e0bffc17 	ldw	r2,-16(fp)
 5048174:	10800604 	addi	r2,r2,24
 5048178:	11000017 	ldw	r4,0(r2)
 504817c:	200b883a 	mov	r5,r4
 5048180:	1809883a 	mov	r4,r3
 5048184:	504bdb00 	call	504bdb0 <__mulsf3>
 5048188:	1007883a 	mov	r3,r2
 504818c:	1805883a 	mov	r2,r3
 5048190:	100b883a 	mov	r5,r2
 5048194:	8809883a 	mov	r4,r17
 5048198:	504b4a80 	call	504b4a8 <__addsf3>
 504819c:	1007883a 	mov	r3,r2
 50481a0:	1823883a 	mov	r17,r3
 50481a4:	e0bffb17 	ldw	r2,-20(fp)
 50481a8:	10800e04 	addi	r2,r2,56
 50481ac:	10c00017 	ldw	r3,0(r2)
 50481b0:	e0bffc17 	ldw	r2,-16(fp)
 50481b4:	10800a04 	addi	r2,r2,40
 50481b8:	11000017 	ldw	r4,0(r2)
 50481bc:	200b883a 	mov	r5,r4
 50481c0:	1809883a 	mov	r4,r3
 50481c4:	504bdb00 	call	504bdb0 <__mulsf3>
 50481c8:	1007883a 	mov	r3,r2
 50481cc:	1805883a 	mov	r2,r3
 50481d0:	100b883a 	mov	r5,r2
 50481d4:	8809883a 	mov	r4,r17
 50481d8:	504b4a80 	call	504b4a8 <__addsf3>
 50481dc:	1007883a 	mov	r3,r2
 50481e0:	1823883a 	mov	r17,r3
 50481e4:	e0bffb17 	ldw	r2,-20(fp)
 50481e8:	10800f04 	addi	r2,r2,60
 50481ec:	10c00017 	ldw	r3,0(r2)
 50481f0:	e0bffc17 	ldw	r2,-16(fp)
 50481f4:	10800e04 	addi	r2,r2,56
 50481f8:	11000017 	ldw	r4,0(r2)
 50481fc:	200b883a 	mov	r5,r4
 5048200:	1809883a 	mov	r4,r3
 5048204:	504bdb00 	call	504bdb0 <__mulsf3>
 5048208:	1007883a 	mov	r3,r2
 504820c:	1805883a 	mov	r2,r3
 5048210:	100b883a 	mov	r5,r2
 5048214:	8809883a 	mov	r4,r17
 5048218:	504b4a80 	call	504b4a8 <__addsf3>
 504821c:	1007883a 	mov	r3,r2
 5048220:	1805883a 	mov	r2,r3
 5048224:	80800015 	stw	r2,0(r16)
    dest[M4(3,3)] = src1[M4(3,0)] * src2[M4(0,3)] + src1[M4(3,1)] * src2[M4(1,3)] + src1[M4(3,2)] * src2[M4(2,3)] + src1[M4(3,3)] * src2[M4(3,3)];
 5048228:	e0bffd17 	ldw	r2,-12(fp)
 504822c:	14000f04 	addi	r16,r2,60
 5048230:	e0bffb17 	ldw	r2,-20(fp)
 5048234:	10800c04 	addi	r2,r2,48
 5048238:	10c00017 	ldw	r3,0(r2)
 504823c:	e0bffc17 	ldw	r2,-16(fp)
 5048240:	10800304 	addi	r2,r2,12
 5048244:	11000017 	ldw	r4,0(r2)
 5048248:	200b883a 	mov	r5,r4
 504824c:	1809883a 	mov	r4,r3
 5048250:	504bdb00 	call	504bdb0 <__mulsf3>
 5048254:	1007883a 	mov	r3,r2
 5048258:	1823883a 	mov	r17,r3
 504825c:	e0bffb17 	ldw	r2,-20(fp)
 5048260:	10800d04 	addi	r2,r2,52
 5048264:	10c00017 	ldw	r3,0(r2)
 5048268:	e0bffc17 	ldw	r2,-16(fp)
 504826c:	10800704 	addi	r2,r2,28
 5048270:	11000017 	ldw	r4,0(r2)
 5048274:	200b883a 	mov	r5,r4
 5048278:	1809883a 	mov	r4,r3
 504827c:	504bdb00 	call	504bdb0 <__mulsf3>
 5048280:	1007883a 	mov	r3,r2
 5048284:	1805883a 	mov	r2,r3
 5048288:	100b883a 	mov	r5,r2
 504828c:	8809883a 	mov	r4,r17
 5048290:	504b4a80 	call	504b4a8 <__addsf3>
 5048294:	1007883a 	mov	r3,r2
 5048298:	1823883a 	mov	r17,r3
 504829c:	e0bffb17 	ldw	r2,-20(fp)
 50482a0:	10800e04 	addi	r2,r2,56
 50482a4:	10c00017 	ldw	r3,0(r2)
 50482a8:	e0bffc17 	ldw	r2,-16(fp)
 50482ac:	10800b04 	addi	r2,r2,44
 50482b0:	11000017 	ldw	r4,0(r2)
 50482b4:	200b883a 	mov	r5,r4
 50482b8:	1809883a 	mov	r4,r3
 50482bc:	504bdb00 	call	504bdb0 <__mulsf3>
 50482c0:	1007883a 	mov	r3,r2
 50482c4:	1805883a 	mov	r2,r3
 50482c8:	100b883a 	mov	r5,r2
 50482cc:	8809883a 	mov	r4,r17
 50482d0:	504b4a80 	call	504b4a8 <__addsf3>
 50482d4:	1007883a 	mov	r3,r2
 50482d8:	1823883a 	mov	r17,r3
 50482dc:	e0bffb17 	ldw	r2,-20(fp)
 50482e0:	10800f04 	addi	r2,r2,60
 50482e4:	10c00017 	ldw	r3,0(r2)
 50482e8:	e0bffc17 	ldw	r2,-16(fp)
 50482ec:	10800f04 	addi	r2,r2,60
 50482f0:	11000017 	ldw	r4,0(r2)
 50482f4:	200b883a 	mov	r5,r4
 50482f8:	1809883a 	mov	r4,r3
 50482fc:	504bdb00 	call	504bdb0 <__mulsf3>
 5048300:	1007883a 	mov	r3,r2
 5048304:	1805883a 	mov	r2,r3
 5048308:	100b883a 	mov	r5,r2
 504830c:	8809883a 	mov	r4,r17
 5048310:	504b4a80 	call	504b4a8 <__addsf3>
 5048314:	1007883a 	mov	r3,r2
 5048318:	1805883a 	mov	r2,r3
 504831c:	80800015 	stw	r2,0(r16)
};
 5048320:	0001883a 	nop
 5048324:	e6fffe04 	addi	sp,fp,-8
 5048328:	dfc00317 	ldw	ra,12(sp)
 504832c:	df000217 	ldw	fp,8(sp)
 5048330:	dc400117 	ldw	r17,4(sp)
 5048334:	dc000017 	ldw	r16,0(sp)
 5048338:	dec00404 	addi	sp,sp,16
 504833c:	f800283a 	ret

05048340 <_Z13display_digith>:

alt_video_display Display;

Cube_3D Cube;

uint8_t display_digit(uint8_t val){
 5048340:	defff804 	addi	sp,sp,-32
 5048344:	dfc00715 	stw	ra,28(sp)
 5048348:	df000615 	stw	fp,24(sp)
 504834c:	df000604 	addi	fp,sp,24
 5048350:	2005883a 	mov	r2,r4
 5048354:	e0bfff05 	stb	r2,-4(fp)
	uint8_t lut[20] = {0x3F, 0x06, 0x5B, 0x4F, 	//0 to 3
			0x66, 0x6D, 0x7D, 0x07,	//4 to 7
			0x7F, 0x6F, 0x77, 0x7C,  //8 to B
			0x39, 0x5E, 0x79, 0x71,  //C to F
			0x00, 0x40, 0x5E, 0x76};	//0x00 codifica il display spento -> NO_NUMBER, 0x40 codifica il meno;
 5048358:	008141b4 	movhi	r2,1286
 504835c:	10839d04 	addi	r2,r2,3700
 5048360:	e0fffa04 	addi	r3,fp,-24
 5048364:	1009883a 	mov	r4,r2
 5048368:	00800504 	movi	r2,20
 504836c:	100d883a 	mov	r6,r2
 5048370:	200b883a 	mov	r5,r4
 5048374:	1809883a 	mov	r4,r3
 5048378:	504f8cc0 	call	504f8cc <memcpy>
	return (lut[val]);
 504837c:	e0bfff03 	ldbu	r2,-4(fp)
 5048380:	e0fffa04 	addi	r3,fp,-24
 5048384:	1885883a 	add	r2,r3,r2
 5048388:	10800003 	ldbu	r2,0(r2)
}
 504838c:	e037883a 	mov	sp,fp
 5048390:	dfc00117 	ldw	ra,4(sp)
 5048394:	df000017 	ldw	fp,0(sp)
 5048398:	dec00204 	addi	sp,sp,8
 504839c:	f800283a 	ret

050483a0 <_Z11display_fpsm>:
void display_fps(uint32_t fps){
 50483a0:	defffa04 	addi	sp,sp,-24
 50483a4:	dfc00515 	stw	ra,20(sp)
 50483a8:	df000415 	stw	fp,16(sp)
 50483ac:	dc400315 	stw	r17,12(sp)
 50483b0:	dc000215 	stw	r16,8(sp)
 50483b4:	df000404 	addi	fp,sp,16
 50483b8:	e13ffd15 	stw	r4,-12(fp)
	uint8_t units, tens, hundreds;

	hundreds = (fps / 100) ? (fps / 100) : NO_NUMBER ;
 50483bc:	e0bffd17 	ldw	r2,-12(fp)
 50483c0:	10801930 	cmpltui	r2,r2,100
 50483c4:	1000051e 	bne	r2,zero,50483dc <_Z11display_fpsm+0x3c>
 50483c8:	e0bffd17 	ldw	r2,-12(fp)
 50483cc:	01401904 	movi	r5,100
 50483d0:	1009883a 	mov	r4,r2
 50483d4:	504b3ec0 	call	504b3ec <__udivsi3>
 50483d8:	00000106 	br	50483e0 <_Z11display_fpsm+0x40>
 50483dc:	00800404 	movi	r2,16
 50483e0:	e0bffc05 	stb	r2,-16(fp)
	tens = (fps % 100) / 10;
 50483e4:	e0bffd17 	ldw	r2,-12(fp)
 50483e8:	01401904 	movi	r5,100
 50483ec:	1009883a 	mov	r4,r2
 50483f0:	504b4500 	call	504b450 <__umodsi3>
 50483f4:	01400284 	movi	r5,10
 50483f8:	1009883a 	mov	r4,r2
 50483fc:	504b3ec0 	call	504b3ec <__udivsi3>
 5048400:	e0bffc45 	stb	r2,-15(fp)
	tens = ((hundreds == NO_NUMBER) && (tens == 0)) ? NO_NUMBER : tens;
 5048404:	e0bffc03 	ldbu	r2,-16(fp)
 5048408:	10800418 	cmpnei	r2,r2,16
 504840c:	1000021e 	bne	r2,zero,5048418 <_Z11display_fpsm+0x78>
 5048410:	e0bffc43 	ldbu	r2,-15(fp)
 5048414:	10000226 	beq	r2,zero,5048420 <_Z11display_fpsm+0x80>
 5048418:	e0bffc43 	ldbu	r2,-15(fp)
 504841c:	00000106 	br	5048424 <_Z11display_fpsm+0x84>
 5048420:	00800404 	movi	r2,16
 5048424:	e0bffc45 	stb	r2,-15(fp)
	units = fps % 10;
 5048428:	e0bffd17 	ldw	r2,-12(fp)
 504842c:	01400284 	movi	r5,10
 5048430:	1009883a 	mov	r4,r2
 5048434:	504b4500 	call	504b450 <__umodsi3>
 5048438:	e0bffc85 	stb	r2,-14(fp)
	HEX3_HEX0_DATA_REG = display_digit(units) << FIRST_DISPLAY | display_digit(tens) << SECOND_DISPLAY | display_digit(hundreds) << THIRD_DISPLAY ;
 504843c:	04014034 	movhi	r16,1280
 5048440:	84041804 	addi	r16,r16,4192
 5048444:	e0bffc83 	ldbu	r2,-14(fp)
 5048448:	1009883a 	mov	r4,r2
 504844c:	50483400 	call	5048340 <_Z13display_digith>
 5048450:	14403fcc 	andi	r17,r2,255
 5048454:	e0bffc43 	ldbu	r2,-15(fp)
 5048458:	1009883a 	mov	r4,r2
 504845c:	50483400 	call	5048340 <_Z13display_digith>
 5048460:	10803fcc 	andi	r2,r2,255
 5048464:	1004923a 	slli	r2,r2,8
 5048468:	88a2b03a 	or	r17,r17,r2
 504846c:	e0bffc03 	ldbu	r2,-16(fp)
 5048470:	1009883a 	mov	r4,r2
 5048474:	50483400 	call	5048340 <_Z13display_digith>
 5048478:	10803fcc 	andi	r2,r2,255
 504847c:	1004943a 	slli	r2,r2,16
 5048480:	8884b03a 	or	r2,r17,r2
 5048484:	80800015 	stw	r2,0(r16)

}
 5048488:	0001883a 	nop
 504848c:	e6fffe04 	addi	sp,fp,-8
 5048490:	dfc00317 	ldw	ra,12(sp)
 5048494:	df000217 	ldw	fp,8(sp)
 5048498:	dc400117 	ldw	r17,4(sp)
 504849c:	dc000017 	ldw	r16,0(sp)
 50484a0:	dec00404 	addi	sp,sp,16
 50484a4:	f800283a 	ret

050484a8 <main>:

int main(){
 50484a8:	deffe204 	addi	sp,sp,-120
 50484ac:	dfc01d15 	stw	ra,116(sp)
 50484b0:	df001c15 	stw	fp,112(sp)
 50484b4:	df001c04 	addi	fp,sp,112

	uint32_t fps;
	uint32_t delta_for_fps;

	init_accelerometer();
 50484b8:	50450140 	call	5045014 <_Z18init_accelerometerv>
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 50484bc:	010141b4 	movhi	r4,1286
 50484c0:	2103a204 	addi	r4,r4,3720
 50484c4:	505ef480 	call	505ef48 <alt_up_pixel_buffer_dma_open_dev>
 50484c8:	d0a80f15 	stw	r2,-24516(gp)
	

	TOUCH_HANDLE *pTouch;

	// init LCD
	LCD_Init();
 50484cc:	504049c0 	call	504049c <LCD_Init>
	LCD_Clear(0X0000);
 50484d0:	0009883a 	mov	r4,zero
 50484d4:	504039c0 	call	504039c <LCD_Clear>

	Display.interlace = 0;
 50484d8:	008141b4 	movhi	r2,1286
 50484dc:	10952a04 	addi	r2,r2,21672
 50484e0:	10000415 	stw	zero,16(r2)
	Display.bytes_per_pixel = 2;
 50484e4:	008141b4 	movhi	r2,1286
 50484e8:	10952a04 	addi	r2,r2,21672
 50484ec:	00c00084 	movi	r3,2
 50484f0:	10c00315 	stw	r3,12(r2)
	Display.color_depth = 16;
 50484f4:	008141b4 	movhi	r2,1286
 50484f8:	10952a04 	addi	r2,r2,21672
 50484fc:	00c00404 	movi	r3,16
 5048500:	10c00015 	stw	r3,0(r2)
	Display.height = SCREEN_HEIGHT;
 5048504:	008141b4 	movhi	r2,1286
 5048508:	10952a04 	addi	r2,r2,21672
 504850c:	00c05004 	movi	r3,320
 5048510:	10c00215 	stw	r3,8(r2)
	Display.width = SCREEN_WIDTH;
 5048514:	008141b4 	movhi	r2,1286
 5048518:	10952a04 	addi	r2,r2,21672
 504851c:	00c03c04 	movi	r3,240
 5048520:	10c00115 	stw	r3,4(r2)

	// init touch
	pTouch = Touch_Init(TOUCH_SPI_BASE, TOUCH_PEN_IRQ_N_BASE, TOUCH_PEN_IRQ_N_IRQ);
 5048524:	018000c4 	movi	r6,3
 5048528:	01410034 	movhi	r5,1024
 504852c:	29400c04 	addi	r5,r5,48
 5048530:	01010034 	movhi	r4,1024
 5048534:	504402c0 	call	504402c <Touch_Init>
 5048538:	e0bfe915 	stw	r2,-92(fp)
	//stringhe per disegnare su LT24 
	char *cmd_str[] = {"ROT" , "TRASL" , "SCALE"} ;
 504853c:	008141b4 	movhi	r2,1286
 5048540:	1083aa04 	addi	r2,r2,3752
 5048544:	e0bfeb15 	stw	r2,-84(fp)
 5048548:	008141b4 	movhi	r2,1286
 504854c:	1083ab04 	addi	r2,r2,3756
 5048550:	e0bfec15 	stw	r2,-80(fp)
 5048554:	008141b4 	movhi	r2,1286
 5048558:	1083ad04 	addi	r2,r2,3764
 504855c:	e0bfed15 	stw	r2,-76(fp)
	//flag di controllo : se false disabilita i comandi 
	bool run_touch{FALSE};
 5048560:	e03fe705 	stb	zero,-100(fp)
#ifdef DEBUG_TOUCH
	if (!pTouch){
 5048564:	e0bfe917 	ldw	r2,-92(fp)
 5048568:	1000041e 	bne	r2,zero,504857c <main+0xd4>
		printf("Failed to init touch\r\n");
 504856c:	010141b4 	movhi	r4,1286
 5048570:	2103af04 	addi	r4,r4,3772
 5048574:	504fc680 	call	504fc68 <puts>
 5048578:	00000306 	br	5048588 <main+0xe0>
	}else{
		printf("Init touch successfully\r\n");
 504857c:	010141b4 	movhi	r4,1286
 5048580:	2103b504 	addi	r4,r4,3796
 5048584:	504fc680 	call	504fc68 <puts>
	}
    #endif


	GUI_show_welcome();
 5048588:	5044b580 	call	5044b58 <_Z16GUI_show_welcomev>
	usleep(1000000);
 504858c:	010003f4 	movhi	r4,15
 5048590:	21109004 	addi	r4,r4,16960
 5048594:	505d81c0 	call	505d81c <usleep>
	LCD_Clear(WHITE_24);
 5048598:	013fffd4 	movui	r4,65535
 504859c:	504039c0 	call	504039c <LCD_Clear>

	RECT rect_z_ctrl, rect_xy_ctrl, rect_cmd_ctrl;
	POINT pt;
	SWIPE touch_swipe;
	cmd_t actual_cmd = ROT;
 50485a0:	e03fe815 	stw	zero,-96(fp)
	int x_touch,y_touch;		//uscita row del touch, da trasformare
	//inizializza le strutture dei rettangoli e li disegna
	GUI_desk_init(&rect_xy_ctrl, &rect_z_ctrl, &rect_cmd_ctrl);
 50485a4:	e13ff604 	addi	r4,fp,-40
 50485a8:	e0ffee04 	addi	r3,fp,-72
 50485ac:	e0bff204 	addi	r2,fp,-56
 50485b0:	200d883a 	mov	r6,r4
 50485b4:	180b883a 	mov	r5,r3
 50485b8:	1009883a 	mov	r4,r2
 50485bc:	5044c680 	call	5044c68 <_Z13GUI_desk_initP4RECTS0_S0_>
	
	alt_timestamp_start();
 50485c0:	505ea800 	call	505ea80 <alt_timestamp_start>
	delta_for_fps = alt_timestamp();
 50485c4:	505eaf80 	call	505eaf8 <alt_timestamp>
 50485c8:	e0bfe615 	stw	r2,-104(fp)
	//variabili per fare lo swipe


	for(;;){
		
		if (Touch_GetXY(pTouch, &x_touch, &y_touch)){
 50485cc:	e0ffff04 	addi	r3,fp,-4
 50485d0:	e0bffe04 	addi	r2,fp,-8
 50485d4:	180d883a 	mov	r6,r3
 50485d8:	100b883a 	mov	r5,r2
 50485dc:	e13fe917 	ldw	r4,-92(fp)
 50485e0:	50442380 	call	5044238 <Touch_GetXY>
 50485e4:	1004c03a 	cmpne	r2,r2,zero
 50485e8:	10803fcc 	andi	r2,r2,255
 50485ec:	10009a26 	beq	r2,zero,5048858 <main+0x3b0>
			pt.x = x_touch;//y_touch;   	LA TRASLAZIONE VIENE EFFETTUATA DIRETTAMENTE ALL'
 50485f0:	e0bffe17 	ldw	r2,-8(fp)
 50485f4:	e0bffa15 	stw	r2,-24(fp)
			pt.y = y_touch;//240 - x_touch; INTERNO DELLA FUNZIONE GET_XY
 50485f8:	e0bfff17 	ldw	r2,-4(fp)
 50485fc:	e0bffb15 	stw	r2,-20(fp)
			#ifdef DEBUG_TOUCH
			printf("x=%d, y=%d\r\n", pt.x,pt.y);
 5048600:	e0bffa17 	ldw	r2,-24(fp)
 5048604:	e0fffb17 	ldw	r3,-20(fp)
 5048608:	180d883a 	mov	r6,r3
 504860c:	100b883a 	mov	r5,r2
 5048610:	010141b4 	movhi	r4,1286
 5048614:	2103bc04 	addi	r4,r4,3824
 5048618:	504fb6c0 	call	504fb6c <printf>
			#endif
			
			if(is_point_in_rect(&pt,&rect_cmd_ctrl)){ //sono nell'area di controllo dei comandi
 504861c:	e0fff604 	addi	r3,fp,-40
 5048620:	e0bffa04 	addi	r2,fp,-24
 5048624:	180b883a 	mov	r5,r3
 5048628:	1009883a 	mov	r4,r2
 504862c:	5044e5c0 	call	5044e5c <_Z16is_point_in_rectP5POINTP4RECT>
 5048630:	10803fcc 	andi	r2,r2,255
 5048634:	10006126 	beq	r2,zero,50487bc <main+0x314>
				if(!run_touch){
 5048638:	e0bfe703 	ldbu	r2,-100(fp)
 504863c:	1080005c 	xori	r2,r2,1
 5048640:	10803fcc 	andi	r2,r2,255
 5048644:	10001726 	beq	r2,zero,50486a4 <main+0x1fc>
					run_touch = true;	//creo un latch per il semaforo
 5048648:	00800044 	movi	r2,1
 504864c:	e0bfe705 	stb	r2,-100(fp)
					vid_print_string( (rect_cmd_ctrl.right)/2 , rect_cmd_ctrl.bottom/2 , WHITE_24, cour10_font, &Display, "PRESS TO INIT" );
 5048650:	e0bff717 	ldw	r2,-36(fp)
 5048654:	1006d7fa 	srli	r3,r2,31
 5048658:	1885883a 	add	r2,r3,r2
 504865c:	1005d07a 	srai	r2,r2,1
 5048660:	1009883a 	mov	r4,r2
 5048664:	e0bff917 	ldw	r2,-28(fp)
 5048668:	1006d7fa 	srli	r3,r2,31
 504866c:	1885883a 	add	r2,r3,r2
 5048670:	1005d07a 	srai	r2,r2,1
 5048674:	100b883a 	mov	r5,r2
 5048678:	d0e00017 	ldw	r3,-32768(gp)
 504867c:	008141b4 	movhi	r2,1286
 5048680:	1083c004 	addi	r2,r2,3840
 5048684:	d8800115 	stw	r2,4(sp)
 5048688:	008141b4 	movhi	r2,1286
 504868c:	10952a04 	addi	r2,r2,21672
 5048690:	d8800015 	stw	r2,0(sp)
 5048694:	180f883a 	mov	r7,r3
 5048698:	01804034 	movhi	r6,256
 504869c:	31bfffc4 	addi	r6,r6,-1
 50486a0:	50416200 	call	5041620 <vid_print_string>
				}
				vid_print_string( (rect_cmd_ctrl.right)/2 , rect_cmd_ctrl.bottom/2 , WHITE_24, cour10_font, &Display, cmd_str[actual_cmd]);
 50486a4:	e0bff717 	ldw	r2,-36(fp)
 50486a8:	1006d7fa 	srli	r3,r2,31
 50486ac:	1885883a 	add	r2,r3,r2
 50486b0:	1005d07a 	srai	r2,r2,1
 50486b4:	1009883a 	mov	r4,r2
 50486b8:	e0bff917 	ldw	r2,-28(fp)
 50486bc:	1006d7fa 	srli	r3,r2,31
 50486c0:	1885883a 	add	r2,r3,r2
 50486c4:	1005d07a 	srai	r2,r2,1
 50486c8:	100b883a 	mov	r5,r2
 50486cc:	d0e00017 	ldw	r3,-32768(gp)
 50486d0:	e0bfe817 	ldw	r2,-96(fp)
 50486d4:	1085883a 	add	r2,r2,r2
 50486d8:	1085883a 	add	r2,r2,r2
 50486dc:	e1bfe604 	addi	r6,fp,-104
 50486e0:	3085883a 	add	r2,r6,r2
 50486e4:	10800504 	addi	r2,r2,20
 50486e8:	10800017 	ldw	r2,0(r2)
 50486ec:	d8800115 	stw	r2,4(sp)
 50486f0:	008141b4 	movhi	r2,1286
 50486f4:	10952a04 	addi	r2,r2,21672
 50486f8:	d8800015 	stw	r2,0(sp)
 50486fc:	180f883a 	mov	r7,r3
 5048700:	01804034 	movhi	r6,256
 5048704:	31bfffc4 	addi	r6,r6,-1
 5048708:	50416200 	call	5041620 <vid_print_string>
				actual_cmd = (actual_cmd >= 2) ? 0 : (actual_cmd+1);
 504870c:	e0bfe817 	ldw	r2,-96(fp)
 5048710:	10800088 	cmpgei	r2,r2,2
 5048714:	1000031e 	bne	r2,zero,5048724 <main+0x27c>
 5048718:	e0bfe817 	ldw	r2,-96(fp)
 504871c:	10800044 	addi	r2,r2,1
 5048720:	00000106 	br	5048728 <main+0x280>
 5048724:	0005883a 	mov	r2,zero
 5048728:	e0bfe815 	stw	r2,-96(fp)

				#ifdef DEBUG_TOUCH
				printf("command: %d\n", actual_cmd);
 504872c:	e0bfe817 	ldw	r2,-96(fp)
 5048730:	100b883a 	mov	r5,r2
 5048734:	010141b4 	movhi	r4,1286
 5048738:	2103c404 	addi	r4,r4,3856
 504873c:	504fb6c0 	call	504fb6c <printf>
				#endif
				vid_print_string( (rect_cmd_ctrl.right)/2 , rect_cmd_ctrl.bottom/2 , GREEN_24, cour10_font, &Display, cmd_str[actual_cmd]);
 5048740:	e0bff717 	ldw	r2,-36(fp)
 5048744:	1006d7fa 	srli	r3,r2,31
 5048748:	1885883a 	add	r2,r3,r2
 504874c:	1005d07a 	srai	r2,r2,1
 5048750:	1009883a 	mov	r4,r2
 5048754:	e0bff917 	ldw	r2,-28(fp)
 5048758:	1006d7fa 	srli	r3,r2,31
 504875c:	1885883a 	add	r2,r3,r2
 5048760:	1005d07a 	srai	r2,r2,1
 5048764:	100b883a 	mov	r5,r2
 5048768:	d0e00017 	ldw	r3,-32768(gp)
 504876c:	e0bfe817 	ldw	r2,-96(fp)
 5048770:	1085883a 	add	r2,r2,r2
 5048774:	1085883a 	add	r2,r2,r2
 5048778:	e1bfe604 	addi	r6,fp,-104
 504877c:	3085883a 	add	r2,r6,r2
 5048780:	10800504 	addi	r2,r2,20
 5048784:	10800017 	ldw	r2,0(r2)
 5048788:	d8800115 	stw	r2,4(sp)
 504878c:	008141b4 	movhi	r2,1286
 5048790:	10952a04 	addi	r2,r2,21672
 5048794:	d8800015 	stw	r2,0(sp)
 5048798:	180f883a 	mov	r7,r3
 504879c:	01a00014 	movui	r6,32768
 50487a0:	50416200 	call	5041620 <vid_print_string>
				usleep(800000);	//ritardo per evitare che pressioni prolungate facciano cambiare più comandi
 50487a4:	01000334 	movhi	r4,12
 50487a8:	210d4004 	addi	r4,r4,13568
 50487ac:	505d81c0 	call	505d81c <usleep>
				Touch_EmptyFifo(pTouch);		//svuoto la FIFO
 50487b0:	e13fe917 	ldw	r4,-92(fp)
 50487b4:	50441fc0 	call	50441fc <Touch_EmptyFifo>
 50487b8:	00002706 	br	5048858 <main+0x3b0>
			}
			else if(is_point_in_rect(&pt,&rect_z_ctrl) && run_touch){ //sono nell'are di controllo z
 50487bc:	e0ffee04 	addi	r3,fp,-72
 50487c0:	e0bffa04 	addi	r2,fp,-24
 50487c4:	180b883a 	mov	r5,r3
 50487c8:	1009883a 	mov	r4,r2
 50487cc:	5044e5c0 	call	5044e5c <_Z16is_point_in_rectP5POINTP4RECT>
 50487d0:	10803fcc 	andi	r2,r2,255
 50487d4:	10000426 	beq	r2,zero,50487e8 <main+0x340>
 50487d8:	e0bfe703 	ldbu	r2,-100(fp)
 50487dc:	10000226 	beq	r2,zero,50487e8 <main+0x340>
 50487e0:	00800044 	movi	r2,1
 50487e4:	00000106 	br	50487ec <main+0x344>
 50487e8:	0005883a 	mov	r2,zero
 50487ec:	10803fcc 	andi	r2,r2,255
 50487f0:	10000426 	beq	r2,zero,5048804 <main+0x35c>
				printf("Z area\r\n");
 50487f4:	010141b4 	movhi	r4,1286
 50487f8:	2103c804 	addi	r4,r4,3872
 50487fc:	504fc680 	call	504fc68 <puts>
 5048800:	00001506 	br	5048858 <main+0x3b0>

			}
			else if(is_point_in_rect(&pt,&rect_xy_ctrl) && run_touch){	//sono nell'are di controllo xy
 5048804:	e0fff204 	addi	r3,fp,-56
 5048808:	e0bffa04 	addi	r2,fp,-24
 504880c:	180b883a 	mov	r5,r3
 5048810:	1009883a 	mov	r4,r2
 5048814:	5044e5c0 	call	5044e5c <_Z16is_point_in_rectP5POINTP4RECT>
 5048818:	10803fcc 	andi	r2,r2,255
 504881c:	10000426 	beq	r2,zero,5048830 <main+0x388>
 5048820:	e0bfe703 	ldbu	r2,-100(fp)
 5048824:	10000226 	beq	r2,zero,5048830 <main+0x388>
 5048828:	00800044 	movi	r2,1
 504882c:	00000106 	br	5048834 <main+0x38c>
 5048830:	0005883a 	mov	r2,zero
 5048834:	10803fcc 	andi	r2,r2,255
 5048838:	10000726 	beq	r2,zero,5048858 <main+0x3b0>
				printf("XY area\r\n\n");
 504883c:	010141b4 	movhi	r4,1286
 5048840:	2103ca04 	addi	r4,r4,3880
 5048844:	504fc680 	call	504fc68 <puts>
				evaluate_swipe(pTouch, &touch_swipe);
 5048848:	e0bffc04 	addi	r2,fp,-16
 504884c:	100b883a 	mov	r5,r2
 5048850:	e13fe917 	ldw	r4,-92(fp)
 5048854:	5044ee00 	call	5044ee0 <_Z14evaluate_swipePvP5SWIPE>

			}
			
		}

		accelerometer_controller();
 5048858:	50450700 	call	5045070 <_Z24accelerometer_controllerv>
		Cube.calculate_rendering();
 504885c:	010141b4 	movhi	r4,1286
 5048860:	21152f04 	addi	r4,r4,21692
 5048864:	50489300 	call	5048930 <_ZN7Cube_3D19calculate_renderingEv>
		Cube.display_frame();
 5048868:	010141b4 	movhi	r4,1286
 504886c:	21152f04 	addi	r4,r4,21692
 5048870:	5046a500 	call	5046a50 <_ZN7Cube_3D13display_frameEv>

// s non riavvio maii il timer ci sta che quando va in overflow succedono cose strane
		fps = TIMER_FREQ/ (alt_timestamp() - delta_for_fps);
 5048874:	505eaf80 	call	505eaf8 <alt_timestamp>
 5048878:	1007883a 	mov	r3,r2
 504887c:	e0bfe617 	ldw	r2,-104(fp)
 5048880:	1885c83a 	sub	r2,r3,r2
 5048884:	100b883a 	mov	r5,r2
 5048888:	01013174 	movhi	r4,1221
 504888c:	212d0004 	addi	r4,r4,-19456
 5048890:	504b3ec0 	call	504b3ec <__udivsi3>
 5048894:	e0bfea15 	stw	r2,-88(fp)
		delta_for_fps = alt_timestamp();
 5048898:	505eaf80 	call	505eaf8 <alt_timestamp>
 504889c:	e0bfe615 	stw	r2,-104(fp)
		display_fps(fps);
 50488a0:	e13fea17 	ldw	r4,-88(fp)
 50488a4:	50483a00 	call	50483a0 <_Z11display_fpsm>
	alt_timestamp_start();
	delta_for_fps = alt_timestamp();
	//variabili per fare lo swipe


	for(;;){
 50488a8:	003f4806 	br	50485cc <_gp+0xfffdd1a4>

050488ac <_Z41__static_initialization_and_destruction_0ii>:
		delta_for_fps = alt_timestamp();
		display_fps(fps);
		//alt_timestamp_start();		// tolto visto che non si riavvia il timer

	}
}
 50488ac:	defffc04 	addi	sp,sp,-16
 50488b0:	dfc00315 	stw	ra,12(sp)
 50488b4:	df000215 	stw	fp,8(sp)
 50488b8:	df000204 	addi	fp,sp,8
 50488bc:	e13ffe15 	stw	r4,-8(fp)
 50488c0:	e17fff15 	stw	r5,-4(fp)
 50488c4:	e0bffe17 	ldw	r2,-8(fp)
 50488c8:	10800058 	cmpnei	r2,r2,1
 50488cc:	1000061e 	bne	r2,zero,50488e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 50488d0:	e0ffff17 	ldw	r3,-4(fp)
 50488d4:	00bfffd4 	movui	r2,65535
 50488d8:	1880031e 	bne	r3,r2,50488e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>

alt_up_pixel_buffer_dma_dev *pixel_buf_dma_dev;

alt_video_display Display;

Cube_3D Cube;
 50488dc:	010141b4 	movhi	r4,1286
 50488e0:	21152f04 	addi	r4,r4,21692
 50488e4:	50459540 	call	5045954 <_ZN7Cube_3DC1Ev>
		delta_for_fps = alt_timestamp();
		display_fps(fps);
		//alt_timestamp_start();		// tolto visto che non si riavvia il timer

	}
}
 50488e8:	0001883a 	nop
 50488ec:	e037883a 	mov	sp,fp
 50488f0:	dfc00117 	ldw	ra,4(sp)
 50488f4:	df000017 	ldw	fp,0(sp)
 50488f8:	dec00204 	addi	sp,sp,8
 50488fc:	f800283a 	ret

05048900 <_GLOBAL__sub_I_pixel_buf_dma_dev>:
 5048900:	defffe04 	addi	sp,sp,-8
 5048904:	dfc00115 	stw	ra,4(sp)
 5048908:	df000015 	stw	fp,0(sp)
 504890c:	d839883a 	mov	fp,sp
 5048910:	017fffd4 	movui	r5,65535
 5048914:	01000044 	movi	r4,1
 5048918:	50488ac0 	call	50488ac <_Z41__static_initialization_and_destruction_0ii>
 504891c:	e037883a 	mov	sp,fp
 5048920:	dfc00117 	ldw	ra,4(sp)
 5048924:	df000017 	ldw	fp,0(sp)
 5048928:	dec00204 	addi	sp,sp,8
 504892c:	f800283a 	ret

05048930 <_ZN7Cube_3D19calculate_renderingEv>:

        //funzione per calcolo trasformazioni controllate dall'accelerometro
        void update_acc_trsformation();
        
        //una funzione inline pare non possa avere prototipo e definizione su file diversi, quindi la definisco qui
        inline void calculate_rendering(){
 5048930:	defffd04 	addi	sp,sp,-12
 5048934:	dfc00215 	stw	ra,8(sp)
 5048938:	df000115 	stw	fp,4(sp)
 504893c:	df000104 	addi	fp,sp,4
 5048940:	e13fff15 	stw	r4,-4(fp)
            Matrix4x4MultiplyBy4x4(projection_matrix, translation_matrix, proj_trasl);
 5048944:	e0bfff17 	ldw	r2,-4(fp)
 5048948:	10c06204 	addi	r3,r2,392
 504894c:	e0bfff17 	ldw	r2,-4(fp)
 5048950:	11008204 	addi	r4,r2,520
 5048954:	e0bfff17 	ldw	r2,-4(fp)
 5048958:	1080a204 	addi	r2,r2,648
 504895c:	100f883a 	mov	r7,r2
 5048960:	200d883a 	mov	r6,r4
 5048964:	180b883a 	mov	r5,r3
 5048968:	e13fff17 	ldw	r4,-4(fp)
 504896c:	504739c0 	call	504739c <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            Matrix4x4MultiplyBy4x4(proj_trasl, rotation_matrix, proj_trasl_rot);
 5048970:	e0bfff17 	ldw	r2,-4(fp)
 5048974:	10c0a204 	addi	r3,r2,648
 5048978:	e0bfff17 	ldw	r2,-4(fp)
 504897c:	11007204 	addi	r4,r2,456
 5048980:	e0bfff17 	ldw	r2,-4(fp)
 5048984:	1080b204 	addi	r2,r2,712
 5048988:	100f883a 	mov	r7,r2
 504898c:	200d883a 	mov	r6,r4
 5048990:	180b883a 	mov	r5,r3
 5048994:	e13fff17 	ldw	r4,-4(fp)
 5048998:	504739c0 	call	504739c <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            Matrix4x4MultiplyBy4x4(proj_trasl_rot, scaling_matrix, complete_matrix);
 504899c:	e0bfff17 	ldw	r2,-4(fp)
 50489a0:	10c0b204 	addi	r3,r2,712
 50489a4:	e0bfff17 	ldw	r2,-4(fp)
 50489a8:	11009204 	addi	r4,r2,584
 50489ac:	e0bfff17 	ldw	r2,-4(fp)
 50489b0:	1080c204 	addi	r2,r2,776
 50489b4:	100f883a 	mov	r7,r2
 50489b8:	200d883a 	mov	r6,r4
 50489bc:	180b883a 	mov	r5,r3
 50489c0:	e13fff17 	ldw	r4,-4(fp)
 50489c4:	504739c0 	call	504739c <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            vector_matrix_multiply();
 50489c8:	e13fff17 	ldw	r4,-4(fp)
 50489cc:	5046d680 	call	5046d68 <_ZN7Cube_3D22vector_matrix_multiplyEv>
            //from_3D_to_2D();
        }
 50489d0:	0001883a 	nop
 50489d4:	e037883a 	mov	sp,fp
 50489d8:	dfc00117 	ldw	ra,4(sp)
 50489dc:	df000017 	ldw	fp,0(sp)
 50489e0:	dec00204 	addi	sp,sp,8
 50489e4:	f800283a 	ret

050489e8 <cos>:
 50489e8:	00a00034 	movhi	r2,32768
 50489ec:	defffa04 	addi	sp,sp,-24
 50489f0:	10bfffc4 	addi	r2,r2,-1
 50489f4:	00cffa74 	movhi	r3,16361
 50489f8:	dfc00515 	stw	ra,20(sp)
 50489fc:	2884703a 	and	r2,r5,r2
 5048a00:	18c87ec4 	addi	r3,r3,8699
 5048a04:	1880180e 	bge	r3,r2,5048a68 <cos+0x80>
 5048a08:	00dffc34 	movhi	r3,32752
 5048a0c:	18ffffc4 	addi	r3,r3,-1
 5048a10:	1880060e 	bge	r3,r2,5048a2c <cos+0x44>
 5048a14:	280f883a 	mov	r7,r5
 5048a18:	200d883a 	mov	r6,r4
 5048a1c:	504e3240 	call	504e324 <__subdf3>
 5048a20:	dfc00517 	ldw	ra,20(sp)
 5048a24:	dec00604 	addi	sp,sp,24
 5048a28:	f800283a 	ret
 5048a2c:	d9800104 	addi	r6,sp,4
 5048a30:	5048c640 	call	5048c64 <__ieee754_rem_pio2>
 5048a34:	108000cc 	andi	r2,r2,3
 5048a38:	00c00044 	movi	r3,1
 5048a3c:	10c01726 	beq	r2,r3,5048a9c <cos+0xb4>
 5048a40:	01000084 	movi	r4,2
 5048a44:	11000e26 	beq	r2,r4,5048a80 <cos+0x98>
 5048a48:	10001c26 	beq	r2,zero,5048abc <cos+0xd4>
 5048a4c:	d9800317 	ldw	r6,12(sp)
 5048a50:	d9c00417 	ldw	r7,16(sp)
 5048a54:	d9000117 	ldw	r4,4(sp)
 5048a58:	d9400217 	ldw	r5,8(sp)
 5048a5c:	d8c00015 	stw	r3,0(sp)
 5048a60:	504a6040 	call	504a604 <__kernel_sin>
 5048a64:	003fee06 	br	5048a20 <_gp+0xfffdd5f8>
 5048a68:	000d883a 	mov	r6,zero
 5048a6c:	000f883a 	mov	r7,zero
 5048a70:	50493d00 	call	50493d0 <__kernel_cos>
 5048a74:	dfc00517 	ldw	ra,20(sp)
 5048a78:	dec00604 	addi	sp,sp,24
 5048a7c:	f800283a 	ret
 5048a80:	d9800317 	ldw	r6,12(sp)
 5048a84:	d9c00417 	ldw	r7,16(sp)
 5048a88:	d9000117 	ldw	r4,4(sp)
 5048a8c:	d9400217 	ldw	r5,8(sp)
 5048a90:	50493d00 	call	50493d0 <__kernel_cos>
 5048a94:	18e0003c 	xorhi	r3,r3,32768
 5048a98:	003fe106 	br	5048a20 <_gp+0xfffdd5f8>
 5048a9c:	d9800317 	ldw	r6,12(sp)
 5048aa0:	d9c00417 	ldw	r7,16(sp)
 5048aa4:	d9000117 	ldw	r4,4(sp)
 5048aa8:	d9400217 	ldw	r5,8(sp)
 5048aac:	d8800015 	stw	r2,0(sp)
 5048ab0:	504a6040 	call	504a604 <__kernel_sin>
 5048ab4:	18e0003c 	xorhi	r3,r3,32768
 5048ab8:	003fd906 	br	5048a20 <_gp+0xfffdd5f8>
 5048abc:	d9800317 	ldw	r6,12(sp)
 5048ac0:	d9c00417 	ldw	r7,16(sp)
 5048ac4:	d9000117 	ldw	r4,4(sp)
 5048ac8:	d9400217 	ldw	r5,8(sp)
 5048acc:	50493d00 	call	50493d0 <__kernel_cos>
 5048ad0:	003fd306 	br	5048a20 <_gp+0xfffdd5f8>

05048ad4 <sin>:
 5048ad4:	00a00034 	movhi	r2,32768
 5048ad8:	defffa04 	addi	sp,sp,-24
 5048adc:	10bfffc4 	addi	r2,r2,-1
 5048ae0:	00cffa74 	movhi	r3,16361
 5048ae4:	dfc00515 	stw	ra,20(sp)
 5048ae8:	2884703a 	and	r2,r5,r2
 5048aec:	18c87ec4 	addi	r3,r3,8699
 5048af0:	1880180e 	bge	r3,r2,5048b54 <sin+0x80>
 5048af4:	00dffc34 	movhi	r3,32752
 5048af8:	18ffffc4 	addi	r3,r3,-1
 5048afc:	1880060e 	bge	r3,r2,5048b18 <sin+0x44>
 5048b00:	280f883a 	mov	r7,r5
 5048b04:	200d883a 	mov	r6,r4
 5048b08:	504e3240 	call	504e324 <__subdf3>
 5048b0c:	dfc00517 	ldw	ra,20(sp)
 5048b10:	dec00604 	addi	sp,sp,24
 5048b14:	f800283a 	ret
 5048b18:	d9800104 	addi	r6,sp,4
 5048b1c:	5048c640 	call	5048c64 <__ieee754_rem_pio2>
 5048b20:	108000cc 	andi	r2,r2,3
 5048b24:	00c00044 	movi	r3,1
 5048b28:	10c01926 	beq	r2,r3,5048b90 <sin+0xbc>
 5048b2c:	01000084 	movi	r4,2
 5048b30:	11000f26 	beq	r2,r4,5048b70 <sin+0x9c>
 5048b34:	10001c26 	beq	r2,zero,5048ba8 <sin+0xd4>
 5048b38:	d9800317 	ldw	r6,12(sp)
 5048b3c:	d9c00417 	ldw	r7,16(sp)
 5048b40:	d9000117 	ldw	r4,4(sp)
 5048b44:	d9400217 	ldw	r5,8(sp)
 5048b48:	50493d00 	call	50493d0 <__kernel_cos>
 5048b4c:	18e0003c 	xorhi	r3,r3,32768
 5048b50:	003fee06 	br	5048b0c <_gp+0xfffdd6e4>
 5048b54:	d8000015 	stw	zero,0(sp)
 5048b58:	000d883a 	mov	r6,zero
 5048b5c:	000f883a 	mov	r7,zero
 5048b60:	504a6040 	call	504a604 <__kernel_sin>
 5048b64:	dfc00517 	ldw	ra,20(sp)
 5048b68:	dec00604 	addi	sp,sp,24
 5048b6c:	f800283a 	ret
 5048b70:	d9800317 	ldw	r6,12(sp)
 5048b74:	d9c00417 	ldw	r7,16(sp)
 5048b78:	d9000117 	ldw	r4,4(sp)
 5048b7c:	d9400217 	ldw	r5,8(sp)
 5048b80:	d8c00015 	stw	r3,0(sp)
 5048b84:	504a6040 	call	504a604 <__kernel_sin>
 5048b88:	18e0003c 	xorhi	r3,r3,32768
 5048b8c:	003fdf06 	br	5048b0c <_gp+0xfffdd6e4>
 5048b90:	d9800317 	ldw	r6,12(sp)
 5048b94:	d9c00417 	ldw	r7,16(sp)
 5048b98:	d9000117 	ldw	r4,4(sp)
 5048b9c:	d9400217 	ldw	r5,8(sp)
 5048ba0:	50493d00 	call	50493d0 <__kernel_cos>
 5048ba4:	003fd906 	br	5048b0c <_gp+0xfffdd6e4>
 5048ba8:	d9800317 	ldw	r6,12(sp)
 5048bac:	d9c00417 	ldw	r7,16(sp)
 5048bb0:	d9000117 	ldw	r4,4(sp)
 5048bb4:	d9400217 	ldw	r5,8(sp)
 5048bb8:	d8c00015 	stw	r3,0(sp)
 5048bbc:	504a6040 	call	504a604 <__kernel_sin>
 5048bc0:	003fd206 	br	5048b0c <_gp+0xfffdd6e4>

05048bc4 <tan>:
 5048bc4:	00a00034 	movhi	r2,32768
 5048bc8:	defffa04 	addi	sp,sp,-24
 5048bcc:	10bfffc4 	addi	r2,r2,-1
 5048bd0:	00cffa74 	movhi	r3,16361
 5048bd4:	dfc00515 	stw	ra,20(sp)
 5048bd8:	2884703a 	and	r2,r5,r2
 5048bdc:	18c87ec4 	addi	r3,r3,8699
 5048be0:	1880180e 	bge	r3,r2,5048c44 <tan+0x80>
 5048be4:	00dffc34 	movhi	r3,32752
 5048be8:	18ffffc4 	addi	r3,r3,-1
 5048bec:	1880060e 	bge	r3,r2,5048c08 <tan+0x44>
 5048bf0:	280f883a 	mov	r7,r5
 5048bf4:	200d883a 	mov	r6,r4
 5048bf8:	504e3240 	call	504e324 <__subdf3>
 5048bfc:	dfc00517 	ldw	ra,20(sp)
 5048c00:	dec00604 	addi	sp,sp,24
 5048c04:	f800283a 	ret
 5048c08:	d9800104 	addi	r6,sp,4
 5048c0c:	5048c640 	call	5048c64 <__ieee754_rem_pio2>
 5048c10:	1080004c 	andi	r2,r2,1
 5048c14:	00c00044 	movi	r3,1
 5048c18:	d9800317 	ldw	r6,12(sp)
 5048c1c:	d9c00417 	ldw	r7,16(sp)
 5048c20:	d9000117 	ldw	r4,4(sp)
 5048c24:	d9400217 	ldw	r5,8(sp)
 5048c28:	1085883a 	add	r2,r2,r2
 5048c2c:	1885c83a 	sub	r2,r3,r2
 5048c30:	d8800015 	stw	r2,0(sp)
 5048c34:	504a8d00 	call	504a8d0 <__kernel_tan>
 5048c38:	dfc00517 	ldw	ra,20(sp)
 5048c3c:	dec00604 	addi	sp,sp,24
 5048c40:	f800283a 	ret
 5048c44:	00800044 	movi	r2,1
 5048c48:	d8800015 	stw	r2,0(sp)
 5048c4c:	000d883a 	mov	r6,zero
 5048c50:	000f883a 	mov	r7,zero
 5048c54:	504a8d00 	call	504a8d0 <__kernel_tan>
 5048c58:	dfc00517 	ldw	ra,20(sp)
 5048c5c:	dec00604 	addi	sp,sp,24
 5048c60:	f800283a 	ret

05048c64 <__ieee754_rem_pio2>:
 5048c64:	02200034 	movhi	r8,32768
 5048c68:	deffea04 	addi	sp,sp,-88
 5048c6c:	423fffc4 	addi	r8,r8,-1
 5048c70:	00cffa74 	movhi	r3,16361
 5048c74:	ddc01315 	stw	r23,76(sp)
 5048c78:	dc400d15 	stw	r17,52(sp)
 5048c7c:	dfc01515 	stw	ra,84(sp)
 5048c80:	df001415 	stw	fp,80(sp)
 5048c84:	dd801215 	stw	r22,72(sp)
 5048c88:	dd401115 	stw	r21,68(sp)
 5048c8c:	dd001015 	stw	r20,64(sp)
 5048c90:	dcc00f15 	stw	r19,60(sp)
 5048c94:	dc800e15 	stw	r18,56(sp)
 5048c98:	dc000c15 	stw	r16,48(sp)
 5048c9c:	2a2e703a 	and	r23,r5,r8
 5048ca0:	18c87ec4 	addi	r3,r3,8699
 5048ca4:	2823883a 	mov	r17,r5
 5048ca8:	1dc0790e 	bge	r3,r23,5048e90 <__ieee754_rem_pio2+0x22c>
 5048cac:	009000f4 	movhi	r2,16387
 5048cb0:	10b65ec4 	addi	r2,r2,-9861
 5048cb4:	3021883a 	mov	r16,r6
 5048cb8:	2027883a 	mov	r19,r4
 5048cbc:	15c02316 	blt	r2,r23,5048d4c <__ieee754_rem_pio2+0xe8>
 5048cc0:	01cffe74 	movhi	r7,16377
 5048cc4:	39c87ec4 	addi	r7,r7,8699
 5048cc8:	01951034 	movhi	r6,21568
 5048ccc:	01417a0e 	bge	zero,r5,50492b8 <__ieee754_rem_pio2+0x654>
 5048cd0:	504e3240 	call	504e324 <__subdf3>
 5048cd4:	1025883a 	mov	r18,r2
 5048cd8:	008ffe74 	movhi	r2,16377
 5048cdc:	10887ec4 	addi	r2,r2,8699
 5048ce0:	1823883a 	mov	r17,r3
 5048ce4:	b8808426 	beq	r23,r2,5048ef8 <__ieee754_rem_pio2+0x294>
 5048ce8:	018698b4 	movhi	r6,6754
 5048cec:	01cf7474 	movhi	r7,15825
 5048cf0:	3198cc44 	addi	r6,r6,25393
 5048cf4:	39ed1844 	addi	r7,r7,-19359
 5048cf8:	9009883a 	mov	r4,r18
 5048cfc:	180b883a 	mov	r5,r3
 5048d00:	504e3240 	call	504e324 <__subdf3>
 5048d04:	100d883a 	mov	r6,r2
 5048d08:	180f883a 	mov	r7,r3
 5048d0c:	9009883a 	mov	r4,r18
 5048d10:	880b883a 	mov	r5,r17
 5048d14:	80800015 	stw	r2,0(r16)
 5048d18:	80c00115 	stw	r3,4(r16)
 5048d1c:	504e3240 	call	504e324 <__subdf3>
 5048d20:	018698b4 	movhi	r6,6754
 5048d24:	01cf7474 	movhi	r7,15825
 5048d28:	3198cc44 	addi	r6,r6,25393
 5048d2c:	39ed1844 	addi	r7,r7,-19359
 5048d30:	1009883a 	mov	r4,r2
 5048d34:	180b883a 	mov	r5,r3
 5048d38:	504e3240 	call	504e324 <__subdf3>
 5048d3c:	80800215 	stw	r2,8(r16)
 5048d40:	80c00315 	stw	r3,12(r16)
 5048d44:	00800044 	movi	r2,1
 5048d48:	00005606 	br	5048ea4 <__ieee754_rem_pio2+0x240>
 5048d4c:	00904e74 	movhi	r2,16697
 5048d50:	10887ec4 	addi	r2,r2,8699
 5048d54:	15c0830e 	bge	r2,r23,5048f64 <__ieee754_rem_pio2+0x300>
 5048d58:	009ffc34 	movhi	r2,32752
 5048d5c:	10bfffc4 	addi	r2,r2,-1
 5048d60:	15c05c16 	blt	r2,r23,5048ed4 <__ieee754_rem_pio2+0x270>
 5048d64:	b829d53a 	srai	r20,r23,20
 5048d68:	a53efa84 	addi	r20,r20,-1046
 5048d6c:	a024953a 	slli	r18,r20,20
 5048d70:	bca5c83a 	sub	r18,r23,r18
 5048d74:	900b883a 	mov	r5,r18
 5048d78:	504ec200 	call	504ec20 <__fixdfsi>
 5048d7c:	1009883a 	mov	r4,r2
 5048d80:	504eca00 	call	504eca0 <__floatsidf>
 5048d84:	9809883a 	mov	r4,r19
 5048d88:	900b883a 	mov	r5,r18
 5048d8c:	100d883a 	mov	r6,r2
 5048d90:	180f883a 	mov	r7,r3
 5048d94:	d8800215 	stw	r2,8(sp)
 5048d98:	d8c00315 	stw	r3,12(sp)
 5048d9c:	504e3240 	call	504e324 <__subdf3>
 5048da0:	000d883a 	mov	r6,zero
 5048da4:	01d05c34 	movhi	r7,16752
 5048da8:	1009883a 	mov	r4,r2
 5048dac:	180b883a 	mov	r5,r3
 5048db0:	504dc0c0 	call	504dc0c <__muldf3>
 5048db4:	180b883a 	mov	r5,r3
 5048db8:	1009883a 	mov	r4,r2
 5048dbc:	182b883a 	mov	r21,r3
 5048dc0:	102d883a 	mov	r22,r2
 5048dc4:	504ec200 	call	504ec20 <__fixdfsi>
 5048dc8:	1009883a 	mov	r4,r2
 5048dcc:	504eca00 	call	504eca0 <__floatsidf>
 5048dd0:	100d883a 	mov	r6,r2
 5048dd4:	180f883a 	mov	r7,r3
 5048dd8:	b009883a 	mov	r4,r22
 5048ddc:	a80b883a 	mov	r5,r21
 5048de0:	1027883a 	mov	r19,r2
 5048de4:	1825883a 	mov	r18,r3
 5048de8:	d8800415 	stw	r2,16(sp)
 5048dec:	d8c00515 	stw	r3,20(sp)
 5048df0:	504e3240 	call	504e324 <__subdf3>
 5048df4:	000d883a 	mov	r6,zero
 5048df8:	01d05c34 	movhi	r7,16752
 5048dfc:	1009883a 	mov	r4,r2
 5048e00:	180b883a 	mov	r5,r3
 5048e04:	504dc0c0 	call	504dc0c <__muldf3>
 5048e08:	000d883a 	mov	r6,zero
 5048e0c:	000f883a 	mov	r7,zero
 5048e10:	1009883a 	mov	r4,r2
 5048e14:	180b883a 	mov	r5,r3
 5048e18:	d8800615 	stw	r2,24(sp)
 5048e1c:	d8c00715 	stw	r3,28(sp)
 5048e20:	504daa80 	call	504daa8 <__eqdf2>
 5048e24:	1001431e 	bne	r2,zero,5049334 <__ieee754_rem_pio2+0x6d0>
 5048e28:	000f883a 	mov	r7,zero
 5048e2c:	000d883a 	mov	r6,zero
 5048e30:	9809883a 	mov	r4,r19
 5048e34:	900b883a 	mov	r5,r18
 5048e38:	504daa80 	call	504daa8 <__eqdf2>
 5048e3c:	100f003a 	cmpeq	r7,r2,zero
 5048e40:	00800084 	movi	r2,2
 5048e44:	11cfc83a 	sub	r7,r2,r7
 5048e48:	00800084 	movi	r2,2
 5048e4c:	d8800015 	stw	r2,0(sp)
 5048e50:	008141b4 	movhi	r2,1286
 5048e54:	1083ed04 	addi	r2,r2,4020
 5048e58:	d8800115 	stw	r2,4(sp)
 5048e5c:	a00d883a 	mov	r6,r20
 5048e60:	800b883a 	mov	r5,r16
 5048e64:	d9000204 	addi	r4,sp,8
 5048e68:	50498740 	call	5049874 <__kernel_rem_pio2>
 5048e6c:	88000d0e 	bge	r17,zero,5048ea4 <__ieee754_rem_pio2+0x240>
 5048e70:	81000117 	ldw	r4,4(r16)
 5048e74:	80c00317 	ldw	r3,12(r16)
 5048e78:	0085c83a 	sub	r2,zero,r2
 5048e7c:	2120003c 	xorhi	r4,r4,32768
 5048e80:	18e0003c 	xorhi	r3,r3,32768
 5048e84:	81000115 	stw	r4,4(r16)
 5048e88:	80c00315 	stw	r3,12(r16)
 5048e8c:	00000506 	br	5048ea4 <__ieee754_rem_pio2+0x240>
 5048e90:	31000015 	stw	r4,0(r6)
 5048e94:	31400115 	stw	r5,4(r6)
 5048e98:	30000215 	stw	zero,8(r6)
 5048e9c:	30000315 	stw	zero,12(r6)
 5048ea0:	0005883a 	mov	r2,zero
 5048ea4:	dfc01517 	ldw	ra,84(sp)
 5048ea8:	df001417 	ldw	fp,80(sp)
 5048eac:	ddc01317 	ldw	r23,76(sp)
 5048eb0:	dd801217 	ldw	r22,72(sp)
 5048eb4:	dd401117 	ldw	r21,68(sp)
 5048eb8:	dd001017 	ldw	r20,64(sp)
 5048ebc:	dcc00f17 	ldw	r19,60(sp)
 5048ec0:	dc800e17 	ldw	r18,56(sp)
 5048ec4:	dc400d17 	ldw	r17,52(sp)
 5048ec8:	dc000c17 	ldw	r16,48(sp)
 5048ecc:	dec01604 	addi	sp,sp,88
 5048ed0:	f800283a 	ret
 5048ed4:	200d883a 	mov	r6,r4
 5048ed8:	280f883a 	mov	r7,r5
 5048edc:	504e3240 	call	504e324 <__subdf3>
 5048ee0:	80800215 	stw	r2,8(r16)
 5048ee4:	80800015 	stw	r2,0(r16)
 5048ee8:	80c00315 	stw	r3,12(r16)
 5048eec:	80c00115 	stw	r3,4(r16)
 5048ef0:	0005883a 	mov	r2,zero
 5048ef4:	003feb06 	br	5048ea4 <_gp+0xfffdda7c>
 5048ef8:	01cf7474 	movhi	r7,15825
 5048efc:	9009883a 	mov	r4,r18
 5048f00:	39ed1844 	addi	r7,r7,-19359
 5048f04:	01869834 	movhi	r6,6752
 5048f08:	180b883a 	mov	r5,r3
 5048f0c:	504e3240 	call	504e324 <__subdf3>
 5048f10:	018b80f4 	movhi	r6,11779
 5048f14:	01cee8f4 	movhi	r7,15267
 5048f18:	319c1cc4 	addi	r6,r6,28787
 5048f1c:	39c66284 	addi	r7,r7,6538
 5048f20:	1009883a 	mov	r4,r2
 5048f24:	180b883a 	mov	r5,r3
 5048f28:	1025883a 	mov	r18,r2
 5048f2c:	1823883a 	mov	r17,r3
 5048f30:	504e3240 	call	504e324 <__subdf3>
 5048f34:	100d883a 	mov	r6,r2
 5048f38:	180f883a 	mov	r7,r3
 5048f3c:	9009883a 	mov	r4,r18
 5048f40:	880b883a 	mov	r5,r17
 5048f44:	80800015 	stw	r2,0(r16)
 5048f48:	80c00115 	stw	r3,4(r16)
 5048f4c:	504e3240 	call	504e324 <__subdf3>
 5048f50:	018b80f4 	movhi	r6,11779
 5048f54:	01cee8f4 	movhi	r7,15267
 5048f58:	319c1cc4 	addi	r6,r6,28787
 5048f5c:	39c66284 	addi	r7,r7,6538
 5048f60:	003f7306 	br	5048d30 <_gp+0xfffdd908>
 5048f64:	504af3c0 	call	504af3c <fabs>
 5048f68:	019b72b4 	movhi	r6,28106
 5048f6c:	01cff934 	movhi	r7,16356
 5048f70:	31b220c4 	addi	r6,r6,-14205
 5048f74:	39d7cc04 	addi	r7,r7,24368
 5048f78:	1009883a 	mov	r4,r2
 5048f7c:	180b883a 	mov	r5,r3
 5048f80:	102d883a 	mov	r22,r2
 5048f84:	182b883a 	mov	r21,r3
 5048f88:	504dc0c0 	call	504dc0c <__muldf3>
 5048f8c:	000d883a 	mov	r6,zero
 5048f90:	01cff834 	movhi	r7,16352
 5048f94:	1009883a 	mov	r4,r2
 5048f98:	180b883a 	mov	r5,r3
 5048f9c:	504c9140 	call	504c914 <__adddf3>
 5048fa0:	180b883a 	mov	r5,r3
 5048fa4:	1009883a 	mov	r4,r2
 5048fa8:	504ec200 	call	504ec20 <__fixdfsi>
 5048fac:	1009883a 	mov	r4,r2
 5048fb0:	1025883a 	mov	r18,r2
 5048fb4:	504eca00 	call	504eca0 <__floatsidf>
 5048fb8:	01cffe74 	movhi	r7,16377
 5048fbc:	39c87ec4 	addi	r7,r7,8699
 5048fc0:	01951034 	movhi	r6,21568
 5048fc4:	1009883a 	mov	r4,r2
 5048fc8:	180b883a 	mov	r5,r3
 5048fcc:	1029883a 	mov	r20,r2
 5048fd0:	1827883a 	mov	r19,r3
 5048fd4:	504dc0c0 	call	504dc0c <__muldf3>
 5048fd8:	b009883a 	mov	r4,r22
 5048fdc:	a80b883a 	mov	r5,r21
 5048fe0:	100d883a 	mov	r6,r2
 5048fe4:	180f883a 	mov	r7,r3
 5048fe8:	504e3240 	call	504e324 <__subdf3>
 5048fec:	018698b4 	movhi	r6,6754
 5048ff0:	01cf7474 	movhi	r7,15825
 5048ff4:	a009883a 	mov	r4,r20
 5048ff8:	3198cc44 	addi	r6,r6,25393
 5048ffc:	39ed1844 	addi	r7,r7,-19359
 5049000:	980b883a 	mov	r5,r19
 5049004:	1039883a 	mov	fp,r2
 5049008:	d8c00815 	stw	r3,32(sp)
 504900c:	504dc0c0 	call	504dc0c <__muldf3>
 5049010:	010007c4 	movi	r4,31
 5049014:	e017883a 	mov	r11,fp
 5049018:	da800817 	ldw	r10,32(sp)
 504901c:	102d883a 	mov	r22,r2
 5049020:	182b883a 	mov	r21,r3
 5049024:	24802816 	blt	r4,r18,50490c8 <__ieee754_rem_pio2+0x464>
 5049028:	913fffc4 	addi	r4,r18,-1
 504902c:	2109883a 	add	r4,r4,r4
 5049030:	014141b4 	movhi	r5,1286
 5049034:	2109883a 	add	r4,r4,r4
 5049038:	2943cd04 	addi	r5,r5,3892
 504903c:	2909883a 	add	r4,r5,r4
 5049040:	21000017 	ldw	r4,0(r4)
 5049044:	b9002026 	beq	r23,r4,50490c8 <__ieee754_rem_pio2+0x464>
 5049048:	100d883a 	mov	r6,r2
 504904c:	180f883a 	mov	r7,r3
 5049050:	e009883a 	mov	r4,fp
 5049054:	500b883a 	mov	r5,r10
 5049058:	da800b15 	stw	r10,44(sp)
 504905c:	df000a15 	stw	fp,40(sp)
 5049060:	504e3240 	call	504e324 <__subdf3>
 5049064:	da800b17 	ldw	r10,44(sp)
 5049068:	dac00a17 	ldw	r11,40(sp)
 504906c:	1019883a 	mov	r12,r2
 5049070:	1813883a 	mov	r9,r3
 5049074:	80800015 	stw	r2,0(r16)
 5049078:	80c00115 	stw	r3,4(r16)
 504907c:	600d883a 	mov	r6,r12
 5049080:	480f883a 	mov	r7,r9
 5049084:	5809883a 	mov	r4,r11
 5049088:	500b883a 	mov	r5,r10
 504908c:	da400b15 	stw	r9,44(sp)
 5049090:	db000a15 	stw	r12,40(sp)
 5049094:	504e3240 	call	504e324 <__subdf3>
 5049098:	b00d883a 	mov	r6,r22
 504909c:	a80f883a 	mov	r7,r21
 50490a0:	1009883a 	mov	r4,r2
 50490a4:	180b883a 	mov	r5,r3
 50490a8:	504e3240 	call	504e324 <__subdf3>
 50490ac:	80800215 	stw	r2,8(r16)
 50490b0:	80c00315 	stw	r3,12(r16)
 50490b4:	da400b17 	ldw	r9,44(sp)
 50490b8:	db000a17 	ldw	r12,40(sp)
 50490bc:	88009f16 	blt	r17,zero,504933c <__ieee754_rem_pio2+0x6d8>
 50490c0:	9005883a 	mov	r2,r18
 50490c4:	003f7706 	br	5048ea4 <_gp+0xfffdda7c>
 50490c8:	d9400817 	ldw	r5,32(sp)
 50490cc:	100d883a 	mov	r6,r2
 50490d0:	180f883a 	mov	r7,r3
 50490d4:	e009883a 	mov	r4,fp
 50490d8:	da800b15 	stw	r10,44(sp)
 50490dc:	dac00a15 	stw	r11,40(sp)
 50490e0:	504e3240 	call	504e324 <__subdf3>
 50490e4:	1019883a 	mov	r12,r2
 50490e8:	1804d53a 	srli	r2,r3,20
 50490ec:	b811d53a 	srai	r8,r23,20
 50490f0:	1813883a 	mov	r9,r3
 50490f4:	1081ffcc 	andi	r2,r2,2047
 50490f8:	80c00115 	stw	r3,4(r16)
 50490fc:	83000015 	stw	r12,0(r16)
 5049100:	4085c83a 	sub	r2,r8,r2
 5049104:	00c00404 	movi	r3,16
 5049108:	da800b17 	ldw	r10,44(sp)
 504910c:	dac00a17 	ldw	r11,40(sp)
 5049110:	18bfda0e 	bge	r3,r2,504907c <_gp+0xfffddc54>
 5049114:	01cf7474 	movhi	r7,15825
 5049118:	39ed1844 	addi	r7,r7,-19359
 504911c:	01869834 	movhi	r6,6752
 5049120:	a009883a 	mov	r4,r20
 5049124:	980b883a 	mov	r5,r19
 5049128:	da000a15 	stw	r8,40(sp)
 504912c:	504dc0c0 	call	504dc0c <__muldf3>
 5049130:	d9400817 	ldw	r5,32(sp)
 5049134:	100d883a 	mov	r6,r2
 5049138:	180f883a 	mov	r7,r3
 504913c:	e009883a 	mov	r4,fp
 5049140:	102d883a 	mov	r22,r2
 5049144:	182b883a 	mov	r21,r3
 5049148:	504e3240 	call	504e324 <__subdf3>
 504914c:	d9400817 	ldw	r5,32(sp)
 5049150:	100d883a 	mov	r6,r2
 5049154:	180f883a 	mov	r7,r3
 5049158:	e009883a 	mov	r4,fp
 504915c:	182f883a 	mov	r23,r3
 5049160:	d8800915 	stw	r2,36(sp)
 5049164:	504e3240 	call	504e324 <__subdf3>
 5049168:	b00d883a 	mov	r6,r22
 504916c:	a80f883a 	mov	r7,r21
 5049170:	1009883a 	mov	r4,r2
 5049174:	180b883a 	mov	r5,r3
 5049178:	504e3240 	call	504e324 <__subdf3>
 504917c:	018b80f4 	movhi	r6,11779
 5049180:	01cee8f4 	movhi	r7,15267
 5049184:	319c1cc4 	addi	r6,r6,28787
 5049188:	39c66284 	addi	r7,r7,6538
 504918c:	a009883a 	mov	r4,r20
 5049190:	980b883a 	mov	r5,r19
 5049194:	102d883a 	mov	r22,r2
 5049198:	182b883a 	mov	r21,r3
 504919c:	504dc0c0 	call	504dc0c <__muldf3>
 50491a0:	b00d883a 	mov	r6,r22
 50491a4:	a80f883a 	mov	r7,r21
 50491a8:	1009883a 	mov	r4,r2
 50491ac:	180b883a 	mov	r5,r3
 50491b0:	504e3240 	call	504e324 <__subdf3>
 50491b4:	d9000917 	ldw	r4,36(sp)
 50491b8:	100d883a 	mov	r6,r2
 50491bc:	180f883a 	mov	r7,r3
 50491c0:	b80b883a 	mov	r5,r23
 50491c4:	102d883a 	mov	r22,r2
 50491c8:	182b883a 	mov	r21,r3
 50491cc:	504e3240 	call	504e324 <__subdf3>
 50491d0:	1019883a 	mov	r12,r2
 50491d4:	1804d53a 	srli	r2,r3,20
 50491d8:	da000a17 	ldw	r8,40(sp)
 50491dc:	83000015 	stw	r12,0(r16)
 50491e0:	1081ffcc 	andi	r2,r2,2047
 50491e4:	4091c83a 	sub	r8,r8,r2
 50491e8:	80c00115 	stw	r3,4(r16)
 50491ec:	00800c44 	movi	r2,49
 50491f0:	1813883a 	mov	r9,r3
 50491f4:	1200730e 	bge	r2,r8,50493c4 <__ieee754_rem_pio2+0x760>
 50491f8:	01cee8f4 	movhi	r7,15267
 50491fc:	39c66284 	addi	r7,r7,6538
 5049200:	018b8034 	movhi	r6,11776
 5049204:	a009883a 	mov	r4,r20
 5049208:	980b883a 	mov	r5,r19
 504920c:	504dc0c0 	call	504dc0c <__muldf3>
 5049210:	d9000917 	ldw	r4,36(sp)
 5049214:	100d883a 	mov	r6,r2
 5049218:	180f883a 	mov	r7,r3
 504921c:	b80b883a 	mov	r5,r23
 5049220:	102d883a 	mov	r22,r2
 5049224:	182b883a 	mov	r21,r3
 5049228:	504e3240 	call	504e324 <__subdf3>
 504922c:	d9000917 	ldw	r4,36(sp)
 5049230:	100d883a 	mov	r6,r2
 5049234:	180f883a 	mov	r7,r3
 5049238:	b80b883a 	mov	r5,r23
 504923c:	d8c00b15 	stw	r3,44(sp)
 5049240:	d8800a15 	stw	r2,40(sp)
 5049244:	504e3240 	call	504e324 <__subdf3>
 5049248:	b00d883a 	mov	r6,r22
 504924c:	a80f883a 	mov	r7,r21
 5049250:	1009883a 	mov	r4,r2
 5049254:	180b883a 	mov	r5,r3
 5049258:	504e3240 	call	504e324 <__subdf3>
 504925c:	01894834 	movhi	r6,9504
 5049260:	01ce5f34 	movhi	r7,14716
 5049264:	31927044 	addi	r6,r6,18881
 5049268:	39e0e684 	addi	r7,r7,-31846
 504926c:	a009883a 	mov	r4,r20
 5049270:	980b883a 	mov	r5,r19
 5049274:	102d883a 	mov	r22,r2
 5049278:	182b883a 	mov	r21,r3
 504927c:	504dc0c0 	call	504dc0c <__muldf3>
 5049280:	b00d883a 	mov	r6,r22
 5049284:	a80f883a 	mov	r7,r21
 5049288:	1009883a 	mov	r4,r2
 504928c:	180b883a 	mov	r5,r3
 5049290:	504e3240 	call	504e324 <__subdf3>
 5049294:	dac00a17 	ldw	r11,40(sp)
 5049298:	da800b17 	ldw	r10,44(sp)
 504929c:	102d883a 	mov	r22,r2
 50492a0:	182b883a 	mov	r21,r3
 50492a4:	100d883a 	mov	r6,r2
 50492a8:	180f883a 	mov	r7,r3
 50492ac:	5809883a 	mov	r4,r11
 50492b0:	500b883a 	mov	r5,r10
 50492b4:	003f6a06 	br	5049060 <_gp+0xfffddc38>
 50492b8:	504c9140 	call	504c914 <__adddf3>
 50492bc:	1025883a 	mov	r18,r2
 50492c0:	008ffe74 	movhi	r2,16377
 50492c4:	10887ec4 	addi	r2,r2,8699
 50492c8:	1823883a 	mov	r17,r3
 50492cc:	b8802226 	beq	r23,r2,5049358 <__ieee754_rem_pio2+0x6f4>
 50492d0:	018698b4 	movhi	r6,6754
 50492d4:	01cf7474 	movhi	r7,15825
 50492d8:	3198cc44 	addi	r6,r6,25393
 50492dc:	39ed1844 	addi	r7,r7,-19359
 50492e0:	9009883a 	mov	r4,r18
 50492e4:	180b883a 	mov	r5,r3
 50492e8:	504c9140 	call	504c914 <__adddf3>
 50492ec:	100d883a 	mov	r6,r2
 50492f0:	180f883a 	mov	r7,r3
 50492f4:	9009883a 	mov	r4,r18
 50492f8:	880b883a 	mov	r5,r17
 50492fc:	80800015 	stw	r2,0(r16)
 5049300:	80c00115 	stw	r3,4(r16)
 5049304:	504e3240 	call	504e324 <__subdf3>
 5049308:	018698b4 	movhi	r6,6754
 504930c:	01cf7474 	movhi	r7,15825
 5049310:	3198cc44 	addi	r6,r6,25393
 5049314:	39ed1844 	addi	r7,r7,-19359
 5049318:	1009883a 	mov	r4,r2
 504931c:	180b883a 	mov	r5,r3
 5049320:	504c9140 	call	504c914 <__adddf3>
 5049324:	80800215 	stw	r2,8(r16)
 5049328:	80c00315 	stw	r3,12(r16)
 504932c:	00bfffc4 	movi	r2,-1
 5049330:	003edc06 	br	5048ea4 <_gp+0xfffdda7c>
 5049334:	01c000c4 	movi	r7,3
 5049338:	003ec306 	br	5048e48 <_gp+0xfffdda20>
 504933c:	4a60003c 	xorhi	r9,r9,32768
 5049340:	18e0003c 	xorhi	r3,r3,32768
 5049344:	83000015 	stw	r12,0(r16)
 5049348:	82400115 	stw	r9,4(r16)
 504934c:	80c00315 	stw	r3,12(r16)
 5049350:	0485c83a 	sub	r2,zero,r18
 5049354:	003ed306 	br	5048ea4 <_gp+0xfffdda7c>
 5049358:	01cf7474 	movhi	r7,15825
 504935c:	9009883a 	mov	r4,r18
 5049360:	39ed1844 	addi	r7,r7,-19359
 5049364:	01869834 	movhi	r6,6752
 5049368:	180b883a 	mov	r5,r3
 504936c:	504c9140 	call	504c914 <__adddf3>
 5049370:	018b80f4 	movhi	r6,11779
 5049374:	01cee8f4 	movhi	r7,15267
 5049378:	319c1cc4 	addi	r6,r6,28787
 504937c:	39c66284 	addi	r7,r7,6538
 5049380:	1009883a 	mov	r4,r2
 5049384:	180b883a 	mov	r5,r3
 5049388:	1025883a 	mov	r18,r2
 504938c:	1823883a 	mov	r17,r3
 5049390:	504c9140 	call	504c914 <__adddf3>
 5049394:	100d883a 	mov	r6,r2
 5049398:	180f883a 	mov	r7,r3
 504939c:	9009883a 	mov	r4,r18
 50493a0:	880b883a 	mov	r5,r17
 50493a4:	80800015 	stw	r2,0(r16)
 50493a8:	80c00115 	stw	r3,4(r16)
 50493ac:	504e3240 	call	504e324 <__subdf3>
 50493b0:	018b80f4 	movhi	r6,11779
 50493b4:	01cee8f4 	movhi	r7,15267
 50493b8:	319c1cc4 	addi	r6,r6,28787
 50493bc:	39c66284 	addi	r7,r7,6538
 50493c0:	003fd506 	br	5049318 <_gp+0xfffddef0>
 50493c4:	dac00917 	ldw	r11,36(sp)
 50493c8:	b815883a 	mov	r10,r23
 50493cc:	003f2b06 	br	504907c <_gp+0xfffddc54>

050493d0 <__kernel_cos>:
 50493d0:	defff304 	addi	sp,sp,-52
 50493d4:	dc000315 	stw	r16,12(sp)
 50493d8:	04200034 	movhi	r16,32768
 50493dc:	843fffc4 	addi	r16,r16,-1
 50493e0:	008f9034 	movhi	r2,15936
 50493e4:	df000b15 	stw	fp,44(sp)
 50493e8:	ddc00a15 	stw	r23,40(sp)
 50493ec:	dd800915 	stw	r22,36(sp)
 50493f0:	dcc00615 	stw	r19,24(sp)
 50493f4:	dfc00c15 	stw	ra,48(sp)
 50493f8:	dd400815 	stw	r21,32(sp)
 50493fc:	dd000715 	stw	r20,28(sp)
 5049400:	dc800515 	stw	r18,20(sp)
 5049404:	dc400415 	stw	r17,16(sp)
 5049408:	2c20703a 	and	r16,r5,r16
 504940c:	10bfffc4 	addi	r2,r2,-1
 5049410:	2827883a 	mov	r19,r5
 5049414:	202d883a 	mov	r22,r4
 5049418:	302f883a 	mov	r23,r6
 504941c:	3839883a 	mov	fp,r7
 5049420:	14007516 	blt	r2,r16,50495f8 <__kernel_cos+0x228>
 5049424:	504ec200 	call	504ec20 <__fixdfsi>
 5049428:	10010f26 	beq	r2,zero,5049868 <__kernel_cos+0x498>
 504942c:	b00d883a 	mov	r6,r22
 5049430:	980f883a 	mov	r7,r19
 5049434:	b009883a 	mov	r4,r22
 5049438:	980b883a 	mov	r5,r19
 504943c:	504dc0c0 	call	504dc0c <__muldf3>
 5049440:	01afa234 	movhi	r6,48776
 5049444:	01ef6a74 	movhi	r7,48553
 5049448:	318e3504 	addi	r6,r6,14548
 504944c:	39feba44 	addi	r7,r7,-1303
 5049450:	1009883a 	mov	r4,r2
 5049454:	180b883a 	mov	r5,r3
 5049458:	102b883a 	mov	r21,r2
 504945c:	1829883a 	mov	r20,r3
 5049460:	504dc0c0 	call	504dc0c <__muldf3>
 5049464:	01af6d74 	movhi	r6,48565
 5049468:	01cf88b4 	movhi	r7,15906
 504946c:	31ac7104 	addi	r6,r6,-20028
 5049470:	39fba784 	addi	r7,r7,-4450
 5049474:	1009883a 	mov	r4,r2
 5049478:	180b883a 	mov	r5,r3
 504947c:	504c9140 	call	504c914 <__adddf3>
 5049480:	a80d883a 	mov	r6,r21
 5049484:	a00f883a 	mov	r7,r20
 5049488:	1009883a 	mov	r4,r2
 504948c:	180b883a 	mov	r5,r3
 5049490:	504dc0c0 	call	504dc0c <__muldf3>
 5049494:	01a02734 	movhi	r6,32924
 5049498:	01cfa4b4 	movhi	r7,16018
 504949c:	3194ab44 	addi	r6,r6,21165
 50494a0:	39df93c4 	addi	r7,r7,32335
 50494a4:	1009883a 	mov	r4,r2
 50494a8:	180b883a 	mov	r5,r3
 50494ac:	504e3240 	call	504e324 <__subdf3>
 50494b0:	a80d883a 	mov	r6,r21
 50494b4:	a00f883a 	mov	r7,r20
 50494b8:	1009883a 	mov	r4,r2
 50494bc:	180b883a 	mov	r5,r3
 50494c0:	504dc0c0 	call	504dc0c <__muldf3>
 50494c4:	018672f4 	movhi	r6,6603
 50494c8:	01cfbeb4 	movhi	r7,16122
 50494cc:	31856404 	addi	r6,r6,5520
 50494d0:	39c06804 	addi	r7,r7,416
 50494d4:	1009883a 	mov	r4,r2
 50494d8:	180b883a 	mov	r5,r3
 50494dc:	504c9140 	call	504c914 <__adddf3>
 50494e0:	a80d883a 	mov	r6,r21
 50494e4:	a00f883a 	mov	r7,r20
 50494e8:	1009883a 	mov	r4,r2
 50494ec:	180b883a 	mov	r5,r3
 50494f0:	504dc0c0 	call	504dc0c <__muldf3>
 50494f4:	0185b074 	movhi	r6,5825
 50494f8:	01cfd5f4 	movhi	r7,16215
 50494fc:	31945dc4 	addi	r6,r6,20855
 5049500:	39f05b04 	addi	r7,r7,-16020
 5049504:	1009883a 	mov	r4,r2
 5049508:	180b883a 	mov	r5,r3
 504950c:	504e3240 	call	504e324 <__subdf3>
 5049510:	a80d883a 	mov	r6,r21
 5049514:	a00f883a 	mov	r7,r20
 5049518:	1009883a 	mov	r4,r2
 504951c:	180b883a 	mov	r5,r3
 5049520:	504dc0c0 	call	504dc0c <__muldf3>
 5049524:	01955574 	movhi	r6,21845
 5049528:	01cfe974 	movhi	r7,16293
 504952c:	31955304 	addi	r6,r6,21836
 5049530:	39d55544 	addi	r7,r7,21845
 5049534:	1009883a 	mov	r4,r2
 5049538:	180b883a 	mov	r5,r3
 504953c:	504c9140 	call	504c914 <__adddf3>
 5049540:	a80d883a 	mov	r6,r21
 5049544:	a00f883a 	mov	r7,r20
 5049548:	1009883a 	mov	r4,r2
 504954c:	180b883a 	mov	r5,r3
 5049550:	504dc0c0 	call	504dc0c <__muldf3>
 5049554:	1017883a 	mov	r11,r2
 5049558:	1815883a 	mov	r10,r3
 504955c:	a809883a 	mov	r4,r21
 5049560:	a00b883a 	mov	r5,r20
 5049564:	000d883a 	mov	r6,zero
 5049568:	01cff834 	movhi	r7,16352
 504956c:	da800215 	stw	r10,8(sp)
 5049570:	dac00115 	stw	r11,4(sp)
 5049574:	504dc0c0 	call	504dc0c <__muldf3>
 5049578:	dac00117 	ldw	r11,4(sp)
 504957c:	da800217 	ldw	r10,8(sp)
 5049580:	a809883a 	mov	r4,r21
 5049584:	580d883a 	mov	r6,r11
 5049588:	500f883a 	mov	r7,r10
 504958c:	a00b883a 	mov	r5,r20
 5049590:	1023883a 	mov	r17,r2
 5049594:	1821883a 	mov	r16,r3
 5049598:	504dc0c0 	call	504dc0c <__muldf3>
 504959c:	b80d883a 	mov	r6,r23
 50495a0:	e00f883a 	mov	r7,fp
 50495a4:	b009883a 	mov	r4,r22
 50495a8:	980b883a 	mov	r5,r19
 50495ac:	1029883a 	mov	r20,r2
 50495b0:	1825883a 	mov	r18,r3
 50495b4:	504dc0c0 	call	504dc0c <__muldf3>
 50495b8:	a009883a 	mov	r4,r20
 50495bc:	900b883a 	mov	r5,r18
 50495c0:	100d883a 	mov	r6,r2
 50495c4:	180f883a 	mov	r7,r3
 50495c8:	504e3240 	call	504e324 <__subdf3>
 50495cc:	8809883a 	mov	r4,r17
 50495d0:	800b883a 	mov	r5,r16
 50495d4:	100d883a 	mov	r6,r2
 50495d8:	180f883a 	mov	r7,r3
 50495dc:	504e3240 	call	504e324 <__subdf3>
 50495e0:	100d883a 	mov	r6,r2
 50495e4:	180f883a 	mov	r7,r3
 50495e8:	0009883a 	mov	r4,zero
 50495ec:	014ffc34 	movhi	r5,16368
 50495f0:	504e3240 	call	504e324 <__subdf3>
 50495f4:	00008b06 	br	5049824 <__kernel_cos+0x454>
 50495f8:	200d883a 	mov	r6,r4
 50495fc:	280f883a 	mov	r7,r5
 5049600:	504dc0c0 	call	504dc0c <__muldf3>
 5049604:	01afa234 	movhi	r6,48776
 5049608:	01ef6a74 	movhi	r7,48553
 504960c:	318e3504 	addi	r6,r6,14548
 5049610:	39feba44 	addi	r7,r7,-1303
 5049614:	1009883a 	mov	r4,r2
 5049618:	180b883a 	mov	r5,r3
 504961c:	1025883a 	mov	r18,r2
 5049620:	1823883a 	mov	r17,r3
 5049624:	504dc0c0 	call	504dc0c <__muldf3>
 5049628:	01af6d74 	movhi	r6,48565
 504962c:	01cf88b4 	movhi	r7,15906
 5049630:	31ac7104 	addi	r6,r6,-20028
 5049634:	39fba784 	addi	r7,r7,-4450
 5049638:	1009883a 	mov	r4,r2
 504963c:	180b883a 	mov	r5,r3
 5049640:	504c9140 	call	504c914 <__adddf3>
 5049644:	900d883a 	mov	r6,r18
 5049648:	880f883a 	mov	r7,r17
 504964c:	1009883a 	mov	r4,r2
 5049650:	180b883a 	mov	r5,r3
 5049654:	504dc0c0 	call	504dc0c <__muldf3>
 5049658:	01a02734 	movhi	r6,32924
 504965c:	01cfa4b4 	movhi	r7,16018
 5049660:	3194ab44 	addi	r6,r6,21165
 5049664:	39df93c4 	addi	r7,r7,32335
 5049668:	1009883a 	mov	r4,r2
 504966c:	180b883a 	mov	r5,r3
 5049670:	504e3240 	call	504e324 <__subdf3>
 5049674:	900d883a 	mov	r6,r18
 5049678:	880f883a 	mov	r7,r17
 504967c:	1009883a 	mov	r4,r2
 5049680:	180b883a 	mov	r5,r3
 5049684:	504dc0c0 	call	504dc0c <__muldf3>
 5049688:	018672f4 	movhi	r6,6603
 504968c:	01cfbeb4 	movhi	r7,16122
 5049690:	31856404 	addi	r6,r6,5520
 5049694:	39c06804 	addi	r7,r7,416
 5049698:	1009883a 	mov	r4,r2
 504969c:	180b883a 	mov	r5,r3
 50496a0:	504c9140 	call	504c914 <__adddf3>
 50496a4:	900d883a 	mov	r6,r18
 50496a8:	880f883a 	mov	r7,r17
 50496ac:	1009883a 	mov	r4,r2
 50496b0:	180b883a 	mov	r5,r3
 50496b4:	504dc0c0 	call	504dc0c <__muldf3>
 50496b8:	0185b074 	movhi	r6,5825
 50496bc:	01cfd5f4 	movhi	r7,16215
 50496c0:	31945dc4 	addi	r6,r6,20855
 50496c4:	39f05b04 	addi	r7,r7,-16020
 50496c8:	1009883a 	mov	r4,r2
 50496cc:	180b883a 	mov	r5,r3
 50496d0:	504e3240 	call	504e324 <__subdf3>
 50496d4:	900d883a 	mov	r6,r18
 50496d8:	880f883a 	mov	r7,r17
 50496dc:	1009883a 	mov	r4,r2
 50496e0:	180b883a 	mov	r5,r3
 50496e4:	504dc0c0 	call	504dc0c <__muldf3>
 50496e8:	01955574 	movhi	r6,21845
 50496ec:	01cfe974 	movhi	r7,16293
 50496f0:	31955304 	addi	r6,r6,21836
 50496f4:	39d55544 	addi	r7,r7,21845
 50496f8:	1009883a 	mov	r4,r2
 50496fc:	180b883a 	mov	r5,r3
 5049700:	504c9140 	call	504c914 <__adddf3>
 5049704:	900d883a 	mov	r6,r18
 5049708:	880f883a 	mov	r7,r17
 504970c:	1009883a 	mov	r4,r2
 5049710:	180b883a 	mov	r5,r3
 5049714:	504dc0c0 	call	504dc0c <__muldf3>
 5049718:	1013883a 	mov	r9,r2
 504971c:	1017883a 	mov	r11,r2
 5049720:	008ff4f4 	movhi	r2,16339
 5049724:	108ccc84 	addi	r2,r2,13106
 5049728:	1811883a 	mov	r8,r3
 504972c:	902b883a 	mov	r21,r18
 5049730:	8829883a 	mov	r20,r17
 5049734:	1815883a 	mov	r10,r3
 5049738:	143f880e 	bge	r2,r16,504955c <_gp+0xfffde134>
 504973c:	008ffa74 	movhi	r2,16361
 5049740:	14004416 	blt	r2,r16,5049854 <__kernel_cos+0x484>
 5049744:	00bff834 	movhi	r2,65504
 5049748:	80a1883a 	add	r16,r16,r2
 504974c:	000d883a 	mov	r6,zero
 5049750:	800f883a 	mov	r7,r16
 5049754:	0009883a 	mov	r4,zero
 5049758:	014ffc34 	movhi	r5,16368
 504975c:	da400115 	stw	r9,4(sp)
 5049760:	d8c00215 	stw	r3,8(sp)
 5049764:	504e3240 	call	504e324 <__subdf3>
 5049768:	da000217 	ldw	r8,8(sp)
 504976c:	da400117 	ldw	r9,4(sp)
 5049770:	102b883a 	mov	r21,r2
 5049774:	d8c00015 	stw	r3,0(sp)
 5049778:	9009883a 	mov	r4,r18
 504977c:	880b883a 	mov	r5,r17
 5049780:	000d883a 	mov	r6,zero
 5049784:	01cff834 	movhi	r7,16352
 5049788:	da000215 	stw	r8,8(sp)
 504978c:	da400115 	stw	r9,4(sp)
 5049790:	504dc0c0 	call	504dc0c <__muldf3>
 5049794:	800f883a 	mov	r7,r16
 5049798:	000d883a 	mov	r6,zero
 504979c:	1009883a 	mov	r4,r2
 50497a0:	180b883a 	mov	r5,r3
 50497a4:	504e3240 	call	504e324 <__subdf3>
 50497a8:	da400117 	ldw	r9,4(sp)
 50497ac:	da000217 	ldw	r8,8(sp)
 50497b0:	9009883a 	mov	r4,r18
 50497b4:	480d883a 	mov	r6,r9
 50497b8:	400f883a 	mov	r7,r8
 50497bc:	880b883a 	mov	r5,r17
 50497c0:	1029883a 	mov	r20,r2
 50497c4:	1821883a 	mov	r16,r3
 50497c8:	504dc0c0 	call	504dc0c <__muldf3>
 50497cc:	b80d883a 	mov	r6,r23
 50497d0:	e00f883a 	mov	r7,fp
 50497d4:	b009883a 	mov	r4,r22
 50497d8:	980b883a 	mov	r5,r19
 50497dc:	1025883a 	mov	r18,r2
 50497e0:	1823883a 	mov	r17,r3
 50497e4:	504dc0c0 	call	504dc0c <__muldf3>
 50497e8:	100d883a 	mov	r6,r2
 50497ec:	180f883a 	mov	r7,r3
 50497f0:	9009883a 	mov	r4,r18
 50497f4:	880b883a 	mov	r5,r17
 50497f8:	504e3240 	call	504e324 <__subdf3>
 50497fc:	100d883a 	mov	r6,r2
 5049800:	180f883a 	mov	r7,r3
 5049804:	a009883a 	mov	r4,r20
 5049808:	800b883a 	mov	r5,r16
 504980c:	504e3240 	call	504e324 <__subdf3>
 5049810:	d9400017 	ldw	r5,0(sp)
 5049814:	100d883a 	mov	r6,r2
 5049818:	180f883a 	mov	r7,r3
 504981c:	a809883a 	mov	r4,r21
 5049820:	504e3240 	call	504e324 <__subdf3>
 5049824:	dfc00c17 	ldw	ra,48(sp)
 5049828:	df000b17 	ldw	fp,44(sp)
 504982c:	ddc00a17 	ldw	r23,40(sp)
 5049830:	dd800917 	ldw	r22,36(sp)
 5049834:	dd400817 	ldw	r21,32(sp)
 5049838:	dd000717 	ldw	r20,28(sp)
 504983c:	dcc00617 	ldw	r19,24(sp)
 5049840:	dc800517 	ldw	r18,20(sp)
 5049844:	dc400417 	ldw	r17,16(sp)
 5049848:	dc000317 	ldw	r16,12(sp)
 504984c:	dec00d04 	addi	sp,sp,52
 5049850:	f800283a 	ret
 5049854:	008ff9f4 	movhi	r2,16359
 5049858:	002b883a 	mov	r21,zero
 504985c:	d8800015 	stw	r2,0(sp)
 5049860:	040ff4b4 	movhi	r16,16338
 5049864:	003fc406 	br	5049778 <_gp+0xfffde350>
 5049868:	0005883a 	mov	r2,zero
 504986c:	00cffc34 	movhi	r3,16368
 5049870:	003fec06 	br	5049824 <_gp+0xfffde3fc>

05049874 <__kernel_rem_pio2>:
 5049874:	deff5a04 	addi	sp,sp,-664
 5049878:	da00a617 	ldw	r8,664(sp)
 504987c:	00c141b4 	movhi	r3,1286
 5049880:	18c43f04 	addi	r3,r3,4348
 5049884:	4205883a 	add	r2,r8,r8
 5049888:	1085883a 	add	r2,r2,r2
 504988c:	1885883a 	add	r2,r3,r2
 5049890:	d9008e15 	stw	r4,568(sp)
 5049894:	d9408f15 	stw	r5,572(sp)
 5049898:	313fff44 	addi	r4,r6,-3
 504989c:	01400604 	movi	r5,24
 50498a0:	dd80a215 	stw	r22,648(sp)
 50498a4:	dc009c15 	stw	r16,624(sp)
 50498a8:	dfc0a515 	stw	ra,660(sp)
 50498ac:	df00a415 	stw	fp,656(sp)
 50498b0:	ddc0a315 	stw	r23,652(sp)
 50498b4:	dd40a115 	stw	r21,644(sp)
 50498b8:	dd00a015 	stw	r20,640(sp)
 50498bc:	dcc09f15 	stw	r19,636(sp)
 50498c0:	dc809e15 	stw	r18,632(sp)
 50498c4:	dc409d15 	stw	r17,628(sp)
 50498c8:	3021883a 	mov	r16,r6
 50498cc:	d9c09315 	stw	r7,588(sp)
 50498d0:	15800017 	ldw	r22,0(r2)
 50498d4:	504b2f40 	call	504b2f4 <__divsi3>
 50498d8:	da009317 	ldw	r8,588(sp)
 50498dc:	d8809215 	stw	r2,584(sp)
 50498e0:	423fffc4 	addi	r8,r8,-1
 50498e4:	da008d15 	stw	r8,564(sp)
 50498e8:	10033b16 	blt	r2,zero,504a5d8 <__kernel_rem_pio2+0xd64>
 50498ec:	da009217 	ldw	r8,584(sp)
 50498f0:	d9009217 	ldw	r4,584(sp)
 50498f4:	42000044 	addi	r8,r8,1
 50498f8:	40fffa24 	muli	r3,r8,-24
 50498fc:	da009515 	stw	r8,596(sp)
 5049900:	da008d17 	ldw	r8,564(sp)
 5049904:	1c07883a 	add	r3,r3,r16
 5049908:	d8c09015 	stw	r3,576(sp)
 504990c:	b205883a 	add	r2,r22,r8
 5049910:	2223c83a 	sub	r17,r4,r8
 5049914:	10001016 	blt	r2,zero,5049958 <__kernel_rem_pio2+0xe4>
 5049918:	da00a717 	ldw	r8,668(sp)
 504991c:	8c65883a 	add	r18,r17,r17
 5049920:	94a5883a 	add	r18,r18,r18
 5049924:	1445883a 	add	r2,r2,r17
 5049928:	dcc05004 	addi	r19,sp,320
 504992c:	44a5883a 	add	r18,r8,r18
 5049930:	14000044 	addi	r16,r2,1
 5049934:	88015316 	blt	r17,zero,5049e84 <__kernel_rem_pio2+0x610>
 5049938:	91000017 	ldw	r4,0(r18)
 504993c:	504eca00 	call	504eca0 <__floatsidf>
 5049940:	98800015 	stw	r2,0(r19)
 5049944:	98c00115 	stw	r3,4(r19)
 5049948:	8c400044 	addi	r17,r17,1
 504994c:	9cc00204 	addi	r19,r19,8
 5049950:	94800104 	addi	r18,r18,4
 5049954:	8c3ff71e 	bne	r17,r16,5049934 <_gp+0xfffde50c>
 5049958:	b0002816 	blt	r22,zero,50499fc <__kernel_rem_pio2+0x188>
 504995c:	da008d17 	ldw	r8,564(sp)
 5049960:	b4c00044 	addi	r19,r22,1
 5049964:	982690fa 	slli	r19,r19,3
 5049968:	402490fa 	slli	r18,r8,3
 504996c:	da008e17 	ldw	r8,568(sp)
 5049970:	d8805004 	addi	r2,sp,320
 5049974:	94000204 	addi	r16,r18,8
 5049978:	d823883a 	mov	r17,sp
 504997c:	14a5883a 	add	r18,r2,r18
 5049980:	dcef883a 	add	r23,sp,r19
 5049984:	4421883a 	add	r16,r8,r16
 5049988:	dd809115 	stw	r22,580(sp)
 504998c:	4039883a 	mov	fp,r8
 5049990:	da008d17 	ldw	r8,564(sp)
 5049994:	40016016 	blt	r8,zero,5049f18 <__kernel_rem_pio2+0x6a4>
 5049998:	e027883a 	mov	r19,fp
 504999c:	9029883a 	mov	r20,r18
 50499a0:	002d883a 	mov	r22,zero
 50499a4:	002b883a 	mov	r21,zero
 50499a8:	a1800017 	ldw	r6,0(r20)
 50499ac:	a1c00117 	ldw	r7,4(r20)
 50499b0:	99000017 	ldw	r4,0(r19)
 50499b4:	99400117 	ldw	r5,4(r19)
 50499b8:	9cc00204 	addi	r19,r19,8
 50499bc:	a53ffe04 	addi	r20,r20,-8
 50499c0:	504dc0c0 	call	504dc0c <__muldf3>
 50499c4:	b009883a 	mov	r4,r22
 50499c8:	a80b883a 	mov	r5,r21
 50499cc:	100d883a 	mov	r6,r2
 50499d0:	180f883a 	mov	r7,r3
 50499d4:	504c9140 	call	504c914 <__adddf3>
 50499d8:	102d883a 	mov	r22,r2
 50499dc:	182b883a 	mov	r21,r3
 50499e0:	9c3ff11e 	bne	r19,r16,50499a8 <_gp+0xfffde580>
 50499e4:	8d800015 	stw	r22,0(r17)
 50499e8:	8d400115 	stw	r21,4(r17)
 50499ec:	8c400204 	addi	r17,r17,8
 50499f0:	94800204 	addi	r18,r18,8
 50499f4:	8dffe61e 	bne	r17,r23,5049990 <_gp+0xfffde568>
 50499f8:	dd809117 	ldw	r22,580(sp)
 50499fc:	00d00034 	movhi	r3,16384
 5049a00:	da009317 	ldw	r8,588(sp)
 5049a04:	18ffff84 	addi	r3,r3,-2
 5049a08:	b0c7883a 	add	r3,r22,r3
 5049a0c:	18c7883a 	add	r3,r3,r3
 5049a10:	402090fa 	slli	r16,r8,3
 5049a14:	18c7883a 	add	r3,r3,r3
 5049a18:	da007804 	addi	r8,sp,480
 5049a1c:	40d1883a 	add	r8,r8,r3
 5049a20:	b0bfffc4 	addi	r2,r22,-1
 5049a24:	da009615 	stw	r8,600(sp)
 5049a28:	da008e17 	ldw	r8,568(sp)
 5049a2c:	1085883a 	add	r2,r2,r2
 5049a30:	1085883a 	add	r2,r2,r2
 5049a34:	19000104 	addi	r4,r3,4
 5049a38:	d885883a 	add	r2,sp,r2
 5049a3c:	4421883a 	add	r16,r8,r16
 5049a40:	da007804 	addi	r8,sp,480
 5049a44:	4111883a 	add	r8,r8,r4
 5049a48:	10807804 	addi	r2,r2,480
 5049a4c:	da009715 	stw	r8,604(sp)
 5049a50:	b025883a 	mov	r18,r22
 5049a54:	d8809815 	stw	r2,608(sp)
 5049a58:	dd809415 	stw	r22,592(sp)
 5049a5c:	900490fa 	slli	r2,r18,3
 5049a60:	d885883a 	add	r2,sp,r2
 5049a64:	17000017 	ldw	fp,0(r2)
 5049a68:	15400117 	ldw	r21,4(r2)
 5049a6c:	04802b0e 	bge	zero,r18,5049b1c <__kernel_rem_pio2+0x2a8>
 5049a70:	00880034 	movhi	r2,8192
 5049a74:	10bfffc4 	addi	r2,r2,-1
 5049a78:	90a9883a 	add	r20,r18,r2
 5049a7c:	a02890fa 	slli	r20,r20,3
 5049a80:	dc407804 	addi	r17,sp,480
 5049a84:	dcfffe04 	addi	r19,sp,-8
 5049a88:	dd29883a 	add	r20,sp,r20
 5049a8c:	000d883a 	mov	r6,zero
 5049a90:	01cf9c34 	movhi	r7,15984
 5049a94:	e009883a 	mov	r4,fp
 5049a98:	a80b883a 	mov	r5,r21
 5049a9c:	504dc0c0 	call	504dc0c <__muldf3>
 5049aa0:	180b883a 	mov	r5,r3
 5049aa4:	1009883a 	mov	r4,r2
 5049aa8:	504ec200 	call	504ec20 <__fixdfsi>
 5049aac:	1009883a 	mov	r4,r2
 5049ab0:	504eca00 	call	504eca0 <__floatsidf>
 5049ab4:	000d883a 	mov	r6,zero
 5049ab8:	01d05c34 	movhi	r7,16752
 5049abc:	1009883a 	mov	r4,r2
 5049ac0:	180b883a 	mov	r5,r3
 5049ac4:	102f883a 	mov	r23,r2
 5049ac8:	182d883a 	mov	r22,r3
 5049acc:	504dc0c0 	call	504dc0c <__muldf3>
 5049ad0:	100d883a 	mov	r6,r2
 5049ad4:	180f883a 	mov	r7,r3
 5049ad8:	e009883a 	mov	r4,fp
 5049adc:	a80b883a 	mov	r5,r21
 5049ae0:	504e3240 	call	504e324 <__subdf3>
 5049ae4:	180b883a 	mov	r5,r3
 5049ae8:	1009883a 	mov	r4,r2
 5049aec:	504ec200 	call	504ec20 <__fixdfsi>
 5049af0:	a1800017 	ldw	r6,0(r20)
 5049af4:	a1c00117 	ldw	r7,4(r20)
 5049af8:	88800015 	stw	r2,0(r17)
 5049afc:	b809883a 	mov	r4,r23
 5049b00:	b00b883a 	mov	r5,r22
 5049b04:	504c9140 	call	504c914 <__adddf3>
 5049b08:	a53ffe04 	addi	r20,r20,-8
 5049b0c:	1039883a 	mov	fp,r2
 5049b10:	182b883a 	mov	r21,r3
 5049b14:	8c400104 	addi	r17,r17,4
 5049b18:	a4ffdc1e 	bne	r20,r19,5049a8c <_gp+0xfffde664>
 5049b1c:	d9809017 	ldw	r6,576(sp)
 5049b20:	a80b883a 	mov	r5,r21
 5049b24:	e009883a 	mov	r4,fp
 5049b28:	504b13c0 	call	504b13c <scalbn>
 5049b2c:	000d883a 	mov	r6,zero
 5049b30:	01cff034 	movhi	r7,16320
 5049b34:	1009883a 	mov	r4,r2
 5049b38:	180b883a 	mov	r5,r3
 5049b3c:	1027883a 	mov	r19,r2
 5049b40:	1823883a 	mov	r17,r3
 5049b44:	504dc0c0 	call	504dc0c <__muldf3>
 5049b48:	1009883a 	mov	r4,r2
 5049b4c:	180b883a 	mov	r5,r3
 5049b50:	504af500 	call	504af50 <floor>
 5049b54:	000d883a 	mov	r6,zero
 5049b58:	01d00834 	movhi	r7,16416
 5049b5c:	1009883a 	mov	r4,r2
 5049b60:	180b883a 	mov	r5,r3
 5049b64:	504dc0c0 	call	504dc0c <__muldf3>
 5049b68:	100d883a 	mov	r6,r2
 5049b6c:	180f883a 	mov	r7,r3
 5049b70:	9809883a 	mov	r4,r19
 5049b74:	880b883a 	mov	r5,r17
 5049b78:	504e3240 	call	504e324 <__subdf3>
 5049b7c:	180b883a 	mov	r5,r3
 5049b80:	1009883a 	mov	r4,r2
 5049b84:	1827883a 	mov	r19,r3
 5049b88:	1029883a 	mov	r20,r2
 5049b8c:	504ec200 	call	504ec20 <__fixdfsi>
 5049b90:	1009883a 	mov	r4,r2
 5049b94:	1023883a 	mov	r17,r2
 5049b98:	504eca00 	call	504eca0 <__floatsidf>
 5049b9c:	a009883a 	mov	r4,r20
 5049ba0:	100d883a 	mov	r6,r2
 5049ba4:	180f883a 	mov	r7,r3
 5049ba8:	980b883a 	mov	r5,r19
 5049bac:	504e3240 	call	504e324 <__subdf3>
 5049bb0:	d9009017 	ldw	r4,576(sp)
 5049bb4:	1013883a 	mov	r9,r2
 5049bb8:	102b883a 	mov	r21,r2
 5049bbc:	1811883a 	mov	r8,r3
 5049bc0:	0100b30e 	bge	zero,r4,5049e90 <__kernel_rem_pio2+0x61c>
 5049bc4:	90bfffc4 	addi	r2,r18,-1
 5049bc8:	1085883a 	add	r2,r2,r2
 5049bcc:	1085883a 	add	r2,r2,r2
 5049bd0:	d885883a 	add	r2,sp,r2
 5049bd4:	10807804 	addi	r2,r2,480
 5049bd8:	d9809017 	ldw	r6,576(sp)
 5049bdc:	11400017 	ldw	r5,0(r2)
 5049be0:	01000604 	movi	r4,24
 5049be4:	2189c83a 	sub	r4,r4,r6
 5049be8:	290dd83a 	sra	r6,r5,r4
 5049bec:	d9c09017 	ldw	r7,576(sp)
 5049bf0:	04c005c4 	movi	r19,23
 5049bf4:	3108983a 	sll	r4,r6,r4
 5049bf8:	99e7c83a 	sub	r19,r19,r7
 5049bfc:	89a3883a 	add	r17,r17,r6
 5049c00:	2909c83a 	sub	r4,r5,r4
 5049c04:	24e7d83a 	sra	r19,r4,r19
 5049c08:	11000015 	stw	r4,0(r2)
 5049c0c:	04c02a0e 	bge	zero,r19,5049cb8 <__kernel_rem_pio2+0x444>
 5049c10:	8c400044 	addi	r17,r17,1
 5049c14:	0481570e 	bge	zero,r18,504a174 <__kernel_rem_pio2+0x900>
 5049c18:	02804034 	movhi	r10,256
 5049c1c:	52bfffc4 	addi	r10,r10,-1
 5049c20:	d8807804 	addi	r2,sp,480
 5049c24:	000b883a 	mov	r5,zero
 5049c28:	0029883a 	mov	r20,zero
 5049c2c:	01c04034 	movhi	r7,256
 5049c30:	00000706 	br	5049c50 <__kernel_rem_pio2+0x3dc>
 5049c34:	390dc83a 	sub	r6,r7,r4
 5049c38:	20000226 	beq	r4,zero,5049c44 <__kernel_rem_pio2+0x3d0>
 5049c3c:	11800015 	stw	r6,0(r2)
 5049c40:	05000044 	movi	r20,1
 5049c44:	29400044 	addi	r5,r5,1
 5049c48:	10800104 	addi	r2,r2,4
 5049c4c:	2c80080e 	bge	r5,r18,5049c70 <__kernel_rem_pio2+0x3fc>
 5049c50:	11000017 	ldw	r4,0(r2)
 5049c54:	a03ff726 	beq	r20,zero,5049c34 <_gp+0xfffde80c>
 5049c58:	5109c83a 	sub	r4,r10,r4
 5049c5c:	11000015 	stw	r4,0(r2)
 5049c60:	29400044 	addi	r5,r5,1
 5049c64:	05000044 	movi	r20,1
 5049c68:	10800104 	addi	r2,r2,4
 5049c6c:	2cbff816 	blt	r5,r18,5049c50 <_gp+0xfffde828>
 5049c70:	d9009017 	ldw	r4,576(sp)
 5049c74:	01000e0e 	bge	zero,r4,5049cb0 <__kernel_rem_pio2+0x43c>
 5049c78:	00800044 	movi	r2,1
 5049c7c:	20808d26 	beq	r4,r2,5049eb4 <__kernel_rem_pio2+0x640>
 5049c80:	00800084 	movi	r2,2
 5049c84:	20800a1e 	bne	r4,r2,5049cb0 <__kernel_rem_pio2+0x43c>
 5049c88:	90bfffc4 	addi	r2,r18,-1
 5049c8c:	1085883a 	add	r2,r2,r2
 5049c90:	1085883a 	add	r2,r2,r2
 5049c94:	d885883a 	add	r2,sp,r2
 5049c98:	10807804 	addi	r2,r2,480
 5049c9c:	11400017 	ldw	r5,0(r2)
 5049ca0:	01001034 	movhi	r4,64
 5049ca4:	213fffc4 	addi	r4,r4,-1
 5049ca8:	2908703a 	and	r4,r5,r4
 5049cac:	11000015 	stw	r4,0(r2)
 5049cb0:	00800084 	movi	r2,2
 5049cb4:	98805d26 	beq	r19,r2,5049e2c <__kernel_rem_pio2+0x5b8>
 5049cb8:	400b883a 	mov	r5,r8
 5049cbc:	000d883a 	mov	r6,zero
 5049cc0:	000f883a 	mov	r7,zero
 5049cc4:	a809883a 	mov	r4,r21
 5049cc8:	da009b15 	stw	r8,620(sp)
 5049ccc:	504daa80 	call	504daa8 <__eqdf2>
 5049cd0:	da009b17 	ldw	r8,620(sp)
 5049cd4:	10012b1e 	bne	r2,zero,504a184 <__kernel_rem_pio2+0x910>
 5049cd8:	da009417 	ldw	r8,592(sp)
 5049cdc:	917fffc4 	addi	r5,r18,-1
 5049ce0:	2a000e16 	blt	r5,r8,5049d1c <__kernel_rem_pio2+0x4a8>
 5049ce4:	00900034 	movhi	r2,16384
 5049ce8:	10bfffc4 	addi	r2,r2,-1
 5049cec:	9085883a 	add	r2,r18,r2
 5049cf0:	1085883a 	add	r2,r2,r2
 5049cf4:	d9809717 	ldw	r6,604(sp)
 5049cf8:	1085883a 	add	r2,r2,r2
 5049cfc:	d9007804 	addi	r4,sp,480
 5049d00:	0007883a 	mov	r3,zero
 5049d04:	2085883a 	add	r2,r4,r2
 5049d08:	11000017 	ldw	r4,0(r2)
 5049d0c:	10bfff04 	addi	r2,r2,-4
 5049d10:	1906b03a 	or	r3,r3,r4
 5049d14:	11bffc1e 	bne	r2,r6,5049d08 <_gp+0xfffde8e0>
 5049d18:	1800821e 	bne	r3,zero,5049f24 <__kernel_rem_pio2+0x6b0>
 5049d1c:	da009817 	ldw	r8,608(sp)
 5049d20:	40800017 	ldw	r2,0(r8)
 5049d24:	1001151e 	bne	r2,zero,504a17c <__kernel_rem_pio2+0x908>
 5049d28:	d8809617 	ldw	r2,600(sp)
 5049d2c:	05000044 	movi	r20,1
 5049d30:	10bfff04 	addi	r2,r2,-4
 5049d34:	10c00117 	ldw	r3,4(r2)
 5049d38:	a5000044 	addi	r20,r20,1
 5049d3c:	183ffc26 	beq	r3,zero,5049d30 <_gp+0xfffde908>
 5049d40:	9529883a 	add	r20,r18,r20
 5049d44:	90800044 	addi	r2,r18,1
 5049d48:	dd009115 	stw	r20,580(sp)
 5049d4c:	a0803216 	blt	r20,r2,5049e18 <__kernel_rem_pio2+0x5a4>
 5049d50:	da009317 	ldw	r8,588(sp)
 5049d54:	d8c09117 	ldw	r3,580(sp)
 5049d58:	44a3883a 	add	r17,r8,r18
 5049d5c:	da009217 	ldw	r8,584(sp)
 5049d60:	882290fa 	slli	r17,r17,3
 5049d64:	40a5883a 	add	r18,r8,r2
 5049d68:	da009517 	ldw	r8,596(sp)
 5049d6c:	100490fa 	slli	r2,r2,3
 5049d70:	94a5883a 	add	r18,r18,r18
 5049d74:	40eb883a 	add	r21,r8,r3
 5049d78:	da00a717 	ldw	r8,668(sp)
 5049d7c:	ad6b883a 	add	r21,r21,r21
 5049d80:	94a5883a 	add	r18,r18,r18
 5049d84:	ad6b883a 	add	r21,r21,r21
 5049d88:	d8c05004 	addi	r3,sp,320
 5049d8c:	44a5883a 	add	r18,r8,r18
 5049d90:	1c63883a 	add	r17,r3,r17
 5049d94:	d8a7883a 	add	r19,sp,r2
 5049d98:	456b883a 	add	r21,r8,r21
 5049d9c:	91000017 	ldw	r4,0(r18)
 5049da0:	504eca00 	call	504eca0 <__floatsidf>
 5049da4:	da008d17 	ldw	r8,564(sp)
 5049da8:	88800015 	stw	r2,0(r17)
 5049dac:	88c00115 	stw	r3,4(r17)
 5049db0:	40001b16 	blt	r8,zero,5049e20 <__kernel_rem_pio2+0x5ac>
 5049db4:	dd008e17 	ldw	r20,568(sp)
 5049db8:	882d883a 	mov	r22,r17
 5049dbc:	002f883a 	mov	r23,zero
 5049dc0:	0039883a 	mov	fp,zero
 5049dc4:	b1800017 	ldw	r6,0(r22)
 5049dc8:	b1c00117 	ldw	r7,4(r22)
 5049dcc:	a1000017 	ldw	r4,0(r20)
 5049dd0:	a1400117 	ldw	r5,4(r20)
 5049dd4:	a5000204 	addi	r20,r20,8
 5049dd8:	b5bffe04 	addi	r22,r22,-8
 5049ddc:	504dc0c0 	call	504dc0c <__muldf3>
 5049de0:	b809883a 	mov	r4,r23
 5049de4:	e00b883a 	mov	r5,fp
 5049de8:	100d883a 	mov	r6,r2
 5049dec:	180f883a 	mov	r7,r3
 5049df0:	504c9140 	call	504c914 <__adddf3>
 5049df4:	102f883a 	mov	r23,r2
 5049df8:	1839883a 	mov	fp,r3
 5049dfc:	a43ff11e 	bne	r20,r16,5049dc4 <_gp+0xfffde99c>
 5049e00:	9dc00015 	stw	r23,0(r19)
 5049e04:	9f000115 	stw	fp,4(r19)
 5049e08:	94800104 	addi	r18,r18,4
 5049e0c:	8c400204 	addi	r17,r17,8
 5049e10:	9cc00204 	addi	r19,r19,8
 5049e14:	957fe11e 	bne	r18,r21,5049d9c <_gp+0xfffde974>
 5049e18:	dc809117 	ldw	r18,580(sp)
 5049e1c:	003f0f06 	br	5049a5c <_gp+0xfffde634>
 5049e20:	002f883a 	mov	r23,zero
 5049e24:	0039883a 	mov	fp,zero
 5049e28:	003ff506 	br	5049e00 <_gp+0xfffde9d8>
 5049e2c:	480d883a 	mov	r6,r9
 5049e30:	180f883a 	mov	r7,r3
 5049e34:	0009883a 	mov	r4,zero
 5049e38:	014ffc34 	movhi	r5,16368
 5049e3c:	504e3240 	call	504e324 <__subdf3>
 5049e40:	102b883a 	mov	r21,r2
 5049e44:	1811883a 	mov	r8,r3
 5049e48:	a03f9b26 	beq	r20,zero,5049cb8 <_gp+0xfffde890>
 5049e4c:	d9809017 	ldw	r6,576(sp)
 5049e50:	0009883a 	mov	r4,zero
 5049e54:	014ffc34 	movhi	r5,16368
 5049e58:	d8c09b15 	stw	r3,620(sp)
 5049e5c:	504b13c0 	call	504b13c <scalbn>
 5049e60:	da009b17 	ldw	r8,620(sp)
 5049e64:	a809883a 	mov	r4,r21
 5049e68:	100d883a 	mov	r6,r2
 5049e6c:	400b883a 	mov	r5,r8
 5049e70:	180f883a 	mov	r7,r3
 5049e74:	504e3240 	call	504e324 <__subdf3>
 5049e78:	102b883a 	mov	r21,r2
 5049e7c:	1811883a 	mov	r8,r3
 5049e80:	003f8d06 	br	5049cb8 <_gp+0xfffde890>
 5049e84:	0005883a 	mov	r2,zero
 5049e88:	0007883a 	mov	r3,zero
 5049e8c:	003eac06 	br	5049940 <_gp+0xfffde518>
 5049e90:	d8809017 	ldw	r2,576(sp)
 5049e94:	1000121e 	bne	r2,zero,5049ee0 <__kernel_rem_pio2+0x66c>
 5049e98:	90bfffc4 	addi	r2,r18,-1
 5049e9c:	1085883a 	add	r2,r2,r2
 5049ea0:	1085883a 	add	r2,r2,r2
 5049ea4:	d885883a 	add	r2,sp,r2
 5049ea8:	14c07817 	ldw	r19,480(r2)
 5049eac:	9827d5fa 	srai	r19,r19,23
 5049eb0:	003f5606 	br	5049c0c <_gp+0xfffde7e4>
 5049eb4:	90bfffc4 	addi	r2,r18,-1
 5049eb8:	1085883a 	add	r2,r2,r2
 5049ebc:	1085883a 	add	r2,r2,r2
 5049ec0:	d885883a 	add	r2,sp,r2
 5049ec4:	10807804 	addi	r2,r2,480
 5049ec8:	11000017 	ldw	r4,0(r2)
 5049ecc:	01402034 	movhi	r5,128
 5049ed0:	297fffc4 	addi	r5,r5,-1
 5049ed4:	2148703a 	and	r4,r4,r5
 5049ed8:	11000015 	stw	r4,0(r2)
 5049edc:	003f7406 	br	5049cb0 <_gp+0xfffde888>
 5049ee0:	4809883a 	mov	r4,r9
 5049ee4:	180b883a 	mov	r5,r3
 5049ee8:	000d883a 	mov	r6,zero
 5049eec:	01cff834 	movhi	r7,16352
 5049ef0:	d8c09a15 	stw	r3,616(sp)
 5049ef4:	d8c09b15 	stw	r3,620(sp)
 5049ef8:	da409915 	stw	r9,612(sp)
 5049efc:	504db300 	call	504db30 <__gedf2>
 5049f00:	d8c09a17 	ldw	r3,616(sp)
 5049f04:	da009b17 	ldw	r8,620(sp)
 5049f08:	da409917 	ldw	r9,612(sp)
 5049f0c:	1000920e 	bge	r2,zero,504a158 <__kernel_rem_pio2+0x8e4>
 5049f10:	0027883a 	mov	r19,zero
 5049f14:	003f6806 	br	5049cb8 <_gp+0xfffde890>
 5049f18:	002d883a 	mov	r22,zero
 5049f1c:	002b883a 	mov	r21,zero
 5049f20:	003eb006 	br	50499e4 <_gp+0xfffde5bc>
 5049f24:	2945883a 	add	r2,r5,r5
 5049f28:	da009017 	ldw	r8,576(sp)
 5049f2c:	1085883a 	add	r2,r2,r2
 5049f30:	d885883a 	add	r2,sp,r2
 5049f34:	10807817 	ldw	r2,480(r2)
 5049f38:	423ffa04 	addi	r8,r8,-24
 5049f3c:	dc409115 	stw	r17,580(sp)
 5049f40:	dcc08d15 	stw	r19,564(sp)
 5049f44:	da009015 	stw	r8,576(sp)
 5049f48:	dd809417 	ldw	r22,592(sp)
 5049f4c:	2823883a 	mov	r17,r5
 5049f50:	10000e1e 	bne	r2,zero,5049f8c <__kernel_rem_pio2+0x718>
 5049f54:	00900034 	movhi	r2,16384
 5049f58:	10bfffc4 	addi	r2,r2,-1
 5049f5c:	2885883a 	add	r2,r5,r2
 5049f60:	1085883a 	add	r2,r2,r2
 5049f64:	d8c07804 	addi	r3,sp,480
 5049f68:	1085883a 	add	r2,r2,r2
 5049f6c:	1885883a 	add	r2,r3,r2
 5049f70:	4007883a 	mov	r3,r8
 5049f74:	10bfff04 	addi	r2,r2,-4
 5049f78:	11000117 	ldw	r4,4(r2)
 5049f7c:	8c7fffc4 	addi	r17,r17,-1
 5049f80:	18fffa04 	addi	r3,r3,-24
 5049f84:	203ffb26 	beq	r4,zero,5049f74 <_gp+0xfffdeb4c>
 5049f88:	d8c09015 	stw	r3,576(sp)
 5049f8c:	d9809017 	ldw	r6,576(sp)
 5049f90:	0009883a 	mov	r4,zero
 5049f94:	014ffc34 	movhi	r5,16368
 5049f98:	504b13c0 	call	504b13c <scalbn>
 5049f9c:	1029883a 	mov	r20,r2
 5049fa0:	182b883a 	mov	r21,r3
 5049fa4:	88018416 	blt	r17,zero,504a5b8 <__kernel_rem_pio2+0xd44>
 5049fa8:	881090fa 	slli	r8,r17,3
 5049fac:	d8c07804 	addi	r3,sp,480
 5049fb0:	da008e15 	stw	r8,568(sp)
 5049fb4:	d8808e17 	ldw	r2,568(sp)
 5049fb8:	8c51883a 	add	r8,r17,r17
 5049fbc:	4211883a 	add	r8,r8,r8
 5049fc0:	d8a1883a 	add	r16,sp,r2
 5049fc4:	1a25883a 	add	r18,r3,r8
 5049fc8:	da3ffe04 	addi	r8,sp,-8
 5049fcc:	da008c15 	stw	r8,560(sp)
 5049fd0:	8039883a 	mov	fp,r16
 5049fd4:	91000017 	ldw	r4,0(r18)
 5049fd8:	e73ffe04 	addi	fp,fp,-8
 5049fdc:	94bfff04 	addi	r18,r18,-4
 5049fe0:	504eca00 	call	504eca0 <__floatsidf>
 5049fe4:	a00d883a 	mov	r6,r20
 5049fe8:	a80f883a 	mov	r7,r21
 5049fec:	1009883a 	mov	r4,r2
 5049ff0:	180b883a 	mov	r5,r3
 5049ff4:	504dc0c0 	call	504dc0c <__muldf3>
 5049ff8:	a009883a 	mov	r4,r20
 5049ffc:	a80b883a 	mov	r5,r21
 504a000:	e0800215 	stw	r2,8(fp)
 504a004:	e0c00315 	stw	r3,12(fp)
 504a008:	000d883a 	mov	r6,zero
 504a00c:	01cf9c34 	movhi	r7,15984
 504a010:	504dc0c0 	call	504dc0c <__muldf3>
 504a014:	da008c17 	ldw	r8,560(sp)
 504a018:	1029883a 	mov	r20,r2
 504a01c:	182b883a 	mov	r21,r3
 504a020:	e23fec1e 	bne	fp,r8,5049fd4 <_gp+0xfffdebac>
 504a024:	0029883a 	mov	r20,zero
 504a028:	b0004f16 	blt	r22,zero,504a168 <__kernel_rem_pio2+0x8f4>
 504a02c:	054141b4 	movhi	r21,1286
 504a030:	014ffe74 	movhi	r5,16377
 504a034:	ad443104 	addi	r21,r21,4292
 504a038:	8027883a 	mov	r19,r16
 504a03c:	01100034 	movhi	r4,16384
 504a040:	29487ec4 	addi	r5,r5,8699
 504a044:	0039883a 	mov	fp,zero
 504a048:	002f883a 	mov	r23,zero
 504a04c:	0025883a 	mov	r18,zero
 504a050:	00000506 	br	504a068 <__kernel_rem_pio2+0x7f4>
 504a054:	9cc00204 	addi	r19,r19,8
 504a058:	a4800f16 	blt	r20,r18,504a098 <__kernel_rem_pio2+0x824>
 504a05c:	a9000017 	ldw	r4,0(r21)
 504a060:	a9400117 	ldw	r5,4(r21)
 504a064:	ad400204 	addi	r21,r21,8
 504a068:	99800017 	ldw	r6,0(r19)
 504a06c:	99c00117 	ldw	r7,4(r19)
 504a070:	94800044 	addi	r18,r18,1
 504a074:	504dc0c0 	call	504dc0c <__muldf3>
 504a078:	e009883a 	mov	r4,fp
 504a07c:	b80b883a 	mov	r5,r23
 504a080:	100d883a 	mov	r6,r2
 504a084:	180f883a 	mov	r7,r3
 504a088:	504c9140 	call	504c914 <__adddf3>
 504a08c:	1039883a 	mov	fp,r2
 504a090:	182f883a 	mov	r23,r3
 504a094:	b4bfef0e 	bge	r22,r18,504a054 <_gp+0xfffdec2c>
 504a098:	a00490fa 	slli	r2,r20,3
 504a09c:	da008c17 	ldw	r8,560(sp)
 504a0a0:	843ffe04 	addi	r16,r16,-8
 504a0a4:	d885883a 	add	r2,sp,r2
 504a0a8:	10802804 	addi	r2,r2,160
 504a0ac:	17000015 	stw	fp,0(r2)
 504a0b0:	15c00115 	stw	r23,4(r2)
 504a0b4:	a5000044 	addi	r20,r20,1
 504a0b8:	823fdb1e 	bne	r16,r8,504a028 <_gp+0xfffdec00>
 504a0bc:	da00a617 	ldw	r8,664(sp)
 504a0c0:	00800084 	movi	r2,2
 504a0c4:	12006616 	blt	r2,r8,504a260 <__kernel_rem_pio2+0x9ec>
 504a0c8:	0200de16 	blt	zero,r8,504a444 <__kernel_rem_pio2+0xbd0>
 504a0cc:	4000141e 	bne	r8,zero,504a120 <__kernel_rem_pio2+0x8ac>
 504a0d0:	da008e17 	ldw	r8,568(sp)
 504a0d4:	d8802804 	addi	r2,sp,160
 504a0d8:	0007883a 	mov	r3,zero
 504a0dc:	1225883a 	add	r18,r2,r8
 504a0e0:	043fffc4 	movi	r16,-1
 504a0e4:	0005883a 	mov	r2,zero
 504a0e8:	91800017 	ldw	r6,0(r18)
 504a0ec:	91c00117 	ldw	r7,4(r18)
 504a0f0:	1009883a 	mov	r4,r2
 504a0f4:	180b883a 	mov	r5,r3
 504a0f8:	8c7fffc4 	addi	r17,r17,-1
 504a0fc:	504c9140 	call	504c914 <__adddf3>
 504a100:	94bffe04 	addi	r18,r18,-8
 504a104:	8c3ff81e 	bne	r17,r16,504a0e8 <_gp+0xfffdecc0>
 504a108:	da008d17 	ldw	r8,564(sp)
 504a10c:	40000126 	beq	r8,zero,504a114 <__kernel_rem_pio2+0x8a0>
 504a110:	18e0003c 	xorhi	r3,r3,32768
 504a114:	da008f17 	ldw	r8,572(sp)
 504a118:	40800015 	stw	r2,0(r8)
 504a11c:	40c00115 	stw	r3,4(r8)
 504a120:	da009117 	ldw	r8,580(sp)
 504a124:	408001cc 	andi	r2,r8,7
 504a128:	dfc0a517 	ldw	ra,660(sp)
 504a12c:	df00a417 	ldw	fp,656(sp)
 504a130:	ddc0a317 	ldw	r23,652(sp)
 504a134:	dd80a217 	ldw	r22,648(sp)
 504a138:	dd40a117 	ldw	r21,644(sp)
 504a13c:	dd00a017 	ldw	r20,640(sp)
 504a140:	dcc09f17 	ldw	r19,636(sp)
 504a144:	dc809e17 	ldw	r18,632(sp)
 504a148:	dc409d17 	ldw	r17,628(sp)
 504a14c:	dc009c17 	ldw	r16,624(sp)
 504a150:	dec0a604 	addi	sp,sp,664
 504a154:	f800283a 	ret
 504a158:	8c400044 	addi	r17,r17,1
 504a15c:	04810d0e 	bge	zero,r18,504a594 <__kernel_rem_pio2+0xd20>
 504a160:	04c00084 	movi	r19,2
 504a164:	003eac06 	br	5049c18 <_gp+0xfffde7f0>
 504a168:	0039883a 	mov	fp,zero
 504a16c:	002f883a 	mov	r23,zero
 504a170:	003fc906 	br	504a098 <_gp+0xfffdec70>
 504a174:	0029883a 	mov	r20,zero
 504a178:	003ebd06 	br	5049c70 <_gp+0xfffde848>
 504a17c:	05000044 	movi	r20,1
 504a180:	003eef06 	br	5049d40 <_gp+0xfffde918>
 504a184:	4029883a 	mov	r20,r8
 504a188:	da009017 	ldw	r8,576(sp)
 504a18c:	a809883a 	mov	r4,r21
 504a190:	a00b883a 	mov	r5,r20
 504a194:	020dc83a 	sub	r6,zero,r8
 504a198:	dc409115 	stw	r17,580(sp)
 504a19c:	dd809417 	ldw	r22,592(sp)
 504a1a0:	dcc08d15 	stw	r19,564(sp)
 504a1a4:	504b13c0 	call	504b13c <scalbn>
 504a1a8:	000d883a 	mov	r6,zero
 504a1ac:	01d05c34 	movhi	r7,16752
 504a1b0:	1009883a 	mov	r4,r2
 504a1b4:	180b883a 	mov	r5,r3
 504a1b8:	102b883a 	mov	r21,r2
 504a1bc:	1823883a 	mov	r17,r3
 504a1c0:	504db300 	call	504db30 <__gedf2>
 504a1c4:	1000e916 	blt	r2,zero,504a56c <__kernel_rem_pio2+0xcf8>
 504a1c8:	000d883a 	mov	r6,zero
 504a1cc:	01cf9c34 	movhi	r7,15984
 504a1d0:	880b883a 	mov	r5,r17
 504a1d4:	a809883a 	mov	r4,r21
 504a1d8:	504dc0c0 	call	504dc0c <__muldf3>
 504a1dc:	180b883a 	mov	r5,r3
 504a1e0:	1009883a 	mov	r4,r2
 504a1e4:	504ec200 	call	504ec20 <__fixdfsi>
 504a1e8:	1029883a 	mov	r20,r2
 504a1ec:	9485883a 	add	r2,r18,r18
 504a1f0:	1085883a 	add	r2,r2,r2
 504a1f4:	a009883a 	mov	r4,r20
 504a1f8:	d8a1883a 	add	r16,sp,r2
 504a1fc:	504eca00 	call	504eca0 <__floatsidf>
 504a200:	000d883a 	mov	r6,zero
 504a204:	01d05c34 	movhi	r7,16752
 504a208:	1009883a 	mov	r4,r2
 504a20c:	180b883a 	mov	r5,r3
 504a210:	504dc0c0 	call	504dc0c <__muldf3>
 504a214:	880b883a 	mov	r5,r17
 504a218:	100d883a 	mov	r6,r2
 504a21c:	180f883a 	mov	r7,r3
 504a220:	a809883a 	mov	r4,r21
 504a224:	504e3240 	call	504e324 <__subdf3>
 504a228:	180b883a 	mov	r5,r3
 504a22c:	1009883a 	mov	r4,r2
 504a230:	504ec200 	call	504ec20 <__fixdfsi>
 504a234:	da009017 	ldw	r8,576(sp)
 504a238:	94400044 	addi	r17,r18,1
 504a23c:	8c47883a 	add	r3,r17,r17
 504a240:	84007804 	addi	r16,r16,480
 504a244:	18c7883a 	add	r3,r3,r3
 504a248:	80800015 	stw	r2,0(r16)
 504a24c:	d8c7883a 	add	r3,sp,r3
 504a250:	42000604 	addi	r8,r8,24
 504a254:	da009015 	stw	r8,576(sp)
 504a258:	1d007815 	stw	r20,480(r3)
 504a25c:	003f4b06 	br	5049f8c <_gp+0xfffdeb64>
 504a260:	da00a617 	ldw	r8,664(sp)
 504a264:	008000c4 	movi	r2,3
 504a268:	40bfad1e 	bne	r8,r2,504a120 <_gp+0xfffdecf8>
 504a26c:	0440bc0e 	bge	zero,r17,504a560 <__kernel_rem_pio2+0xcec>
 504a270:	da008e17 	ldw	r8,568(sp)
 504a274:	882090fa 	slli	r16,r17,3
 504a278:	dd402804 	addi	r21,sp,160
 504a27c:	da05883a 	add	r2,sp,r8
 504a280:	10802804 	addi	r2,r2,160
 504a284:	15c00017 	ldw	r23,0(r2)
 504a288:	15800117 	ldw	r22,4(r2)
 504a28c:	8029883a 	mov	r20,r16
 504a290:	843ffe04 	addi	r16,r16,-8
 504a294:	ac21883a 	add	r16,r21,r16
 504a298:	ad29883a 	add	r20,r21,r20
 504a29c:	dac02604 	addi	r11,sp,152
 504a2a0:	8811883a 	mov	r8,r17
 504a2a4:	84400017 	ldw	r17,0(r16)
 504a2a8:	87000117 	ldw	fp,4(r16)
 504a2ac:	b80d883a 	mov	r6,r23
 504a2b0:	b00f883a 	mov	r7,r22
 504a2b4:	8809883a 	mov	r4,r17
 504a2b8:	e00b883a 	mov	r5,fp
 504a2bc:	da009b15 	stw	r8,620(sp)
 504a2c0:	dac09915 	stw	r11,612(sp)
 504a2c4:	504c9140 	call	504c914 <__adddf3>
 504a2c8:	100d883a 	mov	r6,r2
 504a2cc:	180f883a 	mov	r7,r3
 504a2d0:	8809883a 	mov	r4,r17
 504a2d4:	e00b883a 	mov	r5,fp
 504a2d8:	1027883a 	mov	r19,r2
 504a2dc:	1825883a 	mov	r18,r3
 504a2e0:	504e3240 	call	504e324 <__subdf3>
 504a2e4:	b80d883a 	mov	r6,r23
 504a2e8:	b00f883a 	mov	r7,r22
 504a2ec:	1009883a 	mov	r4,r2
 504a2f0:	180b883a 	mov	r5,r3
 504a2f4:	504c9140 	call	504c914 <__adddf3>
 504a2f8:	dac09917 	ldw	r11,612(sp)
 504a2fc:	a0800015 	stw	r2,0(r20)
 504a300:	a0c00115 	stw	r3,4(r20)
 504a304:	84c00015 	stw	r19,0(r16)
 504a308:	84800115 	stw	r18,4(r16)
 504a30c:	843ffe04 	addi	r16,r16,-8
 504a310:	a53ffe04 	addi	r20,r20,-8
 504a314:	982f883a 	mov	r23,r19
 504a318:	902d883a 	mov	r22,r18
 504a31c:	da009b17 	ldw	r8,620(sp)
 504a320:	5c3fe01e 	bne	r11,r16,504a2a4 <_gp+0xfffdee7c>
 504a324:	00800044 	movi	r2,1
 504a328:	12008d0e 	bge	r2,r8,504a560 <__kernel_rem_pio2+0xcec>
 504a32c:	402090fa 	slli	r16,r8,3
 504a330:	da008e17 	ldw	r8,568(sp)
 504a334:	8023883a 	mov	r17,r16
 504a338:	da05883a 	add	r2,sp,r8
 504a33c:	10802804 	addi	r2,r2,160
 504a340:	15800017 	ldw	r22,0(r2)
 504a344:	15000117 	ldw	r20,4(r2)
 504a348:	ac63883a 	add	r17,r21,r17
 504a34c:	843ffe04 	addi	r16,r16,-8
 504a350:	ac21883a 	add	r16,r21,r16
 504a354:	8825883a 	mov	r18,r17
 504a358:	8811883a 	mov	r8,r17
 504a35c:	84400017 	ldw	r17,0(r16)
 504a360:	87000117 	ldw	fp,4(r16)
 504a364:	b009883a 	mov	r4,r22
 504a368:	a00b883a 	mov	r5,r20
 504a36c:	880d883a 	mov	r6,r17
 504a370:	e00f883a 	mov	r7,fp
 504a374:	da009b15 	stw	r8,620(sp)
 504a378:	504c9140 	call	504c914 <__adddf3>
 504a37c:	100d883a 	mov	r6,r2
 504a380:	180f883a 	mov	r7,r3
 504a384:	8809883a 	mov	r4,r17
 504a388:	e00b883a 	mov	r5,fp
 504a38c:	102f883a 	mov	r23,r2
 504a390:	1827883a 	mov	r19,r3
 504a394:	504e3240 	call	504e324 <__subdf3>
 504a398:	b00d883a 	mov	r6,r22
 504a39c:	a00f883a 	mov	r7,r20
 504a3a0:	1009883a 	mov	r4,r2
 504a3a4:	180b883a 	mov	r5,r3
 504a3a8:	504c9140 	call	504c914 <__adddf3>
 504a3ac:	90800015 	stw	r2,0(r18)
 504a3b0:	90c00115 	stw	r3,4(r18)
 504a3b4:	85c00015 	stw	r23,0(r16)
 504a3b8:	84c00115 	stw	r19,4(r16)
 504a3bc:	843ffe04 	addi	r16,r16,-8
 504a3c0:	94bffe04 	addi	r18,r18,-8
 504a3c4:	b82d883a 	mov	r22,r23
 504a3c8:	9829883a 	mov	r20,r19
 504a3cc:	da009b17 	ldw	r8,620(sp)
 504a3d0:	ac3fe21e 	bne	r21,r16,504a35c <_gp+0xfffdef34>
 504a3d4:	4023883a 	mov	r17,r8
 504a3d8:	dc002a04 	addi	r16,sp,168
 504a3dc:	0005883a 	mov	r2,zero
 504a3e0:	0007883a 	mov	r3,zero
 504a3e4:	89800017 	ldw	r6,0(r17)
 504a3e8:	89c00117 	ldw	r7,4(r17)
 504a3ec:	1009883a 	mov	r4,r2
 504a3f0:	8c7ffe04 	addi	r17,r17,-8
 504a3f4:	180b883a 	mov	r5,r3
 504a3f8:	504c9140 	call	504c914 <__adddf3>
 504a3fc:	847ff91e 	bne	r16,r17,504a3e4 <_gp+0xfffdefbc>
 504a400:	da008d17 	ldw	r8,564(sp)
 504a404:	40004726 	beq	r8,zero,504a524 <__kernel_rem_pio2+0xcb0>
 504a408:	d9002b17 	ldw	r4,172(sp)
 504a40c:	d9402917 	ldw	r5,164(sp)
 504a410:	d9802a17 	ldw	r6,168(sp)
 504a414:	da008f17 	ldw	r8,572(sp)
 504a418:	d9c02817 	ldw	r7,160(sp)
 504a41c:	2960003c 	xorhi	r5,r5,32768
 504a420:	2120003c 	xorhi	r4,r4,32768
 504a424:	18e0003c 	xorhi	r3,r3,32768
 504a428:	41c00015 	stw	r7,0(r8)
 504a42c:	41400115 	stw	r5,4(r8)
 504a430:	41800215 	stw	r6,8(r8)
 504a434:	41000315 	stw	r4,12(r8)
 504a438:	40800415 	stw	r2,16(r8)
 504a43c:	40c00515 	stw	r3,20(r8)
 504a440:	003f3706 	br	504a120 <_gp+0xfffdecf8>
 504a444:	da008e17 	ldw	r8,568(sp)
 504a448:	d8802804 	addi	r2,sp,160
 504a44c:	dc002604 	addi	r16,sp,152
 504a450:	1225883a 	add	r18,r2,r8
 504a454:	0007883a 	mov	r3,zero
 504a458:	0005883a 	mov	r2,zero
 504a45c:	91800017 	ldw	r6,0(r18)
 504a460:	91c00117 	ldw	r7,4(r18)
 504a464:	1009883a 	mov	r4,r2
 504a468:	94bffe04 	addi	r18,r18,-8
 504a46c:	180b883a 	mov	r5,r3
 504a470:	504c9140 	call	504c914 <__adddf3>
 504a474:	943ff91e 	bne	r18,r16,504a45c <_gp+0xfffdf034>
 504a478:	da008d17 	ldw	r8,564(sp)
 504a47c:	d9002817 	ldw	r4,160(sp)
 504a480:	d9402917 	ldw	r5,164(sp)
 504a484:	40001a26 	beq	r8,zero,504a4f0 <__kernel_rem_pio2+0xc7c>
 504a488:	da008f17 	ldw	r8,572(sp)
 504a48c:	19a0003c 	xorhi	r6,r3,32768
 504a490:	180f883a 	mov	r7,r3
 504a494:	41800115 	stw	r6,4(r8)
 504a498:	40800015 	stw	r2,0(r8)
 504a49c:	100d883a 	mov	r6,r2
 504a4a0:	504e3240 	call	504e324 <__subdf3>
 504a4a4:	04400c0e 	bge	zero,r17,504a4d8 <__kernel_rem_pio2+0xc64>
 504a4a8:	dc002a04 	addi	r16,sp,168
 504a4ac:	04800044 	movi	r18,1
 504a4b0:	81800017 	ldw	r6,0(r16)
 504a4b4:	81c00117 	ldw	r7,4(r16)
 504a4b8:	1009883a 	mov	r4,r2
 504a4bc:	180b883a 	mov	r5,r3
 504a4c0:	94800044 	addi	r18,r18,1
 504a4c4:	504c9140 	call	504c914 <__adddf3>
 504a4c8:	84000204 	addi	r16,r16,8
 504a4cc:	8cbff80e 	bge	r17,r18,504a4b0 <_gp+0xfffdf088>
 504a4d0:	da008d17 	ldw	r8,564(sp)
 504a4d4:	40004226 	beq	r8,zero,504a5e0 <__kernel_rem_pio2+0xd6c>
 504a4d8:	da008f17 	ldw	r8,572(sp)
 504a4dc:	1009883a 	mov	r4,r2
 504a4e0:	18a0003c 	xorhi	r2,r3,32768
 504a4e4:	41000215 	stw	r4,8(r8)
 504a4e8:	40800315 	stw	r2,12(r8)
 504a4ec:	003f0c06 	br	504a120 <_gp+0xfffdecf8>
 504a4f0:	da008f17 	ldw	r8,572(sp)
 504a4f4:	100d883a 	mov	r6,r2
 504a4f8:	180f883a 	mov	r7,r3
 504a4fc:	40800015 	stw	r2,0(r8)
 504a500:	40c00115 	stw	r3,4(r8)
 504a504:	504e3240 	call	504e324 <__subdf3>
 504a508:	047fe716 	blt	zero,r17,504a4a8 <_gp+0xfffdf080>
 504a50c:	da008f17 	ldw	r8,572(sp)
 504a510:	1009883a 	mov	r4,r2
 504a514:	1805883a 	mov	r2,r3
 504a518:	41000215 	stw	r4,8(r8)
 504a51c:	40800315 	stw	r2,12(r8)
 504a520:	003eff06 	br	504a120 <_gp+0xfffdecf8>
 504a524:	da008f17 	ldw	r8,572(sp)
 504a528:	d9802817 	ldw	r6,160(sp)
 504a52c:	d9402a17 	ldw	r5,168(sp)
 504a530:	d9002b17 	ldw	r4,172(sp)
 504a534:	41800015 	stw	r6,0(r8)
 504a538:	d9802917 	ldw	r6,164(sp)
 504a53c:	41400215 	stw	r5,8(r8)
 504a540:	41000315 	stw	r4,12(r8)
 504a544:	41800115 	stw	r6,4(r8)
 504a548:	40800415 	stw	r2,16(r8)
 504a54c:	40c00515 	stw	r3,20(r8)
 504a550:	003ef306 	br	504a120 <_gp+0xfffdecf8>
 504a554:	da00a617 	ldw	r8,664(sp)
 504a558:	008000c4 	movi	r2,3
 504a55c:	40bef01e 	bne	r8,r2,504a120 <_gp+0xfffdecf8>
 504a560:	0005883a 	mov	r2,zero
 504a564:	0007883a 	mov	r3,zero
 504a568:	003fa506 	br	504a400 <_gp+0xfffdefd8>
 504a56c:	9485883a 	add	r2,r18,r18
 504a570:	1085883a 	add	r2,r2,r2
 504a574:	d8a1883a 	add	r16,sp,r2
 504a578:	880b883a 	mov	r5,r17
 504a57c:	a809883a 	mov	r4,r21
 504a580:	84007804 	addi	r16,r16,480
 504a584:	504ec200 	call	504ec20 <__fixdfsi>
 504a588:	80800015 	stw	r2,0(r16)
 504a58c:	9023883a 	mov	r17,r18
 504a590:	003e7e06 	br	5049f8c <_gp+0xfffdeb64>
 504a594:	a80d883a 	mov	r6,r21
 504a598:	400f883a 	mov	r7,r8
 504a59c:	0009883a 	mov	r4,zero
 504a5a0:	014ffc34 	movhi	r5,16368
 504a5a4:	504e3240 	call	504e324 <__subdf3>
 504a5a8:	102b883a 	mov	r21,r2
 504a5ac:	1811883a 	mov	r8,r3
 504a5b0:	04c00084 	movi	r19,2
 504a5b4:	003dc006 	br	5049cb8 <_gp+0xfffde890>
 504a5b8:	da00a617 	ldw	r8,664(sp)
 504a5bc:	00800084 	movi	r2,2
 504a5c0:	123fe416 	blt	r2,r8,504a554 <_gp+0xfffdf12c>
 504a5c4:	02000c16 	blt	zero,r8,504a5f8 <__kernel_rem_pio2+0xd84>
 504a5c8:	403ed51e 	bne	r8,zero,504a120 <_gp+0xfffdecf8>
 504a5cc:	0005883a 	mov	r2,zero
 504a5d0:	0007883a 	mov	r3,zero
 504a5d4:	003ecc06 	br	504a108 <_gp+0xfffdece0>
 504a5d8:	d8009215 	stw	zero,584(sp)
 504a5dc:	003cc306 	br	50498ec <_gp+0xfffde4c4>
 504a5e0:	da008f17 	ldw	r8,572(sp)
 504a5e4:	1009883a 	mov	r4,r2
 504a5e8:	1805883a 	mov	r2,r3
 504a5ec:	41000215 	stw	r4,8(r8)
 504a5f0:	40800315 	stw	r2,12(r8)
 504a5f4:	003eca06 	br	504a120 <_gp+0xfffdecf8>
 504a5f8:	0005883a 	mov	r2,zero
 504a5fc:	0007883a 	mov	r3,zero
 504a600:	003f9d06 	br	504a478 <_gp+0xfffdf050>

0504a604 <__kernel_sin>:
 504a604:	00a00034 	movhi	r2,32768
 504a608:	defff404 	addi	sp,sp,-48
 504a60c:	10bfffc4 	addi	r2,r2,-1
 504a610:	00cf9034 	movhi	r3,15936
 504a614:	ddc00915 	stw	r23,36(sp)
 504a618:	dd800815 	stw	r22,32(sp)
 504a61c:	dc400315 	stw	r17,12(sp)
 504a620:	dc000215 	stw	r16,8(sp)
 504a624:	dfc00b15 	stw	ra,44(sp)
 504a628:	df000a15 	stw	fp,40(sp)
 504a62c:	dd400715 	stw	r21,28(sp)
 504a630:	dd000615 	stw	r20,24(sp)
 504a634:	dcc00515 	stw	r19,20(sp)
 504a638:	dc800415 	stw	r18,16(sp)
 504a63c:	2884703a 	and	r2,r5,r2
 504a640:	18ffffc4 	addi	r3,r3,-1
 504a644:	2821883a 	mov	r16,r5
 504a648:	2023883a 	mov	r17,r4
 504a64c:	302f883a 	mov	r23,r6
 504a650:	382d883a 	mov	r22,r7
 504a654:	18800216 	blt	r3,r2,504a660 <__kernel_sin+0x5c>
 504a658:	504ec200 	call	504ec20 <__fixdfsi>
 504a65c:	10009926 	beq	r2,zero,504a8c4 <__kernel_sin+0x2c0>
 504a660:	880d883a 	mov	r6,r17
 504a664:	800f883a 	mov	r7,r16
 504a668:	8809883a 	mov	r4,r17
 504a66c:	800b883a 	mov	r5,r16
 504a670:	504dc0c0 	call	504dc0c <__muldf3>
 504a674:	100d883a 	mov	r6,r2
 504a678:	180f883a 	mov	r7,r3
 504a67c:	8809883a 	mov	r4,r17
 504a680:	800b883a 	mov	r5,r16
 504a684:	1027883a 	mov	r19,r2
 504a688:	1825883a 	mov	r18,r3
 504a68c:	504dc0c0 	call	504dc0c <__muldf3>
 504a690:	0196b434 	movhi	r6,23248
 504a694:	01cf79b4 	movhi	r7,15846
 504a698:	31b55f04 	addi	r6,r6,-10884
 504a69c:	39f64e84 	addi	r7,r7,-9926
 504a6a0:	9809883a 	mov	r4,r19
 504a6a4:	900b883a 	mov	r5,r18
 504a6a8:	102b883a 	mov	r21,r2
 504a6ac:	1829883a 	mov	r20,r3
 504a6b0:	504dc0c0 	call	504dc0c <__muldf3>
 504a6b4:	01a28b34 	movhi	r6,35372
 504a6b8:	01cf96f4 	movhi	r7,15963
 504a6bc:	31a73ac4 	addi	r6,r6,-25365
 504a6c0:	39f97984 	addi	r7,r7,-6682
 504a6c4:	1009883a 	mov	r4,r2
 504a6c8:	180b883a 	mov	r5,r3
 504a6cc:	504e3240 	call	504e324 <__subdf3>
 504a6d0:	980d883a 	mov	r6,r19
 504a6d4:	900f883a 	mov	r7,r18
 504a6d8:	1009883a 	mov	r4,r2
 504a6dc:	180b883a 	mov	r5,r3
 504a6e0:	504dc0c0 	call	504dc0c <__muldf3>
 504a6e4:	0195ecb4 	movhi	r6,22450
 504a6e8:	01cfb1f4 	movhi	r7,16071
 504a6ec:	31bf9f44 	addi	r6,r6,-387
 504a6f0:	39c778c4 	addi	r7,r7,7651
 504a6f4:	1009883a 	mov	r4,r2
 504a6f8:	180b883a 	mov	r5,r3
 504a6fc:	504c9140 	call	504c914 <__adddf3>
 504a700:	980d883a 	mov	r6,r19
 504a704:	900f883a 	mov	r7,r18
 504a708:	1009883a 	mov	r4,r2
 504a70c:	180b883a 	mov	r5,r3
 504a710:	504dc0c0 	call	504dc0c <__muldf3>
 504a714:	01867074 	movhi	r6,6593
 504a718:	01cfcab4 	movhi	r7,16170
 504a71c:	31987544 	addi	r6,r6,25045
 504a720:	39c06804 	addi	r7,r7,416
 504a724:	1009883a 	mov	r4,r2
 504a728:	180b883a 	mov	r5,r3
 504a72c:	504e3240 	call	504e324 <__subdf3>
 504a730:	980d883a 	mov	r6,r19
 504a734:	900f883a 	mov	r7,r18
 504a738:	1009883a 	mov	r4,r2
 504a73c:	180b883a 	mov	r5,r3
 504a740:	504dc0c0 	call	504dc0c <__muldf3>
 504a744:	01844474 	movhi	r6,4369
 504a748:	01cfe074 	movhi	r7,16257
 504a74c:	31be2984 	addi	r6,r6,-1882
 504a750:	39c44444 	addi	r7,r7,4369
 504a754:	1009883a 	mov	r4,r2
 504a758:	180b883a 	mov	r5,r3
 504a75c:	504c9140 	call	504c914 <__adddf3>
 504a760:	1011883a 	mov	r8,r2
 504a764:	d8800c17 	ldw	r2,48(sp)
 504a768:	1839883a 	mov	fp,r3
 504a76c:	10003e26 	beq	r2,zero,504a868 <__kernel_sin+0x264>
 504a770:	000d883a 	mov	r6,zero
 504a774:	01cff834 	movhi	r7,16352
 504a778:	b809883a 	mov	r4,r23
 504a77c:	b00b883a 	mov	r5,r22
 504a780:	da000015 	stw	r8,0(sp)
 504a784:	504dc0c0 	call	504dc0c <__muldf3>
 504a788:	da000017 	ldw	r8,0(sp)
 504a78c:	e00f883a 	mov	r7,fp
 504a790:	a809883a 	mov	r4,r21
 504a794:	400d883a 	mov	r6,r8
 504a798:	a00b883a 	mov	r5,r20
 504a79c:	d8c00115 	stw	r3,4(sp)
 504a7a0:	d8800015 	stw	r2,0(sp)
 504a7a4:	504dc0c0 	call	504dc0c <__muldf3>
 504a7a8:	da800017 	ldw	r10,0(sp)
 504a7ac:	da400117 	ldw	r9,4(sp)
 504a7b0:	100d883a 	mov	r6,r2
 504a7b4:	5009883a 	mov	r4,r10
 504a7b8:	480b883a 	mov	r5,r9
 504a7bc:	180f883a 	mov	r7,r3
 504a7c0:	504e3240 	call	504e324 <__subdf3>
 504a7c4:	980d883a 	mov	r6,r19
 504a7c8:	900f883a 	mov	r7,r18
 504a7cc:	1009883a 	mov	r4,r2
 504a7d0:	180b883a 	mov	r5,r3
 504a7d4:	504dc0c0 	call	504dc0c <__muldf3>
 504a7d8:	b80d883a 	mov	r6,r23
 504a7dc:	b00f883a 	mov	r7,r22
 504a7e0:	1009883a 	mov	r4,r2
 504a7e4:	180b883a 	mov	r5,r3
 504a7e8:	504e3240 	call	504e324 <__subdf3>
 504a7ec:	01955574 	movhi	r6,21845
 504a7f0:	01cff174 	movhi	r7,16325
 504a7f4:	31955244 	addi	r6,r6,21833
 504a7f8:	39d55544 	addi	r7,r7,21845
 504a7fc:	a809883a 	mov	r4,r21
 504a800:	a00b883a 	mov	r5,r20
 504a804:	1027883a 	mov	r19,r2
 504a808:	1825883a 	mov	r18,r3
 504a80c:	504dc0c0 	call	504dc0c <__muldf3>
 504a810:	100d883a 	mov	r6,r2
 504a814:	180f883a 	mov	r7,r3
 504a818:	9809883a 	mov	r4,r19
 504a81c:	900b883a 	mov	r5,r18
 504a820:	504c9140 	call	504c914 <__adddf3>
 504a824:	100d883a 	mov	r6,r2
 504a828:	180f883a 	mov	r7,r3
 504a82c:	8809883a 	mov	r4,r17
 504a830:	800b883a 	mov	r5,r16
 504a834:	504e3240 	call	504e324 <__subdf3>
 504a838:	dfc00b17 	ldw	ra,44(sp)
 504a83c:	df000a17 	ldw	fp,40(sp)
 504a840:	ddc00917 	ldw	r23,36(sp)
 504a844:	dd800817 	ldw	r22,32(sp)
 504a848:	dd400717 	ldw	r21,28(sp)
 504a84c:	dd000617 	ldw	r20,24(sp)
 504a850:	dcc00517 	ldw	r19,20(sp)
 504a854:	dc800417 	ldw	r18,16(sp)
 504a858:	dc400317 	ldw	r17,12(sp)
 504a85c:	dc000217 	ldw	r16,8(sp)
 504a860:	dec00c04 	addi	sp,sp,48
 504a864:	f800283a 	ret
 504a868:	400d883a 	mov	r6,r8
 504a86c:	9809883a 	mov	r4,r19
 504a870:	900b883a 	mov	r5,r18
 504a874:	180f883a 	mov	r7,r3
 504a878:	504dc0c0 	call	504dc0c <__muldf3>
 504a87c:	01955574 	movhi	r6,21845
 504a880:	01cff174 	movhi	r7,16325
 504a884:	31955244 	addi	r6,r6,21833
 504a888:	39d55544 	addi	r7,r7,21845
 504a88c:	1009883a 	mov	r4,r2
 504a890:	180b883a 	mov	r5,r3
 504a894:	504e3240 	call	504e324 <__subdf3>
 504a898:	a80d883a 	mov	r6,r21
 504a89c:	a00f883a 	mov	r7,r20
 504a8a0:	1009883a 	mov	r4,r2
 504a8a4:	180b883a 	mov	r5,r3
 504a8a8:	504dc0c0 	call	504dc0c <__muldf3>
 504a8ac:	880d883a 	mov	r6,r17
 504a8b0:	800f883a 	mov	r7,r16
 504a8b4:	1009883a 	mov	r4,r2
 504a8b8:	180b883a 	mov	r5,r3
 504a8bc:	504c9140 	call	504c914 <__adddf3>
 504a8c0:	003fdd06 	br	504a838 <_gp+0xfffdf410>
 504a8c4:	8805883a 	mov	r2,r17
 504a8c8:	8007883a 	mov	r3,r16
 504a8cc:	003fda06 	br	504a838 <_gp+0xfffdf410>

0504a8d0 <__kernel_tan>:
 504a8d0:	02200034 	movhi	r8,32768
 504a8d4:	defff104 	addi	sp,sp,-60
 504a8d8:	423fffc4 	addi	r8,r8,-1
 504a8dc:	008f8c34 	movhi	r2,15920
 504a8e0:	dd800b15 	stw	r22,44(sp)
 504a8e4:	dd400a15 	stw	r21,40(sp)
 504a8e8:	dd000915 	stw	r20,36(sp)
 504a8ec:	dcc00815 	stw	r19,32(sp)
 504a8f0:	dc800715 	stw	r18,28(sp)
 504a8f4:	dfc00e15 	stw	ra,56(sp)
 504a8f8:	df000d15 	stw	fp,52(sp)
 504a8fc:	ddc00c15 	stw	r23,48(sp)
 504a900:	dc400615 	stw	r17,24(sp)
 504a904:	dc000515 	stw	r16,20(sp)
 504a908:	2a2c703a 	and	r22,r5,r8
 504a90c:	d9400215 	stw	r5,8(sp)
 504a910:	10bfffc4 	addi	r2,r2,-1
 504a914:	2825883a 	mov	r18,r5
 504a918:	2027883a 	mov	r19,r4
 504a91c:	302b883a 	mov	r21,r6
 504a920:	3829883a 	mov	r20,r7
 504a924:	15801016 	blt	r2,r22,504a968 <__kernel_tan+0x98>
 504a928:	504ec200 	call	504ec20 <__fixdfsi>
 504a92c:	10002b1e 	bne	r2,zero,504a9dc <__kernel_tan+0x10c>
 504a930:	d8c00f17 	ldw	r3,60(sp)
 504a934:	b4d0b03a 	or	r8,r22,r19
 504a938:	18800044 	addi	r2,r3,1
 504a93c:	4090b03a 	or	r8,r8,r2
 504a940:	40016c26 	beq	r8,zero,504aef4 <__kernel_tan+0x624>
 504a944:	d8c00f17 	ldw	r3,60(sp)
 504a948:	00800044 	movi	r2,1
 504a94c:	18817826 	beq	r3,r2,504af30 <__kernel_tan+0x660>
 504a950:	980d883a 	mov	r6,r19
 504a954:	900f883a 	mov	r7,r18
 504a958:	0009883a 	mov	r4,zero
 504a95c:	016ffc34 	movhi	r5,49136
 504a960:	504d1c00 	call	504d1c0 <__divdf3>
 504a964:	00011e06 	br	504ade0 <__kernel_tan+0x510>
 504a968:	008ff9b4 	movhi	r2,16358
 504a96c:	10a509c4 	addi	r2,r2,-27609
 504a970:	15801a0e 	bge	r2,r22,504a9dc <__kernel_tan+0x10c>
 504a974:	28016816 	blt	r5,zero,504af18 <__kernel_tan+0x648>
 504a978:	01151134 	movhi	r4,21572
 504a97c:	014ffa74 	movhi	r5,16361
 504a980:	980d883a 	mov	r6,r19
 504a984:	900f883a 	mov	r7,r18
 504a988:	210b4604 	addi	r4,r4,11544
 504a98c:	29487ec4 	addi	r5,r5,8699
 504a990:	504e3240 	call	504e324 <__subdf3>
 504a994:	010cc534 	movhi	r4,13076
 504a998:	014f20b4 	movhi	r5,15490
 504a99c:	a80d883a 	mov	r6,r21
 504a9a0:	a00f883a 	mov	r7,r20
 504a9a4:	211701c4 	addi	r4,r4,23559
 504a9a8:	29698984 	addi	r5,r5,-23002
 504a9ac:	1023883a 	mov	r17,r2
 504a9b0:	1821883a 	mov	r16,r3
 504a9b4:	504e3240 	call	504e324 <__subdf3>
 504a9b8:	880d883a 	mov	r6,r17
 504a9bc:	800f883a 	mov	r7,r16
 504a9c0:	1009883a 	mov	r4,r2
 504a9c4:	180b883a 	mov	r5,r3
 504a9c8:	504c9140 	call	504c914 <__adddf3>
 504a9cc:	002b883a 	mov	r21,zero
 504a9d0:	0029883a 	mov	r20,zero
 504a9d4:	1027883a 	mov	r19,r2
 504a9d8:	1825883a 	mov	r18,r3
 504a9dc:	980d883a 	mov	r6,r19
 504a9e0:	900f883a 	mov	r7,r18
 504a9e4:	9809883a 	mov	r4,r19
 504a9e8:	900b883a 	mov	r5,r18
 504a9ec:	504dc0c0 	call	504dc0c <__muldf3>
 504a9f0:	100d883a 	mov	r6,r2
 504a9f4:	180f883a 	mov	r7,r3
 504a9f8:	1009883a 	mov	r4,r2
 504a9fc:	180b883a 	mov	r5,r3
 504aa00:	1039883a 	mov	fp,r2
 504aa04:	182f883a 	mov	r23,r3
 504aa08:	504dc0c0 	call	504dc0c <__muldf3>
 504aa0c:	e00d883a 	mov	r6,fp
 504aa10:	b80f883a 	mov	r7,r23
 504aa14:	9809883a 	mov	r4,r19
 504aa18:	900b883a 	mov	r5,r18
 504aa1c:	1023883a 	mov	r17,r2
 504aa20:	1821883a 	mov	r16,r3
 504aa24:	504dc0c0 	call	504dc0c <__muldf3>
 504aa28:	019d2ff4 	movhi	r6,29887
 504aa2c:	01cfbef4 	movhi	r7,16123
 504aa30:	8809883a 	mov	r4,r17
 504aa34:	800b883a 	mov	r5,r16
 504aa38:	319eb504 	addi	r6,r6,31444
 504aa3c:	39ca9c04 	addi	r7,r7,10864
 504aa40:	d8800015 	stw	r2,0(sp)
 504aa44:	d8c00115 	stw	r3,4(sp)
 504aa48:	504dc0c0 	call	504dc0c <__muldf3>
 504aa4c:	018cbc74 	movhi	r6,13041
 504aa50:	01cfc4f4 	movhi	r7,16147
 504aa54:	31a9fa44 	addi	r6,r6,-22551
 504aa58:	39ee03c4 	addi	r7,r7,-18417
 504aa5c:	1009883a 	mov	r4,r2
 504aa60:	180b883a 	mov	r5,r3
 504aa64:	504c9140 	call	504c914 <__adddf3>
 504aa68:	880d883a 	mov	r6,r17
 504aa6c:	800f883a 	mov	r7,r16
 504aa70:	1009883a 	mov	r4,r2
 504aa74:	180b883a 	mov	r5,r3
 504aa78:	504dc0c0 	call	504dc0c <__muldf3>
 504aa7c:	0186a374 	movhi	r6,6797
 504aa80:	01cfcc34 	movhi	r7,16176
 504aa84:	31841a04 	addi	r6,r6,4200
 504aa88:	39c9bdc4 	addi	r7,r7,9975
 504aa8c:	1009883a 	mov	r4,r2
 504aa90:	180b883a 	mov	r5,r3
 504aa94:	504c9140 	call	504c914 <__adddf3>
 504aa98:	880d883a 	mov	r6,r17
 504aa9c:	800f883a 	mov	r7,r16
 504aaa0:	1009883a 	mov	r4,r2
 504aaa4:	180b883a 	mov	r5,r3
 504aaa8:	504dc0c0 	call	504dc0c <__muldf3>
 504aaac:	01bfb874 	movhi	r6,65249
 504aab0:	01cfd634 	movhi	r7,16216
 504aab4:	31a0c544 	addi	r6,r6,-31979
 504aab8:	39f6f204 	addi	r7,r7,-9272
 504aabc:	1009883a 	mov	r4,r2
 504aac0:	180b883a 	mov	r5,r3
 504aac4:	504c9140 	call	504c914 <__adddf3>
 504aac8:	880d883a 	mov	r6,r17
 504aacc:	800f883a 	mov	r7,r16
 504aad0:	1009883a 	mov	r4,r2
 504aad4:	180b883a 	mov	r5,r3
 504aad8:	504dc0c0 	call	504dc0c <__muldf3>
 504aadc:	01ba5bf4 	movhi	r6,59759
 504aae0:	01cfe0b4 	movhi	r7,16258
 504aae4:	31a124c4 	addi	r6,r6,-31597
 504aae8:	39c9b8c4 	addi	r7,r7,9955
 504aaec:	1009883a 	mov	r4,r2
 504aaf0:	180b883a 	mov	r5,r3
 504aaf4:	504c9140 	call	504c914 <__adddf3>
 504aaf8:	880d883a 	mov	r6,r17
 504aafc:	800f883a 	mov	r7,r16
 504ab00:	1009883a 	mov	r4,r2
 504ab04:	180b883a 	mov	r5,r3
 504ab08:	504dc0c0 	call	504dc0c <__muldf3>
 504ab0c:	0186ecf4 	movhi	r6,7091
 504ab10:	01cfeb34 	movhi	r7,16300
 504ab14:	31907f84 	addi	r6,r6,16894
 504ab18:	39e86e84 	addi	r7,r7,-24134
 504ab1c:	1009883a 	mov	r4,r2
 504ab20:	180b883a 	mov	r5,r3
 504ab24:	504c9140 	call	504c914 <__adddf3>
 504ab28:	e00d883a 	mov	r6,fp
 504ab2c:	b80f883a 	mov	r7,r23
 504ab30:	1009883a 	mov	r4,r2
 504ab34:	180b883a 	mov	r5,r3
 504ab38:	504dc0c0 	call	504dc0c <__muldf3>
 504ab3c:	01b6d834 	movhi	r6,56160
 504ab40:	01efbcf4 	movhi	r7,48883
 504ab44:	8809883a 	mov	r4,r17
 504ab48:	800b883a 	mov	r5,r16
 504ab4c:	3194dcc4 	addi	r6,r6,21363
 504ab50:	39dd72c4 	addi	r7,r7,30155
 504ab54:	d8c00415 	stw	r3,16(sp)
 504ab58:	d8800315 	stw	r2,12(sp)
 504ab5c:	504dc0c0 	call	504dc0c <__muldf3>
 504ab60:	01a80e34 	movhi	r6,41016
 504ab64:	01cfc534 	movhi	r7,16148
 504ab68:	31a4a984 	addi	r6,r6,-27994
 504ab6c:	39dfa204 	addi	r7,r7,32392
 504ab70:	1009883a 	mov	r4,r2
 504ab74:	180b883a 	mov	r5,r3
 504ab78:	504c9140 	call	504c914 <__adddf3>
 504ab7c:	880d883a 	mov	r6,r17
 504ab80:	800f883a 	mov	r7,r16
 504ab84:	1009883a 	mov	r4,r2
 504ab88:	180b883a 	mov	r5,r3
 504ab8c:	504dc0c0 	call	504dc0c <__muldf3>
 504ab90:	01bcbcb4 	movhi	r6,62194
 504ab94:	01cfd0f4 	movhi	r7,16195
 504ab98:	31994044 	addi	r6,r6,25857
 504ab9c:	39d13604 	addi	r7,r7,17624
 504aba0:	1009883a 	mov	r4,r2
 504aba4:	180b883a 	mov	r5,r3
 504aba8:	504c9140 	call	504c914 <__adddf3>
 504abac:	880d883a 	mov	r6,r17
 504abb0:	800f883a 	mov	r7,r16
 504abb4:	1009883a 	mov	r4,r2
 504abb8:	180b883a 	mov	r5,r3
 504abbc:	504dc0c0 	call	504dc0c <__muldf3>
 504abc0:	01b255b4 	movhi	r6,51542
 504abc4:	01cfdb74 	movhi	r7,16237
 504abc8:	3180ca04 	addi	r6,r6,808
 504abcc:	39db4884 	addi	r7,r7,27938
 504abd0:	1009883a 	mov	r4,r2
 504abd4:	180b883a 	mov	r5,r3
 504abd8:	504c9140 	call	504c914 <__adddf3>
 504abdc:	880d883a 	mov	r6,r17
 504abe0:	800f883a 	mov	r7,r16
 504abe4:	1009883a 	mov	r4,r2
 504abe8:	180b883a 	mov	r5,r3
 504abec:	504dc0c0 	call	504dc0c <__muldf3>
 504abf0:	01a101f4 	movhi	r6,33799
 504abf4:	01cfe5b4 	movhi	r7,16278
 504abf8:	31b58dc4 	addi	r6,r6,-10697
 504abfc:	39d93d04 	addi	r7,r7,25844
 504ac00:	1009883a 	mov	r4,r2
 504ac04:	180b883a 	mov	r5,r3
 504ac08:	504c9140 	call	504c914 <__adddf3>
 504ac0c:	880d883a 	mov	r6,r17
 504ac10:	800f883a 	mov	r7,r16
 504ac14:	1009883a 	mov	r4,r2
 504ac18:	180b883a 	mov	r5,r3
 504ac1c:	504dc0c0 	call	504dc0c <__muldf3>
 504ac20:	01844474 	movhi	r6,4369
 504ac24:	01cff074 	movhi	r7,16321
 504ac28:	31bf9e84 	addi	r6,r6,-390
 504ac2c:	39c44444 	addi	r7,r7,4369
 504ac30:	1009883a 	mov	r4,r2
 504ac34:	180b883a 	mov	r5,r3
 504ac38:	504c9140 	call	504c914 <__adddf3>
 504ac3c:	db000317 	ldw	r12,12(sp)
 504ac40:	dac00417 	ldw	r11,16(sp)
 504ac44:	100d883a 	mov	r6,r2
 504ac48:	6009883a 	mov	r4,r12
 504ac4c:	580b883a 	mov	r5,r11
 504ac50:	180f883a 	mov	r7,r3
 504ac54:	504c9140 	call	504c914 <__adddf3>
 504ac58:	d9800017 	ldw	r6,0(sp)
 504ac5c:	d9c00117 	ldw	r7,4(sp)
 504ac60:	1009883a 	mov	r4,r2
 504ac64:	180b883a 	mov	r5,r3
 504ac68:	504dc0c0 	call	504dc0c <__muldf3>
 504ac6c:	a80d883a 	mov	r6,r21
 504ac70:	a00f883a 	mov	r7,r20
 504ac74:	1009883a 	mov	r4,r2
 504ac78:	180b883a 	mov	r5,r3
 504ac7c:	504c9140 	call	504c914 <__adddf3>
 504ac80:	e00d883a 	mov	r6,fp
 504ac84:	b80f883a 	mov	r7,r23
 504ac88:	1009883a 	mov	r4,r2
 504ac8c:	180b883a 	mov	r5,r3
 504ac90:	504dc0c0 	call	504dc0c <__muldf3>
 504ac94:	a809883a 	mov	r4,r21
 504ac98:	a00b883a 	mov	r5,r20
 504ac9c:	100d883a 	mov	r6,r2
 504aca0:	180f883a 	mov	r7,r3
 504aca4:	504c9140 	call	504c914 <__adddf3>
 504aca8:	d9000017 	ldw	r4,0(sp)
 504acac:	d9400117 	ldw	r5,4(sp)
 504acb0:	01955574 	movhi	r6,21845
 504acb4:	01cff574 	movhi	r7,16341
 504acb8:	319558c4 	addi	r6,r6,21859
 504acbc:	39d55544 	addi	r7,r7,21845
 504acc0:	1023883a 	mov	r17,r2
 504acc4:	1821883a 	mov	r16,r3
 504acc8:	504dc0c0 	call	504dc0c <__muldf3>
 504accc:	880d883a 	mov	r6,r17
 504acd0:	800f883a 	mov	r7,r16
 504acd4:	1009883a 	mov	r4,r2
 504acd8:	180b883a 	mov	r5,r3
 504acdc:	504c9140 	call	504c914 <__adddf3>
 504ace0:	100d883a 	mov	r6,r2
 504ace4:	180f883a 	mov	r7,r3
 504ace8:	9809883a 	mov	r4,r19
 504acec:	900b883a 	mov	r5,r18
 504acf0:	102b883a 	mov	r21,r2
 504acf4:	1829883a 	mov	r20,r3
 504acf8:	504c9140 	call	504c914 <__adddf3>
 504acfc:	1023883a 	mov	r17,r2
 504ad00:	008ff9b4 	movhi	r2,16358
 504ad04:	10a509c4 	addi	r2,r2,-27609
 504ad08:	1821883a 	mov	r16,r3
 504ad0c:	15804016 	blt	r2,r22,504ae10 <__kernel_tan+0x540>
 504ad10:	d8c00f17 	ldw	r3,60(sp)
 504ad14:	00800044 	movi	r2,1
 504ad18:	18808226 	beq	r3,r2,504af24 <__kernel_tan+0x654>
 504ad1c:	880d883a 	mov	r6,r17
 504ad20:	0009883a 	mov	r4,zero
 504ad24:	016ffc34 	movhi	r5,49136
 504ad28:	800f883a 	mov	r7,r16
 504ad2c:	504d1c00 	call	504d1c0 <__divdf3>
 504ad30:	980d883a 	mov	r6,r19
 504ad34:	900f883a 	mov	r7,r18
 504ad38:	0009883a 	mov	r4,zero
 504ad3c:	800b883a 	mov	r5,r16
 504ad40:	1823883a 	mov	r17,r3
 504ad44:	102d883a 	mov	r22,r2
 504ad48:	504e3240 	call	504e324 <__subdf3>
 504ad4c:	100d883a 	mov	r6,r2
 504ad50:	180f883a 	mov	r7,r3
 504ad54:	a809883a 	mov	r4,r21
 504ad58:	a00b883a 	mov	r5,r20
 504ad5c:	504e3240 	call	504e324 <__subdf3>
 504ad60:	000d883a 	mov	r6,zero
 504ad64:	880f883a 	mov	r7,r17
 504ad68:	1009883a 	mov	r4,r2
 504ad6c:	180b883a 	mov	r5,r3
 504ad70:	504dc0c0 	call	504dc0c <__muldf3>
 504ad74:	000d883a 	mov	r6,zero
 504ad78:	880f883a 	mov	r7,r17
 504ad7c:	0009883a 	mov	r4,zero
 504ad80:	800b883a 	mov	r5,r16
 504ad84:	1027883a 	mov	r19,r2
 504ad88:	1825883a 	mov	r18,r3
 504ad8c:	504dc0c0 	call	504dc0c <__muldf3>
 504ad90:	000d883a 	mov	r6,zero
 504ad94:	01cffc34 	movhi	r7,16368
 504ad98:	1009883a 	mov	r4,r2
 504ad9c:	180b883a 	mov	r5,r3
 504ada0:	504c9140 	call	504c914 <__adddf3>
 504ada4:	100d883a 	mov	r6,r2
 504ada8:	180f883a 	mov	r7,r3
 504adac:	9809883a 	mov	r4,r19
 504adb0:	900b883a 	mov	r5,r18
 504adb4:	504c9140 	call	504c914 <__adddf3>
 504adb8:	b00d883a 	mov	r6,r22
 504adbc:	880f883a 	mov	r7,r17
 504adc0:	1009883a 	mov	r4,r2
 504adc4:	180b883a 	mov	r5,r3
 504adc8:	504dc0c0 	call	504dc0c <__muldf3>
 504adcc:	000d883a 	mov	r6,zero
 504add0:	880f883a 	mov	r7,r17
 504add4:	1009883a 	mov	r4,r2
 504add8:	180b883a 	mov	r5,r3
 504addc:	504c9140 	call	504c914 <__adddf3>
 504ade0:	dfc00e17 	ldw	ra,56(sp)
 504ade4:	df000d17 	ldw	fp,52(sp)
 504ade8:	ddc00c17 	ldw	r23,48(sp)
 504adec:	dd800b17 	ldw	r22,44(sp)
 504adf0:	dd400a17 	ldw	r21,40(sp)
 504adf4:	dd000917 	ldw	r20,36(sp)
 504adf8:	dcc00817 	ldw	r19,32(sp)
 504adfc:	dc800717 	ldw	r18,28(sp)
 504ae00:	dc400617 	ldw	r17,24(sp)
 504ae04:	dc000517 	ldw	r16,20(sp)
 504ae08:	dec00f04 	addi	sp,sp,60
 504ae0c:	f800283a 	ret
 504ae10:	d9000f17 	ldw	r4,60(sp)
 504ae14:	504eca00 	call	504eca0 <__floatsidf>
 504ae18:	880d883a 	mov	r6,r17
 504ae1c:	800f883a 	mov	r7,r16
 504ae20:	8809883a 	mov	r4,r17
 504ae24:	800b883a 	mov	r5,r16
 504ae28:	1039883a 	mov	fp,r2
 504ae2c:	182f883a 	mov	r23,r3
 504ae30:	504dc0c0 	call	504dc0c <__muldf3>
 504ae34:	e00d883a 	mov	r6,fp
 504ae38:	b80f883a 	mov	r7,r23
 504ae3c:	8809883a 	mov	r4,r17
 504ae40:	800b883a 	mov	r5,r16
 504ae44:	d8c00415 	stw	r3,16(sp)
 504ae48:	d8800315 	stw	r2,12(sp)
 504ae4c:	504c9140 	call	504c914 <__adddf3>
 504ae50:	da400317 	ldw	r9,12(sp)
 504ae54:	da000417 	ldw	r8,16(sp)
 504ae58:	100d883a 	mov	r6,r2
 504ae5c:	4809883a 	mov	r4,r9
 504ae60:	400b883a 	mov	r5,r8
 504ae64:	180f883a 	mov	r7,r3
 504ae68:	504d1c00 	call	504d1c0 <__divdf3>
 504ae6c:	a80d883a 	mov	r6,r21
 504ae70:	a00f883a 	mov	r7,r20
 504ae74:	1009883a 	mov	r4,r2
 504ae78:	180b883a 	mov	r5,r3
 504ae7c:	504e3240 	call	504e324 <__subdf3>
 504ae80:	9809883a 	mov	r4,r19
 504ae84:	900b883a 	mov	r5,r18
 504ae88:	100d883a 	mov	r6,r2
 504ae8c:	180f883a 	mov	r7,r3
 504ae90:	504e3240 	call	504e324 <__subdf3>
 504ae94:	100d883a 	mov	r6,r2
 504ae98:	180f883a 	mov	r7,r3
 504ae9c:	1009883a 	mov	r4,r2
 504aea0:	180b883a 	mov	r5,r3
 504aea4:	504c9140 	call	504c914 <__adddf3>
 504aea8:	b80b883a 	mov	r5,r23
 504aeac:	100d883a 	mov	r6,r2
 504aeb0:	180f883a 	mov	r7,r3
 504aeb4:	e009883a 	mov	r4,fp
 504aeb8:	504e3240 	call	504e324 <__subdf3>
 504aebc:	1023883a 	mov	r17,r2
 504aec0:	d8800217 	ldw	r2,8(sp)
 504aec4:	01000044 	movi	r4,1
 504aec8:	1821883a 	mov	r16,r3
 504aecc:	102dd7ba 	srai	r22,r2,30
 504aed0:	b580008c 	andi	r22,r22,2
 504aed4:	2589c83a 	sub	r4,r4,r22
 504aed8:	504eca00 	call	504eca0 <__floatsidf>
 504aedc:	100d883a 	mov	r6,r2
 504aee0:	180f883a 	mov	r7,r3
 504aee4:	8809883a 	mov	r4,r17
 504aee8:	800b883a 	mov	r5,r16
 504aeec:	504dc0c0 	call	504dc0c <__muldf3>
 504aef0:	003fbb06 	br	504ade0 <_gp+0xfffdf9b8>
 504aef4:	9809883a 	mov	r4,r19
 504aef8:	900b883a 	mov	r5,r18
 504aefc:	504af3c0 	call	504af3c <fabs>
 504af00:	100d883a 	mov	r6,r2
 504af04:	180f883a 	mov	r7,r3
 504af08:	0009883a 	mov	r4,zero
 504af0c:	014ffc34 	movhi	r5,16368
 504af10:	504d1c00 	call	504d1c0 <__divdf3>
 504af14:	003fb206 	br	504ade0 <_gp+0xfffdf9b8>
 504af18:	2ca0003c 	xorhi	r18,r5,32768
 504af1c:	3d20003c 	xorhi	r20,r7,32768
 504af20:	003e9506 	br	504a978 <_gp+0xfffdf550>
 504af24:	8805883a 	mov	r2,r17
 504af28:	8007883a 	mov	r3,r16
 504af2c:	003fac06 	br	504ade0 <_gp+0xfffdf9b8>
 504af30:	9805883a 	mov	r2,r19
 504af34:	9007883a 	mov	r3,r18
 504af38:	003fa906 	br	504ade0 <_gp+0xfffdf9b8>

0504af3c <fabs>:
 504af3c:	00e00034 	movhi	r3,32768
 504af40:	18ffffc4 	addi	r3,r3,-1
 504af44:	2005883a 	mov	r2,r4
 504af48:	28c6703a 	and	r3,r5,r3
 504af4c:	f800283a 	ret

0504af50 <floor>:
 504af50:	2811d53a 	srai	r8,r5,20
 504af54:	defffa04 	addi	sp,sp,-24
 504af58:	dcc00315 	stw	r19,12(sp)
 504af5c:	4201ffcc 	andi	r8,r8,2047
 504af60:	dc800215 	stw	r18,8(sp)
 504af64:	dc400115 	stw	r17,4(sp)
 504af68:	dc000015 	stw	r16,0(sp)
 504af6c:	dfc00515 	stw	ra,20(sp)
 504af70:	dd000415 	stw	r20,16(sp)
 504af74:	44bf0044 	addi	r18,r8,-1023
 504af78:	018004c4 	movi	r6,19
 504af7c:	2821883a 	mov	r16,r5
 504af80:	2005883a 	mov	r2,r4
 504af84:	280f883a 	mov	r7,r5
 504af88:	2827883a 	mov	r19,r5
 504af8c:	2023883a 	mov	r17,r4
 504af90:	34801916 	blt	r6,r18,504aff8 <floor+0xa8>
 504af94:	90003c16 	blt	r18,zero,504b088 <floor+0x138>
 504af98:	05000434 	movhi	r20,16
 504af9c:	a53fffc4 	addi	r20,r20,-1
 504afa0:	a4a9d83a 	sra	r20,r20,r18
 504afa4:	2d0c703a 	and	r6,r5,r20
 504afa8:	310cb03a 	or	r6,r6,r4
 504afac:	30001626 	beq	r6,zero,504b008 <floor+0xb8>
 504afb0:	01a20034 	movhi	r6,34816
 504afb4:	01df8e34 	movhi	r7,32312
 504afb8:	319d6704 	addi	r6,r6,30108
 504afbc:	39f90f04 	addi	r7,r7,-7108
 504afc0:	504c9140 	call	504c914 <__adddf3>
 504afc4:	000d883a 	mov	r6,zero
 504afc8:	000f883a 	mov	r7,zero
 504afcc:	1009883a 	mov	r4,r2
 504afd0:	180b883a 	mov	r5,r3
 504afd4:	504db300 	call	504db30 <__gedf2>
 504afd8:	0080040e 	bge	zero,r2,504afec <floor+0x9c>
 504afdc:	80003c16 	blt	r16,zero,504b0d0 <floor+0x180>
 504afe0:	0520303a 	nor	r16,zero,r20
 504afe4:	84e0703a 	and	r16,r16,r19
 504afe8:	0023883a 	mov	r17,zero
 504afec:	8805883a 	mov	r2,r17
 504aff0:	8007883a 	mov	r3,r16
 504aff4:	00000506 	br	504b00c <floor+0xbc>
 504aff8:	01800cc4 	movi	r6,51
 504affc:	34800b0e 	bge	r6,r18,504b02c <floor+0xdc>
 504b000:	01810004 	movi	r6,1024
 504b004:	91802f26 	beq	r18,r6,504b0c4 <floor+0x174>
 504b008:	3807883a 	mov	r3,r7
 504b00c:	dfc00517 	ldw	ra,20(sp)
 504b010:	dd000417 	ldw	r20,16(sp)
 504b014:	dcc00317 	ldw	r19,12(sp)
 504b018:	dc800217 	ldw	r18,8(sp)
 504b01c:	dc400117 	ldw	r17,4(sp)
 504b020:	dc000017 	ldw	r16,0(sp)
 504b024:	dec00604 	addi	sp,sp,24
 504b028:	f800283a 	ret
 504b02c:	423efb44 	addi	r8,r8,-1043
 504b030:	053fffc4 	movi	r20,-1
 504b034:	a228d83a 	srl	r20,r20,r8
 504b038:	250c703a 	and	r6,r4,r20
 504b03c:	303ff226 	beq	r6,zero,504b008 <_gp+0xfffdfbe0>
 504b040:	01a20034 	movhi	r6,34816
 504b044:	01df8e34 	movhi	r7,32312
 504b048:	319d6704 	addi	r6,r6,30108
 504b04c:	39f90f04 	addi	r7,r7,-7108
 504b050:	504c9140 	call	504c914 <__adddf3>
 504b054:	000d883a 	mov	r6,zero
 504b058:	000f883a 	mov	r7,zero
 504b05c:	1009883a 	mov	r4,r2
 504b060:	180b883a 	mov	r5,r3
 504b064:	504db300 	call	504db30 <__gedf2>
 504b068:	00bfe00e 	bge	zero,r2,504afec <_gp+0xfffdfbc4>
 504b06c:	80001c16 	blt	r16,zero,504b0e0 <floor+0x190>
 504b070:	0510303a 	nor	r8,zero,r20
 504b074:	9821883a 	mov	r16,r19
 504b078:	8a22703a 	and	r17,r17,r8
 504b07c:	8805883a 	mov	r2,r17
 504b080:	8007883a 	mov	r3,r16
 504b084:	003fe106 	br	504b00c <_gp+0xfffdfbe4>
 504b088:	01a20034 	movhi	r6,34816
 504b08c:	01df8e34 	movhi	r7,32312
 504b090:	319d6704 	addi	r6,r6,30108
 504b094:	39f90f04 	addi	r7,r7,-7108
 504b098:	504c9140 	call	504c914 <__adddf3>
 504b09c:	000d883a 	mov	r6,zero
 504b0a0:	000f883a 	mov	r7,zero
 504b0a4:	1009883a 	mov	r4,r2
 504b0a8:	180b883a 	mov	r5,r3
 504b0ac:	504db300 	call	504db30 <__gedf2>
 504b0b0:	00bfce0e 	bge	zero,r2,504afec <_gp+0xfffdfbc4>
 504b0b4:	80001516 	blt	r16,zero,504b10c <floor+0x1bc>
 504b0b8:	0023883a 	mov	r17,zero
 504b0bc:	0021883a 	mov	r16,zero
 504b0c0:	003fca06 	br	504afec <_gp+0xfffdfbc4>
 504b0c4:	200d883a 	mov	r6,r4
 504b0c8:	504c9140 	call	504c914 <__adddf3>
 504b0cc:	003fcf06 	br	504b00c <_gp+0xfffdfbe4>
 504b0d0:	00800434 	movhi	r2,16
 504b0d4:	14a5d83a 	sra	r18,r2,r18
 504b0d8:	84a7883a 	add	r19,r16,r18
 504b0dc:	003fc006 	br	504afe0 <_gp+0xfffdfbb8>
 504b0e0:	00800504 	movi	r2,20
 504b0e4:	90801326 	beq	r18,r2,504b134 <floor+0x1e4>
 504b0e8:	00800d04 	movi	r2,52
 504b0ec:	14a5c83a 	sub	r18,r2,r18
 504b0f0:	00800044 	movi	r2,1
 504b0f4:	1484983a 	sll	r2,r2,r18
 504b0f8:	1445883a 	add	r2,r2,r17
 504b0fc:	14400b2e 	bgeu	r2,r17,504b12c <floor+0x1dc>
 504b100:	84c00044 	addi	r19,r16,1
 504b104:	1023883a 	mov	r17,r2
 504b108:	003fd906 	br	504b070 <_gp+0xfffdfc48>
 504b10c:	00a00034 	movhi	r2,32768
 504b110:	10bfffc4 	addi	r2,r2,-1
 504b114:	8084703a 	and	r2,r16,r2
 504b118:	1462b03a 	or	r17,r2,r17
 504b11c:	883fb326 	beq	r17,zero,504afec <_gp+0xfffdfbc4>
 504b120:	0023883a 	mov	r17,zero
 504b124:	042ffc34 	movhi	r16,49136
 504b128:	003fb006 	br	504afec <_gp+0xfffdfbc4>
 504b12c:	1023883a 	mov	r17,r2
 504b130:	003fcf06 	br	504b070 <_gp+0xfffdfc48>
 504b134:	84c00044 	addi	r19,r16,1
 504b138:	003fcd06 	br	504b070 <_gp+0xfffdfc48>

0504b13c <scalbn>:
 504b13c:	2a1ffc2c 	andhi	r8,r5,32752
 504b140:	4011d53a 	srai	r8,r8,20
 504b144:	defffe04 	addi	sp,sp,-8
 504b148:	dc000015 	stw	r16,0(sp)
 504b14c:	dfc00115 	stw	ra,4(sp)
 504b150:	280f883a 	mov	r7,r5
 504b154:	2015883a 	mov	r10,r4
 504b158:	3021883a 	mov	r16,r6
 504b15c:	40001e1e 	bne	r8,zero,504b1d8 <scalbn+0x9c>
 504b160:	00a00034 	movhi	r2,32768
 504b164:	10bfffc4 	addi	r2,r2,-1
 504b168:	2884703a 	and	r2,r5,r2
 504b16c:	1104b03a 	or	r2,r2,r4
 504b170:	10002226 	beq	r2,zero,504b1fc <scalbn+0xc0>
 504b174:	01d0d434 	movhi	r7,17232
 504b178:	000d883a 	mov	r6,zero
 504b17c:	504dc0c0 	call	504dc0c <__muldf3>
 504b180:	013ffff4 	movhi	r4,65535
 504b184:	210f2c04 	addi	r4,r4,15536
 504b188:	1015883a 	mov	r10,r2
 504b18c:	180f883a 	mov	r7,r3
 504b190:	81002a16 	blt	r16,r4,504b23c <scalbn+0x100>
 504b194:	191ffc2c 	andhi	r4,r3,32752
 504b198:	2009d53a 	srai	r4,r4,20
 504b19c:	223ff284 	addi	r8,r4,-54
 504b1a0:	8211883a 	add	r8,r16,r8
 504b1a4:	0081ff84 	movi	r2,2046
 504b1a8:	12002f16 	blt	r2,r8,504b268 <scalbn+0x12c>
 504b1ac:	0200190e 	bge	zero,r8,504b214 <scalbn+0xd8>
 504b1b0:	4010953a 	slli	r8,r8,20
 504b1b4:	01600434 	movhi	r5,32784
 504b1b8:	297fffc4 	addi	r5,r5,-1
 504b1bc:	194e703a 	and	r7,r3,r5
 504b1c0:	5005883a 	mov	r2,r10
 504b1c4:	3a06b03a 	or	r3,r7,r8
 504b1c8:	dfc00117 	ldw	ra,4(sp)
 504b1cc:	dc000017 	ldw	r16,0(sp)
 504b1d0:	dec00204 	addi	sp,sp,8
 504b1d4:	f800283a 	ret
 504b1d8:	0081ffc4 	movi	r2,2047
 504b1dc:	2807883a 	mov	r3,r5
 504b1e0:	40bfef1e 	bne	r8,r2,504b1a0 <_gp+0xfffdfd78>
 504b1e4:	200d883a 	mov	r6,r4
 504b1e8:	504c9140 	call	504c914 <__adddf3>
 504b1ec:	dfc00117 	ldw	ra,4(sp)
 504b1f0:	dc000017 	ldw	r16,0(sp)
 504b1f4:	dec00204 	addi	sp,sp,8
 504b1f8:	f800283a 	ret
 504b1fc:	2005883a 	mov	r2,r4
 504b200:	2807883a 	mov	r3,r5
 504b204:	dfc00117 	ldw	ra,4(sp)
 504b208:	dc000017 	ldw	r16,0(sp)
 504b20c:	dec00204 	addi	sp,sp,8
 504b210:	f800283a 	ret
 504b214:	00bff2c4 	movi	r2,-53
 504b218:	4080240e 	bge	r8,r2,504b2ac <scalbn+0x170>
 504b21c:	00b0d414 	movui	r2,50000
 504b220:	14001116 	blt	r2,r16,504b268 <scalbn+0x12c>
 504b224:	0130be74 	movhi	r4,49913
 504b228:	01406974 	movhi	r5,421
 504b22c:	213cd644 	addi	r4,r4,-3239
 504b230:	295b87c4 	addi	r5,r5,28191
 504b234:	500d883a 	mov	r6,r10
 504b238:	504b2d80 	call	504b2d8 <copysign>
 504b23c:	01b0be74 	movhi	r6,49913
 504b240:	01c06974 	movhi	r7,421
 504b244:	31bcd644 	addi	r6,r6,-3239
 504b248:	39db87c4 	addi	r7,r7,28191
 504b24c:	1009883a 	mov	r4,r2
 504b250:	180b883a 	mov	r5,r3
 504b254:	504dc0c0 	call	504dc0c <__muldf3>
 504b258:	dfc00117 	ldw	ra,4(sp)
 504b25c:	dc000017 	ldw	r16,0(sp)
 504b260:	dec00204 	addi	sp,sp,8
 504b264:	f800283a 	ret
 504b268:	01220034 	movhi	r4,34816
 504b26c:	015f8e34 	movhi	r5,32312
 504b270:	500d883a 	mov	r6,r10
 504b274:	211d6704 	addi	r4,r4,30108
 504b278:	29790f04 	addi	r5,r5,-7108
 504b27c:	504b2d80 	call	504b2d8 <copysign>
 504b280:	01a20034 	movhi	r6,34816
 504b284:	01df8e34 	movhi	r7,32312
 504b288:	319d6704 	addi	r6,r6,30108
 504b28c:	39f90f04 	addi	r7,r7,-7108
 504b290:	1009883a 	mov	r4,r2
 504b294:	180b883a 	mov	r5,r3
 504b298:	504dc0c0 	call	504dc0c <__muldf3>
 504b29c:	dfc00117 	ldw	ra,4(sp)
 504b2a0:	dc000017 	ldw	r16,0(sp)
 504b2a4:	dec00204 	addi	sp,sp,8
 504b2a8:	f800283a 	ret
 504b2ac:	42000d84 	addi	r8,r8,54
 504b2b0:	4012953a 	slli	r9,r8,20
 504b2b4:	01e00434 	movhi	r7,32784
 504b2b8:	39ffffc4 	addi	r7,r7,-1
 504b2bc:	19ca703a 	and	r5,r3,r7
 504b2c0:	000d883a 	mov	r6,zero
 504b2c4:	01cf2434 	movhi	r7,15504
 504b2c8:	5009883a 	mov	r4,r10
 504b2cc:	494ab03a 	or	r5,r9,r5
 504b2d0:	504dc0c0 	call	504dc0c <__muldf3>
 504b2d4:	003fbc06 	br	504b1c8 <_gp+0xfffdfda0>

0504b2d8 <copysign>:
 504b2d8:	2005883a 	mov	r2,r4
 504b2dc:	01200034 	movhi	r4,32768
 504b2e0:	213fffc4 	addi	r4,r4,-1
 504b2e4:	38e0002c 	andhi	r3,r7,32768
 504b2e8:	290a703a 	and	r5,r5,r4
 504b2ec:	28c6b03a 	or	r3,r5,r3
 504b2f0:	f800283a 	ret

0504b2f4 <__divsi3>:
 504b2f4:	20001b16 	blt	r4,zero,504b364 <__divsi3+0x70>
 504b2f8:	000f883a 	mov	r7,zero
 504b2fc:	28001616 	blt	r5,zero,504b358 <__divsi3+0x64>
 504b300:	200d883a 	mov	r6,r4
 504b304:	29001a2e 	bgeu	r5,r4,504b370 <__divsi3+0x7c>
 504b308:	00800804 	movi	r2,32
 504b30c:	00c00044 	movi	r3,1
 504b310:	00000106 	br	504b318 <__divsi3+0x24>
 504b314:	10000d26 	beq	r2,zero,504b34c <__divsi3+0x58>
 504b318:	294b883a 	add	r5,r5,r5
 504b31c:	10bfffc4 	addi	r2,r2,-1
 504b320:	18c7883a 	add	r3,r3,r3
 504b324:	293ffb36 	bltu	r5,r4,504b314 <_gp+0xfffdfeec>
 504b328:	0005883a 	mov	r2,zero
 504b32c:	18000726 	beq	r3,zero,504b34c <__divsi3+0x58>
 504b330:	0005883a 	mov	r2,zero
 504b334:	31400236 	bltu	r6,r5,504b340 <__divsi3+0x4c>
 504b338:	314dc83a 	sub	r6,r6,r5
 504b33c:	10c4b03a 	or	r2,r2,r3
 504b340:	1806d07a 	srli	r3,r3,1
 504b344:	280ad07a 	srli	r5,r5,1
 504b348:	183ffa1e 	bne	r3,zero,504b334 <_gp+0xfffdff0c>
 504b34c:	38000126 	beq	r7,zero,504b354 <__divsi3+0x60>
 504b350:	0085c83a 	sub	r2,zero,r2
 504b354:	f800283a 	ret
 504b358:	014bc83a 	sub	r5,zero,r5
 504b35c:	39c0005c 	xori	r7,r7,1
 504b360:	003fe706 	br	504b300 <_gp+0xfffdfed8>
 504b364:	0109c83a 	sub	r4,zero,r4
 504b368:	01c00044 	movi	r7,1
 504b36c:	003fe306 	br	504b2fc <_gp+0xfffdfed4>
 504b370:	00c00044 	movi	r3,1
 504b374:	003fee06 	br	504b330 <_gp+0xfffdff08>

0504b378 <__modsi3>:
 504b378:	20001716 	blt	r4,zero,504b3d8 <__modsi3+0x60>
 504b37c:	000f883a 	mov	r7,zero
 504b380:	2005883a 	mov	r2,r4
 504b384:	28001216 	blt	r5,zero,504b3d0 <__modsi3+0x58>
 504b388:	2900162e 	bgeu	r5,r4,504b3e4 <__modsi3+0x6c>
 504b38c:	01800804 	movi	r6,32
 504b390:	00c00044 	movi	r3,1
 504b394:	00000106 	br	504b39c <__modsi3+0x24>
 504b398:	30000a26 	beq	r6,zero,504b3c4 <__modsi3+0x4c>
 504b39c:	294b883a 	add	r5,r5,r5
 504b3a0:	31bfffc4 	addi	r6,r6,-1
 504b3a4:	18c7883a 	add	r3,r3,r3
 504b3a8:	293ffb36 	bltu	r5,r4,504b398 <_gp+0xfffdff70>
 504b3ac:	18000526 	beq	r3,zero,504b3c4 <__modsi3+0x4c>
 504b3b0:	1806d07a 	srli	r3,r3,1
 504b3b4:	11400136 	bltu	r2,r5,504b3bc <__modsi3+0x44>
 504b3b8:	1145c83a 	sub	r2,r2,r5
 504b3bc:	280ad07a 	srli	r5,r5,1
 504b3c0:	183ffb1e 	bne	r3,zero,504b3b0 <_gp+0xfffdff88>
 504b3c4:	38000126 	beq	r7,zero,504b3cc <__modsi3+0x54>
 504b3c8:	0085c83a 	sub	r2,zero,r2
 504b3cc:	f800283a 	ret
 504b3d0:	014bc83a 	sub	r5,zero,r5
 504b3d4:	003fec06 	br	504b388 <_gp+0xfffdff60>
 504b3d8:	0109c83a 	sub	r4,zero,r4
 504b3dc:	01c00044 	movi	r7,1
 504b3e0:	003fe706 	br	504b380 <_gp+0xfffdff58>
 504b3e4:	00c00044 	movi	r3,1
 504b3e8:	003ff106 	br	504b3b0 <_gp+0xfffdff88>

0504b3ec <__udivsi3>:
 504b3ec:	200d883a 	mov	r6,r4
 504b3f0:	2900152e 	bgeu	r5,r4,504b448 <__udivsi3+0x5c>
 504b3f4:	28001416 	blt	r5,zero,504b448 <__udivsi3+0x5c>
 504b3f8:	00800804 	movi	r2,32
 504b3fc:	00c00044 	movi	r3,1
 504b400:	00000206 	br	504b40c <__udivsi3+0x20>
 504b404:	10000e26 	beq	r2,zero,504b440 <__udivsi3+0x54>
 504b408:	28000516 	blt	r5,zero,504b420 <__udivsi3+0x34>
 504b40c:	294b883a 	add	r5,r5,r5
 504b410:	10bfffc4 	addi	r2,r2,-1
 504b414:	18c7883a 	add	r3,r3,r3
 504b418:	293ffa36 	bltu	r5,r4,504b404 <_gp+0xfffdffdc>
 504b41c:	18000826 	beq	r3,zero,504b440 <__udivsi3+0x54>
 504b420:	0005883a 	mov	r2,zero
 504b424:	31400236 	bltu	r6,r5,504b430 <__udivsi3+0x44>
 504b428:	314dc83a 	sub	r6,r6,r5
 504b42c:	10c4b03a 	or	r2,r2,r3
 504b430:	1806d07a 	srli	r3,r3,1
 504b434:	280ad07a 	srli	r5,r5,1
 504b438:	183ffa1e 	bne	r3,zero,504b424 <_gp+0xfffdfffc>
 504b43c:	f800283a 	ret
 504b440:	0005883a 	mov	r2,zero
 504b444:	f800283a 	ret
 504b448:	00c00044 	movi	r3,1
 504b44c:	003ff406 	br	504b420 <_gp+0xfffdfff8>

0504b450 <__umodsi3>:
 504b450:	2005883a 	mov	r2,r4
 504b454:	2900122e 	bgeu	r5,r4,504b4a0 <__umodsi3+0x50>
 504b458:	28001116 	blt	r5,zero,504b4a0 <__umodsi3+0x50>
 504b45c:	01800804 	movi	r6,32
 504b460:	00c00044 	movi	r3,1
 504b464:	00000206 	br	504b470 <__umodsi3+0x20>
 504b468:	30000c26 	beq	r6,zero,504b49c <__umodsi3+0x4c>
 504b46c:	28000516 	blt	r5,zero,504b484 <__umodsi3+0x34>
 504b470:	294b883a 	add	r5,r5,r5
 504b474:	31bfffc4 	addi	r6,r6,-1
 504b478:	18c7883a 	add	r3,r3,r3
 504b47c:	293ffa36 	bltu	r5,r4,504b468 <_gp+0xfffe0040>
 504b480:	18000626 	beq	r3,zero,504b49c <__umodsi3+0x4c>
 504b484:	1806d07a 	srli	r3,r3,1
 504b488:	11400136 	bltu	r2,r5,504b490 <__umodsi3+0x40>
 504b48c:	1145c83a 	sub	r2,r2,r5
 504b490:	280ad07a 	srli	r5,r5,1
 504b494:	183ffb1e 	bne	r3,zero,504b484 <_gp+0xfffe005c>
 504b498:	f800283a 	ret
 504b49c:	f800283a 	ret
 504b4a0:	00c00044 	movi	r3,1
 504b4a4:	003ff706 	br	504b484 <_gp+0xfffe005c>

0504b4a8 <__addsf3>:
 504b4a8:	defffc04 	addi	sp,sp,-16
 504b4ac:	2004d7fa 	srli	r2,r4,31
 504b4b0:	280cd5fa 	srli	r6,r5,23
 504b4b4:	dc000015 	stw	r16,0(sp)
 504b4b8:	00c02034 	movhi	r3,128
 504b4bc:	2020d5fa 	srli	r16,r4,23
 504b4c0:	280ed7fa 	srli	r7,r5,31
 504b4c4:	18ffffc4 	addi	r3,r3,-1
 504b4c8:	dc400115 	stw	r17,4(sp)
 504b4cc:	1908703a 	and	r4,r3,r4
 504b4d0:	194a703a 	and	r5,r3,r5
 504b4d4:	dfc00315 	stw	ra,12(sp)
 504b4d8:	dc800215 	stw	r18,8(sp)
 504b4dc:	14403fcc 	andi	r17,r2,255
 504b4e0:	84003fcc 	andi	r16,r16,255
 504b4e4:	200890fa 	slli	r4,r4,3
 504b4e8:	31803fcc 	andi	r6,r6,255
 504b4ec:	280a90fa 	slli	r5,r5,3
 504b4f0:	89c05026 	beq	r17,r7,504b634 <__addsf3+0x18c>
 504b4f4:	8185c83a 	sub	r2,r16,r6
 504b4f8:	00807a0e 	bge	zero,r2,504b6e4 <__addsf3+0x23c>
 504b4fc:	30001e1e 	bne	r6,zero,504b578 <__addsf3+0xd0>
 504b500:	28006d1e 	bne	r5,zero,504b6b8 <__addsf3+0x210>
 504b504:	208001cc 	andi	r2,r4,7
 504b508:	10000426 	beq	r2,zero,504b51c <__addsf3+0x74>
 504b50c:	208003cc 	andi	r2,r4,15
 504b510:	00c00104 	movi	r3,4
 504b514:	10c00126 	beq	r2,r3,504b51c <__addsf3+0x74>
 504b518:	20c9883a 	add	r4,r4,r3
 504b51c:	2081002c 	andhi	r2,r4,1024
 504b520:	10003926 	beq	r2,zero,504b608 <__addsf3+0x160>
 504b524:	84000044 	addi	r16,r16,1
 504b528:	00803fc4 	movi	r2,255
 504b52c:	80807826 	beq	r16,r2,504b710 <__addsf3+0x268>
 504b530:	200891ba 	slli	r4,r4,6
 504b534:	8805883a 	mov	r2,r17
 504b538:	2008d27a 	srli	r4,r4,9
 504b53c:	84003fcc 	andi	r16,r16,255
 504b540:	800695fa 	slli	r3,r16,23
 504b544:	10803fcc 	andi	r2,r2,255
 504b548:	04002034 	movhi	r16,128
 504b54c:	843fffc4 	addi	r16,r16,-1
 504b550:	100497fa 	slli	r2,r2,31
 504b554:	2408703a 	and	r4,r4,r16
 504b558:	20e0b03a 	or	r16,r4,r3
 504b55c:	8084b03a 	or	r2,r16,r2
 504b560:	dfc00317 	ldw	ra,12(sp)
 504b564:	dc800217 	ldw	r18,8(sp)
 504b568:	dc400117 	ldw	r17,4(sp)
 504b56c:	dc000017 	ldw	r16,0(sp)
 504b570:	dec00404 	addi	sp,sp,16
 504b574:	f800283a 	ret
 504b578:	00c03fc4 	movi	r3,255
 504b57c:	80ffe126 	beq	r16,r3,504b504 <_gp+0xfffe00dc>
 504b580:	29410034 	orhi	r5,r5,1024
 504b584:	00c006c4 	movi	r3,27
 504b588:	18807516 	blt	r3,r2,504b760 <__addsf3+0x2b8>
 504b58c:	00c00804 	movi	r3,32
 504b590:	1887c83a 	sub	r3,r3,r2
 504b594:	28c6983a 	sll	r3,r5,r3
 504b598:	288ad83a 	srl	r5,r5,r2
 504b59c:	1804c03a 	cmpne	r2,r3,zero
 504b5a0:	288ab03a 	or	r5,r5,r2
 504b5a4:	2149c83a 	sub	r4,r4,r5
 504b5a8:	2081002c 	andhi	r2,r4,1024
 504b5ac:	10001426 	beq	r2,zero,504b600 <__addsf3+0x158>
 504b5b0:	04810034 	movhi	r18,1024
 504b5b4:	94bfffc4 	addi	r18,r18,-1
 504b5b8:	24a4703a 	and	r18,r4,r18
 504b5bc:	9009883a 	mov	r4,r18
 504b5c0:	504f0340 	call	504f034 <__clzsi2>
 504b5c4:	10bffec4 	addi	r2,r2,-5
 504b5c8:	90a4983a 	sll	r18,r18,r2
 504b5cc:	14005416 	blt	r2,r16,504b720 <__addsf3+0x278>
 504b5d0:	1405c83a 	sub	r2,r2,r16
 504b5d4:	11000044 	addi	r4,r2,1
 504b5d8:	00800804 	movi	r2,32
 504b5dc:	1105c83a 	sub	r2,r2,r4
 504b5e0:	9084983a 	sll	r2,r18,r2
 504b5e4:	9124d83a 	srl	r18,r18,r4
 504b5e8:	0021883a 	mov	r16,zero
 504b5ec:	1008c03a 	cmpne	r4,r2,zero
 504b5f0:	9108b03a 	or	r4,r18,r4
 504b5f4:	003fc306 	br	504b504 <_gp+0xfffe00dc>
 504b5f8:	1000db26 	beq	r2,zero,504b968 <__addsf3+0x4c0>
 504b5fc:	1009883a 	mov	r4,r2
 504b600:	208001cc 	andi	r2,r4,7
 504b604:	103fc11e 	bne	r2,zero,504b50c <_gp+0xfffe00e4>
 504b608:	2006d0fa 	srli	r3,r4,3
 504b60c:	01003fc4 	movi	r4,255
 504b610:	8805883a 	mov	r2,r17
 504b614:	8100241e 	bne	r16,r4,504b6a8 <__addsf3+0x200>
 504b618:	18006e26 	beq	r3,zero,504b7d4 <__addsf3+0x32c>
 504b61c:	19001034 	orhi	r4,r3,64
 504b620:	00c02034 	movhi	r3,128
 504b624:	18ffffc4 	addi	r3,r3,-1
 504b628:	043fffc4 	movi	r16,-1
 504b62c:	20c8703a 	and	r4,r4,r3
 504b630:	003fc206 	br	504b53c <_gp+0xfffe0114>
 504b634:	8187c83a 	sub	r3,r16,r6
 504b638:	00c03e0e 	bge	zero,r3,504b734 <__addsf3+0x28c>
 504b63c:	30002326 	beq	r6,zero,504b6cc <__addsf3+0x224>
 504b640:	01803fc4 	movi	r6,255
 504b644:	81bfaf26 	beq	r16,r6,504b504 <_gp+0xfffe00dc>
 504b648:	29410034 	orhi	r5,r5,1024
 504b64c:	018006c4 	movi	r6,27
 504b650:	30c07416 	blt	r6,r3,504b824 <__addsf3+0x37c>
 504b654:	01800804 	movi	r6,32
 504b658:	30cdc83a 	sub	r6,r6,r3
 504b65c:	298c983a 	sll	r6,r5,r6
 504b660:	28cad83a 	srl	r5,r5,r3
 504b664:	3006c03a 	cmpne	r3,r6,zero
 504b668:	28cab03a 	or	r5,r5,r3
 504b66c:	2149883a 	add	r4,r4,r5
 504b670:	20c1002c 	andhi	r3,r4,1024
 504b674:	183fe226 	beq	r3,zero,504b600 <_gp+0xfffe01d8>
 504b678:	84000044 	addi	r16,r16,1
 504b67c:	00c03fc4 	movi	r3,255
 504b680:	80c05426 	beq	r16,r3,504b7d4 <__addsf3+0x32c>
 504b684:	00bf0034 	movhi	r2,64512
 504b688:	10bfffc4 	addi	r2,r2,-1
 504b68c:	20c0004c 	andi	r3,r4,1
 504b690:	2088703a 	and	r4,r4,r2
 504b694:	2008d07a 	srli	r4,r4,1
 504b698:	20c8b03a 	or	r4,r4,r3
 504b69c:	003f9906 	br	504b504 <_gp+0xfffe00dc>
 504b6a0:	0007883a 	mov	r3,zero
 504b6a4:	0005883a 	mov	r2,zero
 504b6a8:	01002034 	movhi	r4,128
 504b6ac:	213fffc4 	addi	r4,r4,-1
 504b6b0:	1908703a 	and	r4,r3,r4
 504b6b4:	003fa106 	br	504b53c <_gp+0xfffe0114>
 504b6b8:	10bfffc4 	addi	r2,r2,-1
 504b6bc:	103fb926 	beq	r2,zero,504b5a4 <_gp+0xfffe017c>
 504b6c0:	00c03fc4 	movi	r3,255
 504b6c4:	80ffaf1e 	bne	r16,r3,504b584 <_gp+0xfffe015c>
 504b6c8:	003f8e06 	br	504b504 <_gp+0xfffe00dc>
 504b6cc:	283f8d26 	beq	r5,zero,504b504 <_gp+0xfffe00dc>
 504b6d0:	18ffffc4 	addi	r3,r3,-1
 504b6d4:	183fe526 	beq	r3,zero,504b66c <_gp+0xfffe0244>
 504b6d8:	01803fc4 	movi	r6,255
 504b6dc:	81bfdb1e 	bne	r16,r6,504b64c <_gp+0xfffe0224>
 504b6e0:	003f8806 	br	504b504 <_gp+0xfffe00dc>
 504b6e4:	1000201e 	bne	r2,zero,504b768 <__addsf3+0x2c0>
 504b6e8:	80800044 	addi	r2,r16,1
 504b6ec:	10803fcc 	andi	r2,r2,255
 504b6f0:	01800044 	movi	r6,1
 504b6f4:	3080450e 	bge	r6,r2,504b80c <__addsf3+0x364>
 504b6f8:	2165c83a 	sub	r18,r4,r5
 504b6fc:	90c1002c 	andhi	r3,r18,1024
 504b700:	18002b26 	beq	r3,zero,504b7b0 <__addsf3+0x308>
 504b704:	2925c83a 	sub	r18,r5,r4
 504b708:	3823883a 	mov	r17,r7
 504b70c:	003fab06 	br	504b5bc <_gp+0xfffe0194>
 504b710:	8805883a 	mov	r2,r17
 504b714:	043fffc4 	movi	r16,-1
 504b718:	0009883a 	mov	r4,zero
 504b71c:	003f8706 	br	504b53c <_gp+0xfffe0114>
 504b720:	013f0034 	movhi	r4,64512
 504b724:	213fffc4 	addi	r4,r4,-1
 504b728:	80a1c83a 	sub	r16,r16,r2
 504b72c:	9108703a 	and	r4,r18,r4
 504b730:	003f7406 	br	504b504 <_gp+0xfffe00dc>
 504b734:	1800411e 	bne	r3,zero,504b83c <__addsf3+0x394>
 504b738:	80c00044 	addi	r3,r16,1
 504b73c:	19c03fcc 	andi	r7,r3,255
 504b740:	01800044 	movi	r6,1
 504b744:	31c0260e 	bge	r6,r7,504b7e0 <__addsf3+0x338>
 504b748:	01803fc4 	movi	r6,255
 504b74c:	19802126 	beq	r3,r6,504b7d4 <__addsf3+0x32c>
 504b750:	2149883a 	add	r4,r4,r5
 504b754:	2008d07a 	srli	r4,r4,1
 504b758:	1821883a 	mov	r16,r3
 504b75c:	003f6906 	br	504b504 <_gp+0xfffe00dc>
 504b760:	01400044 	movi	r5,1
 504b764:	003f8f06 	br	504b5a4 <_gp+0xfffe017c>
 504b768:	8000151e 	bne	r16,zero,504b7c0 <__addsf3+0x318>
 504b76c:	20002f26 	beq	r4,zero,504b82c <__addsf3+0x384>
 504b770:	0084303a 	nor	r2,zero,r2
 504b774:	10000a26 	beq	r2,zero,504b7a0 <__addsf3+0x2f8>
 504b778:	00c03fc4 	movi	r3,255
 504b77c:	30c02b26 	beq	r6,r3,504b82c <__addsf3+0x384>
 504b780:	00c006c4 	movi	r3,27
 504b784:	18806d16 	blt	r3,r2,504b93c <__addsf3+0x494>
 504b788:	00c00804 	movi	r3,32
 504b78c:	1887c83a 	sub	r3,r3,r2
 504b790:	20c6983a 	sll	r3,r4,r3
 504b794:	2084d83a 	srl	r2,r4,r2
 504b798:	1808c03a 	cmpne	r4,r3,zero
 504b79c:	1108b03a 	or	r4,r2,r4
 504b7a0:	2909c83a 	sub	r4,r5,r4
 504b7a4:	3021883a 	mov	r16,r6
 504b7a8:	3823883a 	mov	r17,r7
 504b7ac:	003f7e06 	br	504b5a8 <_gp+0xfffe0180>
 504b7b0:	903f821e 	bne	r18,zero,504b5bc <_gp+0xfffe0194>
 504b7b4:	0005883a 	mov	r2,zero
 504b7b8:	0021883a 	mov	r16,zero
 504b7bc:	003fba06 	br	504b6a8 <_gp+0xfffe0280>
 504b7c0:	00c03fc4 	movi	r3,255
 504b7c4:	30c01926 	beq	r6,r3,504b82c <__addsf3+0x384>
 504b7c8:	0085c83a 	sub	r2,zero,r2
 504b7cc:	21010034 	orhi	r4,r4,1024
 504b7d0:	003feb06 	br	504b780 <_gp+0xfffe0358>
 504b7d4:	043fffc4 	movi	r16,-1
 504b7d8:	0009883a 	mov	r4,zero
 504b7dc:	003f5706 	br	504b53c <_gp+0xfffe0114>
 504b7e0:	80004a1e 	bne	r16,zero,504b90c <__addsf3+0x464>
 504b7e4:	20005926 	beq	r4,zero,504b94c <__addsf3+0x4a4>
 504b7e8:	283f4626 	beq	r5,zero,504b504 <_gp+0xfffe00dc>
 504b7ec:	2149883a 	add	r4,r4,r5
 504b7f0:	2081002c 	andhi	r2,r4,1024
 504b7f4:	103f8226 	beq	r2,zero,504b600 <_gp+0xfffe01d8>
 504b7f8:	00bf0034 	movhi	r2,64512
 504b7fc:	10bfffc4 	addi	r2,r2,-1
 504b800:	3021883a 	mov	r16,r6
 504b804:	2088703a 	and	r4,r4,r2
 504b808:	003f3e06 	br	504b504 <_gp+0xfffe00dc>
 504b80c:	8000121e 	bne	r16,zero,504b858 <__addsf3+0x3b0>
 504b810:	2000261e 	bne	r4,zero,504b8ac <__addsf3+0x404>
 504b814:	283fa226 	beq	r5,zero,504b6a0 <_gp+0xfffe0278>
 504b818:	2809883a 	mov	r4,r5
 504b81c:	3823883a 	mov	r17,r7
 504b820:	003f3806 	br	504b504 <_gp+0xfffe00dc>
 504b824:	01400044 	movi	r5,1
 504b828:	003f9006 	br	504b66c <_gp+0xfffe0244>
 504b82c:	2809883a 	mov	r4,r5
 504b830:	3021883a 	mov	r16,r6
 504b834:	3823883a 	mov	r17,r7
 504b838:	003f3206 	br	504b504 <_gp+0xfffe00dc>
 504b83c:	80000c1e 	bne	r16,zero,504b870 <__addsf3+0x3c8>
 504b840:	20002f26 	beq	r4,zero,504b900 <__addsf3+0x458>
 504b844:	00c6303a 	nor	r3,zero,r3
 504b848:	18002b1e 	bne	r3,zero,504b8f8 <__addsf3+0x450>
 504b84c:	2149883a 	add	r4,r4,r5
 504b850:	3021883a 	mov	r16,r6
 504b854:	003f8606 	br	504b670 <_gp+0xfffe0248>
 504b858:	20001b1e 	bne	r4,zero,504b8c8 <__addsf3+0x420>
 504b85c:	28003926 	beq	r5,zero,504b944 <__addsf3+0x49c>
 504b860:	2809883a 	mov	r4,r5
 504b864:	3823883a 	mov	r17,r7
 504b868:	04003fc4 	movi	r16,255
 504b86c:	003f2506 	br	504b504 <_gp+0xfffe00dc>
 504b870:	01c03fc4 	movi	r7,255
 504b874:	31c02226 	beq	r6,r7,504b900 <__addsf3+0x458>
 504b878:	00c7c83a 	sub	r3,zero,r3
 504b87c:	21010034 	orhi	r4,r4,1024
 504b880:	01c006c4 	movi	r7,27
 504b884:	38c03616 	blt	r7,r3,504b960 <__addsf3+0x4b8>
 504b888:	01c00804 	movi	r7,32
 504b88c:	38cfc83a 	sub	r7,r7,r3
 504b890:	21ce983a 	sll	r7,r4,r7
 504b894:	20c6d83a 	srl	r3,r4,r3
 504b898:	3808c03a 	cmpne	r4,r7,zero
 504b89c:	1906b03a 	or	r3,r3,r4
 504b8a0:	1949883a 	add	r4,r3,r5
 504b8a4:	3021883a 	mov	r16,r6
 504b8a8:	003f7106 	br	504b670 <_gp+0xfffe0248>
 504b8ac:	283f1526 	beq	r5,zero,504b504 <_gp+0xfffe00dc>
 504b8b0:	2145c83a 	sub	r2,r4,r5
 504b8b4:	10c1002c 	andhi	r3,r2,1024
 504b8b8:	183f4f26 	beq	r3,zero,504b5f8 <_gp+0xfffe01d0>
 504b8bc:	2909c83a 	sub	r4,r5,r4
 504b8c0:	3823883a 	mov	r17,r7
 504b8c4:	003f0f06 	br	504b504 <_gp+0xfffe00dc>
 504b8c8:	28001a26 	beq	r5,zero,504b934 <__addsf3+0x48c>
 504b8cc:	2008d0fa 	srli	r4,r4,3
 504b8d0:	2080102c 	andhi	r2,r4,64
 504b8d4:	10000526 	beq	r2,zero,504b8ec <__addsf3+0x444>
 504b8d8:	280ad0fa 	srli	r5,r5,3
 504b8dc:	2880102c 	andhi	r2,r5,64
 504b8e0:	1000021e 	bne	r2,zero,504b8ec <__addsf3+0x444>
 504b8e4:	2809883a 	mov	r4,r5
 504b8e8:	3823883a 	mov	r17,r7
 504b8ec:	200890fa 	slli	r4,r4,3
 504b8f0:	04003fc4 	movi	r16,255
 504b8f4:	003f0306 	br	504b504 <_gp+0xfffe00dc>
 504b8f8:	01c03fc4 	movi	r7,255
 504b8fc:	31ffe01e 	bne	r6,r7,504b880 <_gp+0xfffe0458>
 504b900:	2809883a 	mov	r4,r5
 504b904:	3021883a 	mov	r16,r6
 504b908:	003efe06 	br	504b504 <_gp+0xfffe00dc>
 504b90c:	20001126 	beq	r4,zero,504b954 <__addsf3+0x4ac>
 504b910:	28000826 	beq	r5,zero,504b934 <__addsf3+0x48c>
 504b914:	2008d0fa 	srli	r4,r4,3
 504b918:	2080102c 	andhi	r2,r4,64
 504b91c:	103ff326 	beq	r2,zero,504b8ec <_gp+0xfffe04c4>
 504b920:	280ad0fa 	srli	r5,r5,3
 504b924:	2880102c 	andhi	r2,r5,64
 504b928:	103ff01e 	bne	r2,zero,504b8ec <_gp+0xfffe04c4>
 504b92c:	2809883a 	mov	r4,r5
 504b930:	003fee06 	br	504b8ec <_gp+0xfffe04c4>
 504b934:	04003fc4 	movi	r16,255
 504b938:	003ef206 	br	504b504 <_gp+0xfffe00dc>
 504b93c:	01000044 	movi	r4,1
 504b940:	003f9706 	br	504b7a0 <_gp+0xfffe0378>
 504b944:	0005883a 	mov	r2,zero
 504b948:	003f3406 	br	504b61c <_gp+0xfffe01f4>
 504b94c:	2809883a 	mov	r4,r5
 504b950:	003eec06 	br	504b504 <_gp+0xfffe00dc>
 504b954:	2809883a 	mov	r4,r5
 504b958:	04003fc4 	movi	r16,255
 504b95c:	003ee906 	br	504b504 <_gp+0xfffe00dc>
 504b960:	00c00044 	movi	r3,1
 504b964:	003fce06 	br	504b8a0 <_gp+0xfffe0478>
 504b968:	0005883a 	mov	r2,zero
 504b96c:	003f4e06 	br	504b6a8 <_gp+0xfffe0280>

0504b970 <__divsf3>:
 504b970:	defff504 	addi	sp,sp,-44
 504b974:	200cd5fa 	srli	r6,r4,23
 504b978:	dcc00415 	stw	r19,16(sp)
 504b97c:	2026d7fa 	srli	r19,r4,31
 504b980:	00c02034 	movhi	r3,128
 504b984:	dd800715 	stw	r22,28(sp)
 504b988:	dd000515 	stw	r20,20(sp)
 504b98c:	dc800315 	stw	r18,12(sp)
 504b990:	18ffffc4 	addi	r3,r3,-1
 504b994:	dfc00a15 	stw	ra,40(sp)
 504b998:	df000915 	stw	fp,36(sp)
 504b99c:	ddc00815 	stw	r23,32(sp)
 504b9a0:	dd400615 	stw	r21,24(sp)
 504b9a4:	dc400215 	stw	r17,8(sp)
 504b9a8:	dc000115 	stw	r16,4(sp)
 504b9ac:	35003fcc 	andi	r20,r6,255
 504b9b0:	1924703a 	and	r18,r3,r4
 504b9b4:	9d803fcc 	andi	r22,r19,255
 504b9b8:	a0005226 	beq	r20,zero,504bb04 <__divsf3+0x194>
 504b9bc:	00803fc4 	movi	r2,255
 504b9c0:	a0802e26 	beq	r20,r2,504ba7c <__divsf3+0x10c>
 504b9c4:	91002034 	orhi	r4,r18,128
 504b9c8:	202490fa 	slli	r18,r4,3
 504b9cc:	a53fe044 	addi	r20,r20,-127
 504b9d0:	0021883a 	mov	r16,zero
 504b9d4:	002f883a 	mov	r23,zero
 504b9d8:	280cd5fa 	srli	r6,r5,23
 504b9dc:	282ad7fa 	srli	r21,r5,31
 504b9e0:	00c02034 	movhi	r3,128
 504b9e4:	18ffffc4 	addi	r3,r3,-1
 504b9e8:	31803fcc 	andi	r6,r6,255
 504b9ec:	1962703a 	and	r17,r3,r5
 504b9f0:	af003fcc 	andi	fp,r21,255
 504b9f4:	30004a26 	beq	r6,zero,504bb20 <__divsf3+0x1b0>
 504b9f8:	00803fc4 	movi	r2,255
 504b9fc:	30804526 	beq	r6,r2,504bb14 <__divsf3+0x1a4>
 504ba00:	89402034 	orhi	r5,r17,128
 504ba04:	282290fa 	slli	r17,r5,3
 504ba08:	31bfe044 	addi	r6,r6,-127
 504ba0c:	000b883a 	mov	r5,zero
 504ba10:	2c20b03a 	or	r16,r5,r16
 504ba14:	802090ba 	slli	r16,r16,2
 504ba18:	00814174 	movhi	r2,1285
 504ba1c:	10ae8f04 	addi	r2,r2,-17860
 504ba20:	80a1883a 	add	r16,r16,r2
 504ba24:	81000017 	ldw	r4,0(r16)
 504ba28:	9d46f03a 	xor	r3,r19,r21
 504ba2c:	180f883a 	mov	r7,r3
 504ba30:	18803fcc 	andi	r2,r3,255
 504ba34:	a18dc83a 	sub	r6,r20,r6
 504ba38:	2000683a 	jmp	r4
 504ba3c:	0504bc20 	cmpeqi	r20,zero,4848
 504ba40:	0504baa4 	muli	r20,zero,4842
 504ba44:	0504bc14 	movui	r20,4848
 504ba48:	0504ba90 	cmplti	r20,zero,4842
 504ba4c:	0504bc14 	movui	r20,4848
 504ba50:	0504bbec 	andhi	r20,zero,4847
 504ba54:	0504bc14 	movui	r20,4848
 504ba58:	0504ba90 	cmplti	r20,zero,4842
 504ba5c:	0504baa4 	muli	r20,zero,4842
 504ba60:	0504baa4 	muli	r20,zero,4842
 504ba64:	0504bbec 	andhi	r20,zero,4847
 504ba68:	0504ba90 	cmplti	r20,zero,4842
 504ba6c:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504ba70:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504ba74:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504ba78:	0504bcb4 	movhi	r20,4850
 504ba7c:	9000581e 	bne	r18,zero,504bbe0 <__divsf3+0x270>
 504ba80:	04000204 	movi	r16,8
 504ba84:	05c00084 	movi	r23,2
 504ba88:	003fd306 	br	504b9d8 <_gp+0xfffe05b0>
 504ba8c:	0023883a 	mov	r17,zero
 504ba90:	e02d883a 	mov	r22,fp
 504ba94:	282f883a 	mov	r23,r5
 504ba98:	00800084 	movi	r2,2
 504ba9c:	b8808f1e 	bne	r23,r2,504bcdc <__divsf3+0x36c>
 504baa0:	b005883a 	mov	r2,r22
 504baa4:	11c0004c 	andi	r7,r2,1
 504baa8:	013fffc4 	movi	r4,-1
 504baac:	000d883a 	mov	r6,zero
 504bab0:	21003fcc 	andi	r4,r4,255
 504bab4:	200895fa 	slli	r4,r4,23
 504bab8:	38803fcc 	andi	r2,r7,255
 504babc:	00c02034 	movhi	r3,128
 504bac0:	100497fa 	slli	r2,r2,31
 504bac4:	18ffffc4 	addi	r3,r3,-1
 504bac8:	30c6703a 	and	r3,r6,r3
 504bacc:	1906b03a 	or	r3,r3,r4
 504bad0:	1884b03a 	or	r2,r3,r2
 504bad4:	dfc00a17 	ldw	ra,40(sp)
 504bad8:	df000917 	ldw	fp,36(sp)
 504badc:	ddc00817 	ldw	r23,32(sp)
 504bae0:	dd800717 	ldw	r22,28(sp)
 504bae4:	dd400617 	ldw	r21,24(sp)
 504bae8:	dd000517 	ldw	r20,20(sp)
 504baec:	dcc00417 	ldw	r19,16(sp)
 504baf0:	dc800317 	ldw	r18,12(sp)
 504baf4:	dc400217 	ldw	r17,8(sp)
 504baf8:	dc000117 	ldw	r16,4(sp)
 504bafc:	dec00b04 	addi	sp,sp,44
 504bb00:	f800283a 	ret
 504bb04:	90002b1e 	bne	r18,zero,504bbb4 <__divsf3+0x244>
 504bb08:	04000104 	movi	r16,4
 504bb0c:	05c00044 	movi	r23,1
 504bb10:	003fb106 	br	504b9d8 <_gp+0xfffe05b0>
 504bb14:	8800251e 	bne	r17,zero,504bbac <__divsf3+0x23c>
 504bb18:	01400084 	movi	r5,2
 504bb1c:	00000206 	br	504bb28 <__divsf3+0x1b8>
 504bb20:	88001a1e 	bne	r17,zero,504bb8c <__divsf3+0x21c>
 504bb24:	01400044 	movi	r5,1
 504bb28:	8160b03a 	or	r16,r16,r5
 504bb2c:	802090ba 	slli	r16,r16,2
 504bb30:	00c14174 	movhi	r3,1285
 504bb34:	18eed304 	addi	r3,r3,-17588
 504bb38:	80e1883a 	add	r16,r16,r3
 504bb3c:	80c00017 	ldw	r3,0(r16)
 504bb40:	9d44f03a 	xor	r2,r19,r21
 504bb44:	a18dc83a 	sub	r6,r20,r6
 504bb48:	1800683a 	jmp	r3
 504bb4c:	0504baa4 	muli	r20,zero,4842
 504bb50:	0504baa4 	muli	r20,zero,4842
 504bb54:	0504bcf0 	cmpltui	r20,zero,4851
 504bb58:	0504ba8c 	andi	r20,zero,4842
 504bb5c:	0504bcf0 	cmpltui	r20,zero,4851
 504bb60:	0504bbec 	andhi	r20,zero,4847
 504bb64:	0504bcf0 	cmpltui	r20,zero,4851
 504bb68:	0504ba8c 	andi	r20,zero,4842
 504bb6c:	0504baa4 	muli	r20,zero,4842
 504bb70:	0504baa4 	muli	r20,zero,4842
 504bb74:	0504bbec 	andhi	r20,zero,4847
 504bb78:	0504ba8c 	andi	r20,zero,4842
 504bb7c:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504bb80:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504bb84:	0504bd00 	call	504bd0 <__alt_mem_new_sdram_controller_0+0x504bd0>
 504bb88:	0504bd18 	cmpnei	r20,zero,4852
 504bb8c:	8809883a 	mov	r4,r17
 504bb90:	504f0340 	call	504f034 <__clzsi2>
 504bb94:	10fffec4 	addi	r3,r2,-5
 504bb98:	10801d84 	addi	r2,r2,118
 504bb9c:	88e2983a 	sll	r17,r17,r3
 504bba0:	008dc83a 	sub	r6,zero,r2
 504bba4:	000b883a 	mov	r5,zero
 504bba8:	003f9906 	br	504ba10 <_gp+0xfffe05e8>
 504bbac:	014000c4 	movi	r5,3
 504bbb0:	003f9706 	br	504ba10 <_gp+0xfffe05e8>
 504bbb4:	9009883a 	mov	r4,r18
 504bbb8:	d9400015 	stw	r5,0(sp)
 504bbbc:	504f0340 	call	504f034 <__clzsi2>
 504bbc0:	10fffec4 	addi	r3,r2,-5
 504bbc4:	11801d84 	addi	r6,r2,118
 504bbc8:	90e4983a 	sll	r18,r18,r3
 504bbcc:	01a9c83a 	sub	r20,zero,r6
 504bbd0:	0021883a 	mov	r16,zero
 504bbd4:	002f883a 	mov	r23,zero
 504bbd8:	d9400017 	ldw	r5,0(sp)
 504bbdc:	003f7e06 	br	504b9d8 <_gp+0xfffe05b0>
 504bbe0:	04000304 	movi	r16,12
 504bbe4:	05c000c4 	movi	r23,3
 504bbe8:	003f7b06 	br	504b9d8 <_gp+0xfffe05b0>
 504bbec:	01802034 	movhi	r6,128
 504bbf0:	000f883a 	mov	r7,zero
 504bbf4:	31bfffc4 	addi	r6,r6,-1
 504bbf8:	013fffc4 	movi	r4,-1
 504bbfc:	003fac06 	br	504bab0 <_gp+0xfffe0688>
 504bc00:	01400044 	movi	r5,1
 504bc04:	2909c83a 	sub	r4,r5,r4
 504bc08:	00c006c4 	movi	r3,27
 504bc0c:	19004b0e 	bge	r3,r4,504bd3c <__divsf3+0x3cc>
 504bc10:	114e703a 	and	r7,r2,r5
 504bc14:	0009883a 	mov	r4,zero
 504bc18:	000d883a 	mov	r6,zero
 504bc1c:	003fa406 	br	504bab0 <_gp+0xfffe0688>
 504bc20:	9006917a 	slli	r3,r18,5
 504bc24:	8822917a 	slli	r17,r17,5
 504bc28:	1c40372e 	bgeu	r3,r17,504bd08 <__divsf3+0x398>
 504bc2c:	31bfffc4 	addi	r6,r6,-1
 504bc30:	010006c4 	movi	r4,27
 504bc34:	000b883a 	mov	r5,zero
 504bc38:	180f883a 	mov	r7,r3
 504bc3c:	294b883a 	add	r5,r5,r5
 504bc40:	18c7883a 	add	r3,r3,r3
 504bc44:	38000116 	blt	r7,zero,504bc4c <__divsf3+0x2dc>
 504bc48:	1c400236 	bltu	r3,r17,504bc54 <__divsf3+0x2e4>
 504bc4c:	1c47c83a 	sub	r3,r3,r17
 504bc50:	29400054 	ori	r5,r5,1
 504bc54:	213fffc4 	addi	r4,r4,-1
 504bc58:	203ff71e 	bne	r4,zero,504bc38 <_gp+0xfffe0810>
 504bc5c:	1806c03a 	cmpne	r3,r3,zero
 504bc60:	1962b03a 	or	r17,r3,r5
 504bc64:	31001fc4 	addi	r4,r6,127
 504bc68:	013fe50e 	bge	zero,r4,504bc00 <_gp+0xfffe07d8>
 504bc6c:	88c001cc 	andi	r3,r17,7
 504bc70:	18000426 	beq	r3,zero,504bc84 <__divsf3+0x314>
 504bc74:	88c003cc 	andi	r3,r17,15
 504bc78:	01400104 	movi	r5,4
 504bc7c:	19400126 	beq	r3,r5,504bc84 <__divsf3+0x314>
 504bc80:	8963883a 	add	r17,r17,r5
 504bc84:	88c2002c 	andhi	r3,r17,2048
 504bc88:	18000426 	beq	r3,zero,504bc9c <__divsf3+0x32c>
 504bc8c:	00fe0034 	movhi	r3,63488
 504bc90:	18ffffc4 	addi	r3,r3,-1
 504bc94:	31002004 	addi	r4,r6,128
 504bc98:	88e2703a 	and	r17,r17,r3
 504bc9c:	00c03f84 	movi	r3,254
 504bca0:	193f8016 	blt	r3,r4,504baa4 <_gp+0xfffe067c>
 504bca4:	880c91ba 	slli	r6,r17,6
 504bca8:	11c0004c 	andi	r7,r2,1
 504bcac:	300cd27a 	srli	r6,r6,9
 504bcb0:	003f7f06 	br	504bab0 <_gp+0xfffe0688>
 504bcb4:	9080102c 	andhi	r2,r18,64
 504bcb8:	10000226 	beq	r2,zero,504bcc4 <__divsf3+0x354>
 504bcbc:	8880102c 	andhi	r2,r17,64
 504bcc0:	10001826 	beq	r2,zero,504bd24 <__divsf3+0x3b4>
 504bcc4:	00802034 	movhi	r2,128
 504bcc8:	91801034 	orhi	r6,r18,64
 504bccc:	10bfffc4 	addi	r2,r2,-1
 504bcd0:	980f883a 	mov	r7,r19
 504bcd4:	308c703a 	and	r6,r6,r2
 504bcd8:	003fc706 	br	504bbf8 <_gp+0xfffe07d0>
 504bcdc:	008000c4 	movi	r2,3
 504bce0:	b8802d26 	beq	r23,r2,504bd98 <__divsf3+0x428>
 504bce4:	00c00044 	movi	r3,1
 504bce8:	b005883a 	mov	r2,r22
 504bcec:	b8ffdd1e 	bne	r23,r3,504bc64 <_gp+0xfffe083c>
 504bcf0:	11c0004c 	andi	r7,r2,1
 504bcf4:	0009883a 	mov	r4,zero
 504bcf8:	000d883a 	mov	r6,zero
 504bcfc:	003f6c06 	br	504bab0 <_gp+0xfffe0688>
 504bd00:	9023883a 	mov	r17,r18
 504bd04:	003f6406 	br	504ba98 <_gp+0xfffe0670>
 504bd08:	1c47c83a 	sub	r3,r3,r17
 504bd0c:	01000684 	movi	r4,26
 504bd10:	01400044 	movi	r5,1
 504bd14:	003fc806 	br	504bc38 <_gp+0xfffe0810>
 504bd18:	9080102c 	andhi	r2,r18,64
 504bd1c:	103fe926 	beq	r2,zero,504bcc4 <_gp+0xfffe089c>
 504bd20:	0023883a 	mov	r17,zero
 504bd24:	00802034 	movhi	r2,128
 504bd28:	89801034 	orhi	r6,r17,64
 504bd2c:	10bfffc4 	addi	r2,r2,-1
 504bd30:	a80f883a 	mov	r7,r21
 504bd34:	308c703a 	and	r6,r6,r2
 504bd38:	003faf06 	br	504bbf8 <_gp+0xfffe07d0>
 504bd3c:	01c00804 	movi	r7,32
 504bd40:	390fc83a 	sub	r7,r7,r4
 504bd44:	89ce983a 	sll	r7,r17,r7
 504bd48:	890ad83a 	srl	r5,r17,r4
 504bd4c:	380ec03a 	cmpne	r7,r7,zero
 504bd50:	29cab03a 	or	r5,r5,r7
 504bd54:	28c001cc 	andi	r3,r5,7
 504bd58:	18000426 	beq	r3,zero,504bd6c <__divsf3+0x3fc>
 504bd5c:	28c003cc 	andi	r3,r5,15
 504bd60:	01000104 	movi	r4,4
 504bd64:	19000126 	beq	r3,r4,504bd6c <__divsf3+0x3fc>
 504bd68:	290b883a 	add	r5,r5,r4
 504bd6c:	28c1002c 	andhi	r3,r5,1024
 504bd70:	18000426 	beq	r3,zero,504bd84 <__divsf3+0x414>
 504bd74:	11c0004c 	andi	r7,r2,1
 504bd78:	01000044 	movi	r4,1
 504bd7c:	000d883a 	mov	r6,zero
 504bd80:	003f4b06 	br	504bab0 <_gp+0xfffe0688>
 504bd84:	280a91ba 	slli	r5,r5,6
 504bd88:	11c0004c 	andi	r7,r2,1
 504bd8c:	0009883a 	mov	r4,zero
 504bd90:	280cd27a 	srli	r6,r5,9
 504bd94:	003f4606 	br	504bab0 <_gp+0xfffe0688>
 504bd98:	00802034 	movhi	r2,128
 504bd9c:	89801034 	orhi	r6,r17,64
 504bda0:	10bfffc4 	addi	r2,r2,-1
 504bda4:	b00f883a 	mov	r7,r22
 504bda8:	308c703a 	and	r6,r6,r2
 504bdac:	003f9206 	br	504bbf8 <_gp+0xfffe07d0>

0504bdb0 <__mulsf3>:
 504bdb0:	defff504 	addi	sp,sp,-44
 504bdb4:	dc000115 	stw	r16,4(sp)
 504bdb8:	2020d5fa 	srli	r16,r4,23
 504bdbc:	dd400615 	stw	r21,24(sp)
 504bdc0:	202ad7fa 	srli	r21,r4,31
 504bdc4:	dc800315 	stw	r18,12(sp)
 504bdc8:	04802034 	movhi	r18,128
 504bdcc:	df000915 	stw	fp,36(sp)
 504bdd0:	dd000515 	stw	r20,20(sp)
 504bdd4:	94bfffc4 	addi	r18,r18,-1
 504bdd8:	dfc00a15 	stw	ra,40(sp)
 504bddc:	ddc00815 	stw	r23,32(sp)
 504bde0:	dd800715 	stw	r22,28(sp)
 504bde4:	dcc00415 	stw	r19,16(sp)
 504bde8:	dc400215 	stw	r17,8(sp)
 504bdec:	84003fcc 	andi	r16,r16,255
 504bdf0:	9124703a 	and	r18,r18,r4
 504bdf4:	a829883a 	mov	r20,r21
 504bdf8:	af003fcc 	andi	fp,r21,255
 504bdfc:	80005426 	beq	r16,zero,504bf50 <__mulsf3+0x1a0>
 504be00:	00803fc4 	movi	r2,255
 504be04:	80802f26 	beq	r16,r2,504bec4 <__mulsf3+0x114>
 504be08:	91002034 	orhi	r4,r18,128
 504be0c:	202490fa 	slli	r18,r4,3
 504be10:	843fe044 	addi	r16,r16,-127
 504be14:	0023883a 	mov	r17,zero
 504be18:	002f883a 	mov	r23,zero
 504be1c:	2804d5fa 	srli	r2,r5,23
 504be20:	282cd7fa 	srli	r22,r5,31
 504be24:	01002034 	movhi	r4,128
 504be28:	213fffc4 	addi	r4,r4,-1
 504be2c:	10803fcc 	andi	r2,r2,255
 504be30:	2166703a 	and	r19,r4,r5
 504be34:	b1803fcc 	andi	r6,r22,255
 504be38:	10004c26 	beq	r2,zero,504bf6c <__mulsf3+0x1bc>
 504be3c:	00c03fc4 	movi	r3,255
 504be40:	10c04726 	beq	r2,r3,504bf60 <__mulsf3+0x1b0>
 504be44:	99002034 	orhi	r4,r19,128
 504be48:	202690fa 	slli	r19,r4,3
 504be4c:	10bfe044 	addi	r2,r2,-127
 504be50:	0007883a 	mov	r3,zero
 504be54:	80a1883a 	add	r16,r16,r2
 504be58:	010003c4 	movi	r4,15
 504be5c:	1c44b03a 	or	r2,r3,r17
 504be60:	b56af03a 	xor	r21,r22,r21
 504be64:	81c00044 	addi	r7,r16,1
 504be68:	20806b36 	bltu	r4,r2,504c018 <__mulsf3+0x268>
 504be6c:	100490ba 	slli	r2,r2,2
 504be70:	01014174 	movhi	r4,1285
 504be74:	212fa104 	addi	r4,r4,-16764
 504be78:	1105883a 	add	r2,r2,r4
 504be7c:	10800017 	ldw	r2,0(r2)
 504be80:	1000683a 	jmp	r2
 504be84:	0504c018 	cmpnei	r20,zero,4864
 504be88:	0504bed8 	cmpnei	r20,zero,4859
 504be8c:	0504bed8 	cmpnei	r20,zero,4859
 504be90:	0504bed4 	movui	r20,4859
 504be94:	0504bffc 	xorhi	r20,zero,4863
 504be98:	0504bffc 	xorhi	r20,zero,4863
 504be9c:	0504bfe8 	cmpgeui	r20,zero,4863
 504bea0:	0504bed4 	movui	r20,4859
 504bea4:	0504bffc 	xorhi	r20,zero,4863
 504bea8:	0504bfe8 	cmpgeui	r20,zero,4863
 504beac:	0504bffc 	xorhi	r20,zero,4863
 504beb0:	0504bed4 	movui	r20,4859
 504beb4:	0504c008 	cmpgei	r20,zero,4864
 504beb8:	0504c008 	cmpgei	r20,zero,4864
 504bebc:	0504c008 	cmpgei	r20,zero,4864
 504bec0:	0504c0e4 	muli	r20,zero,4867
 504bec4:	90003b1e 	bne	r18,zero,504bfb4 <__mulsf3+0x204>
 504bec8:	04400204 	movi	r17,8
 504becc:	05c00084 	movi	r23,2
 504bed0:	003fd206 	br	504be1c <_gp+0xfffe09f4>
 504bed4:	302b883a 	mov	r21,r6
 504bed8:	00800084 	movi	r2,2
 504bedc:	18802626 	beq	r3,r2,504bf78 <__mulsf3+0x1c8>
 504bee0:	008000c4 	movi	r2,3
 504bee4:	1880ab26 	beq	r3,r2,504c194 <__mulsf3+0x3e4>
 504bee8:	00800044 	movi	r2,1
 504beec:	1880a21e 	bne	r3,r2,504c178 <__mulsf3+0x3c8>
 504bef0:	a829883a 	mov	r20,r21
 504bef4:	0007883a 	mov	r3,zero
 504bef8:	0009883a 	mov	r4,zero
 504befc:	18803fcc 	andi	r2,r3,255
 504bf00:	100695fa 	slli	r3,r2,23
 504bf04:	a0803fcc 	andi	r2,r20,255
 504bf08:	100a97fa 	slli	r5,r2,31
 504bf0c:	00802034 	movhi	r2,128
 504bf10:	10bfffc4 	addi	r2,r2,-1
 504bf14:	2084703a 	and	r2,r4,r2
 504bf18:	10c4b03a 	or	r2,r2,r3
 504bf1c:	1144b03a 	or	r2,r2,r5
 504bf20:	dfc00a17 	ldw	ra,40(sp)
 504bf24:	df000917 	ldw	fp,36(sp)
 504bf28:	ddc00817 	ldw	r23,32(sp)
 504bf2c:	dd800717 	ldw	r22,28(sp)
 504bf30:	dd400617 	ldw	r21,24(sp)
 504bf34:	dd000517 	ldw	r20,20(sp)
 504bf38:	dcc00417 	ldw	r19,16(sp)
 504bf3c:	dc800317 	ldw	r18,12(sp)
 504bf40:	dc400217 	ldw	r17,8(sp)
 504bf44:	dc000117 	ldw	r16,4(sp)
 504bf48:	dec00b04 	addi	sp,sp,44
 504bf4c:	f800283a 	ret
 504bf50:	90000d1e 	bne	r18,zero,504bf88 <__mulsf3+0x1d8>
 504bf54:	04400104 	movi	r17,4
 504bf58:	05c00044 	movi	r23,1
 504bf5c:	003faf06 	br	504be1c <_gp+0xfffe09f4>
 504bf60:	9806c03a 	cmpne	r3,r19,zero
 504bf64:	18c00084 	addi	r3,r3,2
 504bf68:	003fba06 	br	504be54 <_gp+0xfffe0a2c>
 504bf6c:	9800141e 	bne	r19,zero,504bfc0 <__mulsf3+0x210>
 504bf70:	00c00044 	movi	r3,1
 504bf74:	003fb706 	br	504be54 <_gp+0xfffe0a2c>
 504bf78:	a829883a 	mov	r20,r21
 504bf7c:	00ffffc4 	movi	r3,-1
 504bf80:	0009883a 	mov	r4,zero
 504bf84:	003fdd06 	br	504befc <_gp+0xfffe0ad4>
 504bf88:	9009883a 	mov	r4,r18
 504bf8c:	d9400015 	stw	r5,0(sp)
 504bf90:	504f0340 	call	504f034 <__clzsi2>
 504bf94:	10fffec4 	addi	r3,r2,-5
 504bf98:	10801d84 	addi	r2,r2,118
 504bf9c:	90e4983a 	sll	r18,r18,r3
 504bfa0:	00a1c83a 	sub	r16,zero,r2
 504bfa4:	0023883a 	mov	r17,zero
 504bfa8:	002f883a 	mov	r23,zero
 504bfac:	d9400017 	ldw	r5,0(sp)
 504bfb0:	003f9a06 	br	504be1c <_gp+0xfffe09f4>
 504bfb4:	04400304 	movi	r17,12
 504bfb8:	05c000c4 	movi	r23,3
 504bfbc:	003f9706 	br	504be1c <_gp+0xfffe09f4>
 504bfc0:	9809883a 	mov	r4,r19
 504bfc4:	d9800015 	stw	r6,0(sp)
 504bfc8:	504f0340 	call	504f034 <__clzsi2>
 504bfcc:	10fffec4 	addi	r3,r2,-5
 504bfd0:	10801d84 	addi	r2,r2,118
 504bfd4:	98e6983a 	sll	r19,r19,r3
 504bfd8:	0085c83a 	sub	r2,zero,r2
 504bfdc:	0007883a 	mov	r3,zero
 504bfe0:	d9800017 	ldw	r6,0(sp)
 504bfe4:	003f9b06 	br	504be54 <_gp+0xfffe0a2c>
 504bfe8:	01002034 	movhi	r4,128
 504bfec:	0029883a 	mov	r20,zero
 504bff0:	213fffc4 	addi	r4,r4,-1
 504bff4:	00ffffc4 	movi	r3,-1
 504bff8:	003fc006 	br	504befc <_gp+0xfffe0ad4>
 504bffc:	9027883a 	mov	r19,r18
 504c000:	b807883a 	mov	r3,r23
 504c004:	003fb406 	br	504bed8 <_gp+0xfffe0ab0>
 504c008:	9027883a 	mov	r19,r18
 504c00c:	e02b883a 	mov	r21,fp
 504c010:	b807883a 	mov	r3,r23
 504c014:	003fb006 	br	504bed8 <_gp+0xfffe0ab0>
 504c018:	9004d43a 	srli	r2,r18,16
 504c01c:	9810d43a 	srli	r8,r19,16
 504c020:	94bfffcc 	andi	r18,r18,65535
 504c024:	993fffcc 	andi	r4,r19,65535
 504c028:	910d383a 	mul	r6,r18,r4
 504c02c:	20a7383a 	mul	r19,r4,r2
 504c030:	9225383a 	mul	r18,r18,r8
 504c034:	3006d43a 	srli	r3,r6,16
 504c038:	1211383a 	mul	r8,r2,r8
 504c03c:	94e5883a 	add	r18,r18,r19
 504c040:	1c87883a 	add	r3,r3,r18
 504c044:	1cc0022e 	bgeu	r3,r19,504c050 <__mulsf3+0x2a0>
 504c048:	00800074 	movhi	r2,1
 504c04c:	4091883a 	add	r8,r8,r2
 504c050:	1804943a 	slli	r2,r3,16
 504c054:	31bfffcc 	andi	r6,r6,65535
 504c058:	1806d43a 	srli	r3,r3,16
 504c05c:	1185883a 	add	r2,r2,r6
 504c060:	102691ba 	slli	r19,r2,6
 504c064:	1a07883a 	add	r3,r3,r8
 504c068:	1004d6ba 	srli	r2,r2,26
 504c06c:	180891ba 	slli	r4,r3,6
 504c070:	9826c03a 	cmpne	r19,r19,zero
 504c074:	9884b03a 	or	r2,r19,r2
 504c078:	1126b03a 	or	r19,r2,r4
 504c07c:	9882002c 	andhi	r2,r19,2048
 504c080:	10000426 	beq	r2,zero,504c094 <__mulsf3+0x2e4>
 504c084:	9804d07a 	srli	r2,r19,1
 504c088:	9900004c 	andi	r4,r19,1
 504c08c:	3821883a 	mov	r16,r7
 504c090:	1126b03a 	or	r19,r2,r4
 504c094:	80c01fc4 	addi	r3,r16,127
 504c098:	00c0210e 	bge	zero,r3,504c120 <__mulsf3+0x370>
 504c09c:	988001cc 	andi	r2,r19,7
 504c0a0:	10000426 	beq	r2,zero,504c0b4 <__mulsf3+0x304>
 504c0a4:	988003cc 	andi	r2,r19,15
 504c0a8:	01000104 	movi	r4,4
 504c0ac:	11000126 	beq	r2,r4,504c0b4 <__mulsf3+0x304>
 504c0b0:	9927883a 	add	r19,r19,r4
 504c0b4:	9882002c 	andhi	r2,r19,2048
 504c0b8:	10000426 	beq	r2,zero,504c0cc <__mulsf3+0x31c>
 504c0bc:	00be0034 	movhi	r2,63488
 504c0c0:	10bfffc4 	addi	r2,r2,-1
 504c0c4:	80c02004 	addi	r3,r16,128
 504c0c8:	98a6703a 	and	r19,r19,r2
 504c0cc:	00803f84 	movi	r2,254
 504c0d0:	10ffa916 	blt	r2,r3,504bf78 <_gp+0xfffe0b50>
 504c0d4:	980891ba 	slli	r4,r19,6
 504c0d8:	a829883a 	mov	r20,r21
 504c0dc:	2008d27a 	srli	r4,r4,9
 504c0e0:	003f8606 	br	504befc <_gp+0xfffe0ad4>
 504c0e4:	9080102c 	andhi	r2,r18,64
 504c0e8:	10000826 	beq	r2,zero,504c10c <__mulsf3+0x35c>
 504c0ec:	9880102c 	andhi	r2,r19,64
 504c0f0:	1000061e 	bne	r2,zero,504c10c <__mulsf3+0x35c>
 504c0f4:	00802034 	movhi	r2,128
 504c0f8:	99001034 	orhi	r4,r19,64
 504c0fc:	10bfffc4 	addi	r2,r2,-1
 504c100:	b029883a 	mov	r20,r22
 504c104:	2088703a 	and	r4,r4,r2
 504c108:	003fba06 	br	504bff4 <_gp+0xfffe0bcc>
 504c10c:	00802034 	movhi	r2,128
 504c110:	91001034 	orhi	r4,r18,64
 504c114:	10bfffc4 	addi	r2,r2,-1
 504c118:	2088703a 	and	r4,r4,r2
 504c11c:	003fb506 	br	504bff4 <_gp+0xfffe0bcc>
 504c120:	00800044 	movi	r2,1
 504c124:	10c7c83a 	sub	r3,r2,r3
 504c128:	008006c4 	movi	r2,27
 504c12c:	10ff7016 	blt	r2,r3,504bef0 <_gp+0xfffe0ac8>
 504c130:	00800804 	movi	r2,32
 504c134:	10c5c83a 	sub	r2,r2,r3
 504c138:	9884983a 	sll	r2,r19,r2
 504c13c:	98c6d83a 	srl	r3,r19,r3
 504c140:	1004c03a 	cmpne	r2,r2,zero
 504c144:	1884b03a 	or	r2,r3,r2
 504c148:	10c001cc 	andi	r3,r2,7
 504c14c:	18000426 	beq	r3,zero,504c160 <__mulsf3+0x3b0>
 504c150:	10c003cc 	andi	r3,r2,15
 504c154:	01000104 	movi	r4,4
 504c158:	19000126 	beq	r3,r4,504c160 <__mulsf3+0x3b0>
 504c15c:	1105883a 	add	r2,r2,r4
 504c160:	10c1002c 	andhi	r3,r2,1024
 504c164:	18000626 	beq	r3,zero,504c180 <__mulsf3+0x3d0>
 504c168:	a829883a 	mov	r20,r21
 504c16c:	00c00044 	movi	r3,1
 504c170:	0009883a 	mov	r4,zero
 504c174:	003f6106 	br	504befc <_gp+0xfffe0ad4>
 504c178:	3821883a 	mov	r16,r7
 504c17c:	003fc506 	br	504c094 <_gp+0xfffe0c6c>
 504c180:	100491ba 	slli	r2,r2,6
 504c184:	a829883a 	mov	r20,r21
 504c188:	0007883a 	mov	r3,zero
 504c18c:	1008d27a 	srli	r4,r2,9
 504c190:	003f5a06 	br	504befc <_gp+0xfffe0ad4>
 504c194:	00802034 	movhi	r2,128
 504c198:	99001034 	orhi	r4,r19,64
 504c19c:	10bfffc4 	addi	r2,r2,-1
 504c1a0:	a829883a 	mov	r20,r21
 504c1a4:	2088703a 	and	r4,r4,r2
 504c1a8:	003f9206 	br	504bff4 <_gp+0xfffe0bcc>

0504c1ac <__subsf3>:
 504c1ac:	defffc04 	addi	sp,sp,-16
 504c1b0:	280cd5fa 	srli	r6,r5,23
 504c1b4:	dc000015 	stw	r16,0(sp)
 504c1b8:	01c02034 	movhi	r7,128
 504c1bc:	2020d5fa 	srli	r16,r4,23
 504c1c0:	39ffffc4 	addi	r7,r7,-1
 504c1c4:	3906703a 	and	r3,r7,r4
 504c1c8:	dc400115 	stw	r17,4(sp)
 504c1cc:	394e703a 	and	r7,r7,r5
 504c1d0:	2022d7fa 	srli	r17,r4,31
 504c1d4:	dfc00315 	stw	ra,12(sp)
 504c1d8:	dc800215 	stw	r18,8(sp)
 504c1dc:	31803fcc 	andi	r6,r6,255
 504c1e0:	01003fc4 	movi	r4,255
 504c1e4:	84003fcc 	andi	r16,r16,255
 504c1e8:	180690fa 	slli	r3,r3,3
 504c1ec:	2804d7fa 	srli	r2,r5,31
 504c1f0:	380e90fa 	slli	r7,r7,3
 504c1f4:	31006d26 	beq	r6,r4,504c3ac <__subsf3+0x200>
 504c1f8:	1080005c 	xori	r2,r2,1
 504c1fc:	8189c83a 	sub	r4,r16,r6
 504c200:	14404f26 	beq	r2,r17,504c340 <__subsf3+0x194>
 504c204:	0100770e 	bge	zero,r4,504c3e4 <__subsf3+0x238>
 504c208:	30001e1e 	bne	r6,zero,504c284 <__subsf3+0xd8>
 504c20c:	38006a1e 	bne	r7,zero,504c3b8 <__subsf3+0x20c>
 504c210:	188001cc 	andi	r2,r3,7
 504c214:	10000426 	beq	r2,zero,504c228 <__subsf3+0x7c>
 504c218:	188003cc 	andi	r2,r3,15
 504c21c:	01000104 	movi	r4,4
 504c220:	11000126 	beq	r2,r4,504c228 <__subsf3+0x7c>
 504c224:	1907883a 	add	r3,r3,r4
 504c228:	1881002c 	andhi	r2,r3,1024
 504c22c:	10003926 	beq	r2,zero,504c314 <__subsf3+0x168>
 504c230:	84000044 	addi	r16,r16,1
 504c234:	00803fc4 	movi	r2,255
 504c238:	80807526 	beq	r16,r2,504c410 <__subsf3+0x264>
 504c23c:	180691ba 	slli	r3,r3,6
 504c240:	8880004c 	andi	r2,r17,1
 504c244:	180ad27a 	srli	r5,r3,9
 504c248:	84003fcc 	andi	r16,r16,255
 504c24c:	800695fa 	slli	r3,r16,23
 504c250:	10803fcc 	andi	r2,r2,255
 504c254:	01002034 	movhi	r4,128
 504c258:	213fffc4 	addi	r4,r4,-1
 504c25c:	100497fa 	slli	r2,r2,31
 504c260:	2920703a 	and	r16,r5,r4
 504c264:	80e0b03a 	or	r16,r16,r3
 504c268:	8084b03a 	or	r2,r16,r2
 504c26c:	dfc00317 	ldw	ra,12(sp)
 504c270:	dc800217 	ldw	r18,8(sp)
 504c274:	dc400117 	ldw	r17,4(sp)
 504c278:	dc000017 	ldw	r16,0(sp)
 504c27c:	dec00404 	addi	sp,sp,16
 504c280:	f800283a 	ret
 504c284:	00803fc4 	movi	r2,255
 504c288:	80bfe126 	beq	r16,r2,504c210 <_gp+0xfffe0de8>
 504c28c:	39c10034 	orhi	r7,r7,1024
 504c290:	008006c4 	movi	r2,27
 504c294:	11007416 	blt	r2,r4,504c468 <__subsf3+0x2bc>
 504c298:	00800804 	movi	r2,32
 504c29c:	1105c83a 	sub	r2,r2,r4
 504c2a0:	3884983a 	sll	r2,r7,r2
 504c2a4:	390ed83a 	srl	r7,r7,r4
 504c2a8:	1008c03a 	cmpne	r4,r2,zero
 504c2ac:	390eb03a 	or	r7,r7,r4
 504c2b0:	19c7c83a 	sub	r3,r3,r7
 504c2b4:	1881002c 	andhi	r2,r3,1024
 504c2b8:	10001426 	beq	r2,zero,504c30c <__subsf3+0x160>
 504c2bc:	04810034 	movhi	r18,1024
 504c2c0:	94bfffc4 	addi	r18,r18,-1
 504c2c4:	1ca4703a 	and	r18,r3,r18
 504c2c8:	9009883a 	mov	r4,r18
 504c2cc:	504f0340 	call	504f034 <__clzsi2>
 504c2d0:	10bffec4 	addi	r2,r2,-5
 504c2d4:	90a4983a 	sll	r18,r18,r2
 504c2d8:	14005116 	blt	r2,r16,504c420 <__subsf3+0x274>
 504c2dc:	1405c83a 	sub	r2,r2,r16
 504c2e0:	10c00044 	addi	r3,r2,1
 504c2e4:	00800804 	movi	r2,32
 504c2e8:	10c5c83a 	sub	r2,r2,r3
 504c2ec:	9084983a 	sll	r2,r18,r2
 504c2f0:	90e4d83a 	srl	r18,r18,r3
 504c2f4:	0021883a 	mov	r16,zero
 504c2f8:	1006c03a 	cmpne	r3,r2,zero
 504c2fc:	90c6b03a 	or	r3,r18,r3
 504c300:	003fc306 	br	504c210 <_gp+0xfffe0de8>
 504c304:	2000e026 	beq	r4,zero,504c688 <__subsf3+0x4dc>
 504c308:	2007883a 	mov	r3,r4
 504c30c:	188001cc 	andi	r2,r3,7
 504c310:	103fc11e 	bne	r2,zero,504c218 <_gp+0xfffe0df0>
 504c314:	180ad0fa 	srli	r5,r3,3
 504c318:	00c03fc4 	movi	r3,255
 504c31c:	8880004c 	andi	r2,r17,1
 504c320:	80c0031e 	bne	r16,r3,504c330 <__subsf3+0x184>
 504c324:	28006d26 	beq	r5,zero,504c4dc <__subsf3+0x330>
 504c328:	29401034 	orhi	r5,r5,64
 504c32c:	043fffc4 	movi	r16,-1
 504c330:	00c02034 	movhi	r3,128
 504c334:	18ffffc4 	addi	r3,r3,-1
 504c338:	28ca703a 	and	r5,r5,r3
 504c33c:	003fc206 	br	504c248 <_gp+0xfffe0e20>
 504c340:	01003c0e 	bge	zero,r4,504c434 <__subsf3+0x288>
 504c344:	30002126 	beq	r6,zero,504c3cc <__subsf3+0x220>
 504c348:	01403fc4 	movi	r5,255
 504c34c:	817fb026 	beq	r16,r5,504c210 <_gp+0xfffe0de8>
 504c350:	39c10034 	orhi	r7,r7,1024
 504c354:	014006c4 	movi	r5,27
 504c358:	29007416 	blt	r5,r4,504c52c <__subsf3+0x380>
 504c35c:	01400804 	movi	r5,32
 504c360:	290bc83a 	sub	r5,r5,r4
 504c364:	394a983a 	sll	r5,r7,r5
 504c368:	390ed83a 	srl	r7,r7,r4
 504c36c:	2808c03a 	cmpne	r4,r5,zero
 504c370:	390eb03a 	or	r7,r7,r4
 504c374:	19c7883a 	add	r3,r3,r7
 504c378:	1901002c 	andhi	r4,r3,1024
 504c37c:	20003826 	beq	r4,zero,504c460 <__subsf3+0x2b4>
 504c380:	84000044 	addi	r16,r16,1
 504c384:	01003fc4 	movi	r4,255
 504c388:	81005426 	beq	r16,r4,504c4dc <__subsf3+0x330>
 504c38c:	1023883a 	mov	r17,r2
 504c390:	00bf0034 	movhi	r2,64512
 504c394:	10bfffc4 	addi	r2,r2,-1
 504c398:	1900004c 	andi	r4,r3,1
 504c39c:	1886703a 	and	r3,r3,r2
 504c3a0:	1806d07a 	srli	r3,r3,1
 504c3a4:	1906b03a 	or	r3,r3,r4
 504c3a8:	003f9906 	br	504c210 <_gp+0xfffe0de8>
 504c3ac:	383f9226 	beq	r7,zero,504c1f8 <_gp+0xfffe0dd0>
 504c3b0:	10803fcc 	andi	r2,r2,255
 504c3b4:	003f9106 	br	504c1fc <_gp+0xfffe0dd4>
 504c3b8:	213fffc4 	addi	r4,r4,-1
 504c3bc:	203fbc26 	beq	r4,zero,504c2b0 <_gp+0xfffe0e88>
 504c3c0:	00803fc4 	movi	r2,255
 504c3c4:	80bfb21e 	bne	r16,r2,504c290 <_gp+0xfffe0e68>
 504c3c8:	003f9106 	br	504c210 <_gp+0xfffe0de8>
 504c3cc:	383f9026 	beq	r7,zero,504c210 <_gp+0xfffe0de8>
 504c3d0:	213fffc4 	addi	r4,r4,-1
 504c3d4:	203fe726 	beq	r4,zero,504c374 <_gp+0xfffe0f4c>
 504c3d8:	01403fc4 	movi	r5,255
 504c3dc:	817fdd1e 	bne	r16,r5,504c354 <_gp+0xfffe0f2c>
 504c3e0:	003f8b06 	br	504c210 <_gp+0xfffe0de8>
 504c3e4:	2000221e 	bne	r4,zero,504c470 <__subsf3+0x2c4>
 504c3e8:	81000044 	addi	r4,r16,1
 504c3ec:	21003fcc 	andi	r4,r4,255
 504c3f0:	01400044 	movi	r5,1
 504c3f4:	2900470e 	bge	r5,r4,504c514 <__subsf3+0x368>
 504c3f8:	19e5c83a 	sub	r18,r3,r7
 504c3fc:	9141002c 	andhi	r5,r18,1024
 504c400:	28002d26 	beq	r5,zero,504c4b8 <__subsf3+0x30c>
 504c404:	38e5c83a 	sub	r18,r7,r3
 504c408:	1023883a 	mov	r17,r2
 504c40c:	003fae06 	br	504c2c8 <_gp+0xfffe0ea0>
 504c410:	8880004c 	andi	r2,r17,1
 504c414:	043fffc4 	movi	r16,-1
 504c418:	000b883a 	mov	r5,zero
 504c41c:	003f8a06 	br	504c248 <_gp+0xfffe0e20>
 504c420:	00ff0034 	movhi	r3,64512
 504c424:	18ffffc4 	addi	r3,r3,-1
 504c428:	80a1c83a 	sub	r16,r16,r2
 504c42c:	90c6703a 	and	r3,r18,r3
 504c430:	003f7706 	br	504c210 <_gp+0xfffe0de8>
 504c434:	2000431e 	bne	r4,zero,504c544 <__subsf3+0x398>
 504c438:	81000044 	addi	r4,r16,1
 504c43c:	21803fcc 	andi	r6,r4,255
 504c440:	01400044 	movi	r5,1
 504c444:	2980280e 	bge	r5,r6,504c4e8 <__subsf3+0x33c>
 504c448:	01403fc4 	movi	r5,255
 504c44c:	21402326 	beq	r4,r5,504c4dc <__subsf3+0x330>
 504c450:	19c7883a 	add	r3,r3,r7
 504c454:	1806d07a 	srli	r3,r3,1
 504c458:	2021883a 	mov	r16,r4
 504c45c:	003f6c06 	br	504c210 <_gp+0xfffe0de8>
 504c460:	1023883a 	mov	r17,r2
 504c464:	003fa906 	br	504c30c <_gp+0xfffe0ee4>
 504c468:	01c00044 	movi	r7,1
 504c46c:	003f9006 	br	504c2b0 <_gp+0xfffe0e88>
 504c470:	8000151e 	bne	r16,zero,504c4c8 <__subsf3+0x31c>
 504c474:	18002f26 	beq	r3,zero,504c534 <__subsf3+0x388>
 504c478:	0108303a 	nor	r4,zero,r4
 504c47c:	20000a26 	beq	r4,zero,504c4a8 <__subsf3+0x2fc>
 504c480:	01403fc4 	movi	r5,255
 504c484:	31402b26 	beq	r6,r5,504c534 <__subsf3+0x388>
 504c488:	014006c4 	movi	r5,27
 504c48c:	29006e16 	blt	r5,r4,504c648 <__subsf3+0x49c>
 504c490:	01400804 	movi	r5,32
 504c494:	290bc83a 	sub	r5,r5,r4
 504c498:	194a983a 	sll	r5,r3,r5
 504c49c:	1908d83a 	srl	r4,r3,r4
 504c4a0:	2806c03a 	cmpne	r3,r5,zero
 504c4a4:	20c6b03a 	or	r3,r4,r3
 504c4a8:	38c7c83a 	sub	r3,r7,r3
 504c4ac:	3021883a 	mov	r16,r6
 504c4b0:	1023883a 	mov	r17,r2
 504c4b4:	003f7f06 	br	504c2b4 <_gp+0xfffe0e8c>
 504c4b8:	903f831e 	bne	r18,zero,504c2c8 <_gp+0xfffe0ea0>
 504c4bc:	0005883a 	mov	r2,zero
 504c4c0:	0021883a 	mov	r16,zero
 504c4c4:	003f9a06 	br	504c330 <_gp+0xfffe0f08>
 504c4c8:	01403fc4 	movi	r5,255
 504c4cc:	31401926 	beq	r6,r5,504c534 <__subsf3+0x388>
 504c4d0:	0109c83a 	sub	r4,zero,r4
 504c4d4:	18c10034 	orhi	r3,r3,1024
 504c4d8:	003feb06 	br	504c488 <_gp+0xfffe1060>
 504c4dc:	043fffc4 	movi	r16,-1
 504c4e0:	000b883a 	mov	r5,zero
 504c4e4:	003f5806 	br	504c248 <_gp+0xfffe0e20>
 504c4e8:	8000481e 	bne	r16,zero,504c60c <__subsf3+0x460>
 504c4ec:	18006226 	beq	r3,zero,504c678 <__subsf3+0x4cc>
 504c4f0:	383f4726 	beq	r7,zero,504c210 <_gp+0xfffe0de8>
 504c4f4:	19c7883a 	add	r3,r3,r7
 504c4f8:	1881002c 	andhi	r2,r3,1024
 504c4fc:	103f8326 	beq	r2,zero,504c30c <_gp+0xfffe0ee4>
 504c500:	00bf0034 	movhi	r2,64512
 504c504:	10bfffc4 	addi	r2,r2,-1
 504c508:	2821883a 	mov	r16,r5
 504c50c:	1886703a 	and	r3,r3,r2
 504c510:	003f3f06 	br	504c210 <_gp+0xfffe0de8>
 504c514:	80001c1e 	bne	r16,zero,504c588 <__subsf3+0x3dc>
 504c518:	1800261e 	bne	r3,zero,504c5b4 <__subsf3+0x408>
 504c51c:	38004c26 	beq	r7,zero,504c650 <__subsf3+0x4a4>
 504c520:	3807883a 	mov	r3,r7
 504c524:	1023883a 	mov	r17,r2
 504c528:	003f3906 	br	504c210 <_gp+0xfffe0de8>
 504c52c:	01c00044 	movi	r7,1
 504c530:	003f9006 	br	504c374 <_gp+0xfffe0f4c>
 504c534:	3807883a 	mov	r3,r7
 504c538:	3021883a 	mov	r16,r6
 504c53c:	1023883a 	mov	r17,r2
 504c540:	003f3306 	br	504c210 <_gp+0xfffe0de8>
 504c544:	8000161e 	bne	r16,zero,504c5a0 <__subsf3+0x3f4>
 504c548:	18002d26 	beq	r3,zero,504c600 <__subsf3+0x454>
 504c54c:	0108303a 	nor	r4,zero,r4
 504c550:	20000a26 	beq	r4,zero,504c57c <__subsf3+0x3d0>
 504c554:	01403fc4 	movi	r5,255
 504c558:	31402926 	beq	r6,r5,504c600 <__subsf3+0x454>
 504c55c:	014006c4 	movi	r5,27
 504c560:	29004716 	blt	r5,r4,504c680 <__subsf3+0x4d4>
 504c564:	01400804 	movi	r5,32
 504c568:	290bc83a 	sub	r5,r5,r4
 504c56c:	194a983a 	sll	r5,r3,r5
 504c570:	1908d83a 	srl	r4,r3,r4
 504c574:	2806c03a 	cmpne	r3,r5,zero
 504c578:	20c6b03a 	or	r3,r4,r3
 504c57c:	19c7883a 	add	r3,r3,r7
 504c580:	3021883a 	mov	r16,r6
 504c584:	003f7c06 	br	504c378 <_gp+0xfffe0f50>
 504c588:	1800111e 	bne	r3,zero,504c5d0 <__subsf3+0x424>
 504c58c:	38003326 	beq	r7,zero,504c65c <__subsf3+0x4b0>
 504c590:	3807883a 	mov	r3,r7
 504c594:	1023883a 	mov	r17,r2
 504c598:	04003fc4 	movi	r16,255
 504c59c:	003f1c06 	br	504c210 <_gp+0xfffe0de8>
 504c5a0:	01403fc4 	movi	r5,255
 504c5a4:	31401626 	beq	r6,r5,504c600 <__subsf3+0x454>
 504c5a8:	0109c83a 	sub	r4,zero,r4
 504c5ac:	18c10034 	orhi	r3,r3,1024
 504c5b0:	003fea06 	br	504c55c <_gp+0xfffe1134>
 504c5b4:	383f1626 	beq	r7,zero,504c210 <_gp+0xfffe0de8>
 504c5b8:	19c9c83a 	sub	r4,r3,r7
 504c5bc:	2141002c 	andhi	r5,r4,1024
 504c5c0:	283f5026 	beq	r5,zero,504c304 <_gp+0xfffe0edc>
 504c5c4:	38c7c83a 	sub	r3,r7,r3
 504c5c8:	1023883a 	mov	r17,r2
 504c5cc:	003f1006 	br	504c210 <_gp+0xfffe0de8>
 504c5d0:	38001b26 	beq	r7,zero,504c640 <__subsf3+0x494>
 504c5d4:	1806d0fa 	srli	r3,r3,3
 504c5d8:	1900102c 	andhi	r4,r3,64
 504c5dc:	20000526 	beq	r4,zero,504c5f4 <__subsf3+0x448>
 504c5e0:	380ed0fa 	srli	r7,r7,3
 504c5e4:	3900102c 	andhi	r4,r7,64
 504c5e8:	2000021e 	bne	r4,zero,504c5f4 <__subsf3+0x448>
 504c5ec:	3807883a 	mov	r3,r7
 504c5f0:	1023883a 	mov	r17,r2
 504c5f4:	180690fa 	slli	r3,r3,3
 504c5f8:	04003fc4 	movi	r16,255
 504c5fc:	003f0406 	br	504c210 <_gp+0xfffe0de8>
 504c600:	3807883a 	mov	r3,r7
 504c604:	3021883a 	mov	r16,r6
 504c608:	003f0106 	br	504c210 <_gp+0xfffe0de8>
 504c60c:	18001726 	beq	r3,zero,504c66c <__subsf3+0x4c0>
 504c610:	38000b26 	beq	r7,zero,504c640 <__subsf3+0x494>
 504c614:	1806d0fa 	srli	r3,r3,3
 504c618:	1900102c 	andhi	r4,r3,64
 504c61c:	20000426 	beq	r4,zero,504c630 <__subsf3+0x484>
 504c620:	380ed0fa 	srli	r7,r7,3
 504c624:	3900102c 	andhi	r4,r7,64
 504c628:	2000011e 	bne	r4,zero,504c630 <__subsf3+0x484>
 504c62c:	3807883a 	mov	r3,r7
 504c630:	180690fa 	slli	r3,r3,3
 504c634:	1023883a 	mov	r17,r2
 504c638:	04003fc4 	movi	r16,255
 504c63c:	003ef406 	br	504c210 <_gp+0xfffe0de8>
 504c640:	04003fc4 	movi	r16,255
 504c644:	003ef206 	br	504c210 <_gp+0xfffe0de8>
 504c648:	00c00044 	movi	r3,1
 504c64c:	003f9606 	br	504c4a8 <_gp+0xfffe1080>
 504c650:	000b883a 	mov	r5,zero
 504c654:	0005883a 	mov	r2,zero
 504c658:	003f3506 	br	504c330 <_gp+0xfffe0f08>
 504c65c:	01402034 	movhi	r5,128
 504c660:	297fffc4 	addi	r5,r5,-1
 504c664:	0005883a 	mov	r2,zero
 504c668:	003f2f06 	br	504c328 <_gp+0xfffe0f00>
 504c66c:	3807883a 	mov	r3,r7
 504c670:	04003fc4 	movi	r16,255
 504c674:	003ee606 	br	504c210 <_gp+0xfffe0de8>
 504c678:	3807883a 	mov	r3,r7
 504c67c:	003ee406 	br	504c210 <_gp+0xfffe0de8>
 504c680:	00c00044 	movi	r3,1
 504c684:	003fbd06 	br	504c57c <_gp+0xfffe1154>
 504c688:	0005883a 	mov	r2,zero
 504c68c:	003f2806 	br	504c330 <_gp+0xfffe0f08>

0504c690 <__fixsfsi>:
 504c690:	200ad5fa 	srli	r5,r4,23
 504c694:	00c02034 	movhi	r3,128
 504c698:	18ffffc4 	addi	r3,r3,-1
 504c69c:	29403fcc 	andi	r5,r5,255
 504c6a0:	00801f84 	movi	r2,126
 504c6a4:	1906703a 	and	r3,r3,r4
 504c6a8:	2008d7fa 	srli	r4,r4,31
 504c6ac:	11400e0e 	bge	r2,r5,504c6e8 <__fixsfsi+0x58>
 504c6b0:	00802744 	movi	r2,157
 504c6b4:	11400816 	blt	r2,r5,504c6d8 <__fixsfsi+0x48>
 504c6b8:	00802544 	movi	r2,149
 504c6bc:	18c02034 	orhi	r3,r3,128
 504c6c0:	11400b0e 	bge	r2,r5,504c6f0 <__fixsfsi+0x60>
 504c6c4:	28bfda84 	addi	r2,r5,-150
 504c6c8:	1884983a 	sll	r2,r3,r2
 504c6cc:	20000726 	beq	r4,zero,504c6ec <__fixsfsi+0x5c>
 504c6d0:	0085c83a 	sub	r2,zero,r2
 504c6d4:	f800283a 	ret
 504c6d8:	00a00034 	movhi	r2,32768
 504c6dc:	10bfffc4 	addi	r2,r2,-1
 504c6e0:	2085883a 	add	r2,r4,r2
 504c6e4:	f800283a 	ret
 504c6e8:	0005883a 	mov	r2,zero
 504c6ec:	f800283a 	ret
 504c6f0:	00802584 	movi	r2,150
 504c6f4:	1145c83a 	sub	r2,r2,r5
 504c6f8:	1884d83a 	srl	r2,r3,r2
 504c6fc:	003ff306 	br	504c6cc <_gp+0xfffe12a4>

0504c700 <__floatsisf>:
 504c700:	defffd04 	addi	sp,sp,-12
 504c704:	dfc00215 	stw	ra,8(sp)
 504c708:	dc400115 	stw	r17,4(sp)
 504c70c:	dc000015 	stw	r16,0(sp)
 504c710:	20003526 	beq	r4,zero,504c7e8 <__floatsisf+0xe8>
 504c714:	2021883a 	mov	r16,r4
 504c718:	2022d7fa 	srli	r17,r4,31
 504c71c:	20003616 	blt	r4,zero,504c7f8 <__floatsisf+0xf8>
 504c720:	8009883a 	mov	r4,r16
 504c724:	504f0340 	call	504f034 <__clzsi2>
 504c728:	00c02784 	movi	r3,158
 504c72c:	1887c83a 	sub	r3,r3,r2
 504c730:	01002584 	movi	r4,150
 504c734:	20c01416 	blt	r4,r3,504c788 <__floatsisf+0x88>
 504c738:	20c9c83a 	sub	r4,r4,r3
 504c73c:	8120983a 	sll	r16,r16,r4
 504c740:	00802034 	movhi	r2,128
 504c744:	10bfffc4 	addi	r2,r2,-1
 504c748:	8809883a 	mov	r4,r17
 504c74c:	80a0703a 	and	r16,r16,r2
 504c750:	18803fcc 	andi	r2,r3,255
 504c754:	100695fa 	slli	r3,r2,23
 504c758:	20803fcc 	andi	r2,r4,255
 504c75c:	100897fa 	slli	r4,r2,31
 504c760:	00802034 	movhi	r2,128
 504c764:	10bfffc4 	addi	r2,r2,-1
 504c768:	8084703a 	and	r2,r16,r2
 504c76c:	10c4b03a 	or	r2,r2,r3
 504c770:	1104b03a 	or	r2,r2,r4
 504c774:	dfc00217 	ldw	ra,8(sp)
 504c778:	dc400117 	ldw	r17,4(sp)
 504c77c:	dc000017 	ldw	r16,0(sp)
 504c780:	dec00304 	addi	sp,sp,12
 504c784:	f800283a 	ret
 504c788:	01002644 	movi	r4,153
 504c78c:	20c01c16 	blt	r4,r3,504c800 <__floatsisf+0x100>
 504c790:	20c9c83a 	sub	r4,r4,r3
 504c794:	8120983a 	sll	r16,r16,r4
 504c798:	013f0034 	movhi	r4,64512
 504c79c:	213fffc4 	addi	r4,r4,-1
 504c7a0:	814001cc 	andi	r5,r16,7
 504c7a4:	8108703a 	and	r4,r16,r4
 504c7a8:	28000426 	beq	r5,zero,504c7bc <__floatsisf+0xbc>
 504c7ac:	840003cc 	andi	r16,r16,15
 504c7b0:	01400104 	movi	r5,4
 504c7b4:	81400126 	beq	r16,r5,504c7bc <__floatsisf+0xbc>
 504c7b8:	2149883a 	add	r4,r4,r5
 504c7bc:	2141002c 	andhi	r5,r4,1024
 504c7c0:	28000526 	beq	r5,zero,504c7d8 <__floatsisf+0xd8>
 504c7c4:	00c027c4 	movi	r3,159
 504c7c8:	1887c83a 	sub	r3,r3,r2
 504c7cc:	00bf0034 	movhi	r2,64512
 504c7d0:	10bfffc4 	addi	r2,r2,-1
 504c7d4:	2088703a 	and	r4,r4,r2
 504c7d8:	202091ba 	slli	r16,r4,6
 504c7dc:	8809883a 	mov	r4,r17
 504c7e0:	8020d27a 	srli	r16,r16,9
 504c7e4:	003fda06 	br	504c750 <_gp+0xfffe1328>
 504c7e8:	0009883a 	mov	r4,zero
 504c7ec:	0007883a 	mov	r3,zero
 504c7f0:	0021883a 	mov	r16,zero
 504c7f4:	003fd606 	br	504c750 <_gp+0xfffe1328>
 504c7f8:	0121c83a 	sub	r16,zero,r4
 504c7fc:	003fc806 	br	504c720 <_gp+0xfffe12f8>
 504c800:	01002e44 	movi	r4,185
 504c804:	20c9c83a 	sub	r4,r4,r3
 504c808:	01400144 	movi	r5,5
 504c80c:	8108983a 	sll	r4,r16,r4
 504c810:	288bc83a 	sub	r5,r5,r2
 504c814:	8160d83a 	srl	r16,r16,r5
 504c818:	2008c03a 	cmpne	r4,r4,zero
 504c81c:	8120b03a 	or	r16,r16,r4
 504c820:	003fdd06 	br	504c798 <_gp+0xfffe1370>

0504c824 <__floatunsisf>:
 504c824:	defffe04 	addi	sp,sp,-8
 504c828:	dfc00115 	stw	ra,4(sp)
 504c82c:	dc000015 	stw	r16,0(sp)
 504c830:	20002c26 	beq	r4,zero,504c8e4 <__floatunsisf+0xc0>
 504c834:	2021883a 	mov	r16,r4
 504c838:	504f0340 	call	504f034 <__clzsi2>
 504c83c:	00c02784 	movi	r3,158
 504c840:	1887c83a 	sub	r3,r3,r2
 504c844:	01002584 	movi	r4,150
 504c848:	20c00f16 	blt	r4,r3,504c888 <__floatunsisf+0x64>
 504c84c:	20c9c83a 	sub	r4,r4,r3
 504c850:	8108983a 	sll	r4,r16,r4
 504c854:	00802034 	movhi	r2,128
 504c858:	10bfffc4 	addi	r2,r2,-1
 504c85c:	2088703a 	and	r4,r4,r2
 504c860:	18803fcc 	andi	r2,r3,255
 504c864:	100695fa 	slli	r3,r2,23
 504c868:	00802034 	movhi	r2,128
 504c86c:	10bfffc4 	addi	r2,r2,-1
 504c870:	2084703a 	and	r2,r4,r2
 504c874:	10c4b03a 	or	r2,r2,r3
 504c878:	dfc00117 	ldw	ra,4(sp)
 504c87c:	dc000017 	ldw	r16,0(sp)
 504c880:	dec00204 	addi	sp,sp,8
 504c884:	f800283a 	ret
 504c888:	01002644 	movi	r4,153
 504c88c:	20c01816 	blt	r4,r3,504c8f0 <__floatunsisf+0xcc>
 504c890:	20c9c83a 	sub	r4,r4,r3
 504c894:	8108983a 	sll	r4,r16,r4
 504c898:	017f0034 	movhi	r5,64512
 504c89c:	297fffc4 	addi	r5,r5,-1
 504c8a0:	218001cc 	andi	r6,r4,7
 504c8a4:	214a703a 	and	r5,r4,r5
 504c8a8:	30000426 	beq	r6,zero,504c8bc <__floatunsisf+0x98>
 504c8ac:	210003cc 	andi	r4,r4,15
 504c8b0:	01800104 	movi	r6,4
 504c8b4:	21800126 	beq	r4,r6,504c8bc <__floatunsisf+0x98>
 504c8b8:	298b883a 	add	r5,r5,r6
 504c8bc:	2901002c 	andhi	r4,r5,1024
 504c8c0:	20000526 	beq	r4,zero,504c8d8 <__floatunsisf+0xb4>
 504c8c4:	00c027c4 	movi	r3,159
 504c8c8:	1887c83a 	sub	r3,r3,r2
 504c8cc:	00bf0034 	movhi	r2,64512
 504c8d0:	10bfffc4 	addi	r2,r2,-1
 504c8d4:	288a703a 	and	r5,r5,r2
 504c8d8:	280891ba 	slli	r4,r5,6
 504c8dc:	2008d27a 	srli	r4,r4,9
 504c8e0:	003fdf06 	br	504c860 <_gp+0xfffe1438>
 504c8e4:	0007883a 	mov	r3,zero
 504c8e8:	0009883a 	mov	r4,zero
 504c8ec:	003fdc06 	br	504c860 <_gp+0xfffe1438>
 504c8f0:	01402e44 	movi	r5,185
 504c8f4:	28cbc83a 	sub	r5,r5,r3
 504c8f8:	01000144 	movi	r4,5
 504c8fc:	2089c83a 	sub	r4,r4,r2
 504c900:	814a983a 	sll	r5,r16,r5
 504c904:	8108d83a 	srl	r4,r16,r4
 504c908:	2820c03a 	cmpne	r16,r5,zero
 504c90c:	2408b03a 	or	r4,r4,r16
 504c910:	003fe106 	br	504c898 <_gp+0xfffe1470>

0504c914 <__adddf3>:
 504c914:	02c00434 	movhi	r11,16
 504c918:	5affffc4 	addi	r11,r11,-1
 504c91c:	2806d7fa 	srli	r3,r5,31
 504c920:	2ad4703a 	and	r10,r5,r11
 504c924:	3ad2703a 	and	r9,r7,r11
 504c928:	3804d53a 	srli	r2,r7,20
 504c92c:	3018d77a 	srli	r12,r6,29
 504c930:	280ad53a 	srli	r5,r5,20
 504c934:	501490fa 	slli	r10,r10,3
 504c938:	2010d77a 	srli	r8,r4,29
 504c93c:	481290fa 	slli	r9,r9,3
 504c940:	380ed7fa 	srli	r7,r7,31
 504c944:	defffb04 	addi	sp,sp,-20
 504c948:	dc800215 	stw	r18,8(sp)
 504c94c:	dc400115 	stw	r17,4(sp)
 504c950:	dc000015 	stw	r16,0(sp)
 504c954:	dfc00415 	stw	ra,16(sp)
 504c958:	dcc00315 	stw	r19,12(sp)
 504c95c:	1c803fcc 	andi	r18,r3,255
 504c960:	2c01ffcc 	andi	r16,r5,2047
 504c964:	5210b03a 	or	r8,r10,r8
 504c968:	202290fa 	slli	r17,r4,3
 504c96c:	1081ffcc 	andi	r2,r2,2047
 504c970:	4b12b03a 	or	r9,r9,r12
 504c974:	300c90fa 	slli	r6,r6,3
 504c978:	91c07526 	beq	r18,r7,504cb50 <__adddf3+0x23c>
 504c97c:	8087c83a 	sub	r3,r16,r2
 504c980:	00c0ab0e 	bge	zero,r3,504cc30 <__adddf3+0x31c>
 504c984:	10002a1e 	bne	r2,zero,504ca30 <__adddf3+0x11c>
 504c988:	4984b03a 	or	r2,r9,r6
 504c98c:	1000961e 	bne	r2,zero,504cbe8 <__adddf3+0x2d4>
 504c990:	888001cc 	andi	r2,r17,7
 504c994:	10000726 	beq	r2,zero,504c9b4 <__adddf3+0xa0>
 504c998:	888003cc 	andi	r2,r17,15
 504c99c:	00c00104 	movi	r3,4
 504c9a0:	10c00426 	beq	r2,r3,504c9b4 <__adddf3+0xa0>
 504c9a4:	88c7883a 	add	r3,r17,r3
 504c9a8:	1c63803a 	cmpltu	r17,r3,r17
 504c9ac:	4451883a 	add	r8,r8,r17
 504c9b0:	1823883a 	mov	r17,r3
 504c9b4:	4080202c 	andhi	r2,r8,128
 504c9b8:	10005926 	beq	r2,zero,504cb20 <__adddf3+0x20c>
 504c9bc:	84000044 	addi	r16,r16,1
 504c9c0:	0081ffc4 	movi	r2,2047
 504c9c4:	8080ba26 	beq	r16,r2,504ccb0 <__adddf3+0x39c>
 504c9c8:	00bfe034 	movhi	r2,65408
 504c9cc:	10bfffc4 	addi	r2,r2,-1
 504c9d0:	4090703a 	and	r8,r8,r2
 504c9d4:	4004977a 	slli	r2,r8,29
 504c9d8:	4010927a 	slli	r8,r8,9
 504c9dc:	8822d0fa 	srli	r17,r17,3
 504c9e0:	8401ffcc 	andi	r16,r16,2047
 504c9e4:	4010d33a 	srli	r8,r8,12
 504c9e8:	9007883a 	mov	r3,r18
 504c9ec:	1444b03a 	or	r2,r2,r17
 504c9f0:	8401ffcc 	andi	r16,r16,2047
 504c9f4:	8020953a 	slli	r16,r16,20
 504c9f8:	18c03fcc 	andi	r3,r3,255
 504c9fc:	01000434 	movhi	r4,16
 504ca00:	213fffc4 	addi	r4,r4,-1
 504ca04:	180697fa 	slli	r3,r3,31
 504ca08:	4110703a 	and	r8,r8,r4
 504ca0c:	4410b03a 	or	r8,r8,r16
 504ca10:	40c6b03a 	or	r3,r8,r3
 504ca14:	dfc00417 	ldw	ra,16(sp)
 504ca18:	dcc00317 	ldw	r19,12(sp)
 504ca1c:	dc800217 	ldw	r18,8(sp)
 504ca20:	dc400117 	ldw	r17,4(sp)
 504ca24:	dc000017 	ldw	r16,0(sp)
 504ca28:	dec00504 	addi	sp,sp,20
 504ca2c:	f800283a 	ret
 504ca30:	0081ffc4 	movi	r2,2047
 504ca34:	80bfd626 	beq	r16,r2,504c990 <_gp+0xfffe1568>
 504ca38:	4a402034 	orhi	r9,r9,128
 504ca3c:	00800e04 	movi	r2,56
 504ca40:	10c09f16 	blt	r2,r3,504ccc0 <__adddf3+0x3ac>
 504ca44:	008007c4 	movi	r2,31
 504ca48:	10c0c216 	blt	r2,r3,504cd54 <__adddf3+0x440>
 504ca4c:	00800804 	movi	r2,32
 504ca50:	10c5c83a 	sub	r2,r2,r3
 504ca54:	488a983a 	sll	r5,r9,r2
 504ca58:	30c8d83a 	srl	r4,r6,r3
 504ca5c:	3084983a 	sll	r2,r6,r2
 504ca60:	48c6d83a 	srl	r3,r9,r3
 504ca64:	290cb03a 	or	r6,r5,r4
 504ca68:	1004c03a 	cmpne	r2,r2,zero
 504ca6c:	308cb03a 	or	r6,r6,r2
 504ca70:	898dc83a 	sub	r6,r17,r6
 504ca74:	89a3803a 	cmpltu	r17,r17,r6
 504ca78:	40d1c83a 	sub	r8,r8,r3
 504ca7c:	4451c83a 	sub	r8,r8,r17
 504ca80:	3023883a 	mov	r17,r6
 504ca84:	4080202c 	andhi	r2,r8,128
 504ca88:	10002326 	beq	r2,zero,504cb18 <__adddf3+0x204>
 504ca8c:	04c02034 	movhi	r19,128
 504ca90:	9cffffc4 	addi	r19,r19,-1
 504ca94:	44e6703a 	and	r19,r8,r19
 504ca98:	98007626 	beq	r19,zero,504cc74 <__adddf3+0x360>
 504ca9c:	9809883a 	mov	r4,r19
 504caa0:	504f0340 	call	504f034 <__clzsi2>
 504caa4:	10fffe04 	addi	r3,r2,-8
 504caa8:	010007c4 	movi	r4,31
 504caac:	20c07716 	blt	r4,r3,504cc8c <__adddf3+0x378>
 504cab0:	00800804 	movi	r2,32
 504cab4:	10c5c83a 	sub	r2,r2,r3
 504cab8:	8884d83a 	srl	r2,r17,r2
 504cabc:	98d0983a 	sll	r8,r19,r3
 504cac0:	88e2983a 	sll	r17,r17,r3
 504cac4:	1204b03a 	or	r2,r2,r8
 504cac8:	1c007416 	blt	r3,r16,504cc9c <__adddf3+0x388>
 504cacc:	1c21c83a 	sub	r16,r3,r16
 504cad0:	82000044 	addi	r8,r16,1
 504cad4:	00c007c4 	movi	r3,31
 504cad8:	1a009116 	blt	r3,r8,504cd20 <__adddf3+0x40c>
 504cadc:	00c00804 	movi	r3,32
 504cae0:	1a07c83a 	sub	r3,r3,r8
 504cae4:	8a08d83a 	srl	r4,r17,r8
 504cae8:	88e2983a 	sll	r17,r17,r3
 504caec:	10c6983a 	sll	r3,r2,r3
 504caf0:	1210d83a 	srl	r8,r2,r8
 504caf4:	8804c03a 	cmpne	r2,r17,zero
 504caf8:	1906b03a 	or	r3,r3,r4
 504cafc:	18a2b03a 	or	r17,r3,r2
 504cb00:	0021883a 	mov	r16,zero
 504cb04:	003fa206 	br	504c990 <_gp+0xfffe1568>
 504cb08:	1890b03a 	or	r8,r3,r2
 504cb0c:	40017d26 	beq	r8,zero,504d104 <__adddf3+0x7f0>
 504cb10:	1011883a 	mov	r8,r2
 504cb14:	1823883a 	mov	r17,r3
 504cb18:	888001cc 	andi	r2,r17,7
 504cb1c:	103f9e1e 	bne	r2,zero,504c998 <_gp+0xfffe1570>
 504cb20:	4004977a 	slli	r2,r8,29
 504cb24:	8822d0fa 	srli	r17,r17,3
 504cb28:	4010d0fa 	srli	r8,r8,3
 504cb2c:	9007883a 	mov	r3,r18
 504cb30:	1444b03a 	or	r2,r2,r17
 504cb34:	0101ffc4 	movi	r4,2047
 504cb38:	81002426 	beq	r16,r4,504cbcc <__adddf3+0x2b8>
 504cb3c:	8120703a 	and	r16,r16,r4
 504cb40:	01000434 	movhi	r4,16
 504cb44:	213fffc4 	addi	r4,r4,-1
 504cb48:	4110703a 	and	r8,r8,r4
 504cb4c:	003fa806 	br	504c9f0 <_gp+0xfffe15c8>
 504cb50:	8089c83a 	sub	r4,r16,r2
 504cb54:	01005e0e 	bge	zero,r4,504ccd0 <__adddf3+0x3bc>
 504cb58:	10002b26 	beq	r2,zero,504cc08 <__adddf3+0x2f4>
 504cb5c:	0081ffc4 	movi	r2,2047
 504cb60:	80bf8b26 	beq	r16,r2,504c990 <_gp+0xfffe1568>
 504cb64:	4a402034 	orhi	r9,r9,128
 504cb68:	00800e04 	movi	r2,56
 504cb6c:	1100a40e 	bge	r2,r4,504ce00 <__adddf3+0x4ec>
 504cb70:	498cb03a 	or	r6,r9,r6
 504cb74:	300ac03a 	cmpne	r5,r6,zero
 504cb78:	0013883a 	mov	r9,zero
 504cb7c:	2c4b883a 	add	r5,r5,r17
 504cb80:	2c63803a 	cmpltu	r17,r5,r17
 504cb84:	4a11883a 	add	r8,r9,r8
 504cb88:	8a11883a 	add	r8,r17,r8
 504cb8c:	2823883a 	mov	r17,r5
 504cb90:	4080202c 	andhi	r2,r8,128
 504cb94:	103fe026 	beq	r2,zero,504cb18 <_gp+0xfffe16f0>
 504cb98:	84000044 	addi	r16,r16,1
 504cb9c:	0081ffc4 	movi	r2,2047
 504cba0:	8080d226 	beq	r16,r2,504ceec <__adddf3+0x5d8>
 504cba4:	00bfe034 	movhi	r2,65408
 504cba8:	10bfffc4 	addi	r2,r2,-1
 504cbac:	4090703a 	and	r8,r8,r2
 504cbb0:	880ad07a 	srli	r5,r17,1
 504cbb4:	400897fa 	slli	r4,r8,31
 504cbb8:	88c0004c 	andi	r3,r17,1
 504cbbc:	28e2b03a 	or	r17,r5,r3
 504cbc0:	4010d07a 	srli	r8,r8,1
 504cbc4:	2462b03a 	or	r17,r4,r17
 504cbc8:	003f7106 	br	504c990 <_gp+0xfffe1568>
 504cbcc:	4088b03a 	or	r4,r8,r2
 504cbd0:	20014526 	beq	r4,zero,504d0e8 <__adddf3+0x7d4>
 504cbd4:	01000434 	movhi	r4,16
 504cbd8:	42000234 	orhi	r8,r8,8
 504cbdc:	213fffc4 	addi	r4,r4,-1
 504cbe0:	4110703a 	and	r8,r8,r4
 504cbe4:	003f8206 	br	504c9f0 <_gp+0xfffe15c8>
 504cbe8:	18ffffc4 	addi	r3,r3,-1
 504cbec:	1800491e 	bne	r3,zero,504cd14 <__adddf3+0x400>
 504cbf0:	898bc83a 	sub	r5,r17,r6
 504cbf4:	8963803a 	cmpltu	r17,r17,r5
 504cbf8:	4251c83a 	sub	r8,r8,r9
 504cbfc:	4451c83a 	sub	r8,r8,r17
 504cc00:	2823883a 	mov	r17,r5
 504cc04:	003f9f06 	br	504ca84 <_gp+0xfffe165c>
 504cc08:	4984b03a 	or	r2,r9,r6
 504cc0c:	103f6026 	beq	r2,zero,504c990 <_gp+0xfffe1568>
 504cc10:	213fffc4 	addi	r4,r4,-1
 504cc14:	2000931e 	bne	r4,zero,504ce64 <__adddf3+0x550>
 504cc18:	898d883a 	add	r6,r17,r6
 504cc1c:	3463803a 	cmpltu	r17,r6,r17
 504cc20:	4251883a 	add	r8,r8,r9
 504cc24:	8a11883a 	add	r8,r17,r8
 504cc28:	3023883a 	mov	r17,r6
 504cc2c:	003fd806 	br	504cb90 <_gp+0xfffe1768>
 504cc30:	1800541e 	bne	r3,zero,504cd84 <__adddf3+0x470>
 504cc34:	80800044 	addi	r2,r16,1
 504cc38:	1081ffcc 	andi	r2,r2,2047
 504cc3c:	00c00044 	movi	r3,1
 504cc40:	1880a00e 	bge	r3,r2,504cec4 <__adddf3+0x5b0>
 504cc44:	8989c83a 	sub	r4,r17,r6
 504cc48:	8905803a 	cmpltu	r2,r17,r4
 504cc4c:	4267c83a 	sub	r19,r8,r9
 504cc50:	98a7c83a 	sub	r19,r19,r2
 504cc54:	9880202c 	andhi	r2,r19,128
 504cc58:	10006326 	beq	r2,zero,504cde8 <__adddf3+0x4d4>
 504cc5c:	3463c83a 	sub	r17,r6,r17
 504cc60:	4a07c83a 	sub	r3,r9,r8
 504cc64:	344d803a 	cmpltu	r6,r6,r17
 504cc68:	19a7c83a 	sub	r19,r3,r6
 504cc6c:	3825883a 	mov	r18,r7
 504cc70:	983f8a1e 	bne	r19,zero,504ca9c <_gp+0xfffe1674>
 504cc74:	8809883a 	mov	r4,r17
 504cc78:	504f0340 	call	504f034 <__clzsi2>
 504cc7c:	10800804 	addi	r2,r2,32
 504cc80:	10fffe04 	addi	r3,r2,-8
 504cc84:	010007c4 	movi	r4,31
 504cc88:	20ff890e 	bge	r4,r3,504cab0 <_gp+0xfffe1688>
 504cc8c:	10bff604 	addi	r2,r2,-40
 504cc90:	8884983a 	sll	r2,r17,r2
 504cc94:	0023883a 	mov	r17,zero
 504cc98:	1c3f8c0e 	bge	r3,r16,504cacc <_gp+0xfffe16a4>
 504cc9c:	023fe034 	movhi	r8,65408
 504cca0:	423fffc4 	addi	r8,r8,-1
 504cca4:	80e1c83a 	sub	r16,r16,r3
 504cca8:	1210703a 	and	r8,r2,r8
 504ccac:	003f3806 	br	504c990 <_gp+0xfffe1568>
 504ccb0:	9007883a 	mov	r3,r18
 504ccb4:	0011883a 	mov	r8,zero
 504ccb8:	0005883a 	mov	r2,zero
 504ccbc:	003f4c06 	br	504c9f0 <_gp+0xfffe15c8>
 504ccc0:	498cb03a 	or	r6,r9,r6
 504ccc4:	300cc03a 	cmpne	r6,r6,zero
 504ccc8:	0007883a 	mov	r3,zero
 504cccc:	003f6806 	br	504ca70 <_gp+0xfffe1648>
 504ccd0:	20009c1e 	bne	r4,zero,504cf44 <__adddf3+0x630>
 504ccd4:	80800044 	addi	r2,r16,1
 504ccd8:	1141ffcc 	andi	r5,r2,2047
 504ccdc:	01000044 	movi	r4,1
 504cce0:	2140670e 	bge	r4,r5,504ce80 <__adddf3+0x56c>
 504cce4:	0101ffc4 	movi	r4,2047
 504cce8:	11007f26 	beq	r2,r4,504cee8 <__adddf3+0x5d4>
 504ccec:	898d883a 	add	r6,r17,r6
 504ccf0:	4247883a 	add	r3,r8,r9
 504ccf4:	3451803a 	cmpltu	r8,r6,r17
 504ccf8:	40d1883a 	add	r8,r8,r3
 504ccfc:	402297fa 	slli	r17,r8,31
 504cd00:	300cd07a 	srli	r6,r6,1
 504cd04:	4010d07a 	srli	r8,r8,1
 504cd08:	1021883a 	mov	r16,r2
 504cd0c:	89a2b03a 	or	r17,r17,r6
 504cd10:	003f1f06 	br	504c990 <_gp+0xfffe1568>
 504cd14:	0081ffc4 	movi	r2,2047
 504cd18:	80bf481e 	bne	r16,r2,504ca3c <_gp+0xfffe1614>
 504cd1c:	003f1c06 	br	504c990 <_gp+0xfffe1568>
 504cd20:	843ff844 	addi	r16,r16,-31
 504cd24:	01000804 	movi	r4,32
 504cd28:	1406d83a 	srl	r3,r2,r16
 504cd2c:	41005026 	beq	r8,r4,504ce70 <__adddf3+0x55c>
 504cd30:	01001004 	movi	r4,64
 504cd34:	2211c83a 	sub	r8,r4,r8
 504cd38:	1204983a 	sll	r2,r2,r8
 504cd3c:	88a2b03a 	or	r17,r17,r2
 504cd40:	8822c03a 	cmpne	r17,r17,zero
 504cd44:	1c62b03a 	or	r17,r3,r17
 504cd48:	0011883a 	mov	r8,zero
 504cd4c:	0021883a 	mov	r16,zero
 504cd50:	003f7106 	br	504cb18 <_gp+0xfffe16f0>
 504cd54:	193ff804 	addi	r4,r3,-32
 504cd58:	00800804 	movi	r2,32
 504cd5c:	4908d83a 	srl	r4,r9,r4
 504cd60:	18804526 	beq	r3,r2,504ce78 <__adddf3+0x564>
 504cd64:	00801004 	movi	r2,64
 504cd68:	10c5c83a 	sub	r2,r2,r3
 504cd6c:	4886983a 	sll	r3,r9,r2
 504cd70:	198cb03a 	or	r6,r3,r6
 504cd74:	300cc03a 	cmpne	r6,r6,zero
 504cd78:	218cb03a 	or	r6,r4,r6
 504cd7c:	0007883a 	mov	r3,zero
 504cd80:	003f3b06 	br	504ca70 <_gp+0xfffe1648>
 504cd84:	80002a26 	beq	r16,zero,504ce30 <__adddf3+0x51c>
 504cd88:	0101ffc4 	movi	r4,2047
 504cd8c:	11006826 	beq	r2,r4,504cf30 <__adddf3+0x61c>
 504cd90:	00c7c83a 	sub	r3,zero,r3
 504cd94:	42002034 	orhi	r8,r8,128
 504cd98:	01000e04 	movi	r4,56
 504cd9c:	20c07c16 	blt	r4,r3,504cf90 <__adddf3+0x67c>
 504cda0:	010007c4 	movi	r4,31
 504cda4:	20c0da16 	blt	r4,r3,504d110 <__adddf3+0x7fc>
 504cda8:	01000804 	movi	r4,32
 504cdac:	20c9c83a 	sub	r4,r4,r3
 504cdb0:	4114983a 	sll	r10,r8,r4
 504cdb4:	88cad83a 	srl	r5,r17,r3
 504cdb8:	8908983a 	sll	r4,r17,r4
 504cdbc:	40c6d83a 	srl	r3,r8,r3
 504cdc0:	5162b03a 	or	r17,r10,r5
 504cdc4:	2008c03a 	cmpne	r4,r4,zero
 504cdc8:	8922b03a 	or	r17,r17,r4
 504cdcc:	3463c83a 	sub	r17,r6,r17
 504cdd0:	48c7c83a 	sub	r3,r9,r3
 504cdd4:	344d803a 	cmpltu	r6,r6,r17
 504cdd8:	1991c83a 	sub	r8,r3,r6
 504cddc:	1021883a 	mov	r16,r2
 504cde0:	3825883a 	mov	r18,r7
 504cde4:	003f2706 	br	504ca84 <_gp+0xfffe165c>
 504cde8:	24d0b03a 	or	r8,r4,r19
 504cdec:	40001b1e 	bne	r8,zero,504ce5c <__adddf3+0x548>
 504cdf0:	0005883a 	mov	r2,zero
 504cdf4:	0007883a 	mov	r3,zero
 504cdf8:	0021883a 	mov	r16,zero
 504cdfc:	003f4d06 	br	504cb34 <_gp+0xfffe170c>
 504ce00:	008007c4 	movi	r2,31
 504ce04:	11003c16 	blt	r2,r4,504cef8 <__adddf3+0x5e4>
 504ce08:	00800804 	movi	r2,32
 504ce0c:	1105c83a 	sub	r2,r2,r4
 504ce10:	488e983a 	sll	r7,r9,r2
 504ce14:	310ad83a 	srl	r5,r6,r4
 504ce18:	3084983a 	sll	r2,r6,r2
 504ce1c:	4912d83a 	srl	r9,r9,r4
 504ce20:	394ab03a 	or	r5,r7,r5
 504ce24:	1004c03a 	cmpne	r2,r2,zero
 504ce28:	288ab03a 	or	r5,r5,r2
 504ce2c:	003f5306 	br	504cb7c <_gp+0xfffe1754>
 504ce30:	4448b03a 	or	r4,r8,r17
 504ce34:	20003e26 	beq	r4,zero,504cf30 <__adddf3+0x61c>
 504ce38:	00c6303a 	nor	r3,zero,r3
 504ce3c:	18003a1e 	bne	r3,zero,504cf28 <__adddf3+0x614>
 504ce40:	3463c83a 	sub	r17,r6,r17
 504ce44:	4a07c83a 	sub	r3,r9,r8
 504ce48:	344d803a 	cmpltu	r6,r6,r17
 504ce4c:	1991c83a 	sub	r8,r3,r6
 504ce50:	1021883a 	mov	r16,r2
 504ce54:	3825883a 	mov	r18,r7
 504ce58:	003f0a06 	br	504ca84 <_gp+0xfffe165c>
 504ce5c:	2023883a 	mov	r17,r4
 504ce60:	003f0d06 	br	504ca98 <_gp+0xfffe1670>
 504ce64:	0081ffc4 	movi	r2,2047
 504ce68:	80bf3f1e 	bne	r16,r2,504cb68 <_gp+0xfffe1740>
 504ce6c:	003ec806 	br	504c990 <_gp+0xfffe1568>
 504ce70:	0005883a 	mov	r2,zero
 504ce74:	003fb106 	br	504cd3c <_gp+0xfffe1914>
 504ce78:	0007883a 	mov	r3,zero
 504ce7c:	003fbc06 	br	504cd70 <_gp+0xfffe1948>
 504ce80:	4444b03a 	or	r2,r8,r17
 504ce84:	8000871e 	bne	r16,zero,504d0a4 <__adddf3+0x790>
 504ce88:	1000ba26 	beq	r2,zero,504d174 <__adddf3+0x860>
 504ce8c:	4984b03a 	or	r2,r9,r6
 504ce90:	103ebf26 	beq	r2,zero,504c990 <_gp+0xfffe1568>
 504ce94:	8985883a 	add	r2,r17,r6
 504ce98:	4247883a 	add	r3,r8,r9
 504ce9c:	1451803a 	cmpltu	r8,r2,r17
 504cea0:	40d1883a 	add	r8,r8,r3
 504cea4:	40c0202c 	andhi	r3,r8,128
 504cea8:	1023883a 	mov	r17,r2
 504ceac:	183f1a26 	beq	r3,zero,504cb18 <_gp+0xfffe16f0>
 504ceb0:	00bfe034 	movhi	r2,65408
 504ceb4:	10bfffc4 	addi	r2,r2,-1
 504ceb8:	2021883a 	mov	r16,r4
 504cebc:	4090703a 	and	r8,r8,r2
 504cec0:	003eb306 	br	504c990 <_gp+0xfffe1568>
 504cec4:	4444b03a 	or	r2,r8,r17
 504cec8:	8000291e 	bne	r16,zero,504cf70 <__adddf3+0x65c>
 504cecc:	10004b1e 	bne	r2,zero,504cffc <__adddf3+0x6e8>
 504ced0:	4990b03a 	or	r8,r9,r6
 504ced4:	40008b26 	beq	r8,zero,504d104 <__adddf3+0x7f0>
 504ced8:	4811883a 	mov	r8,r9
 504cedc:	3023883a 	mov	r17,r6
 504cee0:	3825883a 	mov	r18,r7
 504cee4:	003eaa06 	br	504c990 <_gp+0xfffe1568>
 504cee8:	1021883a 	mov	r16,r2
 504ceec:	0011883a 	mov	r8,zero
 504cef0:	0005883a 	mov	r2,zero
 504cef4:	003f0f06 	br	504cb34 <_gp+0xfffe170c>
 504cef8:	217ff804 	addi	r5,r4,-32
 504cefc:	00800804 	movi	r2,32
 504cf00:	494ad83a 	srl	r5,r9,r5
 504cf04:	20807d26 	beq	r4,r2,504d0fc <__adddf3+0x7e8>
 504cf08:	00801004 	movi	r2,64
 504cf0c:	1109c83a 	sub	r4,r2,r4
 504cf10:	4912983a 	sll	r9,r9,r4
 504cf14:	498cb03a 	or	r6,r9,r6
 504cf18:	300cc03a 	cmpne	r6,r6,zero
 504cf1c:	298ab03a 	or	r5,r5,r6
 504cf20:	0013883a 	mov	r9,zero
 504cf24:	003f1506 	br	504cb7c <_gp+0xfffe1754>
 504cf28:	0101ffc4 	movi	r4,2047
 504cf2c:	113f9a1e 	bne	r2,r4,504cd98 <_gp+0xfffe1970>
 504cf30:	4811883a 	mov	r8,r9
 504cf34:	3023883a 	mov	r17,r6
 504cf38:	1021883a 	mov	r16,r2
 504cf3c:	3825883a 	mov	r18,r7
 504cf40:	003e9306 	br	504c990 <_gp+0xfffe1568>
 504cf44:	8000161e 	bne	r16,zero,504cfa0 <__adddf3+0x68c>
 504cf48:	444ab03a 	or	r5,r8,r17
 504cf4c:	28005126 	beq	r5,zero,504d094 <__adddf3+0x780>
 504cf50:	0108303a 	nor	r4,zero,r4
 504cf54:	20004d1e 	bne	r4,zero,504d08c <__adddf3+0x778>
 504cf58:	89a3883a 	add	r17,r17,r6
 504cf5c:	4253883a 	add	r9,r8,r9
 504cf60:	898d803a 	cmpltu	r6,r17,r6
 504cf64:	3251883a 	add	r8,r6,r9
 504cf68:	1021883a 	mov	r16,r2
 504cf6c:	003f0806 	br	504cb90 <_gp+0xfffe1768>
 504cf70:	1000301e 	bne	r2,zero,504d034 <__adddf3+0x720>
 504cf74:	4984b03a 	or	r2,r9,r6
 504cf78:	10007126 	beq	r2,zero,504d140 <__adddf3+0x82c>
 504cf7c:	4811883a 	mov	r8,r9
 504cf80:	3023883a 	mov	r17,r6
 504cf84:	3825883a 	mov	r18,r7
 504cf88:	0401ffc4 	movi	r16,2047
 504cf8c:	003e8006 	br	504c990 <_gp+0xfffe1568>
 504cf90:	4462b03a 	or	r17,r8,r17
 504cf94:	8822c03a 	cmpne	r17,r17,zero
 504cf98:	0007883a 	mov	r3,zero
 504cf9c:	003f8b06 	br	504cdcc <_gp+0xfffe19a4>
 504cfa0:	0141ffc4 	movi	r5,2047
 504cfa4:	11403b26 	beq	r2,r5,504d094 <__adddf3+0x780>
 504cfa8:	0109c83a 	sub	r4,zero,r4
 504cfac:	42002034 	orhi	r8,r8,128
 504cfb0:	01400e04 	movi	r5,56
 504cfb4:	29006716 	blt	r5,r4,504d154 <__adddf3+0x840>
 504cfb8:	014007c4 	movi	r5,31
 504cfbc:	29007016 	blt	r5,r4,504d180 <__adddf3+0x86c>
 504cfc0:	01400804 	movi	r5,32
 504cfc4:	290bc83a 	sub	r5,r5,r4
 504cfc8:	4154983a 	sll	r10,r8,r5
 504cfcc:	890ed83a 	srl	r7,r17,r4
 504cfd0:	894a983a 	sll	r5,r17,r5
 504cfd4:	4108d83a 	srl	r4,r8,r4
 504cfd8:	51e2b03a 	or	r17,r10,r7
 504cfdc:	280ac03a 	cmpne	r5,r5,zero
 504cfe0:	8962b03a 	or	r17,r17,r5
 504cfe4:	89a3883a 	add	r17,r17,r6
 504cfe8:	2253883a 	add	r9,r4,r9
 504cfec:	898d803a 	cmpltu	r6,r17,r6
 504cff0:	3251883a 	add	r8,r6,r9
 504cff4:	1021883a 	mov	r16,r2
 504cff8:	003ee506 	br	504cb90 <_gp+0xfffe1768>
 504cffc:	4984b03a 	or	r2,r9,r6
 504d000:	103e6326 	beq	r2,zero,504c990 <_gp+0xfffe1568>
 504d004:	8987c83a 	sub	r3,r17,r6
 504d008:	88c9803a 	cmpltu	r4,r17,r3
 504d00c:	4245c83a 	sub	r2,r8,r9
 504d010:	1105c83a 	sub	r2,r2,r4
 504d014:	1100202c 	andhi	r4,r2,128
 504d018:	203ebb26 	beq	r4,zero,504cb08 <_gp+0xfffe16e0>
 504d01c:	3463c83a 	sub	r17,r6,r17
 504d020:	4a07c83a 	sub	r3,r9,r8
 504d024:	344d803a 	cmpltu	r6,r6,r17
 504d028:	1991c83a 	sub	r8,r3,r6
 504d02c:	3825883a 	mov	r18,r7
 504d030:	003e5706 	br	504c990 <_gp+0xfffe1568>
 504d034:	4984b03a 	or	r2,r9,r6
 504d038:	10002e26 	beq	r2,zero,504d0f4 <__adddf3+0x7e0>
 504d03c:	4004d0fa 	srli	r2,r8,3
 504d040:	8822d0fa 	srli	r17,r17,3
 504d044:	4010977a 	slli	r8,r8,29
 504d048:	10c0022c 	andhi	r3,r2,8
 504d04c:	4462b03a 	or	r17,r8,r17
 504d050:	18000826 	beq	r3,zero,504d074 <__adddf3+0x760>
 504d054:	4808d0fa 	srli	r4,r9,3
 504d058:	20c0022c 	andhi	r3,r4,8
 504d05c:	1800051e 	bne	r3,zero,504d074 <__adddf3+0x760>
 504d060:	300cd0fa 	srli	r6,r6,3
 504d064:	4806977a 	slli	r3,r9,29
 504d068:	2005883a 	mov	r2,r4
 504d06c:	3825883a 	mov	r18,r7
 504d070:	19a2b03a 	or	r17,r3,r6
 504d074:	8810d77a 	srli	r8,r17,29
 504d078:	100490fa 	slli	r2,r2,3
 504d07c:	882290fa 	slli	r17,r17,3
 504d080:	0401ffc4 	movi	r16,2047
 504d084:	4090b03a 	or	r8,r8,r2
 504d088:	003e4106 	br	504c990 <_gp+0xfffe1568>
 504d08c:	0141ffc4 	movi	r5,2047
 504d090:	117fc71e 	bne	r2,r5,504cfb0 <_gp+0xfffe1b88>
 504d094:	4811883a 	mov	r8,r9
 504d098:	3023883a 	mov	r17,r6
 504d09c:	1021883a 	mov	r16,r2
 504d0a0:	003e3b06 	br	504c990 <_gp+0xfffe1568>
 504d0a4:	10002f26 	beq	r2,zero,504d164 <__adddf3+0x850>
 504d0a8:	4984b03a 	or	r2,r9,r6
 504d0ac:	10001126 	beq	r2,zero,504d0f4 <__adddf3+0x7e0>
 504d0b0:	4004d0fa 	srli	r2,r8,3
 504d0b4:	8822d0fa 	srli	r17,r17,3
 504d0b8:	4010977a 	slli	r8,r8,29
 504d0bc:	10c0022c 	andhi	r3,r2,8
 504d0c0:	4462b03a 	or	r17,r8,r17
 504d0c4:	183feb26 	beq	r3,zero,504d074 <_gp+0xfffe1c4c>
 504d0c8:	4808d0fa 	srli	r4,r9,3
 504d0cc:	20c0022c 	andhi	r3,r4,8
 504d0d0:	183fe81e 	bne	r3,zero,504d074 <_gp+0xfffe1c4c>
 504d0d4:	300cd0fa 	srli	r6,r6,3
 504d0d8:	4806977a 	slli	r3,r9,29
 504d0dc:	2005883a 	mov	r2,r4
 504d0e0:	19a2b03a 	or	r17,r3,r6
 504d0e4:	003fe306 	br	504d074 <_gp+0xfffe1c4c>
 504d0e8:	0011883a 	mov	r8,zero
 504d0ec:	0005883a 	mov	r2,zero
 504d0f0:	003e3f06 	br	504c9f0 <_gp+0xfffe15c8>
 504d0f4:	0401ffc4 	movi	r16,2047
 504d0f8:	003e2506 	br	504c990 <_gp+0xfffe1568>
 504d0fc:	0013883a 	mov	r9,zero
 504d100:	003f8406 	br	504cf14 <_gp+0xfffe1aec>
 504d104:	0005883a 	mov	r2,zero
 504d108:	0007883a 	mov	r3,zero
 504d10c:	003e8906 	br	504cb34 <_gp+0xfffe170c>
 504d110:	197ff804 	addi	r5,r3,-32
 504d114:	01000804 	movi	r4,32
 504d118:	414ad83a 	srl	r5,r8,r5
 504d11c:	19002426 	beq	r3,r4,504d1b0 <__adddf3+0x89c>
 504d120:	01001004 	movi	r4,64
 504d124:	20c7c83a 	sub	r3,r4,r3
 504d128:	40c6983a 	sll	r3,r8,r3
 504d12c:	1c46b03a 	or	r3,r3,r17
 504d130:	1806c03a 	cmpne	r3,r3,zero
 504d134:	28e2b03a 	or	r17,r5,r3
 504d138:	0007883a 	mov	r3,zero
 504d13c:	003f2306 	br	504cdcc <_gp+0xfffe19a4>
 504d140:	0007883a 	mov	r3,zero
 504d144:	5811883a 	mov	r8,r11
 504d148:	00bfffc4 	movi	r2,-1
 504d14c:	0401ffc4 	movi	r16,2047
 504d150:	003e7806 	br	504cb34 <_gp+0xfffe170c>
 504d154:	4462b03a 	or	r17,r8,r17
 504d158:	8822c03a 	cmpne	r17,r17,zero
 504d15c:	0009883a 	mov	r4,zero
 504d160:	003fa006 	br	504cfe4 <_gp+0xfffe1bbc>
 504d164:	4811883a 	mov	r8,r9
 504d168:	3023883a 	mov	r17,r6
 504d16c:	0401ffc4 	movi	r16,2047
 504d170:	003e0706 	br	504c990 <_gp+0xfffe1568>
 504d174:	4811883a 	mov	r8,r9
 504d178:	3023883a 	mov	r17,r6
 504d17c:	003e0406 	br	504c990 <_gp+0xfffe1568>
 504d180:	21fff804 	addi	r7,r4,-32
 504d184:	01400804 	movi	r5,32
 504d188:	41ced83a 	srl	r7,r8,r7
 504d18c:	21400a26 	beq	r4,r5,504d1b8 <__adddf3+0x8a4>
 504d190:	01401004 	movi	r5,64
 504d194:	2909c83a 	sub	r4,r5,r4
 504d198:	4108983a 	sll	r4,r8,r4
 504d19c:	2448b03a 	or	r4,r4,r17
 504d1a0:	2008c03a 	cmpne	r4,r4,zero
 504d1a4:	3922b03a 	or	r17,r7,r4
 504d1a8:	0009883a 	mov	r4,zero
 504d1ac:	003f8d06 	br	504cfe4 <_gp+0xfffe1bbc>
 504d1b0:	0007883a 	mov	r3,zero
 504d1b4:	003fdd06 	br	504d12c <_gp+0xfffe1d04>
 504d1b8:	0009883a 	mov	r4,zero
 504d1bc:	003ff706 	br	504d19c <_gp+0xfffe1d74>

0504d1c0 <__divdf3>:
 504d1c0:	defff204 	addi	sp,sp,-56
 504d1c4:	dd400915 	stw	r21,36(sp)
 504d1c8:	282ad53a 	srli	r21,r5,20
 504d1cc:	dd000815 	stw	r20,32(sp)
 504d1d0:	2828d7fa 	srli	r20,r5,31
 504d1d4:	dc000415 	stw	r16,16(sp)
 504d1d8:	04000434 	movhi	r16,16
 504d1dc:	df000c15 	stw	fp,48(sp)
 504d1e0:	843fffc4 	addi	r16,r16,-1
 504d1e4:	dfc00d15 	stw	ra,52(sp)
 504d1e8:	ddc00b15 	stw	r23,44(sp)
 504d1ec:	dd800a15 	stw	r22,40(sp)
 504d1f0:	dcc00715 	stw	r19,28(sp)
 504d1f4:	dc800615 	stw	r18,24(sp)
 504d1f8:	dc400515 	stw	r17,20(sp)
 504d1fc:	ad41ffcc 	andi	r21,r21,2047
 504d200:	2c20703a 	and	r16,r5,r16
 504d204:	a7003fcc 	andi	fp,r20,255
 504d208:	a8006126 	beq	r21,zero,504d390 <__divdf3+0x1d0>
 504d20c:	0081ffc4 	movi	r2,2047
 504d210:	2025883a 	mov	r18,r4
 504d214:	a8803726 	beq	r21,r2,504d2f4 <__divdf3+0x134>
 504d218:	80800434 	orhi	r2,r16,16
 504d21c:	100490fa 	slli	r2,r2,3
 504d220:	2020d77a 	srli	r16,r4,29
 504d224:	202490fa 	slli	r18,r4,3
 504d228:	ad7f0044 	addi	r21,r21,-1023
 504d22c:	80a0b03a 	or	r16,r16,r2
 504d230:	0027883a 	mov	r19,zero
 504d234:	0013883a 	mov	r9,zero
 504d238:	3804d53a 	srli	r2,r7,20
 504d23c:	382cd7fa 	srli	r22,r7,31
 504d240:	04400434 	movhi	r17,16
 504d244:	8c7fffc4 	addi	r17,r17,-1
 504d248:	1081ffcc 	andi	r2,r2,2047
 504d24c:	3011883a 	mov	r8,r6
 504d250:	3c62703a 	and	r17,r7,r17
 504d254:	b5c03fcc 	andi	r23,r22,255
 504d258:	10006c26 	beq	r2,zero,504d40c <__divdf3+0x24c>
 504d25c:	00c1ffc4 	movi	r3,2047
 504d260:	10c06426 	beq	r2,r3,504d3f4 <__divdf3+0x234>
 504d264:	88c00434 	orhi	r3,r17,16
 504d268:	180690fa 	slli	r3,r3,3
 504d26c:	3022d77a 	srli	r17,r6,29
 504d270:	301090fa 	slli	r8,r6,3
 504d274:	10bf0044 	addi	r2,r2,-1023
 504d278:	88e2b03a 	or	r17,r17,r3
 504d27c:	000f883a 	mov	r7,zero
 504d280:	a58cf03a 	xor	r6,r20,r22
 504d284:	3cc8b03a 	or	r4,r7,r19
 504d288:	a8abc83a 	sub	r21,r21,r2
 504d28c:	008003c4 	movi	r2,15
 504d290:	3007883a 	mov	r3,r6
 504d294:	34c03fcc 	andi	r19,r6,255
 504d298:	11009036 	bltu	r2,r4,504d4dc <__divdf3+0x31c>
 504d29c:	200890ba 	slli	r4,r4,2
 504d2a0:	00814174 	movhi	r2,1285
 504d2a4:	10b4ad04 	addi	r2,r2,-11596
 504d2a8:	2089883a 	add	r4,r4,r2
 504d2ac:	20800017 	ldw	r2,0(r4)
 504d2b0:	1000683a 	jmp	r2
 504d2b4:	0504d4dc 	xori	r20,zero,4947
 504d2b8:	0504d32c 	andhi	r20,zero,4940
 504d2bc:	0504d4cc 	andi	r20,zero,4947
 504d2c0:	0504d320 	cmpeqi	r20,zero,4940
 504d2c4:	0504d4cc 	andi	r20,zero,4947
 504d2c8:	0504d4a0 	cmpeqi	r20,zero,4946
 504d2cc:	0504d4cc 	andi	r20,zero,4947
 504d2d0:	0504d320 	cmpeqi	r20,zero,4940
 504d2d4:	0504d32c 	andhi	r20,zero,4940
 504d2d8:	0504d32c 	andhi	r20,zero,4940
 504d2dc:	0504d4a0 	cmpeqi	r20,zero,4946
 504d2e0:	0504d320 	cmpeqi	r20,zero,4940
 504d2e4:	0504d310 	cmplti	r20,zero,4940
 504d2e8:	0504d310 	cmplti	r20,zero,4940
 504d2ec:	0504d310 	cmplti	r20,zero,4940
 504d2f0:	0504d7c0 	call	504d7c <__alt_mem_new_sdram_controller_0+0x504d7c>
 504d2f4:	2404b03a 	or	r2,r4,r16
 504d2f8:	1000661e 	bne	r2,zero,504d494 <__divdf3+0x2d4>
 504d2fc:	04c00204 	movi	r19,8
 504d300:	0021883a 	mov	r16,zero
 504d304:	0025883a 	mov	r18,zero
 504d308:	02400084 	movi	r9,2
 504d30c:	003fca06 	br	504d238 <_gp+0xfffe1e10>
 504d310:	8023883a 	mov	r17,r16
 504d314:	9011883a 	mov	r8,r18
 504d318:	e02f883a 	mov	r23,fp
 504d31c:	480f883a 	mov	r7,r9
 504d320:	00800084 	movi	r2,2
 504d324:	3881311e 	bne	r7,r2,504d7ec <__divdf3+0x62c>
 504d328:	b827883a 	mov	r19,r23
 504d32c:	98c0004c 	andi	r3,r19,1
 504d330:	0081ffc4 	movi	r2,2047
 504d334:	000b883a 	mov	r5,zero
 504d338:	0025883a 	mov	r18,zero
 504d33c:	1004953a 	slli	r2,r2,20
 504d340:	18c03fcc 	andi	r3,r3,255
 504d344:	04400434 	movhi	r17,16
 504d348:	8c7fffc4 	addi	r17,r17,-1
 504d34c:	180697fa 	slli	r3,r3,31
 504d350:	2c4a703a 	and	r5,r5,r17
 504d354:	288ab03a 	or	r5,r5,r2
 504d358:	28c6b03a 	or	r3,r5,r3
 504d35c:	9005883a 	mov	r2,r18
 504d360:	dfc00d17 	ldw	ra,52(sp)
 504d364:	df000c17 	ldw	fp,48(sp)
 504d368:	ddc00b17 	ldw	r23,44(sp)
 504d36c:	dd800a17 	ldw	r22,40(sp)
 504d370:	dd400917 	ldw	r21,36(sp)
 504d374:	dd000817 	ldw	r20,32(sp)
 504d378:	dcc00717 	ldw	r19,28(sp)
 504d37c:	dc800617 	ldw	r18,24(sp)
 504d380:	dc400517 	ldw	r17,20(sp)
 504d384:	dc000417 	ldw	r16,16(sp)
 504d388:	dec00e04 	addi	sp,sp,56
 504d38c:	f800283a 	ret
 504d390:	2404b03a 	or	r2,r4,r16
 504d394:	2027883a 	mov	r19,r4
 504d398:	10003926 	beq	r2,zero,504d480 <__divdf3+0x2c0>
 504d39c:	80012e26 	beq	r16,zero,504d858 <__divdf3+0x698>
 504d3a0:	8009883a 	mov	r4,r16
 504d3a4:	d9800315 	stw	r6,12(sp)
 504d3a8:	d9c00215 	stw	r7,8(sp)
 504d3ac:	504f0340 	call	504f034 <__clzsi2>
 504d3b0:	d9800317 	ldw	r6,12(sp)
 504d3b4:	d9c00217 	ldw	r7,8(sp)
 504d3b8:	113ffd44 	addi	r4,r2,-11
 504d3bc:	00c00704 	movi	r3,28
 504d3c0:	19012116 	blt	r3,r4,504d848 <__divdf3+0x688>
 504d3c4:	00c00744 	movi	r3,29
 504d3c8:	147ffe04 	addi	r17,r2,-8
 504d3cc:	1907c83a 	sub	r3,r3,r4
 504d3d0:	8460983a 	sll	r16,r16,r17
 504d3d4:	98c6d83a 	srl	r3,r19,r3
 504d3d8:	9c64983a 	sll	r18,r19,r17
 504d3dc:	1c20b03a 	or	r16,r3,r16
 504d3e0:	1080fcc4 	addi	r2,r2,1011
 504d3e4:	00abc83a 	sub	r21,zero,r2
 504d3e8:	0027883a 	mov	r19,zero
 504d3ec:	0013883a 	mov	r9,zero
 504d3f0:	003f9106 	br	504d238 <_gp+0xfffe1e10>
 504d3f4:	3446b03a 	or	r3,r6,r17
 504d3f8:	18001f1e 	bne	r3,zero,504d478 <__divdf3+0x2b8>
 504d3fc:	0023883a 	mov	r17,zero
 504d400:	0011883a 	mov	r8,zero
 504d404:	01c00084 	movi	r7,2
 504d408:	003f9d06 	br	504d280 <_gp+0xfffe1e58>
 504d40c:	3446b03a 	or	r3,r6,r17
 504d410:	18001526 	beq	r3,zero,504d468 <__divdf3+0x2a8>
 504d414:	88011b26 	beq	r17,zero,504d884 <__divdf3+0x6c4>
 504d418:	8809883a 	mov	r4,r17
 504d41c:	d9800315 	stw	r6,12(sp)
 504d420:	da400115 	stw	r9,4(sp)
 504d424:	504f0340 	call	504f034 <__clzsi2>
 504d428:	d9800317 	ldw	r6,12(sp)
 504d42c:	da400117 	ldw	r9,4(sp)
 504d430:	113ffd44 	addi	r4,r2,-11
 504d434:	00c00704 	movi	r3,28
 504d438:	19010e16 	blt	r3,r4,504d874 <__divdf3+0x6b4>
 504d43c:	00c00744 	movi	r3,29
 504d440:	123ffe04 	addi	r8,r2,-8
 504d444:	1907c83a 	sub	r3,r3,r4
 504d448:	8a22983a 	sll	r17,r17,r8
 504d44c:	30c6d83a 	srl	r3,r6,r3
 504d450:	3210983a 	sll	r8,r6,r8
 504d454:	1c62b03a 	or	r17,r3,r17
 504d458:	1080fcc4 	addi	r2,r2,1011
 504d45c:	0085c83a 	sub	r2,zero,r2
 504d460:	000f883a 	mov	r7,zero
 504d464:	003f8606 	br	504d280 <_gp+0xfffe1e58>
 504d468:	0023883a 	mov	r17,zero
 504d46c:	0011883a 	mov	r8,zero
 504d470:	01c00044 	movi	r7,1
 504d474:	003f8206 	br	504d280 <_gp+0xfffe1e58>
 504d478:	01c000c4 	movi	r7,3
 504d47c:	003f8006 	br	504d280 <_gp+0xfffe1e58>
 504d480:	04c00104 	movi	r19,4
 504d484:	0021883a 	mov	r16,zero
 504d488:	0025883a 	mov	r18,zero
 504d48c:	02400044 	movi	r9,1
 504d490:	003f6906 	br	504d238 <_gp+0xfffe1e10>
 504d494:	04c00304 	movi	r19,12
 504d498:	024000c4 	movi	r9,3
 504d49c:	003f6606 	br	504d238 <_gp+0xfffe1e10>
 504d4a0:	01400434 	movhi	r5,16
 504d4a4:	0007883a 	mov	r3,zero
 504d4a8:	297fffc4 	addi	r5,r5,-1
 504d4ac:	04bfffc4 	movi	r18,-1
 504d4b0:	0081ffc4 	movi	r2,2047
 504d4b4:	003fa106 	br	504d33c <_gp+0xfffe1f14>
 504d4b8:	00c00044 	movi	r3,1
 504d4bc:	1887c83a 	sub	r3,r3,r2
 504d4c0:	01000e04 	movi	r4,56
 504d4c4:	20c1210e 	bge	r4,r3,504d94c <__divdf3+0x78c>
 504d4c8:	98c0004c 	andi	r3,r19,1
 504d4cc:	0005883a 	mov	r2,zero
 504d4d0:	000b883a 	mov	r5,zero
 504d4d4:	0025883a 	mov	r18,zero
 504d4d8:	003f9806 	br	504d33c <_gp+0xfffe1f14>
 504d4dc:	8c00fd36 	bltu	r17,r16,504d8d4 <__divdf3+0x714>
 504d4e0:	8440fb26 	beq	r16,r17,504d8d0 <__divdf3+0x710>
 504d4e4:	8007883a 	mov	r3,r16
 504d4e8:	ad7fffc4 	addi	r21,r21,-1
 504d4ec:	0021883a 	mov	r16,zero
 504d4f0:	4004d63a 	srli	r2,r8,24
 504d4f4:	8822923a 	slli	r17,r17,8
 504d4f8:	1809883a 	mov	r4,r3
 504d4fc:	402c923a 	slli	r22,r8,8
 504d500:	88b8b03a 	or	fp,r17,r2
 504d504:	e028d43a 	srli	r20,fp,16
 504d508:	d8c00015 	stw	r3,0(sp)
 504d50c:	e5ffffcc 	andi	r23,fp,65535
 504d510:	a00b883a 	mov	r5,r20
 504d514:	504b3ec0 	call	504b3ec <__udivsi3>
 504d518:	d8c00017 	ldw	r3,0(sp)
 504d51c:	a00b883a 	mov	r5,r20
 504d520:	d8800315 	stw	r2,12(sp)
 504d524:	1809883a 	mov	r4,r3
 504d528:	504b4500 	call	504b450 <__umodsi3>
 504d52c:	d9800317 	ldw	r6,12(sp)
 504d530:	1006943a 	slli	r3,r2,16
 504d534:	9004d43a 	srli	r2,r18,16
 504d538:	b9a3383a 	mul	r17,r23,r6
 504d53c:	10c4b03a 	or	r2,r2,r3
 504d540:	1440062e 	bgeu	r2,r17,504d55c <__divdf3+0x39c>
 504d544:	1705883a 	add	r2,r2,fp
 504d548:	30ffffc4 	addi	r3,r6,-1
 504d54c:	1700ee36 	bltu	r2,fp,504d908 <__divdf3+0x748>
 504d550:	1440ed2e 	bgeu	r2,r17,504d908 <__divdf3+0x748>
 504d554:	31bfff84 	addi	r6,r6,-2
 504d558:	1705883a 	add	r2,r2,fp
 504d55c:	1463c83a 	sub	r17,r2,r17
 504d560:	a00b883a 	mov	r5,r20
 504d564:	8809883a 	mov	r4,r17
 504d568:	d9800315 	stw	r6,12(sp)
 504d56c:	504b3ec0 	call	504b3ec <__udivsi3>
 504d570:	a00b883a 	mov	r5,r20
 504d574:	8809883a 	mov	r4,r17
 504d578:	d8800215 	stw	r2,8(sp)
 504d57c:	504b4500 	call	504b450 <__umodsi3>
 504d580:	d9c00217 	ldw	r7,8(sp)
 504d584:	1004943a 	slli	r2,r2,16
 504d588:	94bfffcc 	andi	r18,r18,65535
 504d58c:	b9d1383a 	mul	r8,r23,r7
 504d590:	90a4b03a 	or	r18,r18,r2
 504d594:	d9800317 	ldw	r6,12(sp)
 504d598:	9200062e 	bgeu	r18,r8,504d5b4 <__divdf3+0x3f4>
 504d59c:	9725883a 	add	r18,r18,fp
 504d5a0:	38bfffc4 	addi	r2,r7,-1
 504d5a4:	9700d636 	bltu	r18,fp,504d900 <__divdf3+0x740>
 504d5a8:	9200d52e 	bgeu	r18,r8,504d900 <__divdf3+0x740>
 504d5ac:	39ffff84 	addi	r7,r7,-2
 504d5b0:	9725883a 	add	r18,r18,fp
 504d5b4:	3004943a 	slli	r2,r6,16
 504d5b8:	b012d43a 	srli	r9,r22,16
 504d5bc:	b1bfffcc 	andi	r6,r22,65535
 504d5c0:	11e2b03a 	or	r17,r2,r7
 504d5c4:	8806d43a 	srli	r3,r17,16
 504d5c8:	893fffcc 	andi	r4,r17,65535
 504d5cc:	218b383a 	mul	r5,r4,r6
 504d5d0:	30c5383a 	mul	r2,r6,r3
 504d5d4:	2249383a 	mul	r4,r4,r9
 504d5d8:	280ed43a 	srli	r7,r5,16
 504d5dc:	9225c83a 	sub	r18,r18,r8
 504d5e0:	2089883a 	add	r4,r4,r2
 504d5e4:	3909883a 	add	r4,r7,r4
 504d5e8:	1a47383a 	mul	r3,r3,r9
 504d5ec:	2080022e 	bgeu	r4,r2,504d5f8 <__divdf3+0x438>
 504d5f0:	00800074 	movhi	r2,1
 504d5f4:	1887883a 	add	r3,r3,r2
 504d5f8:	2004d43a 	srli	r2,r4,16
 504d5fc:	2008943a 	slli	r4,r4,16
 504d600:	297fffcc 	andi	r5,r5,65535
 504d604:	10c7883a 	add	r3,r2,r3
 504d608:	2149883a 	add	r4,r4,r5
 504d60c:	90c0a536 	bltu	r18,r3,504d8a4 <__divdf3+0x6e4>
 504d610:	90c0bf26 	beq	r18,r3,504d910 <__divdf3+0x750>
 504d614:	90c7c83a 	sub	r3,r18,r3
 504d618:	810fc83a 	sub	r7,r16,r4
 504d61c:	81e5803a 	cmpltu	r18,r16,r7
 504d620:	1ca5c83a 	sub	r18,r3,r18
 504d624:	e480c126 	beq	fp,r18,504d92c <__divdf3+0x76c>
 504d628:	a00b883a 	mov	r5,r20
 504d62c:	9009883a 	mov	r4,r18
 504d630:	d9800315 	stw	r6,12(sp)
 504d634:	d9c00215 	stw	r7,8(sp)
 504d638:	da400115 	stw	r9,4(sp)
 504d63c:	504b3ec0 	call	504b3ec <__udivsi3>
 504d640:	a00b883a 	mov	r5,r20
 504d644:	9009883a 	mov	r4,r18
 504d648:	d8800015 	stw	r2,0(sp)
 504d64c:	504b4500 	call	504b450 <__umodsi3>
 504d650:	d9c00217 	ldw	r7,8(sp)
 504d654:	da000017 	ldw	r8,0(sp)
 504d658:	1006943a 	slli	r3,r2,16
 504d65c:	3804d43a 	srli	r2,r7,16
 504d660:	ba21383a 	mul	r16,r23,r8
 504d664:	d9800317 	ldw	r6,12(sp)
 504d668:	10c4b03a 	or	r2,r2,r3
 504d66c:	da400117 	ldw	r9,4(sp)
 504d670:	1400062e 	bgeu	r2,r16,504d68c <__divdf3+0x4cc>
 504d674:	1705883a 	add	r2,r2,fp
 504d678:	40ffffc4 	addi	r3,r8,-1
 504d67c:	1700ad36 	bltu	r2,fp,504d934 <__divdf3+0x774>
 504d680:	1400ac2e 	bgeu	r2,r16,504d934 <__divdf3+0x774>
 504d684:	423fff84 	addi	r8,r8,-2
 504d688:	1705883a 	add	r2,r2,fp
 504d68c:	1421c83a 	sub	r16,r2,r16
 504d690:	a00b883a 	mov	r5,r20
 504d694:	8009883a 	mov	r4,r16
 504d698:	d9800315 	stw	r6,12(sp)
 504d69c:	d9c00215 	stw	r7,8(sp)
 504d6a0:	da000015 	stw	r8,0(sp)
 504d6a4:	da400115 	stw	r9,4(sp)
 504d6a8:	504b3ec0 	call	504b3ec <__udivsi3>
 504d6ac:	8009883a 	mov	r4,r16
 504d6b0:	a00b883a 	mov	r5,r20
 504d6b4:	1025883a 	mov	r18,r2
 504d6b8:	504b4500 	call	504b450 <__umodsi3>
 504d6bc:	d9c00217 	ldw	r7,8(sp)
 504d6c0:	1004943a 	slli	r2,r2,16
 504d6c4:	bcaf383a 	mul	r23,r23,r18
 504d6c8:	393fffcc 	andi	r4,r7,65535
 504d6cc:	2088b03a 	or	r4,r4,r2
 504d6d0:	d9800317 	ldw	r6,12(sp)
 504d6d4:	da000017 	ldw	r8,0(sp)
 504d6d8:	da400117 	ldw	r9,4(sp)
 504d6dc:	25c0062e 	bgeu	r4,r23,504d6f8 <__divdf3+0x538>
 504d6e0:	2709883a 	add	r4,r4,fp
 504d6e4:	90bfffc4 	addi	r2,r18,-1
 504d6e8:	27009436 	bltu	r4,fp,504d93c <__divdf3+0x77c>
 504d6ec:	25c0932e 	bgeu	r4,r23,504d93c <__divdf3+0x77c>
 504d6f0:	94bfff84 	addi	r18,r18,-2
 504d6f4:	2709883a 	add	r4,r4,fp
 504d6f8:	4004943a 	slli	r2,r8,16
 504d6fc:	25efc83a 	sub	r23,r4,r23
 504d700:	1490b03a 	or	r8,r2,r18
 504d704:	4008d43a 	srli	r4,r8,16
 504d708:	40ffffcc 	andi	r3,r8,65535
 504d70c:	30c5383a 	mul	r2,r6,r3
 504d710:	1a47383a 	mul	r3,r3,r9
 504d714:	310d383a 	mul	r6,r6,r4
 504d718:	100ad43a 	srli	r5,r2,16
 504d71c:	4913383a 	mul	r9,r9,r4
 504d720:	1987883a 	add	r3,r3,r6
 504d724:	28c7883a 	add	r3,r5,r3
 504d728:	1980022e 	bgeu	r3,r6,504d734 <__divdf3+0x574>
 504d72c:	01000074 	movhi	r4,1
 504d730:	4913883a 	add	r9,r9,r4
 504d734:	1808d43a 	srli	r4,r3,16
 504d738:	1806943a 	slli	r3,r3,16
 504d73c:	10bfffcc 	andi	r2,r2,65535
 504d740:	2253883a 	add	r9,r4,r9
 504d744:	1887883a 	add	r3,r3,r2
 504d748:	ba403836 	bltu	r23,r9,504d82c <__divdf3+0x66c>
 504d74c:	ba403626 	beq	r23,r9,504d828 <__divdf3+0x668>
 504d750:	42000054 	ori	r8,r8,1
 504d754:	a880ffc4 	addi	r2,r21,1023
 504d758:	00bf570e 	bge	zero,r2,504d4b8 <_gp+0xfffe2090>
 504d75c:	40c001cc 	andi	r3,r8,7
 504d760:	18000726 	beq	r3,zero,504d780 <__divdf3+0x5c0>
 504d764:	40c003cc 	andi	r3,r8,15
 504d768:	01000104 	movi	r4,4
 504d76c:	19000426 	beq	r3,r4,504d780 <__divdf3+0x5c0>
 504d770:	4107883a 	add	r3,r8,r4
 504d774:	1a11803a 	cmpltu	r8,r3,r8
 504d778:	8a23883a 	add	r17,r17,r8
 504d77c:	1811883a 	mov	r8,r3
 504d780:	88c0402c 	andhi	r3,r17,256
 504d784:	18000426 	beq	r3,zero,504d798 <__divdf3+0x5d8>
 504d788:	00ffc034 	movhi	r3,65280
 504d78c:	18ffffc4 	addi	r3,r3,-1
 504d790:	a8810004 	addi	r2,r21,1024
 504d794:	88e2703a 	and	r17,r17,r3
 504d798:	00c1ff84 	movi	r3,2046
 504d79c:	18bee316 	blt	r3,r2,504d32c <_gp+0xfffe1f04>
 504d7a0:	8824977a 	slli	r18,r17,29
 504d7a4:	4010d0fa 	srli	r8,r8,3
 504d7a8:	8822927a 	slli	r17,r17,9
 504d7ac:	1081ffcc 	andi	r2,r2,2047
 504d7b0:	9224b03a 	or	r18,r18,r8
 504d7b4:	880ad33a 	srli	r5,r17,12
 504d7b8:	98c0004c 	andi	r3,r19,1
 504d7bc:	003edf06 	br	504d33c <_gp+0xfffe1f14>
 504d7c0:	8080022c 	andhi	r2,r16,8
 504d7c4:	10001226 	beq	r2,zero,504d810 <__divdf3+0x650>
 504d7c8:	8880022c 	andhi	r2,r17,8
 504d7cc:	1000101e 	bne	r2,zero,504d810 <__divdf3+0x650>
 504d7d0:	00800434 	movhi	r2,16
 504d7d4:	89400234 	orhi	r5,r17,8
 504d7d8:	10bfffc4 	addi	r2,r2,-1
 504d7dc:	b007883a 	mov	r3,r22
 504d7e0:	288a703a 	and	r5,r5,r2
 504d7e4:	4025883a 	mov	r18,r8
 504d7e8:	003f3106 	br	504d4b0 <_gp+0xfffe2088>
 504d7ec:	008000c4 	movi	r2,3
 504d7f0:	3880a626 	beq	r7,r2,504da8c <__divdf3+0x8cc>
 504d7f4:	00800044 	movi	r2,1
 504d7f8:	3880521e 	bne	r7,r2,504d944 <__divdf3+0x784>
 504d7fc:	b807883a 	mov	r3,r23
 504d800:	0005883a 	mov	r2,zero
 504d804:	000b883a 	mov	r5,zero
 504d808:	0025883a 	mov	r18,zero
 504d80c:	003ecb06 	br	504d33c <_gp+0xfffe1f14>
 504d810:	00800434 	movhi	r2,16
 504d814:	81400234 	orhi	r5,r16,8
 504d818:	10bfffc4 	addi	r2,r2,-1
 504d81c:	a007883a 	mov	r3,r20
 504d820:	288a703a 	and	r5,r5,r2
 504d824:	003f2206 	br	504d4b0 <_gp+0xfffe2088>
 504d828:	183fca26 	beq	r3,zero,504d754 <_gp+0xfffe232c>
 504d82c:	e5ef883a 	add	r23,fp,r23
 504d830:	40bfffc4 	addi	r2,r8,-1
 504d834:	bf00392e 	bgeu	r23,fp,504d91c <__divdf3+0x75c>
 504d838:	1011883a 	mov	r8,r2
 504d83c:	ba7fc41e 	bne	r23,r9,504d750 <_gp+0xfffe2328>
 504d840:	b0ffc31e 	bne	r22,r3,504d750 <_gp+0xfffe2328>
 504d844:	003fc306 	br	504d754 <_gp+0xfffe232c>
 504d848:	143ff604 	addi	r16,r2,-40
 504d84c:	9c20983a 	sll	r16,r19,r16
 504d850:	0025883a 	mov	r18,zero
 504d854:	003ee206 	br	504d3e0 <_gp+0xfffe1fb8>
 504d858:	d9800315 	stw	r6,12(sp)
 504d85c:	d9c00215 	stw	r7,8(sp)
 504d860:	504f0340 	call	504f034 <__clzsi2>
 504d864:	10800804 	addi	r2,r2,32
 504d868:	d9c00217 	ldw	r7,8(sp)
 504d86c:	d9800317 	ldw	r6,12(sp)
 504d870:	003ed106 	br	504d3b8 <_gp+0xfffe1f90>
 504d874:	147ff604 	addi	r17,r2,-40
 504d878:	3462983a 	sll	r17,r6,r17
 504d87c:	0011883a 	mov	r8,zero
 504d880:	003ef506 	br	504d458 <_gp+0xfffe2030>
 504d884:	3009883a 	mov	r4,r6
 504d888:	d9800315 	stw	r6,12(sp)
 504d88c:	da400115 	stw	r9,4(sp)
 504d890:	504f0340 	call	504f034 <__clzsi2>
 504d894:	10800804 	addi	r2,r2,32
 504d898:	da400117 	ldw	r9,4(sp)
 504d89c:	d9800317 	ldw	r6,12(sp)
 504d8a0:	003ee306 	br	504d430 <_gp+0xfffe2008>
 504d8a4:	85a1883a 	add	r16,r16,r22
 504d8a8:	8585803a 	cmpltu	r2,r16,r22
 504d8ac:	1705883a 	add	r2,r2,fp
 504d8b0:	14a5883a 	add	r18,r2,r18
 504d8b4:	88bfffc4 	addi	r2,r17,-1
 504d8b8:	e4800c2e 	bgeu	fp,r18,504d8ec <__divdf3+0x72c>
 504d8bc:	90c03e36 	bltu	r18,r3,504d9b8 <__divdf3+0x7f8>
 504d8c0:	1c806926 	beq	r3,r18,504da68 <__divdf3+0x8a8>
 504d8c4:	90c7c83a 	sub	r3,r18,r3
 504d8c8:	1023883a 	mov	r17,r2
 504d8cc:	003f5206 	br	504d618 <_gp+0xfffe21f0>
 504d8d0:	923f0436 	bltu	r18,r8,504d4e4 <_gp+0xfffe20bc>
 504d8d4:	800897fa 	slli	r4,r16,31
 504d8d8:	9004d07a 	srli	r2,r18,1
 504d8dc:	8006d07a 	srli	r3,r16,1
 504d8e0:	902097fa 	slli	r16,r18,31
 504d8e4:	20a4b03a 	or	r18,r4,r2
 504d8e8:	003f0106 	br	504d4f0 <_gp+0xfffe20c8>
 504d8ec:	e4bff51e 	bne	fp,r18,504d8c4 <_gp+0xfffe249c>
 504d8f0:	85bff22e 	bgeu	r16,r22,504d8bc <_gp+0xfffe2494>
 504d8f4:	e0c7c83a 	sub	r3,fp,r3
 504d8f8:	1023883a 	mov	r17,r2
 504d8fc:	003f4606 	br	504d618 <_gp+0xfffe21f0>
 504d900:	100f883a 	mov	r7,r2
 504d904:	003f2b06 	br	504d5b4 <_gp+0xfffe218c>
 504d908:	180d883a 	mov	r6,r3
 504d90c:	003f1306 	br	504d55c <_gp+0xfffe2134>
 504d910:	813fe436 	bltu	r16,r4,504d8a4 <_gp+0xfffe247c>
 504d914:	0007883a 	mov	r3,zero
 504d918:	003f3f06 	br	504d618 <_gp+0xfffe21f0>
 504d91c:	ba402c36 	bltu	r23,r9,504d9d0 <__divdf3+0x810>
 504d920:	4dc05426 	beq	r9,r23,504da74 <__divdf3+0x8b4>
 504d924:	1011883a 	mov	r8,r2
 504d928:	003f8906 	br	504d750 <_gp+0xfffe2328>
 504d92c:	023fffc4 	movi	r8,-1
 504d930:	003f8806 	br	504d754 <_gp+0xfffe232c>
 504d934:	1811883a 	mov	r8,r3
 504d938:	003f5406 	br	504d68c <_gp+0xfffe2264>
 504d93c:	1025883a 	mov	r18,r2
 504d940:	003f6d06 	br	504d6f8 <_gp+0xfffe22d0>
 504d944:	b827883a 	mov	r19,r23
 504d948:	003f8206 	br	504d754 <_gp+0xfffe232c>
 504d94c:	010007c4 	movi	r4,31
 504d950:	20c02616 	blt	r4,r3,504d9ec <__divdf3+0x82c>
 504d954:	00800804 	movi	r2,32
 504d958:	10c5c83a 	sub	r2,r2,r3
 504d95c:	888a983a 	sll	r5,r17,r2
 504d960:	40c8d83a 	srl	r4,r8,r3
 504d964:	4084983a 	sll	r2,r8,r2
 504d968:	88e2d83a 	srl	r17,r17,r3
 504d96c:	2906b03a 	or	r3,r5,r4
 504d970:	1004c03a 	cmpne	r2,r2,zero
 504d974:	1886b03a 	or	r3,r3,r2
 504d978:	188001cc 	andi	r2,r3,7
 504d97c:	10000726 	beq	r2,zero,504d99c <__divdf3+0x7dc>
 504d980:	188003cc 	andi	r2,r3,15
 504d984:	01000104 	movi	r4,4
 504d988:	11000426 	beq	r2,r4,504d99c <__divdf3+0x7dc>
 504d98c:	1805883a 	mov	r2,r3
 504d990:	10c00104 	addi	r3,r2,4
 504d994:	1885803a 	cmpltu	r2,r3,r2
 504d998:	88a3883a 	add	r17,r17,r2
 504d99c:	8880202c 	andhi	r2,r17,128
 504d9a0:	10002726 	beq	r2,zero,504da40 <__divdf3+0x880>
 504d9a4:	98c0004c 	andi	r3,r19,1
 504d9a8:	00800044 	movi	r2,1
 504d9ac:	000b883a 	mov	r5,zero
 504d9b0:	0025883a 	mov	r18,zero
 504d9b4:	003e6106 	br	504d33c <_gp+0xfffe1f14>
 504d9b8:	85a1883a 	add	r16,r16,r22
 504d9bc:	8585803a 	cmpltu	r2,r16,r22
 504d9c0:	1705883a 	add	r2,r2,fp
 504d9c4:	14a5883a 	add	r18,r2,r18
 504d9c8:	8c7fff84 	addi	r17,r17,-2
 504d9cc:	003f1106 	br	504d614 <_gp+0xfffe21ec>
 504d9d0:	b589883a 	add	r4,r22,r22
 504d9d4:	25ad803a 	cmpltu	r22,r4,r22
 504d9d8:	b739883a 	add	fp,r22,fp
 504d9dc:	40bfff84 	addi	r2,r8,-2
 504d9e0:	bf2f883a 	add	r23,r23,fp
 504d9e4:	202d883a 	mov	r22,r4
 504d9e8:	003f9306 	br	504d838 <_gp+0xfffe2410>
 504d9ec:	013ff844 	movi	r4,-31
 504d9f0:	2085c83a 	sub	r2,r4,r2
 504d9f4:	8888d83a 	srl	r4,r17,r2
 504d9f8:	00800804 	movi	r2,32
 504d9fc:	18802126 	beq	r3,r2,504da84 <__divdf3+0x8c4>
 504da00:	00801004 	movi	r2,64
 504da04:	10c5c83a 	sub	r2,r2,r3
 504da08:	8884983a 	sll	r2,r17,r2
 504da0c:	1204b03a 	or	r2,r2,r8
 504da10:	1004c03a 	cmpne	r2,r2,zero
 504da14:	2084b03a 	or	r2,r4,r2
 504da18:	144001cc 	andi	r17,r2,7
 504da1c:	88000d1e 	bne	r17,zero,504da54 <__divdf3+0x894>
 504da20:	000b883a 	mov	r5,zero
 504da24:	1024d0fa 	srli	r18,r2,3
 504da28:	98c0004c 	andi	r3,r19,1
 504da2c:	0005883a 	mov	r2,zero
 504da30:	9464b03a 	or	r18,r18,r17
 504da34:	003e4106 	br	504d33c <_gp+0xfffe1f14>
 504da38:	1007883a 	mov	r3,r2
 504da3c:	0023883a 	mov	r17,zero
 504da40:	880a927a 	slli	r5,r17,9
 504da44:	1805883a 	mov	r2,r3
 504da48:	8822977a 	slli	r17,r17,29
 504da4c:	280ad33a 	srli	r5,r5,12
 504da50:	003ff406 	br	504da24 <_gp+0xfffe25fc>
 504da54:	10c003cc 	andi	r3,r2,15
 504da58:	01000104 	movi	r4,4
 504da5c:	193ff626 	beq	r3,r4,504da38 <_gp+0xfffe2610>
 504da60:	0023883a 	mov	r17,zero
 504da64:	003fca06 	br	504d990 <_gp+0xfffe2568>
 504da68:	813fd336 	bltu	r16,r4,504d9b8 <_gp+0xfffe2590>
 504da6c:	1023883a 	mov	r17,r2
 504da70:	003fa806 	br	504d914 <_gp+0xfffe24ec>
 504da74:	b0ffd636 	bltu	r22,r3,504d9d0 <_gp+0xfffe25a8>
 504da78:	1011883a 	mov	r8,r2
 504da7c:	b0ff341e 	bne	r22,r3,504d750 <_gp+0xfffe2328>
 504da80:	003f3406 	br	504d754 <_gp+0xfffe232c>
 504da84:	0005883a 	mov	r2,zero
 504da88:	003fe006 	br	504da0c <_gp+0xfffe25e4>
 504da8c:	00800434 	movhi	r2,16
 504da90:	89400234 	orhi	r5,r17,8
 504da94:	10bfffc4 	addi	r2,r2,-1
 504da98:	b807883a 	mov	r3,r23
 504da9c:	288a703a 	and	r5,r5,r2
 504daa0:	4025883a 	mov	r18,r8
 504daa4:	003e8206 	br	504d4b0 <_gp+0xfffe2088>

0504daa8 <__eqdf2>:
 504daa8:	2804d53a 	srli	r2,r5,20
 504daac:	3806d53a 	srli	r3,r7,20
 504dab0:	02000434 	movhi	r8,16
 504dab4:	423fffc4 	addi	r8,r8,-1
 504dab8:	1081ffcc 	andi	r2,r2,2047
 504dabc:	0281ffc4 	movi	r10,2047
 504dac0:	2a12703a 	and	r9,r5,r8
 504dac4:	18c1ffcc 	andi	r3,r3,2047
 504dac8:	3a10703a 	and	r8,r7,r8
 504dacc:	280ad7fa 	srli	r5,r5,31
 504dad0:	380ed7fa 	srli	r7,r7,31
 504dad4:	12801026 	beq	r2,r10,504db18 <__eqdf2+0x70>
 504dad8:	0281ffc4 	movi	r10,2047
 504dadc:	1a800a26 	beq	r3,r10,504db08 <__eqdf2+0x60>
 504dae0:	10c00226 	beq	r2,r3,504daec <__eqdf2+0x44>
 504dae4:	00800044 	movi	r2,1
 504dae8:	f800283a 	ret
 504daec:	4a3ffd1e 	bne	r9,r8,504dae4 <_gp+0xfffe26bc>
 504daf0:	21bffc1e 	bne	r4,r6,504dae4 <_gp+0xfffe26bc>
 504daf4:	29c00c26 	beq	r5,r7,504db28 <__eqdf2+0x80>
 504daf8:	103ffa1e 	bne	r2,zero,504dae4 <_gp+0xfffe26bc>
 504dafc:	2244b03a 	or	r2,r4,r9
 504db00:	1004c03a 	cmpne	r2,r2,zero
 504db04:	f800283a 	ret
 504db08:	3214b03a 	or	r10,r6,r8
 504db0c:	503ff426 	beq	r10,zero,504dae0 <_gp+0xfffe26b8>
 504db10:	00800044 	movi	r2,1
 504db14:	f800283a 	ret
 504db18:	2254b03a 	or	r10,r4,r9
 504db1c:	503fee26 	beq	r10,zero,504dad8 <_gp+0xfffe26b0>
 504db20:	00800044 	movi	r2,1
 504db24:	f800283a 	ret
 504db28:	0005883a 	mov	r2,zero
 504db2c:	f800283a 	ret

0504db30 <__gedf2>:
 504db30:	2804d53a 	srli	r2,r5,20
 504db34:	3806d53a 	srli	r3,r7,20
 504db38:	02000434 	movhi	r8,16
 504db3c:	423fffc4 	addi	r8,r8,-1
 504db40:	1081ffcc 	andi	r2,r2,2047
 504db44:	0241ffc4 	movi	r9,2047
 504db48:	2a14703a 	and	r10,r5,r8
 504db4c:	18c1ffcc 	andi	r3,r3,2047
 504db50:	3a10703a 	and	r8,r7,r8
 504db54:	280ad7fa 	srli	r5,r5,31
 504db58:	380ed7fa 	srli	r7,r7,31
 504db5c:	12401d26 	beq	r2,r9,504dbd4 <__gedf2+0xa4>
 504db60:	0241ffc4 	movi	r9,2047
 504db64:	1a401226 	beq	r3,r9,504dbb0 <__gedf2+0x80>
 504db68:	1000081e 	bne	r2,zero,504db8c <__gedf2+0x5c>
 504db6c:	2296b03a 	or	r11,r4,r10
 504db70:	5813003a 	cmpeq	r9,r11,zero
 504db74:	1800091e 	bne	r3,zero,504db9c <__gedf2+0x6c>
 504db78:	3218b03a 	or	r12,r6,r8
 504db7c:	6000071e 	bne	r12,zero,504db9c <__gedf2+0x6c>
 504db80:	0005883a 	mov	r2,zero
 504db84:	5800101e 	bne	r11,zero,504dbc8 <__gedf2+0x98>
 504db88:	f800283a 	ret
 504db8c:	18000c1e 	bne	r3,zero,504dbc0 <__gedf2+0x90>
 504db90:	3212b03a 	or	r9,r6,r8
 504db94:	48000c26 	beq	r9,zero,504dbc8 <__gedf2+0x98>
 504db98:	0013883a 	mov	r9,zero
 504db9c:	39c03fcc 	andi	r7,r7,255
 504dba0:	48000826 	beq	r9,zero,504dbc4 <__gedf2+0x94>
 504dba4:	38000926 	beq	r7,zero,504dbcc <__gedf2+0x9c>
 504dba8:	00800044 	movi	r2,1
 504dbac:	f800283a 	ret
 504dbb0:	3212b03a 	or	r9,r6,r8
 504dbb4:	483fec26 	beq	r9,zero,504db68 <_gp+0xfffe2740>
 504dbb8:	00bfff84 	movi	r2,-2
 504dbbc:	f800283a 	ret
 504dbc0:	39c03fcc 	andi	r7,r7,255
 504dbc4:	29c00626 	beq	r5,r7,504dbe0 <__gedf2+0xb0>
 504dbc8:	283ff726 	beq	r5,zero,504dba8 <_gp+0xfffe2780>
 504dbcc:	00bfffc4 	movi	r2,-1
 504dbd0:	f800283a 	ret
 504dbd4:	2292b03a 	or	r9,r4,r10
 504dbd8:	483fe126 	beq	r9,zero,504db60 <_gp+0xfffe2738>
 504dbdc:	003ff606 	br	504dbb8 <_gp+0xfffe2790>
 504dbe0:	18bff916 	blt	r3,r2,504dbc8 <_gp+0xfffe27a0>
 504dbe4:	10c00316 	blt	r2,r3,504dbf4 <__gedf2+0xc4>
 504dbe8:	42bff736 	bltu	r8,r10,504dbc8 <_gp+0xfffe27a0>
 504dbec:	52000326 	beq	r10,r8,504dbfc <__gedf2+0xcc>
 504dbf0:	5200042e 	bgeu	r10,r8,504dc04 <__gedf2+0xd4>
 504dbf4:	283fec1e 	bne	r5,zero,504dba8 <_gp+0xfffe2780>
 504dbf8:	003ff406 	br	504dbcc <_gp+0xfffe27a4>
 504dbfc:	313ff236 	bltu	r6,r4,504dbc8 <_gp+0xfffe27a0>
 504dc00:	21bffc36 	bltu	r4,r6,504dbf4 <_gp+0xfffe27cc>
 504dc04:	0005883a 	mov	r2,zero
 504dc08:	f800283a 	ret

0504dc0c <__muldf3>:
 504dc0c:	defff304 	addi	sp,sp,-52
 504dc10:	2804d53a 	srli	r2,r5,20
 504dc14:	dd800915 	stw	r22,36(sp)
 504dc18:	282cd7fa 	srli	r22,r5,31
 504dc1c:	dc000315 	stw	r16,12(sp)
 504dc20:	04000434 	movhi	r16,16
 504dc24:	dd400815 	stw	r21,32(sp)
 504dc28:	dc800515 	stw	r18,20(sp)
 504dc2c:	843fffc4 	addi	r16,r16,-1
 504dc30:	dfc00c15 	stw	ra,48(sp)
 504dc34:	df000b15 	stw	fp,44(sp)
 504dc38:	ddc00a15 	stw	r23,40(sp)
 504dc3c:	dd000715 	stw	r20,28(sp)
 504dc40:	dcc00615 	stw	r19,24(sp)
 504dc44:	dc400415 	stw	r17,16(sp)
 504dc48:	1481ffcc 	andi	r18,r2,2047
 504dc4c:	2c20703a 	and	r16,r5,r16
 504dc50:	b02b883a 	mov	r21,r22
 504dc54:	b2403fcc 	andi	r9,r22,255
 504dc58:	90006026 	beq	r18,zero,504dddc <__muldf3+0x1d0>
 504dc5c:	0081ffc4 	movi	r2,2047
 504dc60:	2029883a 	mov	r20,r4
 504dc64:	90803626 	beq	r18,r2,504dd40 <__muldf3+0x134>
 504dc68:	80800434 	orhi	r2,r16,16
 504dc6c:	100490fa 	slli	r2,r2,3
 504dc70:	2020d77a 	srli	r16,r4,29
 504dc74:	202890fa 	slli	r20,r4,3
 504dc78:	94bf0044 	addi	r18,r18,-1023
 504dc7c:	80a0b03a 	or	r16,r16,r2
 504dc80:	0027883a 	mov	r19,zero
 504dc84:	0039883a 	mov	fp,zero
 504dc88:	3804d53a 	srli	r2,r7,20
 504dc8c:	382ed7fa 	srli	r23,r7,31
 504dc90:	04400434 	movhi	r17,16
 504dc94:	8c7fffc4 	addi	r17,r17,-1
 504dc98:	1081ffcc 	andi	r2,r2,2047
 504dc9c:	3011883a 	mov	r8,r6
 504dca0:	3c62703a 	and	r17,r7,r17
 504dca4:	ba803fcc 	andi	r10,r23,255
 504dca8:	10006d26 	beq	r2,zero,504de60 <__muldf3+0x254>
 504dcac:	00c1ffc4 	movi	r3,2047
 504dcb0:	10c06526 	beq	r2,r3,504de48 <__muldf3+0x23c>
 504dcb4:	88c00434 	orhi	r3,r17,16
 504dcb8:	180690fa 	slli	r3,r3,3
 504dcbc:	3022d77a 	srli	r17,r6,29
 504dcc0:	301090fa 	slli	r8,r6,3
 504dcc4:	10bf0044 	addi	r2,r2,-1023
 504dcc8:	88e2b03a 	or	r17,r17,r3
 504dccc:	000b883a 	mov	r5,zero
 504dcd0:	9085883a 	add	r2,r18,r2
 504dcd4:	2cc8b03a 	or	r4,r5,r19
 504dcd8:	00c003c4 	movi	r3,15
 504dcdc:	bdacf03a 	xor	r22,r23,r22
 504dce0:	12c00044 	addi	r11,r2,1
 504dce4:	19009936 	bltu	r3,r4,504df4c <__muldf3+0x340>
 504dce8:	200890ba 	slli	r4,r4,2
 504dcec:	00c14174 	movhi	r3,1285
 504dcf0:	18f74004 	addi	r3,r3,-8960
 504dcf4:	20c9883a 	add	r4,r4,r3
 504dcf8:	20c00017 	ldw	r3,0(r4)
 504dcfc:	1800683a 	jmp	r3
 504dd00:	0504df4c 	andi	r20,zero,4989
 504dd04:	0504dd60 	cmpeqi	r20,zero,4981
 504dd08:	0504dd60 	cmpeqi	r20,zero,4981
 504dd0c:	0504dd5c 	xori	r20,zero,4981
 504dd10:	0504df28 	cmpgeui	r20,zero,4988
 504dd14:	0504df28 	cmpgeui	r20,zero,4988
 504dd18:	0504df10 	cmplti	r20,zero,4988
 504dd1c:	0504dd5c 	xori	r20,zero,4981
 504dd20:	0504df28 	cmpgeui	r20,zero,4988
 504dd24:	0504df10 	cmplti	r20,zero,4988
 504dd28:	0504df28 	cmpgeui	r20,zero,4988
 504dd2c:	0504dd5c 	xori	r20,zero,4981
 504dd30:	0504df38 	rdprs	r20,zero,4988
 504dd34:	0504df38 	rdprs	r20,zero,4988
 504dd38:	0504df38 	rdprs	r20,zero,4988
 504dd3c:	0504e154 	movui	r20,4997
 504dd40:	2404b03a 	or	r2,r4,r16
 504dd44:	10006f1e 	bne	r2,zero,504df04 <__muldf3+0x2f8>
 504dd48:	04c00204 	movi	r19,8
 504dd4c:	0021883a 	mov	r16,zero
 504dd50:	0029883a 	mov	r20,zero
 504dd54:	07000084 	movi	fp,2
 504dd58:	003fcb06 	br	504dc88 <_gp+0xfffe2860>
 504dd5c:	502d883a 	mov	r22,r10
 504dd60:	00800084 	movi	r2,2
 504dd64:	28805726 	beq	r5,r2,504dec4 <__muldf3+0x2b8>
 504dd68:	008000c4 	movi	r2,3
 504dd6c:	28816626 	beq	r5,r2,504e308 <__muldf3+0x6fc>
 504dd70:	00800044 	movi	r2,1
 504dd74:	2881411e 	bne	r5,r2,504e27c <__muldf3+0x670>
 504dd78:	b02b883a 	mov	r21,r22
 504dd7c:	0005883a 	mov	r2,zero
 504dd80:	000b883a 	mov	r5,zero
 504dd84:	0029883a 	mov	r20,zero
 504dd88:	1004953a 	slli	r2,r2,20
 504dd8c:	a8c03fcc 	andi	r3,r21,255
 504dd90:	04400434 	movhi	r17,16
 504dd94:	8c7fffc4 	addi	r17,r17,-1
 504dd98:	180697fa 	slli	r3,r3,31
 504dd9c:	2c4a703a 	and	r5,r5,r17
 504dda0:	288ab03a 	or	r5,r5,r2
 504dda4:	28c6b03a 	or	r3,r5,r3
 504dda8:	a005883a 	mov	r2,r20
 504ddac:	dfc00c17 	ldw	ra,48(sp)
 504ddb0:	df000b17 	ldw	fp,44(sp)
 504ddb4:	ddc00a17 	ldw	r23,40(sp)
 504ddb8:	dd800917 	ldw	r22,36(sp)
 504ddbc:	dd400817 	ldw	r21,32(sp)
 504ddc0:	dd000717 	ldw	r20,28(sp)
 504ddc4:	dcc00617 	ldw	r19,24(sp)
 504ddc8:	dc800517 	ldw	r18,20(sp)
 504ddcc:	dc400417 	ldw	r17,16(sp)
 504ddd0:	dc000317 	ldw	r16,12(sp)
 504ddd4:	dec00d04 	addi	sp,sp,52
 504ddd8:	f800283a 	ret
 504dddc:	2404b03a 	or	r2,r4,r16
 504dde0:	2027883a 	mov	r19,r4
 504dde4:	10004226 	beq	r2,zero,504def0 <__muldf3+0x2e4>
 504dde8:	8000fc26 	beq	r16,zero,504e1dc <__muldf3+0x5d0>
 504ddec:	8009883a 	mov	r4,r16
 504ddf0:	d9800215 	stw	r6,8(sp)
 504ddf4:	d9c00015 	stw	r7,0(sp)
 504ddf8:	da400115 	stw	r9,4(sp)
 504ddfc:	504f0340 	call	504f034 <__clzsi2>
 504de00:	d9800217 	ldw	r6,8(sp)
 504de04:	d9c00017 	ldw	r7,0(sp)
 504de08:	da400117 	ldw	r9,4(sp)
 504de0c:	113ffd44 	addi	r4,r2,-11
 504de10:	00c00704 	movi	r3,28
 504de14:	1900ed16 	blt	r3,r4,504e1cc <__muldf3+0x5c0>
 504de18:	00c00744 	movi	r3,29
 504de1c:	147ffe04 	addi	r17,r2,-8
 504de20:	1907c83a 	sub	r3,r3,r4
 504de24:	8460983a 	sll	r16,r16,r17
 504de28:	98c6d83a 	srl	r3,r19,r3
 504de2c:	9c68983a 	sll	r20,r19,r17
 504de30:	1c20b03a 	or	r16,r3,r16
 504de34:	1080fcc4 	addi	r2,r2,1011
 504de38:	00a5c83a 	sub	r18,zero,r2
 504de3c:	0027883a 	mov	r19,zero
 504de40:	0039883a 	mov	fp,zero
 504de44:	003f9006 	br	504dc88 <_gp+0xfffe2860>
 504de48:	3446b03a 	or	r3,r6,r17
 504de4c:	1800261e 	bne	r3,zero,504dee8 <__muldf3+0x2dc>
 504de50:	0023883a 	mov	r17,zero
 504de54:	0011883a 	mov	r8,zero
 504de58:	01400084 	movi	r5,2
 504de5c:	003f9c06 	br	504dcd0 <_gp+0xfffe28a8>
 504de60:	3446b03a 	or	r3,r6,r17
 504de64:	18001c26 	beq	r3,zero,504ded8 <__muldf3+0x2cc>
 504de68:	8800ce26 	beq	r17,zero,504e1a4 <__muldf3+0x598>
 504de6c:	8809883a 	mov	r4,r17
 504de70:	d9800215 	stw	r6,8(sp)
 504de74:	da400115 	stw	r9,4(sp)
 504de78:	da800015 	stw	r10,0(sp)
 504de7c:	504f0340 	call	504f034 <__clzsi2>
 504de80:	d9800217 	ldw	r6,8(sp)
 504de84:	da400117 	ldw	r9,4(sp)
 504de88:	da800017 	ldw	r10,0(sp)
 504de8c:	113ffd44 	addi	r4,r2,-11
 504de90:	00c00704 	movi	r3,28
 504de94:	1900bf16 	blt	r3,r4,504e194 <__muldf3+0x588>
 504de98:	00c00744 	movi	r3,29
 504de9c:	123ffe04 	addi	r8,r2,-8
 504dea0:	1907c83a 	sub	r3,r3,r4
 504dea4:	8a22983a 	sll	r17,r17,r8
 504dea8:	30c6d83a 	srl	r3,r6,r3
 504deac:	3210983a 	sll	r8,r6,r8
 504deb0:	1c62b03a 	or	r17,r3,r17
 504deb4:	1080fcc4 	addi	r2,r2,1011
 504deb8:	0085c83a 	sub	r2,zero,r2
 504debc:	000b883a 	mov	r5,zero
 504dec0:	003f8306 	br	504dcd0 <_gp+0xfffe28a8>
 504dec4:	b02b883a 	mov	r21,r22
 504dec8:	0081ffc4 	movi	r2,2047
 504decc:	000b883a 	mov	r5,zero
 504ded0:	0029883a 	mov	r20,zero
 504ded4:	003fac06 	br	504dd88 <_gp+0xfffe2960>
 504ded8:	0023883a 	mov	r17,zero
 504dedc:	0011883a 	mov	r8,zero
 504dee0:	01400044 	movi	r5,1
 504dee4:	003f7a06 	br	504dcd0 <_gp+0xfffe28a8>
 504dee8:	014000c4 	movi	r5,3
 504deec:	003f7806 	br	504dcd0 <_gp+0xfffe28a8>
 504def0:	04c00104 	movi	r19,4
 504def4:	0021883a 	mov	r16,zero
 504def8:	0029883a 	mov	r20,zero
 504defc:	07000044 	movi	fp,1
 504df00:	003f6106 	br	504dc88 <_gp+0xfffe2860>
 504df04:	04c00304 	movi	r19,12
 504df08:	070000c4 	movi	fp,3
 504df0c:	003f5e06 	br	504dc88 <_gp+0xfffe2860>
 504df10:	01400434 	movhi	r5,16
 504df14:	002b883a 	mov	r21,zero
 504df18:	297fffc4 	addi	r5,r5,-1
 504df1c:	053fffc4 	movi	r20,-1
 504df20:	0081ffc4 	movi	r2,2047
 504df24:	003f9806 	br	504dd88 <_gp+0xfffe2960>
 504df28:	8023883a 	mov	r17,r16
 504df2c:	a011883a 	mov	r8,r20
 504df30:	e00b883a 	mov	r5,fp
 504df34:	003f8a06 	br	504dd60 <_gp+0xfffe2938>
 504df38:	8023883a 	mov	r17,r16
 504df3c:	a011883a 	mov	r8,r20
 504df40:	482d883a 	mov	r22,r9
 504df44:	e00b883a 	mov	r5,fp
 504df48:	003f8506 	br	504dd60 <_gp+0xfffe2938>
 504df4c:	a00ad43a 	srli	r5,r20,16
 504df50:	401ad43a 	srli	r13,r8,16
 504df54:	a53fffcc 	andi	r20,r20,65535
 504df58:	423fffcc 	andi	r8,r8,65535
 504df5c:	4519383a 	mul	r12,r8,r20
 504df60:	4147383a 	mul	r3,r8,r5
 504df64:	6d09383a 	mul	r4,r13,r20
 504df68:	600cd43a 	srli	r6,r12,16
 504df6c:	2b5d383a 	mul	r14,r5,r13
 504df70:	20c9883a 	add	r4,r4,r3
 504df74:	310d883a 	add	r6,r6,r4
 504df78:	30c0022e 	bgeu	r6,r3,504df84 <__muldf3+0x378>
 504df7c:	00c00074 	movhi	r3,1
 504df80:	70dd883a 	add	r14,r14,r3
 504df84:	8826d43a 	srli	r19,r17,16
 504df88:	8bffffcc 	andi	r15,r17,65535
 504df8c:	7d23383a 	mul	r17,r15,r20
 504df90:	7949383a 	mul	r4,r15,r5
 504df94:	9d29383a 	mul	r20,r19,r20
 504df98:	8814d43a 	srli	r10,r17,16
 504df9c:	3012943a 	slli	r9,r6,16
 504dfa0:	a129883a 	add	r20,r20,r4
 504dfa4:	633fffcc 	andi	r12,r12,65535
 504dfa8:	5515883a 	add	r10,r10,r20
 504dfac:	3006d43a 	srli	r3,r6,16
 504dfb0:	4b13883a 	add	r9,r9,r12
 504dfb4:	2ccb383a 	mul	r5,r5,r19
 504dfb8:	5100022e 	bgeu	r10,r4,504dfc4 <__muldf3+0x3b8>
 504dfbc:	01000074 	movhi	r4,1
 504dfc0:	290b883a 	add	r5,r5,r4
 504dfc4:	802ad43a 	srli	r21,r16,16
 504dfc8:	843fffcc 	andi	r16,r16,65535
 504dfcc:	440d383a 	mul	r6,r8,r16
 504dfd0:	4565383a 	mul	r18,r8,r21
 504dfd4:	8349383a 	mul	r4,r16,r13
 504dfd8:	500e943a 	slli	r7,r10,16
 504dfdc:	3010d43a 	srli	r8,r6,16
 504dfe0:	5028d43a 	srli	r20,r10,16
 504dfe4:	2489883a 	add	r4,r4,r18
 504dfe8:	8abfffcc 	andi	r10,r17,65535
 504dfec:	3a95883a 	add	r10,r7,r10
 504dff0:	4119883a 	add	r12,r8,r4
 504dff4:	a169883a 	add	r20,r20,r5
 504dff8:	1a87883a 	add	r3,r3,r10
 504dffc:	6d5b383a 	mul	r13,r13,r21
 504e000:	6480022e 	bgeu	r12,r18,504e00c <__muldf3+0x400>
 504e004:	01000074 	movhi	r4,1
 504e008:	691b883a 	add	r13,r13,r4
 504e00c:	7c25383a 	mul	r18,r15,r16
 504e010:	7d4b383a 	mul	r5,r15,r21
 504e014:	84cf383a 	mul	r7,r16,r19
 504e018:	901ed43a 	srli	r15,r18,16
 504e01c:	6008d43a 	srli	r4,r12,16
 504e020:	6010943a 	slli	r8,r12,16
 504e024:	394f883a 	add	r7,r7,r5
 504e028:	333fffcc 	andi	r12,r6,65535
 504e02c:	79df883a 	add	r15,r15,r7
 504e030:	235b883a 	add	r13,r4,r13
 504e034:	9d63383a 	mul	r17,r19,r21
 504e038:	4309883a 	add	r4,r8,r12
 504e03c:	7940022e 	bgeu	r15,r5,504e048 <__muldf3+0x43c>
 504e040:	01400074 	movhi	r5,1
 504e044:	8963883a 	add	r17,r17,r5
 504e048:	780a943a 	slli	r5,r15,16
 504e04c:	91bfffcc 	andi	r6,r18,65535
 504e050:	70c7883a 	add	r3,r14,r3
 504e054:	298d883a 	add	r6,r5,r6
 504e058:	1a8f803a 	cmpltu	r7,r3,r10
 504e05c:	350b883a 	add	r5,r6,r20
 504e060:	20c7883a 	add	r3,r4,r3
 504e064:	3955883a 	add	r10,r7,r5
 504e068:	1909803a 	cmpltu	r4,r3,r4
 504e06c:	6a91883a 	add	r8,r13,r10
 504e070:	780cd43a 	srli	r6,r15,16
 504e074:	2219883a 	add	r12,r4,r8
 504e078:	2d0b803a 	cmpltu	r5,r5,r20
 504e07c:	51cf803a 	cmpltu	r7,r10,r7
 504e080:	29ceb03a 	or	r7,r5,r7
 504e084:	4351803a 	cmpltu	r8,r8,r13
 504e088:	610b803a 	cmpltu	r5,r12,r4
 504e08c:	4148b03a 	or	r4,r8,r5
 504e090:	398f883a 	add	r7,r7,r6
 504e094:	3909883a 	add	r4,r7,r4
 504e098:	1810927a 	slli	r8,r3,9
 504e09c:	2449883a 	add	r4,r4,r17
 504e0a0:	2008927a 	slli	r4,r4,9
 504e0a4:	6022d5fa 	srli	r17,r12,23
 504e0a8:	1806d5fa 	srli	r3,r3,23
 504e0ac:	4252b03a 	or	r9,r8,r9
 504e0b0:	600a927a 	slli	r5,r12,9
 504e0b4:	4810c03a 	cmpne	r8,r9,zero
 504e0b8:	2462b03a 	or	r17,r4,r17
 504e0bc:	40c6b03a 	or	r3,r8,r3
 504e0c0:	8900402c 	andhi	r4,r17,256
 504e0c4:	1950b03a 	or	r8,r3,r5
 504e0c8:	20000726 	beq	r4,zero,504e0e8 <__muldf3+0x4dc>
 504e0cc:	4006d07a 	srli	r3,r8,1
 504e0d0:	880497fa 	slli	r2,r17,31
 504e0d4:	4200004c 	andi	r8,r8,1
 504e0d8:	8822d07a 	srli	r17,r17,1
 504e0dc:	1a10b03a 	or	r8,r3,r8
 504e0e0:	1210b03a 	or	r8,r2,r8
 504e0e4:	5805883a 	mov	r2,r11
 504e0e8:	1140ffc4 	addi	r5,r2,1023
 504e0ec:	0140440e 	bge	zero,r5,504e200 <__muldf3+0x5f4>
 504e0f0:	40c001cc 	andi	r3,r8,7
 504e0f4:	18000726 	beq	r3,zero,504e114 <__muldf3+0x508>
 504e0f8:	40c003cc 	andi	r3,r8,15
 504e0fc:	01000104 	movi	r4,4
 504e100:	19000426 	beq	r3,r4,504e114 <__muldf3+0x508>
 504e104:	4107883a 	add	r3,r8,r4
 504e108:	1a11803a 	cmpltu	r8,r3,r8
 504e10c:	8a23883a 	add	r17,r17,r8
 504e110:	1811883a 	mov	r8,r3
 504e114:	88c0402c 	andhi	r3,r17,256
 504e118:	18000426 	beq	r3,zero,504e12c <__muldf3+0x520>
 504e11c:	11410004 	addi	r5,r2,1024
 504e120:	00bfc034 	movhi	r2,65280
 504e124:	10bfffc4 	addi	r2,r2,-1
 504e128:	88a2703a 	and	r17,r17,r2
 504e12c:	0081ff84 	movi	r2,2046
 504e130:	117f6416 	blt	r2,r5,504dec4 <_gp+0xfffe2a9c>
 504e134:	8828977a 	slli	r20,r17,29
 504e138:	4010d0fa 	srli	r8,r8,3
 504e13c:	8822927a 	slli	r17,r17,9
 504e140:	2881ffcc 	andi	r2,r5,2047
 504e144:	a228b03a 	or	r20,r20,r8
 504e148:	880ad33a 	srli	r5,r17,12
 504e14c:	b02b883a 	mov	r21,r22
 504e150:	003f0d06 	br	504dd88 <_gp+0xfffe2960>
 504e154:	8080022c 	andhi	r2,r16,8
 504e158:	10000926 	beq	r2,zero,504e180 <__muldf3+0x574>
 504e15c:	8880022c 	andhi	r2,r17,8
 504e160:	1000071e 	bne	r2,zero,504e180 <__muldf3+0x574>
 504e164:	00800434 	movhi	r2,16
 504e168:	89400234 	orhi	r5,r17,8
 504e16c:	10bfffc4 	addi	r2,r2,-1
 504e170:	b82b883a 	mov	r21,r23
 504e174:	288a703a 	and	r5,r5,r2
 504e178:	4029883a 	mov	r20,r8
 504e17c:	003f6806 	br	504df20 <_gp+0xfffe2af8>
 504e180:	00800434 	movhi	r2,16
 504e184:	81400234 	orhi	r5,r16,8
 504e188:	10bfffc4 	addi	r2,r2,-1
 504e18c:	288a703a 	and	r5,r5,r2
 504e190:	003f6306 	br	504df20 <_gp+0xfffe2af8>
 504e194:	147ff604 	addi	r17,r2,-40
 504e198:	3462983a 	sll	r17,r6,r17
 504e19c:	0011883a 	mov	r8,zero
 504e1a0:	003f4406 	br	504deb4 <_gp+0xfffe2a8c>
 504e1a4:	3009883a 	mov	r4,r6
 504e1a8:	d9800215 	stw	r6,8(sp)
 504e1ac:	da400115 	stw	r9,4(sp)
 504e1b0:	da800015 	stw	r10,0(sp)
 504e1b4:	504f0340 	call	504f034 <__clzsi2>
 504e1b8:	10800804 	addi	r2,r2,32
 504e1bc:	da800017 	ldw	r10,0(sp)
 504e1c0:	da400117 	ldw	r9,4(sp)
 504e1c4:	d9800217 	ldw	r6,8(sp)
 504e1c8:	003f3006 	br	504de8c <_gp+0xfffe2a64>
 504e1cc:	143ff604 	addi	r16,r2,-40
 504e1d0:	9c20983a 	sll	r16,r19,r16
 504e1d4:	0029883a 	mov	r20,zero
 504e1d8:	003f1606 	br	504de34 <_gp+0xfffe2a0c>
 504e1dc:	d9800215 	stw	r6,8(sp)
 504e1e0:	d9c00015 	stw	r7,0(sp)
 504e1e4:	da400115 	stw	r9,4(sp)
 504e1e8:	504f0340 	call	504f034 <__clzsi2>
 504e1ec:	10800804 	addi	r2,r2,32
 504e1f0:	da400117 	ldw	r9,4(sp)
 504e1f4:	d9c00017 	ldw	r7,0(sp)
 504e1f8:	d9800217 	ldw	r6,8(sp)
 504e1fc:	003f0306 	br	504de0c <_gp+0xfffe29e4>
 504e200:	00c00044 	movi	r3,1
 504e204:	1947c83a 	sub	r3,r3,r5
 504e208:	00800e04 	movi	r2,56
 504e20c:	10feda16 	blt	r2,r3,504dd78 <_gp+0xfffe2950>
 504e210:	008007c4 	movi	r2,31
 504e214:	10c01b16 	blt	r2,r3,504e284 <__muldf3+0x678>
 504e218:	00800804 	movi	r2,32
 504e21c:	10c5c83a 	sub	r2,r2,r3
 504e220:	888a983a 	sll	r5,r17,r2
 504e224:	40c8d83a 	srl	r4,r8,r3
 504e228:	4084983a 	sll	r2,r8,r2
 504e22c:	88e2d83a 	srl	r17,r17,r3
 504e230:	2906b03a 	or	r3,r5,r4
 504e234:	1004c03a 	cmpne	r2,r2,zero
 504e238:	1886b03a 	or	r3,r3,r2
 504e23c:	188001cc 	andi	r2,r3,7
 504e240:	10000726 	beq	r2,zero,504e260 <__muldf3+0x654>
 504e244:	188003cc 	andi	r2,r3,15
 504e248:	01000104 	movi	r4,4
 504e24c:	11000426 	beq	r2,r4,504e260 <__muldf3+0x654>
 504e250:	1805883a 	mov	r2,r3
 504e254:	10c00104 	addi	r3,r2,4
 504e258:	1885803a 	cmpltu	r2,r3,r2
 504e25c:	88a3883a 	add	r17,r17,r2
 504e260:	8880202c 	andhi	r2,r17,128
 504e264:	10001c26 	beq	r2,zero,504e2d8 <__muldf3+0x6cc>
 504e268:	b02b883a 	mov	r21,r22
 504e26c:	00800044 	movi	r2,1
 504e270:	000b883a 	mov	r5,zero
 504e274:	0029883a 	mov	r20,zero
 504e278:	003ec306 	br	504dd88 <_gp+0xfffe2960>
 504e27c:	5805883a 	mov	r2,r11
 504e280:	003f9906 	br	504e0e8 <_gp+0xfffe2cc0>
 504e284:	00bff844 	movi	r2,-31
 504e288:	1145c83a 	sub	r2,r2,r5
 504e28c:	8888d83a 	srl	r4,r17,r2
 504e290:	00800804 	movi	r2,32
 504e294:	18801a26 	beq	r3,r2,504e300 <__muldf3+0x6f4>
 504e298:	00801004 	movi	r2,64
 504e29c:	10c5c83a 	sub	r2,r2,r3
 504e2a0:	8884983a 	sll	r2,r17,r2
 504e2a4:	1204b03a 	or	r2,r2,r8
 504e2a8:	1004c03a 	cmpne	r2,r2,zero
 504e2ac:	2084b03a 	or	r2,r4,r2
 504e2b0:	144001cc 	andi	r17,r2,7
 504e2b4:	88000d1e 	bne	r17,zero,504e2ec <__muldf3+0x6e0>
 504e2b8:	000b883a 	mov	r5,zero
 504e2bc:	1028d0fa 	srli	r20,r2,3
 504e2c0:	b02b883a 	mov	r21,r22
 504e2c4:	0005883a 	mov	r2,zero
 504e2c8:	a468b03a 	or	r20,r20,r17
 504e2cc:	003eae06 	br	504dd88 <_gp+0xfffe2960>
 504e2d0:	1007883a 	mov	r3,r2
 504e2d4:	0023883a 	mov	r17,zero
 504e2d8:	880a927a 	slli	r5,r17,9
 504e2dc:	1805883a 	mov	r2,r3
 504e2e0:	8822977a 	slli	r17,r17,29
 504e2e4:	280ad33a 	srli	r5,r5,12
 504e2e8:	003ff406 	br	504e2bc <_gp+0xfffe2e94>
 504e2ec:	10c003cc 	andi	r3,r2,15
 504e2f0:	01000104 	movi	r4,4
 504e2f4:	193ff626 	beq	r3,r4,504e2d0 <_gp+0xfffe2ea8>
 504e2f8:	0023883a 	mov	r17,zero
 504e2fc:	003fd506 	br	504e254 <_gp+0xfffe2e2c>
 504e300:	0005883a 	mov	r2,zero
 504e304:	003fe706 	br	504e2a4 <_gp+0xfffe2e7c>
 504e308:	00800434 	movhi	r2,16
 504e30c:	89400234 	orhi	r5,r17,8
 504e310:	10bfffc4 	addi	r2,r2,-1
 504e314:	b02b883a 	mov	r21,r22
 504e318:	288a703a 	and	r5,r5,r2
 504e31c:	4029883a 	mov	r20,r8
 504e320:	003eff06 	br	504df20 <_gp+0xfffe2af8>

0504e324 <__subdf3>:
 504e324:	02000434 	movhi	r8,16
 504e328:	423fffc4 	addi	r8,r8,-1
 504e32c:	defffb04 	addi	sp,sp,-20
 504e330:	2a14703a 	and	r10,r5,r8
 504e334:	3812d53a 	srli	r9,r7,20
 504e338:	3a10703a 	and	r8,r7,r8
 504e33c:	2006d77a 	srli	r3,r4,29
 504e340:	3004d77a 	srli	r2,r6,29
 504e344:	dc000015 	stw	r16,0(sp)
 504e348:	501490fa 	slli	r10,r10,3
 504e34c:	2820d53a 	srli	r16,r5,20
 504e350:	401090fa 	slli	r8,r8,3
 504e354:	dc800215 	stw	r18,8(sp)
 504e358:	dc400115 	stw	r17,4(sp)
 504e35c:	dfc00415 	stw	ra,16(sp)
 504e360:	202290fa 	slli	r17,r4,3
 504e364:	dcc00315 	stw	r19,12(sp)
 504e368:	4a41ffcc 	andi	r9,r9,2047
 504e36c:	0101ffc4 	movi	r4,2047
 504e370:	2824d7fa 	srli	r18,r5,31
 504e374:	8401ffcc 	andi	r16,r16,2047
 504e378:	50c6b03a 	or	r3,r10,r3
 504e37c:	380ed7fa 	srli	r7,r7,31
 504e380:	408ab03a 	or	r5,r8,r2
 504e384:	300c90fa 	slli	r6,r6,3
 504e388:	49009626 	beq	r9,r4,504e5e4 <__subdf3+0x2c0>
 504e38c:	39c0005c 	xori	r7,r7,1
 504e390:	8245c83a 	sub	r2,r16,r9
 504e394:	3c807426 	beq	r7,r18,504e568 <__subdf3+0x244>
 504e398:	0080af0e 	bge	zero,r2,504e658 <__subdf3+0x334>
 504e39c:	48002a1e 	bne	r9,zero,504e448 <__subdf3+0x124>
 504e3a0:	2988b03a 	or	r4,r5,r6
 504e3a4:	20009a1e 	bne	r4,zero,504e610 <__subdf3+0x2ec>
 504e3a8:	888001cc 	andi	r2,r17,7
 504e3ac:	10000726 	beq	r2,zero,504e3cc <__subdf3+0xa8>
 504e3b0:	888003cc 	andi	r2,r17,15
 504e3b4:	01000104 	movi	r4,4
 504e3b8:	11000426 	beq	r2,r4,504e3cc <__subdf3+0xa8>
 504e3bc:	890b883a 	add	r5,r17,r4
 504e3c0:	2c63803a 	cmpltu	r17,r5,r17
 504e3c4:	1c47883a 	add	r3,r3,r17
 504e3c8:	2823883a 	mov	r17,r5
 504e3cc:	1880202c 	andhi	r2,r3,128
 504e3d0:	10005926 	beq	r2,zero,504e538 <__subdf3+0x214>
 504e3d4:	84000044 	addi	r16,r16,1
 504e3d8:	0081ffc4 	movi	r2,2047
 504e3dc:	8080be26 	beq	r16,r2,504e6d8 <__subdf3+0x3b4>
 504e3e0:	017fe034 	movhi	r5,65408
 504e3e4:	297fffc4 	addi	r5,r5,-1
 504e3e8:	1946703a 	and	r3,r3,r5
 504e3ec:	1804977a 	slli	r2,r3,29
 504e3f0:	1806927a 	slli	r3,r3,9
 504e3f4:	8822d0fa 	srli	r17,r17,3
 504e3f8:	8401ffcc 	andi	r16,r16,2047
 504e3fc:	180ad33a 	srli	r5,r3,12
 504e400:	9100004c 	andi	r4,r18,1
 504e404:	1444b03a 	or	r2,r2,r17
 504e408:	80c1ffcc 	andi	r3,r16,2047
 504e40c:	1820953a 	slli	r16,r3,20
 504e410:	20c03fcc 	andi	r3,r4,255
 504e414:	180897fa 	slli	r4,r3,31
 504e418:	00c00434 	movhi	r3,16
 504e41c:	18ffffc4 	addi	r3,r3,-1
 504e420:	28c6703a 	and	r3,r5,r3
 504e424:	1c06b03a 	or	r3,r3,r16
 504e428:	1906b03a 	or	r3,r3,r4
 504e42c:	dfc00417 	ldw	ra,16(sp)
 504e430:	dcc00317 	ldw	r19,12(sp)
 504e434:	dc800217 	ldw	r18,8(sp)
 504e438:	dc400117 	ldw	r17,4(sp)
 504e43c:	dc000017 	ldw	r16,0(sp)
 504e440:	dec00504 	addi	sp,sp,20
 504e444:	f800283a 	ret
 504e448:	0101ffc4 	movi	r4,2047
 504e44c:	813fd626 	beq	r16,r4,504e3a8 <_gp+0xfffe2f80>
 504e450:	29402034 	orhi	r5,r5,128
 504e454:	01000e04 	movi	r4,56
 504e458:	2080a316 	blt	r4,r2,504e6e8 <__subdf3+0x3c4>
 504e45c:	010007c4 	movi	r4,31
 504e460:	2080c616 	blt	r4,r2,504e77c <__subdf3+0x458>
 504e464:	01000804 	movi	r4,32
 504e468:	2089c83a 	sub	r4,r4,r2
 504e46c:	2910983a 	sll	r8,r5,r4
 504e470:	308ed83a 	srl	r7,r6,r2
 504e474:	3108983a 	sll	r4,r6,r4
 504e478:	2884d83a 	srl	r2,r5,r2
 504e47c:	41ccb03a 	or	r6,r8,r7
 504e480:	2008c03a 	cmpne	r4,r4,zero
 504e484:	310cb03a 	or	r6,r6,r4
 504e488:	898dc83a 	sub	r6,r17,r6
 504e48c:	89a3803a 	cmpltu	r17,r17,r6
 504e490:	1887c83a 	sub	r3,r3,r2
 504e494:	1c47c83a 	sub	r3,r3,r17
 504e498:	3023883a 	mov	r17,r6
 504e49c:	1880202c 	andhi	r2,r3,128
 504e4a0:	10002326 	beq	r2,zero,504e530 <__subdf3+0x20c>
 504e4a4:	04c02034 	movhi	r19,128
 504e4a8:	9cffffc4 	addi	r19,r19,-1
 504e4ac:	1ce6703a 	and	r19,r3,r19
 504e4b0:	98007a26 	beq	r19,zero,504e69c <__subdf3+0x378>
 504e4b4:	9809883a 	mov	r4,r19
 504e4b8:	504f0340 	call	504f034 <__clzsi2>
 504e4bc:	113ffe04 	addi	r4,r2,-8
 504e4c0:	00c007c4 	movi	r3,31
 504e4c4:	19007b16 	blt	r3,r4,504e6b4 <__subdf3+0x390>
 504e4c8:	00800804 	movi	r2,32
 504e4cc:	1105c83a 	sub	r2,r2,r4
 504e4d0:	8884d83a 	srl	r2,r17,r2
 504e4d4:	9906983a 	sll	r3,r19,r4
 504e4d8:	8922983a 	sll	r17,r17,r4
 504e4dc:	10c4b03a 	or	r2,r2,r3
 504e4e0:	24007816 	blt	r4,r16,504e6c4 <__subdf3+0x3a0>
 504e4e4:	2421c83a 	sub	r16,r4,r16
 504e4e8:	80c00044 	addi	r3,r16,1
 504e4ec:	010007c4 	movi	r4,31
 504e4f0:	20c09516 	blt	r4,r3,504e748 <__subdf3+0x424>
 504e4f4:	01400804 	movi	r5,32
 504e4f8:	28cbc83a 	sub	r5,r5,r3
 504e4fc:	88c8d83a 	srl	r4,r17,r3
 504e500:	8962983a 	sll	r17,r17,r5
 504e504:	114a983a 	sll	r5,r2,r5
 504e508:	10c6d83a 	srl	r3,r2,r3
 504e50c:	8804c03a 	cmpne	r2,r17,zero
 504e510:	290ab03a 	or	r5,r5,r4
 504e514:	28a2b03a 	or	r17,r5,r2
 504e518:	0021883a 	mov	r16,zero
 504e51c:	003fa206 	br	504e3a8 <_gp+0xfffe2f80>
 504e520:	2090b03a 	or	r8,r4,r2
 504e524:	40018e26 	beq	r8,zero,504eb60 <__subdf3+0x83c>
 504e528:	1007883a 	mov	r3,r2
 504e52c:	2023883a 	mov	r17,r4
 504e530:	888001cc 	andi	r2,r17,7
 504e534:	103f9e1e 	bne	r2,zero,504e3b0 <_gp+0xfffe2f88>
 504e538:	1804977a 	slli	r2,r3,29
 504e53c:	8822d0fa 	srli	r17,r17,3
 504e540:	1810d0fa 	srli	r8,r3,3
 504e544:	9100004c 	andi	r4,r18,1
 504e548:	1444b03a 	or	r2,r2,r17
 504e54c:	00c1ffc4 	movi	r3,2047
 504e550:	80c02826 	beq	r16,r3,504e5f4 <__subdf3+0x2d0>
 504e554:	01400434 	movhi	r5,16
 504e558:	297fffc4 	addi	r5,r5,-1
 504e55c:	80e0703a 	and	r16,r16,r3
 504e560:	414a703a 	and	r5,r8,r5
 504e564:	003fa806 	br	504e408 <_gp+0xfffe2fe0>
 504e568:	0080630e 	bge	zero,r2,504e6f8 <__subdf3+0x3d4>
 504e56c:	48003026 	beq	r9,zero,504e630 <__subdf3+0x30c>
 504e570:	0101ffc4 	movi	r4,2047
 504e574:	813f8c26 	beq	r16,r4,504e3a8 <_gp+0xfffe2f80>
 504e578:	29402034 	orhi	r5,r5,128
 504e57c:	01000e04 	movi	r4,56
 504e580:	2080a90e 	bge	r4,r2,504e828 <__subdf3+0x504>
 504e584:	298cb03a 	or	r6,r5,r6
 504e588:	3012c03a 	cmpne	r9,r6,zero
 504e58c:	0005883a 	mov	r2,zero
 504e590:	4c53883a 	add	r9,r9,r17
 504e594:	4c63803a 	cmpltu	r17,r9,r17
 504e598:	10c7883a 	add	r3,r2,r3
 504e59c:	88c7883a 	add	r3,r17,r3
 504e5a0:	4823883a 	mov	r17,r9
 504e5a4:	1880202c 	andhi	r2,r3,128
 504e5a8:	1000d026 	beq	r2,zero,504e8ec <__subdf3+0x5c8>
 504e5ac:	84000044 	addi	r16,r16,1
 504e5b0:	0081ffc4 	movi	r2,2047
 504e5b4:	8080fe26 	beq	r16,r2,504e9b0 <__subdf3+0x68c>
 504e5b8:	00bfe034 	movhi	r2,65408
 504e5bc:	10bfffc4 	addi	r2,r2,-1
 504e5c0:	1886703a 	and	r3,r3,r2
 504e5c4:	880ad07a 	srli	r5,r17,1
 504e5c8:	180497fa 	slli	r2,r3,31
 504e5cc:	8900004c 	andi	r4,r17,1
 504e5d0:	2922b03a 	or	r17,r5,r4
 504e5d4:	1806d07a 	srli	r3,r3,1
 504e5d8:	1462b03a 	or	r17,r2,r17
 504e5dc:	3825883a 	mov	r18,r7
 504e5e0:	003f7106 	br	504e3a8 <_gp+0xfffe2f80>
 504e5e4:	2984b03a 	or	r2,r5,r6
 504e5e8:	103f6826 	beq	r2,zero,504e38c <_gp+0xfffe2f64>
 504e5ec:	39c03fcc 	andi	r7,r7,255
 504e5f0:	003f6706 	br	504e390 <_gp+0xfffe2f68>
 504e5f4:	4086b03a 	or	r3,r8,r2
 504e5f8:	18015226 	beq	r3,zero,504eb44 <__subdf3+0x820>
 504e5fc:	00c00434 	movhi	r3,16
 504e600:	41400234 	orhi	r5,r8,8
 504e604:	18ffffc4 	addi	r3,r3,-1
 504e608:	28ca703a 	and	r5,r5,r3
 504e60c:	003f7e06 	br	504e408 <_gp+0xfffe2fe0>
 504e610:	10bfffc4 	addi	r2,r2,-1
 504e614:	1000491e 	bne	r2,zero,504e73c <__subdf3+0x418>
 504e618:	898fc83a 	sub	r7,r17,r6
 504e61c:	89e3803a 	cmpltu	r17,r17,r7
 504e620:	1947c83a 	sub	r3,r3,r5
 504e624:	1c47c83a 	sub	r3,r3,r17
 504e628:	3823883a 	mov	r17,r7
 504e62c:	003f9b06 	br	504e49c <_gp+0xfffe3074>
 504e630:	2988b03a 	or	r4,r5,r6
 504e634:	203f5c26 	beq	r4,zero,504e3a8 <_gp+0xfffe2f80>
 504e638:	10bfffc4 	addi	r2,r2,-1
 504e63c:	1000931e 	bne	r2,zero,504e88c <__subdf3+0x568>
 504e640:	898d883a 	add	r6,r17,r6
 504e644:	3463803a 	cmpltu	r17,r6,r17
 504e648:	1947883a 	add	r3,r3,r5
 504e64c:	88c7883a 	add	r3,r17,r3
 504e650:	3023883a 	mov	r17,r6
 504e654:	003fd306 	br	504e5a4 <_gp+0xfffe317c>
 504e658:	1000541e 	bne	r2,zero,504e7ac <__subdf3+0x488>
 504e65c:	80800044 	addi	r2,r16,1
 504e660:	1081ffcc 	andi	r2,r2,2047
 504e664:	01000044 	movi	r4,1
 504e668:	2080a20e 	bge	r4,r2,504e8f4 <__subdf3+0x5d0>
 504e66c:	8989c83a 	sub	r4,r17,r6
 504e670:	8905803a 	cmpltu	r2,r17,r4
 504e674:	1967c83a 	sub	r19,r3,r5
 504e678:	98a7c83a 	sub	r19,r19,r2
 504e67c:	9880202c 	andhi	r2,r19,128
 504e680:	10006326 	beq	r2,zero,504e810 <__subdf3+0x4ec>
 504e684:	3463c83a 	sub	r17,r6,r17
 504e688:	28c7c83a 	sub	r3,r5,r3
 504e68c:	344d803a 	cmpltu	r6,r6,r17
 504e690:	19a7c83a 	sub	r19,r3,r6
 504e694:	3825883a 	mov	r18,r7
 504e698:	983f861e 	bne	r19,zero,504e4b4 <_gp+0xfffe308c>
 504e69c:	8809883a 	mov	r4,r17
 504e6a0:	504f0340 	call	504f034 <__clzsi2>
 504e6a4:	10800804 	addi	r2,r2,32
 504e6a8:	113ffe04 	addi	r4,r2,-8
 504e6ac:	00c007c4 	movi	r3,31
 504e6b0:	193f850e 	bge	r3,r4,504e4c8 <_gp+0xfffe30a0>
 504e6b4:	10bff604 	addi	r2,r2,-40
 504e6b8:	8884983a 	sll	r2,r17,r2
 504e6bc:	0023883a 	mov	r17,zero
 504e6c0:	243f880e 	bge	r4,r16,504e4e4 <_gp+0xfffe30bc>
 504e6c4:	00ffe034 	movhi	r3,65408
 504e6c8:	18ffffc4 	addi	r3,r3,-1
 504e6cc:	8121c83a 	sub	r16,r16,r4
 504e6d0:	10c6703a 	and	r3,r2,r3
 504e6d4:	003f3406 	br	504e3a8 <_gp+0xfffe2f80>
 504e6d8:	9100004c 	andi	r4,r18,1
 504e6dc:	000b883a 	mov	r5,zero
 504e6e0:	0005883a 	mov	r2,zero
 504e6e4:	003f4806 	br	504e408 <_gp+0xfffe2fe0>
 504e6e8:	298cb03a 	or	r6,r5,r6
 504e6ec:	300cc03a 	cmpne	r6,r6,zero
 504e6f0:	0005883a 	mov	r2,zero
 504e6f4:	003f6406 	br	504e488 <_gp+0xfffe3060>
 504e6f8:	10009a1e 	bne	r2,zero,504e964 <__subdf3+0x640>
 504e6fc:	82400044 	addi	r9,r16,1
 504e700:	4881ffcc 	andi	r2,r9,2047
 504e704:	02800044 	movi	r10,1
 504e708:	5080670e 	bge	r10,r2,504e8a8 <__subdf3+0x584>
 504e70c:	0081ffc4 	movi	r2,2047
 504e710:	4880af26 	beq	r9,r2,504e9d0 <__subdf3+0x6ac>
 504e714:	898d883a 	add	r6,r17,r6
 504e718:	1945883a 	add	r2,r3,r5
 504e71c:	3447803a 	cmpltu	r3,r6,r17
 504e720:	1887883a 	add	r3,r3,r2
 504e724:	182297fa 	slli	r17,r3,31
 504e728:	300cd07a 	srli	r6,r6,1
 504e72c:	1806d07a 	srli	r3,r3,1
 504e730:	4821883a 	mov	r16,r9
 504e734:	89a2b03a 	or	r17,r17,r6
 504e738:	003f1b06 	br	504e3a8 <_gp+0xfffe2f80>
 504e73c:	0101ffc4 	movi	r4,2047
 504e740:	813f441e 	bne	r16,r4,504e454 <_gp+0xfffe302c>
 504e744:	003f1806 	br	504e3a8 <_gp+0xfffe2f80>
 504e748:	843ff844 	addi	r16,r16,-31
 504e74c:	01400804 	movi	r5,32
 504e750:	1408d83a 	srl	r4,r2,r16
 504e754:	19405026 	beq	r3,r5,504e898 <__subdf3+0x574>
 504e758:	01401004 	movi	r5,64
 504e75c:	28c7c83a 	sub	r3,r5,r3
 504e760:	10c4983a 	sll	r2,r2,r3
 504e764:	88a2b03a 	or	r17,r17,r2
 504e768:	8822c03a 	cmpne	r17,r17,zero
 504e76c:	2462b03a 	or	r17,r4,r17
 504e770:	0007883a 	mov	r3,zero
 504e774:	0021883a 	mov	r16,zero
 504e778:	003f6d06 	br	504e530 <_gp+0xfffe3108>
 504e77c:	11fff804 	addi	r7,r2,-32
 504e780:	01000804 	movi	r4,32
 504e784:	29ced83a 	srl	r7,r5,r7
 504e788:	11004526 	beq	r2,r4,504e8a0 <__subdf3+0x57c>
 504e78c:	01001004 	movi	r4,64
 504e790:	2089c83a 	sub	r4,r4,r2
 504e794:	2904983a 	sll	r2,r5,r4
 504e798:	118cb03a 	or	r6,r2,r6
 504e79c:	300cc03a 	cmpne	r6,r6,zero
 504e7a0:	398cb03a 	or	r6,r7,r6
 504e7a4:	0005883a 	mov	r2,zero
 504e7a8:	003f3706 	br	504e488 <_gp+0xfffe3060>
 504e7ac:	80002a26 	beq	r16,zero,504e858 <__subdf3+0x534>
 504e7b0:	0101ffc4 	movi	r4,2047
 504e7b4:	49006626 	beq	r9,r4,504e950 <__subdf3+0x62c>
 504e7b8:	0085c83a 	sub	r2,zero,r2
 504e7bc:	18c02034 	orhi	r3,r3,128
 504e7c0:	01000e04 	movi	r4,56
 504e7c4:	20807e16 	blt	r4,r2,504e9c0 <__subdf3+0x69c>
 504e7c8:	010007c4 	movi	r4,31
 504e7cc:	2080e716 	blt	r4,r2,504eb6c <__subdf3+0x848>
 504e7d0:	01000804 	movi	r4,32
 504e7d4:	2089c83a 	sub	r4,r4,r2
 504e7d8:	1914983a 	sll	r10,r3,r4
 504e7dc:	8890d83a 	srl	r8,r17,r2
 504e7e0:	8908983a 	sll	r4,r17,r4
 504e7e4:	1884d83a 	srl	r2,r3,r2
 504e7e8:	5222b03a 	or	r17,r10,r8
 504e7ec:	2006c03a 	cmpne	r3,r4,zero
 504e7f0:	88e2b03a 	or	r17,r17,r3
 504e7f4:	3463c83a 	sub	r17,r6,r17
 504e7f8:	2885c83a 	sub	r2,r5,r2
 504e7fc:	344d803a 	cmpltu	r6,r6,r17
 504e800:	1187c83a 	sub	r3,r2,r6
 504e804:	4821883a 	mov	r16,r9
 504e808:	3825883a 	mov	r18,r7
 504e80c:	003f2306 	br	504e49c <_gp+0xfffe3074>
 504e810:	24d0b03a 	or	r8,r4,r19
 504e814:	40001b1e 	bne	r8,zero,504e884 <__subdf3+0x560>
 504e818:	0005883a 	mov	r2,zero
 504e81c:	0009883a 	mov	r4,zero
 504e820:	0021883a 	mov	r16,zero
 504e824:	003f4906 	br	504e54c <_gp+0xfffe3124>
 504e828:	010007c4 	movi	r4,31
 504e82c:	20803a16 	blt	r4,r2,504e918 <__subdf3+0x5f4>
 504e830:	01000804 	movi	r4,32
 504e834:	2089c83a 	sub	r4,r4,r2
 504e838:	2912983a 	sll	r9,r5,r4
 504e83c:	3090d83a 	srl	r8,r6,r2
 504e840:	3108983a 	sll	r4,r6,r4
 504e844:	2884d83a 	srl	r2,r5,r2
 504e848:	4a12b03a 	or	r9,r9,r8
 504e84c:	2008c03a 	cmpne	r4,r4,zero
 504e850:	4912b03a 	or	r9,r9,r4
 504e854:	003f4e06 	br	504e590 <_gp+0xfffe3168>
 504e858:	1c48b03a 	or	r4,r3,r17
 504e85c:	20003c26 	beq	r4,zero,504e950 <__subdf3+0x62c>
 504e860:	0084303a 	nor	r2,zero,r2
 504e864:	1000381e 	bne	r2,zero,504e948 <__subdf3+0x624>
 504e868:	3463c83a 	sub	r17,r6,r17
 504e86c:	28c5c83a 	sub	r2,r5,r3
 504e870:	344d803a 	cmpltu	r6,r6,r17
 504e874:	1187c83a 	sub	r3,r2,r6
 504e878:	4821883a 	mov	r16,r9
 504e87c:	3825883a 	mov	r18,r7
 504e880:	003f0606 	br	504e49c <_gp+0xfffe3074>
 504e884:	2023883a 	mov	r17,r4
 504e888:	003f0906 	br	504e4b0 <_gp+0xfffe3088>
 504e88c:	0101ffc4 	movi	r4,2047
 504e890:	813f3a1e 	bne	r16,r4,504e57c <_gp+0xfffe3154>
 504e894:	003ec406 	br	504e3a8 <_gp+0xfffe2f80>
 504e898:	0005883a 	mov	r2,zero
 504e89c:	003fb106 	br	504e764 <_gp+0xfffe333c>
 504e8a0:	0005883a 	mov	r2,zero
 504e8a4:	003fbc06 	br	504e798 <_gp+0xfffe3370>
 504e8a8:	1c44b03a 	or	r2,r3,r17
 504e8ac:	80008e1e 	bne	r16,zero,504eae8 <__subdf3+0x7c4>
 504e8b0:	1000c826 	beq	r2,zero,504ebd4 <__subdf3+0x8b0>
 504e8b4:	2984b03a 	or	r2,r5,r6
 504e8b8:	103ebb26 	beq	r2,zero,504e3a8 <_gp+0xfffe2f80>
 504e8bc:	8989883a 	add	r4,r17,r6
 504e8c0:	1945883a 	add	r2,r3,r5
 504e8c4:	2447803a 	cmpltu	r3,r4,r17
 504e8c8:	1887883a 	add	r3,r3,r2
 504e8cc:	1880202c 	andhi	r2,r3,128
 504e8d0:	2023883a 	mov	r17,r4
 504e8d4:	103f1626 	beq	r2,zero,504e530 <_gp+0xfffe3108>
 504e8d8:	00bfe034 	movhi	r2,65408
 504e8dc:	10bfffc4 	addi	r2,r2,-1
 504e8e0:	5021883a 	mov	r16,r10
 504e8e4:	1886703a 	and	r3,r3,r2
 504e8e8:	003eaf06 	br	504e3a8 <_gp+0xfffe2f80>
 504e8ec:	3825883a 	mov	r18,r7
 504e8f0:	003f0f06 	br	504e530 <_gp+0xfffe3108>
 504e8f4:	1c44b03a 	or	r2,r3,r17
 504e8f8:	8000251e 	bne	r16,zero,504e990 <__subdf3+0x66c>
 504e8fc:	1000661e 	bne	r2,zero,504ea98 <__subdf3+0x774>
 504e900:	2990b03a 	or	r8,r5,r6
 504e904:	40009626 	beq	r8,zero,504eb60 <__subdf3+0x83c>
 504e908:	2807883a 	mov	r3,r5
 504e90c:	3023883a 	mov	r17,r6
 504e910:	3825883a 	mov	r18,r7
 504e914:	003ea406 	br	504e3a8 <_gp+0xfffe2f80>
 504e918:	127ff804 	addi	r9,r2,-32
 504e91c:	01000804 	movi	r4,32
 504e920:	2a52d83a 	srl	r9,r5,r9
 504e924:	11008c26 	beq	r2,r4,504eb58 <__subdf3+0x834>
 504e928:	01001004 	movi	r4,64
 504e92c:	2085c83a 	sub	r2,r4,r2
 504e930:	2884983a 	sll	r2,r5,r2
 504e934:	118cb03a 	or	r6,r2,r6
 504e938:	300cc03a 	cmpne	r6,r6,zero
 504e93c:	4992b03a 	or	r9,r9,r6
 504e940:	0005883a 	mov	r2,zero
 504e944:	003f1206 	br	504e590 <_gp+0xfffe3168>
 504e948:	0101ffc4 	movi	r4,2047
 504e94c:	493f9c1e 	bne	r9,r4,504e7c0 <_gp+0xfffe3398>
 504e950:	2807883a 	mov	r3,r5
 504e954:	3023883a 	mov	r17,r6
 504e958:	4821883a 	mov	r16,r9
 504e95c:	3825883a 	mov	r18,r7
 504e960:	003e9106 	br	504e3a8 <_gp+0xfffe2f80>
 504e964:	80001f1e 	bne	r16,zero,504e9e4 <__subdf3+0x6c0>
 504e968:	1c48b03a 	or	r4,r3,r17
 504e96c:	20005a26 	beq	r4,zero,504ead8 <__subdf3+0x7b4>
 504e970:	0084303a 	nor	r2,zero,r2
 504e974:	1000561e 	bne	r2,zero,504ead0 <__subdf3+0x7ac>
 504e978:	89a3883a 	add	r17,r17,r6
 504e97c:	1945883a 	add	r2,r3,r5
 504e980:	898d803a 	cmpltu	r6,r17,r6
 504e984:	3087883a 	add	r3,r6,r2
 504e988:	4821883a 	mov	r16,r9
 504e98c:	003f0506 	br	504e5a4 <_gp+0xfffe317c>
 504e990:	10002b1e 	bne	r2,zero,504ea40 <__subdf3+0x71c>
 504e994:	2984b03a 	or	r2,r5,r6
 504e998:	10008026 	beq	r2,zero,504eb9c <__subdf3+0x878>
 504e99c:	2807883a 	mov	r3,r5
 504e9a0:	3023883a 	mov	r17,r6
 504e9a4:	3825883a 	mov	r18,r7
 504e9a8:	0401ffc4 	movi	r16,2047
 504e9ac:	003e7e06 	br	504e3a8 <_gp+0xfffe2f80>
 504e9b0:	3809883a 	mov	r4,r7
 504e9b4:	0011883a 	mov	r8,zero
 504e9b8:	0005883a 	mov	r2,zero
 504e9bc:	003ee306 	br	504e54c <_gp+0xfffe3124>
 504e9c0:	1c62b03a 	or	r17,r3,r17
 504e9c4:	8822c03a 	cmpne	r17,r17,zero
 504e9c8:	0005883a 	mov	r2,zero
 504e9cc:	003f8906 	br	504e7f4 <_gp+0xfffe33cc>
 504e9d0:	3809883a 	mov	r4,r7
 504e9d4:	4821883a 	mov	r16,r9
 504e9d8:	0011883a 	mov	r8,zero
 504e9dc:	0005883a 	mov	r2,zero
 504e9e0:	003eda06 	br	504e54c <_gp+0xfffe3124>
 504e9e4:	0101ffc4 	movi	r4,2047
 504e9e8:	49003b26 	beq	r9,r4,504ead8 <__subdf3+0x7b4>
 504e9ec:	0085c83a 	sub	r2,zero,r2
 504e9f0:	18c02034 	orhi	r3,r3,128
 504e9f4:	01000e04 	movi	r4,56
 504e9f8:	20806e16 	blt	r4,r2,504ebb4 <__subdf3+0x890>
 504e9fc:	010007c4 	movi	r4,31
 504ea00:	20807716 	blt	r4,r2,504ebe0 <__subdf3+0x8bc>
 504ea04:	01000804 	movi	r4,32
 504ea08:	2089c83a 	sub	r4,r4,r2
 504ea0c:	1914983a 	sll	r10,r3,r4
 504ea10:	8890d83a 	srl	r8,r17,r2
 504ea14:	8908983a 	sll	r4,r17,r4
 504ea18:	1884d83a 	srl	r2,r3,r2
 504ea1c:	5222b03a 	or	r17,r10,r8
 504ea20:	2006c03a 	cmpne	r3,r4,zero
 504ea24:	88e2b03a 	or	r17,r17,r3
 504ea28:	89a3883a 	add	r17,r17,r6
 504ea2c:	1145883a 	add	r2,r2,r5
 504ea30:	898d803a 	cmpltu	r6,r17,r6
 504ea34:	3087883a 	add	r3,r6,r2
 504ea38:	4821883a 	mov	r16,r9
 504ea3c:	003ed906 	br	504e5a4 <_gp+0xfffe317c>
 504ea40:	2984b03a 	or	r2,r5,r6
 504ea44:	10004226 	beq	r2,zero,504eb50 <__subdf3+0x82c>
 504ea48:	1808d0fa 	srli	r4,r3,3
 504ea4c:	8822d0fa 	srli	r17,r17,3
 504ea50:	1806977a 	slli	r3,r3,29
 504ea54:	2080022c 	andhi	r2,r4,8
 504ea58:	1c62b03a 	or	r17,r3,r17
 504ea5c:	10000826 	beq	r2,zero,504ea80 <__subdf3+0x75c>
 504ea60:	2812d0fa 	srli	r9,r5,3
 504ea64:	4880022c 	andhi	r2,r9,8
 504ea68:	1000051e 	bne	r2,zero,504ea80 <__subdf3+0x75c>
 504ea6c:	300cd0fa 	srli	r6,r6,3
 504ea70:	2804977a 	slli	r2,r5,29
 504ea74:	4809883a 	mov	r4,r9
 504ea78:	3825883a 	mov	r18,r7
 504ea7c:	11a2b03a 	or	r17,r2,r6
 504ea80:	8806d77a 	srli	r3,r17,29
 504ea84:	200890fa 	slli	r4,r4,3
 504ea88:	882290fa 	slli	r17,r17,3
 504ea8c:	0401ffc4 	movi	r16,2047
 504ea90:	1906b03a 	or	r3,r3,r4
 504ea94:	003e4406 	br	504e3a8 <_gp+0xfffe2f80>
 504ea98:	2984b03a 	or	r2,r5,r6
 504ea9c:	103e4226 	beq	r2,zero,504e3a8 <_gp+0xfffe2f80>
 504eaa0:	8989c83a 	sub	r4,r17,r6
 504eaa4:	8911803a 	cmpltu	r8,r17,r4
 504eaa8:	1945c83a 	sub	r2,r3,r5
 504eaac:	1205c83a 	sub	r2,r2,r8
 504eab0:	1200202c 	andhi	r8,r2,128
 504eab4:	403e9a26 	beq	r8,zero,504e520 <_gp+0xfffe30f8>
 504eab8:	3463c83a 	sub	r17,r6,r17
 504eabc:	28c5c83a 	sub	r2,r5,r3
 504eac0:	344d803a 	cmpltu	r6,r6,r17
 504eac4:	1187c83a 	sub	r3,r2,r6
 504eac8:	3825883a 	mov	r18,r7
 504eacc:	003e3606 	br	504e3a8 <_gp+0xfffe2f80>
 504ead0:	0101ffc4 	movi	r4,2047
 504ead4:	493fc71e 	bne	r9,r4,504e9f4 <_gp+0xfffe35cc>
 504ead8:	2807883a 	mov	r3,r5
 504eadc:	3023883a 	mov	r17,r6
 504eae0:	4821883a 	mov	r16,r9
 504eae4:	003e3006 	br	504e3a8 <_gp+0xfffe2f80>
 504eae8:	10003626 	beq	r2,zero,504ebc4 <__subdf3+0x8a0>
 504eaec:	2984b03a 	or	r2,r5,r6
 504eaf0:	10001726 	beq	r2,zero,504eb50 <__subdf3+0x82c>
 504eaf4:	1808d0fa 	srli	r4,r3,3
 504eaf8:	8822d0fa 	srli	r17,r17,3
 504eafc:	1806977a 	slli	r3,r3,29
 504eb00:	2080022c 	andhi	r2,r4,8
 504eb04:	1c62b03a 	or	r17,r3,r17
 504eb08:	10000726 	beq	r2,zero,504eb28 <__subdf3+0x804>
 504eb0c:	2812d0fa 	srli	r9,r5,3
 504eb10:	4880022c 	andhi	r2,r9,8
 504eb14:	1000041e 	bne	r2,zero,504eb28 <__subdf3+0x804>
 504eb18:	300cd0fa 	srli	r6,r6,3
 504eb1c:	2804977a 	slli	r2,r5,29
 504eb20:	4809883a 	mov	r4,r9
 504eb24:	11a2b03a 	or	r17,r2,r6
 504eb28:	8806d77a 	srli	r3,r17,29
 504eb2c:	200890fa 	slli	r4,r4,3
 504eb30:	882290fa 	slli	r17,r17,3
 504eb34:	3825883a 	mov	r18,r7
 504eb38:	1906b03a 	or	r3,r3,r4
 504eb3c:	0401ffc4 	movi	r16,2047
 504eb40:	003e1906 	br	504e3a8 <_gp+0xfffe2f80>
 504eb44:	000b883a 	mov	r5,zero
 504eb48:	0005883a 	mov	r2,zero
 504eb4c:	003e2e06 	br	504e408 <_gp+0xfffe2fe0>
 504eb50:	0401ffc4 	movi	r16,2047
 504eb54:	003e1406 	br	504e3a8 <_gp+0xfffe2f80>
 504eb58:	0005883a 	mov	r2,zero
 504eb5c:	003f7506 	br	504e934 <_gp+0xfffe350c>
 504eb60:	0005883a 	mov	r2,zero
 504eb64:	0009883a 	mov	r4,zero
 504eb68:	003e7806 	br	504e54c <_gp+0xfffe3124>
 504eb6c:	123ff804 	addi	r8,r2,-32
 504eb70:	01000804 	movi	r4,32
 504eb74:	1a10d83a 	srl	r8,r3,r8
 504eb78:	11002526 	beq	r2,r4,504ec10 <__subdf3+0x8ec>
 504eb7c:	01001004 	movi	r4,64
 504eb80:	2085c83a 	sub	r2,r4,r2
 504eb84:	1884983a 	sll	r2,r3,r2
 504eb88:	1444b03a 	or	r2,r2,r17
 504eb8c:	1004c03a 	cmpne	r2,r2,zero
 504eb90:	40a2b03a 	or	r17,r8,r2
 504eb94:	0005883a 	mov	r2,zero
 504eb98:	003f1606 	br	504e7f4 <_gp+0xfffe33cc>
 504eb9c:	02000434 	movhi	r8,16
 504eba0:	0009883a 	mov	r4,zero
 504eba4:	423fffc4 	addi	r8,r8,-1
 504eba8:	00bfffc4 	movi	r2,-1
 504ebac:	0401ffc4 	movi	r16,2047
 504ebb0:	003e6606 	br	504e54c <_gp+0xfffe3124>
 504ebb4:	1c62b03a 	or	r17,r3,r17
 504ebb8:	8822c03a 	cmpne	r17,r17,zero
 504ebbc:	0005883a 	mov	r2,zero
 504ebc0:	003f9906 	br	504ea28 <_gp+0xfffe3600>
 504ebc4:	2807883a 	mov	r3,r5
 504ebc8:	3023883a 	mov	r17,r6
 504ebcc:	0401ffc4 	movi	r16,2047
 504ebd0:	003df506 	br	504e3a8 <_gp+0xfffe2f80>
 504ebd4:	2807883a 	mov	r3,r5
 504ebd8:	3023883a 	mov	r17,r6
 504ebdc:	003df206 	br	504e3a8 <_gp+0xfffe2f80>
 504ebe0:	123ff804 	addi	r8,r2,-32
 504ebe4:	01000804 	movi	r4,32
 504ebe8:	1a10d83a 	srl	r8,r3,r8
 504ebec:	11000a26 	beq	r2,r4,504ec18 <__subdf3+0x8f4>
 504ebf0:	01001004 	movi	r4,64
 504ebf4:	2085c83a 	sub	r2,r4,r2
 504ebf8:	1884983a 	sll	r2,r3,r2
 504ebfc:	1444b03a 	or	r2,r2,r17
 504ec00:	1004c03a 	cmpne	r2,r2,zero
 504ec04:	40a2b03a 	or	r17,r8,r2
 504ec08:	0005883a 	mov	r2,zero
 504ec0c:	003f8606 	br	504ea28 <_gp+0xfffe3600>
 504ec10:	0005883a 	mov	r2,zero
 504ec14:	003fdc06 	br	504eb88 <_gp+0xfffe3760>
 504ec18:	0005883a 	mov	r2,zero
 504ec1c:	003ff706 	br	504ebfc <_gp+0xfffe37d4>

0504ec20 <__fixdfsi>:
 504ec20:	280cd53a 	srli	r6,r5,20
 504ec24:	00c00434 	movhi	r3,16
 504ec28:	18ffffc4 	addi	r3,r3,-1
 504ec2c:	3181ffcc 	andi	r6,r6,2047
 504ec30:	01c0ff84 	movi	r7,1022
 504ec34:	28c6703a 	and	r3,r5,r3
 504ec38:	280ad7fa 	srli	r5,r5,31
 504ec3c:	3980120e 	bge	r7,r6,504ec88 <__fixdfsi+0x68>
 504ec40:	00810744 	movi	r2,1053
 504ec44:	11800c16 	blt	r2,r6,504ec78 <__fixdfsi+0x58>
 504ec48:	00810cc4 	movi	r2,1075
 504ec4c:	1185c83a 	sub	r2,r2,r6
 504ec50:	01c007c4 	movi	r7,31
 504ec54:	18c00434 	orhi	r3,r3,16
 504ec58:	38800d16 	blt	r7,r2,504ec90 <__fixdfsi+0x70>
 504ec5c:	31befb44 	addi	r6,r6,-1043
 504ec60:	2084d83a 	srl	r2,r4,r2
 504ec64:	1986983a 	sll	r3,r3,r6
 504ec68:	1884b03a 	or	r2,r3,r2
 504ec6c:	28000726 	beq	r5,zero,504ec8c <__fixdfsi+0x6c>
 504ec70:	0085c83a 	sub	r2,zero,r2
 504ec74:	f800283a 	ret
 504ec78:	00a00034 	movhi	r2,32768
 504ec7c:	10bfffc4 	addi	r2,r2,-1
 504ec80:	2885883a 	add	r2,r5,r2
 504ec84:	f800283a 	ret
 504ec88:	0005883a 	mov	r2,zero
 504ec8c:	f800283a 	ret
 504ec90:	008104c4 	movi	r2,1043
 504ec94:	1185c83a 	sub	r2,r2,r6
 504ec98:	1884d83a 	srl	r2,r3,r2
 504ec9c:	003ff306 	br	504ec6c <_gp+0xfffe3844>

0504eca0 <__floatsidf>:
 504eca0:	defffd04 	addi	sp,sp,-12
 504eca4:	dfc00215 	stw	ra,8(sp)
 504eca8:	dc400115 	stw	r17,4(sp)
 504ecac:	dc000015 	stw	r16,0(sp)
 504ecb0:	20002b26 	beq	r4,zero,504ed60 <__floatsidf+0xc0>
 504ecb4:	2023883a 	mov	r17,r4
 504ecb8:	2020d7fa 	srli	r16,r4,31
 504ecbc:	20002d16 	blt	r4,zero,504ed74 <__floatsidf+0xd4>
 504ecc0:	8809883a 	mov	r4,r17
 504ecc4:	504f0340 	call	504f034 <__clzsi2>
 504ecc8:	01410784 	movi	r5,1054
 504eccc:	288bc83a 	sub	r5,r5,r2
 504ecd0:	01010cc4 	movi	r4,1075
 504ecd4:	2149c83a 	sub	r4,r4,r5
 504ecd8:	00c007c4 	movi	r3,31
 504ecdc:	1900160e 	bge	r3,r4,504ed38 <__floatsidf+0x98>
 504ece0:	00c104c4 	movi	r3,1043
 504ece4:	1947c83a 	sub	r3,r3,r5
 504ece8:	88c6983a 	sll	r3,r17,r3
 504ecec:	00800434 	movhi	r2,16
 504ecf0:	10bfffc4 	addi	r2,r2,-1
 504ecf4:	1886703a 	and	r3,r3,r2
 504ecf8:	2941ffcc 	andi	r5,r5,2047
 504ecfc:	800d883a 	mov	r6,r16
 504ed00:	0005883a 	mov	r2,zero
 504ed04:	280a953a 	slli	r5,r5,20
 504ed08:	31803fcc 	andi	r6,r6,255
 504ed0c:	01000434 	movhi	r4,16
 504ed10:	300c97fa 	slli	r6,r6,31
 504ed14:	213fffc4 	addi	r4,r4,-1
 504ed18:	1906703a 	and	r3,r3,r4
 504ed1c:	1946b03a 	or	r3,r3,r5
 504ed20:	1986b03a 	or	r3,r3,r6
 504ed24:	dfc00217 	ldw	ra,8(sp)
 504ed28:	dc400117 	ldw	r17,4(sp)
 504ed2c:	dc000017 	ldw	r16,0(sp)
 504ed30:	dec00304 	addi	sp,sp,12
 504ed34:	f800283a 	ret
 504ed38:	00c002c4 	movi	r3,11
 504ed3c:	1887c83a 	sub	r3,r3,r2
 504ed40:	88c6d83a 	srl	r3,r17,r3
 504ed44:	8904983a 	sll	r2,r17,r4
 504ed48:	01000434 	movhi	r4,16
 504ed4c:	213fffc4 	addi	r4,r4,-1
 504ed50:	2941ffcc 	andi	r5,r5,2047
 504ed54:	1906703a 	and	r3,r3,r4
 504ed58:	800d883a 	mov	r6,r16
 504ed5c:	003fe906 	br	504ed04 <_gp+0xfffe38dc>
 504ed60:	000d883a 	mov	r6,zero
 504ed64:	000b883a 	mov	r5,zero
 504ed68:	0007883a 	mov	r3,zero
 504ed6c:	0005883a 	mov	r2,zero
 504ed70:	003fe406 	br	504ed04 <_gp+0xfffe38dc>
 504ed74:	0123c83a 	sub	r17,zero,r4
 504ed78:	003fd106 	br	504ecc0 <_gp+0xfffe3898>

0504ed7c <__extendsfdf2>:
 504ed7c:	200ad5fa 	srli	r5,r4,23
 504ed80:	defffd04 	addi	sp,sp,-12
 504ed84:	dc400115 	stw	r17,4(sp)
 504ed88:	29403fcc 	andi	r5,r5,255
 504ed8c:	29800044 	addi	r6,r5,1
 504ed90:	04402034 	movhi	r17,128
 504ed94:	dc000015 	stw	r16,0(sp)
 504ed98:	8c7fffc4 	addi	r17,r17,-1
 504ed9c:	dfc00215 	stw	ra,8(sp)
 504eda0:	31803fcc 	andi	r6,r6,255
 504eda4:	00800044 	movi	r2,1
 504eda8:	8922703a 	and	r17,r17,r4
 504edac:	2020d7fa 	srli	r16,r4,31
 504edb0:	1180110e 	bge	r2,r6,504edf8 <__extendsfdf2+0x7c>
 504edb4:	880cd0fa 	srli	r6,r17,3
 504edb8:	8822977a 	slli	r17,r17,29
 504edbc:	2940e004 	addi	r5,r5,896
 504edc0:	2941ffcc 	andi	r5,r5,2047
 504edc4:	2804953a 	slli	r2,r5,20
 504edc8:	01400434 	movhi	r5,16
 504edcc:	800697fa 	slli	r3,r16,31
 504edd0:	297fffc4 	addi	r5,r5,-1
 504edd4:	314a703a 	and	r5,r6,r5
 504edd8:	288ab03a 	or	r5,r5,r2
 504eddc:	28c6b03a 	or	r3,r5,r3
 504ede0:	8805883a 	mov	r2,r17
 504ede4:	dfc00217 	ldw	ra,8(sp)
 504ede8:	dc400117 	ldw	r17,4(sp)
 504edec:	dc000017 	ldw	r16,0(sp)
 504edf0:	dec00304 	addi	sp,sp,12
 504edf4:	f800283a 	ret
 504edf8:	2800111e 	bne	r5,zero,504ee40 <__extendsfdf2+0xc4>
 504edfc:	88001c26 	beq	r17,zero,504ee70 <__extendsfdf2+0xf4>
 504ee00:	8809883a 	mov	r4,r17
 504ee04:	504f0340 	call	504f034 <__clzsi2>
 504ee08:	00c00284 	movi	r3,10
 504ee0c:	18801b16 	blt	r3,r2,504ee7c <__extendsfdf2+0x100>
 504ee10:	018002c4 	movi	r6,11
 504ee14:	308dc83a 	sub	r6,r6,r2
 504ee18:	11000544 	addi	r4,r2,21
 504ee1c:	8986d83a 	srl	r3,r17,r6
 504ee20:	8922983a 	sll	r17,r17,r4
 504ee24:	0180e244 	movi	r6,905
 504ee28:	01400434 	movhi	r5,16
 504ee2c:	3085c83a 	sub	r2,r6,r2
 504ee30:	297fffc4 	addi	r5,r5,-1
 504ee34:	194c703a 	and	r6,r3,r5
 504ee38:	1141ffcc 	andi	r5,r2,2047
 504ee3c:	003fe006 	br	504edc0 <_gp+0xfffe3998>
 504ee40:	88000826 	beq	r17,zero,504ee64 <__extendsfdf2+0xe8>
 504ee44:	880cd0fa 	srli	r6,r17,3
 504ee48:	00800434 	movhi	r2,16
 504ee4c:	10bfffc4 	addi	r2,r2,-1
 504ee50:	31800234 	orhi	r6,r6,8
 504ee54:	8822977a 	slli	r17,r17,29
 504ee58:	308c703a 	and	r6,r6,r2
 504ee5c:	0141ffc4 	movi	r5,2047
 504ee60:	003fd706 	br	504edc0 <_gp+0xfffe3998>
 504ee64:	0141ffc4 	movi	r5,2047
 504ee68:	000d883a 	mov	r6,zero
 504ee6c:	003fd406 	br	504edc0 <_gp+0xfffe3998>
 504ee70:	000b883a 	mov	r5,zero
 504ee74:	000d883a 	mov	r6,zero
 504ee78:	003fd106 	br	504edc0 <_gp+0xfffe3998>
 504ee7c:	11bffd44 	addi	r6,r2,-11
 504ee80:	8986983a 	sll	r3,r17,r6
 504ee84:	0023883a 	mov	r17,zero
 504ee88:	003fe606 	br	504ee24 <_gp+0xfffe39fc>

0504ee8c <__truncdfsf2>:
 504ee8c:	2810d53a 	srli	r8,r5,20
 504ee90:	01c00434 	movhi	r7,16
 504ee94:	39ffffc4 	addi	r7,r7,-1
 504ee98:	29ce703a 	and	r7,r5,r7
 504ee9c:	4201ffcc 	andi	r8,r8,2047
 504eea0:	380e90fa 	slli	r7,r7,3
 504eea4:	200cd77a 	srli	r6,r4,29
 504eea8:	42400044 	addi	r9,r8,1
 504eeac:	4a41ffcc 	andi	r9,r9,2047
 504eeb0:	00c00044 	movi	r3,1
 504eeb4:	280ad7fa 	srli	r5,r5,31
 504eeb8:	31ceb03a 	or	r7,r6,r7
 504eebc:	200490fa 	slli	r2,r4,3
 504eec0:	1a40230e 	bge	r3,r9,504ef50 <__truncdfsf2+0xc4>
 504eec4:	40ff2004 	addi	r3,r8,-896
 504eec8:	01803f84 	movi	r6,254
 504eecc:	30c01516 	blt	r6,r3,504ef24 <__truncdfsf2+0x98>
 504eed0:	00c0380e 	bge	zero,r3,504efb4 <__truncdfsf2+0x128>
 504eed4:	200c91ba 	slli	r6,r4,6
 504eed8:	380e90fa 	slli	r7,r7,3
 504eedc:	1004d77a 	srli	r2,r2,29
 504eee0:	300cc03a 	cmpne	r6,r6,zero
 504eee4:	31ccb03a 	or	r6,r6,r7
 504eee8:	308cb03a 	or	r6,r6,r2
 504eeec:	308001cc 	andi	r2,r6,7
 504eef0:	10000426 	beq	r2,zero,504ef04 <__truncdfsf2+0x78>
 504eef4:	308003cc 	andi	r2,r6,15
 504eef8:	01000104 	movi	r4,4
 504eefc:	11000126 	beq	r2,r4,504ef04 <__truncdfsf2+0x78>
 504ef00:	31800104 	addi	r6,r6,4
 504ef04:	3081002c 	andhi	r2,r6,1024
 504ef08:	10001626 	beq	r2,zero,504ef64 <__truncdfsf2+0xd8>
 504ef0c:	18c00044 	addi	r3,r3,1
 504ef10:	00803fc4 	movi	r2,255
 504ef14:	18800326 	beq	r3,r2,504ef24 <__truncdfsf2+0x98>
 504ef18:	300c91ba 	slli	r6,r6,6
 504ef1c:	300cd27a 	srli	r6,r6,9
 504ef20:	00000206 	br	504ef2c <__truncdfsf2+0xa0>
 504ef24:	00ffffc4 	movi	r3,-1
 504ef28:	000d883a 	mov	r6,zero
 504ef2c:	18c03fcc 	andi	r3,r3,255
 504ef30:	180895fa 	slli	r4,r3,23
 504ef34:	00c02034 	movhi	r3,128
 504ef38:	280a97fa 	slli	r5,r5,31
 504ef3c:	18ffffc4 	addi	r3,r3,-1
 504ef40:	30c6703a 	and	r3,r6,r3
 504ef44:	1906b03a 	or	r3,r3,r4
 504ef48:	1944b03a 	or	r2,r3,r5
 504ef4c:	f800283a 	ret
 504ef50:	40000b1e 	bne	r8,zero,504ef80 <__truncdfsf2+0xf4>
 504ef54:	388cb03a 	or	r6,r7,r2
 504ef58:	0007883a 	mov	r3,zero
 504ef5c:	30000426 	beq	r6,zero,504ef70 <__truncdfsf2+0xe4>
 504ef60:	01800144 	movi	r6,5
 504ef64:	00803fc4 	movi	r2,255
 504ef68:	300cd0fa 	srli	r6,r6,3
 504ef6c:	18800a26 	beq	r3,r2,504ef98 <__truncdfsf2+0x10c>
 504ef70:	00802034 	movhi	r2,128
 504ef74:	10bfffc4 	addi	r2,r2,-1
 504ef78:	308c703a 	and	r6,r6,r2
 504ef7c:	003feb06 	br	504ef2c <_gp+0xfffe3b04>
 504ef80:	3888b03a 	or	r4,r7,r2
 504ef84:	203fe726 	beq	r4,zero,504ef24 <_gp+0xfffe3afc>
 504ef88:	380c90fa 	slli	r6,r7,3
 504ef8c:	00c03fc4 	movi	r3,255
 504ef90:	31808034 	orhi	r6,r6,512
 504ef94:	003fd506 	br	504eeec <_gp+0xfffe3ac4>
 504ef98:	303fe226 	beq	r6,zero,504ef24 <_gp+0xfffe3afc>
 504ef9c:	00802034 	movhi	r2,128
 504efa0:	31801034 	orhi	r6,r6,64
 504efa4:	10bfffc4 	addi	r2,r2,-1
 504efa8:	00ffffc4 	movi	r3,-1
 504efac:	308c703a 	and	r6,r6,r2
 504efb0:	003fde06 	br	504ef2c <_gp+0xfffe3b04>
 504efb4:	013ffa44 	movi	r4,-23
 504efb8:	19000e16 	blt	r3,r4,504eff4 <__truncdfsf2+0x168>
 504efbc:	01000784 	movi	r4,30
 504efc0:	20c9c83a 	sub	r4,r4,r3
 504efc4:	018007c4 	movi	r6,31
 504efc8:	39c02034 	orhi	r7,r7,128
 504efcc:	31000b16 	blt	r6,r4,504effc <__truncdfsf2+0x170>
 504efd0:	423f2084 	addi	r8,r8,-894
 504efd4:	120c983a 	sll	r6,r2,r8
 504efd8:	3a0e983a 	sll	r7,r7,r8
 504efdc:	1104d83a 	srl	r2,r2,r4
 504efe0:	300cc03a 	cmpne	r6,r6,zero
 504efe4:	31ceb03a 	or	r7,r6,r7
 504efe8:	388cb03a 	or	r6,r7,r2
 504efec:	0007883a 	mov	r3,zero
 504eff0:	003fbe06 	br	504eeec <_gp+0xfffe3ac4>
 504eff4:	0007883a 	mov	r3,zero
 504eff8:	003fd906 	br	504ef60 <_gp+0xfffe3b38>
 504effc:	01bfff84 	movi	r6,-2
 504f000:	30cdc83a 	sub	r6,r6,r3
 504f004:	00c00804 	movi	r3,32
 504f008:	398cd83a 	srl	r6,r7,r6
 504f00c:	20c00726 	beq	r4,r3,504f02c <__truncdfsf2+0x1a0>
 504f010:	423f2884 	addi	r8,r8,-862
 504f014:	3a0e983a 	sll	r7,r7,r8
 504f018:	3884b03a 	or	r2,r7,r2
 504f01c:	1004c03a 	cmpne	r2,r2,zero
 504f020:	118cb03a 	or	r6,r2,r6
 504f024:	0007883a 	mov	r3,zero
 504f028:	003fb006 	br	504eeec <_gp+0xfffe3ac4>
 504f02c:	000f883a 	mov	r7,zero
 504f030:	003ff906 	br	504f018 <_gp+0xfffe3bf0>

0504f034 <__clzsi2>:
 504f034:	00bfffd4 	movui	r2,65535
 504f038:	11000536 	bltu	r2,r4,504f050 <__clzsi2+0x1c>
 504f03c:	00803fc4 	movi	r2,255
 504f040:	11000f36 	bltu	r2,r4,504f080 <__clzsi2+0x4c>
 504f044:	00800804 	movi	r2,32
 504f048:	0007883a 	mov	r3,zero
 504f04c:	00000506 	br	504f064 <__clzsi2+0x30>
 504f050:	00804034 	movhi	r2,256
 504f054:	10bfffc4 	addi	r2,r2,-1
 504f058:	11000c2e 	bgeu	r2,r4,504f08c <__clzsi2+0x58>
 504f05c:	00800204 	movi	r2,8
 504f060:	00c00604 	movi	r3,24
 504f064:	20c8d83a 	srl	r4,r4,r3
 504f068:	00c141b4 	movhi	r3,1286
 504f06c:	18c44304 	addi	r3,r3,4364
 504f070:	1909883a 	add	r4,r3,r4
 504f074:	20c00003 	ldbu	r3,0(r4)
 504f078:	10c5c83a 	sub	r2,r2,r3
 504f07c:	f800283a 	ret
 504f080:	00800604 	movi	r2,24
 504f084:	00c00204 	movi	r3,8
 504f088:	003ff606 	br	504f064 <_gp+0xfffe3c3c>
 504f08c:	00800404 	movi	r2,16
 504f090:	1007883a 	mov	r3,r2
 504f094:	003ff306 	br	504f064 <_gp+0xfffe3c3c>

0504f098 <malloc>:
 504f098:	008141b4 	movhi	r2,1286
 504f09c:	108d0f04 	addi	r2,r2,13372
 504f0a0:	200b883a 	mov	r5,r4
 504f0a4:	11000017 	ldw	r4,0(r2)
 504f0a8:	504f0c01 	jmpi	504f0c0 <_malloc_r>

0504f0ac <free>:
 504f0ac:	008141b4 	movhi	r2,1286
 504f0b0:	108d0f04 	addi	r2,r2,13372
 504f0b4:	200b883a 	mov	r5,r4
 504f0b8:	11000017 	ldw	r4,0(r2)
 504f0bc:	50565d01 	jmpi	50565d0 <_free_r>

0504f0c0 <_malloc_r>:
 504f0c0:	defff504 	addi	sp,sp,-44
 504f0c4:	dc800315 	stw	r18,12(sp)
 504f0c8:	dfc00a15 	stw	ra,40(sp)
 504f0cc:	df000915 	stw	fp,36(sp)
 504f0d0:	ddc00815 	stw	r23,32(sp)
 504f0d4:	dd800715 	stw	r22,28(sp)
 504f0d8:	dd400615 	stw	r21,24(sp)
 504f0dc:	dd000515 	stw	r20,20(sp)
 504f0e0:	dcc00415 	stw	r19,16(sp)
 504f0e4:	dc400215 	stw	r17,8(sp)
 504f0e8:	dc000115 	stw	r16,4(sp)
 504f0ec:	288002c4 	addi	r2,r5,11
 504f0f0:	00c00584 	movi	r3,22
 504f0f4:	2025883a 	mov	r18,r4
 504f0f8:	18807f2e 	bgeu	r3,r2,504f2f8 <_malloc_r+0x238>
 504f0fc:	047ffe04 	movi	r17,-8
 504f100:	1462703a 	and	r17,r2,r17
 504f104:	8800a316 	blt	r17,zero,504f394 <_malloc_r+0x2d4>
 504f108:	8940a236 	bltu	r17,r5,504f394 <_malloc_r+0x2d4>
 504f10c:	505d3e40 	call	505d3e4 <__malloc_lock>
 504f110:	00807dc4 	movi	r2,503
 504f114:	1441e92e 	bgeu	r2,r17,504f8bc <_malloc_r+0x7fc>
 504f118:	8804d27a 	srli	r2,r17,9
 504f11c:	1000a126 	beq	r2,zero,504f3a4 <_malloc_r+0x2e4>
 504f120:	00c00104 	movi	r3,4
 504f124:	18811e36 	bltu	r3,r2,504f5a0 <_malloc_r+0x4e0>
 504f128:	8804d1ba 	srli	r2,r17,6
 504f12c:	12000e44 	addi	r8,r2,57
 504f130:	11c00e04 	addi	r7,r2,56
 504f134:	4209883a 	add	r4,r8,r8
 504f138:	04c141b4 	movhi	r19,1286
 504f13c:	2109883a 	add	r4,r4,r4
 504f140:	9cc62e04 	addi	r19,r19,6328
 504f144:	2109883a 	add	r4,r4,r4
 504f148:	9909883a 	add	r4,r19,r4
 504f14c:	24000117 	ldw	r16,4(r4)
 504f150:	213ffe04 	addi	r4,r4,-8
 504f154:	24009726 	beq	r4,r16,504f3b4 <_malloc_r+0x2f4>
 504f158:	80800117 	ldw	r2,4(r16)
 504f15c:	01bfff04 	movi	r6,-4
 504f160:	014003c4 	movi	r5,15
 504f164:	1184703a 	and	r2,r2,r6
 504f168:	1447c83a 	sub	r3,r2,r17
 504f16c:	28c00716 	blt	r5,r3,504f18c <_malloc_r+0xcc>
 504f170:	1800920e 	bge	r3,zero,504f3bc <_malloc_r+0x2fc>
 504f174:	84000317 	ldw	r16,12(r16)
 504f178:	24008e26 	beq	r4,r16,504f3b4 <_malloc_r+0x2f4>
 504f17c:	80800117 	ldw	r2,4(r16)
 504f180:	1184703a 	and	r2,r2,r6
 504f184:	1447c83a 	sub	r3,r2,r17
 504f188:	28fff90e 	bge	r5,r3,504f170 <_gp+0xfffe3d48>
 504f18c:	3809883a 	mov	r4,r7
 504f190:	018141b4 	movhi	r6,1286
 504f194:	9c000417 	ldw	r16,16(r19)
 504f198:	31862e04 	addi	r6,r6,6328
 504f19c:	32000204 	addi	r8,r6,8
 504f1a0:	82013426 	beq	r16,r8,504f674 <_malloc_r+0x5b4>
 504f1a4:	80c00117 	ldw	r3,4(r16)
 504f1a8:	00bfff04 	movi	r2,-4
 504f1ac:	188e703a 	and	r7,r3,r2
 504f1b0:	3c45c83a 	sub	r2,r7,r17
 504f1b4:	00c003c4 	movi	r3,15
 504f1b8:	18811f16 	blt	r3,r2,504f638 <_malloc_r+0x578>
 504f1bc:	32000515 	stw	r8,20(r6)
 504f1c0:	32000415 	stw	r8,16(r6)
 504f1c4:	10007f0e 	bge	r2,zero,504f3c4 <_malloc_r+0x304>
 504f1c8:	00807fc4 	movi	r2,511
 504f1cc:	11c0fd36 	bltu	r2,r7,504f5c4 <_malloc_r+0x504>
 504f1d0:	3806d0fa 	srli	r3,r7,3
 504f1d4:	01c00044 	movi	r7,1
 504f1d8:	30800117 	ldw	r2,4(r6)
 504f1dc:	19400044 	addi	r5,r3,1
 504f1e0:	294b883a 	add	r5,r5,r5
 504f1e4:	1807d0ba 	srai	r3,r3,2
 504f1e8:	294b883a 	add	r5,r5,r5
 504f1ec:	294b883a 	add	r5,r5,r5
 504f1f0:	298b883a 	add	r5,r5,r6
 504f1f4:	38c6983a 	sll	r3,r7,r3
 504f1f8:	29c00017 	ldw	r7,0(r5)
 504f1fc:	2a7ffe04 	addi	r9,r5,-8
 504f200:	1886b03a 	or	r3,r3,r2
 504f204:	82400315 	stw	r9,12(r16)
 504f208:	81c00215 	stw	r7,8(r16)
 504f20c:	30c00115 	stw	r3,4(r6)
 504f210:	2c000015 	stw	r16,0(r5)
 504f214:	3c000315 	stw	r16,12(r7)
 504f218:	2005d0ba 	srai	r2,r4,2
 504f21c:	01400044 	movi	r5,1
 504f220:	288a983a 	sll	r5,r5,r2
 504f224:	19406f36 	bltu	r3,r5,504f3e4 <_malloc_r+0x324>
 504f228:	28c4703a 	and	r2,r5,r3
 504f22c:	10000a1e 	bne	r2,zero,504f258 <_malloc_r+0x198>
 504f230:	00bfff04 	movi	r2,-4
 504f234:	294b883a 	add	r5,r5,r5
 504f238:	2088703a 	and	r4,r4,r2
 504f23c:	28c4703a 	and	r2,r5,r3
 504f240:	21000104 	addi	r4,r4,4
 504f244:	1000041e 	bne	r2,zero,504f258 <_malloc_r+0x198>
 504f248:	294b883a 	add	r5,r5,r5
 504f24c:	28c4703a 	and	r2,r5,r3
 504f250:	21000104 	addi	r4,r4,4
 504f254:	103ffc26 	beq	r2,zero,504f248 <_gp+0xfffe3e20>
 504f258:	02bfff04 	movi	r10,-4
 504f25c:	024003c4 	movi	r9,15
 504f260:	21800044 	addi	r6,r4,1
 504f264:	318d883a 	add	r6,r6,r6
 504f268:	318d883a 	add	r6,r6,r6
 504f26c:	318d883a 	add	r6,r6,r6
 504f270:	998d883a 	add	r6,r19,r6
 504f274:	333ffe04 	addi	r12,r6,-8
 504f278:	2017883a 	mov	r11,r4
 504f27c:	31800104 	addi	r6,r6,4
 504f280:	34000017 	ldw	r16,0(r6)
 504f284:	31fffd04 	addi	r7,r6,-12
 504f288:	81c0041e 	bne	r16,r7,504f29c <_malloc_r+0x1dc>
 504f28c:	0000fb06 	br	504f67c <_malloc_r+0x5bc>
 504f290:	1801030e 	bge	r3,zero,504f6a0 <_malloc_r+0x5e0>
 504f294:	84000317 	ldw	r16,12(r16)
 504f298:	81c0f826 	beq	r16,r7,504f67c <_malloc_r+0x5bc>
 504f29c:	80800117 	ldw	r2,4(r16)
 504f2a0:	1284703a 	and	r2,r2,r10
 504f2a4:	1447c83a 	sub	r3,r2,r17
 504f2a8:	48fff90e 	bge	r9,r3,504f290 <_gp+0xfffe3e68>
 504f2ac:	80800317 	ldw	r2,12(r16)
 504f2b0:	81000217 	ldw	r4,8(r16)
 504f2b4:	89400054 	ori	r5,r17,1
 504f2b8:	81400115 	stw	r5,4(r16)
 504f2bc:	20800315 	stw	r2,12(r4)
 504f2c0:	11000215 	stw	r4,8(r2)
 504f2c4:	8463883a 	add	r17,r16,r17
 504f2c8:	9c400515 	stw	r17,20(r19)
 504f2cc:	9c400415 	stw	r17,16(r19)
 504f2d0:	18800054 	ori	r2,r3,1
 504f2d4:	88800115 	stw	r2,4(r17)
 504f2d8:	8a000315 	stw	r8,12(r17)
 504f2dc:	8a000215 	stw	r8,8(r17)
 504f2e0:	88e3883a 	add	r17,r17,r3
 504f2e4:	88c00015 	stw	r3,0(r17)
 504f2e8:	9009883a 	mov	r4,r18
 504f2ec:	505d4080 	call	505d408 <__malloc_unlock>
 504f2f0:	80800204 	addi	r2,r16,8
 504f2f4:	00001b06 	br	504f364 <_malloc_r+0x2a4>
 504f2f8:	04400404 	movi	r17,16
 504f2fc:	89402536 	bltu	r17,r5,504f394 <_malloc_r+0x2d4>
 504f300:	505d3e40 	call	505d3e4 <__malloc_lock>
 504f304:	00800184 	movi	r2,6
 504f308:	01000084 	movi	r4,2
 504f30c:	04c141b4 	movhi	r19,1286
 504f310:	1085883a 	add	r2,r2,r2
 504f314:	9cc62e04 	addi	r19,r19,6328
 504f318:	1085883a 	add	r2,r2,r2
 504f31c:	9885883a 	add	r2,r19,r2
 504f320:	14000117 	ldw	r16,4(r2)
 504f324:	10fffe04 	addi	r3,r2,-8
 504f328:	80c0d926 	beq	r16,r3,504f690 <_malloc_r+0x5d0>
 504f32c:	80c00117 	ldw	r3,4(r16)
 504f330:	81000317 	ldw	r4,12(r16)
 504f334:	00bfff04 	movi	r2,-4
 504f338:	1884703a 	and	r2,r3,r2
 504f33c:	81400217 	ldw	r5,8(r16)
 504f340:	8085883a 	add	r2,r16,r2
 504f344:	10c00117 	ldw	r3,4(r2)
 504f348:	29000315 	stw	r4,12(r5)
 504f34c:	21400215 	stw	r5,8(r4)
 504f350:	18c00054 	ori	r3,r3,1
 504f354:	10c00115 	stw	r3,4(r2)
 504f358:	9009883a 	mov	r4,r18
 504f35c:	505d4080 	call	505d408 <__malloc_unlock>
 504f360:	80800204 	addi	r2,r16,8
 504f364:	dfc00a17 	ldw	ra,40(sp)
 504f368:	df000917 	ldw	fp,36(sp)
 504f36c:	ddc00817 	ldw	r23,32(sp)
 504f370:	dd800717 	ldw	r22,28(sp)
 504f374:	dd400617 	ldw	r21,24(sp)
 504f378:	dd000517 	ldw	r20,20(sp)
 504f37c:	dcc00417 	ldw	r19,16(sp)
 504f380:	dc800317 	ldw	r18,12(sp)
 504f384:	dc400217 	ldw	r17,8(sp)
 504f388:	dc000117 	ldw	r16,4(sp)
 504f38c:	dec00b04 	addi	sp,sp,44
 504f390:	f800283a 	ret
 504f394:	00800304 	movi	r2,12
 504f398:	90800015 	stw	r2,0(r18)
 504f39c:	0005883a 	mov	r2,zero
 504f3a0:	003ff006 	br	504f364 <_gp+0xfffe3f3c>
 504f3a4:	01002004 	movi	r4,128
 504f3a8:	02001004 	movi	r8,64
 504f3ac:	01c00fc4 	movi	r7,63
 504f3b0:	003f6106 	br	504f138 <_gp+0xfffe3d10>
 504f3b4:	4009883a 	mov	r4,r8
 504f3b8:	003f7506 	br	504f190 <_gp+0xfffe3d68>
 504f3bc:	81000317 	ldw	r4,12(r16)
 504f3c0:	003fde06 	br	504f33c <_gp+0xfffe3f14>
 504f3c4:	81c5883a 	add	r2,r16,r7
 504f3c8:	11400117 	ldw	r5,4(r2)
 504f3cc:	9009883a 	mov	r4,r18
 504f3d0:	29400054 	ori	r5,r5,1
 504f3d4:	11400115 	stw	r5,4(r2)
 504f3d8:	505d4080 	call	505d408 <__malloc_unlock>
 504f3dc:	80800204 	addi	r2,r16,8
 504f3e0:	003fe006 	br	504f364 <_gp+0xfffe3f3c>
 504f3e4:	9c000217 	ldw	r16,8(r19)
 504f3e8:	00bfff04 	movi	r2,-4
 504f3ec:	85800117 	ldw	r22,4(r16)
 504f3f0:	b0ac703a 	and	r22,r22,r2
 504f3f4:	b4400336 	bltu	r22,r17,504f404 <_malloc_r+0x344>
 504f3f8:	b445c83a 	sub	r2,r22,r17
 504f3fc:	00c003c4 	movi	r3,15
 504f400:	18805d16 	blt	r3,r2,504f578 <_malloc_r+0x4b8>
 504f404:	05c141b4 	movhi	r23,1286
 504f408:	008141b4 	movhi	r2,1286
 504f40c:	10951c04 	addi	r2,r2,21616
 504f410:	bdcd0c04 	addi	r23,r23,13360
 504f414:	15400017 	ldw	r21,0(r2)
 504f418:	b8c00017 	ldw	r3,0(r23)
 504f41c:	00bfffc4 	movi	r2,-1
 504f420:	858d883a 	add	r6,r16,r22
 504f424:	8d6b883a 	add	r21,r17,r21
 504f428:	1880ea26 	beq	r3,r2,504f7d4 <_malloc_r+0x714>
 504f42c:	ad4403c4 	addi	r21,r21,4111
 504f430:	00bc0004 	movi	r2,-4096
 504f434:	a8aa703a 	and	r21,r21,r2
 504f438:	a80b883a 	mov	r5,r21
 504f43c:	9009883a 	mov	r4,r18
 504f440:	d9800015 	stw	r6,0(sp)
 504f444:	504fc7c0 	call	504fc7c <_sbrk_r>
 504f448:	1029883a 	mov	r20,r2
 504f44c:	00bfffc4 	movi	r2,-1
 504f450:	d9800017 	ldw	r6,0(sp)
 504f454:	a080e826 	beq	r20,r2,504f7f8 <_malloc_r+0x738>
 504f458:	a180a636 	bltu	r20,r6,504f6f4 <_malloc_r+0x634>
 504f45c:	070141b4 	movhi	fp,1286
 504f460:	e7163304 	addi	fp,fp,22732
 504f464:	e0800017 	ldw	r2,0(fp)
 504f468:	a887883a 	add	r3,r21,r2
 504f46c:	e0c00015 	stw	r3,0(fp)
 504f470:	3500e626 	beq	r6,r20,504f80c <_malloc_r+0x74c>
 504f474:	b9000017 	ldw	r4,0(r23)
 504f478:	00bfffc4 	movi	r2,-1
 504f47c:	2080ee26 	beq	r4,r2,504f838 <_malloc_r+0x778>
 504f480:	a185c83a 	sub	r2,r20,r6
 504f484:	10c5883a 	add	r2,r2,r3
 504f488:	e0800015 	stw	r2,0(fp)
 504f48c:	a0c001cc 	andi	r3,r20,7
 504f490:	1800bc26 	beq	r3,zero,504f784 <_malloc_r+0x6c4>
 504f494:	a0e9c83a 	sub	r20,r20,r3
 504f498:	00840204 	movi	r2,4104
 504f49c:	a5000204 	addi	r20,r20,8
 504f4a0:	10c7c83a 	sub	r3,r2,r3
 504f4a4:	a545883a 	add	r2,r20,r21
 504f4a8:	1083ffcc 	andi	r2,r2,4095
 504f4ac:	18abc83a 	sub	r21,r3,r2
 504f4b0:	a80b883a 	mov	r5,r21
 504f4b4:	9009883a 	mov	r4,r18
 504f4b8:	504fc7c0 	call	504fc7c <_sbrk_r>
 504f4bc:	00ffffc4 	movi	r3,-1
 504f4c0:	10c0e126 	beq	r2,r3,504f848 <_malloc_r+0x788>
 504f4c4:	1505c83a 	sub	r2,r2,r20
 504f4c8:	1545883a 	add	r2,r2,r21
 504f4cc:	10800054 	ori	r2,r2,1
 504f4d0:	e0c00017 	ldw	r3,0(fp)
 504f4d4:	9d000215 	stw	r20,8(r19)
 504f4d8:	a0800115 	stw	r2,4(r20)
 504f4dc:	a8c7883a 	add	r3,r21,r3
 504f4e0:	e0c00015 	stw	r3,0(fp)
 504f4e4:	84c00e26 	beq	r16,r19,504f520 <_malloc_r+0x460>
 504f4e8:	018003c4 	movi	r6,15
 504f4ec:	3580a72e 	bgeu	r6,r22,504f78c <_malloc_r+0x6cc>
 504f4f0:	81400117 	ldw	r5,4(r16)
 504f4f4:	013ffe04 	movi	r4,-8
 504f4f8:	b0bffd04 	addi	r2,r22,-12
 504f4fc:	1104703a 	and	r2,r2,r4
 504f500:	2900004c 	andi	r4,r5,1
 504f504:	2088b03a 	or	r4,r4,r2
 504f508:	81000115 	stw	r4,4(r16)
 504f50c:	01400144 	movi	r5,5
 504f510:	8089883a 	add	r4,r16,r2
 504f514:	21400115 	stw	r5,4(r4)
 504f518:	21400215 	stw	r5,8(r4)
 504f51c:	3080cd36 	bltu	r6,r2,504f854 <_malloc_r+0x794>
 504f520:	008141b4 	movhi	r2,1286
 504f524:	10951b04 	addi	r2,r2,21612
 504f528:	11000017 	ldw	r4,0(r2)
 504f52c:	20c0012e 	bgeu	r4,r3,504f534 <_malloc_r+0x474>
 504f530:	10c00015 	stw	r3,0(r2)
 504f534:	008141b4 	movhi	r2,1286
 504f538:	10951a04 	addi	r2,r2,21608
 504f53c:	11000017 	ldw	r4,0(r2)
 504f540:	9c000217 	ldw	r16,8(r19)
 504f544:	20c0012e 	bgeu	r4,r3,504f54c <_malloc_r+0x48c>
 504f548:	10c00015 	stw	r3,0(r2)
 504f54c:	80c00117 	ldw	r3,4(r16)
 504f550:	00bfff04 	movi	r2,-4
 504f554:	1886703a 	and	r3,r3,r2
 504f558:	1c45c83a 	sub	r2,r3,r17
 504f55c:	1c400236 	bltu	r3,r17,504f568 <_malloc_r+0x4a8>
 504f560:	00c003c4 	movi	r3,15
 504f564:	18800416 	blt	r3,r2,504f578 <_malloc_r+0x4b8>
 504f568:	9009883a 	mov	r4,r18
 504f56c:	505d4080 	call	505d408 <__malloc_unlock>
 504f570:	0005883a 	mov	r2,zero
 504f574:	003f7b06 	br	504f364 <_gp+0xfffe3f3c>
 504f578:	88c00054 	ori	r3,r17,1
 504f57c:	80c00115 	stw	r3,4(r16)
 504f580:	8463883a 	add	r17,r16,r17
 504f584:	10800054 	ori	r2,r2,1
 504f588:	9c400215 	stw	r17,8(r19)
 504f58c:	88800115 	stw	r2,4(r17)
 504f590:	9009883a 	mov	r4,r18
 504f594:	505d4080 	call	505d408 <__malloc_unlock>
 504f598:	80800204 	addi	r2,r16,8
 504f59c:	003f7106 	br	504f364 <_gp+0xfffe3f3c>
 504f5a0:	00c00504 	movi	r3,20
 504f5a4:	18804a2e 	bgeu	r3,r2,504f6d0 <_malloc_r+0x610>
 504f5a8:	00c01504 	movi	r3,84
 504f5ac:	18806e36 	bltu	r3,r2,504f768 <_malloc_r+0x6a8>
 504f5b0:	8804d33a 	srli	r2,r17,12
 504f5b4:	12001bc4 	addi	r8,r2,111
 504f5b8:	11c01b84 	addi	r7,r2,110
 504f5bc:	4209883a 	add	r4,r8,r8
 504f5c0:	003edd06 	br	504f138 <_gp+0xfffe3d10>
 504f5c4:	3804d27a 	srli	r2,r7,9
 504f5c8:	00c00104 	movi	r3,4
 504f5cc:	1880442e 	bgeu	r3,r2,504f6e0 <_malloc_r+0x620>
 504f5d0:	00c00504 	movi	r3,20
 504f5d4:	18808136 	bltu	r3,r2,504f7dc <_malloc_r+0x71c>
 504f5d8:	11401704 	addi	r5,r2,92
 504f5dc:	10c016c4 	addi	r3,r2,91
 504f5e0:	294b883a 	add	r5,r5,r5
 504f5e4:	294b883a 	add	r5,r5,r5
 504f5e8:	294b883a 	add	r5,r5,r5
 504f5ec:	994b883a 	add	r5,r19,r5
 504f5f0:	28800017 	ldw	r2,0(r5)
 504f5f4:	018141b4 	movhi	r6,1286
 504f5f8:	297ffe04 	addi	r5,r5,-8
 504f5fc:	31862e04 	addi	r6,r6,6328
 504f600:	28806526 	beq	r5,r2,504f798 <_malloc_r+0x6d8>
 504f604:	01bfff04 	movi	r6,-4
 504f608:	10c00117 	ldw	r3,4(r2)
 504f60c:	1986703a 	and	r3,r3,r6
 504f610:	38c0022e 	bgeu	r7,r3,504f61c <_malloc_r+0x55c>
 504f614:	10800217 	ldw	r2,8(r2)
 504f618:	28bffb1e 	bne	r5,r2,504f608 <_gp+0xfffe41e0>
 504f61c:	11400317 	ldw	r5,12(r2)
 504f620:	98c00117 	ldw	r3,4(r19)
 504f624:	81400315 	stw	r5,12(r16)
 504f628:	80800215 	stw	r2,8(r16)
 504f62c:	2c000215 	stw	r16,8(r5)
 504f630:	14000315 	stw	r16,12(r2)
 504f634:	003ef806 	br	504f218 <_gp+0xfffe3df0>
 504f638:	88c00054 	ori	r3,r17,1
 504f63c:	80c00115 	stw	r3,4(r16)
 504f640:	8463883a 	add	r17,r16,r17
 504f644:	34400515 	stw	r17,20(r6)
 504f648:	34400415 	stw	r17,16(r6)
 504f64c:	10c00054 	ori	r3,r2,1
 504f650:	8a000315 	stw	r8,12(r17)
 504f654:	8a000215 	stw	r8,8(r17)
 504f658:	88c00115 	stw	r3,4(r17)
 504f65c:	88a3883a 	add	r17,r17,r2
 504f660:	88800015 	stw	r2,0(r17)
 504f664:	9009883a 	mov	r4,r18
 504f668:	505d4080 	call	505d408 <__malloc_unlock>
 504f66c:	80800204 	addi	r2,r16,8
 504f670:	003f3c06 	br	504f364 <_gp+0xfffe3f3c>
 504f674:	30c00117 	ldw	r3,4(r6)
 504f678:	003ee706 	br	504f218 <_gp+0xfffe3df0>
 504f67c:	5ac00044 	addi	r11,r11,1
 504f680:	588000cc 	andi	r2,r11,3
 504f684:	31800204 	addi	r6,r6,8
 504f688:	103efd1e 	bne	r2,zero,504f280 <_gp+0xfffe3e58>
 504f68c:	00002406 	br	504f720 <_malloc_r+0x660>
 504f690:	14000317 	ldw	r16,12(r2)
 504f694:	143f251e 	bne	r2,r16,504f32c <_gp+0xfffe3f04>
 504f698:	21000084 	addi	r4,r4,2
 504f69c:	003ebc06 	br	504f190 <_gp+0xfffe3d68>
 504f6a0:	8085883a 	add	r2,r16,r2
 504f6a4:	10c00117 	ldw	r3,4(r2)
 504f6a8:	81000317 	ldw	r4,12(r16)
 504f6ac:	81400217 	ldw	r5,8(r16)
 504f6b0:	18c00054 	ori	r3,r3,1
 504f6b4:	10c00115 	stw	r3,4(r2)
 504f6b8:	29000315 	stw	r4,12(r5)
 504f6bc:	21400215 	stw	r5,8(r4)
 504f6c0:	9009883a 	mov	r4,r18
 504f6c4:	505d4080 	call	505d408 <__malloc_unlock>
 504f6c8:	80800204 	addi	r2,r16,8
 504f6cc:	003f2506 	br	504f364 <_gp+0xfffe3f3c>
 504f6d0:	12001704 	addi	r8,r2,92
 504f6d4:	11c016c4 	addi	r7,r2,91
 504f6d8:	4209883a 	add	r4,r8,r8
 504f6dc:	003e9606 	br	504f138 <_gp+0xfffe3d10>
 504f6e0:	3804d1ba 	srli	r2,r7,6
 504f6e4:	11400e44 	addi	r5,r2,57
 504f6e8:	10c00e04 	addi	r3,r2,56
 504f6ec:	294b883a 	add	r5,r5,r5
 504f6f0:	003fbc06 	br	504f5e4 <_gp+0xfffe41bc>
 504f6f4:	84ff5926 	beq	r16,r19,504f45c <_gp+0xfffe4034>
 504f6f8:	008141b4 	movhi	r2,1286
 504f6fc:	10862e04 	addi	r2,r2,6328
 504f700:	14000217 	ldw	r16,8(r2)
 504f704:	00bfff04 	movi	r2,-4
 504f708:	80c00117 	ldw	r3,4(r16)
 504f70c:	1886703a 	and	r3,r3,r2
 504f710:	003f9106 	br	504f558 <_gp+0xfffe4130>
 504f714:	60800217 	ldw	r2,8(r12)
 504f718:	213fffc4 	addi	r4,r4,-1
 504f71c:	1300651e 	bne	r2,r12,504f8b4 <_malloc_r+0x7f4>
 504f720:	208000cc 	andi	r2,r4,3
 504f724:	633ffe04 	addi	r12,r12,-8
 504f728:	103ffa1e 	bne	r2,zero,504f714 <_gp+0xfffe42ec>
 504f72c:	98800117 	ldw	r2,4(r19)
 504f730:	0146303a 	nor	r3,zero,r5
 504f734:	1884703a 	and	r2,r3,r2
 504f738:	98800115 	stw	r2,4(r19)
 504f73c:	294b883a 	add	r5,r5,r5
 504f740:	117f2836 	bltu	r2,r5,504f3e4 <_gp+0xfffe3fbc>
 504f744:	283f2726 	beq	r5,zero,504f3e4 <_gp+0xfffe3fbc>
 504f748:	2886703a 	and	r3,r5,r2
 504f74c:	5809883a 	mov	r4,r11
 504f750:	183ec31e 	bne	r3,zero,504f260 <_gp+0xfffe3e38>
 504f754:	294b883a 	add	r5,r5,r5
 504f758:	2886703a 	and	r3,r5,r2
 504f75c:	21000104 	addi	r4,r4,4
 504f760:	183ffc26 	beq	r3,zero,504f754 <_gp+0xfffe432c>
 504f764:	003ebe06 	br	504f260 <_gp+0xfffe3e38>
 504f768:	00c05504 	movi	r3,340
 504f76c:	18801236 	bltu	r3,r2,504f7b8 <_malloc_r+0x6f8>
 504f770:	8804d3fa 	srli	r2,r17,15
 504f774:	12001e04 	addi	r8,r2,120
 504f778:	11c01dc4 	addi	r7,r2,119
 504f77c:	4209883a 	add	r4,r8,r8
 504f780:	003e6d06 	br	504f138 <_gp+0xfffe3d10>
 504f784:	00c40004 	movi	r3,4096
 504f788:	003f4606 	br	504f4a4 <_gp+0xfffe407c>
 504f78c:	00800044 	movi	r2,1
 504f790:	a0800115 	stw	r2,4(r20)
 504f794:	003f7406 	br	504f568 <_gp+0xfffe4140>
 504f798:	1805d0ba 	srai	r2,r3,2
 504f79c:	01c00044 	movi	r7,1
 504f7a0:	30c00117 	ldw	r3,4(r6)
 504f7a4:	388e983a 	sll	r7,r7,r2
 504f7a8:	2805883a 	mov	r2,r5
 504f7ac:	38c6b03a 	or	r3,r7,r3
 504f7b0:	30c00115 	stw	r3,4(r6)
 504f7b4:	003f9b06 	br	504f624 <_gp+0xfffe41fc>
 504f7b8:	00c15504 	movi	r3,1364
 504f7bc:	18801a36 	bltu	r3,r2,504f828 <_malloc_r+0x768>
 504f7c0:	8804d4ba 	srli	r2,r17,18
 504f7c4:	12001f44 	addi	r8,r2,125
 504f7c8:	11c01f04 	addi	r7,r2,124
 504f7cc:	4209883a 	add	r4,r8,r8
 504f7d0:	003e5906 	br	504f138 <_gp+0xfffe3d10>
 504f7d4:	ad400404 	addi	r21,r21,16
 504f7d8:	003f1706 	br	504f438 <_gp+0xfffe4010>
 504f7dc:	00c01504 	movi	r3,84
 504f7e0:	18802336 	bltu	r3,r2,504f870 <_malloc_r+0x7b0>
 504f7e4:	3804d33a 	srli	r2,r7,12
 504f7e8:	11401bc4 	addi	r5,r2,111
 504f7ec:	10c01b84 	addi	r3,r2,110
 504f7f0:	294b883a 	add	r5,r5,r5
 504f7f4:	003f7b06 	br	504f5e4 <_gp+0xfffe41bc>
 504f7f8:	9c000217 	ldw	r16,8(r19)
 504f7fc:	00bfff04 	movi	r2,-4
 504f800:	80c00117 	ldw	r3,4(r16)
 504f804:	1886703a 	and	r3,r3,r2
 504f808:	003f5306 	br	504f558 <_gp+0xfffe4130>
 504f80c:	3083ffcc 	andi	r2,r6,4095
 504f810:	103f181e 	bne	r2,zero,504f474 <_gp+0xfffe404c>
 504f814:	99000217 	ldw	r4,8(r19)
 504f818:	b545883a 	add	r2,r22,r21
 504f81c:	10800054 	ori	r2,r2,1
 504f820:	20800115 	stw	r2,4(r4)
 504f824:	003f3e06 	br	504f520 <_gp+0xfffe40f8>
 504f828:	01003f84 	movi	r4,254
 504f82c:	02001fc4 	movi	r8,127
 504f830:	01c01f84 	movi	r7,126
 504f834:	003e4006 	br	504f138 <_gp+0xfffe3d10>
 504f838:	008141b4 	movhi	r2,1286
 504f83c:	108d0c04 	addi	r2,r2,13360
 504f840:	15000015 	stw	r20,0(r2)
 504f844:	003f1106 	br	504f48c <_gp+0xfffe4064>
 504f848:	00800044 	movi	r2,1
 504f84c:	002b883a 	mov	r21,zero
 504f850:	003f1f06 	br	504f4d0 <_gp+0xfffe40a8>
 504f854:	81400204 	addi	r5,r16,8
 504f858:	9009883a 	mov	r4,r18
 504f85c:	50565d00 	call	50565d0 <_free_r>
 504f860:	008141b4 	movhi	r2,1286
 504f864:	10963304 	addi	r2,r2,22732
 504f868:	10c00017 	ldw	r3,0(r2)
 504f86c:	003f2c06 	br	504f520 <_gp+0xfffe40f8>
 504f870:	00c05504 	movi	r3,340
 504f874:	18800536 	bltu	r3,r2,504f88c <_malloc_r+0x7cc>
 504f878:	3804d3fa 	srli	r2,r7,15
 504f87c:	11401e04 	addi	r5,r2,120
 504f880:	10c01dc4 	addi	r3,r2,119
 504f884:	294b883a 	add	r5,r5,r5
 504f888:	003f5606 	br	504f5e4 <_gp+0xfffe41bc>
 504f88c:	00c15504 	movi	r3,1364
 504f890:	18800536 	bltu	r3,r2,504f8a8 <_malloc_r+0x7e8>
 504f894:	3804d4ba 	srli	r2,r7,18
 504f898:	11401f44 	addi	r5,r2,125
 504f89c:	10c01f04 	addi	r3,r2,124
 504f8a0:	294b883a 	add	r5,r5,r5
 504f8a4:	003f4f06 	br	504f5e4 <_gp+0xfffe41bc>
 504f8a8:	01403f84 	movi	r5,254
 504f8ac:	00c01f84 	movi	r3,126
 504f8b0:	003f4c06 	br	504f5e4 <_gp+0xfffe41bc>
 504f8b4:	98800117 	ldw	r2,4(r19)
 504f8b8:	003fa006 	br	504f73c <_gp+0xfffe4314>
 504f8bc:	8808d0fa 	srli	r4,r17,3
 504f8c0:	20800044 	addi	r2,r4,1
 504f8c4:	1085883a 	add	r2,r2,r2
 504f8c8:	003e9006 	br	504f30c <_gp+0xfffe3ee4>

0504f8cc <memcpy>:
 504f8cc:	defffd04 	addi	sp,sp,-12
 504f8d0:	dfc00215 	stw	ra,8(sp)
 504f8d4:	dc400115 	stw	r17,4(sp)
 504f8d8:	dc000015 	stw	r16,0(sp)
 504f8dc:	00c003c4 	movi	r3,15
 504f8e0:	2005883a 	mov	r2,r4
 504f8e4:	1980452e 	bgeu	r3,r6,504f9fc <memcpy+0x130>
 504f8e8:	2906b03a 	or	r3,r5,r4
 504f8ec:	18c000cc 	andi	r3,r3,3
 504f8f0:	1800441e 	bne	r3,zero,504fa04 <memcpy+0x138>
 504f8f4:	347ffc04 	addi	r17,r6,-16
 504f8f8:	8822d13a 	srli	r17,r17,4
 504f8fc:	28c00104 	addi	r3,r5,4
 504f900:	23400104 	addi	r13,r4,4
 504f904:	8820913a 	slli	r16,r17,4
 504f908:	2b000204 	addi	r12,r5,8
 504f90c:	22c00204 	addi	r11,r4,8
 504f910:	84000504 	addi	r16,r16,20
 504f914:	2a800304 	addi	r10,r5,12
 504f918:	22400304 	addi	r9,r4,12
 504f91c:	2c21883a 	add	r16,r5,r16
 504f920:	2811883a 	mov	r8,r5
 504f924:	200f883a 	mov	r7,r4
 504f928:	41000017 	ldw	r4,0(r8)
 504f92c:	1fc00017 	ldw	ra,0(r3)
 504f930:	63c00017 	ldw	r15,0(r12)
 504f934:	39000015 	stw	r4,0(r7)
 504f938:	53800017 	ldw	r14,0(r10)
 504f93c:	6fc00015 	stw	ra,0(r13)
 504f940:	5bc00015 	stw	r15,0(r11)
 504f944:	4b800015 	stw	r14,0(r9)
 504f948:	18c00404 	addi	r3,r3,16
 504f94c:	39c00404 	addi	r7,r7,16
 504f950:	42000404 	addi	r8,r8,16
 504f954:	6b400404 	addi	r13,r13,16
 504f958:	63000404 	addi	r12,r12,16
 504f95c:	5ac00404 	addi	r11,r11,16
 504f960:	52800404 	addi	r10,r10,16
 504f964:	4a400404 	addi	r9,r9,16
 504f968:	1c3fef1e 	bne	r3,r16,504f928 <_gp+0xfffe4500>
 504f96c:	89c00044 	addi	r7,r17,1
 504f970:	380e913a 	slli	r7,r7,4
 504f974:	310003cc 	andi	r4,r6,15
 504f978:	02c000c4 	movi	r11,3
 504f97c:	11c7883a 	add	r3,r2,r7
 504f980:	29cb883a 	add	r5,r5,r7
 504f984:	5900212e 	bgeu	r11,r4,504fa0c <memcpy+0x140>
 504f988:	1813883a 	mov	r9,r3
 504f98c:	2811883a 	mov	r8,r5
 504f990:	200f883a 	mov	r7,r4
 504f994:	42800017 	ldw	r10,0(r8)
 504f998:	4a400104 	addi	r9,r9,4
 504f99c:	39ffff04 	addi	r7,r7,-4
 504f9a0:	4abfff15 	stw	r10,-4(r9)
 504f9a4:	42000104 	addi	r8,r8,4
 504f9a8:	59fffa36 	bltu	r11,r7,504f994 <_gp+0xfffe456c>
 504f9ac:	213fff04 	addi	r4,r4,-4
 504f9b0:	2008d0ba 	srli	r4,r4,2
 504f9b4:	318000cc 	andi	r6,r6,3
 504f9b8:	21000044 	addi	r4,r4,1
 504f9bc:	2109883a 	add	r4,r4,r4
 504f9c0:	2109883a 	add	r4,r4,r4
 504f9c4:	1907883a 	add	r3,r3,r4
 504f9c8:	290b883a 	add	r5,r5,r4
 504f9cc:	30000626 	beq	r6,zero,504f9e8 <memcpy+0x11c>
 504f9d0:	198d883a 	add	r6,r3,r6
 504f9d4:	29c00003 	ldbu	r7,0(r5)
 504f9d8:	18c00044 	addi	r3,r3,1
 504f9dc:	29400044 	addi	r5,r5,1
 504f9e0:	19ffffc5 	stb	r7,-1(r3)
 504f9e4:	19bffb1e 	bne	r3,r6,504f9d4 <_gp+0xfffe45ac>
 504f9e8:	dfc00217 	ldw	ra,8(sp)
 504f9ec:	dc400117 	ldw	r17,4(sp)
 504f9f0:	dc000017 	ldw	r16,0(sp)
 504f9f4:	dec00304 	addi	sp,sp,12
 504f9f8:	f800283a 	ret
 504f9fc:	2007883a 	mov	r3,r4
 504fa00:	003ff206 	br	504f9cc <_gp+0xfffe45a4>
 504fa04:	2007883a 	mov	r3,r4
 504fa08:	003ff106 	br	504f9d0 <_gp+0xfffe45a8>
 504fa0c:	200d883a 	mov	r6,r4
 504fa10:	003fee06 	br	504f9cc <_gp+0xfffe45a4>

0504fa14 <memset>:
 504fa14:	20c000cc 	andi	r3,r4,3
 504fa18:	2005883a 	mov	r2,r4
 504fa1c:	18004426 	beq	r3,zero,504fb30 <memset+0x11c>
 504fa20:	31ffffc4 	addi	r7,r6,-1
 504fa24:	30004026 	beq	r6,zero,504fb28 <memset+0x114>
 504fa28:	2813883a 	mov	r9,r5
 504fa2c:	200d883a 	mov	r6,r4
 504fa30:	2007883a 	mov	r3,r4
 504fa34:	00000406 	br	504fa48 <memset+0x34>
 504fa38:	3a3fffc4 	addi	r8,r7,-1
 504fa3c:	31800044 	addi	r6,r6,1
 504fa40:	38003926 	beq	r7,zero,504fb28 <memset+0x114>
 504fa44:	400f883a 	mov	r7,r8
 504fa48:	18c00044 	addi	r3,r3,1
 504fa4c:	32400005 	stb	r9,0(r6)
 504fa50:	1a0000cc 	andi	r8,r3,3
 504fa54:	403ff81e 	bne	r8,zero,504fa38 <_gp+0xfffe4610>
 504fa58:	010000c4 	movi	r4,3
 504fa5c:	21c02d2e 	bgeu	r4,r7,504fb14 <memset+0x100>
 504fa60:	29003fcc 	andi	r4,r5,255
 504fa64:	200c923a 	slli	r6,r4,8
 504fa68:	3108b03a 	or	r4,r6,r4
 504fa6c:	200c943a 	slli	r6,r4,16
 504fa70:	218cb03a 	or	r6,r4,r6
 504fa74:	010003c4 	movi	r4,15
 504fa78:	21c0182e 	bgeu	r4,r7,504fadc <memset+0xc8>
 504fa7c:	3b3ffc04 	addi	r12,r7,-16
 504fa80:	6018d13a 	srli	r12,r12,4
 504fa84:	1a000104 	addi	r8,r3,4
 504fa88:	1ac00204 	addi	r11,r3,8
 504fa8c:	6008913a 	slli	r4,r12,4
 504fa90:	1a800304 	addi	r10,r3,12
 504fa94:	1813883a 	mov	r9,r3
 504fa98:	21000504 	addi	r4,r4,20
 504fa9c:	1909883a 	add	r4,r3,r4
 504faa0:	49800015 	stw	r6,0(r9)
 504faa4:	41800015 	stw	r6,0(r8)
 504faa8:	59800015 	stw	r6,0(r11)
 504faac:	51800015 	stw	r6,0(r10)
 504fab0:	42000404 	addi	r8,r8,16
 504fab4:	4a400404 	addi	r9,r9,16
 504fab8:	5ac00404 	addi	r11,r11,16
 504fabc:	52800404 	addi	r10,r10,16
 504fac0:	413ff71e 	bne	r8,r4,504faa0 <_gp+0xfffe4678>
 504fac4:	63000044 	addi	r12,r12,1
 504fac8:	6018913a 	slli	r12,r12,4
 504facc:	39c003cc 	andi	r7,r7,15
 504fad0:	010000c4 	movi	r4,3
 504fad4:	1b07883a 	add	r3,r3,r12
 504fad8:	21c00e2e 	bgeu	r4,r7,504fb14 <memset+0x100>
 504fadc:	1813883a 	mov	r9,r3
 504fae0:	3811883a 	mov	r8,r7
 504fae4:	010000c4 	movi	r4,3
 504fae8:	49800015 	stw	r6,0(r9)
 504faec:	423fff04 	addi	r8,r8,-4
 504faf0:	4a400104 	addi	r9,r9,4
 504faf4:	223ffc36 	bltu	r4,r8,504fae8 <_gp+0xfffe46c0>
 504faf8:	393fff04 	addi	r4,r7,-4
 504fafc:	2008d0ba 	srli	r4,r4,2
 504fb00:	39c000cc 	andi	r7,r7,3
 504fb04:	21000044 	addi	r4,r4,1
 504fb08:	2109883a 	add	r4,r4,r4
 504fb0c:	2109883a 	add	r4,r4,r4
 504fb10:	1907883a 	add	r3,r3,r4
 504fb14:	38000526 	beq	r7,zero,504fb2c <memset+0x118>
 504fb18:	19cf883a 	add	r7,r3,r7
 504fb1c:	19400005 	stb	r5,0(r3)
 504fb20:	18c00044 	addi	r3,r3,1
 504fb24:	38fffd1e 	bne	r7,r3,504fb1c <_gp+0xfffe46f4>
 504fb28:	f800283a 	ret
 504fb2c:	f800283a 	ret
 504fb30:	2007883a 	mov	r3,r4
 504fb34:	300f883a 	mov	r7,r6
 504fb38:	003fc706 	br	504fa58 <_gp+0xfffe4630>

0504fb3c <_printf_r>:
 504fb3c:	defffd04 	addi	sp,sp,-12
 504fb40:	2805883a 	mov	r2,r5
 504fb44:	dfc00015 	stw	ra,0(sp)
 504fb48:	d9800115 	stw	r6,4(sp)
 504fb4c:	d9c00215 	stw	r7,8(sp)
 504fb50:	21400217 	ldw	r5,8(r4)
 504fb54:	d9c00104 	addi	r7,sp,4
 504fb58:	100d883a 	mov	r6,r2
 504fb5c:	50520940 	call	5052094 <___vfprintf_internal_r>
 504fb60:	dfc00017 	ldw	ra,0(sp)
 504fb64:	dec00304 	addi	sp,sp,12
 504fb68:	f800283a 	ret

0504fb6c <printf>:
 504fb6c:	defffc04 	addi	sp,sp,-16
 504fb70:	dfc00015 	stw	ra,0(sp)
 504fb74:	d9400115 	stw	r5,4(sp)
 504fb78:	d9800215 	stw	r6,8(sp)
 504fb7c:	d9c00315 	stw	r7,12(sp)
 504fb80:	008141b4 	movhi	r2,1286
 504fb84:	108d0f04 	addi	r2,r2,13372
 504fb88:	10800017 	ldw	r2,0(r2)
 504fb8c:	200b883a 	mov	r5,r4
 504fb90:	d9800104 	addi	r6,sp,4
 504fb94:	11000217 	ldw	r4,8(r2)
 504fb98:	505428c0 	call	505428c <__vfprintf_internal>
 504fb9c:	dfc00017 	ldw	ra,0(sp)
 504fba0:	dec00404 	addi	sp,sp,16
 504fba4:	f800283a 	ret

0504fba8 <_puts_r>:
 504fba8:	defff604 	addi	sp,sp,-40
 504fbac:	dc000715 	stw	r16,28(sp)
 504fbb0:	2021883a 	mov	r16,r4
 504fbb4:	2809883a 	mov	r4,r5
 504fbb8:	dc400815 	stw	r17,32(sp)
 504fbbc:	dfc00915 	stw	ra,36(sp)
 504fbc0:	2823883a 	mov	r17,r5
 504fbc4:	504fe240 	call	504fe24 <strlen>
 504fbc8:	10c00044 	addi	r3,r2,1
 504fbcc:	d8800115 	stw	r2,4(sp)
 504fbd0:	008141b4 	movhi	r2,1286
 504fbd4:	10848304 	addi	r2,r2,4620
 504fbd8:	d8800215 	stw	r2,8(sp)
 504fbdc:	00800044 	movi	r2,1
 504fbe0:	d8800315 	stw	r2,12(sp)
 504fbe4:	00800084 	movi	r2,2
 504fbe8:	dc400015 	stw	r17,0(sp)
 504fbec:	d8c00615 	stw	r3,24(sp)
 504fbf0:	dec00415 	stw	sp,16(sp)
 504fbf4:	d8800515 	stw	r2,20(sp)
 504fbf8:	80000226 	beq	r16,zero,504fc04 <_puts_r+0x5c>
 504fbfc:	80800e17 	ldw	r2,56(r16)
 504fc00:	10001426 	beq	r2,zero,504fc54 <_puts_r+0xac>
 504fc04:	81400217 	ldw	r5,8(r16)
 504fc08:	2880030b 	ldhu	r2,12(r5)
 504fc0c:	10c8000c 	andi	r3,r2,8192
 504fc10:	1800061e 	bne	r3,zero,504fc2c <_puts_r+0x84>
 504fc14:	29001917 	ldw	r4,100(r5)
 504fc18:	00f7ffc4 	movi	r3,-8193
 504fc1c:	10880014 	ori	r2,r2,8192
 504fc20:	20c6703a 	and	r3,r4,r3
 504fc24:	2880030d 	sth	r2,12(r5)
 504fc28:	28c01915 	stw	r3,100(r5)
 504fc2c:	d9800404 	addi	r6,sp,16
 504fc30:	8009883a 	mov	r4,r16
 504fc34:	50568e00 	call	50568e0 <__sfvwrite_r>
 504fc38:	1000091e 	bne	r2,zero,504fc60 <_puts_r+0xb8>
 504fc3c:	00800284 	movi	r2,10
 504fc40:	dfc00917 	ldw	ra,36(sp)
 504fc44:	dc400817 	ldw	r17,32(sp)
 504fc48:	dc000717 	ldw	r16,28(sp)
 504fc4c:	dec00a04 	addi	sp,sp,40
 504fc50:	f800283a 	ret
 504fc54:	8009883a 	mov	r4,r16
 504fc58:	505645c0 	call	505645c <__sinit>
 504fc5c:	003fe906 	br	504fc04 <_gp+0xfffe47dc>
 504fc60:	00bfffc4 	movi	r2,-1
 504fc64:	003ff606 	br	504fc40 <_gp+0xfffe4818>

0504fc68 <puts>:
 504fc68:	008141b4 	movhi	r2,1286
 504fc6c:	108d0f04 	addi	r2,r2,13372
 504fc70:	200b883a 	mov	r5,r4
 504fc74:	11000017 	ldw	r4,0(r2)
 504fc78:	504fba81 	jmpi	504fba8 <_puts_r>

0504fc7c <_sbrk_r>:
 504fc7c:	defffd04 	addi	sp,sp,-12
 504fc80:	dc000015 	stw	r16,0(sp)
 504fc84:	040141b4 	movhi	r16,1286
 504fc88:	dc400115 	stw	r17,4(sp)
 504fc8c:	84151d04 	addi	r16,r16,21620
 504fc90:	2023883a 	mov	r17,r4
 504fc94:	2809883a 	mov	r4,r5
 504fc98:	dfc00215 	stw	ra,8(sp)
 504fc9c:	80000015 	stw	zero,0(r16)
 504fca0:	505d5c80 	call	505d5c8 <sbrk>
 504fca4:	00ffffc4 	movi	r3,-1
 504fca8:	10c00526 	beq	r2,r3,504fcc0 <_sbrk_r+0x44>
 504fcac:	dfc00217 	ldw	ra,8(sp)
 504fcb0:	dc400117 	ldw	r17,4(sp)
 504fcb4:	dc000017 	ldw	r16,0(sp)
 504fcb8:	dec00304 	addi	sp,sp,12
 504fcbc:	f800283a 	ret
 504fcc0:	80c00017 	ldw	r3,0(r16)
 504fcc4:	183ff926 	beq	r3,zero,504fcac <_gp+0xfffe4884>
 504fcc8:	88c00015 	stw	r3,0(r17)
 504fccc:	003ff706 	br	504fcac <_gp+0xfffe4884>

0504fcd0 <_sprintf_r>:
 504fcd0:	deffe404 	addi	sp,sp,-112
 504fcd4:	2807883a 	mov	r3,r5
 504fcd8:	dfc01a15 	stw	ra,104(sp)
 504fcdc:	d9c01b15 	stw	r7,108(sp)
 504fce0:	00a00034 	movhi	r2,32768
 504fce4:	10bfffc4 	addi	r2,r2,-1
 504fce8:	02008204 	movi	r8,520
 504fcec:	d8800215 	stw	r2,8(sp)
 504fcf0:	d8800515 	stw	r2,20(sp)
 504fcf4:	d9c01b04 	addi	r7,sp,108
 504fcf8:	d80b883a 	mov	r5,sp
 504fcfc:	00bfffc4 	movi	r2,-1
 504fd00:	d8c00015 	stw	r3,0(sp)
 504fd04:	d8c00415 	stw	r3,16(sp)
 504fd08:	da00030d 	sth	r8,12(sp)
 504fd0c:	d880038d 	sth	r2,14(sp)
 504fd10:	504febc0 	call	504febc <___svfprintf_internal_r>
 504fd14:	d8c00017 	ldw	r3,0(sp)
 504fd18:	18000005 	stb	zero,0(r3)
 504fd1c:	dfc01a17 	ldw	ra,104(sp)
 504fd20:	dec01c04 	addi	sp,sp,112
 504fd24:	f800283a 	ret

0504fd28 <sprintf>:
 504fd28:	deffe304 	addi	sp,sp,-116
 504fd2c:	2007883a 	mov	r3,r4
 504fd30:	dfc01a15 	stw	ra,104(sp)
 504fd34:	d9801b15 	stw	r6,108(sp)
 504fd38:	d9c01c15 	stw	r7,112(sp)
 504fd3c:	010141b4 	movhi	r4,1286
 504fd40:	210d0f04 	addi	r4,r4,13372
 504fd44:	21000017 	ldw	r4,0(r4)
 504fd48:	00a00034 	movhi	r2,32768
 504fd4c:	10bfffc4 	addi	r2,r2,-1
 504fd50:	280d883a 	mov	r6,r5
 504fd54:	02008204 	movi	r8,520
 504fd58:	d8800215 	stw	r2,8(sp)
 504fd5c:	d8800515 	stw	r2,20(sp)
 504fd60:	d9c01b04 	addi	r7,sp,108
 504fd64:	d80b883a 	mov	r5,sp
 504fd68:	00bfffc4 	movi	r2,-1
 504fd6c:	d8c00015 	stw	r3,0(sp)
 504fd70:	d8c00415 	stw	r3,16(sp)
 504fd74:	da00030d 	sth	r8,12(sp)
 504fd78:	d880038d 	sth	r2,14(sp)
 504fd7c:	504febc0 	call	504febc <___svfprintf_internal_r>
 504fd80:	d8c00017 	ldw	r3,0(sp)
 504fd84:	18000005 	stb	zero,0(r3)
 504fd88:	dfc01a17 	ldw	ra,104(sp)
 504fd8c:	dec01d04 	addi	sp,sp,116
 504fd90:	f800283a 	ret

0504fd94 <strcpy>:
 504fd94:	2906b03a 	or	r3,r5,r4
 504fd98:	18c000cc 	andi	r3,r3,3
 504fd9c:	2005883a 	mov	r2,r4
 504fda0:	1800161e 	bne	r3,zero,504fdfc <strcpy+0x68>
 504fda4:	29c00017 	ldw	r7,0(r5)
 504fda8:	02ffbff4 	movhi	r11,65279
 504fdac:	5affbfc4 	addi	r11,r11,-257
 504fdb0:	02a02074 	movhi	r10,32897
 504fdb4:	01c6303a 	nor	r3,zero,r7
 504fdb8:	3ac9883a 	add	r4,r7,r11
 504fdbc:	52a02004 	addi	r10,r10,-32640
 504fdc0:	20c6703a 	and	r3,r4,r3
 504fdc4:	1a86703a 	and	r3,r3,r10
 504fdc8:	18000c1e 	bne	r3,zero,504fdfc <strcpy+0x68>
 504fdcc:	1011883a 	mov	r8,r2
 504fdd0:	41c00015 	stw	r7,0(r8)
 504fdd4:	29400104 	addi	r5,r5,4
 504fdd8:	29c00017 	ldw	r7,0(r5)
 504fddc:	41800104 	addi	r6,r8,4
 504fde0:	3011883a 	mov	r8,r6
 504fde4:	3ad3883a 	add	r9,r7,r11
 504fde8:	01c6303a 	nor	r3,zero,r7
 504fdec:	48c6703a 	and	r3,r9,r3
 504fdf0:	1a86703a 	and	r3,r3,r10
 504fdf4:	183ff626 	beq	r3,zero,504fdd0 <_gp+0xfffe49a8>
 504fdf8:	00000106 	br	504fe00 <strcpy+0x6c>
 504fdfc:	100d883a 	mov	r6,r2
 504fe00:	28c00003 	ldbu	r3,0(r5)
 504fe04:	31800044 	addi	r6,r6,1
 504fe08:	29400044 	addi	r5,r5,1
 504fe0c:	30ffffc5 	stb	r3,-1(r6)
 504fe10:	18c03fcc 	andi	r3,r3,255
 504fe14:	18c0201c 	xori	r3,r3,128
 504fe18:	18ffe004 	addi	r3,r3,-128
 504fe1c:	183ff81e 	bne	r3,zero,504fe00 <_gp+0xfffe49d8>
 504fe20:	f800283a 	ret

0504fe24 <strlen>:
 504fe24:	208000cc 	andi	r2,r4,3
 504fe28:	10002026 	beq	r2,zero,504feac <strlen+0x88>
 504fe2c:	20800007 	ldb	r2,0(r4)
 504fe30:	10002026 	beq	r2,zero,504feb4 <strlen+0x90>
 504fe34:	2005883a 	mov	r2,r4
 504fe38:	00000206 	br	504fe44 <strlen+0x20>
 504fe3c:	10c00007 	ldb	r3,0(r2)
 504fe40:	18001826 	beq	r3,zero,504fea4 <strlen+0x80>
 504fe44:	10800044 	addi	r2,r2,1
 504fe48:	10c000cc 	andi	r3,r2,3
 504fe4c:	183ffb1e 	bne	r3,zero,504fe3c <_gp+0xfffe4a14>
 504fe50:	10c00017 	ldw	r3,0(r2)
 504fe54:	01ffbff4 	movhi	r7,65279
 504fe58:	39ffbfc4 	addi	r7,r7,-257
 504fe5c:	00ca303a 	nor	r5,zero,r3
 504fe60:	01a02074 	movhi	r6,32897
 504fe64:	19c7883a 	add	r3,r3,r7
 504fe68:	31a02004 	addi	r6,r6,-32640
 504fe6c:	1946703a 	and	r3,r3,r5
 504fe70:	1986703a 	and	r3,r3,r6
 504fe74:	1800091e 	bne	r3,zero,504fe9c <strlen+0x78>
 504fe78:	10800104 	addi	r2,r2,4
 504fe7c:	10c00017 	ldw	r3,0(r2)
 504fe80:	19cb883a 	add	r5,r3,r7
 504fe84:	00c6303a 	nor	r3,zero,r3
 504fe88:	28c6703a 	and	r3,r5,r3
 504fe8c:	1986703a 	and	r3,r3,r6
 504fe90:	183ff926 	beq	r3,zero,504fe78 <_gp+0xfffe4a50>
 504fe94:	00000106 	br	504fe9c <strlen+0x78>
 504fe98:	10800044 	addi	r2,r2,1
 504fe9c:	10c00007 	ldb	r3,0(r2)
 504fea0:	183ffd1e 	bne	r3,zero,504fe98 <_gp+0xfffe4a70>
 504fea4:	1105c83a 	sub	r2,r2,r4
 504fea8:	f800283a 	ret
 504feac:	2005883a 	mov	r2,r4
 504feb0:	003fe706 	br	504fe50 <_gp+0xfffe4a28>
 504feb4:	0005883a 	mov	r2,zero
 504feb8:	f800283a 	ret

0504febc <___svfprintf_internal_r>:
 504febc:	deffb704 	addi	sp,sp,-292
 504fec0:	dfc04815 	stw	ra,288(sp)
 504fec4:	ddc04615 	stw	r23,280(sp)
 504fec8:	d9402c15 	stw	r5,176(sp)
 504fecc:	d9003915 	stw	r4,228(sp)
 504fed0:	302f883a 	mov	r23,r6
 504fed4:	d9c02d15 	stw	r7,180(sp)
 504fed8:	df004715 	stw	fp,284(sp)
 504fedc:	dd804515 	stw	r22,276(sp)
 504fee0:	dd404415 	stw	r21,272(sp)
 504fee4:	dd004315 	stw	r20,268(sp)
 504fee8:	dcc04215 	stw	r19,264(sp)
 504feec:	dc804115 	stw	r18,260(sp)
 504fef0:	dc404015 	stw	r17,256(sp)
 504fef4:	dc003f15 	stw	r16,252(sp)
 504fef8:	5056fd00 	call	5056fd0 <_localeconv_r>
 504fefc:	10800017 	ldw	r2,0(r2)
 504ff00:	1009883a 	mov	r4,r2
 504ff04:	d8803415 	stw	r2,208(sp)
 504ff08:	504fe240 	call	504fe24 <strlen>
 504ff0c:	d8c02c17 	ldw	r3,176(sp)
 504ff10:	d8803815 	stw	r2,224(sp)
 504ff14:	1880030b 	ldhu	r2,12(r3)
 504ff18:	1080200c 	andi	r2,r2,128
 504ff1c:	10000226 	beq	r2,zero,504ff28 <___svfprintf_internal_r+0x6c>
 504ff20:	18800417 	ldw	r2,16(r3)
 504ff24:	10067f26 	beq	r2,zero,5051924 <___svfprintf_internal_r+0x1a68>
 504ff28:	dcc03917 	ldw	r19,228(sp)
 504ff2c:	d8c00404 	addi	r3,sp,16
 504ff30:	054141b4 	movhi	r21,1286
 504ff34:	d9001e04 	addi	r4,sp,120
 504ff38:	ad449484 	addi	r21,r21,4690
 504ff3c:	d8c01e15 	stw	r3,120(sp)
 504ff40:	d8002015 	stw	zero,128(sp)
 504ff44:	d8001f15 	stw	zero,124(sp)
 504ff48:	d8003315 	stw	zero,204(sp)
 504ff4c:	d8003615 	stw	zero,216(sp)
 504ff50:	d8003715 	stw	zero,220(sp)
 504ff54:	1811883a 	mov	r8,r3
 504ff58:	d8003a15 	stw	zero,232(sp)
 504ff5c:	d8003b15 	stw	zero,236(sp)
 504ff60:	d8002f15 	stw	zero,188(sp)
 504ff64:	d9002815 	stw	r4,160(sp)
 504ff68:	b8800007 	ldb	r2,0(r23)
 504ff6c:	10026726 	beq	r2,zero,505090c <___svfprintf_internal_r+0xa50>
 504ff70:	00c00944 	movi	r3,37
 504ff74:	b821883a 	mov	r16,r23
 504ff78:	10c0021e 	bne	r2,r3,504ff84 <___svfprintf_internal_r+0xc8>
 504ff7c:	00001406 	br	504ffd0 <___svfprintf_internal_r+0x114>
 504ff80:	10c00326 	beq	r2,r3,504ff90 <___svfprintf_internal_r+0xd4>
 504ff84:	84000044 	addi	r16,r16,1
 504ff88:	80800007 	ldb	r2,0(r16)
 504ff8c:	103ffc1e 	bne	r2,zero,504ff80 <_gp+0xfffe4b58>
 504ff90:	85e3c83a 	sub	r17,r16,r23
 504ff94:	88000e26 	beq	r17,zero,504ffd0 <___svfprintf_internal_r+0x114>
 504ff98:	d8c02017 	ldw	r3,128(sp)
 504ff9c:	d8801f17 	ldw	r2,124(sp)
 504ffa0:	45c00015 	stw	r23,0(r8)
 504ffa4:	1c47883a 	add	r3,r3,r17
 504ffa8:	10800044 	addi	r2,r2,1
 504ffac:	d8c02015 	stw	r3,128(sp)
 504ffb0:	44400115 	stw	r17,4(r8)
 504ffb4:	d8801f15 	stw	r2,124(sp)
 504ffb8:	00c001c4 	movi	r3,7
 504ffbc:	18809716 	blt	r3,r2,505021c <___svfprintf_internal_r+0x360>
 504ffc0:	42000204 	addi	r8,r8,8
 504ffc4:	d9402f17 	ldw	r5,188(sp)
 504ffc8:	2c4b883a 	add	r5,r5,r17
 504ffcc:	d9402f15 	stw	r5,188(sp)
 504ffd0:	80800007 	ldb	r2,0(r16)
 504ffd4:	10009826 	beq	r2,zero,5050238 <___svfprintf_internal_r+0x37c>
 504ffd8:	84400047 	ldb	r17,1(r16)
 504ffdc:	00bfffc4 	movi	r2,-1
 504ffe0:	85c00044 	addi	r23,r16,1
 504ffe4:	d8002785 	stb	zero,158(sp)
 504ffe8:	0007883a 	mov	r3,zero
 504ffec:	000f883a 	mov	r7,zero
 504fff0:	d8802915 	stw	r2,164(sp)
 504fff4:	d8003115 	stw	zero,196(sp)
 504fff8:	0025883a 	mov	r18,zero
 504fffc:	01401604 	movi	r5,88
 5050000:	01800244 	movi	r6,9
 5050004:	02800a84 	movi	r10,42
 5050008:	02401b04 	movi	r9,108
 505000c:	bdc00044 	addi	r23,r23,1
 5050010:	88bff804 	addi	r2,r17,-32
 5050014:	2882f036 	bltu	r5,r2,5050bd8 <___svfprintf_internal_r+0xd1c>
 5050018:	100490ba 	slli	r2,r2,2
 505001c:	01014174 	movhi	r4,1285
 5050020:	21000c04 	addi	r4,r4,48
 5050024:	1105883a 	add	r2,r2,r4
 5050028:	10800017 	ldw	r2,0(r2)
 505002c:	1000683a 	jmp	r2
 5050030:	05050b40 	call	5050b4 <__alt_mem_new_sdram_controller_0+0x5050b4>
 5050034:	05050bd8 	cmpnei	r20,zero,5167
 5050038:	05050bd8 	cmpnei	r20,zero,5167
 505003c:	05050b34 	movhi	r20,5164
 5050040:	05050bd8 	cmpnei	r20,zero,5167
 5050044:	05050bd8 	cmpnei	r20,zero,5167
 5050048:	05050bd8 	cmpnei	r20,zero,5167
 505004c:	05050bd8 	cmpnei	r20,zero,5167
 5050050:	05050bd8 	cmpnei	r20,zero,5167
 5050054:	05050bd8 	cmpnei	r20,zero,5167
 5050058:	05050294 	movui	r20,5130
 505005c:	05050a70 	cmpltui	r20,zero,5161
 5050060:	05050bd8 	cmpnei	r20,zero,5167
 5050064:	050501a4 	muli	r20,zero,5126
 5050068:	050502bc 	xorhi	r20,zero,5130
 505006c:	05050bd8 	cmpnei	r20,zero,5167
 5050070:	05050330 	cmpltui	r20,zero,5132
 5050074:	050502fc 	xorhi	r20,zero,5131
 5050078:	050502fc 	xorhi	r20,zero,5131
 505007c:	050502fc 	xorhi	r20,zero,5131
 5050080:	050502fc 	xorhi	r20,zero,5131
 5050084:	050502fc 	xorhi	r20,zero,5131
 5050088:	050502fc 	xorhi	r20,zero,5131
 505008c:	050502fc 	xorhi	r20,zero,5131
 5050090:	050502fc 	xorhi	r20,zero,5131
 5050094:	050502fc 	xorhi	r20,zero,5131
 5050098:	05050bd8 	cmpnei	r20,zero,5167
 505009c:	05050bd8 	cmpnei	r20,zero,5167
 50500a0:	05050bd8 	cmpnei	r20,zero,5167
 50500a4:	05050bd8 	cmpnei	r20,zero,5167
 50500a8:	05050bd8 	cmpnei	r20,zero,5167
 50500ac:	05050bd8 	cmpnei	r20,zero,5167
 50500b0:	05050bd8 	cmpnei	r20,zero,5167
 50500b4:	05050bd8 	cmpnei	r20,zero,5167
 50500b8:	05050bd8 	cmpnei	r20,zero,5167
 50500bc:	05050bd8 	cmpnei	r20,zero,5167
 50500c0:	050503e8 	cmpgeui	r20,zero,5135
 50500c4:	0505033c 	xorhi	r20,zero,5132
 50500c8:	05050bd8 	cmpnei	r20,zero,5167
 50500cc:	0505033c 	xorhi	r20,zero,5132
 50500d0:	05050bd8 	cmpnei	r20,zero,5167
 50500d4:	05050bd8 	cmpnei	r20,zero,5167
 50500d8:	05050bd8 	cmpnei	r20,zero,5167
 50500dc:	05050bd8 	cmpnei	r20,zero,5167
 50500e0:	050503dc 	xori	r20,zero,5135
 50500e4:	05050bd8 	cmpnei	r20,zero,5167
 50500e8:	05050bd8 	cmpnei	r20,zero,5167
 50500ec:	050504a4 	muli	r20,zero,5138
 50500f0:	05050bd8 	cmpnei	r20,zero,5167
 50500f4:	05050bd8 	cmpnei	r20,zero,5167
 50500f8:	05050bd8 	cmpnei	r20,zero,5167
 50500fc:	05050bd8 	cmpnei	r20,zero,5167
 5050100:	05050bd8 	cmpnei	r20,zero,5167
 5050104:	05050914 	movui	r20,5156
 5050108:	05050bd8 	cmpnei	r20,zero,5167
 505010c:	05050bd8 	cmpnei	r20,zero,5167
 5050110:	05050974 	movhi	r20,5157
 5050114:	05050bd8 	cmpnei	r20,zero,5167
 5050118:	05050bd8 	cmpnei	r20,zero,5167
 505011c:	05050bd8 	cmpnei	r20,zero,5167
 5050120:	05050bd8 	cmpnei	r20,zero,5167
 5050124:	05050bd8 	cmpnei	r20,zero,5167
 5050128:	05050bd8 	cmpnei	r20,zero,5167
 505012c:	05050bd8 	cmpnei	r20,zero,5167
 5050130:	05050bd8 	cmpnei	r20,zero,5167
 5050134:	05050bd8 	cmpnei	r20,zero,5167
 5050138:	05050bd8 	cmpnei	r20,zero,5167
 505013c:	05050a24 	muli	r20,zero,5160
 5050140:	05050b60 	cmpeqi	r20,zero,5165
 5050144:	0505033c 	xorhi	r20,zero,5132
 5050148:	0505033c 	xorhi	r20,zero,5132
 505014c:	0505033c 	xorhi	r20,zero,5132
 5050150:	05050bb4 	movhi	r20,5166
 5050154:	05050b60 	cmpeqi	r20,zero,5165
 5050158:	05050bd8 	cmpnei	r20,zero,5167
 505015c:	05050bd8 	cmpnei	r20,zero,5167
 5050160:	05050b70 	cmpltui	r20,zero,5165
 5050164:	05050bd8 	cmpnei	r20,zero,5167
 5050168:	05050b80 	call	5050b8 <__alt_mem_new_sdram_controller_0+0x5050b8>
 505016c:	05050a60 	cmpeqi	r20,zero,5161
 5050170:	050501b0 	cmpltui	r20,zero,5126
 5050174:	05050a80 	call	5050a8 <__alt_mem_new_sdram_controller_0+0x5050a8>
 5050178:	05050bd8 	cmpnei	r20,zero,5167
 505017c:	05050a8c 	andi	r20,zero,5162
 5050180:	05050bd8 	cmpnei	r20,zero,5167
 5050184:	05050ae8 	cmpgeui	r20,zero,5163
 5050188:	05050bd8 	cmpnei	r20,zero,5167
 505018c:	05050bd8 	cmpnei	r20,zero,5167
 5050190:	05050af8 	rdprs	r20,zero,5163
 5050194:	d9003117 	ldw	r4,196(sp)
 5050198:	d8802d15 	stw	r2,180(sp)
 505019c:	0109c83a 	sub	r4,zero,r4
 50501a0:	d9003115 	stw	r4,196(sp)
 50501a4:	94800114 	ori	r18,r18,4
 50501a8:	bc400007 	ldb	r17,0(r23)
 50501ac:	003f9706 	br	505000c <_gp+0xfffe4be4>
 50501b0:	00800c04 	movi	r2,48
 50501b4:	d9002d17 	ldw	r4,180(sp)
 50501b8:	d9402917 	ldw	r5,164(sp)
 50501bc:	d8802705 	stb	r2,156(sp)
 50501c0:	00801e04 	movi	r2,120
 50501c4:	d8802745 	stb	r2,157(sp)
 50501c8:	d8002785 	stb	zero,158(sp)
 50501cc:	20c00104 	addi	r3,r4,4
 50501d0:	25000017 	ldw	r20,0(r4)
 50501d4:	002d883a 	mov	r22,zero
 50501d8:	90800094 	ori	r2,r18,2
 50501dc:	28028616 	blt	r5,zero,5050bf8 <___svfprintf_internal_r+0xd3c>
 50501e0:	00bfdfc4 	movi	r2,-129
 50501e4:	90a4703a 	and	r18,r18,r2
 50501e8:	d8c02d15 	stw	r3,180(sp)
 50501ec:	94800094 	ori	r18,r18,2
 50501f0:	a002731e 	bne	r20,zero,5050bc0 <___svfprintf_internal_r+0xd04>
 50501f4:	008141b4 	movhi	r2,1286
 50501f8:	10848d04 	addi	r2,r2,4660
 50501fc:	d8803a15 	stw	r2,232(sp)
 5050200:	04401e04 	movi	r17,120
 5050204:	d8c02917 	ldw	r3,164(sp)
 5050208:	0039883a 	mov	fp,zero
 505020c:	1801d526 	beq	r3,zero,5050964 <___svfprintf_internal_r+0xaa8>
 5050210:	0029883a 	mov	r20,zero
 5050214:	002d883a 	mov	r22,zero
 5050218:	0001f106 	br	50509e0 <___svfprintf_internal_r+0xb24>
 505021c:	d9402c17 	ldw	r5,176(sp)
 5050220:	d9801e04 	addi	r6,sp,120
 5050224:	9809883a 	mov	r4,r19
 5050228:	5058be80 	call	5058be8 <__ssprint_r>
 505022c:	1000081e 	bne	r2,zero,5050250 <___svfprintf_internal_r+0x394>
 5050230:	da000404 	addi	r8,sp,16
 5050234:	003f6306 	br	504ffc4 <_gp+0xfffe4b9c>
 5050238:	d8802017 	ldw	r2,128(sp)
 505023c:	10000426 	beq	r2,zero,5050250 <___svfprintf_internal_r+0x394>
 5050240:	d9402c17 	ldw	r5,176(sp)
 5050244:	d9003917 	ldw	r4,228(sp)
 5050248:	d9801e04 	addi	r6,sp,120
 505024c:	5058be80 	call	5058be8 <__ssprint_r>
 5050250:	d8802c17 	ldw	r2,176(sp)
 5050254:	10c0030b 	ldhu	r3,12(r2)
 5050258:	d8802f17 	ldw	r2,188(sp)
 505025c:	18c0100c 	andi	r3,r3,64
 5050260:	1805f51e 	bne	r3,zero,5051a38 <___svfprintf_internal_r+0x1b7c>
 5050264:	dfc04817 	ldw	ra,288(sp)
 5050268:	df004717 	ldw	fp,284(sp)
 505026c:	ddc04617 	ldw	r23,280(sp)
 5050270:	dd804517 	ldw	r22,276(sp)
 5050274:	dd404417 	ldw	r21,272(sp)
 5050278:	dd004317 	ldw	r20,268(sp)
 505027c:	dcc04217 	ldw	r19,264(sp)
 5050280:	dc804117 	ldw	r18,260(sp)
 5050284:	dc404017 	ldw	r17,256(sp)
 5050288:	dc003f17 	ldw	r16,252(sp)
 505028c:	dec04904 	addi	sp,sp,292
 5050290:	f800283a 	ret
 5050294:	d8802d17 	ldw	r2,180(sp)
 5050298:	d9002d17 	ldw	r4,180(sp)
 505029c:	10800017 	ldw	r2,0(r2)
 50502a0:	d8803115 	stw	r2,196(sp)
 50502a4:	20800104 	addi	r2,r4,4
 50502a8:	d9003117 	ldw	r4,196(sp)
 50502ac:	203fb916 	blt	r4,zero,5050194 <_gp+0xfffe4d6c>
 50502b0:	d8802d15 	stw	r2,180(sp)
 50502b4:	bc400007 	ldb	r17,0(r23)
 50502b8:	003f5406 	br	505000c <_gp+0xfffe4be4>
 50502bc:	bc400007 	ldb	r17,0(r23)
 50502c0:	bac00044 	addi	r11,r23,1
 50502c4:	8a873926 	beq	r17,r10,5051fac <___svfprintf_internal_r+0x20f0>
 50502c8:	88bff404 	addi	r2,r17,-48
 50502cc:	0009883a 	mov	r4,zero
 50502d0:	30868836 	bltu	r6,r2,5051cf4 <___svfprintf_internal_r+0x1e38>
 50502d4:	5c400007 	ldb	r17,0(r11)
 50502d8:	210002a4 	muli	r4,r4,10
 50502dc:	5dc00044 	addi	r23,r11,1
 50502e0:	b817883a 	mov	r11,r23
 50502e4:	2089883a 	add	r4,r4,r2
 50502e8:	88bff404 	addi	r2,r17,-48
 50502ec:	30bff92e 	bgeu	r6,r2,50502d4 <_gp+0xfffe4eac>
 50502f0:	2005d716 	blt	r4,zero,5051a50 <___svfprintf_internal_r+0x1b94>
 50502f4:	d9002915 	stw	r4,164(sp)
 50502f8:	003f4506 	br	5050010 <_gp+0xfffe4be8>
 50502fc:	b809883a 	mov	r4,r23
 5050300:	d8003115 	stw	zero,196(sp)
 5050304:	88bff404 	addi	r2,r17,-48
 5050308:	0017883a 	mov	r11,zero
 505030c:	24400007 	ldb	r17,0(r4)
 5050310:	5ac002a4 	muli	r11,r11,10
 5050314:	bdc00044 	addi	r23,r23,1
 5050318:	b809883a 	mov	r4,r23
 505031c:	12d7883a 	add	r11,r2,r11
 5050320:	88bff404 	addi	r2,r17,-48
 5050324:	30bff92e 	bgeu	r6,r2,505030c <_gp+0xfffe4ee4>
 5050328:	dac03115 	stw	r11,196(sp)
 505032c:	003f3806 	br	5050010 <_gp+0xfffe4be8>
 5050330:	94802014 	ori	r18,r18,128
 5050334:	bc400007 	ldb	r17,0(r23)
 5050338:	003f3406 	br	505000c <_gp+0xfffe4be4>
 505033c:	18c03fcc 	andi	r3,r3,255
 5050340:	1807471e 	bne	r3,zero,5052060 <___svfprintf_internal_r+0x21a4>
 5050344:	9080020c 	andi	r2,r18,8
 5050348:	10047d26 	beq	r2,zero,5051540 <___svfprintf_internal_r+0x1684>
 505034c:	d8c02d17 	ldw	r3,180(sp)
 5050350:	d9002d17 	ldw	r4,180(sp)
 5050354:	d9402d17 	ldw	r5,180(sp)
 5050358:	18c00017 	ldw	r3,0(r3)
 505035c:	21000117 	ldw	r4,4(r4)
 5050360:	29400204 	addi	r5,r5,8
 5050364:	d8c03615 	stw	r3,216(sp)
 5050368:	d9003715 	stw	r4,220(sp)
 505036c:	d9402d15 	stw	r5,180(sp)
 5050370:	d9003617 	ldw	r4,216(sp)
 5050374:	d9403717 	ldw	r5,220(sp)
 5050378:	da003e15 	stw	r8,248(sp)
 505037c:	04000044 	movi	r16,1
 5050380:	505895c0 	call	505895c <__fpclassifyd>
 5050384:	da003e17 	ldw	r8,248(sp)
 5050388:	14044b1e 	bne	r2,r16,50514b8 <___svfprintf_internal_r+0x15fc>
 505038c:	d9003617 	ldw	r4,216(sp)
 5050390:	d9403717 	ldw	r5,220(sp)
 5050394:	000d883a 	mov	r6,zero
 5050398:	000f883a 	mov	r7,zero
 505039c:	505ca200 	call	505ca20 <__ledf2>
 50503a0:	da003e17 	ldw	r8,248(sp)
 50503a4:	1005f316 	blt	r2,zero,5051b74 <___svfprintf_internal_r+0x1cb8>
 50503a8:	df002783 	ldbu	fp,158(sp)
 50503ac:	008011c4 	movi	r2,71
 50503b0:	1445590e 	bge	r2,r17,5051918 <___svfprintf_internal_r+0x1a5c>
 50503b4:	040141b4 	movhi	r16,1286
 50503b8:	84048504 	addi	r16,r16,4628
 50503bc:	00c000c4 	movi	r3,3
 50503c0:	00bfdfc4 	movi	r2,-129
 50503c4:	d8c02a15 	stw	r3,168(sp)
 50503c8:	90a4703a 	and	r18,r18,r2
 50503cc:	d8c02e15 	stw	r3,184(sp)
 50503d0:	d8002915 	stw	zero,164(sp)
 50503d4:	d8003215 	stw	zero,200(sp)
 50503d8:	00006606 	br	5050574 <___svfprintf_internal_r+0x6b8>
 50503dc:	94800214 	ori	r18,r18,8
 50503e0:	bc400007 	ldb	r17,0(r23)
 50503e4:	003f0906 	br	505000c <_gp+0xfffe4be4>
 50503e8:	18c03fcc 	andi	r3,r3,255
 50503ec:	1807181e 	bne	r3,zero,5052050 <___svfprintf_internal_r+0x2194>
 50503f0:	94800414 	ori	r18,r18,16
 50503f4:	9080080c 	andi	r2,r18,32
 50503f8:	10039626 	beq	r2,zero,5051254 <___svfprintf_internal_r+0x1398>
 50503fc:	d9402d17 	ldw	r5,180(sp)
 5050400:	28800117 	ldw	r2,4(r5)
 5050404:	2d000017 	ldw	r20,0(r5)
 5050408:	29400204 	addi	r5,r5,8
 505040c:	d9402d15 	stw	r5,180(sp)
 5050410:	102d883a 	mov	r22,r2
 5050414:	10039816 	blt	r2,zero,5051278 <___svfprintf_internal_r+0x13bc>
 5050418:	d9402917 	ldw	r5,164(sp)
 505041c:	df002783 	ldbu	fp,158(sp)
 5050420:	2803ab16 	blt	r5,zero,50512d0 <___svfprintf_internal_r+0x1414>
 5050424:	00ffdfc4 	movi	r3,-129
 5050428:	a584b03a 	or	r2,r20,r22
 505042c:	90e4703a 	and	r18,r18,r3
 5050430:	10014a26 	beq	r2,zero,505095c <___svfprintf_internal_r+0xaa0>
 5050434:	b0034b26 	beq	r22,zero,5051164 <___svfprintf_internal_r+0x12a8>
 5050438:	dc402a15 	stw	r17,168(sp)
 505043c:	dc001e04 	addi	r16,sp,120
 5050440:	b023883a 	mov	r17,r22
 5050444:	402d883a 	mov	r22,r8
 5050448:	a009883a 	mov	r4,r20
 505044c:	880b883a 	mov	r5,r17
 5050450:	01800284 	movi	r6,10
 5050454:	000f883a 	mov	r7,zero
 5050458:	505c4e80 	call	505c4e8 <__umoddi3>
 505045c:	10800c04 	addi	r2,r2,48
 5050460:	843fffc4 	addi	r16,r16,-1
 5050464:	a009883a 	mov	r4,r20
 5050468:	880b883a 	mov	r5,r17
 505046c:	80800005 	stb	r2,0(r16)
 5050470:	01800284 	movi	r6,10
 5050474:	000f883a 	mov	r7,zero
 5050478:	505bf700 	call	505bf70 <__udivdi3>
 505047c:	1029883a 	mov	r20,r2
 5050480:	10c4b03a 	or	r2,r2,r3
 5050484:	1823883a 	mov	r17,r3
 5050488:	103fef1e 	bne	r2,zero,5050448 <_gp+0xfffe5020>
 505048c:	d8c02817 	ldw	r3,160(sp)
 5050490:	dc402a17 	ldw	r17,168(sp)
 5050494:	b011883a 	mov	r8,r22
 5050498:	1c07c83a 	sub	r3,r3,r16
 505049c:	d8c02e15 	stw	r3,184(sp)
 50504a0:	00002e06 	br	505055c <___svfprintf_internal_r+0x6a0>
 50504a4:	18c03fcc 	andi	r3,r3,255
 50504a8:	1806e71e 	bne	r3,zero,5052048 <___svfprintf_internal_r+0x218c>
 50504ac:	94800414 	ori	r18,r18,16
 50504b0:	9080080c 	andi	r2,r18,32
 50504b4:	1002d426 	beq	r2,zero,5051008 <___svfprintf_internal_r+0x114c>
 50504b8:	d9402d17 	ldw	r5,180(sp)
 50504bc:	d8c02917 	ldw	r3,164(sp)
 50504c0:	d8002785 	stb	zero,158(sp)
 50504c4:	28800204 	addi	r2,r5,8
 50504c8:	2d000017 	ldw	r20,0(r5)
 50504cc:	2d800117 	ldw	r22,4(r5)
 50504d0:	18041516 	blt	r3,zero,5051528 <___svfprintf_internal_r+0x166c>
 50504d4:	013fdfc4 	movi	r4,-129
 50504d8:	a586b03a 	or	r3,r20,r22
 50504dc:	d8802d15 	stw	r2,180(sp)
 50504e0:	9124703a 	and	r18,r18,r4
 50504e4:	1802d51e 	bne	r3,zero,505103c <___svfprintf_internal_r+0x1180>
 50504e8:	d9402917 	ldw	r5,164(sp)
 50504ec:	0039883a 	mov	fp,zero
 50504f0:	2806be26 	beq	r5,zero,5051fec <___svfprintf_internal_r+0x2130>
 50504f4:	0029883a 	mov	r20,zero
 50504f8:	002d883a 	mov	r22,zero
 50504fc:	dc001e04 	addi	r16,sp,120
 5050500:	a006d0fa 	srli	r3,r20,3
 5050504:	b008977a 	slli	r4,r22,29
 5050508:	b02cd0fa 	srli	r22,r22,3
 505050c:	a50001cc 	andi	r20,r20,7
 5050510:	a0800c04 	addi	r2,r20,48
 5050514:	843fffc4 	addi	r16,r16,-1
 5050518:	20e8b03a 	or	r20,r4,r3
 505051c:	80800005 	stb	r2,0(r16)
 5050520:	a586b03a 	or	r3,r20,r22
 5050524:	183ff61e 	bne	r3,zero,5050500 <_gp+0xfffe50d8>
 5050528:	90c0004c 	andi	r3,r18,1
 505052c:	18013926 	beq	r3,zero,5050a14 <___svfprintf_internal_r+0xb58>
 5050530:	10803fcc 	andi	r2,r2,255
 5050534:	1080201c 	xori	r2,r2,128
 5050538:	10bfe004 	addi	r2,r2,-128
 505053c:	00c00c04 	movi	r3,48
 5050540:	10c13426 	beq	r2,r3,5050a14 <___svfprintf_internal_r+0xb58>
 5050544:	80ffffc5 	stb	r3,-1(r16)
 5050548:	d8c02817 	ldw	r3,160(sp)
 505054c:	80bfffc4 	addi	r2,r16,-1
 5050550:	1021883a 	mov	r16,r2
 5050554:	1887c83a 	sub	r3,r3,r2
 5050558:	d8c02e15 	stw	r3,184(sp)
 505055c:	d8802e17 	ldw	r2,184(sp)
 5050560:	d9002917 	ldw	r4,164(sp)
 5050564:	1100010e 	bge	r2,r4,505056c <___svfprintf_internal_r+0x6b0>
 5050568:	2005883a 	mov	r2,r4
 505056c:	d8802a15 	stw	r2,168(sp)
 5050570:	d8003215 	stw	zero,200(sp)
 5050574:	e7003fcc 	andi	fp,fp,255
 5050578:	e700201c 	xori	fp,fp,128
 505057c:	e73fe004 	addi	fp,fp,-128
 5050580:	e0000326 	beq	fp,zero,5050590 <___svfprintf_internal_r+0x6d4>
 5050584:	d8c02a17 	ldw	r3,168(sp)
 5050588:	18c00044 	addi	r3,r3,1
 505058c:	d8c02a15 	stw	r3,168(sp)
 5050590:	90c0008c 	andi	r3,r18,2
 5050594:	d8c02b15 	stw	r3,172(sp)
 5050598:	18000326 	beq	r3,zero,50505a8 <___svfprintf_internal_r+0x6ec>
 505059c:	d8c02a17 	ldw	r3,168(sp)
 50505a0:	18c00084 	addi	r3,r3,2
 50505a4:	d8c02a15 	stw	r3,168(sp)
 50505a8:	90c0210c 	andi	r3,r18,132
 50505ac:	d8c03015 	stw	r3,192(sp)
 50505b0:	1801a11e 	bne	r3,zero,5050c38 <___svfprintf_internal_r+0xd7c>
 50505b4:	d9003117 	ldw	r4,196(sp)
 50505b8:	d8c02a17 	ldw	r3,168(sp)
 50505bc:	20e9c83a 	sub	r20,r4,r3
 50505c0:	05019d0e 	bge	zero,r20,5050c38 <___svfprintf_internal_r+0xd7c>
 50505c4:	02400404 	movi	r9,16
 50505c8:	d8c02017 	ldw	r3,128(sp)
 50505cc:	d8801f17 	ldw	r2,124(sp)
 50505d0:	4d051b0e 	bge	r9,r20,5051a40 <___svfprintf_internal_r+0x1b84>
 50505d4:	014141b4 	movhi	r5,1286
 50505d8:	29449884 	addi	r5,r5,4706
 50505dc:	dc403c15 	stw	r17,240(sp)
 50505e0:	d9403515 	stw	r5,212(sp)
 50505e4:	a023883a 	mov	r17,r20
 50505e8:	482d883a 	mov	r22,r9
 50505ec:	9029883a 	mov	r20,r18
 50505f0:	070001c4 	movi	fp,7
 50505f4:	8025883a 	mov	r18,r16
 50505f8:	dc002c17 	ldw	r16,176(sp)
 50505fc:	00000306 	br	505060c <___svfprintf_internal_r+0x750>
 5050600:	8c7ffc04 	addi	r17,r17,-16
 5050604:	42000204 	addi	r8,r8,8
 5050608:	b440130e 	bge	r22,r17,5050658 <___svfprintf_internal_r+0x79c>
 505060c:	010141b4 	movhi	r4,1286
 5050610:	18c00404 	addi	r3,r3,16
 5050614:	10800044 	addi	r2,r2,1
 5050618:	21049884 	addi	r4,r4,4706
 505061c:	41000015 	stw	r4,0(r8)
 5050620:	45800115 	stw	r22,4(r8)
 5050624:	d8c02015 	stw	r3,128(sp)
 5050628:	d8801f15 	stw	r2,124(sp)
 505062c:	e0bff40e 	bge	fp,r2,5050600 <_gp+0xfffe51d8>
 5050630:	d9801e04 	addi	r6,sp,120
 5050634:	800b883a 	mov	r5,r16
 5050638:	9809883a 	mov	r4,r19
 505063c:	5058be80 	call	5058be8 <__ssprint_r>
 5050640:	103f031e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050644:	8c7ffc04 	addi	r17,r17,-16
 5050648:	d8c02017 	ldw	r3,128(sp)
 505064c:	d8801f17 	ldw	r2,124(sp)
 5050650:	da000404 	addi	r8,sp,16
 5050654:	b47fed16 	blt	r22,r17,505060c <_gp+0xfffe51e4>
 5050658:	9021883a 	mov	r16,r18
 505065c:	a025883a 	mov	r18,r20
 5050660:	8829883a 	mov	r20,r17
 5050664:	dc403c17 	ldw	r17,240(sp)
 5050668:	d9403517 	ldw	r5,212(sp)
 505066c:	a0c7883a 	add	r3,r20,r3
 5050670:	10800044 	addi	r2,r2,1
 5050674:	41400015 	stw	r5,0(r8)
 5050678:	45000115 	stw	r20,4(r8)
 505067c:	d8c02015 	stw	r3,128(sp)
 5050680:	d8801f15 	stw	r2,124(sp)
 5050684:	010001c4 	movi	r4,7
 5050688:	20829f16 	blt	r4,r2,5051108 <___svfprintf_internal_r+0x124c>
 505068c:	df002787 	ldb	fp,158(sp)
 5050690:	42000204 	addi	r8,r8,8
 5050694:	e0000c26 	beq	fp,zero,50506c8 <___svfprintf_internal_r+0x80c>
 5050698:	d8801f17 	ldw	r2,124(sp)
 505069c:	d9002784 	addi	r4,sp,158
 50506a0:	18c00044 	addi	r3,r3,1
 50506a4:	10800044 	addi	r2,r2,1
 50506a8:	41000015 	stw	r4,0(r8)
 50506ac:	01000044 	movi	r4,1
 50506b0:	41000115 	stw	r4,4(r8)
 50506b4:	d8c02015 	stw	r3,128(sp)
 50506b8:	d8801f15 	stw	r2,124(sp)
 50506bc:	010001c4 	movi	r4,7
 50506c0:	20823816 	blt	r4,r2,5050fa4 <___svfprintf_internal_r+0x10e8>
 50506c4:	42000204 	addi	r8,r8,8
 50506c8:	d8802b17 	ldw	r2,172(sp)
 50506cc:	10000c26 	beq	r2,zero,5050700 <___svfprintf_internal_r+0x844>
 50506d0:	d8801f17 	ldw	r2,124(sp)
 50506d4:	d9002704 	addi	r4,sp,156
 50506d8:	18c00084 	addi	r3,r3,2
 50506dc:	10800044 	addi	r2,r2,1
 50506e0:	41000015 	stw	r4,0(r8)
 50506e4:	01000084 	movi	r4,2
 50506e8:	41000115 	stw	r4,4(r8)
 50506ec:	d8c02015 	stw	r3,128(sp)
 50506f0:	d8801f15 	stw	r2,124(sp)
 50506f4:	010001c4 	movi	r4,7
 50506f8:	20823216 	blt	r4,r2,5050fc4 <___svfprintf_internal_r+0x1108>
 50506fc:	42000204 	addi	r8,r8,8
 5050700:	d9003017 	ldw	r4,192(sp)
 5050704:	00802004 	movi	r2,128
 5050708:	20819726 	beq	r4,r2,5050d68 <___svfprintf_internal_r+0xeac>
 505070c:	d9402917 	ldw	r5,164(sp)
 5050710:	d8802e17 	ldw	r2,184(sp)
 5050714:	28adc83a 	sub	r22,r5,r2
 5050718:	05802f0e 	bge	zero,r22,50507d8 <___svfprintf_internal_r+0x91c>
 505071c:	07000404 	movi	fp,16
 5050720:	d8801f17 	ldw	r2,124(sp)
 5050724:	e583c00e 	bge	fp,r22,5051628 <___svfprintf_internal_r+0x176c>
 5050728:	014141b4 	movhi	r5,1286
 505072c:	29449484 	addi	r5,r5,4690
 5050730:	dc402915 	stw	r17,164(sp)
 5050734:	d9402b15 	stw	r5,172(sp)
 5050738:	b023883a 	mov	r17,r22
 505073c:	050001c4 	movi	r20,7
 5050740:	902d883a 	mov	r22,r18
 5050744:	8025883a 	mov	r18,r16
 5050748:	dc002c17 	ldw	r16,176(sp)
 505074c:	00000306 	br	505075c <___svfprintf_internal_r+0x8a0>
 5050750:	8c7ffc04 	addi	r17,r17,-16
 5050754:	42000204 	addi	r8,r8,8
 5050758:	e440110e 	bge	fp,r17,50507a0 <___svfprintf_internal_r+0x8e4>
 505075c:	18c00404 	addi	r3,r3,16
 5050760:	10800044 	addi	r2,r2,1
 5050764:	45400015 	stw	r21,0(r8)
 5050768:	47000115 	stw	fp,4(r8)
 505076c:	d8c02015 	stw	r3,128(sp)
 5050770:	d8801f15 	stw	r2,124(sp)
 5050774:	a0bff60e 	bge	r20,r2,5050750 <_gp+0xfffe5328>
 5050778:	d9801e04 	addi	r6,sp,120
 505077c:	800b883a 	mov	r5,r16
 5050780:	9809883a 	mov	r4,r19
 5050784:	5058be80 	call	5058be8 <__ssprint_r>
 5050788:	103eb11e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 505078c:	8c7ffc04 	addi	r17,r17,-16
 5050790:	d8c02017 	ldw	r3,128(sp)
 5050794:	d8801f17 	ldw	r2,124(sp)
 5050798:	da000404 	addi	r8,sp,16
 505079c:	e47fef16 	blt	fp,r17,505075c <_gp+0xfffe5334>
 50507a0:	9021883a 	mov	r16,r18
 50507a4:	b025883a 	mov	r18,r22
 50507a8:	882d883a 	mov	r22,r17
 50507ac:	dc402917 	ldw	r17,164(sp)
 50507b0:	d9002b17 	ldw	r4,172(sp)
 50507b4:	1d87883a 	add	r3,r3,r22
 50507b8:	10800044 	addi	r2,r2,1
 50507bc:	41000015 	stw	r4,0(r8)
 50507c0:	45800115 	stw	r22,4(r8)
 50507c4:	d8c02015 	stw	r3,128(sp)
 50507c8:	d8801f15 	stw	r2,124(sp)
 50507cc:	010001c4 	movi	r4,7
 50507d0:	2081ec16 	blt	r4,r2,5050f84 <___svfprintf_internal_r+0x10c8>
 50507d4:	42000204 	addi	r8,r8,8
 50507d8:	9080400c 	andi	r2,r18,256
 50507dc:	1001181e 	bne	r2,zero,5050c40 <___svfprintf_internal_r+0xd84>
 50507e0:	d9402e17 	ldw	r5,184(sp)
 50507e4:	d8801f17 	ldw	r2,124(sp)
 50507e8:	44000015 	stw	r16,0(r8)
 50507ec:	1947883a 	add	r3,r3,r5
 50507f0:	10800044 	addi	r2,r2,1
 50507f4:	41400115 	stw	r5,4(r8)
 50507f8:	d8c02015 	stw	r3,128(sp)
 50507fc:	d8801f15 	stw	r2,124(sp)
 5050800:	010001c4 	movi	r4,7
 5050804:	2081d116 	blt	r4,r2,5050f4c <___svfprintf_internal_r+0x1090>
 5050808:	42000204 	addi	r8,r8,8
 505080c:	9480010c 	andi	r18,r18,4
 5050810:	90003226 	beq	r18,zero,50508dc <___svfprintf_internal_r+0xa20>
 5050814:	d9403117 	ldw	r5,196(sp)
 5050818:	d8802a17 	ldw	r2,168(sp)
 505081c:	28a1c83a 	sub	r16,r5,r2
 5050820:	04002e0e 	bge	zero,r16,50508dc <___svfprintf_internal_r+0xa20>
 5050824:	04400404 	movi	r17,16
 5050828:	d8801f17 	ldw	r2,124(sp)
 505082c:	8c04b90e 	bge	r17,r16,5051b14 <___svfprintf_internal_r+0x1c58>
 5050830:	014141b4 	movhi	r5,1286
 5050834:	29449884 	addi	r5,r5,4706
 5050838:	d9403515 	stw	r5,212(sp)
 505083c:	048001c4 	movi	r18,7
 5050840:	dd002c17 	ldw	r20,176(sp)
 5050844:	00000306 	br	5050854 <___svfprintf_internal_r+0x998>
 5050848:	843ffc04 	addi	r16,r16,-16
 505084c:	42000204 	addi	r8,r8,8
 5050850:	8c00130e 	bge	r17,r16,50508a0 <___svfprintf_internal_r+0x9e4>
 5050854:	010141b4 	movhi	r4,1286
 5050858:	18c00404 	addi	r3,r3,16
 505085c:	10800044 	addi	r2,r2,1
 5050860:	21049884 	addi	r4,r4,4706
 5050864:	41000015 	stw	r4,0(r8)
 5050868:	44400115 	stw	r17,4(r8)
 505086c:	d8c02015 	stw	r3,128(sp)
 5050870:	d8801f15 	stw	r2,124(sp)
 5050874:	90bff40e 	bge	r18,r2,5050848 <_gp+0xfffe5420>
 5050878:	d9801e04 	addi	r6,sp,120
 505087c:	a00b883a 	mov	r5,r20
 5050880:	9809883a 	mov	r4,r19
 5050884:	5058be80 	call	5058be8 <__ssprint_r>
 5050888:	103e711e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 505088c:	843ffc04 	addi	r16,r16,-16
 5050890:	d8c02017 	ldw	r3,128(sp)
 5050894:	d8801f17 	ldw	r2,124(sp)
 5050898:	da000404 	addi	r8,sp,16
 505089c:	8c3fed16 	blt	r17,r16,5050854 <_gp+0xfffe542c>
 50508a0:	d9403517 	ldw	r5,212(sp)
 50508a4:	1c07883a 	add	r3,r3,r16
 50508a8:	10800044 	addi	r2,r2,1
 50508ac:	41400015 	stw	r5,0(r8)
 50508b0:	44000115 	stw	r16,4(r8)
 50508b4:	d8c02015 	stw	r3,128(sp)
 50508b8:	d8801f15 	stw	r2,124(sp)
 50508bc:	010001c4 	movi	r4,7
 50508c0:	2080060e 	bge	r4,r2,50508dc <___svfprintf_internal_r+0xa20>
 50508c4:	d9402c17 	ldw	r5,176(sp)
 50508c8:	d9801e04 	addi	r6,sp,120
 50508cc:	9809883a 	mov	r4,r19
 50508d0:	5058be80 	call	5058be8 <__ssprint_r>
 50508d4:	103e5e1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50508d8:	d8c02017 	ldw	r3,128(sp)
 50508dc:	d8803117 	ldw	r2,196(sp)
 50508e0:	d9002a17 	ldw	r4,168(sp)
 50508e4:	1100010e 	bge	r2,r4,50508ec <___svfprintf_internal_r+0xa30>
 50508e8:	2005883a 	mov	r2,r4
 50508ec:	d9402f17 	ldw	r5,188(sp)
 50508f0:	288b883a 	add	r5,r5,r2
 50508f4:	d9402f15 	stw	r5,188(sp)
 50508f8:	18019c1e 	bne	r3,zero,5050f6c <___svfprintf_internal_r+0x10b0>
 50508fc:	b8800007 	ldb	r2,0(r23)
 5050900:	d8001f15 	stw	zero,124(sp)
 5050904:	da000404 	addi	r8,sp,16
 5050908:	103d991e 	bne	r2,zero,504ff70 <_gp+0xfffe4b48>
 505090c:	b821883a 	mov	r16,r23
 5050910:	003daf06 	br	504ffd0 <_gp+0xfffe4ba8>
 5050914:	18c03fcc 	andi	r3,r3,255
 5050918:	1805c71e 	bne	r3,zero,5052038 <___svfprintf_internal_r+0x217c>
 505091c:	94800414 	ori	r18,r18,16
 5050920:	9080080c 	andi	r2,r18,32
 5050924:	10020126 	beq	r2,zero,505112c <___svfprintf_internal_r+0x1270>
 5050928:	d8802d17 	ldw	r2,180(sp)
 505092c:	d9002917 	ldw	r4,164(sp)
 5050930:	d8002785 	stb	zero,158(sp)
 5050934:	10c00204 	addi	r3,r2,8
 5050938:	15000017 	ldw	r20,0(r2)
 505093c:	15800117 	ldw	r22,4(r2)
 5050940:	20038e16 	blt	r4,zero,505177c <___svfprintf_internal_r+0x18c0>
 5050944:	013fdfc4 	movi	r4,-129
 5050948:	a584b03a 	or	r2,r20,r22
 505094c:	d8c02d15 	stw	r3,180(sp)
 5050950:	9124703a 	and	r18,r18,r4
 5050954:	0039883a 	mov	fp,zero
 5050958:	103eb61e 	bne	r2,zero,5050434 <_gp+0xfffe500c>
 505095c:	d8802917 	ldw	r2,164(sp)
 5050960:	1002c81e 	bne	r2,zero,5051484 <___svfprintf_internal_r+0x15c8>
 5050964:	d8002915 	stw	zero,164(sp)
 5050968:	d8002e15 	stw	zero,184(sp)
 505096c:	dc001e04 	addi	r16,sp,120
 5050970:	003efa06 	br	505055c <_gp+0xfffe5134>
 5050974:	18c03fcc 	andi	r3,r3,255
 5050978:	1805ad1e 	bne	r3,zero,5052030 <___svfprintf_internal_r+0x2174>
 505097c:	014141b4 	movhi	r5,1286
 5050980:	29448804 	addi	r5,r5,4640
 5050984:	d9403a15 	stw	r5,232(sp)
 5050988:	9080080c 	andi	r2,r18,32
 505098c:	10006126 	beq	r2,zero,5050b14 <___svfprintf_internal_r+0xc58>
 5050990:	d8802d17 	ldw	r2,180(sp)
 5050994:	15000017 	ldw	r20,0(r2)
 5050998:	15800117 	ldw	r22,4(r2)
 505099c:	10800204 	addi	r2,r2,8
 50509a0:	d8802d15 	stw	r2,180(sp)
 50509a4:	9080004c 	andi	r2,r18,1
 50509a8:	10018e26 	beq	r2,zero,5050fe4 <___svfprintf_internal_r+0x1128>
 50509ac:	a584b03a 	or	r2,r20,r22
 50509b0:	10030926 	beq	r2,zero,50515d8 <___svfprintf_internal_r+0x171c>
 50509b4:	d8c02917 	ldw	r3,164(sp)
 50509b8:	00800c04 	movi	r2,48
 50509bc:	d8802705 	stb	r2,156(sp)
 50509c0:	dc402745 	stb	r17,157(sp)
 50509c4:	d8002785 	stb	zero,158(sp)
 50509c8:	90800094 	ori	r2,r18,2
 50509cc:	18048716 	blt	r3,zero,5051bec <___svfprintf_internal_r+0x1d30>
 50509d0:	00bfdfc4 	movi	r2,-129
 50509d4:	90a4703a 	and	r18,r18,r2
 50509d8:	94800094 	ori	r18,r18,2
 50509dc:	0039883a 	mov	fp,zero
 50509e0:	d9003a17 	ldw	r4,232(sp)
 50509e4:	dc001e04 	addi	r16,sp,120
 50509e8:	a08003cc 	andi	r2,r20,15
 50509ec:	b006973a 	slli	r3,r22,28
 50509f0:	2085883a 	add	r2,r4,r2
 50509f4:	a028d13a 	srli	r20,r20,4
 50509f8:	10800003 	ldbu	r2,0(r2)
 50509fc:	b02cd13a 	srli	r22,r22,4
 5050a00:	843fffc4 	addi	r16,r16,-1
 5050a04:	1d28b03a 	or	r20,r3,r20
 5050a08:	80800005 	stb	r2,0(r16)
 5050a0c:	a584b03a 	or	r2,r20,r22
 5050a10:	103ff51e 	bne	r2,zero,50509e8 <_gp+0xfffe55c0>
 5050a14:	d8c02817 	ldw	r3,160(sp)
 5050a18:	1c07c83a 	sub	r3,r3,r16
 5050a1c:	d8c02e15 	stw	r3,184(sp)
 5050a20:	003ece06 	br	505055c <_gp+0xfffe5134>
 5050a24:	d8c02d17 	ldw	r3,180(sp)
 5050a28:	d9002d17 	ldw	r4,180(sp)
 5050a2c:	d8002785 	stb	zero,158(sp)
 5050a30:	18800017 	ldw	r2,0(r3)
 5050a34:	21000104 	addi	r4,r4,4
 5050a38:	00c00044 	movi	r3,1
 5050a3c:	d8c02a15 	stw	r3,168(sp)
 5050a40:	d8801405 	stb	r2,80(sp)
 5050a44:	d9002d15 	stw	r4,180(sp)
 5050a48:	d8c02e15 	stw	r3,184(sp)
 5050a4c:	d8002915 	stw	zero,164(sp)
 5050a50:	d8003215 	stw	zero,200(sp)
 5050a54:	dc001404 	addi	r16,sp,80
 5050a58:	0039883a 	mov	fp,zero
 5050a5c:	003ecc06 	br	5050590 <_gp+0xfffe5168>
 5050a60:	18c03fcc 	andi	r3,r3,255
 5050a64:	183e9226 	beq	r3,zero,50504b0 <_gp+0xfffe5088>
 5050a68:	d9c02785 	stb	r7,158(sp)
 5050a6c:	003e9006 	br	50504b0 <_gp+0xfffe5088>
 5050a70:	00c00044 	movi	r3,1
 5050a74:	01c00ac4 	movi	r7,43
 5050a78:	bc400007 	ldb	r17,0(r23)
 5050a7c:	003d6306 	br	505000c <_gp+0xfffe4be4>
 5050a80:	94800814 	ori	r18,r18,32
 5050a84:	bc400007 	ldb	r17,0(r23)
 5050a88:	003d6006 	br	505000c <_gp+0xfffe4be4>
 5050a8c:	d8c02d17 	ldw	r3,180(sp)
 5050a90:	d8002785 	stb	zero,158(sp)
 5050a94:	1c000017 	ldw	r16,0(r3)
 5050a98:	1d000104 	addi	r20,r3,4
 5050a9c:	80040f26 	beq	r16,zero,5051adc <___svfprintf_internal_r+0x1c20>
 5050aa0:	d9002917 	ldw	r4,164(sp)
 5050aa4:	2003dc16 	blt	r4,zero,5051a18 <___svfprintf_internal_r+0x1b5c>
 5050aa8:	200d883a 	mov	r6,r4
 5050aac:	000b883a 	mov	r5,zero
 5050ab0:	8009883a 	mov	r4,r16
 5050ab4:	da003e15 	stw	r8,248(sp)
 5050ab8:	50571bc0 	call	50571bc <memchr>
 5050abc:	da003e17 	ldw	r8,248(sp)
 5050ac0:	10045826 	beq	r2,zero,5051c24 <___svfprintf_internal_r+0x1d68>
 5050ac4:	1405c83a 	sub	r2,r2,r16
 5050ac8:	d8802e15 	stw	r2,184(sp)
 5050acc:	1003d816 	blt	r2,zero,5051a30 <___svfprintf_internal_r+0x1b74>
 5050ad0:	df002783 	ldbu	fp,158(sp)
 5050ad4:	d8802a15 	stw	r2,168(sp)
 5050ad8:	dd002d15 	stw	r20,180(sp)
 5050adc:	d8002915 	stw	zero,164(sp)
 5050ae0:	d8003215 	stw	zero,200(sp)
 5050ae4:	003ea306 	br	5050574 <_gp+0xfffe514c>
 5050ae8:	18c03fcc 	andi	r3,r3,255
 5050aec:	183f8c26 	beq	r3,zero,5050920 <_gp+0xfffe54f8>
 5050af0:	d9c02785 	stb	r7,158(sp)
 5050af4:	003f8a06 	br	5050920 <_gp+0xfffe54f8>
 5050af8:	18c03fcc 	andi	r3,r3,255
 5050afc:	1805631e 	bne	r3,zero,505208c <___svfprintf_internal_r+0x21d0>
 5050b00:	014141b4 	movhi	r5,1286
 5050b04:	29448d04 	addi	r5,r5,4660
 5050b08:	d9403a15 	stw	r5,232(sp)
 5050b0c:	9080080c 	andi	r2,r18,32
 5050b10:	103f9f1e 	bne	r2,zero,5050990 <_gp+0xfffe5568>
 5050b14:	9080040c 	andi	r2,r18,16
 5050b18:	10029c26 	beq	r2,zero,505158c <___svfprintf_internal_r+0x16d0>
 5050b1c:	d8c02d17 	ldw	r3,180(sp)
 5050b20:	002d883a 	mov	r22,zero
 5050b24:	1d000017 	ldw	r20,0(r3)
 5050b28:	18c00104 	addi	r3,r3,4
 5050b2c:	d8c02d15 	stw	r3,180(sp)
 5050b30:	003f9c06 	br	50509a4 <_gp+0xfffe557c>
 5050b34:	94800054 	ori	r18,r18,1
 5050b38:	bc400007 	ldb	r17,0(r23)
 5050b3c:	003d3306 	br	505000c <_gp+0xfffe4be4>
 5050b40:	38803fcc 	andi	r2,r7,255
 5050b44:	1080201c 	xori	r2,r2,128
 5050b48:	10bfe004 	addi	r2,r2,-128
 5050b4c:	1002971e 	bne	r2,zero,50515ac <___svfprintf_internal_r+0x16f0>
 5050b50:	00c00044 	movi	r3,1
 5050b54:	01c00804 	movi	r7,32
 5050b58:	bc400007 	ldb	r17,0(r23)
 5050b5c:	003d2b06 	br	505000c <_gp+0xfffe4be4>
 5050b60:	18c03fcc 	andi	r3,r3,255
 5050b64:	183e2326 	beq	r3,zero,50503f4 <_gp+0xfffe4fcc>
 5050b68:	d9c02785 	stb	r7,158(sp)
 5050b6c:	003e2106 	br	50503f4 <_gp+0xfffe4fcc>
 5050b70:	bc400007 	ldb	r17,0(r23)
 5050b74:	8a430426 	beq	r17,r9,5051788 <___svfprintf_internal_r+0x18cc>
 5050b78:	94800414 	ori	r18,r18,16
 5050b7c:	003d2306 	br	505000c <_gp+0xfffe4be4>
 5050b80:	18c03fcc 	andi	r3,r3,255
 5050b84:	18053f1e 	bne	r3,zero,5052084 <___svfprintf_internal_r+0x21c8>
 5050b88:	9080080c 	andi	r2,r18,32
 5050b8c:	10028926 	beq	r2,zero,50515b4 <___svfprintf_internal_r+0x16f8>
 5050b90:	d9402d17 	ldw	r5,180(sp)
 5050b94:	d9002f17 	ldw	r4,188(sp)
 5050b98:	28800017 	ldw	r2,0(r5)
 5050b9c:	2007d7fa 	srai	r3,r4,31
 5050ba0:	29400104 	addi	r5,r5,4
 5050ba4:	d9402d15 	stw	r5,180(sp)
 5050ba8:	11000015 	stw	r4,0(r2)
 5050bac:	10c00115 	stw	r3,4(r2)
 5050bb0:	003ced06 	br	504ff68 <_gp+0xfffe4b40>
 5050bb4:	94801014 	ori	r18,r18,64
 5050bb8:	bc400007 	ldb	r17,0(r23)
 5050bbc:	003d1306 	br	505000c <_gp+0xfffe4be4>
 5050bc0:	010141b4 	movhi	r4,1286
 5050bc4:	21048d04 	addi	r4,r4,4660
 5050bc8:	0039883a 	mov	fp,zero
 5050bcc:	d9003a15 	stw	r4,232(sp)
 5050bd0:	04401e04 	movi	r17,120
 5050bd4:	003f8206 	br	50509e0 <_gp+0xfffe55b8>
 5050bd8:	18c03fcc 	andi	r3,r3,255
 5050bdc:	1805221e 	bne	r3,zero,5052068 <___svfprintf_internal_r+0x21ac>
 5050be0:	883d9526 	beq	r17,zero,5050238 <_gp+0xfffe4e10>
 5050be4:	00c00044 	movi	r3,1
 5050be8:	d8c02a15 	stw	r3,168(sp)
 5050bec:	dc401405 	stb	r17,80(sp)
 5050bf0:	d8002785 	stb	zero,158(sp)
 5050bf4:	003f9406 	br	5050a48 <_gp+0xfffe5620>
 5050bf8:	010141b4 	movhi	r4,1286
 5050bfc:	21048d04 	addi	r4,r4,4660
 5050c00:	d9003a15 	stw	r4,232(sp)
 5050c04:	d8c02d15 	stw	r3,180(sp)
 5050c08:	1025883a 	mov	r18,r2
 5050c0c:	04401e04 	movi	r17,120
 5050c10:	a584b03a 	or	r2,r20,r22
 5050c14:	1000fa1e 	bne	r2,zero,5051000 <___svfprintf_internal_r+0x1144>
 5050c18:	0039883a 	mov	fp,zero
 5050c1c:	00800084 	movi	r2,2
 5050c20:	10803fcc 	andi	r2,r2,255
 5050c24:	00c00044 	movi	r3,1
 5050c28:	10c21626 	beq	r2,r3,5051484 <___svfprintf_internal_r+0x15c8>
 5050c2c:	00c00084 	movi	r3,2
 5050c30:	10fe301e 	bne	r2,r3,50504f4 <_gp+0xfffe50cc>
 5050c34:	003d7606 	br	5050210 <_gp+0xfffe4de8>
 5050c38:	d8c02017 	ldw	r3,128(sp)
 5050c3c:	003e9506 	br	5050694 <_gp+0xfffe526c>
 5050c40:	00801944 	movi	r2,101
 5050c44:	14407c0e 	bge	r2,r17,5050e38 <___svfprintf_internal_r+0xf7c>
 5050c48:	d9003617 	ldw	r4,216(sp)
 5050c4c:	d9403717 	ldw	r5,220(sp)
 5050c50:	000d883a 	mov	r6,zero
 5050c54:	000f883a 	mov	r7,zero
 5050c58:	d8c03d15 	stw	r3,244(sp)
 5050c5c:	da003e15 	stw	r8,248(sp)
 5050c60:	504daa80 	call	504daa8 <__eqdf2>
 5050c64:	d8c03d17 	ldw	r3,244(sp)
 5050c68:	da003e17 	ldw	r8,248(sp)
 5050c6c:	1000f51e 	bne	r2,zero,5051044 <___svfprintf_internal_r+0x1188>
 5050c70:	d8801f17 	ldw	r2,124(sp)
 5050c74:	010141b4 	movhi	r4,1286
 5050c78:	21049404 	addi	r4,r4,4688
 5050c7c:	18c00044 	addi	r3,r3,1
 5050c80:	10800044 	addi	r2,r2,1
 5050c84:	41000015 	stw	r4,0(r8)
 5050c88:	01000044 	movi	r4,1
 5050c8c:	41000115 	stw	r4,4(r8)
 5050c90:	d8c02015 	stw	r3,128(sp)
 5050c94:	d8801f15 	stw	r2,124(sp)
 5050c98:	010001c4 	movi	r4,7
 5050c9c:	20826616 	blt	r4,r2,5051638 <___svfprintf_internal_r+0x177c>
 5050ca0:	42000204 	addi	r8,r8,8
 5050ca4:	d8802617 	ldw	r2,152(sp)
 5050ca8:	d9403317 	ldw	r5,204(sp)
 5050cac:	11400216 	blt	r2,r5,5050cb8 <___svfprintf_internal_r+0xdfc>
 5050cb0:	9080004c 	andi	r2,r18,1
 5050cb4:	103ed526 	beq	r2,zero,505080c <_gp+0xfffe53e4>
 5050cb8:	d8803817 	ldw	r2,224(sp)
 5050cbc:	d9003417 	ldw	r4,208(sp)
 5050cc0:	d9403817 	ldw	r5,224(sp)
 5050cc4:	1887883a 	add	r3,r3,r2
 5050cc8:	d8801f17 	ldw	r2,124(sp)
 5050ccc:	41000015 	stw	r4,0(r8)
 5050cd0:	41400115 	stw	r5,4(r8)
 5050cd4:	10800044 	addi	r2,r2,1
 5050cd8:	d8c02015 	stw	r3,128(sp)
 5050cdc:	d8801f15 	stw	r2,124(sp)
 5050ce0:	010001c4 	movi	r4,7
 5050ce4:	2082af16 	blt	r4,r2,50517a4 <___svfprintf_internal_r+0x18e8>
 5050ce8:	42000204 	addi	r8,r8,8
 5050cec:	d8803317 	ldw	r2,204(sp)
 5050cf0:	143fffc4 	addi	r16,r2,-1
 5050cf4:	043ec50e 	bge	zero,r16,505080c <_gp+0xfffe53e4>
 5050cf8:	04400404 	movi	r17,16
 5050cfc:	d8801f17 	ldw	r2,124(sp)
 5050d00:	8c00860e 	bge	r17,r16,5050f1c <___svfprintf_internal_r+0x1060>
 5050d04:	014141b4 	movhi	r5,1286
 5050d08:	29449484 	addi	r5,r5,4690
 5050d0c:	d9402b15 	stw	r5,172(sp)
 5050d10:	058001c4 	movi	r22,7
 5050d14:	dd002c17 	ldw	r20,176(sp)
 5050d18:	00000306 	br	5050d28 <___svfprintf_internal_r+0xe6c>
 5050d1c:	42000204 	addi	r8,r8,8
 5050d20:	843ffc04 	addi	r16,r16,-16
 5050d24:	8c00800e 	bge	r17,r16,5050f28 <___svfprintf_internal_r+0x106c>
 5050d28:	18c00404 	addi	r3,r3,16
 5050d2c:	10800044 	addi	r2,r2,1
 5050d30:	45400015 	stw	r21,0(r8)
 5050d34:	44400115 	stw	r17,4(r8)
 5050d38:	d8c02015 	stw	r3,128(sp)
 5050d3c:	d8801f15 	stw	r2,124(sp)
 5050d40:	b0bff60e 	bge	r22,r2,5050d1c <_gp+0xfffe58f4>
 5050d44:	d9801e04 	addi	r6,sp,120
 5050d48:	a00b883a 	mov	r5,r20
 5050d4c:	9809883a 	mov	r4,r19
 5050d50:	5058be80 	call	5058be8 <__ssprint_r>
 5050d54:	103d3e1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050d58:	d8c02017 	ldw	r3,128(sp)
 5050d5c:	d8801f17 	ldw	r2,124(sp)
 5050d60:	da000404 	addi	r8,sp,16
 5050d64:	003fee06 	br	5050d20 <_gp+0xfffe58f8>
 5050d68:	d9403117 	ldw	r5,196(sp)
 5050d6c:	d8802a17 	ldw	r2,168(sp)
 5050d70:	28adc83a 	sub	r22,r5,r2
 5050d74:	05be650e 	bge	zero,r22,505070c <_gp+0xfffe52e4>
 5050d78:	07000404 	movi	fp,16
 5050d7c:	d8801f17 	ldw	r2,124(sp)
 5050d80:	e583a20e 	bge	fp,r22,5051c0c <___svfprintf_internal_r+0x1d50>
 5050d84:	014141b4 	movhi	r5,1286
 5050d88:	29449484 	addi	r5,r5,4690
 5050d8c:	dc403015 	stw	r17,192(sp)
 5050d90:	d9402b15 	stw	r5,172(sp)
 5050d94:	b023883a 	mov	r17,r22
 5050d98:	050001c4 	movi	r20,7
 5050d9c:	902d883a 	mov	r22,r18
 5050da0:	8025883a 	mov	r18,r16
 5050da4:	dc002c17 	ldw	r16,176(sp)
 5050da8:	00000306 	br	5050db8 <___svfprintf_internal_r+0xefc>
 5050dac:	8c7ffc04 	addi	r17,r17,-16
 5050db0:	42000204 	addi	r8,r8,8
 5050db4:	e440110e 	bge	fp,r17,5050dfc <___svfprintf_internal_r+0xf40>
 5050db8:	18c00404 	addi	r3,r3,16
 5050dbc:	10800044 	addi	r2,r2,1
 5050dc0:	45400015 	stw	r21,0(r8)
 5050dc4:	47000115 	stw	fp,4(r8)
 5050dc8:	d8c02015 	stw	r3,128(sp)
 5050dcc:	d8801f15 	stw	r2,124(sp)
 5050dd0:	a0bff60e 	bge	r20,r2,5050dac <_gp+0xfffe5984>
 5050dd4:	d9801e04 	addi	r6,sp,120
 5050dd8:	800b883a 	mov	r5,r16
 5050ddc:	9809883a 	mov	r4,r19
 5050de0:	5058be80 	call	5058be8 <__ssprint_r>
 5050de4:	103d1a1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050de8:	8c7ffc04 	addi	r17,r17,-16
 5050dec:	d8c02017 	ldw	r3,128(sp)
 5050df0:	d8801f17 	ldw	r2,124(sp)
 5050df4:	da000404 	addi	r8,sp,16
 5050df8:	e47fef16 	blt	fp,r17,5050db8 <_gp+0xfffe5990>
 5050dfc:	9021883a 	mov	r16,r18
 5050e00:	b025883a 	mov	r18,r22
 5050e04:	882d883a 	mov	r22,r17
 5050e08:	dc403017 	ldw	r17,192(sp)
 5050e0c:	d9002b17 	ldw	r4,172(sp)
 5050e10:	1d87883a 	add	r3,r3,r22
 5050e14:	10800044 	addi	r2,r2,1
 5050e18:	41000015 	stw	r4,0(r8)
 5050e1c:	45800115 	stw	r22,4(r8)
 5050e20:	d8c02015 	stw	r3,128(sp)
 5050e24:	d8801f15 	stw	r2,124(sp)
 5050e28:	010001c4 	movi	r4,7
 5050e2c:	20819a16 	blt	r4,r2,5051498 <___svfprintf_internal_r+0x15dc>
 5050e30:	42000204 	addi	r8,r8,8
 5050e34:	003e3506 	br	505070c <_gp+0xfffe52e4>
 5050e38:	d9403317 	ldw	r5,204(sp)
 5050e3c:	00800044 	movi	r2,1
 5050e40:	18c00044 	addi	r3,r3,1
 5050e44:	1141710e 	bge	r2,r5,505140c <___svfprintf_internal_r+0x1550>
 5050e48:	dc401f17 	ldw	r17,124(sp)
 5050e4c:	00800044 	movi	r2,1
 5050e50:	40800115 	stw	r2,4(r8)
 5050e54:	8c400044 	addi	r17,r17,1
 5050e58:	44000015 	stw	r16,0(r8)
 5050e5c:	d8c02015 	stw	r3,128(sp)
 5050e60:	dc401f15 	stw	r17,124(sp)
 5050e64:	008001c4 	movi	r2,7
 5050e68:	14417416 	blt	r2,r17,505143c <___svfprintf_internal_r+0x1580>
 5050e6c:	42000204 	addi	r8,r8,8
 5050e70:	d8803817 	ldw	r2,224(sp)
 5050e74:	d9003417 	ldw	r4,208(sp)
 5050e78:	8c400044 	addi	r17,r17,1
 5050e7c:	10c7883a 	add	r3,r2,r3
 5050e80:	40800115 	stw	r2,4(r8)
 5050e84:	41000015 	stw	r4,0(r8)
 5050e88:	d8c02015 	stw	r3,128(sp)
 5050e8c:	dc401f15 	stw	r17,124(sp)
 5050e90:	008001c4 	movi	r2,7
 5050e94:	14417216 	blt	r2,r17,5051460 <___svfprintf_internal_r+0x15a4>
 5050e98:	45800204 	addi	r22,r8,8
 5050e9c:	d9003617 	ldw	r4,216(sp)
 5050ea0:	d9403717 	ldw	r5,220(sp)
 5050ea4:	000d883a 	mov	r6,zero
 5050ea8:	000f883a 	mov	r7,zero
 5050eac:	d8c03d15 	stw	r3,244(sp)
 5050eb0:	504daa80 	call	504daa8 <__eqdf2>
 5050eb4:	d8c03d17 	ldw	r3,244(sp)
 5050eb8:	1000b326 	beq	r2,zero,5051188 <___svfprintf_internal_r+0x12cc>
 5050ebc:	d9403317 	ldw	r5,204(sp)
 5050ec0:	84000044 	addi	r16,r16,1
 5050ec4:	8c400044 	addi	r17,r17,1
 5050ec8:	28bfffc4 	addi	r2,r5,-1
 5050ecc:	1887883a 	add	r3,r3,r2
 5050ed0:	b0800115 	stw	r2,4(r22)
 5050ed4:	b4000015 	stw	r16,0(r22)
 5050ed8:	d8c02015 	stw	r3,128(sp)
 5050edc:	dc401f15 	stw	r17,124(sp)
 5050ee0:	008001c4 	movi	r2,7
 5050ee4:	1440d216 	blt	r2,r17,5051230 <___svfprintf_internal_r+0x1374>
 5050ee8:	b5800204 	addi	r22,r22,8
 5050eec:	d9003b17 	ldw	r4,236(sp)
 5050ef0:	df0022c4 	addi	fp,sp,139
 5050ef4:	8c400044 	addi	r17,r17,1
 5050ef8:	20c7883a 	add	r3,r4,r3
 5050efc:	b7000015 	stw	fp,0(r22)
 5050f00:	b1000115 	stw	r4,4(r22)
 5050f04:	d8c02015 	stw	r3,128(sp)
 5050f08:	dc401f15 	stw	r17,124(sp)
 5050f0c:	008001c4 	movi	r2,7
 5050f10:	14400e16 	blt	r2,r17,5050f4c <___svfprintf_internal_r+0x1090>
 5050f14:	b2000204 	addi	r8,r22,8
 5050f18:	003e3c06 	br	505080c <_gp+0xfffe53e4>
 5050f1c:	010141b4 	movhi	r4,1286
 5050f20:	21049484 	addi	r4,r4,4690
 5050f24:	d9002b15 	stw	r4,172(sp)
 5050f28:	d9002b17 	ldw	r4,172(sp)
 5050f2c:	1c07883a 	add	r3,r3,r16
 5050f30:	44000115 	stw	r16,4(r8)
 5050f34:	41000015 	stw	r4,0(r8)
 5050f38:	10800044 	addi	r2,r2,1
 5050f3c:	d8c02015 	stw	r3,128(sp)
 5050f40:	d8801f15 	stw	r2,124(sp)
 5050f44:	010001c4 	movi	r4,7
 5050f48:	20be2f0e 	bge	r4,r2,5050808 <_gp+0xfffe53e0>
 5050f4c:	d9402c17 	ldw	r5,176(sp)
 5050f50:	d9801e04 	addi	r6,sp,120
 5050f54:	9809883a 	mov	r4,r19
 5050f58:	5058be80 	call	5058be8 <__ssprint_r>
 5050f5c:	103cbc1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050f60:	d8c02017 	ldw	r3,128(sp)
 5050f64:	da000404 	addi	r8,sp,16
 5050f68:	003e2806 	br	505080c <_gp+0xfffe53e4>
 5050f6c:	d9402c17 	ldw	r5,176(sp)
 5050f70:	d9801e04 	addi	r6,sp,120
 5050f74:	9809883a 	mov	r4,r19
 5050f78:	5058be80 	call	5058be8 <__ssprint_r>
 5050f7c:	103e5f26 	beq	r2,zero,50508fc <_gp+0xfffe54d4>
 5050f80:	003cb306 	br	5050250 <_gp+0xfffe4e28>
 5050f84:	d9402c17 	ldw	r5,176(sp)
 5050f88:	d9801e04 	addi	r6,sp,120
 5050f8c:	9809883a 	mov	r4,r19
 5050f90:	5058be80 	call	5058be8 <__ssprint_r>
 5050f94:	103cae1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050f98:	d8c02017 	ldw	r3,128(sp)
 5050f9c:	da000404 	addi	r8,sp,16
 5050fa0:	003e0d06 	br	50507d8 <_gp+0xfffe53b0>
 5050fa4:	d9402c17 	ldw	r5,176(sp)
 5050fa8:	d9801e04 	addi	r6,sp,120
 5050fac:	9809883a 	mov	r4,r19
 5050fb0:	5058be80 	call	5058be8 <__ssprint_r>
 5050fb4:	103ca61e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050fb8:	d8c02017 	ldw	r3,128(sp)
 5050fbc:	da000404 	addi	r8,sp,16
 5050fc0:	003dc106 	br	50506c8 <_gp+0xfffe52a0>
 5050fc4:	d9402c17 	ldw	r5,176(sp)
 5050fc8:	d9801e04 	addi	r6,sp,120
 5050fcc:	9809883a 	mov	r4,r19
 5050fd0:	5058be80 	call	5058be8 <__ssprint_r>
 5050fd4:	103c9e1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5050fd8:	d8c02017 	ldw	r3,128(sp)
 5050fdc:	da000404 	addi	r8,sp,16
 5050fe0:	003dc706 	br	5050700 <_gp+0xfffe52d8>
 5050fe4:	d8802917 	ldw	r2,164(sp)
 5050fe8:	d8002785 	stb	zero,158(sp)
 5050fec:	103f0816 	blt	r2,zero,5050c10 <_gp+0xfffe57e8>
 5050ff0:	00ffdfc4 	movi	r3,-129
 5050ff4:	a584b03a 	or	r2,r20,r22
 5050ff8:	90e4703a 	and	r18,r18,r3
 5050ffc:	103c8126 	beq	r2,zero,5050204 <_gp+0xfffe4ddc>
 5051000:	0039883a 	mov	fp,zero
 5051004:	003e7606 	br	50509e0 <_gp+0xfffe55b8>
 5051008:	9080040c 	andi	r2,r18,16
 505100c:	10013d26 	beq	r2,zero,5051504 <___svfprintf_internal_r+0x1648>
 5051010:	d9002d17 	ldw	r4,180(sp)
 5051014:	d9402917 	ldw	r5,164(sp)
 5051018:	d8002785 	stb	zero,158(sp)
 505101c:	20800104 	addi	r2,r4,4
 5051020:	25000017 	ldw	r20,0(r4)
 5051024:	002d883a 	mov	r22,zero
 5051028:	28013f16 	blt	r5,zero,5051528 <___svfprintf_internal_r+0x166c>
 505102c:	00ffdfc4 	movi	r3,-129
 5051030:	d8802d15 	stw	r2,180(sp)
 5051034:	90e4703a 	and	r18,r18,r3
 5051038:	a03d2b26 	beq	r20,zero,50504e8 <_gp+0xfffe50c0>
 505103c:	0039883a 	mov	fp,zero
 5051040:	003d2e06 	br	50504fc <_gp+0xfffe50d4>
 5051044:	dc402617 	ldw	r17,152(sp)
 5051048:	0441830e 	bge	zero,r17,5051658 <___svfprintf_internal_r+0x179c>
 505104c:	dc403217 	ldw	r17,200(sp)
 5051050:	d8803317 	ldw	r2,204(sp)
 5051054:	1440010e 	bge	r2,r17,505105c <___svfprintf_internal_r+0x11a0>
 5051058:	1023883a 	mov	r17,r2
 505105c:	04400a0e 	bge	zero,r17,5051088 <___svfprintf_internal_r+0x11cc>
 5051060:	d8801f17 	ldw	r2,124(sp)
 5051064:	1c47883a 	add	r3,r3,r17
 5051068:	44000015 	stw	r16,0(r8)
 505106c:	10800044 	addi	r2,r2,1
 5051070:	44400115 	stw	r17,4(r8)
 5051074:	d8c02015 	stw	r3,128(sp)
 5051078:	d8801f15 	stw	r2,124(sp)
 505107c:	010001c4 	movi	r4,7
 5051080:	20827516 	blt	r4,r2,5051a58 <___svfprintf_internal_r+0x1b9c>
 5051084:	42000204 	addi	r8,r8,8
 5051088:	88027b16 	blt	r17,zero,5051a78 <___svfprintf_internal_r+0x1bbc>
 505108c:	d9003217 	ldw	r4,200(sp)
 5051090:	2463c83a 	sub	r17,r4,r17
 5051094:	0440990e 	bge	zero,r17,50512fc <___svfprintf_internal_r+0x1440>
 5051098:	05800404 	movi	r22,16
 505109c:	d8801f17 	ldw	r2,124(sp)
 50510a0:	b441530e 	bge	r22,r17,50515f0 <___svfprintf_internal_r+0x1734>
 50510a4:	010141b4 	movhi	r4,1286
 50510a8:	21049484 	addi	r4,r4,4690
 50510ac:	d9002b15 	stw	r4,172(sp)
 50510b0:	070001c4 	movi	fp,7
 50510b4:	dd002c17 	ldw	r20,176(sp)
 50510b8:	00000306 	br	50510c8 <___svfprintf_internal_r+0x120c>
 50510bc:	42000204 	addi	r8,r8,8
 50510c0:	8c7ffc04 	addi	r17,r17,-16
 50510c4:	b4414d0e 	bge	r22,r17,50515fc <___svfprintf_internal_r+0x1740>
 50510c8:	18c00404 	addi	r3,r3,16
 50510cc:	10800044 	addi	r2,r2,1
 50510d0:	45400015 	stw	r21,0(r8)
 50510d4:	45800115 	stw	r22,4(r8)
 50510d8:	d8c02015 	stw	r3,128(sp)
 50510dc:	d8801f15 	stw	r2,124(sp)
 50510e0:	e0bff60e 	bge	fp,r2,50510bc <_gp+0xfffe5c94>
 50510e4:	d9801e04 	addi	r6,sp,120
 50510e8:	a00b883a 	mov	r5,r20
 50510ec:	9809883a 	mov	r4,r19
 50510f0:	5058be80 	call	5058be8 <__ssprint_r>
 50510f4:	103c561e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50510f8:	d8c02017 	ldw	r3,128(sp)
 50510fc:	d8801f17 	ldw	r2,124(sp)
 5051100:	da000404 	addi	r8,sp,16
 5051104:	003fee06 	br	50510c0 <_gp+0xfffe5c98>
 5051108:	d9402c17 	ldw	r5,176(sp)
 505110c:	d9801e04 	addi	r6,sp,120
 5051110:	9809883a 	mov	r4,r19
 5051114:	5058be80 	call	5058be8 <__ssprint_r>
 5051118:	103c4d1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 505111c:	d8c02017 	ldw	r3,128(sp)
 5051120:	df002787 	ldb	fp,158(sp)
 5051124:	da000404 	addi	r8,sp,16
 5051128:	003d5a06 	br	5050694 <_gp+0xfffe526c>
 505112c:	9080040c 	andi	r2,r18,16
 5051130:	10005c26 	beq	r2,zero,50512a4 <___svfprintf_internal_r+0x13e8>
 5051134:	d9402d17 	ldw	r5,180(sp)
 5051138:	d8c02917 	ldw	r3,164(sp)
 505113c:	d8002785 	stb	zero,158(sp)
 5051140:	28800104 	addi	r2,r5,4
 5051144:	2d000017 	ldw	r20,0(r5)
 5051148:	002d883a 	mov	r22,zero
 505114c:	18005e16 	blt	r3,zero,50512c8 <___svfprintf_internal_r+0x140c>
 5051150:	00ffdfc4 	movi	r3,-129
 5051154:	d8802d15 	stw	r2,180(sp)
 5051158:	90e4703a 	and	r18,r18,r3
 505115c:	0039883a 	mov	fp,zero
 5051160:	a03dfe26 	beq	r20,zero,505095c <_gp+0xfffe5534>
 5051164:	00800244 	movi	r2,9
 5051168:	153cb336 	bltu	r2,r20,5050438 <_gp+0xfffe5010>
 505116c:	a5000c04 	addi	r20,r20,48
 5051170:	dc001dc4 	addi	r16,sp,119
 5051174:	dd001dc5 	stb	r20,119(sp)
 5051178:	d8c02817 	ldw	r3,160(sp)
 505117c:	1c07c83a 	sub	r3,r3,r16
 5051180:	d8c02e15 	stw	r3,184(sp)
 5051184:	003cf506 	br	505055c <_gp+0xfffe5134>
 5051188:	d8803317 	ldw	r2,204(sp)
 505118c:	143fffc4 	addi	r16,r2,-1
 5051190:	043f560e 	bge	zero,r16,5050eec <_gp+0xfffe5ac4>
 5051194:	07000404 	movi	fp,16
 5051198:	e403530e 	bge	fp,r16,5051ee8 <___svfprintf_internal_r+0x202c>
 505119c:	014141b4 	movhi	r5,1286
 50511a0:	29449484 	addi	r5,r5,4690
 50511a4:	d9402b15 	stw	r5,172(sp)
 50511a8:	01c001c4 	movi	r7,7
 50511ac:	dd002c17 	ldw	r20,176(sp)
 50511b0:	00000306 	br	50511c0 <___svfprintf_internal_r+0x1304>
 50511b4:	843ffc04 	addi	r16,r16,-16
 50511b8:	b5800204 	addi	r22,r22,8
 50511bc:	e400130e 	bge	fp,r16,505120c <___svfprintf_internal_r+0x1350>
 50511c0:	18c00404 	addi	r3,r3,16
 50511c4:	8c400044 	addi	r17,r17,1
 50511c8:	b5400015 	stw	r21,0(r22)
 50511cc:	b7000115 	stw	fp,4(r22)
 50511d0:	d8c02015 	stw	r3,128(sp)
 50511d4:	dc401f15 	stw	r17,124(sp)
 50511d8:	3c7ff60e 	bge	r7,r17,50511b4 <_gp+0xfffe5d8c>
 50511dc:	d9801e04 	addi	r6,sp,120
 50511e0:	a00b883a 	mov	r5,r20
 50511e4:	9809883a 	mov	r4,r19
 50511e8:	d9c03d15 	stw	r7,244(sp)
 50511ec:	5058be80 	call	5058be8 <__ssprint_r>
 50511f0:	d9c03d17 	ldw	r7,244(sp)
 50511f4:	103c161e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50511f8:	843ffc04 	addi	r16,r16,-16
 50511fc:	d8c02017 	ldw	r3,128(sp)
 5051200:	dc401f17 	ldw	r17,124(sp)
 5051204:	dd800404 	addi	r22,sp,16
 5051208:	e43fed16 	blt	fp,r16,50511c0 <_gp+0xfffe5d98>
 505120c:	d8802b17 	ldw	r2,172(sp)
 5051210:	1c07883a 	add	r3,r3,r16
 5051214:	8c400044 	addi	r17,r17,1
 5051218:	b0800015 	stw	r2,0(r22)
 505121c:	b4000115 	stw	r16,4(r22)
 5051220:	d8c02015 	stw	r3,128(sp)
 5051224:	dc401f15 	stw	r17,124(sp)
 5051228:	008001c4 	movi	r2,7
 505122c:	147f2e0e 	bge	r2,r17,5050ee8 <_gp+0xfffe5ac0>
 5051230:	d9402c17 	ldw	r5,176(sp)
 5051234:	d9801e04 	addi	r6,sp,120
 5051238:	9809883a 	mov	r4,r19
 505123c:	5058be80 	call	5058be8 <__ssprint_r>
 5051240:	103c031e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051244:	d8c02017 	ldw	r3,128(sp)
 5051248:	dc401f17 	ldw	r17,124(sp)
 505124c:	dd800404 	addi	r22,sp,16
 5051250:	003f2606 	br	5050eec <_gp+0xfffe5ac4>
 5051254:	9080040c 	andi	r2,r18,16
 5051258:	1000c326 	beq	r2,zero,5051568 <___svfprintf_internal_r+0x16ac>
 505125c:	d8802d17 	ldw	r2,180(sp)
 5051260:	15000017 	ldw	r20,0(r2)
 5051264:	10800104 	addi	r2,r2,4
 5051268:	d8802d15 	stw	r2,180(sp)
 505126c:	a02dd7fa 	srai	r22,r20,31
 5051270:	b005883a 	mov	r2,r22
 5051274:	103c680e 	bge	r2,zero,5050418 <_gp+0xfffe4ff0>
 5051278:	0529c83a 	sub	r20,zero,r20
 505127c:	a004c03a 	cmpne	r2,r20,zero
 5051280:	05adc83a 	sub	r22,zero,r22
 5051284:	b0adc83a 	sub	r22,r22,r2
 5051288:	d8802917 	ldw	r2,164(sp)
 505128c:	07000b44 	movi	fp,45
 5051290:	df002785 	stb	fp,158(sp)
 5051294:	10022e16 	blt	r2,zero,5051b50 <___svfprintf_internal_r+0x1c94>
 5051298:	00bfdfc4 	movi	r2,-129
 505129c:	90a4703a 	and	r18,r18,r2
 50512a0:	003c6406 	br	5050434 <_gp+0xfffe500c>
 50512a4:	9080100c 	andi	r2,r18,64
 50512a8:	d8002785 	stb	zero,158(sp)
 50512ac:	10012526 	beq	r2,zero,5051744 <___svfprintf_internal_r+0x1888>
 50512b0:	d9002d17 	ldw	r4,180(sp)
 50512b4:	d9402917 	ldw	r5,164(sp)
 50512b8:	002d883a 	mov	r22,zero
 50512bc:	20800104 	addi	r2,r4,4
 50512c0:	2500000b 	ldhu	r20,0(r4)
 50512c4:	283fa20e 	bge	r5,zero,5051150 <_gp+0xfffe5d28>
 50512c8:	d8802d15 	stw	r2,180(sp)
 50512cc:	0039883a 	mov	fp,zero
 50512d0:	a584b03a 	or	r2,r20,r22
 50512d4:	103c571e 	bne	r2,zero,5050434 <_gp+0xfffe500c>
 50512d8:	00800044 	movi	r2,1
 50512dc:	003e5006 	br	5050c20 <_gp+0xfffe57f8>
 50512e0:	d9402c17 	ldw	r5,176(sp)
 50512e4:	d9801e04 	addi	r6,sp,120
 50512e8:	9809883a 	mov	r4,r19
 50512ec:	5058be80 	call	5058be8 <__ssprint_r>
 50512f0:	103bd71e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50512f4:	d8c02017 	ldw	r3,128(sp)
 50512f8:	da000404 	addi	r8,sp,16
 50512fc:	d9003217 	ldw	r4,200(sp)
 5051300:	d8802617 	ldw	r2,152(sp)
 5051304:	d9403317 	ldw	r5,204(sp)
 5051308:	8123883a 	add	r17,r16,r4
 505130c:	11400216 	blt	r2,r5,5051318 <___svfprintf_internal_r+0x145c>
 5051310:	9100004c 	andi	r4,r18,1
 5051314:	20000d26 	beq	r4,zero,505134c <___svfprintf_internal_r+0x1490>
 5051318:	d9003817 	ldw	r4,224(sp)
 505131c:	d9403417 	ldw	r5,208(sp)
 5051320:	1907883a 	add	r3,r3,r4
 5051324:	d9001f17 	ldw	r4,124(sp)
 5051328:	41400015 	stw	r5,0(r8)
 505132c:	d9403817 	ldw	r5,224(sp)
 5051330:	21000044 	addi	r4,r4,1
 5051334:	d8c02015 	stw	r3,128(sp)
 5051338:	41400115 	stw	r5,4(r8)
 505133c:	d9001f15 	stw	r4,124(sp)
 5051340:	014001c4 	movi	r5,7
 5051344:	2901dc16 	blt	r5,r4,5051ab8 <___svfprintf_internal_r+0x1bfc>
 5051348:	42000204 	addi	r8,r8,8
 505134c:	d9003317 	ldw	r4,204(sp)
 5051350:	8121883a 	add	r16,r16,r4
 5051354:	2085c83a 	sub	r2,r4,r2
 5051358:	8461c83a 	sub	r16,r16,r17
 505135c:	1400010e 	bge	r2,r16,5051364 <___svfprintf_internal_r+0x14a8>
 5051360:	1021883a 	mov	r16,r2
 5051364:	04000a0e 	bge	zero,r16,5051390 <___svfprintf_internal_r+0x14d4>
 5051368:	d9001f17 	ldw	r4,124(sp)
 505136c:	1c07883a 	add	r3,r3,r16
 5051370:	44400015 	stw	r17,0(r8)
 5051374:	21000044 	addi	r4,r4,1
 5051378:	44000115 	stw	r16,4(r8)
 505137c:	d8c02015 	stw	r3,128(sp)
 5051380:	d9001f15 	stw	r4,124(sp)
 5051384:	014001c4 	movi	r5,7
 5051388:	2901e616 	blt	r5,r4,5051b24 <___svfprintf_internal_r+0x1c68>
 505138c:	42000204 	addi	r8,r8,8
 5051390:	8001f616 	blt	r16,zero,5051b6c <___svfprintf_internal_r+0x1cb0>
 5051394:	1421c83a 	sub	r16,r2,r16
 5051398:	043d1c0e 	bge	zero,r16,505080c <_gp+0xfffe53e4>
 505139c:	04400404 	movi	r17,16
 50513a0:	d8801f17 	ldw	r2,124(sp)
 50513a4:	8c3edd0e 	bge	r17,r16,5050f1c <_gp+0xfffe5af4>
 50513a8:	014141b4 	movhi	r5,1286
 50513ac:	29449484 	addi	r5,r5,4690
 50513b0:	d9402b15 	stw	r5,172(sp)
 50513b4:	058001c4 	movi	r22,7
 50513b8:	dd002c17 	ldw	r20,176(sp)
 50513bc:	00000306 	br	50513cc <___svfprintf_internal_r+0x1510>
 50513c0:	42000204 	addi	r8,r8,8
 50513c4:	843ffc04 	addi	r16,r16,-16
 50513c8:	8c3ed70e 	bge	r17,r16,5050f28 <_gp+0xfffe5b00>
 50513cc:	18c00404 	addi	r3,r3,16
 50513d0:	10800044 	addi	r2,r2,1
 50513d4:	45400015 	stw	r21,0(r8)
 50513d8:	44400115 	stw	r17,4(r8)
 50513dc:	d8c02015 	stw	r3,128(sp)
 50513e0:	d8801f15 	stw	r2,124(sp)
 50513e4:	b0bff60e 	bge	r22,r2,50513c0 <_gp+0xfffe5f98>
 50513e8:	d9801e04 	addi	r6,sp,120
 50513ec:	a00b883a 	mov	r5,r20
 50513f0:	9809883a 	mov	r4,r19
 50513f4:	5058be80 	call	5058be8 <__ssprint_r>
 50513f8:	103b951e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50513fc:	d8c02017 	ldw	r3,128(sp)
 5051400:	d8801f17 	ldw	r2,124(sp)
 5051404:	da000404 	addi	r8,sp,16
 5051408:	003fee06 	br	50513c4 <_gp+0xfffe5f9c>
 505140c:	9088703a 	and	r4,r18,r2
 5051410:	203e8d1e 	bne	r4,zero,5050e48 <_gp+0xfffe5a20>
 5051414:	dc401f17 	ldw	r17,124(sp)
 5051418:	40800115 	stw	r2,4(r8)
 505141c:	44000015 	stw	r16,0(r8)
 5051420:	8c400044 	addi	r17,r17,1
 5051424:	d8c02015 	stw	r3,128(sp)
 5051428:	dc401f15 	stw	r17,124(sp)
 505142c:	008001c4 	movi	r2,7
 5051430:	147f7f16 	blt	r2,r17,5051230 <_gp+0xfffe5e08>
 5051434:	45800204 	addi	r22,r8,8
 5051438:	003eac06 	br	5050eec <_gp+0xfffe5ac4>
 505143c:	d9402c17 	ldw	r5,176(sp)
 5051440:	d9801e04 	addi	r6,sp,120
 5051444:	9809883a 	mov	r4,r19
 5051448:	5058be80 	call	5058be8 <__ssprint_r>
 505144c:	103b801e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051450:	d8c02017 	ldw	r3,128(sp)
 5051454:	dc401f17 	ldw	r17,124(sp)
 5051458:	da000404 	addi	r8,sp,16
 505145c:	003e8406 	br	5050e70 <_gp+0xfffe5a48>
 5051460:	d9402c17 	ldw	r5,176(sp)
 5051464:	d9801e04 	addi	r6,sp,120
 5051468:	9809883a 	mov	r4,r19
 505146c:	5058be80 	call	5058be8 <__ssprint_r>
 5051470:	103b771e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051474:	d8c02017 	ldw	r3,128(sp)
 5051478:	dc401f17 	ldw	r17,124(sp)
 505147c:	dd800404 	addi	r22,sp,16
 5051480:	003e8606 	br	5050e9c <_gp+0xfffe5a74>
 5051484:	0029883a 	mov	r20,zero
 5051488:	a5000c04 	addi	r20,r20,48
 505148c:	dc001dc4 	addi	r16,sp,119
 5051490:	dd001dc5 	stb	r20,119(sp)
 5051494:	003f3806 	br	5051178 <_gp+0xfffe5d50>
 5051498:	d9402c17 	ldw	r5,176(sp)
 505149c:	d9801e04 	addi	r6,sp,120
 50514a0:	9809883a 	mov	r4,r19
 50514a4:	5058be80 	call	5058be8 <__ssprint_r>
 50514a8:	103b691e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50514ac:	d8c02017 	ldw	r3,128(sp)
 50514b0:	da000404 	addi	r8,sp,16
 50514b4:	003c9506 	br	505070c <_gp+0xfffe52e4>
 50514b8:	d9003617 	ldw	r4,216(sp)
 50514bc:	d9403717 	ldw	r5,220(sp)
 50514c0:	da003e15 	stw	r8,248(sp)
 50514c4:	505895c0 	call	505895c <__fpclassifyd>
 50514c8:	da003e17 	ldw	r8,248(sp)
 50514cc:	1000bd1e 	bne	r2,zero,50517c4 <___svfprintf_internal_r+0x1908>
 50514d0:	008011c4 	movi	r2,71
 50514d4:	14411e0e 	bge	r2,r17,5051950 <___svfprintf_internal_r+0x1a94>
 50514d8:	040141b4 	movhi	r16,1286
 50514dc:	84048704 	addi	r16,r16,4636
 50514e0:	00c000c4 	movi	r3,3
 50514e4:	00bfdfc4 	movi	r2,-129
 50514e8:	d8c02a15 	stw	r3,168(sp)
 50514ec:	90a4703a 	and	r18,r18,r2
 50514f0:	df002783 	ldbu	fp,158(sp)
 50514f4:	d8c02e15 	stw	r3,184(sp)
 50514f8:	d8002915 	stw	zero,164(sp)
 50514fc:	d8003215 	stw	zero,200(sp)
 5051500:	003c1c06 	br	5050574 <_gp+0xfffe514c>
 5051504:	9080100c 	andi	r2,r18,64
 5051508:	d8002785 	stb	zero,158(sp)
 505150c:	10009426 	beq	r2,zero,5051760 <___svfprintf_internal_r+0x18a4>
 5051510:	d8c02d17 	ldw	r3,180(sp)
 5051514:	d9002917 	ldw	r4,164(sp)
 5051518:	002d883a 	mov	r22,zero
 505151c:	18800104 	addi	r2,r3,4
 5051520:	1d00000b 	ldhu	r20,0(r3)
 5051524:	203ec10e 	bge	r4,zero,505102c <_gp+0xfffe5c04>
 5051528:	a586b03a 	or	r3,r20,r22
 505152c:	d8802d15 	stw	r2,180(sp)
 5051530:	183ec21e 	bne	r3,zero,505103c <_gp+0xfffe5c14>
 5051534:	0039883a 	mov	fp,zero
 5051538:	0005883a 	mov	r2,zero
 505153c:	003db806 	br	5050c20 <_gp+0xfffe57f8>
 5051540:	d8802d17 	ldw	r2,180(sp)
 5051544:	d8c02d17 	ldw	r3,180(sp)
 5051548:	d9002d17 	ldw	r4,180(sp)
 505154c:	10800017 	ldw	r2,0(r2)
 5051550:	18c00117 	ldw	r3,4(r3)
 5051554:	21000204 	addi	r4,r4,8
 5051558:	d8803615 	stw	r2,216(sp)
 505155c:	d8c03715 	stw	r3,220(sp)
 5051560:	d9002d15 	stw	r4,180(sp)
 5051564:	003b8206 	br	5050370 <_gp+0xfffe4f48>
 5051568:	9080100c 	andi	r2,r18,64
 505156c:	10010726 	beq	r2,zero,505198c <___svfprintf_internal_r+0x1ad0>
 5051570:	d8c02d17 	ldw	r3,180(sp)
 5051574:	1d00000f 	ldh	r20,0(r3)
 5051578:	18c00104 	addi	r3,r3,4
 505157c:	d8c02d15 	stw	r3,180(sp)
 5051580:	a02dd7fa 	srai	r22,r20,31
 5051584:	b005883a 	mov	r2,r22
 5051588:	003ba206 	br	5050414 <_gp+0xfffe4fec>
 505158c:	9080100c 	andi	r2,r18,64
 5051590:	10010526 	beq	r2,zero,50519a8 <___svfprintf_internal_r+0x1aec>
 5051594:	d9002d17 	ldw	r4,180(sp)
 5051598:	002d883a 	mov	r22,zero
 505159c:	2500000b 	ldhu	r20,0(r4)
 50515a0:	21000104 	addi	r4,r4,4
 50515a4:	d9002d15 	stw	r4,180(sp)
 50515a8:	003cfe06 	br	50509a4 <_gp+0xfffe557c>
 50515ac:	bc400007 	ldb	r17,0(r23)
 50515b0:	003a9606 	br	505000c <_gp+0xfffe4be4>
 50515b4:	9080040c 	andi	r2,r18,16
 50515b8:	10010126 	beq	r2,zero,50519c0 <___svfprintf_internal_r+0x1b04>
 50515bc:	d9402d17 	ldw	r5,180(sp)
 50515c0:	d8c02f17 	ldw	r3,188(sp)
 50515c4:	28800017 	ldw	r2,0(r5)
 50515c8:	29400104 	addi	r5,r5,4
 50515cc:	d9402d15 	stw	r5,180(sp)
 50515d0:	10c00015 	stw	r3,0(r2)
 50515d4:	003a6406 	br	504ff68 <_gp+0xfffe4b40>
 50515d8:	d9002917 	ldw	r4,164(sp)
 50515dc:	d8002785 	stb	zero,158(sp)
 50515e0:	203d8d16 	blt	r4,zero,5050c18 <_gp+0xfffe57f0>
 50515e4:	00bfdfc4 	movi	r2,-129
 50515e8:	90a4703a 	and	r18,r18,r2
 50515ec:	003b0506 	br	5050204 <_gp+0xfffe4ddc>
 50515f0:	014141b4 	movhi	r5,1286
 50515f4:	29449484 	addi	r5,r5,4690
 50515f8:	d9402b15 	stw	r5,172(sp)
 50515fc:	d9402b17 	ldw	r5,172(sp)
 5051600:	1c47883a 	add	r3,r3,r17
 5051604:	10800044 	addi	r2,r2,1
 5051608:	41400015 	stw	r5,0(r8)
 505160c:	44400115 	stw	r17,4(r8)
 5051610:	d8c02015 	stw	r3,128(sp)
 5051614:	d8801f15 	stw	r2,124(sp)
 5051618:	010001c4 	movi	r4,7
 505161c:	20bf3016 	blt	r4,r2,50512e0 <_gp+0xfffe5eb8>
 5051620:	42000204 	addi	r8,r8,8
 5051624:	003f3506 	br	50512fc <_gp+0xfffe5ed4>
 5051628:	010141b4 	movhi	r4,1286
 505162c:	21049484 	addi	r4,r4,4690
 5051630:	d9002b15 	stw	r4,172(sp)
 5051634:	003c5e06 	br	50507b0 <_gp+0xfffe5388>
 5051638:	d9402c17 	ldw	r5,176(sp)
 505163c:	d9801e04 	addi	r6,sp,120
 5051640:	9809883a 	mov	r4,r19
 5051644:	5058be80 	call	5058be8 <__ssprint_r>
 5051648:	103b011e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 505164c:	d8c02017 	ldw	r3,128(sp)
 5051650:	da000404 	addi	r8,sp,16
 5051654:	003d9306 	br	5050ca4 <_gp+0xfffe587c>
 5051658:	d8801f17 	ldw	r2,124(sp)
 505165c:	014141b4 	movhi	r5,1286
 5051660:	01000044 	movi	r4,1
 5051664:	18c00044 	addi	r3,r3,1
 5051668:	10800044 	addi	r2,r2,1
 505166c:	29449404 	addi	r5,r5,4688
 5051670:	41000115 	stw	r4,4(r8)
 5051674:	41400015 	stw	r5,0(r8)
 5051678:	d8c02015 	stw	r3,128(sp)
 505167c:	d8801f15 	stw	r2,124(sp)
 5051680:	010001c4 	movi	r4,7
 5051684:	2080b516 	blt	r4,r2,505195c <___svfprintf_internal_r+0x1aa0>
 5051688:	42000204 	addi	r8,r8,8
 505168c:	8800041e 	bne	r17,zero,50516a0 <___svfprintf_internal_r+0x17e4>
 5051690:	d8803317 	ldw	r2,204(sp)
 5051694:	1000021e 	bne	r2,zero,50516a0 <___svfprintf_internal_r+0x17e4>
 5051698:	9080004c 	andi	r2,r18,1
 505169c:	103c5b26 	beq	r2,zero,505080c <_gp+0xfffe53e4>
 50516a0:	d9003817 	ldw	r4,224(sp)
 50516a4:	d8801f17 	ldw	r2,124(sp)
 50516a8:	d9403417 	ldw	r5,208(sp)
 50516ac:	20c7883a 	add	r3,r4,r3
 50516b0:	10800044 	addi	r2,r2,1
 50516b4:	41000115 	stw	r4,4(r8)
 50516b8:	41400015 	stw	r5,0(r8)
 50516bc:	d8c02015 	stw	r3,128(sp)
 50516c0:	d8801f15 	stw	r2,124(sp)
 50516c4:	010001c4 	movi	r4,7
 50516c8:	20818016 	blt	r4,r2,5051ccc <___svfprintf_internal_r+0x1e10>
 50516cc:	42000204 	addi	r8,r8,8
 50516d0:	0463c83a 	sub	r17,zero,r17
 50516d4:	0440cb0e 	bge	zero,r17,5051a04 <___svfprintf_internal_r+0x1b48>
 50516d8:	05800404 	movi	r22,16
 50516dc:	b440e80e 	bge	r22,r17,5051a80 <___svfprintf_internal_r+0x1bc4>
 50516e0:	014141b4 	movhi	r5,1286
 50516e4:	29449484 	addi	r5,r5,4690
 50516e8:	d9402b15 	stw	r5,172(sp)
 50516ec:	070001c4 	movi	fp,7
 50516f0:	dd002c17 	ldw	r20,176(sp)
 50516f4:	00000306 	br	5051704 <___svfprintf_internal_r+0x1848>
 50516f8:	42000204 	addi	r8,r8,8
 50516fc:	8c7ffc04 	addi	r17,r17,-16
 5051700:	b440e20e 	bge	r22,r17,5051a8c <___svfprintf_internal_r+0x1bd0>
 5051704:	18c00404 	addi	r3,r3,16
 5051708:	10800044 	addi	r2,r2,1
 505170c:	45400015 	stw	r21,0(r8)
 5051710:	45800115 	stw	r22,4(r8)
 5051714:	d8c02015 	stw	r3,128(sp)
 5051718:	d8801f15 	stw	r2,124(sp)
 505171c:	e0bff60e 	bge	fp,r2,50516f8 <_gp+0xfffe62d0>
 5051720:	d9801e04 	addi	r6,sp,120
 5051724:	a00b883a 	mov	r5,r20
 5051728:	9809883a 	mov	r4,r19
 505172c:	5058be80 	call	5058be8 <__ssprint_r>
 5051730:	103ac71e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051734:	d8c02017 	ldw	r3,128(sp)
 5051738:	d8801f17 	ldw	r2,124(sp)
 505173c:	da000404 	addi	r8,sp,16
 5051740:	003fee06 	br	50516fc <_gp+0xfffe62d4>
 5051744:	d8c02d17 	ldw	r3,180(sp)
 5051748:	d9002917 	ldw	r4,164(sp)
 505174c:	002d883a 	mov	r22,zero
 5051750:	18800104 	addi	r2,r3,4
 5051754:	1d000017 	ldw	r20,0(r3)
 5051758:	203e7d0e 	bge	r4,zero,5051150 <_gp+0xfffe5d28>
 505175c:	003eda06 	br	50512c8 <_gp+0xfffe5ea0>
 5051760:	d9402d17 	ldw	r5,180(sp)
 5051764:	d8c02917 	ldw	r3,164(sp)
 5051768:	002d883a 	mov	r22,zero
 505176c:	28800104 	addi	r2,r5,4
 5051770:	2d000017 	ldw	r20,0(r5)
 5051774:	183e2d0e 	bge	r3,zero,505102c <_gp+0xfffe5c04>
 5051778:	003f6b06 	br	5051528 <_gp+0xfffe6100>
 505177c:	d8c02d15 	stw	r3,180(sp)
 5051780:	0039883a 	mov	fp,zero
 5051784:	003ed206 	br	50512d0 <_gp+0xfffe5ea8>
 5051788:	bc400043 	ldbu	r17,1(r23)
 505178c:	94800814 	ori	r18,r18,32
 5051790:	bdc00044 	addi	r23,r23,1
 5051794:	8c403fcc 	andi	r17,r17,255
 5051798:	8c40201c 	xori	r17,r17,128
 505179c:	8c7fe004 	addi	r17,r17,-128
 50517a0:	003a1a06 	br	505000c <_gp+0xfffe4be4>
 50517a4:	d9402c17 	ldw	r5,176(sp)
 50517a8:	d9801e04 	addi	r6,sp,120
 50517ac:	9809883a 	mov	r4,r19
 50517b0:	5058be80 	call	5058be8 <__ssprint_r>
 50517b4:	103aa61e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50517b8:	d8c02017 	ldw	r3,128(sp)
 50517bc:	da000404 	addi	r8,sp,16
 50517c0:	003d4a06 	br	5050cec <_gp+0xfffe58c4>
 50517c4:	d9002917 	ldw	r4,164(sp)
 50517c8:	05bff7c4 	movi	r22,-33
 50517cc:	00bfffc4 	movi	r2,-1
 50517d0:	8dac703a 	and	r22,r17,r22
 50517d4:	20806a26 	beq	r4,r2,5051980 <___svfprintf_internal_r+0x1ac4>
 50517d8:	008011c4 	movi	r2,71
 50517dc:	b0813726 	beq	r22,r2,5051cbc <___svfprintf_internal_r+0x1e00>
 50517e0:	d9003717 	ldw	r4,220(sp)
 50517e4:	90c04014 	ori	r3,r18,256
 50517e8:	d8c02b15 	stw	r3,172(sp)
 50517ec:	20015d16 	blt	r4,zero,5051d64 <___svfprintf_internal_r+0x1ea8>
 50517f0:	dd003717 	ldw	r20,220(sp)
 50517f4:	d8002a05 	stb	zero,168(sp)
 50517f8:	00801984 	movi	r2,102
 50517fc:	88814026 	beq	r17,r2,5051d00 <___svfprintf_internal_r+0x1e44>
 5051800:	00801184 	movi	r2,70
 5051804:	88817126 	beq	r17,r2,5051dcc <___svfprintf_internal_r+0x1f10>
 5051808:	00801144 	movi	r2,69
 505180c:	b0816226 	beq	r22,r2,5051d98 <___svfprintf_internal_r+0x1edc>
 5051810:	d8c02917 	ldw	r3,164(sp)
 5051814:	d8802104 	addi	r2,sp,132
 5051818:	d8800315 	stw	r2,12(sp)
 505181c:	d9403617 	ldw	r5,216(sp)
 5051820:	d8802504 	addi	r2,sp,148
 5051824:	d8800215 	stw	r2,8(sp)
 5051828:	d8802604 	addi	r2,sp,152
 505182c:	d8c00015 	stw	r3,0(sp)
 5051830:	d8800115 	stw	r2,4(sp)
 5051834:	01c00084 	movi	r7,2
 5051838:	a00d883a 	mov	r6,r20
 505183c:	9809883a 	mov	r4,r19
 5051840:	d8c03d15 	stw	r3,244(sp)
 5051844:	da003e15 	stw	r8,248(sp)
 5051848:	50547dc0 	call	50547dc <_dtoa_r>
 505184c:	1021883a 	mov	r16,r2
 5051850:	008019c4 	movi	r2,103
 5051854:	d8c03d17 	ldw	r3,244(sp)
 5051858:	da003e17 	ldw	r8,248(sp)
 505185c:	8880e726 	beq	r17,r2,5051bfc <___svfprintf_internal_r+0x1d40>
 5051860:	008011c4 	movi	r2,71
 5051864:	8880d426 	beq	r17,r2,5051bb8 <___svfprintf_internal_r+0x1cfc>
 5051868:	80f9883a 	add	fp,r16,r3
 505186c:	d9003617 	ldw	r4,216(sp)
 5051870:	000d883a 	mov	r6,zero
 5051874:	000f883a 	mov	r7,zero
 5051878:	a00b883a 	mov	r5,r20
 505187c:	da003e15 	stw	r8,248(sp)
 5051880:	504daa80 	call	504daa8 <__eqdf2>
 5051884:	da003e17 	ldw	r8,248(sp)
 5051888:	1000e426 	beq	r2,zero,5051c1c <___svfprintf_internal_r+0x1d60>
 505188c:	d8802117 	ldw	r2,132(sp)
 5051890:	1700062e 	bgeu	r2,fp,50518ac <___svfprintf_internal_r+0x19f0>
 5051894:	01000c04 	movi	r4,48
 5051898:	10c00044 	addi	r3,r2,1
 505189c:	d8c02115 	stw	r3,132(sp)
 50518a0:	11000005 	stb	r4,0(r2)
 50518a4:	d8802117 	ldw	r2,132(sp)
 50518a8:	173ffb36 	bltu	r2,fp,5051898 <_gp+0xfffe6470>
 50518ac:	1405c83a 	sub	r2,r2,r16
 50518b0:	d8803315 	stw	r2,204(sp)
 50518b4:	008011c4 	movi	r2,71
 50518b8:	b080c526 	beq	r22,r2,5051bd0 <___svfprintf_internal_r+0x1d14>
 50518bc:	00801944 	movi	r2,101
 50518c0:	1441d90e 	bge	r2,r17,5052028 <___svfprintf_internal_r+0x216c>
 50518c4:	d8c02617 	ldw	r3,152(sp)
 50518c8:	00801984 	movi	r2,102
 50518cc:	d8c03215 	stw	r3,200(sp)
 50518d0:	88813426 	beq	r17,r2,5051da4 <___svfprintf_internal_r+0x1ee8>
 50518d4:	d8c03217 	ldw	r3,200(sp)
 50518d8:	d9003317 	ldw	r4,204(sp)
 50518dc:	19012516 	blt	r3,r4,5051d74 <___svfprintf_internal_r+0x1eb8>
 50518e0:	9480004c 	andi	r18,r18,1
 50518e4:	9001841e 	bne	r18,zero,5051ef8 <___svfprintf_internal_r+0x203c>
 50518e8:	1805883a 	mov	r2,r3
 50518ec:	1801cc16 	blt	r3,zero,5052020 <___svfprintf_internal_r+0x2164>
 50518f0:	d8c03217 	ldw	r3,200(sp)
 50518f4:	044019c4 	movi	r17,103
 50518f8:	d8c02e15 	stw	r3,184(sp)
 50518fc:	df002a07 	ldb	fp,168(sp)
 5051900:	e000a61e 	bne	fp,zero,5051b9c <___svfprintf_internal_r+0x1ce0>
 5051904:	df002783 	ldbu	fp,158(sp)
 5051908:	d8802a15 	stw	r2,168(sp)
 505190c:	dc802b17 	ldw	r18,172(sp)
 5051910:	d8002915 	stw	zero,164(sp)
 5051914:	003b1706 	br	5050574 <_gp+0xfffe514c>
 5051918:	040141b4 	movhi	r16,1286
 505191c:	84048404 	addi	r16,r16,4624
 5051920:	003aa606 	br	50503bc <_gp+0xfffe4f94>
 5051924:	d9003917 	ldw	r4,228(sp)
 5051928:	04001004 	movi	r16,64
 505192c:	800b883a 	mov	r5,r16
 5051930:	504f0c00 	call	504f0c0 <_malloc_r>
 5051934:	d9002c17 	ldw	r4,176(sp)
 5051938:	20800015 	stw	r2,0(r4)
 505193c:	20800415 	stw	r2,16(r4)
 5051940:	1001cb26 	beq	r2,zero,5052070 <___svfprintf_internal_r+0x21b4>
 5051944:	d8802c17 	ldw	r2,176(sp)
 5051948:	14000515 	stw	r16,20(r2)
 505194c:	00397606 	br	504ff28 <_gp+0xfffe4b00>
 5051950:	040141b4 	movhi	r16,1286
 5051954:	84048604 	addi	r16,r16,4632
 5051958:	003ee106 	br	50514e0 <_gp+0xfffe60b8>
 505195c:	d9402c17 	ldw	r5,176(sp)
 5051960:	d9801e04 	addi	r6,sp,120
 5051964:	9809883a 	mov	r4,r19
 5051968:	5058be80 	call	5058be8 <__ssprint_r>
 505196c:	103a381e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051970:	dc402617 	ldw	r17,152(sp)
 5051974:	d8c02017 	ldw	r3,128(sp)
 5051978:	da000404 	addi	r8,sp,16
 505197c:	003f4306 	br	505168c <_gp+0xfffe6264>
 5051980:	01400184 	movi	r5,6
 5051984:	d9402915 	stw	r5,164(sp)
 5051988:	003f9506 	br	50517e0 <_gp+0xfffe63b8>
 505198c:	d9002d17 	ldw	r4,180(sp)
 5051990:	25000017 	ldw	r20,0(r4)
 5051994:	21000104 	addi	r4,r4,4
 5051998:	d9002d15 	stw	r4,180(sp)
 505199c:	a02dd7fa 	srai	r22,r20,31
 50519a0:	b005883a 	mov	r2,r22
 50519a4:	003a9b06 	br	5050414 <_gp+0xfffe4fec>
 50519a8:	d9402d17 	ldw	r5,180(sp)
 50519ac:	002d883a 	mov	r22,zero
 50519b0:	2d000017 	ldw	r20,0(r5)
 50519b4:	29400104 	addi	r5,r5,4
 50519b8:	d9402d15 	stw	r5,180(sp)
 50519bc:	003bf906 	br	50509a4 <_gp+0xfffe557c>
 50519c0:	9480100c 	andi	r18,r18,64
 50519c4:	90006e26 	beq	r18,zero,5051b80 <___svfprintf_internal_r+0x1cc4>
 50519c8:	d9002d17 	ldw	r4,180(sp)
 50519cc:	d9402f17 	ldw	r5,188(sp)
 50519d0:	20800017 	ldw	r2,0(r4)
 50519d4:	21000104 	addi	r4,r4,4
 50519d8:	d9002d15 	stw	r4,180(sp)
 50519dc:	1140000d 	sth	r5,0(r2)
 50519e0:	00396106 	br	504ff68 <_gp+0xfffe4b40>
 50519e4:	d9402c17 	ldw	r5,176(sp)
 50519e8:	d9801e04 	addi	r6,sp,120
 50519ec:	9809883a 	mov	r4,r19
 50519f0:	5058be80 	call	5058be8 <__ssprint_r>
 50519f4:	103a161e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 50519f8:	d8c02017 	ldw	r3,128(sp)
 50519fc:	d8801f17 	ldw	r2,124(sp)
 5051a00:	da000404 	addi	r8,sp,16
 5051a04:	d9403317 	ldw	r5,204(sp)
 5051a08:	10800044 	addi	r2,r2,1
 5051a0c:	44000015 	stw	r16,0(r8)
 5051a10:	28c7883a 	add	r3,r5,r3
 5051a14:	003b7706 	br	50507f4 <_gp+0xfffe53cc>
 5051a18:	8009883a 	mov	r4,r16
 5051a1c:	da003e15 	stw	r8,248(sp)
 5051a20:	504fe240 	call	504fe24 <strlen>
 5051a24:	d8802e15 	stw	r2,184(sp)
 5051a28:	da003e17 	ldw	r8,248(sp)
 5051a2c:	103c280e 	bge	r2,zero,5050ad0 <_gp+0xfffe56a8>
 5051a30:	0005883a 	mov	r2,zero
 5051a34:	003c2606 	br	5050ad0 <_gp+0xfffe56a8>
 5051a38:	00bfffc4 	movi	r2,-1
 5051a3c:	003a0906 	br	5050264 <_gp+0xfffe4e3c>
 5051a40:	010141b4 	movhi	r4,1286
 5051a44:	21049884 	addi	r4,r4,4706
 5051a48:	d9003515 	stw	r4,212(sp)
 5051a4c:	003b0606 	br	5050668 <_gp+0xfffe5240>
 5051a50:	013fffc4 	movi	r4,-1
 5051a54:	003a2706 	br	50502f4 <_gp+0xfffe4ecc>
 5051a58:	d9402c17 	ldw	r5,176(sp)
 5051a5c:	d9801e04 	addi	r6,sp,120
 5051a60:	9809883a 	mov	r4,r19
 5051a64:	5058be80 	call	5058be8 <__ssprint_r>
 5051a68:	1039f91e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051a6c:	d8c02017 	ldw	r3,128(sp)
 5051a70:	da000404 	addi	r8,sp,16
 5051a74:	003d8406 	br	5051088 <_gp+0xfffe5c60>
 5051a78:	0023883a 	mov	r17,zero
 5051a7c:	003d8306 	br	505108c <_gp+0xfffe5c64>
 5051a80:	010141b4 	movhi	r4,1286
 5051a84:	21049484 	addi	r4,r4,4690
 5051a88:	d9002b15 	stw	r4,172(sp)
 5051a8c:	d9002b17 	ldw	r4,172(sp)
 5051a90:	1c47883a 	add	r3,r3,r17
 5051a94:	10800044 	addi	r2,r2,1
 5051a98:	41000015 	stw	r4,0(r8)
 5051a9c:	44400115 	stw	r17,4(r8)
 5051aa0:	d8c02015 	stw	r3,128(sp)
 5051aa4:	d8801f15 	stw	r2,124(sp)
 5051aa8:	010001c4 	movi	r4,7
 5051aac:	20bfcd16 	blt	r4,r2,50519e4 <_gp+0xfffe65bc>
 5051ab0:	42000204 	addi	r8,r8,8
 5051ab4:	003fd306 	br	5051a04 <_gp+0xfffe65dc>
 5051ab8:	d9402c17 	ldw	r5,176(sp)
 5051abc:	d9801e04 	addi	r6,sp,120
 5051ac0:	9809883a 	mov	r4,r19
 5051ac4:	5058be80 	call	5058be8 <__ssprint_r>
 5051ac8:	1039e11e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051acc:	d8802617 	ldw	r2,152(sp)
 5051ad0:	d8c02017 	ldw	r3,128(sp)
 5051ad4:	da000404 	addi	r8,sp,16
 5051ad8:	003e1c06 	br	505134c <_gp+0xfffe5f24>
 5051adc:	d8802917 	ldw	r2,164(sp)
 5051ae0:	00c00184 	movi	r3,6
 5051ae4:	1880012e 	bgeu	r3,r2,5051aec <___svfprintf_internal_r+0x1c30>
 5051ae8:	1805883a 	mov	r2,r3
 5051aec:	d8802e15 	stw	r2,184(sp)
 5051af0:	1000f316 	blt	r2,zero,5051ec0 <___svfprintf_internal_r+0x2004>
 5051af4:	040141b4 	movhi	r16,1286
 5051af8:	d8802a15 	stw	r2,168(sp)
 5051afc:	dd002d15 	stw	r20,180(sp)
 5051b00:	d8002915 	stw	zero,164(sp)
 5051b04:	d8003215 	stw	zero,200(sp)
 5051b08:	84049204 	addi	r16,r16,4680
 5051b0c:	0039883a 	mov	fp,zero
 5051b10:	003a9f06 	br	5050590 <_gp+0xfffe5168>
 5051b14:	010141b4 	movhi	r4,1286
 5051b18:	21049884 	addi	r4,r4,4706
 5051b1c:	d9003515 	stw	r4,212(sp)
 5051b20:	003b5f06 	br	50508a0 <_gp+0xfffe5478>
 5051b24:	d9402c17 	ldw	r5,176(sp)
 5051b28:	d9801e04 	addi	r6,sp,120
 5051b2c:	9809883a 	mov	r4,r19
 5051b30:	5058be80 	call	5058be8 <__ssprint_r>
 5051b34:	1039c61e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051b38:	d8802617 	ldw	r2,152(sp)
 5051b3c:	d9403317 	ldw	r5,204(sp)
 5051b40:	d8c02017 	ldw	r3,128(sp)
 5051b44:	da000404 	addi	r8,sp,16
 5051b48:	2885c83a 	sub	r2,r5,r2
 5051b4c:	003e1006 	br	5051390 <_gp+0xfffe5f68>
 5051b50:	00800044 	movi	r2,1
 5051b54:	10803fcc 	andi	r2,r2,255
 5051b58:	00c00044 	movi	r3,1
 5051b5c:	10fa3526 	beq	r2,r3,5050434 <_gp+0xfffe500c>
 5051b60:	00c00084 	movi	r3,2
 5051b64:	10fb9e26 	beq	r2,r3,50509e0 <_gp+0xfffe55b8>
 5051b68:	003a6406 	br	50504fc <_gp+0xfffe50d4>
 5051b6c:	0021883a 	mov	r16,zero
 5051b70:	003e0806 	br	5051394 <_gp+0xfffe5f6c>
 5051b74:	07000b44 	movi	fp,45
 5051b78:	df002785 	stb	fp,158(sp)
 5051b7c:	003a0b06 	br	50503ac <_gp+0xfffe4f84>
 5051b80:	d8c02d17 	ldw	r3,180(sp)
 5051b84:	d9002f17 	ldw	r4,188(sp)
 5051b88:	18800017 	ldw	r2,0(r3)
 5051b8c:	18c00104 	addi	r3,r3,4
 5051b90:	d8c02d15 	stw	r3,180(sp)
 5051b94:	11000015 	stw	r4,0(r2)
 5051b98:	0038f306 	br	504ff68 <_gp+0xfffe4b40>
 5051b9c:	00c00b44 	movi	r3,45
 5051ba0:	d8c02785 	stb	r3,158(sp)
 5051ba4:	d8802a15 	stw	r2,168(sp)
 5051ba8:	dc802b17 	ldw	r18,172(sp)
 5051bac:	d8002915 	stw	zero,164(sp)
 5051bb0:	07000b44 	movi	fp,45
 5051bb4:	003a7306 	br	5050584 <_gp+0xfffe515c>
 5051bb8:	9080004c 	andi	r2,r18,1
 5051bbc:	1000941e 	bne	r2,zero,5051e10 <___svfprintf_internal_r+0x1f54>
 5051bc0:	d8802117 	ldw	r2,132(sp)
 5051bc4:	1405c83a 	sub	r2,r2,r16
 5051bc8:	d8803315 	stw	r2,204(sp)
 5051bcc:	b441161e 	bne	r22,r17,5052028 <___svfprintf_internal_r+0x216c>
 5051bd0:	dd802617 	ldw	r22,152(sp)
 5051bd4:	00bfff44 	movi	r2,-3
 5051bd8:	b0801a16 	blt	r22,r2,5051c44 <___svfprintf_internal_r+0x1d88>
 5051bdc:	d9402917 	ldw	r5,164(sp)
 5051be0:	2d801816 	blt	r5,r22,5051c44 <___svfprintf_internal_r+0x1d88>
 5051be4:	dd803215 	stw	r22,200(sp)
 5051be8:	003f3a06 	br	50518d4 <_gp+0xfffe64ac>
 5051bec:	1025883a 	mov	r18,r2
 5051bf0:	0039883a 	mov	fp,zero
 5051bf4:	00800084 	movi	r2,2
 5051bf8:	003fd606 	br	5051b54 <_gp+0xfffe672c>
 5051bfc:	9080004c 	andi	r2,r18,1
 5051c00:	103f191e 	bne	r2,zero,5051868 <_gp+0xfffe6440>
 5051c04:	d8802117 	ldw	r2,132(sp)
 5051c08:	003f2806 	br	50518ac <_gp+0xfffe6484>
 5051c0c:	010141b4 	movhi	r4,1286
 5051c10:	21049484 	addi	r4,r4,4690
 5051c14:	d9002b15 	stw	r4,172(sp)
 5051c18:	003c7c06 	br	5050e0c <_gp+0xfffe59e4>
 5051c1c:	e005883a 	mov	r2,fp
 5051c20:	003f2206 	br	50518ac <_gp+0xfffe6484>
 5051c24:	d9402917 	ldw	r5,164(sp)
 5051c28:	df002783 	ldbu	fp,158(sp)
 5051c2c:	dd002d15 	stw	r20,180(sp)
 5051c30:	d9402a15 	stw	r5,168(sp)
 5051c34:	d9402e15 	stw	r5,184(sp)
 5051c38:	d8002915 	stw	zero,164(sp)
 5051c3c:	d8003215 	stw	zero,200(sp)
 5051c40:	003a4c06 	br	5050574 <_gp+0xfffe514c>
 5051c44:	8c7fff84 	addi	r17,r17,-2
 5051c48:	b5bfffc4 	addi	r22,r22,-1
 5051c4c:	dd802615 	stw	r22,152(sp)
 5051c50:	dc4022c5 	stb	r17,139(sp)
 5051c54:	b000c316 	blt	r22,zero,5051f64 <___svfprintf_internal_r+0x20a8>
 5051c58:	00800ac4 	movi	r2,43
 5051c5c:	d8802305 	stb	r2,140(sp)
 5051c60:	00800244 	movi	r2,9
 5051c64:	15806e16 	blt	r2,r22,5051e20 <___svfprintf_internal_r+0x1f64>
 5051c68:	00800c04 	movi	r2,48
 5051c6c:	b5800c04 	addi	r22,r22,48
 5051c70:	d8802345 	stb	r2,141(sp)
 5051c74:	dd802385 	stb	r22,142(sp)
 5051c78:	d88023c4 	addi	r2,sp,143
 5051c7c:	df0022c4 	addi	fp,sp,139
 5051c80:	d8c03317 	ldw	r3,204(sp)
 5051c84:	1739c83a 	sub	fp,r2,fp
 5051c88:	d9003317 	ldw	r4,204(sp)
 5051c8c:	e0c7883a 	add	r3,fp,r3
 5051c90:	df003b15 	stw	fp,236(sp)
 5051c94:	d8c02e15 	stw	r3,184(sp)
 5051c98:	00800044 	movi	r2,1
 5051c9c:	1100b70e 	bge	r2,r4,5051f7c <___svfprintf_internal_r+0x20c0>
 5051ca0:	d8c02e17 	ldw	r3,184(sp)
 5051ca4:	18c00044 	addi	r3,r3,1
 5051ca8:	d8c02e15 	stw	r3,184(sp)
 5051cac:	1805883a 	mov	r2,r3
 5051cb0:	1800b016 	blt	r3,zero,5051f74 <___svfprintf_internal_r+0x20b8>
 5051cb4:	d8003215 	stw	zero,200(sp)
 5051cb8:	003f1006 	br	50518fc <_gp+0xfffe64d4>
 5051cbc:	d8802917 	ldw	r2,164(sp)
 5051cc0:	103ec71e 	bne	r2,zero,50517e0 <_gp+0xfffe63b8>
 5051cc4:	dc002915 	stw	r16,164(sp)
 5051cc8:	003ec506 	br	50517e0 <_gp+0xfffe63b8>
 5051ccc:	d9402c17 	ldw	r5,176(sp)
 5051cd0:	d9801e04 	addi	r6,sp,120
 5051cd4:	9809883a 	mov	r4,r19
 5051cd8:	5058be80 	call	5058be8 <__ssprint_r>
 5051cdc:	10395c1e 	bne	r2,zero,5050250 <_gp+0xfffe4e28>
 5051ce0:	dc402617 	ldw	r17,152(sp)
 5051ce4:	d8c02017 	ldw	r3,128(sp)
 5051ce8:	d8801f17 	ldw	r2,124(sp)
 5051cec:	da000404 	addi	r8,sp,16
 5051cf0:	003e7706 	br	50516d0 <_gp+0xfffe62a8>
 5051cf4:	582f883a 	mov	r23,r11
 5051cf8:	d8002915 	stw	zero,164(sp)
 5051cfc:	0038c406 	br	5050010 <_gp+0xfffe4be8>
 5051d00:	d8c02917 	ldw	r3,164(sp)
 5051d04:	d8802104 	addi	r2,sp,132
 5051d08:	d8800315 	stw	r2,12(sp)
 5051d0c:	d9403617 	ldw	r5,216(sp)
 5051d10:	d8802504 	addi	r2,sp,148
 5051d14:	d8800215 	stw	r2,8(sp)
 5051d18:	d8802604 	addi	r2,sp,152
 5051d1c:	d8c00015 	stw	r3,0(sp)
 5051d20:	9809883a 	mov	r4,r19
 5051d24:	d8800115 	stw	r2,4(sp)
 5051d28:	01c000c4 	movi	r7,3
 5051d2c:	a00d883a 	mov	r6,r20
 5051d30:	da003e15 	stw	r8,248(sp)
 5051d34:	50547dc0 	call	50547dc <_dtoa_r>
 5051d38:	d9002917 	ldw	r4,164(sp)
 5051d3c:	da003e17 	ldw	r8,248(sp)
 5051d40:	1021883a 	mov	r16,r2
 5051d44:	1139883a 	add	fp,r2,r4
 5051d48:	2007883a 	mov	r3,r4
 5051d4c:	81000007 	ldb	r4,0(r16)
 5051d50:	00800c04 	movi	r2,48
 5051d54:	20806f26 	beq	r4,r2,5051f14 <___svfprintf_internal_r+0x2058>
 5051d58:	d8c02617 	ldw	r3,152(sp)
 5051d5c:	e0f9883a 	add	fp,fp,r3
 5051d60:	003ec206 	br	505186c <_gp+0xfffe6444>
 5051d64:	00c00b44 	movi	r3,45
 5051d68:	2520003c 	xorhi	r20,r4,32768
 5051d6c:	d8c02a05 	stb	r3,168(sp)
 5051d70:	003ea106 	br	50517f8 <_gp+0xfffe63d0>
 5051d74:	d8c03217 	ldw	r3,200(sp)
 5051d78:	00c0890e 	bge	zero,r3,5051fa0 <___svfprintf_internal_r+0x20e4>
 5051d7c:	00800044 	movi	r2,1
 5051d80:	d9003317 	ldw	r4,204(sp)
 5051d84:	1105883a 	add	r2,r2,r4
 5051d88:	d8802e15 	stw	r2,184(sp)
 5051d8c:	10005f16 	blt	r2,zero,5051f0c <___svfprintf_internal_r+0x2050>
 5051d90:	044019c4 	movi	r17,103
 5051d94:	003ed906 	br	50518fc <_gp+0xfffe64d4>
 5051d98:	d9002917 	ldw	r4,164(sp)
 5051d9c:	20c00044 	addi	r3,r4,1
 5051da0:	003e9c06 	br	5051814 <_gp+0xfffe63ec>
 5051da4:	d9002917 	ldw	r4,164(sp)
 5051da8:	00c0680e 	bge	zero,r3,5051f4c <___svfprintf_internal_r+0x2090>
 5051dac:	2000461e 	bne	r4,zero,5051ec8 <___svfprintf_internal_r+0x200c>
 5051db0:	9480004c 	andi	r18,r18,1
 5051db4:	9000441e 	bne	r18,zero,5051ec8 <___svfprintf_internal_r+0x200c>
 5051db8:	1805883a 	mov	r2,r3
 5051dbc:	1800a016 	blt	r3,zero,5052040 <___svfprintf_internal_r+0x2184>
 5051dc0:	d8c03217 	ldw	r3,200(sp)
 5051dc4:	d8c02e15 	stw	r3,184(sp)
 5051dc8:	003ecc06 	br	50518fc <_gp+0xfffe64d4>
 5051dcc:	d9402917 	ldw	r5,164(sp)
 5051dd0:	d8802104 	addi	r2,sp,132
 5051dd4:	d8800315 	stw	r2,12(sp)
 5051dd8:	d9400015 	stw	r5,0(sp)
 5051ddc:	d8802504 	addi	r2,sp,148
 5051de0:	d9403617 	ldw	r5,216(sp)
 5051de4:	d8800215 	stw	r2,8(sp)
 5051de8:	d8802604 	addi	r2,sp,152
 5051dec:	d8800115 	stw	r2,4(sp)
 5051df0:	01c000c4 	movi	r7,3
 5051df4:	a00d883a 	mov	r6,r20
 5051df8:	9809883a 	mov	r4,r19
 5051dfc:	da003e15 	stw	r8,248(sp)
 5051e00:	50547dc0 	call	50547dc <_dtoa_r>
 5051e04:	d8c02917 	ldw	r3,164(sp)
 5051e08:	da003e17 	ldw	r8,248(sp)
 5051e0c:	1021883a 	mov	r16,r2
 5051e10:	00801184 	movi	r2,70
 5051e14:	80f9883a 	add	fp,r16,r3
 5051e18:	88bfcc26 	beq	r17,r2,5051d4c <_gp+0xfffe6924>
 5051e1c:	003e9306 	br	505186c <_gp+0xfffe6444>
 5051e20:	df0022c4 	addi	fp,sp,139
 5051e24:	dc002915 	stw	r16,164(sp)
 5051e28:	9829883a 	mov	r20,r19
 5051e2c:	e021883a 	mov	r16,fp
 5051e30:	4027883a 	mov	r19,r8
 5051e34:	b009883a 	mov	r4,r22
 5051e38:	01400284 	movi	r5,10
 5051e3c:	504b3780 	call	504b378 <__modsi3>
 5051e40:	10800c04 	addi	r2,r2,48
 5051e44:	843fffc4 	addi	r16,r16,-1
 5051e48:	b009883a 	mov	r4,r22
 5051e4c:	01400284 	movi	r5,10
 5051e50:	80800005 	stb	r2,0(r16)
 5051e54:	504b2f40 	call	504b2f4 <__divsi3>
 5051e58:	102d883a 	mov	r22,r2
 5051e5c:	00800244 	movi	r2,9
 5051e60:	15bff416 	blt	r2,r22,5051e34 <_gp+0xfffe6a0c>
 5051e64:	9811883a 	mov	r8,r19
 5051e68:	b0800c04 	addi	r2,r22,48
 5051e6c:	a027883a 	mov	r19,r20
 5051e70:	8029883a 	mov	r20,r16
 5051e74:	a17fffc4 	addi	r5,r20,-1
 5051e78:	a0bfffc5 	stb	r2,-1(r20)
 5051e7c:	dc002917 	ldw	r16,164(sp)
 5051e80:	2f00752e 	bgeu	r5,fp,5052058 <___svfprintf_internal_r+0x219c>
 5051e84:	d9c02384 	addi	r7,sp,142
 5051e88:	3d0fc83a 	sub	r7,r7,r20
 5051e8c:	d9002344 	addi	r4,sp,141
 5051e90:	e1cf883a 	add	r7,fp,r7
 5051e94:	00000106 	br	5051e9c <___svfprintf_internal_r+0x1fe0>
 5051e98:	28800003 	ldbu	r2,0(r5)
 5051e9c:	20800005 	stb	r2,0(r4)
 5051ea0:	21000044 	addi	r4,r4,1
 5051ea4:	29400044 	addi	r5,r5,1
 5051ea8:	21fffb1e 	bne	r4,r7,5051e98 <_gp+0xfffe6a70>
 5051eac:	d8802304 	addi	r2,sp,140
 5051eb0:	1505c83a 	sub	r2,r2,r20
 5051eb4:	d8c02344 	addi	r3,sp,141
 5051eb8:	1885883a 	add	r2,r3,r2
 5051ebc:	003f7006 	br	5051c80 <_gp+0xfffe6858>
 5051ec0:	0005883a 	mov	r2,zero
 5051ec4:	003f0b06 	br	5051af4 <_gp+0xfffe66cc>
 5051ec8:	d9002917 	ldw	r4,164(sp)
 5051ecc:	d8c03217 	ldw	r3,200(sp)
 5051ed0:	20800044 	addi	r2,r4,1
 5051ed4:	1885883a 	add	r2,r3,r2
 5051ed8:	d8802e15 	stw	r2,184(sp)
 5051edc:	103e870e 	bge	r2,zero,50518fc <_gp+0xfffe64d4>
 5051ee0:	0005883a 	mov	r2,zero
 5051ee4:	003e8506 	br	50518fc <_gp+0xfffe64d4>
 5051ee8:	010141b4 	movhi	r4,1286
 5051eec:	21049484 	addi	r4,r4,4690
 5051ef0:	d9002b15 	stw	r4,172(sp)
 5051ef4:	003cc506 	br	505120c <_gp+0xfffe5de4>
 5051ef8:	d8c03217 	ldw	r3,200(sp)
 5051efc:	18c00044 	addi	r3,r3,1
 5051f00:	d8c02e15 	stw	r3,184(sp)
 5051f04:	1805883a 	mov	r2,r3
 5051f08:	183fa10e 	bge	r3,zero,5051d90 <_gp+0xfffe6968>
 5051f0c:	0005883a 	mov	r2,zero
 5051f10:	003f9f06 	br	5051d90 <_gp+0xfffe6968>
 5051f14:	d9003617 	ldw	r4,216(sp)
 5051f18:	000d883a 	mov	r6,zero
 5051f1c:	000f883a 	mov	r7,zero
 5051f20:	a00b883a 	mov	r5,r20
 5051f24:	d8c03d15 	stw	r3,244(sp)
 5051f28:	da003e15 	stw	r8,248(sp)
 5051f2c:	504daa80 	call	504daa8 <__eqdf2>
 5051f30:	d8c03d17 	ldw	r3,244(sp)
 5051f34:	da003e17 	ldw	r8,248(sp)
 5051f38:	103f8726 	beq	r2,zero,5051d58 <_gp+0xfffe6930>
 5051f3c:	00800044 	movi	r2,1
 5051f40:	10c7c83a 	sub	r3,r2,r3
 5051f44:	d8c02615 	stw	r3,152(sp)
 5051f48:	003f8406 	br	5051d5c <_gp+0xfffe6934>
 5051f4c:	20000e1e 	bne	r4,zero,5051f88 <___svfprintf_internal_r+0x20cc>
 5051f50:	9480004c 	andi	r18,r18,1
 5051f54:	90000c1e 	bne	r18,zero,5051f88 <___svfprintf_internal_r+0x20cc>
 5051f58:	00800044 	movi	r2,1
 5051f5c:	d8802e15 	stw	r2,184(sp)
 5051f60:	003e6606 	br	50518fc <_gp+0xfffe64d4>
 5051f64:	00800b44 	movi	r2,45
 5051f68:	05adc83a 	sub	r22,zero,r22
 5051f6c:	d8802305 	stb	r2,140(sp)
 5051f70:	003f3b06 	br	5051c60 <_gp+0xfffe6838>
 5051f74:	0005883a 	mov	r2,zero
 5051f78:	003f4e06 	br	5051cb4 <_gp+0xfffe688c>
 5051f7c:	90a4703a 	and	r18,r18,r2
 5051f80:	903f4a26 	beq	r18,zero,5051cac <_gp+0xfffe6884>
 5051f84:	003f4606 	br	5051ca0 <_gp+0xfffe6878>
 5051f88:	d8c02917 	ldw	r3,164(sp)
 5051f8c:	18c00084 	addi	r3,r3,2
 5051f90:	d8c02e15 	stw	r3,184(sp)
 5051f94:	1805883a 	mov	r2,r3
 5051f98:	183e580e 	bge	r3,zero,50518fc <_gp+0xfffe64d4>
 5051f9c:	003fd006 	br	5051ee0 <_gp+0xfffe6ab8>
 5051fa0:	00800084 	movi	r2,2
 5051fa4:	10c5c83a 	sub	r2,r2,r3
 5051fa8:	003f7506 	br	5051d80 <_gp+0xfffe6958>
 5051fac:	d8802d17 	ldw	r2,180(sp)
 5051fb0:	d9002d17 	ldw	r4,180(sp)
 5051fb4:	bc400043 	ldbu	r17,1(r23)
 5051fb8:	10800017 	ldw	r2,0(r2)
 5051fbc:	582f883a 	mov	r23,r11
 5051fc0:	d8802915 	stw	r2,164(sp)
 5051fc4:	20800104 	addi	r2,r4,4
 5051fc8:	d9002917 	ldw	r4,164(sp)
 5051fcc:	d8802d15 	stw	r2,180(sp)
 5051fd0:	203df00e 	bge	r4,zero,5051794 <_gp+0xfffe636c>
 5051fd4:	8c403fcc 	andi	r17,r17,255
 5051fd8:	00bfffc4 	movi	r2,-1
 5051fdc:	8c40201c 	xori	r17,r17,128
 5051fe0:	d8802915 	stw	r2,164(sp)
 5051fe4:	8c7fe004 	addi	r17,r17,-128
 5051fe8:	00380806 	br	505000c <_gp+0xfffe4be4>
 5051fec:	9080004c 	andi	r2,r18,1
 5051ff0:	0039883a 	mov	fp,zero
 5051ff4:	10000726 	beq	r2,zero,5052014 <___svfprintf_internal_r+0x2158>
 5051ff8:	d8c02817 	ldw	r3,160(sp)
 5051ffc:	dc001dc4 	addi	r16,sp,119
 5052000:	00800c04 	movi	r2,48
 5052004:	1c07c83a 	sub	r3,r3,r16
 5052008:	d8801dc5 	stb	r2,119(sp)
 505200c:	d8c02e15 	stw	r3,184(sp)
 5052010:	00395206 	br	505055c <_gp+0xfffe5134>
 5052014:	d8002e15 	stw	zero,184(sp)
 5052018:	dc001e04 	addi	r16,sp,120
 505201c:	00394f06 	br	505055c <_gp+0xfffe5134>
 5052020:	0005883a 	mov	r2,zero
 5052024:	003e3206 	br	50518f0 <_gp+0xfffe64c8>
 5052028:	dd802617 	ldw	r22,152(sp)
 505202c:	003f0606 	br	5051c48 <_gp+0xfffe6820>
 5052030:	d9c02785 	stb	r7,158(sp)
 5052034:	003a5106 	br	505097c <_gp+0xfffe5554>
 5052038:	d9c02785 	stb	r7,158(sp)
 505203c:	003a3706 	br	505091c <_gp+0xfffe54f4>
 5052040:	0005883a 	mov	r2,zero
 5052044:	003f5e06 	br	5051dc0 <_gp+0xfffe6998>
 5052048:	d9c02785 	stb	r7,158(sp)
 505204c:	00391706 	br	50504ac <_gp+0xfffe5084>
 5052050:	d9c02785 	stb	r7,158(sp)
 5052054:	0038e606 	br	50503f0 <_gp+0xfffe4fc8>
 5052058:	d8802344 	addi	r2,sp,141
 505205c:	003f0806 	br	5051c80 <_gp+0xfffe6858>
 5052060:	d9c02785 	stb	r7,158(sp)
 5052064:	0038b706 	br	5050344 <_gp+0xfffe4f1c>
 5052068:	d9c02785 	stb	r7,158(sp)
 505206c:	003adc06 	br	5050be0 <_gp+0xfffe57b8>
 5052070:	d9403917 	ldw	r5,228(sp)
 5052074:	00800304 	movi	r2,12
 5052078:	28800015 	stw	r2,0(r5)
 505207c:	00bfffc4 	movi	r2,-1
 5052080:	00387806 	br	5050264 <_gp+0xfffe4e3c>
 5052084:	d9c02785 	stb	r7,158(sp)
 5052088:	003abf06 	br	5050b88 <_gp+0xfffe5760>
 505208c:	d9c02785 	stb	r7,158(sp)
 5052090:	003a9b06 	br	5050b00 <_gp+0xfffe56d8>

05052094 <___vfprintf_internal_r>:
 5052094:	deffb804 	addi	sp,sp,-288
 5052098:	dfc04715 	stw	ra,284(sp)
 505209c:	ddc04515 	stw	r23,276(sp)
 50520a0:	dd404315 	stw	r21,268(sp)
 50520a4:	d9002c15 	stw	r4,176(sp)
 50520a8:	282f883a 	mov	r23,r5
 50520ac:	302b883a 	mov	r21,r6
 50520b0:	d9c02d15 	stw	r7,180(sp)
 50520b4:	df004615 	stw	fp,280(sp)
 50520b8:	dd804415 	stw	r22,272(sp)
 50520bc:	dd004215 	stw	r20,264(sp)
 50520c0:	dcc04115 	stw	r19,260(sp)
 50520c4:	dc804015 	stw	r18,256(sp)
 50520c8:	dc403f15 	stw	r17,252(sp)
 50520cc:	dc003e15 	stw	r16,248(sp)
 50520d0:	5056fd00 	call	5056fd0 <_localeconv_r>
 50520d4:	10800017 	ldw	r2,0(r2)
 50520d8:	1009883a 	mov	r4,r2
 50520dc:	d8803415 	stw	r2,208(sp)
 50520e0:	504fe240 	call	504fe24 <strlen>
 50520e4:	d8803715 	stw	r2,220(sp)
 50520e8:	d8802c17 	ldw	r2,176(sp)
 50520ec:	10000226 	beq	r2,zero,50520f8 <___vfprintf_internal_r+0x64>
 50520f0:	10800e17 	ldw	r2,56(r2)
 50520f4:	1000f926 	beq	r2,zero,50524dc <___vfprintf_internal_r+0x448>
 50520f8:	b880030b 	ldhu	r2,12(r23)
 50520fc:	10c8000c 	andi	r3,r2,8192
 5052100:	1800061e 	bne	r3,zero,505211c <___vfprintf_internal_r+0x88>
 5052104:	b9001917 	ldw	r4,100(r23)
 5052108:	00f7ffc4 	movi	r3,-8193
 505210c:	10880014 	ori	r2,r2,8192
 5052110:	20c6703a 	and	r3,r4,r3
 5052114:	b880030d 	sth	r2,12(r23)
 5052118:	b8c01915 	stw	r3,100(r23)
 505211c:	10c0020c 	andi	r3,r2,8
 5052120:	1800c126 	beq	r3,zero,5052428 <___vfprintf_internal_r+0x394>
 5052124:	b8c00417 	ldw	r3,16(r23)
 5052128:	1800bf26 	beq	r3,zero,5052428 <___vfprintf_internal_r+0x394>
 505212c:	1080068c 	andi	r2,r2,26
 5052130:	00c00284 	movi	r3,10
 5052134:	10c0c426 	beq	r2,r3,5052448 <___vfprintf_internal_r+0x3b4>
 5052138:	d8c00404 	addi	r3,sp,16
 505213c:	050141b4 	movhi	r20,1286
 5052140:	d9001e04 	addi	r4,sp,120
 5052144:	a5049c84 	addi	r20,r20,4722
 5052148:	d8c01e15 	stw	r3,120(sp)
 505214c:	d8002015 	stw	zero,128(sp)
 5052150:	d8001f15 	stw	zero,124(sp)
 5052154:	d8003315 	stw	zero,204(sp)
 5052158:	d8003615 	stw	zero,216(sp)
 505215c:	d8003815 	stw	zero,224(sp)
 5052160:	1811883a 	mov	r8,r3
 5052164:	d8003915 	stw	zero,228(sp)
 5052168:	d8003a15 	stw	zero,232(sp)
 505216c:	d8002f15 	stw	zero,188(sp)
 5052170:	d9002815 	stw	r4,160(sp)
 5052174:	a8800007 	ldb	r2,0(r21)
 5052178:	10027b26 	beq	r2,zero,5052b68 <___vfprintf_internal_r+0xad4>
 505217c:	00c00944 	movi	r3,37
 5052180:	a821883a 	mov	r16,r21
 5052184:	10c0021e 	bne	r2,r3,5052190 <___vfprintf_internal_r+0xfc>
 5052188:	00001406 	br	50521dc <___vfprintf_internal_r+0x148>
 505218c:	10c00326 	beq	r2,r3,505219c <___vfprintf_internal_r+0x108>
 5052190:	84000044 	addi	r16,r16,1
 5052194:	80800007 	ldb	r2,0(r16)
 5052198:	103ffc1e 	bne	r2,zero,505218c <_gp+0xfffe6d64>
 505219c:	8563c83a 	sub	r17,r16,r21
 50521a0:	88000e26 	beq	r17,zero,50521dc <___vfprintf_internal_r+0x148>
 50521a4:	d8c02017 	ldw	r3,128(sp)
 50521a8:	d8801f17 	ldw	r2,124(sp)
 50521ac:	45400015 	stw	r21,0(r8)
 50521b0:	1c47883a 	add	r3,r3,r17
 50521b4:	10800044 	addi	r2,r2,1
 50521b8:	d8c02015 	stw	r3,128(sp)
 50521bc:	44400115 	stw	r17,4(r8)
 50521c0:	d8801f15 	stw	r2,124(sp)
 50521c4:	00c001c4 	movi	r3,7
 50521c8:	1880a716 	blt	r3,r2,5052468 <___vfprintf_internal_r+0x3d4>
 50521cc:	42000204 	addi	r8,r8,8
 50521d0:	d9402f17 	ldw	r5,188(sp)
 50521d4:	2c4b883a 	add	r5,r5,r17
 50521d8:	d9402f15 	stw	r5,188(sp)
 50521dc:	80800007 	ldb	r2,0(r16)
 50521e0:	1000a826 	beq	r2,zero,5052484 <___vfprintf_internal_r+0x3f0>
 50521e4:	84400047 	ldb	r17,1(r16)
 50521e8:	00bfffc4 	movi	r2,-1
 50521ec:	85400044 	addi	r21,r16,1
 50521f0:	d8002785 	stb	zero,158(sp)
 50521f4:	0007883a 	mov	r3,zero
 50521f8:	000f883a 	mov	r7,zero
 50521fc:	d8802915 	stw	r2,164(sp)
 5052200:	d8003115 	stw	zero,196(sp)
 5052204:	0025883a 	mov	r18,zero
 5052208:	01401604 	movi	r5,88
 505220c:	01800244 	movi	r6,9
 5052210:	02800a84 	movi	r10,42
 5052214:	02401b04 	movi	r9,108
 5052218:	ad400044 	addi	r21,r21,1
 505221c:	88bff804 	addi	r2,r17,-32
 5052220:	28830436 	bltu	r5,r2,5052e34 <___vfprintf_internal_r+0xda0>
 5052224:	100490ba 	slli	r2,r2,2
 5052228:	01014174 	movhi	r4,1285
 505222c:	21088f04 	addi	r4,r4,8764
 5052230:	1105883a 	add	r2,r2,r4
 5052234:	10800017 	ldw	r2,0(r2)
 5052238:	1000683a 	jmp	r2
 505223c:	05052d54 	movui	r20,5301
 5052240:	05052e34 	movhi	r20,5304
 5052244:	05052e34 	movhi	r20,5304
 5052248:	05052d74 	movhi	r20,5301
 505224c:	05052e34 	movhi	r20,5304
 5052250:	05052e34 	movhi	r20,5304
 5052254:	05052e34 	movhi	r20,5304
 5052258:	05052e34 	movhi	r20,5304
 505225c:	05052e34 	movhi	r20,5304
 5052260:	05052e34 	movhi	r20,5304
 5052264:	050524e8 	cmpgeui	r20,zero,5267
 5052268:	05052c90 	cmplti	r20,zero,5298
 505226c:	05052e34 	movhi	r20,5304
 5052270:	050523b0 	cmpltui	r20,zero,5262
 5052274:	05052510 	cmplti	r20,zero,5268
 5052278:	05052e34 	movhi	r20,5304
 505227c:	05052550 	cmplti	r20,zero,5269
 5052280:	0505255c 	xori	r20,zero,5269
 5052284:	0505255c 	xori	r20,zero,5269
 5052288:	0505255c 	xori	r20,zero,5269
 505228c:	0505255c 	xori	r20,zero,5269
 5052290:	0505255c 	xori	r20,zero,5269
 5052294:	0505255c 	xori	r20,zero,5269
 5052298:	0505255c 	xori	r20,zero,5269
 505229c:	0505255c 	xori	r20,zero,5269
 50522a0:	0505255c 	xori	r20,zero,5269
 50522a4:	05052e34 	movhi	r20,5304
 50522a8:	05052e34 	movhi	r20,5304
 50522ac:	05052e34 	movhi	r20,5304
 50522b0:	05052e34 	movhi	r20,5304
 50522b4:	05052e34 	movhi	r20,5304
 50522b8:	05052e34 	movhi	r20,5304
 50522bc:	05052e34 	movhi	r20,5304
 50522c0:	05052e34 	movhi	r20,5304
 50522c4:	05052e34 	movhi	r20,5304
 50522c8:	05052e34 	movhi	r20,5304
 50522cc:	05052590 	cmplti	r20,zero,5270
 50522d0:	0505264c 	andi	r20,zero,5273
 50522d4:	05052e34 	movhi	r20,5304
 50522d8:	0505264c 	andi	r20,zero,5273
 50522dc:	05052e34 	movhi	r20,5304
 50522e0:	05052e34 	movhi	r20,5304
 50522e4:	05052e34 	movhi	r20,5304
 50522e8:	05052e34 	movhi	r20,5304
 50522ec:	050526ec 	andhi	r20,zero,5275
 50522f0:	05052e34 	movhi	r20,5304
 50522f4:	05052e34 	movhi	r20,5304
 50522f8:	050526f8 	rdprs	r20,zero,5275
 50522fc:	05052e34 	movhi	r20,5304
 5052300:	05052e34 	movhi	r20,5304
 5052304:	05052e34 	movhi	r20,5304
 5052308:	05052e34 	movhi	r20,5304
 505230c:	05052e34 	movhi	r20,5304
 5052310:	05052b70 	cmpltui	r20,zero,5293
 5052314:	05052e34 	movhi	r20,5304
 5052318:	05052e34 	movhi	r20,5304
 505231c:	05052bd0 	cmplti	r20,zero,5295
 5052320:	05052e34 	movhi	r20,5304
 5052324:	05052e34 	movhi	r20,5304
 5052328:	05052e34 	movhi	r20,5304
 505232c:	05052e34 	movhi	r20,5304
 5052330:	05052e34 	movhi	r20,5304
 5052334:	05052e34 	movhi	r20,5304
 5052338:	05052e34 	movhi	r20,5304
 505233c:	05052e34 	movhi	r20,5304
 5052340:	05052e34 	movhi	r20,5304
 5052344:	05052e34 	movhi	r20,5304
 5052348:	05052de0 	cmpeqi	r20,zero,5303
 505234c:	05052d80 	call	5052d8 <__alt_mem_new_sdram_controller_0+0x5052d8>
 5052350:	0505264c 	andi	r20,zero,5273
 5052354:	0505264c 	andi	r20,zero,5273
 5052358:	0505264c 	andi	r20,zero,5273
 505235c:	05052d90 	cmplti	r20,zero,5302
 5052360:	05052d80 	call	5052d8 <__alt_mem_new_sdram_controller_0+0x5052d8>
 5052364:	05052e34 	movhi	r20,5304
 5052368:	05052e34 	movhi	r20,5304
 505236c:	05052d9c 	xori	r20,zero,5302
 5052370:	05052e34 	movhi	r20,5304
 5052374:	05052dac 	andhi	r20,zero,5302
 5052378:	05052c80 	call	5052c8 <__alt_mem_new_sdram_controller_0+0x5052c8>
 505237c:	050523bc 	xorhi	r20,zero,5262
 5052380:	05052ca0 	cmpeqi	r20,zero,5298
 5052384:	05052e34 	movhi	r20,5304
 5052388:	05052cac 	andhi	r20,zero,5298
 505238c:	05052e34 	movhi	r20,5304
 5052390:	05052d08 	cmpgei	r20,zero,5300
 5052394:	05052e34 	movhi	r20,5304
 5052398:	05052e34 	movhi	r20,5304
 505239c:	05052d18 	cmpnei	r20,zero,5300
 50523a0:	d9003117 	ldw	r4,196(sp)
 50523a4:	d8802d15 	stw	r2,180(sp)
 50523a8:	0109c83a 	sub	r4,zero,r4
 50523ac:	d9003115 	stw	r4,196(sp)
 50523b0:	94800114 	ori	r18,r18,4
 50523b4:	ac400007 	ldb	r17,0(r21)
 50523b8:	003f9706 	br	5052218 <_gp+0xfffe6df0>
 50523bc:	00800c04 	movi	r2,48
 50523c0:	d9002d17 	ldw	r4,180(sp)
 50523c4:	d9402917 	ldw	r5,164(sp)
 50523c8:	d8802705 	stb	r2,156(sp)
 50523cc:	00801e04 	movi	r2,120
 50523d0:	d8802745 	stb	r2,157(sp)
 50523d4:	d8002785 	stb	zero,158(sp)
 50523d8:	20c00104 	addi	r3,r4,4
 50523dc:	24c00017 	ldw	r19,0(r4)
 50523e0:	002d883a 	mov	r22,zero
 50523e4:	90800094 	ori	r2,r18,2
 50523e8:	28029a16 	blt	r5,zero,5052e54 <___vfprintf_internal_r+0xdc0>
 50523ec:	00bfdfc4 	movi	r2,-129
 50523f0:	90a4703a 	and	r18,r18,r2
 50523f4:	d8c02d15 	stw	r3,180(sp)
 50523f8:	94800094 	ori	r18,r18,2
 50523fc:	9802871e 	bne	r19,zero,5052e1c <___vfprintf_internal_r+0xd88>
 5052400:	008141b4 	movhi	r2,1286
 5052404:	10848d04 	addi	r2,r2,4660
 5052408:	d8803915 	stw	r2,228(sp)
 505240c:	04401e04 	movi	r17,120
 5052410:	d8802917 	ldw	r2,164(sp)
 5052414:	0039883a 	mov	fp,zero
 5052418:	1001e926 	beq	r2,zero,5052bc0 <___vfprintf_internal_r+0xb2c>
 505241c:	0027883a 	mov	r19,zero
 5052420:	002d883a 	mov	r22,zero
 5052424:	00020506 	br	5052c3c <___vfprintf_internal_r+0xba8>
 5052428:	d9002c17 	ldw	r4,176(sp)
 505242c:	b80b883a 	mov	r5,r23
 5052430:	50544880 	call	5054488 <__swsetup_r>
 5052434:	1005ac1e 	bne	r2,zero,5053ae8 <___vfprintf_internal_r+0x1a54>
 5052438:	b880030b 	ldhu	r2,12(r23)
 505243c:	00c00284 	movi	r3,10
 5052440:	1080068c 	andi	r2,r2,26
 5052444:	10ff3c1e 	bne	r2,r3,5052138 <_gp+0xfffe6d10>
 5052448:	b880038f 	ldh	r2,14(r23)
 505244c:	103f3a16 	blt	r2,zero,5052138 <_gp+0xfffe6d10>
 5052450:	d9c02d17 	ldw	r7,180(sp)
 5052454:	d9002c17 	ldw	r4,176(sp)
 5052458:	a80d883a 	mov	r6,r21
 505245c:	b80b883a 	mov	r5,r23
 5052460:	50542a80 	call	50542a8 <__sbprintf>
 5052464:	00001106 	br	50524ac <___vfprintf_internal_r+0x418>
 5052468:	d9002c17 	ldw	r4,176(sp)
 505246c:	d9801e04 	addi	r6,sp,120
 5052470:	b80b883a 	mov	r5,r23
 5052474:	505a0f00 	call	505a0f0 <__sprint_r>
 5052478:	1000081e 	bne	r2,zero,505249c <___vfprintf_internal_r+0x408>
 505247c:	da000404 	addi	r8,sp,16
 5052480:	003f5306 	br	50521d0 <_gp+0xfffe6da8>
 5052484:	d8802017 	ldw	r2,128(sp)
 5052488:	10000426 	beq	r2,zero,505249c <___vfprintf_internal_r+0x408>
 505248c:	d9002c17 	ldw	r4,176(sp)
 5052490:	d9801e04 	addi	r6,sp,120
 5052494:	b80b883a 	mov	r5,r23
 5052498:	505a0f00 	call	505a0f0 <__sprint_r>
 505249c:	b880030b 	ldhu	r2,12(r23)
 50524a0:	1080100c 	andi	r2,r2,64
 50524a4:	1005901e 	bne	r2,zero,5053ae8 <___vfprintf_internal_r+0x1a54>
 50524a8:	d8802f17 	ldw	r2,188(sp)
 50524ac:	dfc04717 	ldw	ra,284(sp)
 50524b0:	df004617 	ldw	fp,280(sp)
 50524b4:	ddc04517 	ldw	r23,276(sp)
 50524b8:	dd804417 	ldw	r22,272(sp)
 50524bc:	dd404317 	ldw	r21,268(sp)
 50524c0:	dd004217 	ldw	r20,264(sp)
 50524c4:	dcc04117 	ldw	r19,260(sp)
 50524c8:	dc804017 	ldw	r18,256(sp)
 50524cc:	dc403f17 	ldw	r17,252(sp)
 50524d0:	dc003e17 	ldw	r16,248(sp)
 50524d4:	dec04804 	addi	sp,sp,288
 50524d8:	f800283a 	ret
 50524dc:	d9002c17 	ldw	r4,176(sp)
 50524e0:	505645c0 	call	505645c <__sinit>
 50524e4:	003f0406 	br	50520f8 <_gp+0xfffe6cd0>
 50524e8:	d8802d17 	ldw	r2,180(sp)
 50524ec:	d9002d17 	ldw	r4,180(sp)
 50524f0:	10800017 	ldw	r2,0(r2)
 50524f4:	d8803115 	stw	r2,196(sp)
 50524f8:	20800104 	addi	r2,r4,4
 50524fc:	d9003117 	ldw	r4,196(sp)
 5052500:	203fa716 	blt	r4,zero,50523a0 <_gp+0xfffe6f78>
 5052504:	d8802d15 	stw	r2,180(sp)
 5052508:	ac400007 	ldb	r17,0(r21)
 505250c:	003f4206 	br	5052218 <_gp+0xfffe6df0>
 5052510:	ac400007 	ldb	r17,0(r21)
 5052514:	aac00044 	addi	r11,r21,1
 5052518:	8a872826 	beq	r17,r10,50541bc <___vfprintf_internal_r+0x2128>
 505251c:	88bff404 	addi	r2,r17,-48
 5052520:	0009883a 	mov	r4,zero
 5052524:	30867d36 	bltu	r6,r2,5053f1c <___vfprintf_internal_r+0x1e88>
 5052528:	5c400007 	ldb	r17,0(r11)
 505252c:	210002a4 	muli	r4,r4,10
 5052530:	5d400044 	addi	r21,r11,1
 5052534:	a817883a 	mov	r11,r21
 5052538:	2089883a 	add	r4,r4,r2
 505253c:	88bff404 	addi	r2,r17,-48
 5052540:	30bff92e 	bgeu	r6,r2,5052528 <_gp+0xfffe7100>
 5052544:	2005c916 	blt	r4,zero,5053c6c <___vfprintf_internal_r+0x1bd8>
 5052548:	d9002915 	stw	r4,164(sp)
 505254c:	003f3306 	br	505221c <_gp+0xfffe6df4>
 5052550:	94802014 	ori	r18,r18,128
 5052554:	ac400007 	ldb	r17,0(r21)
 5052558:	003f2f06 	br	5052218 <_gp+0xfffe6df0>
 505255c:	a809883a 	mov	r4,r21
 5052560:	d8003115 	stw	zero,196(sp)
 5052564:	88bff404 	addi	r2,r17,-48
 5052568:	0017883a 	mov	r11,zero
 505256c:	24400007 	ldb	r17,0(r4)
 5052570:	5ac002a4 	muli	r11,r11,10
 5052574:	ad400044 	addi	r21,r21,1
 5052578:	a809883a 	mov	r4,r21
 505257c:	12d7883a 	add	r11,r2,r11
 5052580:	88bff404 	addi	r2,r17,-48
 5052584:	30bff92e 	bgeu	r6,r2,505256c <_gp+0xfffe7144>
 5052588:	dac03115 	stw	r11,196(sp)
 505258c:	003f2306 	br	505221c <_gp+0xfffe6df4>
 5052590:	18c03fcc 	andi	r3,r3,255
 5052594:	18072b1e 	bne	r3,zero,5054244 <___vfprintf_internal_r+0x21b0>
 5052598:	94800414 	ori	r18,r18,16
 505259c:	9080080c 	andi	r2,r18,32
 50525a0:	10037b26 	beq	r2,zero,5053390 <___vfprintf_internal_r+0x12fc>
 50525a4:	d9402d17 	ldw	r5,180(sp)
 50525a8:	28800117 	ldw	r2,4(r5)
 50525ac:	2cc00017 	ldw	r19,0(r5)
 50525b0:	29400204 	addi	r5,r5,8
 50525b4:	d9402d15 	stw	r5,180(sp)
 50525b8:	102d883a 	mov	r22,r2
 50525bc:	10044b16 	blt	r2,zero,50536ec <___vfprintf_internal_r+0x1658>
 50525c0:	d9402917 	ldw	r5,164(sp)
 50525c4:	df002783 	ldbu	fp,158(sp)
 50525c8:	2803bc16 	blt	r5,zero,50534bc <___vfprintf_internal_r+0x1428>
 50525cc:	00ffdfc4 	movi	r3,-129
 50525d0:	9d84b03a 	or	r2,r19,r22
 50525d4:	90e4703a 	and	r18,r18,r3
 50525d8:	10017726 	beq	r2,zero,5052bb8 <___vfprintf_internal_r+0xb24>
 50525dc:	b0038326 	beq	r22,zero,50533ec <___vfprintf_internal_r+0x1358>
 50525e0:	dc402a15 	stw	r17,168(sp)
 50525e4:	dc001e04 	addi	r16,sp,120
 50525e8:	b023883a 	mov	r17,r22
 50525ec:	402d883a 	mov	r22,r8
 50525f0:	9809883a 	mov	r4,r19
 50525f4:	880b883a 	mov	r5,r17
 50525f8:	01800284 	movi	r6,10
 50525fc:	000f883a 	mov	r7,zero
 5052600:	505c4e80 	call	505c4e8 <__umoddi3>
 5052604:	10800c04 	addi	r2,r2,48
 5052608:	843fffc4 	addi	r16,r16,-1
 505260c:	9809883a 	mov	r4,r19
 5052610:	880b883a 	mov	r5,r17
 5052614:	80800005 	stb	r2,0(r16)
 5052618:	01800284 	movi	r6,10
 505261c:	000f883a 	mov	r7,zero
 5052620:	505bf700 	call	505bf70 <__udivdi3>
 5052624:	1027883a 	mov	r19,r2
 5052628:	10c4b03a 	or	r2,r2,r3
 505262c:	1823883a 	mov	r17,r3
 5052630:	103fef1e 	bne	r2,zero,50525f0 <_gp+0xfffe71c8>
 5052634:	d8c02817 	ldw	r3,160(sp)
 5052638:	dc402a17 	ldw	r17,168(sp)
 505263c:	b011883a 	mov	r8,r22
 5052640:	1c07c83a 	sub	r3,r3,r16
 5052644:	d8c02e15 	stw	r3,184(sp)
 5052648:	00005906 	br	50527b0 <___vfprintf_internal_r+0x71c>
 505264c:	18c03fcc 	andi	r3,r3,255
 5052650:	1806fa1e 	bne	r3,zero,505423c <___vfprintf_internal_r+0x21a8>
 5052654:	9080020c 	andi	r2,r18,8
 5052658:	10048a26 	beq	r2,zero,5053884 <___vfprintf_internal_r+0x17f0>
 505265c:	d8c02d17 	ldw	r3,180(sp)
 5052660:	d9002d17 	ldw	r4,180(sp)
 5052664:	d9402d17 	ldw	r5,180(sp)
 5052668:	18c00017 	ldw	r3,0(r3)
 505266c:	21000117 	ldw	r4,4(r4)
 5052670:	29400204 	addi	r5,r5,8
 5052674:	d8c03615 	stw	r3,216(sp)
 5052678:	d9003815 	stw	r4,224(sp)
 505267c:	d9402d15 	stw	r5,180(sp)
 5052680:	d9003617 	ldw	r4,216(sp)
 5052684:	d9403817 	ldw	r5,224(sp)
 5052688:	da003d15 	stw	r8,244(sp)
 505268c:	04000044 	movi	r16,1
 5052690:	505895c0 	call	505895c <__fpclassifyd>
 5052694:	da003d17 	ldw	r8,244(sp)
 5052698:	14041f1e 	bne	r2,r16,5053718 <___vfprintf_internal_r+0x1684>
 505269c:	d9003617 	ldw	r4,216(sp)
 50526a0:	d9403817 	ldw	r5,224(sp)
 50526a4:	000d883a 	mov	r6,zero
 50526a8:	000f883a 	mov	r7,zero
 50526ac:	505ca200 	call	505ca20 <__ledf2>
 50526b0:	da003d17 	ldw	r8,244(sp)
 50526b4:	1005be16 	blt	r2,zero,5053db0 <___vfprintf_internal_r+0x1d1c>
 50526b8:	df002783 	ldbu	fp,158(sp)
 50526bc:	008011c4 	movi	r2,71
 50526c0:	1445330e 	bge	r2,r17,5053b90 <___vfprintf_internal_r+0x1afc>
 50526c4:	040141b4 	movhi	r16,1286
 50526c8:	84048504 	addi	r16,r16,4628
 50526cc:	00c000c4 	movi	r3,3
 50526d0:	00bfdfc4 	movi	r2,-129
 50526d4:	d8c02a15 	stw	r3,168(sp)
 50526d8:	90a4703a 	and	r18,r18,r2
 50526dc:	d8c02e15 	stw	r3,184(sp)
 50526e0:	d8002915 	stw	zero,164(sp)
 50526e4:	d8003215 	stw	zero,200(sp)
 50526e8:	00003706 	br	50527c8 <___vfprintf_internal_r+0x734>
 50526ec:	94800214 	ori	r18,r18,8
 50526f0:	ac400007 	ldb	r17,0(r21)
 50526f4:	003ec806 	br	5052218 <_gp+0xfffe6df0>
 50526f8:	18c03fcc 	andi	r3,r3,255
 50526fc:	1806db1e 	bne	r3,zero,505426c <___vfprintf_internal_r+0x21d8>
 5052700:	94800414 	ori	r18,r18,16
 5052704:	9080080c 	andi	r2,r18,32
 5052708:	1002d826 	beq	r2,zero,505326c <___vfprintf_internal_r+0x11d8>
 505270c:	d9402d17 	ldw	r5,180(sp)
 5052710:	d8c02917 	ldw	r3,164(sp)
 5052714:	d8002785 	stb	zero,158(sp)
 5052718:	28800204 	addi	r2,r5,8
 505271c:	2cc00017 	ldw	r19,0(r5)
 5052720:	2d800117 	ldw	r22,4(r5)
 5052724:	18048f16 	blt	r3,zero,5053964 <___vfprintf_internal_r+0x18d0>
 5052728:	013fdfc4 	movi	r4,-129
 505272c:	9d86b03a 	or	r3,r19,r22
 5052730:	d8802d15 	stw	r2,180(sp)
 5052734:	9124703a 	and	r18,r18,r4
 5052738:	1802d91e 	bne	r3,zero,50532a0 <___vfprintf_internal_r+0x120c>
 505273c:	d8c02917 	ldw	r3,164(sp)
 5052740:	0039883a 	mov	fp,zero
 5052744:	1805c326 	beq	r3,zero,5053e54 <___vfprintf_internal_r+0x1dc0>
 5052748:	0027883a 	mov	r19,zero
 505274c:	002d883a 	mov	r22,zero
 5052750:	dc001e04 	addi	r16,sp,120
 5052754:	9806d0fa 	srli	r3,r19,3
 5052758:	b008977a 	slli	r4,r22,29
 505275c:	b02cd0fa 	srli	r22,r22,3
 5052760:	9cc001cc 	andi	r19,r19,7
 5052764:	98800c04 	addi	r2,r19,48
 5052768:	843fffc4 	addi	r16,r16,-1
 505276c:	20e6b03a 	or	r19,r4,r3
 5052770:	80800005 	stb	r2,0(r16)
 5052774:	9d86b03a 	or	r3,r19,r22
 5052778:	183ff61e 	bne	r3,zero,5052754 <_gp+0xfffe732c>
 505277c:	90c0004c 	andi	r3,r18,1
 5052780:	18013b26 	beq	r3,zero,5052c70 <___vfprintf_internal_r+0xbdc>
 5052784:	10803fcc 	andi	r2,r2,255
 5052788:	1080201c 	xori	r2,r2,128
 505278c:	10bfe004 	addi	r2,r2,-128
 5052790:	00c00c04 	movi	r3,48
 5052794:	10c13626 	beq	r2,r3,5052c70 <___vfprintf_internal_r+0xbdc>
 5052798:	80ffffc5 	stb	r3,-1(r16)
 505279c:	d8c02817 	ldw	r3,160(sp)
 50527a0:	80bfffc4 	addi	r2,r16,-1
 50527a4:	1021883a 	mov	r16,r2
 50527a8:	1887c83a 	sub	r3,r3,r2
 50527ac:	d8c02e15 	stw	r3,184(sp)
 50527b0:	d8802e17 	ldw	r2,184(sp)
 50527b4:	d9002917 	ldw	r4,164(sp)
 50527b8:	1100010e 	bge	r2,r4,50527c0 <___vfprintf_internal_r+0x72c>
 50527bc:	2005883a 	mov	r2,r4
 50527c0:	d8802a15 	stw	r2,168(sp)
 50527c4:	d8003215 	stw	zero,200(sp)
 50527c8:	e7003fcc 	andi	fp,fp,255
 50527cc:	e700201c 	xori	fp,fp,128
 50527d0:	e73fe004 	addi	fp,fp,-128
 50527d4:	e0000326 	beq	fp,zero,50527e4 <___vfprintf_internal_r+0x750>
 50527d8:	d8c02a17 	ldw	r3,168(sp)
 50527dc:	18c00044 	addi	r3,r3,1
 50527e0:	d8c02a15 	stw	r3,168(sp)
 50527e4:	90c0008c 	andi	r3,r18,2
 50527e8:	d8c02b15 	stw	r3,172(sp)
 50527ec:	18000326 	beq	r3,zero,50527fc <___vfprintf_internal_r+0x768>
 50527f0:	d8c02a17 	ldw	r3,168(sp)
 50527f4:	18c00084 	addi	r3,r3,2
 50527f8:	d8c02a15 	stw	r3,168(sp)
 50527fc:	90c0210c 	andi	r3,r18,132
 5052800:	d8c03015 	stw	r3,192(sp)
 5052804:	1801a31e 	bne	r3,zero,5052e94 <___vfprintf_internal_r+0xe00>
 5052808:	d9003117 	ldw	r4,196(sp)
 505280c:	d8c02a17 	ldw	r3,168(sp)
 5052810:	20e7c83a 	sub	r19,r4,r3
 5052814:	04c19f0e 	bge	zero,r19,5052e94 <___vfprintf_internal_r+0xe00>
 5052818:	02400404 	movi	r9,16
 505281c:	d8c02017 	ldw	r3,128(sp)
 5052820:	d8801f17 	ldw	r2,124(sp)
 5052824:	4cc50d0e 	bge	r9,r19,5053c5c <___vfprintf_internal_r+0x1bc8>
 5052828:	014141b4 	movhi	r5,1286
 505282c:	2944a084 	addi	r5,r5,4738
 5052830:	dc403b15 	stw	r17,236(sp)
 5052834:	d9403515 	stw	r5,212(sp)
 5052838:	9823883a 	mov	r17,r19
 505283c:	482d883a 	mov	r22,r9
 5052840:	9027883a 	mov	r19,r18
 5052844:	070001c4 	movi	fp,7
 5052848:	8025883a 	mov	r18,r16
 505284c:	dc002c17 	ldw	r16,176(sp)
 5052850:	00000306 	br	5052860 <___vfprintf_internal_r+0x7cc>
 5052854:	8c7ffc04 	addi	r17,r17,-16
 5052858:	42000204 	addi	r8,r8,8
 505285c:	b440130e 	bge	r22,r17,50528ac <___vfprintf_internal_r+0x818>
 5052860:	010141b4 	movhi	r4,1286
 5052864:	18c00404 	addi	r3,r3,16
 5052868:	10800044 	addi	r2,r2,1
 505286c:	2104a084 	addi	r4,r4,4738
 5052870:	41000015 	stw	r4,0(r8)
 5052874:	45800115 	stw	r22,4(r8)
 5052878:	d8c02015 	stw	r3,128(sp)
 505287c:	d8801f15 	stw	r2,124(sp)
 5052880:	e0bff40e 	bge	fp,r2,5052854 <_gp+0xfffe742c>
 5052884:	d9801e04 	addi	r6,sp,120
 5052888:	b80b883a 	mov	r5,r23
 505288c:	8009883a 	mov	r4,r16
 5052890:	505a0f00 	call	505a0f0 <__sprint_r>
 5052894:	103f011e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5052898:	8c7ffc04 	addi	r17,r17,-16
 505289c:	d8c02017 	ldw	r3,128(sp)
 50528a0:	d8801f17 	ldw	r2,124(sp)
 50528a4:	da000404 	addi	r8,sp,16
 50528a8:	b47fed16 	blt	r22,r17,5052860 <_gp+0xfffe7438>
 50528ac:	9021883a 	mov	r16,r18
 50528b0:	9825883a 	mov	r18,r19
 50528b4:	8827883a 	mov	r19,r17
 50528b8:	dc403b17 	ldw	r17,236(sp)
 50528bc:	d9403517 	ldw	r5,212(sp)
 50528c0:	98c7883a 	add	r3,r19,r3
 50528c4:	10800044 	addi	r2,r2,1
 50528c8:	41400015 	stw	r5,0(r8)
 50528cc:	44c00115 	stw	r19,4(r8)
 50528d0:	d8c02015 	stw	r3,128(sp)
 50528d4:	d8801f15 	stw	r2,124(sp)
 50528d8:	010001c4 	movi	r4,7
 50528dc:	2082a316 	blt	r4,r2,505336c <___vfprintf_internal_r+0x12d8>
 50528e0:	df002787 	ldb	fp,158(sp)
 50528e4:	42000204 	addi	r8,r8,8
 50528e8:	e0000c26 	beq	fp,zero,505291c <___vfprintf_internal_r+0x888>
 50528ec:	d8801f17 	ldw	r2,124(sp)
 50528f0:	d9002784 	addi	r4,sp,158
 50528f4:	18c00044 	addi	r3,r3,1
 50528f8:	10800044 	addi	r2,r2,1
 50528fc:	41000015 	stw	r4,0(r8)
 5052900:	01000044 	movi	r4,1
 5052904:	41000115 	stw	r4,4(r8)
 5052908:	d8c02015 	stw	r3,128(sp)
 505290c:	d8801f15 	stw	r2,124(sp)
 5052910:	010001c4 	movi	r4,7
 5052914:	20823c16 	blt	r4,r2,5053208 <___vfprintf_internal_r+0x1174>
 5052918:	42000204 	addi	r8,r8,8
 505291c:	d8802b17 	ldw	r2,172(sp)
 5052920:	10000c26 	beq	r2,zero,5052954 <___vfprintf_internal_r+0x8c0>
 5052924:	d8801f17 	ldw	r2,124(sp)
 5052928:	d9002704 	addi	r4,sp,156
 505292c:	18c00084 	addi	r3,r3,2
 5052930:	10800044 	addi	r2,r2,1
 5052934:	41000015 	stw	r4,0(r8)
 5052938:	01000084 	movi	r4,2
 505293c:	41000115 	stw	r4,4(r8)
 5052940:	d8c02015 	stw	r3,128(sp)
 5052944:	d8801f15 	stw	r2,124(sp)
 5052948:	010001c4 	movi	r4,7
 505294c:	20823616 	blt	r4,r2,5053228 <___vfprintf_internal_r+0x1194>
 5052950:	42000204 	addi	r8,r8,8
 5052954:	d9003017 	ldw	r4,192(sp)
 5052958:	00802004 	movi	r2,128
 505295c:	20819926 	beq	r4,r2,5052fc4 <___vfprintf_internal_r+0xf30>
 5052960:	d9402917 	ldw	r5,164(sp)
 5052964:	d8802e17 	ldw	r2,184(sp)
 5052968:	28adc83a 	sub	r22,r5,r2
 505296c:	0580310e 	bge	zero,r22,5052a34 <___vfprintf_internal_r+0x9a0>
 5052970:	07000404 	movi	fp,16
 5052974:	d8801f17 	ldw	r2,124(sp)
 5052978:	e584140e 	bge	fp,r22,50539cc <___vfprintf_internal_r+0x1938>
 505297c:	014141b4 	movhi	r5,1286
 5052980:	29449c84 	addi	r5,r5,4722
 5052984:	dc402915 	stw	r17,164(sp)
 5052988:	d9402b15 	stw	r5,172(sp)
 505298c:	b023883a 	mov	r17,r22
 5052990:	04c001c4 	movi	r19,7
 5052994:	a82d883a 	mov	r22,r21
 5052998:	902b883a 	mov	r21,r18
 505299c:	8025883a 	mov	r18,r16
 50529a0:	dc002c17 	ldw	r16,176(sp)
 50529a4:	00000306 	br	50529b4 <___vfprintf_internal_r+0x920>
 50529a8:	8c7ffc04 	addi	r17,r17,-16
 50529ac:	42000204 	addi	r8,r8,8
 50529b0:	e440110e 	bge	fp,r17,50529f8 <___vfprintf_internal_r+0x964>
 50529b4:	18c00404 	addi	r3,r3,16
 50529b8:	10800044 	addi	r2,r2,1
 50529bc:	45000015 	stw	r20,0(r8)
 50529c0:	47000115 	stw	fp,4(r8)
 50529c4:	d8c02015 	stw	r3,128(sp)
 50529c8:	d8801f15 	stw	r2,124(sp)
 50529cc:	98bff60e 	bge	r19,r2,50529a8 <_gp+0xfffe7580>
 50529d0:	d9801e04 	addi	r6,sp,120
 50529d4:	b80b883a 	mov	r5,r23
 50529d8:	8009883a 	mov	r4,r16
 50529dc:	505a0f00 	call	505a0f0 <__sprint_r>
 50529e0:	103eae1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50529e4:	8c7ffc04 	addi	r17,r17,-16
 50529e8:	d8c02017 	ldw	r3,128(sp)
 50529ec:	d8801f17 	ldw	r2,124(sp)
 50529f0:	da000404 	addi	r8,sp,16
 50529f4:	e47fef16 	blt	fp,r17,50529b4 <_gp+0xfffe758c>
 50529f8:	9021883a 	mov	r16,r18
 50529fc:	a825883a 	mov	r18,r21
 5052a00:	b02b883a 	mov	r21,r22
 5052a04:	882d883a 	mov	r22,r17
 5052a08:	dc402917 	ldw	r17,164(sp)
 5052a0c:	d9002b17 	ldw	r4,172(sp)
 5052a10:	1d87883a 	add	r3,r3,r22
 5052a14:	10800044 	addi	r2,r2,1
 5052a18:	41000015 	stw	r4,0(r8)
 5052a1c:	45800115 	stw	r22,4(r8)
 5052a20:	d8c02015 	stw	r3,128(sp)
 5052a24:	d8801f15 	stw	r2,124(sp)
 5052a28:	010001c4 	movi	r4,7
 5052a2c:	2081ee16 	blt	r4,r2,50531e8 <___vfprintf_internal_r+0x1154>
 5052a30:	42000204 	addi	r8,r8,8
 5052a34:	9080400c 	andi	r2,r18,256
 5052a38:	1001181e 	bne	r2,zero,5052e9c <___vfprintf_internal_r+0xe08>
 5052a3c:	d9402e17 	ldw	r5,184(sp)
 5052a40:	d8801f17 	ldw	r2,124(sp)
 5052a44:	44000015 	stw	r16,0(r8)
 5052a48:	1947883a 	add	r3,r3,r5
 5052a4c:	10800044 	addi	r2,r2,1
 5052a50:	41400115 	stw	r5,4(r8)
 5052a54:	d8c02015 	stw	r3,128(sp)
 5052a58:	d8801f15 	stw	r2,124(sp)
 5052a5c:	010001c4 	movi	r4,7
 5052a60:	2081d316 	blt	r4,r2,50531b0 <___vfprintf_internal_r+0x111c>
 5052a64:	42000204 	addi	r8,r8,8
 5052a68:	9480010c 	andi	r18,r18,4
 5052a6c:	90003226 	beq	r18,zero,5052b38 <___vfprintf_internal_r+0xaa4>
 5052a70:	d9403117 	ldw	r5,196(sp)
 5052a74:	d8802a17 	ldw	r2,168(sp)
 5052a78:	28a1c83a 	sub	r16,r5,r2
 5052a7c:	04002e0e 	bge	zero,r16,5052b38 <___vfprintf_internal_r+0xaa4>
 5052a80:	04400404 	movi	r17,16
 5052a84:	d8801f17 	ldw	r2,124(sp)
 5052a88:	8c04a20e 	bge	r17,r16,5053d14 <___vfprintf_internal_r+0x1c80>
 5052a8c:	014141b4 	movhi	r5,1286
 5052a90:	2944a084 	addi	r5,r5,4738
 5052a94:	d9403515 	stw	r5,212(sp)
 5052a98:	048001c4 	movi	r18,7
 5052a9c:	dcc02c17 	ldw	r19,176(sp)
 5052aa0:	00000306 	br	5052ab0 <___vfprintf_internal_r+0xa1c>
 5052aa4:	843ffc04 	addi	r16,r16,-16
 5052aa8:	42000204 	addi	r8,r8,8
 5052aac:	8c00130e 	bge	r17,r16,5052afc <___vfprintf_internal_r+0xa68>
 5052ab0:	010141b4 	movhi	r4,1286
 5052ab4:	18c00404 	addi	r3,r3,16
 5052ab8:	10800044 	addi	r2,r2,1
 5052abc:	2104a084 	addi	r4,r4,4738
 5052ac0:	41000015 	stw	r4,0(r8)
 5052ac4:	44400115 	stw	r17,4(r8)
 5052ac8:	d8c02015 	stw	r3,128(sp)
 5052acc:	d8801f15 	stw	r2,124(sp)
 5052ad0:	90bff40e 	bge	r18,r2,5052aa4 <_gp+0xfffe767c>
 5052ad4:	d9801e04 	addi	r6,sp,120
 5052ad8:	b80b883a 	mov	r5,r23
 5052adc:	9809883a 	mov	r4,r19
 5052ae0:	505a0f00 	call	505a0f0 <__sprint_r>
 5052ae4:	103e6d1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5052ae8:	843ffc04 	addi	r16,r16,-16
 5052aec:	d8c02017 	ldw	r3,128(sp)
 5052af0:	d8801f17 	ldw	r2,124(sp)
 5052af4:	da000404 	addi	r8,sp,16
 5052af8:	8c3fed16 	blt	r17,r16,5052ab0 <_gp+0xfffe7688>
 5052afc:	d9403517 	ldw	r5,212(sp)
 5052b00:	1c07883a 	add	r3,r3,r16
 5052b04:	10800044 	addi	r2,r2,1
 5052b08:	41400015 	stw	r5,0(r8)
 5052b0c:	44000115 	stw	r16,4(r8)
 5052b10:	d8c02015 	stw	r3,128(sp)
 5052b14:	d8801f15 	stw	r2,124(sp)
 5052b18:	010001c4 	movi	r4,7
 5052b1c:	2080060e 	bge	r4,r2,5052b38 <___vfprintf_internal_r+0xaa4>
 5052b20:	d9002c17 	ldw	r4,176(sp)
 5052b24:	d9801e04 	addi	r6,sp,120
 5052b28:	b80b883a 	mov	r5,r23
 5052b2c:	505a0f00 	call	505a0f0 <__sprint_r>
 5052b30:	103e5a1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5052b34:	d8c02017 	ldw	r3,128(sp)
 5052b38:	d8803117 	ldw	r2,196(sp)
 5052b3c:	d9002a17 	ldw	r4,168(sp)
 5052b40:	1100010e 	bge	r2,r4,5052b48 <___vfprintf_internal_r+0xab4>
 5052b44:	2005883a 	mov	r2,r4
 5052b48:	d9402f17 	ldw	r5,188(sp)
 5052b4c:	288b883a 	add	r5,r5,r2
 5052b50:	d9402f15 	stw	r5,188(sp)
 5052b54:	18019e1e 	bne	r3,zero,50531d0 <___vfprintf_internal_r+0x113c>
 5052b58:	a8800007 	ldb	r2,0(r21)
 5052b5c:	d8001f15 	stw	zero,124(sp)
 5052b60:	da000404 	addi	r8,sp,16
 5052b64:	103d851e 	bne	r2,zero,505217c <_gp+0xfffe6d54>
 5052b68:	a821883a 	mov	r16,r21
 5052b6c:	003d9b06 	br	50521dc <_gp+0xfffe6db4>
 5052b70:	18c03fcc 	andi	r3,r3,255
 5052b74:	1805c11e 	bne	r3,zero,505427c <___vfprintf_internal_r+0x21e8>
 5052b78:	94800414 	ori	r18,r18,16
 5052b7c:	9080080c 	andi	r2,r18,32
 5052b80:	10020c26 	beq	r2,zero,50533b4 <___vfprintf_internal_r+0x1320>
 5052b84:	d8802d17 	ldw	r2,180(sp)
 5052b88:	d9002917 	ldw	r4,164(sp)
 5052b8c:	d8002785 	stb	zero,158(sp)
 5052b90:	10c00204 	addi	r3,r2,8
 5052b94:	14c00017 	ldw	r19,0(r2)
 5052b98:	15800117 	ldw	r22,4(r2)
 5052b9c:	20040f16 	blt	r4,zero,5053bdc <___vfprintf_internal_r+0x1b48>
 5052ba0:	013fdfc4 	movi	r4,-129
 5052ba4:	9d84b03a 	or	r2,r19,r22
 5052ba8:	d8c02d15 	stw	r3,180(sp)
 5052bac:	9124703a 	and	r18,r18,r4
 5052bb0:	0039883a 	mov	fp,zero
 5052bb4:	103e891e 	bne	r2,zero,50525dc <_gp+0xfffe71b4>
 5052bb8:	d9002917 	ldw	r4,164(sp)
 5052bbc:	2002c11e 	bne	r4,zero,50536c4 <___vfprintf_internal_r+0x1630>
 5052bc0:	d8002915 	stw	zero,164(sp)
 5052bc4:	d8002e15 	stw	zero,184(sp)
 5052bc8:	dc001e04 	addi	r16,sp,120
 5052bcc:	003ef806 	br	50527b0 <_gp+0xfffe7388>
 5052bd0:	18c03fcc 	andi	r3,r3,255
 5052bd4:	18059d1e 	bne	r3,zero,505424c <___vfprintf_internal_r+0x21b8>
 5052bd8:	014141b4 	movhi	r5,1286
 5052bdc:	29448804 	addi	r5,r5,4640
 5052be0:	d9403915 	stw	r5,228(sp)
 5052be4:	9080080c 	andi	r2,r18,32
 5052be8:	10005226 	beq	r2,zero,5052d34 <___vfprintf_internal_r+0xca0>
 5052bec:	d8802d17 	ldw	r2,180(sp)
 5052bf0:	14c00017 	ldw	r19,0(r2)
 5052bf4:	15800117 	ldw	r22,4(r2)
 5052bf8:	10800204 	addi	r2,r2,8
 5052bfc:	d8802d15 	stw	r2,180(sp)
 5052c00:	9080004c 	andi	r2,r18,1
 5052c04:	10019026 	beq	r2,zero,5053248 <___vfprintf_internal_r+0x11b4>
 5052c08:	9d84b03a 	or	r2,r19,r22
 5052c0c:	10036926 	beq	r2,zero,50539b4 <___vfprintf_internal_r+0x1920>
 5052c10:	d8c02917 	ldw	r3,164(sp)
 5052c14:	00800c04 	movi	r2,48
 5052c18:	d8802705 	stb	r2,156(sp)
 5052c1c:	dc402745 	stb	r17,157(sp)
 5052c20:	d8002785 	stb	zero,158(sp)
 5052c24:	90800094 	ori	r2,r18,2
 5052c28:	18045d16 	blt	r3,zero,5053da0 <___vfprintf_internal_r+0x1d0c>
 5052c2c:	00bfdfc4 	movi	r2,-129
 5052c30:	90a4703a 	and	r18,r18,r2
 5052c34:	94800094 	ori	r18,r18,2
 5052c38:	0039883a 	mov	fp,zero
 5052c3c:	d9003917 	ldw	r4,228(sp)
 5052c40:	dc001e04 	addi	r16,sp,120
 5052c44:	988003cc 	andi	r2,r19,15
 5052c48:	b006973a 	slli	r3,r22,28
 5052c4c:	2085883a 	add	r2,r4,r2
 5052c50:	9826d13a 	srli	r19,r19,4
 5052c54:	10800003 	ldbu	r2,0(r2)
 5052c58:	b02cd13a 	srli	r22,r22,4
 5052c5c:	843fffc4 	addi	r16,r16,-1
 5052c60:	1ce6b03a 	or	r19,r3,r19
 5052c64:	80800005 	stb	r2,0(r16)
 5052c68:	9d84b03a 	or	r2,r19,r22
 5052c6c:	103ff51e 	bne	r2,zero,5052c44 <_gp+0xfffe781c>
 5052c70:	d8c02817 	ldw	r3,160(sp)
 5052c74:	1c07c83a 	sub	r3,r3,r16
 5052c78:	d8c02e15 	stw	r3,184(sp)
 5052c7c:	003ecc06 	br	50527b0 <_gp+0xfffe7388>
 5052c80:	18c03fcc 	andi	r3,r3,255
 5052c84:	183e9f26 	beq	r3,zero,5052704 <_gp+0xfffe72dc>
 5052c88:	d9c02785 	stb	r7,158(sp)
 5052c8c:	003e9d06 	br	5052704 <_gp+0xfffe72dc>
 5052c90:	00c00044 	movi	r3,1
 5052c94:	01c00ac4 	movi	r7,43
 5052c98:	ac400007 	ldb	r17,0(r21)
 5052c9c:	003d5e06 	br	5052218 <_gp+0xfffe6df0>
 5052ca0:	94800814 	ori	r18,r18,32
 5052ca4:	ac400007 	ldb	r17,0(r21)
 5052ca8:	003d5b06 	br	5052218 <_gp+0xfffe6df0>
 5052cac:	d8c02d17 	ldw	r3,180(sp)
 5052cb0:	d8002785 	stb	zero,158(sp)
 5052cb4:	1c000017 	ldw	r16,0(r3)
 5052cb8:	1cc00104 	addi	r19,r3,4
 5052cbc:	80041926 	beq	r16,zero,5053d24 <___vfprintf_internal_r+0x1c90>
 5052cc0:	d9002917 	ldw	r4,164(sp)
 5052cc4:	2003d016 	blt	r4,zero,5053c08 <___vfprintf_internal_r+0x1b74>
 5052cc8:	200d883a 	mov	r6,r4
 5052ccc:	000b883a 	mov	r5,zero
 5052cd0:	8009883a 	mov	r4,r16
 5052cd4:	da003d15 	stw	r8,244(sp)
 5052cd8:	50571bc0 	call	50571bc <memchr>
 5052cdc:	da003d17 	ldw	r8,244(sp)
 5052ce0:	10045426 	beq	r2,zero,5053e34 <___vfprintf_internal_r+0x1da0>
 5052ce4:	1405c83a 	sub	r2,r2,r16
 5052ce8:	d8802e15 	stw	r2,184(sp)
 5052cec:	1003cc16 	blt	r2,zero,5053c20 <___vfprintf_internal_r+0x1b8c>
 5052cf0:	df002783 	ldbu	fp,158(sp)
 5052cf4:	d8802a15 	stw	r2,168(sp)
 5052cf8:	dcc02d15 	stw	r19,180(sp)
 5052cfc:	d8002915 	stw	zero,164(sp)
 5052d00:	d8003215 	stw	zero,200(sp)
 5052d04:	003eb006 	br	50527c8 <_gp+0xfffe73a0>
 5052d08:	18c03fcc 	andi	r3,r3,255
 5052d0c:	183f9b26 	beq	r3,zero,5052b7c <_gp+0xfffe7754>
 5052d10:	d9c02785 	stb	r7,158(sp)
 5052d14:	003f9906 	br	5052b7c <_gp+0xfffe7754>
 5052d18:	18c03fcc 	andi	r3,r3,255
 5052d1c:	1805551e 	bne	r3,zero,5054274 <___vfprintf_internal_r+0x21e0>
 5052d20:	014141b4 	movhi	r5,1286
 5052d24:	29448d04 	addi	r5,r5,4660
 5052d28:	d9403915 	stw	r5,228(sp)
 5052d2c:	9080080c 	andi	r2,r18,32
 5052d30:	103fae1e 	bne	r2,zero,5052bec <_gp+0xfffe77c4>
 5052d34:	9080040c 	andi	r2,r18,16
 5052d38:	1002de26 	beq	r2,zero,50538b4 <___vfprintf_internal_r+0x1820>
 5052d3c:	d8c02d17 	ldw	r3,180(sp)
 5052d40:	002d883a 	mov	r22,zero
 5052d44:	1cc00017 	ldw	r19,0(r3)
 5052d48:	18c00104 	addi	r3,r3,4
 5052d4c:	d8c02d15 	stw	r3,180(sp)
 5052d50:	003fab06 	br	5052c00 <_gp+0xfffe77d8>
 5052d54:	38803fcc 	andi	r2,r7,255
 5052d58:	1080201c 	xori	r2,r2,128
 5052d5c:	10bfe004 	addi	r2,r2,-128
 5052d60:	1002d21e 	bne	r2,zero,50538ac <___vfprintf_internal_r+0x1818>
 5052d64:	00c00044 	movi	r3,1
 5052d68:	01c00804 	movi	r7,32
 5052d6c:	ac400007 	ldb	r17,0(r21)
 5052d70:	003d2906 	br	5052218 <_gp+0xfffe6df0>
 5052d74:	94800054 	ori	r18,r18,1
 5052d78:	ac400007 	ldb	r17,0(r21)
 5052d7c:	003d2606 	br	5052218 <_gp+0xfffe6df0>
 5052d80:	18c03fcc 	andi	r3,r3,255
 5052d84:	183e0526 	beq	r3,zero,505259c <_gp+0xfffe7174>
 5052d88:	d9c02785 	stb	r7,158(sp)
 5052d8c:	003e0306 	br	505259c <_gp+0xfffe7174>
 5052d90:	94801014 	ori	r18,r18,64
 5052d94:	ac400007 	ldb	r17,0(r21)
 5052d98:	003d1f06 	br	5052218 <_gp+0xfffe6df0>
 5052d9c:	ac400007 	ldb	r17,0(r21)
 5052da0:	8a438726 	beq	r17,r9,5053bc0 <___vfprintf_internal_r+0x1b2c>
 5052da4:	94800414 	ori	r18,r18,16
 5052da8:	003d1b06 	br	5052218 <_gp+0xfffe6df0>
 5052dac:	18c03fcc 	andi	r3,r3,255
 5052db0:	1805341e 	bne	r3,zero,5054284 <___vfprintf_internal_r+0x21f0>
 5052db4:	9080080c 	andi	r2,r18,32
 5052db8:	1002cd26 	beq	r2,zero,50538f0 <___vfprintf_internal_r+0x185c>
 5052dbc:	d9402d17 	ldw	r5,180(sp)
 5052dc0:	d9002f17 	ldw	r4,188(sp)
 5052dc4:	28800017 	ldw	r2,0(r5)
 5052dc8:	2007d7fa 	srai	r3,r4,31
 5052dcc:	29400104 	addi	r5,r5,4
 5052dd0:	d9402d15 	stw	r5,180(sp)
 5052dd4:	11000015 	stw	r4,0(r2)
 5052dd8:	10c00115 	stw	r3,4(r2)
 5052ddc:	003ce506 	br	5052174 <_gp+0xfffe6d4c>
 5052de0:	d8c02d17 	ldw	r3,180(sp)
 5052de4:	d9002d17 	ldw	r4,180(sp)
 5052de8:	d8002785 	stb	zero,158(sp)
 5052dec:	18800017 	ldw	r2,0(r3)
 5052df0:	21000104 	addi	r4,r4,4
 5052df4:	00c00044 	movi	r3,1
 5052df8:	d8c02a15 	stw	r3,168(sp)
 5052dfc:	d8801405 	stb	r2,80(sp)
 5052e00:	d9002d15 	stw	r4,180(sp)
 5052e04:	d8c02e15 	stw	r3,184(sp)
 5052e08:	d8002915 	stw	zero,164(sp)
 5052e0c:	d8003215 	stw	zero,200(sp)
 5052e10:	dc001404 	addi	r16,sp,80
 5052e14:	0039883a 	mov	fp,zero
 5052e18:	003e7206 	br	50527e4 <_gp+0xfffe73bc>
 5052e1c:	010141b4 	movhi	r4,1286
 5052e20:	21048d04 	addi	r4,r4,4660
 5052e24:	0039883a 	mov	fp,zero
 5052e28:	d9003915 	stw	r4,228(sp)
 5052e2c:	04401e04 	movi	r17,120
 5052e30:	003f8206 	br	5052c3c <_gp+0xfffe7814>
 5052e34:	18c03fcc 	andi	r3,r3,255
 5052e38:	1805061e 	bne	r3,zero,5054254 <___vfprintf_internal_r+0x21c0>
 5052e3c:	883d9126 	beq	r17,zero,5052484 <_gp+0xfffe705c>
 5052e40:	00c00044 	movi	r3,1
 5052e44:	d8c02a15 	stw	r3,168(sp)
 5052e48:	dc401405 	stb	r17,80(sp)
 5052e4c:	d8002785 	stb	zero,158(sp)
 5052e50:	003fec06 	br	5052e04 <_gp+0xfffe79dc>
 5052e54:	014141b4 	movhi	r5,1286
 5052e58:	29448d04 	addi	r5,r5,4660
 5052e5c:	d9403915 	stw	r5,228(sp)
 5052e60:	d8c02d15 	stw	r3,180(sp)
 5052e64:	1025883a 	mov	r18,r2
 5052e68:	04401e04 	movi	r17,120
 5052e6c:	9d84b03a 	or	r2,r19,r22
 5052e70:	1000fc1e 	bne	r2,zero,5053264 <___vfprintf_internal_r+0x11d0>
 5052e74:	0039883a 	mov	fp,zero
 5052e78:	00800084 	movi	r2,2
 5052e7c:	10803fcc 	andi	r2,r2,255
 5052e80:	00c00044 	movi	r3,1
 5052e84:	10c20f26 	beq	r2,r3,50536c4 <___vfprintf_internal_r+0x1630>
 5052e88:	00c00084 	movi	r3,2
 5052e8c:	10fd6326 	beq	r2,r3,505241c <_gp+0xfffe6ff4>
 5052e90:	003e2d06 	br	5052748 <_gp+0xfffe7320>
 5052e94:	d8c02017 	ldw	r3,128(sp)
 5052e98:	003e9306 	br	50528e8 <_gp+0xfffe74c0>
 5052e9c:	00801944 	movi	r2,101
 5052ea0:	14407e0e 	bge	r2,r17,505309c <___vfprintf_internal_r+0x1008>
 5052ea4:	d9003617 	ldw	r4,216(sp)
 5052ea8:	d9403817 	ldw	r5,224(sp)
 5052eac:	000d883a 	mov	r6,zero
 5052eb0:	000f883a 	mov	r7,zero
 5052eb4:	d8c03c15 	stw	r3,240(sp)
 5052eb8:	da003d15 	stw	r8,244(sp)
 5052ebc:	504daa80 	call	504daa8 <__eqdf2>
 5052ec0:	d8c03c17 	ldw	r3,240(sp)
 5052ec4:	da003d17 	ldw	r8,244(sp)
 5052ec8:	1000f71e 	bne	r2,zero,50532a8 <___vfprintf_internal_r+0x1214>
 5052ecc:	d8801f17 	ldw	r2,124(sp)
 5052ed0:	010141b4 	movhi	r4,1286
 5052ed4:	21049404 	addi	r4,r4,4688
 5052ed8:	18c00044 	addi	r3,r3,1
 5052edc:	10800044 	addi	r2,r2,1
 5052ee0:	41000015 	stw	r4,0(r8)
 5052ee4:	01000044 	movi	r4,1
 5052ee8:	41000115 	stw	r4,4(r8)
 5052eec:	d8c02015 	stw	r3,128(sp)
 5052ef0:	d8801f15 	stw	r2,124(sp)
 5052ef4:	010001c4 	movi	r4,7
 5052ef8:	2082b816 	blt	r4,r2,50539dc <___vfprintf_internal_r+0x1948>
 5052efc:	42000204 	addi	r8,r8,8
 5052f00:	d8802617 	ldw	r2,152(sp)
 5052f04:	d9403317 	ldw	r5,204(sp)
 5052f08:	11400216 	blt	r2,r5,5052f14 <___vfprintf_internal_r+0xe80>
 5052f0c:	9080004c 	andi	r2,r18,1
 5052f10:	103ed526 	beq	r2,zero,5052a68 <_gp+0xfffe7640>
 5052f14:	d8803717 	ldw	r2,220(sp)
 5052f18:	d9003417 	ldw	r4,208(sp)
 5052f1c:	d9403717 	ldw	r5,220(sp)
 5052f20:	1887883a 	add	r3,r3,r2
 5052f24:	d8801f17 	ldw	r2,124(sp)
 5052f28:	41000015 	stw	r4,0(r8)
 5052f2c:	41400115 	stw	r5,4(r8)
 5052f30:	10800044 	addi	r2,r2,1
 5052f34:	d8c02015 	stw	r3,128(sp)
 5052f38:	d8801f15 	stw	r2,124(sp)
 5052f3c:	010001c4 	movi	r4,7
 5052f40:	20832916 	blt	r4,r2,5053be8 <___vfprintf_internal_r+0x1b54>
 5052f44:	42000204 	addi	r8,r8,8
 5052f48:	d8803317 	ldw	r2,204(sp)
 5052f4c:	143fffc4 	addi	r16,r2,-1
 5052f50:	043ec50e 	bge	zero,r16,5052a68 <_gp+0xfffe7640>
 5052f54:	04400404 	movi	r17,16
 5052f58:	d8801f17 	ldw	r2,124(sp)
 5052f5c:	8c00880e 	bge	r17,r16,5053180 <___vfprintf_internal_r+0x10ec>
 5052f60:	014141b4 	movhi	r5,1286
 5052f64:	29449c84 	addi	r5,r5,4722
 5052f68:	d9402b15 	stw	r5,172(sp)
 5052f6c:	058001c4 	movi	r22,7
 5052f70:	dcc02c17 	ldw	r19,176(sp)
 5052f74:	00000306 	br	5052f84 <___vfprintf_internal_r+0xef0>
 5052f78:	42000204 	addi	r8,r8,8
 5052f7c:	843ffc04 	addi	r16,r16,-16
 5052f80:	8c00820e 	bge	r17,r16,505318c <___vfprintf_internal_r+0x10f8>
 5052f84:	18c00404 	addi	r3,r3,16
 5052f88:	10800044 	addi	r2,r2,1
 5052f8c:	45000015 	stw	r20,0(r8)
 5052f90:	44400115 	stw	r17,4(r8)
 5052f94:	d8c02015 	stw	r3,128(sp)
 5052f98:	d8801f15 	stw	r2,124(sp)
 5052f9c:	b0bff60e 	bge	r22,r2,5052f78 <_gp+0xfffe7b50>
 5052fa0:	d9801e04 	addi	r6,sp,120
 5052fa4:	b80b883a 	mov	r5,r23
 5052fa8:	9809883a 	mov	r4,r19
 5052fac:	505a0f00 	call	505a0f0 <__sprint_r>
 5052fb0:	103d3a1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5052fb4:	d8c02017 	ldw	r3,128(sp)
 5052fb8:	d8801f17 	ldw	r2,124(sp)
 5052fbc:	da000404 	addi	r8,sp,16
 5052fc0:	003fee06 	br	5052f7c <_gp+0xfffe7b54>
 5052fc4:	d9403117 	ldw	r5,196(sp)
 5052fc8:	d8802a17 	ldw	r2,168(sp)
 5052fcc:	28adc83a 	sub	r22,r5,r2
 5052fd0:	05be630e 	bge	zero,r22,5052960 <_gp+0xfffe7538>
 5052fd4:	07000404 	movi	fp,16
 5052fd8:	d8801f17 	ldw	r2,124(sp)
 5052fdc:	e5838f0e 	bge	fp,r22,5053e1c <___vfprintf_internal_r+0x1d88>
 5052fe0:	014141b4 	movhi	r5,1286
 5052fe4:	29449c84 	addi	r5,r5,4722
 5052fe8:	dc403015 	stw	r17,192(sp)
 5052fec:	d9402b15 	stw	r5,172(sp)
 5052ff0:	b023883a 	mov	r17,r22
 5052ff4:	04c001c4 	movi	r19,7
 5052ff8:	a82d883a 	mov	r22,r21
 5052ffc:	902b883a 	mov	r21,r18
 5053000:	8025883a 	mov	r18,r16
 5053004:	dc002c17 	ldw	r16,176(sp)
 5053008:	00000306 	br	5053018 <___vfprintf_internal_r+0xf84>
 505300c:	8c7ffc04 	addi	r17,r17,-16
 5053010:	42000204 	addi	r8,r8,8
 5053014:	e440110e 	bge	fp,r17,505305c <___vfprintf_internal_r+0xfc8>
 5053018:	18c00404 	addi	r3,r3,16
 505301c:	10800044 	addi	r2,r2,1
 5053020:	45000015 	stw	r20,0(r8)
 5053024:	47000115 	stw	fp,4(r8)
 5053028:	d8c02015 	stw	r3,128(sp)
 505302c:	d8801f15 	stw	r2,124(sp)
 5053030:	98bff60e 	bge	r19,r2,505300c <_gp+0xfffe7be4>
 5053034:	d9801e04 	addi	r6,sp,120
 5053038:	b80b883a 	mov	r5,r23
 505303c:	8009883a 	mov	r4,r16
 5053040:	505a0f00 	call	505a0f0 <__sprint_r>
 5053044:	103d151e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053048:	8c7ffc04 	addi	r17,r17,-16
 505304c:	d8c02017 	ldw	r3,128(sp)
 5053050:	d8801f17 	ldw	r2,124(sp)
 5053054:	da000404 	addi	r8,sp,16
 5053058:	e47fef16 	blt	fp,r17,5053018 <_gp+0xfffe7bf0>
 505305c:	9021883a 	mov	r16,r18
 5053060:	a825883a 	mov	r18,r21
 5053064:	b02b883a 	mov	r21,r22
 5053068:	882d883a 	mov	r22,r17
 505306c:	dc403017 	ldw	r17,192(sp)
 5053070:	d9002b17 	ldw	r4,172(sp)
 5053074:	1d87883a 	add	r3,r3,r22
 5053078:	10800044 	addi	r2,r2,1
 505307c:	41000015 	stw	r4,0(r8)
 5053080:	45800115 	stw	r22,4(r8)
 5053084:	d8c02015 	stw	r3,128(sp)
 5053088:	d8801f15 	stw	r2,124(sp)
 505308c:	010001c4 	movi	r4,7
 5053090:	20818e16 	blt	r4,r2,50536cc <___vfprintf_internal_r+0x1638>
 5053094:	42000204 	addi	r8,r8,8
 5053098:	003e3106 	br	5052960 <_gp+0xfffe7538>
 505309c:	d9403317 	ldw	r5,204(sp)
 50530a0:	00800044 	movi	r2,1
 50530a4:	18c00044 	addi	r3,r3,1
 50530a8:	1141530e 	bge	r2,r5,50535f8 <___vfprintf_internal_r+0x1564>
 50530ac:	dc401f17 	ldw	r17,124(sp)
 50530b0:	00800044 	movi	r2,1
 50530b4:	40800115 	stw	r2,4(r8)
 50530b8:	8c400044 	addi	r17,r17,1
 50530bc:	44000015 	stw	r16,0(r8)
 50530c0:	d8c02015 	stw	r3,128(sp)
 50530c4:	dc401f15 	stw	r17,124(sp)
 50530c8:	008001c4 	movi	r2,7
 50530cc:	14416b16 	blt	r2,r17,505367c <___vfprintf_internal_r+0x15e8>
 50530d0:	42000204 	addi	r8,r8,8
 50530d4:	d8803717 	ldw	r2,220(sp)
 50530d8:	d9003417 	ldw	r4,208(sp)
 50530dc:	8c400044 	addi	r17,r17,1
 50530e0:	10c7883a 	add	r3,r2,r3
 50530e4:	40800115 	stw	r2,4(r8)
 50530e8:	41000015 	stw	r4,0(r8)
 50530ec:	d8c02015 	stw	r3,128(sp)
 50530f0:	dc401f15 	stw	r17,124(sp)
 50530f4:	008001c4 	movi	r2,7
 50530f8:	14416916 	blt	r2,r17,50536a0 <___vfprintf_internal_r+0x160c>
 50530fc:	45800204 	addi	r22,r8,8
 5053100:	d9003617 	ldw	r4,216(sp)
 5053104:	d9403817 	ldw	r5,224(sp)
 5053108:	000d883a 	mov	r6,zero
 505310c:	000f883a 	mov	r7,zero
 5053110:	d8c03c15 	stw	r3,240(sp)
 5053114:	504daa80 	call	504daa8 <__eqdf2>
 5053118:	d8c03c17 	ldw	r3,240(sp)
 505311c:	1000bc26 	beq	r2,zero,5053410 <___vfprintf_internal_r+0x137c>
 5053120:	d9403317 	ldw	r5,204(sp)
 5053124:	84000044 	addi	r16,r16,1
 5053128:	8c400044 	addi	r17,r17,1
 505312c:	28bfffc4 	addi	r2,r5,-1
 5053130:	1887883a 	add	r3,r3,r2
 5053134:	b0800115 	stw	r2,4(r22)
 5053138:	b4000015 	stw	r16,0(r22)
 505313c:	d8c02015 	stw	r3,128(sp)
 5053140:	dc401f15 	stw	r17,124(sp)
 5053144:	008001c4 	movi	r2,7
 5053148:	14414316 	blt	r2,r17,5053658 <___vfprintf_internal_r+0x15c4>
 505314c:	b5800204 	addi	r22,r22,8
 5053150:	d9003a17 	ldw	r4,232(sp)
 5053154:	df0022c4 	addi	fp,sp,139
 5053158:	8c400044 	addi	r17,r17,1
 505315c:	20c7883a 	add	r3,r4,r3
 5053160:	b7000015 	stw	fp,0(r22)
 5053164:	b1000115 	stw	r4,4(r22)
 5053168:	d8c02015 	stw	r3,128(sp)
 505316c:	dc401f15 	stw	r17,124(sp)
 5053170:	008001c4 	movi	r2,7
 5053174:	14400e16 	blt	r2,r17,50531b0 <___vfprintf_internal_r+0x111c>
 5053178:	b2000204 	addi	r8,r22,8
 505317c:	003e3a06 	br	5052a68 <_gp+0xfffe7640>
 5053180:	010141b4 	movhi	r4,1286
 5053184:	21049c84 	addi	r4,r4,4722
 5053188:	d9002b15 	stw	r4,172(sp)
 505318c:	d9002b17 	ldw	r4,172(sp)
 5053190:	1c07883a 	add	r3,r3,r16
 5053194:	44000115 	stw	r16,4(r8)
 5053198:	41000015 	stw	r4,0(r8)
 505319c:	10800044 	addi	r2,r2,1
 50531a0:	d8c02015 	stw	r3,128(sp)
 50531a4:	d8801f15 	stw	r2,124(sp)
 50531a8:	010001c4 	movi	r4,7
 50531ac:	20be2d0e 	bge	r4,r2,5052a64 <_gp+0xfffe763c>
 50531b0:	d9002c17 	ldw	r4,176(sp)
 50531b4:	d9801e04 	addi	r6,sp,120
 50531b8:	b80b883a 	mov	r5,r23
 50531bc:	505a0f00 	call	505a0f0 <__sprint_r>
 50531c0:	103cb61e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50531c4:	d8c02017 	ldw	r3,128(sp)
 50531c8:	da000404 	addi	r8,sp,16
 50531cc:	003e2606 	br	5052a68 <_gp+0xfffe7640>
 50531d0:	d9002c17 	ldw	r4,176(sp)
 50531d4:	d9801e04 	addi	r6,sp,120
 50531d8:	b80b883a 	mov	r5,r23
 50531dc:	505a0f00 	call	505a0f0 <__sprint_r>
 50531e0:	103e5d26 	beq	r2,zero,5052b58 <_gp+0xfffe7730>
 50531e4:	003cad06 	br	505249c <_gp+0xfffe7074>
 50531e8:	d9002c17 	ldw	r4,176(sp)
 50531ec:	d9801e04 	addi	r6,sp,120
 50531f0:	b80b883a 	mov	r5,r23
 50531f4:	505a0f00 	call	505a0f0 <__sprint_r>
 50531f8:	103ca81e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50531fc:	d8c02017 	ldw	r3,128(sp)
 5053200:	da000404 	addi	r8,sp,16
 5053204:	003e0b06 	br	5052a34 <_gp+0xfffe760c>
 5053208:	d9002c17 	ldw	r4,176(sp)
 505320c:	d9801e04 	addi	r6,sp,120
 5053210:	b80b883a 	mov	r5,r23
 5053214:	505a0f00 	call	505a0f0 <__sprint_r>
 5053218:	103ca01e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 505321c:	d8c02017 	ldw	r3,128(sp)
 5053220:	da000404 	addi	r8,sp,16
 5053224:	003dbd06 	br	505291c <_gp+0xfffe74f4>
 5053228:	d9002c17 	ldw	r4,176(sp)
 505322c:	d9801e04 	addi	r6,sp,120
 5053230:	b80b883a 	mov	r5,r23
 5053234:	505a0f00 	call	505a0f0 <__sprint_r>
 5053238:	103c981e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 505323c:	d8c02017 	ldw	r3,128(sp)
 5053240:	da000404 	addi	r8,sp,16
 5053244:	003dc306 	br	5052954 <_gp+0xfffe752c>
 5053248:	d8802917 	ldw	r2,164(sp)
 505324c:	d8002785 	stb	zero,158(sp)
 5053250:	103f0616 	blt	r2,zero,5052e6c <_gp+0xfffe7a44>
 5053254:	00ffdfc4 	movi	r3,-129
 5053258:	9d84b03a 	or	r2,r19,r22
 505325c:	90e4703a 	and	r18,r18,r3
 5053260:	103c6b26 	beq	r2,zero,5052410 <_gp+0xfffe6fe8>
 5053264:	0039883a 	mov	fp,zero
 5053268:	003e7406 	br	5052c3c <_gp+0xfffe7814>
 505326c:	9080040c 	andi	r2,r18,16
 5053270:	1001b326 	beq	r2,zero,5053940 <___vfprintf_internal_r+0x18ac>
 5053274:	d9002d17 	ldw	r4,180(sp)
 5053278:	d9402917 	ldw	r5,164(sp)
 505327c:	d8002785 	stb	zero,158(sp)
 5053280:	20800104 	addi	r2,r4,4
 5053284:	24c00017 	ldw	r19,0(r4)
 5053288:	002d883a 	mov	r22,zero
 505328c:	2801b516 	blt	r5,zero,5053964 <___vfprintf_internal_r+0x18d0>
 5053290:	00ffdfc4 	movi	r3,-129
 5053294:	d8802d15 	stw	r2,180(sp)
 5053298:	90e4703a 	and	r18,r18,r3
 505329c:	983d2726 	beq	r19,zero,505273c <_gp+0xfffe7314>
 50532a0:	0039883a 	mov	fp,zero
 50532a4:	003d2a06 	br	5052750 <_gp+0xfffe7328>
 50532a8:	dc402617 	ldw	r17,152(sp)
 50532ac:	0441d30e 	bge	zero,r17,50539fc <___vfprintf_internal_r+0x1968>
 50532b0:	dc403217 	ldw	r17,200(sp)
 50532b4:	d8803317 	ldw	r2,204(sp)
 50532b8:	1440010e 	bge	r2,r17,50532c0 <___vfprintf_internal_r+0x122c>
 50532bc:	1023883a 	mov	r17,r2
 50532c0:	04400a0e 	bge	zero,r17,50532ec <___vfprintf_internal_r+0x1258>
 50532c4:	d8801f17 	ldw	r2,124(sp)
 50532c8:	1c47883a 	add	r3,r3,r17
 50532cc:	44000015 	stw	r16,0(r8)
 50532d0:	10800044 	addi	r2,r2,1
 50532d4:	44400115 	stw	r17,4(r8)
 50532d8:	d8c02015 	stw	r3,128(sp)
 50532dc:	d8801f15 	stw	r2,124(sp)
 50532e0:	010001c4 	movi	r4,7
 50532e4:	20826516 	blt	r4,r2,5053c7c <___vfprintf_internal_r+0x1be8>
 50532e8:	42000204 	addi	r8,r8,8
 50532ec:	88026116 	blt	r17,zero,5053c74 <___vfprintf_internal_r+0x1be0>
 50532f0:	d9003217 	ldw	r4,200(sp)
 50532f4:	2463c83a 	sub	r17,r4,r17
 50532f8:	04407b0e 	bge	zero,r17,50534e8 <___vfprintf_internal_r+0x1454>
 50532fc:	05800404 	movi	r22,16
 5053300:	d8801f17 	ldw	r2,124(sp)
 5053304:	b4419d0e 	bge	r22,r17,505397c <___vfprintf_internal_r+0x18e8>
 5053308:	010141b4 	movhi	r4,1286
 505330c:	21049c84 	addi	r4,r4,4722
 5053310:	d9002b15 	stw	r4,172(sp)
 5053314:	070001c4 	movi	fp,7
 5053318:	dcc02c17 	ldw	r19,176(sp)
 505331c:	00000306 	br	505332c <___vfprintf_internal_r+0x1298>
 5053320:	42000204 	addi	r8,r8,8
 5053324:	8c7ffc04 	addi	r17,r17,-16
 5053328:	b441970e 	bge	r22,r17,5053988 <___vfprintf_internal_r+0x18f4>
 505332c:	18c00404 	addi	r3,r3,16
 5053330:	10800044 	addi	r2,r2,1
 5053334:	45000015 	stw	r20,0(r8)
 5053338:	45800115 	stw	r22,4(r8)
 505333c:	d8c02015 	stw	r3,128(sp)
 5053340:	d8801f15 	stw	r2,124(sp)
 5053344:	e0bff60e 	bge	fp,r2,5053320 <_gp+0xfffe7ef8>
 5053348:	d9801e04 	addi	r6,sp,120
 505334c:	b80b883a 	mov	r5,r23
 5053350:	9809883a 	mov	r4,r19
 5053354:	505a0f00 	call	505a0f0 <__sprint_r>
 5053358:	103c501e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 505335c:	d8c02017 	ldw	r3,128(sp)
 5053360:	d8801f17 	ldw	r2,124(sp)
 5053364:	da000404 	addi	r8,sp,16
 5053368:	003fee06 	br	5053324 <_gp+0xfffe7efc>
 505336c:	d9002c17 	ldw	r4,176(sp)
 5053370:	d9801e04 	addi	r6,sp,120
 5053374:	b80b883a 	mov	r5,r23
 5053378:	505a0f00 	call	505a0f0 <__sprint_r>
 505337c:	103c471e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053380:	d8c02017 	ldw	r3,128(sp)
 5053384:	df002787 	ldb	fp,158(sp)
 5053388:	da000404 	addi	r8,sp,16
 505338c:	003d5606 	br	50528e8 <_gp+0xfffe74c0>
 5053390:	9080040c 	andi	r2,r18,16
 5053394:	10016126 	beq	r2,zero,505391c <___vfprintf_internal_r+0x1888>
 5053398:	d8802d17 	ldw	r2,180(sp)
 505339c:	14c00017 	ldw	r19,0(r2)
 50533a0:	10800104 	addi	r2,r2,4
 50533a4:	d8802d15 	stw	r2,180(sp)
 50533a8:	982dd7fa 	srai	r22,r19,31
 50533ac:	b005883a 	mov	r2,r22
 50533b0:	003c8206 	br	50525bc <_gp+0xfffe7194>
 50533b4:	9080040c 	andi	r2,r18,16
 50533b8:	10003526 	beq	r2,zero,5053490 <___vfprintf_internal_r+0x13fc>
 50533bc:	d9402d17 	ldw	r5,180(sp)
 50533c0:	d8c02917 	ldw	r3,164(sp)
 50533c4:	d8002785 	stb	zero,158(sp)
 50533c8:	28800104 	addi	r2,r5,4
 50533cc:	2cc00017 	ldw	r19,0(r5)
 50533d0:	002d883a 	mov	r22,zero
 50533d4:	18003716 	blt	r3,zero,50534b4 <___vfprintf_internal_r+0x1420>
 50533d8:	00ffdfc4 	movi	r3,-129
 50533dc:	d8802d15 	stw	r2,180(sp)
 50533e0:	90e4703a 	and	r18,r18,r3
 50533e4:	0039883a 	mov	fp,zero
 50533e8:	983df326 	beq	r19,zero,5052bb8 <_gp+0xfffe7790>
 50533ec:	00800244 	movi	r2,9
 50533f0:	14fc7b36 	bltu	r2,r19,50525e0 <_gp+0xfffe71b8>
 50533f4:	d8c02817 	ldw	r3,160(sp)
 50533f8:	dc001dc4 	addi	r16,sp,119
 50533fc:	9cc00c04 	addi	r19,r19,48
 5053400:	1c07c83a 	sub	r3,r3,r16
 5053404:	dcc01dc5 	stb	r19,119(sp)
 5053408:	d8c02e15 	stw	r3,184(sp)
 505340c:	003ce806 	br	50527b0 <_gp+0xfffe7388>
 5053410:	d8803317 	ldw	r2,204(sp)
 5053414:	143fffc4 	addi	r16,r2,-1
 5053418:	043f4d0e 	bge	zero,r16,5053150 <_gp+0xfffe7d28>
 505341c:	07000404 	movi	fp,16
 5053420:	e400810e 	bge	fp,r16,5053628 <___vfprintf_internal_r+0x1594>
 5053424:	014141b4 	movhi	r5,1286
 5053428:	29449c84 	addi	r5,r5,4722
 505342c:	d9402b15 	stw	r5,172(sp)
 5053430:	01c001c4 	movi	r7,7
 5053434:	dcc02c17 	ldw	r19,176(sp)
 5053438:	00000306 	br	5053448 <___vfprintf_internal_r+0x13b4>
 505343c:	b5800204 	addi	r22,r22,8
 5053440:	843ffc04 	addi	r16,r16,-16
 5053444:	e4007b0e 	bge	fp,r16,5053634 <___vfprintf_internal_r+0x15a0>
 5053448:	18c00404 	addi	r3,r3,16
 505344c:	8c400044 	addi	r17,r17,1
 5053450:	b5000015 	stw	r20,0(r22)
 5053454:	b7000115 	stw	fp,4(r22)
 5053458:	d8c02015 	stw	r3,128(sp)
 505345c:	dc401f15 	stw	r17,124(sp)
 5053460:	3c7ff60e 	bge	r7,r17,505343c <_gp+0xfffe8014>
 5053464:	d9801e04 	addi	r6,sp,120
 5053468:	b80b883a 	mov	r5,r23
 505346c:	9809883a 	mov	r4,r19
 5053470:	d9c03c15 	stw	r7,240(sp)
 5053474:	505a0f00 	call	505a0f0 <__sprint_r>
 5053478:	d9c03c17 	ldw	r7,240(sp)
 505347c:	103c071e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053480:	d8c02017 	ldw	r3,128(sp)
 5053484:	dc401f17 	ldw	r17,124(sp)
 5053488:	dd800404 	addi	r22,sp,16
 505348c:	003fec06 	br	5053440 <_gp+0xfffe8018>
 5053490:	9080100c 	andi	r2,r18,64
 5053494:	d8002785 	stb	zero,158(sp)
 5053498:	10010e26 	beq	r2,zero,50538d4 <___vfprintf_internal_r+0x1840>
 505349c:	d9002d17 	ldw	r4,180(sp)
 50534a0:	d9402917 	ldw	r5,164(sp)
 50534a4:	002d883a 	mov	r22,zero
 50534a8:	20800104 	addi	r2,r4,4
 50534ac:	24c0000b 	ldhu	r19,0(r4)
 50534b0:	283fc90e 	bge	r5,zero,50533d8 <_gp+0xfffe7fb0>
 50534b4:	d8802d15 	stw	r2,180(sp)
 50534b8:	0039883a 	mov	fp,zero
 50534bc:	9d84b03a 	or	r2,r19,r22
 50534c0:	103c461e 	bne	r2,zero,50525dc <_gp+0xfffe71b4>
 50534c4:	00800044 	movi	r2,1
 50534c8:	003e6c06 	br	5052e7c <_gp+0xfffe7a54>
 50534cc:	d9002c17 	ldw	r4,176(sp)
 50534d0:	d9801e04 	addi	r6,sp,120
 50534d4:	b80b883a 	mov	r5,r23
 50534d8:	505a0f00 	call	505a0f0 <__sprint_r>
 50534dc:	103bef1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50534e0:	d8c02017 	ldw	r3,128(sp)
 50534e4:	da000404 	addi	r8,sp,16
 50534e8:	d9003217 	ldw	r4,200(sp)
 50534ec:	d8802617 	ldw	r2,152(sp)
 50534f0:	d9403317 	ldw	r5,204(sp)
 50534f4:	8123883a 	add	r17,r16,r4
 50534f8:	11400216 	blt	r2,r5,5053504 <___vfprintf_internal_r+0x1470>
 50534fc:	9100004c 	andi	r4,r18,1
 5053500:	20000d26 	beq	r4,zero,5053538 <___vfprintf_internal_r+0x14a4>
 5053504:	d9003717 	ldw	r4,220(sp)
 5053508:	d9403417 	ldw	r5,208(sp)
 505350c:	1907883a 	add	r3,r3,r4
 5053510:	d9001f17 	ldw	r4,124(sp)
 5053514:	41400015 	stw	r5,0(r8)
 5053518:	d9403717 	ldw	r5,220(sp)
 505351c:	21000044 	addi	r4,r4,1
 5053520:	d8c02015 	stw	r3,128(sp)
 5053524:	41400115 	stw	r5,4(r8)
 5053528:	d9001f15 	stw	r4,124(sp)
 505352c:	014001c4 	movi	r5,7
 5053530:	2901e816 	blt	r5,r4,5053cd4 <___vfprintf_internal_r+0x1c40>
 5053534:	42000204 	addi	r8,r8,8
 5053538:	d9003317 	ldw	r4,204(sp)
 505353c:	8121883a 	add	r16,r16,r4
 5053540:	2085c83a 	sub	r2,r4,r2
 5053544:	8461c83a 	sub	r16,r16,r17
 5053548:	1400010e 	bge	r2,r16,5053550 <___vfprintf_internal_r+0x14bc>
 505354c:	1021883a 	mov	r16,r2
 5053550:	04000a0e 	bge	zero,r16,505357c <___vfprintf_internal_r+0x14e8>
 5053554:	d9001f17 	ldw	r4,124(sp)
 5053558:	1c07883a 	add	r3,r3,r16
 505355c:	44400015 	stw	r17,0(r8)
 5053560:	21000044 	addi	r4,r4,1
 5053564:	44000115 	stw	r16,4(r8)
 5053568:	d8c02015 	stw	r3,128(sp)
 505356c:	d9001f15 	stw	r4,124(sp)
 5053570:	014001c4 	movi	r5,7
 5053574:	2901fb16 	blt	r5,r4,5053d64 <___vfprintf_internal_r+0x1cd0>
 5053578:	42000204 	addi	r8,r8,8
 505357c:	8001f716 	blt	r16,zero,5053d5c <___vfprintf_internal_r+0x1cc8>
 5053580:	1421c83a 	sub	r16,r2,r16
 5053584:	043d380e 	bge	zero,r16,5052a68 <_gp+0xfffe7640>
 5053588:	04400404 	movi	r17,16
 505358c:	d8801f17 	ldw	r2,124(sp)
 5053590:	8c3efb0e 	bge	r17,r16,5053180 <_gp+0xfffe7d58>
 5053594:	014141b4 	movhi	r5,1286
 5053598:	29449c84 	addi	r5,r5,4722
 505359c:	d9402b15 	stw	r5,172(sp)
 50535a0:	058001c4 	movi	r22,7
 50535a4:	dcc02c17 	ldw	r19,176(sp)
 50535a8:	00000306 	br	50535b8 <___vfprintf_internal_r+0x1524>
 50535ac:	42000204 	addi	r8,r8,8
 50535b0:	843ffc04 	addi	r16,r16,-16
 50535b4:	8c3ef50e 	bge	r17,r16,505318c <_gp+0xfffe7d64>
 50535b8:	18c00404 	addi	r3,r3,16
 50535bc:	10800044 	addi	r2,r2,1
 50535c0:	45000015 	stw	r20,0(r8)
 50535c4:	44400115 	stw	r17,4(r8)
 50535c8:	d8c02015 	stw	r3,128(sp)
 50535cc:	d8801f15 	stw	r2,124(sp)
 50535d0:	b0bff60e 	bge	r22,r2,50535ac <_gp+0xfffe8184>
 50535d4:	d9801e04 	addi	r6,sp,120
 50535d8:	b80b883a 	mov	r5,r23
 50535dc:	9809883a 	mov	r4,r19
 50535e0:	505a0f00 	call	505a0f0 <__sprint_r>
 50535e4:	103bad1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50535e8:	d8c02017 	ldw	r3,128(sp)
 50535ec:	d8801f17 	ldw	r2,124(sp)
 50535f0:	da000404 	addi	r8,sp,16
 50535f4:	003fee06 	br	50535b0 <_gp+0xfffe8188>
 50535f8:	9088703a 	and	r4,r18,r2
 50535fc:	203eab1e 	bne	r4,zero,50530ac <_gp+0xfffe7c84>
 5053600:	dc401f17 	ldw	r17,124(sp)
 5053604:	40800115 	stw	r2,4(r8)
 5053608:	44000015 	stw	r16,0(r8)
 505360c:	8c400044 	addi	r17,r17,1
 5053610:	d8c02015 	stw	r3,128(sp)
 5053614:	dc401f15 	stw	r17,124(sp)
 5053618:	008001c4 	movi	r2,7
 505361c:	14400e16 	blt	r2,r17,5053658 <___vfprintf_internal_r+0x15c4>
 5053620:	45800204 	addi	r22,r8,8
 5053624:	003eca06 	br	5053150 <_gp+0xfffe7d28>
 5053628:	010141b4 	movhi	r4,1286
 505362c:	21049c84 	addi	r4,r4,4722
 5053630:	d9002b15 	stw	r4,172(sp)
 5053634:	d8802b17 	ldw	r2,172(sp)
 5053638:	1c07883a 	add	r3,r3,r16
 505363c:	8c400044 	addi	r17,r17,1
 5053640:	b0800015 	stw	r2,0(r22)
 5053644:	b4000115 	stw	r16,4(r22)
 5053648:	d8c02015 	stw	r3,128(sp)
 505364c:	dc401f15 	stw	r17,124(sp)
 5053650:	008001c4 	movi	r2,7
 5053654:	147ebd0e 	bge	r2,r17,505314c <_gp+0xfffe7d24>
 5053658:	d9002c17 	ldw	r4,176(sp)
 505365c:	d9801e04 	addi	r6,sp,120
 5053660:	b80b883a 	mov	r5,r23
 5053664:	505a0f00 	call	505a0f0 <__sprint_r>
 5053668:	103b8c1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 505366c:	d8c02017 	ldw	r3,128(sp)
 5053670:	dc401f17 	ldw	r17,124(sp)
 5053674:	dd800404 	addi	r22,sp,16
 5053678:	003eb506 	br	5053150 <_gp+0xfffe7d28>
 505367c:	d9002c17 	ldw	r4,176(sp)
 5053680:	d9801e04 	addi	r6,sp,120
 5053684:	b80b883a 	mov	r5,r23
 5053688:	505a0f00 	call	505a0f0 <__sprint_r>
 505368c:	103b831e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053690:	d8c02017 	ldw	r3,128(sp)
 5053694:	dc401f17 	ldw	r17,124(sp)
 5053698:	da000404 	addi	r8,sp,16
 505369c:	003e8d06 	br	50530d4 <_gp+0xfffe7cac>
 50536a0:	d9002c17 	ldw	r4,176(sp)
 50536a4:	d9801e04 	addi	r6,sp,120
 50536a8:	b80b883a 	mov	r5,r23
 50536ac:	505a0f00 	call	505a0f0 <__sprint_r>
 50536b0:	103b7a1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50536b4:	d8c02017 	ldw	r3,128(sp)
 50536b8:	dc401f17 	ldw	r17,124(sp)
 50536bc:	dd800404 	addi	r22,sp,16
 50536c0:	003e8f06 	br	5053100 <_gp+0xfffe7cd8>
 50536c4:	0027883a 	mov	r19,zero
 50536c8:	003f4a06 	br	50533f4 <_gp+0xfffe7fcc>
 50536cc:	d9002c17 	ldw	r4,176(sp)
 50536d0:	d9801e04 	addi	r6,sp,120
 50536d4:	b80b883a 	mov	r5,r23
 50536d8:	505a0f00 	call	505a0f0 <__sprint_r>
 50536dc:	103b6f1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50536e0:	d8c02017 	ldw	r3,128(sp)
 50536e4:	da000404 	addi	r8,sp,16
 50536e8:	003c9d06 	br	5052960 <_gp+0xfffe7538>
 50536ec:	04e7c83a 	sub	r19,zero,r19
 50536f0:	9804c03a 	cmpne	r2,r19,zero
 50536f4:	05adc83a 	sub	r22,zero,r22
 50536f8:	b0adc83a 	sub	r22,r22,r2
 50536fc:	d8802917 	ldw	r2,164(sp)
 5053700:	07000b44 	movi	fp,45
 5053704:	df002785 	stb	fp,158(sp)
 5053708:	10017b16 	blt	r2,zero,5053cf8 <___vfprintf_internal_r+0x1c64>
 505370c:	00bfdfc4 	movi	r2,-129
 5053710:	90a4703a 	and	r18,r18,r2
 5053714:	003bb106 	br	50525dc <_gp+0xfffe71b4>
 5053718:	d9003617 	ldw	r4,216(sp)
 505371c:	d9403817 	ldw	r5,224(sp)
 5053720:	da003d15 	stw	r8,244(sp)
 5053724:	505895c0 	call	505895c <__fpclassifyd>
 5053728:	da003d17 	ldw	r8,244(sp)
 505372c:	1000f026 	beq	r2,zero,5053af0 <___vfprintf_internal_r+0x1a5c>
 5053730:	d9002917 	ldw	r4,164(sp)
 5053734:	05bff7c4 	movi	r22,-33
 5053738:	00bfffc4 	movi	r2,-1
 505373c:	8dac703a 	and	r22,r17,r22
 5053740:	20820026 	beq	r4,r2,5053f44 <___vfprintf_internal_r+0x1eb0>
 5053744:	008011c4 	movi	r2,71
 5053748:	b081f726 	beq	r22,r2,5053f28 <___vfprintf_internal_r+0x1e94>
 505374c:	d9003817 	ldw	r4,224(sp)
 5053750:	90c04014 	ori	r3,r18,256
 5053754:	d8c02b15 	stw	r3,172(sp)
 5053758:	20021516 	blt	r4,zero,5053fb0 <___vfprintf_internal_r+0x1f1c>
 505375c:	dcc03817 	ldw	r19,224(sp)
 5053760:	d8002a05 	stb	zero,168(sp)
 5053764:	00801984 	movi	r2,102
 5053768:	8881f926 	beq	r17,r2,5053f50 <___vfprintf_internal_r+0x1ebc>
 505376c:	00801184 	movi	r2,70
 5053770:	88821c26 	beq	r17,r2,5053fe4 <___vfprintf_internal_r+0x1f50>
 5053774:	00801144 	movi	r2,69
 5053778:	b081ef26 	beq	r22,r2,5053f38 <___vfprintf_internal_r+0x1ea4>
 505377c:	d8c02917 	ldw	r3,164(sp)
 5053780:	d8802104 	addi	r2,sp,132
 5053784:	d8800315 	stw	r2,12(sp)
 5053788:	d9403617 	ldw	r5,216(sp)
 505378c:	d8802504 	addi	r2,sp,148
 5053790:	d9002c17 	ldw	r4,176(sp)
 5053794:	d8800215 	stw	r2,8(sp)
 5053798:	d8802604 	addi	r2,sp,152
 505379c:	d8c00015 	stw	r3,0(sp)
 50537a0:	d8800115 	stw	r2,4(sp)
 50537a4:	01c00084 	movi	r7,2
 50537a8:	980d883a 	mov	r6,r19
 50537ac:	d8c03c15 	stw	r3,240(sp)
 50537b0:	da003d15 	stw	r8,244(sp)
 50537b4:	50547dc0 	call	50547dc <_dtoa_r>
 50537b8:	1021883a 	mov	r16,r2
 50537bc:	008019c4 	movi	r2,103
 50537c0:	d8c03c17 	ldw	r3,240(sp)
 50537c4:	da003d17 	ldw	r8,244(sp)
 50537c8:	88817126 	beq	r17,r2,5053d90 <___vfprintf_internal_r+0x1cfc>
 50537cc:	008011c4 	movi	r2,71
 50537d0:	88829226 	beq	r17,r2,505421c <___vfprintf_internal_r+0x2188>
 50537d4:	80f9883a 	add	fp,r16,r3
 50537d8:	d9003617 	ldw	r4,216(sp)
 50537dc:	000d883a 	mov	r6,zero
 50537e0:	000f883a 	mov	r7,zero
 50537e4:	980b883a 	mov	r5,r19
 50537e8:	da003d15 	stw	r8,244(sp)
 50537ec:	504daa80 	call	504daa8 <__eqdf2>
 50537f0:	da003d17 	ldw	r8,244(sp)
 50537f4:	10018d26 	beq	r2,zero,5053e2c <___vfprintf_internal_r+0x1d98>
 50537f8:	d8802117 	ldw	r2,132(sp)
 50537fc:	1700062e 	bgeu	r2,fp,5053818 <___vfprintf_internal_r+0x1784>
 5053800:	01000c04 	movi	r4,48
 5053804:	10c00044 	addi	r3,r2,1
 5053808:	d8c02115 	stw	r3,132(sp)
 505380c:	11000005 	stb	r4,0(r2)
 5053810:	d8802117 	ldw	r2,132(sp)
 5053814:	173ffb36 	bltu	r2,fp,5053804 <_gp+0xfffe83dc>
 5053818:	1405c83a 	sub	r2,r2,r16
 505381c:	d8803315 	stw	r2,204(sp)
 5053820:	008011c4 	movi	r2,71
 5053824:	b0817626 	beq	r22,r2,5053e00 <___vfprintf_internal_r+0x1d6c>
 5053828:	00801944 	movi	r2,101
 505382c:	1442810e 	bge	r2,r17,5054234 <___vfprintf_internal_r+0x21a0>
 5053830:	d8c02617 	ldw	r3,152(sp)
 5053834:	00801984 	movi	r2,102
 5053838:	d8c03215 	stw	r3,200(sp)
 505383c:	8881fe26 	beq	r17,r2,5054038 <___vfprintf_internal_r+0x1fa4>
 5053840:	d8c03217 	ldw	r3,200(sp)
 5053844:	d9003317 	ldw	r4,204(sp)
 5053848:	1901dd16 	blt	r3,r4,5053fc0 <___vfprintf_internal_r+0x1f2c>
 505384c:	9480004c 	andi	r18,r18,1
 5053850:	90022b1e 	bne	r18,zero,5054100 <___vfprintf_internal_r+0x206c>
 5053854:	1805883a 	mov	r2,r3
 5053858:	18028016 	blt	r3,zero,505425c <___vfprintf_internal_r+0x21c8>
 505385c:	d8c03217 	ldw	r3,200(sp)
 5053860:	044019c4 	movi	r17,103
 5053864:	d8c02e15 	stw	r3,184(sp)
 5053868:	df002a07 	ldb	fp,168(sp)
 505386c:	e001531e 	bne	fp,zero,5053dbc <___vfprintf_internal_r+0x1d28>
 5053870:	df002783 	ldbu	fp,158(sp)
 5053874:	d8802a15 	stw	r2,168(sp)
 5053878:	dc802b17 	ldw	r18,172(sp)
 505387c:	d8002915 	stw	zero,164(sp)
 5053880:	003bd106 	br	50527c8 <_gp+0xfffe73a0>
 5053884:	d8802d17 	ldw	r2,180(sp)
 5053888:	d8c02d17 	ldw	r3,180(sp)
 505388c:	d9002d17 	ldw	r4,180(sp)
 5053890:	10800017 	ldw	r2,0(r2)
 5053894:	18c00117 	ldw	r3,4(r3)
 5053898:	21000204 	addi	r4,r4,8
 505389c:	d8803615 	stw	r2,216(sp)
 50538a0:	d8c03815 	stw	r3,224(sp)
 50538a4:	d9002d15 	stw	r4,180(sp)
 50538a8:	003b7506 	br	5052680 <_gp+0xfffe7258>
 50538ac:	ac400007 	ldb	r17,0(r21)
 50538b0:	003a5906 	br	5052218 <_gp+0xfffe6df0>
 50538b4:	9080100c 	andi	r2,r18,64
 50538b8:	1000a826 	beq	r2,zero,5053b5c <___vfprintf_internal_r+0x1ac8>
 50538bc:	d9002d17 	ldw	r4,180(sp)
 50538c0:	002d883a 	mov	r22,zero
 50538c4:	24c0000b 	ldhu	r19,0(r4)
 50538c8:	21000104 	addi	r4,r4,4
 50538cc:	d9002d15 	stw	r4,180(sp)
 50538d0:	003ccb06 	br	5052c00 <_gp+0xfffe77d8>
 50538d4:	d8c02d17 	ldw	r3,180(sp)
 50538d8:	d9002917 	ldw	r4,164(sp)
 50538dc:	002d883a 	mov	r22,zero
 50538e0:	18800104 	addi	r2,r3,4
 50538e4:	1cc00017 	ldw	r19,0(r3)
 50538e8:	203ebb0e 	bge	r4,zero,50533d8 <_gp+0xfffe7fb0>
 50538ec:	003ef106 	br	50534b4 <_gp+0xfffe808c>
 50538f0:	9080040c 	andi	r2,r18,16
 50538f4:	1000921e 	bne	r2,zero,5053b40 <___vfprintf_internal_r+0x1aac>
 50538f8:	9480100c 	andi	r18,r18,64
 50538fc:	90013926 	beq	r18,zero,5053de4 <___vfprintf_internal_r+0x1d50>
 5053900:	d9002d17 	ldw	r4,180(sp)
 5053904:	d9402f17 	ldw	r5,188(sp)
 5053908:	20800017 	ldw	r2,0(r4)
 505390c:	21000104 	addi	r4,r4,4
 5053910:	d9002d15 	stw	r4,180(sp)
 5053914:	1140000d 	sth	r5,0(r2)
 5053918:	003a1606 	br	5052174 <_gp+0xfffe6d4c>
 505391c:	9080100c 	andi	r2,r18,64
 5053920:	10008026 	beq	r2,zero,5053b24 <___vfprintf_internal_r+0x1a90>
 5053924:	d8c02d17 	ldw	r3,180(sp)
 5053928:	1cc0000f 	ldh	r19,0(r3)
 505392c:	18c00104 	addi	r3,r3,4
 5053930:	d8c02d15 	stw	r3,180(sp)
 5053934:	982dd7fa 	srai	r22,r19,31
 5053938:	b005883a 	mov	r2,r22
 505393c:	003b1f06 	br	50525bc <_gp+0xfffe7194>
 5053940:	9080100c 	andi	r2,r18,64
 5053944:	d8002785 	stb	zero,158(sp)
 5053948:	10008a1e 	bne	r2,zero,5053b74 <___vfprintf_internal_r+0x1ae0>
 505394c:	d9402d17 	ldw	r5,180(sp)
 5053950:	d8c02917 	ldw	r3,164(sp)
 5053954:	002d883a 	mov	r22,zero
 5053958:	28800104 	addi	r2,r5,4
 505395c:	2cc00017 	ldw	r19,0(r5)
 5053960:	183e4b0e 	bge	r3,zero,5053290 <_gp+0xfffe7e68>
 5053964:	9d86b03a 	or	r3,r19,r22
 5053968:	d8802d15 	stw	r2,180(sp)
 505396c:	183e4c1e 	bne	r3,zero,50532a0 <_gp+0xfffe7e78>
 5053970:	0039883a 	mov	fp,zero
 5053974:	0005883a 	mov	r2,zero
 5053978:	003d4006 	br	5052e7c <_gp+0xfffe7a54>
 505397c:	014141b4 	movhi	r5,1286
 5053980:	29449c84 	addi	r5,r5,4722
 5053984:	d9402b15 	stw	r5,172(sp)
 5053988:	d9402b17 	ldw	r5,172(sp)
 505398c:	1c47883a 	add	r3,r3,r17
 5053990:	10800044 	addi	r2,r2,1
 5053994:	41400015 	stw	r5,0(r8)
 5053998:	44400115 	stw	r17,4(r8)
 505399c:	d8c02015 	stw	r3,128(sp)
 50539a0:	d8801f15 	stw	r2,124(sp)
 50539a4:	010001c4 	movi	r4,7
 50539a8:	20bec816 	blt	r4,r2,50534cc <_gp+0xfffe80a4>
 50539ac:	42000204 	addi	r8,r8,8
 50539b0:	003ecd06 	br	50534e8 <_gp+0xfffe80c0>
 50539b4:	d9002917 	ldw	r4,164(sp)
 50539b8:	d8002785 	stb	zero,158(sp)
 50539bc:	203d2d16 	blt	r4,zero,5052e74 <_gp+0xfffe7a4c>
 50539c0:	00bfdfc4 	movi	r2,-129
 50539c4:	90a4703a 	and	r18,r18,r2
 50539c8:	003a9106 	br	5052410 <_gp+0xfffe6fe8>
 50539cc:	010141b4 	movhi	r4,1286
 50539d0:	21049c84 	addi	r4,r4,4722
 50539d4:	d9002b15 	stw	r4,172(sp)
 50539d8:	003c0c06 	br	5052a0c <_gp+0xfffe75e4>
 50539dc:	d9002c17 	ldw	r4,176(sp)
 50539e0:	d9801e04 	addi	r6,sp,120
 50539e4:	b80b883a 	mov	r5,r23
 50539e8:	505a0f00 	call	505a0f0 <__sprint_r>
 50539ec:	103aab1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 50539f0:	d8c02017 	ldw	r3,128(sp)
 50539f4:	da000404 	addi	r8,sp,16
 50539f8:	003d4106 	br	5052f00 <_gp+0xfffe7ad8>
 50539fc:	d8801f17 	ldw	r2,124(sp)
 5053a00:	014141b4 	movhi	r5,1286
 5053a04:	01000044 	movi	r4,1
 5053a08:	18c00044 	addi	r3,r3,1
 5053a0c:	10800044 	addi	r2,r2,1
 5053a10:	29449404 	addi	r5,r5,4688
 5053a14:	41000115 	stw	r4,4(r8)
 5053a18:	41400015 	stw	r5,0(r8)
 5053a1c:	d8c02015 	stw	r3,128(sp)
 5053a20:	d8801f15 	stw	r2,124(sp)
 5053a24:	010001c4 	movi	r4,7
 5053a28:	20805c16 	blt	r4,r2,5053b9c <___vfprintf_internal_r+0x1b08>
 5053a2c:	42000204 	addi	r8,r8,8
 5053a30:	8800041e 	bne	r17,zero,5053a44 <___vfprintf_internal_r+0x19b0>
 5053a34:	d8803317 	ldw	r2,204(sp)
 5053a38:	1000021e 	bne	r2,zero,5053a44 <___vfprintf_internal_r+0x19b0>
 5053a3c:	9080004c 	andi	r2,r18,1
 5053a40:	103c0926 	beq	r2,zero,5052a68 <_gp+0xfffe7640>
 5053a44:	d9003717 	ldw	r4,220(sp)
 5053a48:	d8801f17 	ldw	r2,124(sp)
 5053a4c:	d9403417 	ldw	r5,208(sp)
 5053a50:	20c7883a 	add	r3,r4,r3
 5053a54:	10800044 	addi	r2,r2,1
 5053a58:	41000115 	stw	r4,4(r8)
 5053a5c:	41400015 	stw	r5,0(r8)
 5053a60:	d8c02015 	stw	r3,128(sp)
 5053a64:	d8801f15 	stw	r2,124(sp)
 5053a68:	010001c4 	movi	r4,7
 5053a6c:	20812116 	blt	r4,r2,5053ef4 <___vfprintf_internal_r+0x1e60>
 5053a70:	42000204 	addi	r8,r8,8
 5053a74:	0463c83a 	sub	r17,zero,r17
 5053a78:	0440730e 	bge	zero,r17,5053c48 <___vfprintf_internal_r+0x1bb4>
 5053a7c:	05800404 	movi	r22,16
 5053a80:	b440860e 	bge	r22,r17,5053c9c <___vfprintf_internal_r+0x1c08>
 5053a84:	014141b4 	movhi	r5,1286
 5053a88:	29449c84 	addi	r5,r5,4722
 5053a8c:	d9402b15 	stw	r5,172(sp)
 5053a90:	070001c4 	movi	fp,7
 5053a94:	dcc02c17 	ldw	r19,176(sp)
 5053a98:	00000306 	br	5053aa8 <___vfprintf_internal_r+0x1a14>
 5053a9c:	42000204 	addi	r8,r8,8
 5053aa0:	8c7ffc04 	addi	r17,r17,-16
 5053aa4:	b440800e 	bge	r22,r17,5053ca8 <___vfprintf_internal_r+0x1c14>
 5053aa8:	18c00404 	addi	r3,r3,16
 5053aac:	10800044 	addi	r2,r2,1
 5053ab0:	45000015 	stw	r20,0(r8)
 5053ab4:	45800115 	stw	r22,4(r8)
 5053ab8:	d8c02015 	stw	r3,128(sp)
 5053abc:	d8801f15 	stw	r2,124(sp)
 5053ac0:	e0bff60e 	bge	fp,r2,5053a9c <_gp+0xfffe8674>
 5053ac4:	d9801e04 	addi	r6,sp,120
 5053ac8:	b80b883a 	mov	r5,r23
 5053acc:	9809883a 	mov	r4,r19
 5053ad0:	505a0f00 	call	505a0f0 <__sprint_r>
 5053ad4:	103a711e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053ad8:	d8c02017 	ldw	r3,128(sp)
 5053adc:	d8801f17 	ldw	r2,124(sp)
 5053ae0:	da000404 	addi	r8,sp,16
 5053ae4:	003fee06 	br	5053aa0 <_gp+0xfffe8678>
 5053ae8:	00bfffc4 	movi	r2,-1
 5053aec:	003a6f06 	br	50524ac <_gp+0xfffe7084>
 5053af0:	008011c4 	movi	r2,71
 5053af4:	1440b816 	blt	r2,r17,5053dd8 <___vfprintf_internal_r+0x1d44>
 5053af8:	040141b4 	movhi	r16,1286
 5053afc:	84048604 	addi	r16,r16,4632
 5053b00:	00c000c4 	movi	r3,3
 5053b04:	00bfdfc4 	movi	r2,-129
 5053b08:	d8c02a15 	stw	r3,168(sp)
 5053b0c:	90a4703a 	and	r18,r18,r2
 5053b10:	df002783 	ldbu	fp,158(sp)
 5053b14:	d8c02e15 	stw	r3,184(sp)
 5053b18:	d8002915 	stw	zero,164(sp)
 5053b1c:	d8003215 	stw	zero,200(sp)
 5053b20:	003b2906 	br	50527c8 <_gp+0xfffe73a0>
 5053b24:	d9002d17 	ldw	r4,180(sp)
 5053b28:	24c00017 	ldw	r19,0(r4)
 5053b2c:	21000104 	addi	r4,r4,4
 5053b30:	d9002d15 	stw	r4,180(sp)
 5053b34:	982dd7fa 	srai	r22,r19,31
 5053b38:	b005883a 	mov	r2,r22
 5053b3c:	003a9f06 	br	50525bc <_gp+0xfffe7194>
 5053b40:	d9402d17 	ldw	r5,180(sp)
 5053b44:	d8c02f17 	ldw	r3,188(sp)
 5053b48:	28800017 	ldw	r2,0(r5)
 5053b4c:	29400104 	addi	r5,r5,4
 5053b50:	d9402d15 	stw	r5,180(sp)
 5053b54:	10c00015 	stw	r3,0(r2)
 5053b58:	00398606 	br	5052174 <_gp+0xfffe6d4c>
 5053b5c:	d9402d17 	ldw	r5,180(sp)
 5053b60:	002d883a 	mov	r22,zero
 5053b64:	2cc00017 	ldw	r19,0(r5)
 5053b68:	29400104 	addi	r5,r5,4
 5053b6c:	d9402d15 	stw	r5,180(sp)
 5053b70:	003c2306 	br	5052c00 <_gp+0xfffe77d8>
 5053b74:	d8c02d17 	ldw	r3,180(sp)
 5053b78:	d9002917 	ldw	r4,164(sp)
 5053b7c:	002d883a 	mov	r22,zero
 5053b80:	18800104 	addi	r2,r3,4
 5053b84:	1cc0000b 	ldhu	r19,0(r3)
 5053b88:	203dc10e 	bge	r4,zero,5053290 <_gp+0xfffe7e68>
 5053b8c:	003f7506 	br	5053964 <_gp+0xfffe853c>
 5053b90:	040141b4 	movhi	r16,1286
 5053b94:	84048404 	addi	r16,r16,4624
 5053b98:	003acc06 	br	50526cc <_gp+0xfffe72a4>
 5053b9c:	d9002c17 	ldw	r4,176(sp)
 5053ba0:	d9801e04 	addi	r6,sp,120
 5053ba4:	b80b883a 	mov	r5,r23
 5053ba8:	505a0f00 	call	505a0f0 <__sprint_r>
 5053bac:	103a3b1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053bb0:	dc402617 	ldw	r17,152(sp)
 5053bb4:	d8c02017 	ldw	r3,128(sp)
 5053bb8:	da000404 	addi	r8,sp,16
 5053bbc:	003f9c06 	br	5053a30 <_gp+0xfffe8608>
 5053bc0:	ac400043 	ldbu	r17,1(r21)
 5053bc4:	94800814 	ori	r18,r18,32
 5053bc8:	ad400044 	addi	r21,r21,1
 5053bcc:	8c403fcc 	andi	r17,r17,255
 5053bd0:	8c40201c 	xori	r17,r17,128
 5053bd4:	8c7fe004 	addi	r17,r17,-128
 5053bd8:	00398f06 	br	5052218 <_gp+0xfffe6df0>
 5053bdc:	d8c02d15 	stw	r3,180(sp)
 5053be0:	0039883a 	mov	fp,zero
 5053be4:	003e3506 	br	50534bc <_gp+0xfffe8094>
 5053be8:	d9002c17 	ldw	r4,176(sp)
 5053bec:	d9801e04 	addi	r6,sp,120
 5053bf0:	b80b883a 	mov	r5,r23
 5053bf4:	505a0f00 	call	505a0f0 <__sprint_r>
 5053bf8:	103a281e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053bfc:	d8c02017 	ldw	r3,128(sp)
 5053c00:	da000404 	addi	r8,sp,16
 5053c04:	003cd006 	br	5052f48 <_gp+0xfffe7b20>
 5053c08:	8009883a 	mov	r4,r16
 5053c0c:	da003d15 	stw	r8,244(sp)
 5053c10:	504fe240 	call	504fe24 <strlen>
 5053c14:	d8802e15 	stw	r2,184(sp)
 5053c18:	da003d17 	ldw	r8,244(sp)
 5053c1c:	103c340e 	bge	r2,zero,5052cf0 <_gp+0xfffe78c8>
 5053c20:	0005883a 	mov	r2,zero
 5053c24:	003c3206 	br	5052cf0 <_gp+0xfffe78c8>
 5053c28:	d9002c17 	ldw	r4,176(sp)
 5053c2c:	d9801e04 	addi	r6,sp,120
 5053c30:	b80b883a 	mov	r5,r23
 5053c34:	505a0f00 	call	505a0f0 <__sprint_r>
 5053c38:	103a181e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053c3c:	d8c02017 	ldw	r3,128(sp)
 5053c40:	d8801f17 	ldw	r2,124(sp)
 5053c44:	da000404 	addi	r8,sp,16
 5053c48:	d9403317 	ldw	r5,204(sp)
 5053c4c:	10800044 	addi	r2,r2,1
 5053c50:	44000015 	stw	r16,0(r8)
 5053c54:	28c7883a 	add	r3,r5,r3
 5053c58:	003b7d06 	br	5052a50 <_gp+0xfffe7628>
 5053c5c:	010141b4 	movhi	r4,1286
 5053c60:	2104a084 	addi	r4,r4,4738
 5053c64:	d9003515 	stw	r4,212(sp)
 5053c68:	003b1406 	br	50528bc <_gp+0xfffe7494>
 5053c6c:	013fffc4 	movi	r4,-1
 5053c70:	003a3506 	br	5052548 <_gp+0xfffe7120>
 5053c74:	0023883a 	mov	r17,zero
 5053c78:	003d9d06 	br	50532f0 <_gp+0xfffe7ec8>
 5053c7c:	d9002c17 	ldw	r4,176(sp)
 5053c80:	d9801e04 	addi	r6,sp,120
 5053c84:	b80b883a 	mov	r5,r23
 5053c88:	505a0f00 	call	505a0f0 <__sprint_r>
 5053c8c:	103a031e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053c90:	d8c02017 	ldw	r3,128(sp)
 5053c94:	da000404 	addi	r8,sp,16
 5053c98:	003d9406 	br	50532ec <_gp+0xfffe7ec4>
 5053c9c:	010141b4 	movhi	r4,1286
 5053ca0:	21049c84 	addi	r4,r4,4722
 5053ca4:	d9002b15 	stw	r4,172(sp)
 5053ca8:	d9002b17 	ldw	r4,172(sp)
 5053cac:	1c47883a 	add	r3,r3,r17
 5053cb0:	10800044 	addi	r2,r2,1
 5053cb4:	41000015 	stw	r4,0(r8)
 5053cb8:	44400115 	stw	r17,4(r8)
 5053cbc:	d8c02015 	stw	r3,128(sp)
 5053cc0:	d8801f15 	stw	r2,124(sp)
 5053cc4:	010001c4 	movi	r4,7
 5053cc8:	20bfd716 	blt	r4,r2,5053c28 <_gp+0xfffe8800>
 5053ccc:	42000204 	addi	r8,r8,8
 5053cd0:	003fdd06 	br	5053c48 <_gp+0xfffe8820>
 5053cd4:	d9002c17 	ldw	r4,176(sp)
 5053cd8:	d9801e04 	addi	r6,sp,120
 5053cdc:	b80b883a 	mov	r5,r23
 5053ce0:	505a0f00 	call	505a0f0 <__sprint_r>
 5053ce4:	1039ed1e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053ce8:	d8802617 	ldw	r2,152(sp)
 5053cec:	d8c02017 	ldw	r3,128(sp)
 5053cf0:	da000404 	addi	r8,sp,16
 5053cf4:	003e1006 	br	5053538 <_gp+0xfffe8110>
 5053cf8:	00800044 	movi	r2,1
 5053cfc:	10803fcc 	andi	r2,r2,255
 5053d00:	00c00044 	movi	r3,1
 5053d04:	10fa3526 	beq	r2,r3,50525dc <_gp+0xfffe71b4>
 5053d08:	00c00084 	movi	r3,2
 5053d0c:	10fbcb26 	beq	r2,r3,5052c3c <_gp+0xfffe7814>
 5053d10:	003a8f06 	br	5052750 <_gp+0xfffe7328>
 5053d14:	010141b4 	movhi	r4,1286
 5053d18:	2104a084 	addi	r4,r4,4738
 5053d1c:	d9003515 	stw	r4,212(sp)
 5053d20:	003b7606 	br	5052afc <_gp+0xfffe76d4>
 5053d24:	d8802917 	ldw	r2,164(sp)
 5053d28:	00c00184 	movi	r3,6
 5053d2c:	1880012e 	bgeu	r3,r2,5053d34 <___vfprintf_internal_r+0x1ca0>
 5053d30:	1805883a 	mov	r2,r3
 5053d34:	d8802e15 	stw	r2,184(sp)
 5053d38:	1000ef16 	blt	r2,zero,50540f8 <___vfprintf_internal_r+0x2064>
 5053d3c:	040141b4 	movhi	r16,1286
 5053d40:	d8802a15 	stw	r2,168(sp)
 5053d44:	dcc02d15 	stw	r19,180(sp)
 5053d48:	d8002915 	stw	zero,164(sp)
 5053d4c:	d8003215 	stw	zero,200(sp)
 5053d50:	84049204 	addi	r16,r16,4680
 5053d54:	0039883a 	mov	fp,zero
 5053d58:	003aa206 	br	50527e4 <_gp+0xfffe73bc>
 5053d5c:	0021883a 	mov	r16,zero
 5053d60:	003e0706 	br	5053580 <_gp+0xfffe8158>
 5053d64:	d9002c17 	ldw	r4,176(sp)
 5053d68:	d9801e04 	addi	r6,sp,120
 5053d6c:	b80b883a 	mov	r5,r23
 5053d70:	505a0f00 	call	505a0f0 <__sprint_r>
 5053d74:	1039c91e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053d78:	d8802617 	ldw	r2,152(sp)
 5053d7c:	d9403317 	ldw	r5,204(sp)
 5053d80:	d8c02017 	ldw	r3,128(sp)
 5053d84:	da000404 	addi	r8,sp,16
 5053d88:	2885c83a 	sub	r2,r5,r2
 5053d8c:	003dfb06 	br	505357c <_gp+0xfffe8154>
 5053d90:	9080004c 	andi	r2,r18,1
 5053d94:	103e8f1e 	bne	r2,zero,50537d4 <_gp+0xfffe83ac>
 5053d98:	d8802117 	ldw	r2,132(sp)
 5053d9c:	003e9e06 	br	5053818 <_gp+0xfffe83f0>
 5053da0:	1025883a 	mov	r18,r2
 5053da4:	0039883a 	mov	fp,zero
 5053da8:	00800084 	movi	r2,2
 5053dac:	003fd306 	br	5053cfc <_gp+0xfffe88d4>
 5053db0:	07000b44 	movi	fp,45
 5053db4:	df002785 	stb	fp,158(sp)
 5053db8:	003a4006 	br	50526bc <_gp+0xfffe7294>
 5053dbc:	00c00b44 	movi	r3,45
 5053dc0:	d8c02785 	stb	r3,158(sp)
 5053dc4:	d8802a15 	stw	r2,168(sp)
 5053dc8:	dc802b17 	ldw	r18,172(sp)
 5053dcc:	d8002915 	stw	zero,164(sp)
 5053dd0:	07000b44 	movi	fp,45
 5053dd4:	003a8006 	br	50527d8 <_gp+0xfffe73b0>
 5053dd8:	040141b4 	movhi	r16,1286
 5053ddc:	84048704 	addi	r16,r16,4636
 5053de0:	003f4706 	br	5053b00 <_gp+0xfffe86d8>
 5053de4:	d8c02d17 	ldw	r3,180(sp)
 5053de8:	d9002f17 	ldw	r4,188(sp)
 5053dec:	18800017 	ldw	r2,0(r3)
 5053df0:	18c00104 	addi	r3,r3,4
 5053df4:	d8c02d15 	stw	r3,180(sp)
 5053df8:	11000015 	stw	r4,0(r2)
 5053dfc:	0038dd06 	br	5052174 <_gp+0xfffe6d4c>
 5053e00:	dd802617 	ldw	r22,152(sp)
 5053e04:	00bfff44 	movi	r2,-3
 5053e08:	b0801c16 	blt	r22,r2,5053e7c <___vfprintf_internal_r+0x1de8>
 5053e0c:	d9402917 	ldw	r5,164(sp)
 5053e10:	2d801a16 	blt	r5,r22,5053e7c <___vfprintf_internal_r+0x1de8>
 5053e14:	dd803215 	stw	r22,200(sp)
 5053e18:	003e8906 	br	5053840 <_gp+0xfffe8418>
 5053e1c:	010141b4 	movhi	r4,1286
 5053e20:	21049c84 	addi	r4,r4,4722
 5053e24:	d9002b15 	stw	r4,172(sp)
 5053e28:	003c9106 	br	5053070 <_gp+0xfffe7c48>
 5053e2c:	e005883a 	mov	r2,fp
 5053e30:	003e7906 	br	5053818 <_gp+0xfffe83f0>
 5053e34:	d9402917 	ldw	r5,164(sp)
 5053e38:	df002783 	ldbu	fp,158(sp)
 5053e3c:	dcc02d15 	stw	r19,180(sp)
 5053e40:	d9402a15 	stw	r5,168(sp)
 5053e44:	d9402e15 	stw	r5,184(sp)
 5053e48:	d8002915 	stw	zero,164(sp)
 5053e4c:	d8003215 	stw	zero,200(sp)
 5053e50:	003a5d06 	br	50527c8 <_gp+0xfffe73a0>
 5053e54:	9080004c 	andi	r2,r18,1
 5053e58:	0039883a 	mov	fp,zero
 5053e5c:	10000426 	beq	r2,zero,5053e70 <___vfprintf_internal_r+0x1ddc>
 5053e60:	00800c04 	movi	r2,48
 5053e64:	dc001dc4 	addi	r16,sp,119
 5053e68:	d8801dc5 	stb	r2,119(sp)
 5053e6c:	003b8006 	br	5052c70 <_gp+0xfffe7848>
 5053e70:	d8002e15 	stw	zero,184(sp)
 5053e74:	dc001e04 	addi	r16,sp,120
 5053e78:	003a4d06 	br	50527b0 <_gp+0xfffe7388>
 5053e7c:	8c7fff84 	addi	r17,r17,-2
 5053e80:	b5bfffc4 	addi	r22,r22,-1
 5053e84:	dd802615 	stw	r22,152(sp)
 5053e88:	dc4022c5 	stb	r17,139(sp)
 5053e8c:	b000bf16 	blt	r22,zero,505418c <___vfprintf_internal_r+0x20f8>
 5053e90:	00800ac4 	movi	r2,43
 5053e94:	d8802305 	stb	r2,140(sp)
 5053e98:	00800244 	movi	r2,9
 5053e9c:	15807016 	blt	r2,r22,5054060 <___vfprintf_internal_r+0x1fcc>
 5053ea0:	00800c04 	movi	r2,48
 5053ea4:	b5800c04 	addi	r22,r22,48
 5053ea8:	d8802345 	stb	r2,141(sp)
 5053eac:	dd802385 	stb	r22,142(sp)
 5053eb0:	d88023c4 	addi	r2,sp,143
 5053eb4:	df0022c4 	addi	fp,sp,139
 5053eb8:	d8c03317 	ldw	r3,204(sp)
 5053ebc:	1739c83a 	sub	fp,r2,fp
 5053ec0:	d9003317 	ldw	r4,204(sp)
 5053ec4:	e0c7883a 	add	r3,fp,r3
 5053ec8:	df003a15 	stw	fp,232(sp)
 5053ecc:	d8c02e15 	stw	r3,184(sp)
 5053ed0:	00800044 	movi	r2,1
 5053ed4:	1100b30e 	bge	r2,r4,50541a4 <___vfprintf_internal_r+0x2110>
 5053ed8:	d8c02e17 	ldw	r3,184(sp)
 5053edc:	18c00044 	addi	r3,r3,1
 5053ee0:	d8c02e15 	stw	r3,184(sp)
 5053ee4:	1805883a 	mov	r2,r3
 5053ee8:	1800ac16 	blt	r3,zero,505419c <___vfprintf_internal_r+0x2108>
 5053eec:	d8003215 	stw	zero,200(sp)
 5053ef0:	003e5d06 	br	5053868 <_gp+0xfffe8440>
 5053ef4:	d9002c17 	ldw	r4,176(sp)
 5053ef8:	d9801e04 	addi	r6,sp,120
 5053efc:	b80b883a 	mov	r5,r23
 5053f00:	505a0f00 	call	505a0f0 <__sprint_r>
 5053f04:	1039651e 	bne	r2,zero,505249c <_gp+0xfffe7074>
 5053f08:	dc402617 	ldw	r17,152(sp)
 5053f0c:	d8c02017 	ldw	r3,128(sp)
 5053f10:	d8801f17 	ldw	r2,124(sp)
 5053f14:	da000404 	addi	r8,sp,16
 5053f18:	003ed606 	br	5053a74 <_gp+0xfffe864c>
 5053f1c:	582b883a 	mov	r21,r11
 5053f20:	d8002915 	stw	zero,164(sp)
 5053f24:	0038bd06 	br	505221c <_gp+0xfffe6df4>
 5053f28:	d8802917 	ldw	r2,164(sp)
 5053f2c:	103e071e 	bne	r2,zero,505374c <_gp+0xfffe8324>
 5053f30:	dc002915 	stw	r16,164(sp)
 5053f34:	003e0506 	br	505374c <_gp+0xfffe8324>
 5053f38:	d9002917 	ldw	r4,164(sp)
 5053f3c:	20c00044 	addi	r3,r4,1
 5053f40:	003e0f06 	br	5053780 <_gp+0xfffe8358>
 5053f44:	01400184 	movi	r5,6
 5053f48:	d9402915 	stw	r5,164(sp)
 5053f4c:	003dff06 	br	505374c <_gp+0xfffe8324>
 5053f50:	d8802104 	addi	r2,sp,132
 5053f54:	d8800315 	stw	r2,12(sp)
 5053f58:	d8802504 	addi	r2,sp,148
 5053f5c:	d8800215 	stw	r2,8(sp)
 5053f60:	d8802604 	addi	r2,sp,152
 5053f64:	d8800115 	stw	r2,4(sp)
 5053f68:	d8802917 	ldw	r2,164(sp)
 5053f6c:	d9403617 	ldw	r5,216(sp)
 5053f70:	d9002c17 	ldw	r4,176(sp)
 5053f74:	d8800015 	stw	r2,0(sp)
 5053f78:	01c000c4 	movi	r7,3
 5053f7c:	980d883a 	mov	r6,r19
 5053f80:	da003d15 	stw	r8,244(sp)
 5053f84:	50547dc0 	call	50547dc <_dtoa_r>
 5053f88:	d8c02917 	ldw	r3,164(sp)
 5053f8c:	da003d17 	ldw	r8,244(sp)
 5053f90:	1021883a 	mov	r16,r2
 5053f94:	10f9883a 	add	fp,r2,r3
 5053f98:	81000007 	ldb	r4,0(r16)
 5053f9c:	00800c04 	movi	r2,48
 5053fa0:	20805e26 	beq	r4,r2,505411c <___vfprintf_internal_r+0x2088>
 5053fa4:	d8c02617 	ldw	r3,152(sp)
 5053fa8:	e0f9883a 	add	fp,fp,r3
 5053fac:	003e0a06 	br	50537d8 <_gp+0xfffe83b0>
 5053fb0:	00c00b44 	movi	r3,45
 5053fb4:	24e0003c 	xorhi	r19,r4,32768
 5053fb8:	d8c02a05 	stb	r3,168(sp)
 5053fbc:	003de906 	br	5053764 <_gp+0xfffe833c>
 5053fc0:	d8c03217 	ldw	r3,200(sp)
 5053fc4:	00c07a0e 	bge	zero,r3,50541b0 <___vfprintf_internal_r+0x211c>
 5053fc8:	00800044 	movi	r2,1
 5053fcc:	d9003317 	ldw	r4,204(sp)
 5053fd0:	1105883a 	add	r2,r2,r4
 5053fd4:	d8802e15 	stw	r2,184(sp)
 5053fd8:	10004e16 	blt	r2,zero,5054114 <___vfprintf_internal_r+0x2080>
 5053fdc:	044019c4 	movi	r17,103
 5053fe0:	003e2106 	br	5053868 <_gp+0xfffe8440>
 5053fe4:	d9002917 	ldw	r4,164(sp)
 5053fe8:	d8802104 	addi	r2,sp,132
 5053fec:	d8800315 	stw	r2,12(sp)
 5053ff0:	d9000015 	stw	r4,0(sp)
 5053ff4:	d8802504 	addi	r2,sp,148
 5053ff8:	d9403617 	ldw	r5,216(sp)
 5053ffc:	d9002c17 	ldw	r4,176(sp)
 5054000:	d8800215 	stw	r2,8(sp)
 5054004:	d8802604 	addi	r2,sp,152
 5054008:	d8800115 	stw	r2,4(sp)
 505400c:	01c000c4 	movi	r7,3
 5054010:	980d883a 	mov	r6,r19
 5054014:	da003d15 	stw	r8,244(sp)
 5054018:	50547dc0 	call	50547dc <_dtoa_r>
 505401c:	d8c02917 	ldw	r3,164(sp)
 5054020:	da003d17 	ldw	r8,244(sp)
 5054024:	1021883a 	mov	r16,r2
 5054028:	00801184 	movi	r2,70
 505402c:	80f9883a 	add	fp,r16,r3
 5054030:	88bfd926 	beq	r17,r2,5053f98 <_gp+0xfffe8b70>
 5054034:	003de806 	br	50537d8 <_gp+0xfffe83b0>
 5054038:	d9002917 	ldw	r4,164(sp)
 505403c:	00c04d0e 	bge	zero,r3,5054174 <___vfprintf_internal_r+0x20e0>
 5054040:	2000441e 	bne	r4,zero,5054154 <___vfprintf_internal_r+0x20c0>
 5054044:	9480004c 	andi	r18,r18,1
 5054048:	9000421e 	bne	r18,zero,5054154 <___vfprintf_internal_r+0x20c0>
 505404c:	1805883a 	mov	r2,r3
 5054050:	18007016 	blt	r3,zero,5054214 <___vfprintf_internal_r+0x2180>
 5054054:	d8c03217 	ldw	r3,200(sp)
 5054058:	d8c02e15 	stw	r3,184(sp)
 505405c:	003e0206 	br	5053868 <_gp+0xfffe8440>
 5054060:	df0022c4 	addi	fp,sp,139
 5054064:	dc002915 	stw	r16,164(sp)
 5054068:	4027883a 	mov	r19,r8
 505406c:	e021883a 	mov	r16,fp
 5054070:	b009883a 	mov	r4,r22
 5054074:	01400284 	movi	r5,10
 5054078:	504b3780 	call	504b378 <__modsi3>
 505407c:	10800c04 	addi	r2,r2,48
 5054080:	843fffc4 	addi	r16,r16,-1
 5054084:	b009883a 	mov	r4,r22
 5054088:	01400284 	movi	r5,10
 505408c:	80800005 	stb	r2,0(r16)
 5054090:	504b2f40 	call	504b2f4 <__divsi3>
 5054094:	102d883a 	mov	r22,r2
 5054098:	00800244 	movi	r2,9
 505409c:	15bff416 	blt	r2,r22,5054070 <_gp+0xfffe8c48>
 50540a0:	9811883a 	mov	r8,r19
 50540a4:	b0800c04 	addi	r2,r22,48
 50540a8:	8027883a 	mov	r19,r16
 50540ac:	997fffc4 	addi	r5,r19,-1
 50540b0:	98bfffc5 	stb	r2,-1(r19)
 50540b4:	dc002917 	ldw	r16,164(sp)
 50540b8:	2f006a2e 	bgeu	r5,fp,5054264 <___vfprintf_internal_r+0x21d0>
 50540bc:	d9c02384 	addi	r7,sp,142
 50540c0:	3ccfc83a 	sub	r7,r7,r19
 50540c4:	d9002344 	addi	r4,sp,141
 50540c8:	e1cf883a 	add	r7,fp,r7
 50540cc:	00000106 	br	50540d4 <___vfprintf_internal_r+0x2040>
 50540d0:	28800003 	ldbu	r2,0(r5)
 50540d4:	20800005 	stb	r2,0(r4)
 50540d8:	21000044 	addi	r4,r4,1
 50540dc:	29400044 	addi	r5,r5,1
 50540e0:	393ffb1e 	bne	r7,r4,50540d0 <_gp+0xfffe8ca8>
 50540e4:	d8802304 	addi	r2,sp,140
 50540e8:	14c5c83a 	sub	r2,r2,r19
 50540ec:	d8c02344 	addi	r3,sp,141
 50540f0:	1885883a 	add	r2,r3,r2
 50540f4:	003f7006 	br	5053eb8 <_gp+0xfffe8a90>
 50540f8:	0005883a 	mov	r2,zero
 50540fc:	003f0f06 	br	5053d3c <_gp+0xfffe8914>
 5054100:	d8c03217 	ldw	r3,200(sp)
 5054104:	18c00044 	addi	r3,r3,1
 5054108:	d8c02e15 	stw	r3,184(sp)
 505410c:	1805883a 	mov	r2,r3
 5054110:	183fb20e 	bge	r3,zero,5053fdc <_gp+0xfffe8bb4>
 5054114:	0005883a 	mov	r2,zero
 5054118:	003fb006 	br	5053fdc <_gp+0xfffe8bb4>
 505411c:	d9003617 	ldw	r4,216(sp)
 5054120:	000d883a 	mov	r6,zero
 5054124:	000f883a 	mov	r7,zero
 5054128:	980b883a 	mov	r5,r19
 505412c:	d8c03c15 	stw	r3,240(sp)
 5054130:	da003d15 	stw	r8,244(sp)
 5054134:	504daa80 	call	504daa8 <__eqdf2>
 5054138:	d8c03c17 	ldw	r3,240(sp)
 505413c:	da003d17 	ldw	r8,244(sp)
 5054140:	103f9826 	beq	r2,zero,5053fa4 <_gp+0xfffe8b7c>
 5054144:	00800044 	movi	r2,1
 5054148:	10c7c83a 	sub	r3,r2,r3
 505414c:	d8c02615 	stw	r3,152(sp)
 5054150:	003f9506 	br	5053fa8 <_gp+0xfffe8b80>
 5054154:	d9002917 	ldw	r4,164(sp)
 5054158:	d8c03217 	ldw	r3,200(sp)
 505415c:	20800044 	addi	r2,r4,1
 5054160:	1885883a 	add	r2,r3,r2
 5054164:	d8802e15 	stw	r2,184(sp)
 5054168:	103dbf0e 	bge	r2,zero,5053868 <_gp+0xfffe8440>
 505416c:	0005883a 	mov	r2,zero
 5054170:	003dbd06 	br	5053868 <_gp+0xfffe8440>
 5054174:	2000211e 	bne	r4,zero,50541fc <___vfprintf_internal_r+0x2168>
 5054178:	9480004c 	andi	r18,r18,1
 505417c:	90001f1e 	bne	r18,zero,50541fc <___vfprintf_internal_r+0x2168>
 5054180:	00800044 	movi	r2,1
 5054184:	d8802e15 	stw	r2,184(sp)
 5054188:	003db706 	br	5053868 <_gp+0xfffe8440>
 505418c:	00800b44 	movi	r2,45
 5054190:	05adc83a 	sub	r22,zero,r22
 5054194:	d8802305 	stb	r2,140(sp)
 5054198:	003f3f06 	br	5053e98 <_gp+0xfffe8a70>
 505419c:	0005883a 	mov	r2,zero
 50541a0:	003f5206 	br	5053eec <_gp+0xfffe8ac4>
 50541a4:	90a4703a 	and	r18,r18,r2
 50541a8:	903f4e26 	beq	r18,zero,5053ee4 <_gp+0xfffe8abc>
 50541ac:	003f4a06 	br	5053ed8 <_gp+0xfffe8ab0>
 50541b0:	00800084 	movi	r2,2
 50541b4:	10c5c83a 	sub	r2,r2,r3
 50541b8:	003f8406 	br	5053fcc <_gp+0xfffe8ba4>
 50541bc:	d8802d17 	ldw	r2,180(sp)
 50541c0:	d9002d17 	ldw	r4,180(sp)
 50541c4:	ac400043 	ldbu	r17,1(r21)
 50541c8:	10800017 	ldw	r2,0(r2)
 50541cc:	582b883a 	mov	r21,r11
 50541d0:	d8802915 	stw	r2,164(sp)
 50541d4:	20800104 	addi	r2,r4,4
 50541d8:	d9002917 	ldw	r4,164(sp)
 50541dc:	d8802d15 	stw	r2,180(sp)
 50541e0:	203e7a0e 	bge	r4,zero,5053bcc <_gp+0xfffe87a4>
 50541e4:	8c403fcc 	andi	r17,r17,255
 50541e8:	00bfffc4 	movi	r2,-1
 50541ec:	8c40201c 	xori	r17,r17,128
 50541f0:	d8802915 	stw	r2,164(sp)
 50541f4:	8c7fe004 	addi	r17,r17,-128
 50541f8:	00380706 	br	5052218 <_gp+0xfffe6df0>
 50541fc:	d8c02917 	ldw	r3,164(sp)
 5054200:	18c00084 	addi	r3,r3,2
 5054204:	d8c02e15 	stw	r3,184(sp)
 5054208:	1805883a 	mov	r2,r3
 505420c:	183d960e 	bge	r3,zero,5053868 <_gp+0xfffe8440>
 5054210:	003fd606 	br	505416c <_gp+0xfffe8d44>
 5054214:	0005883a 	mov	r2,zero
 5054218:	003f8e06 	br	5054054 <_gp+0xfffe8c2c>
 505421c:	9080004c 	andi	r2,r18,1
 5054220:	103f811e 	bne	r2,zero,5054028 <_gp+0xfffe8c00>
 5054224:	d8802117 	ldw	r2,132(sp)
 5054228:	1405c83a 	sub	r2,r2,r16
 505422c:	d8803315 	stw	r2,204(sp)
 5054230:	b47ef326 	beq	r22,r17,5053e00 <_gp+0xfffe89d8>
 5054234:	dd802617 	ldw	r22,152(sp)
 5054238:	003f1106 	br	5053e80 <_gp+0xfffe8a58>
 505423c:	d9c02785 	stb	r7,158(sp)
 5054240:	00390406 	br	5052654 <_gp+0xfffe722c>
 5054244:	d9c02785 	stb	r7,158(sp)
 5054248:	0038d306 	br	5052598 <_gp+0xfffe7170>
 505424c:	d9c02785 	stb	r7,158(sp)
 5054250:	003a6106 	br	5052bd8 <_gp+0xfffe77b0>
 5054254:	d9c02785 	stb	r7,158(sp)
 5054258:	003af806 	br	5052e3c <_gp+0xfffe7a14>
 505425c:	0005883a 	mov	r2,zero
 5054260:	003d7e06 	br	505385c <_gp+0xfffe8434>
 5054264:	d8802344 	addi	r2,sp,141
 5054268:	003f1306 	br	5053eb8 <_gp+0xfffe8a90>
 505426c:	d9c02785 	stb	r7,158(sp)
 5054270:	00392306 	br	5052700 <_gp+0xfffe72d8>
 5054274:	d9c02785 	stb	r7,158(sp)
 5054278:	003aa906 	br	5052d20 <_gp+0xfffe78f8>
 505427c:	d9c02785 	stb	r7,158(sp)
 5054280:	003a3d06 	br	5052b78 <_gp+0xfffe7750>
 5054284:	d9c02785 	stb	r7,158(sp)
 5054288:	003aca06 	br	5052db4 <_gp+0xfffe798c>

0505428c <__vfprintf_internal>:
 505428c:	008141b4 	movhi	r2,1286
 5054290:	108d0f04 	addi	r2,r2,13372
 5054294:	300f883a 	mov	r7,r6
 5054298:	280d883a 	mov	r6,r5
 505429c:	200b883a 	mov	r5,r4
 50542a0:	11000017 	ldw	r4,0(r2)
 50542a4:	50520941 	jmpi	5052094 <___vfprintf_internal_r>

050542a8 <__sbprintf>:
 50542a8:	2880030b 	ldhu	r2,12(r5)
 50542ac:	2ac01917 	ldw	r11,100(r5)
 50542b0:	2a80038b 	ldhu	r10,14(r5)
 50542b4:	2a400717 	ldw	r9,28(r5)
 50542b8:	2a000917 	ldw	r8,36(r5)
 50542bc:	defee204 	addi	sp,sp,-1144
 50542c0:	00c10004 	movi	r3,1024
 50542c4:	dc011a15 	stw	r16,1128(sp)
 50542c8:	10bfff4c 	andi	r2,r2,65533
 50542cc:	2821883a 	mov	r16,r5
 50542d0:	d8cb883a 	add	r5,sp,r3
 50542d4:	dc811c15 	stw	r18,1136(sp)
 50542d8:	dc411b15 	stw	r17,1132(sp)
 50542dc:	dfc11d15 	stw	ra,1140(sp)
 50542e0:	2025883a 	mov	r18,r4
 50542e4:	d881030d 	sth	r2,1036(sp)
 50542e8:	dac11915 	stw	r11,1124(sp)
 50542ec:	da81038d 	sth	r10,1038(sp)
 50542f0:	da410715 	stw	r9,1052(sp)
 50542f4:	da010915 	stw	r8,1060(sp)
 50542f8:	dec10015 	stw	sp,1024(sp)
 50542fc:	dec10415 	stw	sp,1040(sp)
 5054300:	d8c10215 	stw	r3,1032(sp)
 5054304:	d8c10515 	stw	r3,1044(sp)
 5054308:	d8010615 	stw	zero,1048(sp)
 505430c:	50520940 	call	5052094 <___vfprintf_internal_r>
 5054310:	1023883a 	mov	r17,r2
 5054314:	10000416 	blt	r2,zero,5054328 <__sbprintf+0x80>
 5054318:	d9410004 	addi	r5,sp,1024
 505431c:	9009883a 	mov	r4,r18
 5054320:	50560800 	call	5056080 <_fflush_r>
 5054324:	10000d1e 	bne	r2,zero,505435c <__sbprintf+0xb4>
 5054328:	d881030b 	ldhu	r2,1036(sp)
 505432c:	1080100c 	andi	r2,r2,64
 5054330:	10000326 	beq	r2,zero,5054340 <__sbprintf+0x98>
 5054334:	8080030b 	ldhu	r2,12(r16)
 5054338:	10801014 	ori	r2,r2,64
 505433c:	8080030d 	sth	r2,12(r16)
 5054340:	8805883a 	mov	r2,r17
 5054344:	dfc11d17 	ldw	ra,1140(sp)
 5054348:	dc811c17 	ldw	r18,1136(sp)
 505434c:	dc411b17 	ldw	r17,1132(sp)
 5054350:	dc011a17 	ldw	r16,1128(sp)
 5054354:	dec11e04 	addi	sp,sp,1144
 5054358:	f800283a 	ret
 505435c:	047fffc4 	movi	r17,-1
 5054360:	003ff106 	br	5054328 <_gp+0xfffe8f00>

05054364 <_vsnprintf_r>:
 5054364:	30003716 	blt	r6,zero,5054444 <_vsnprintf_r+0xe0>
 5054368:	deffe404 	addi	sp,sp,-112
 505436c:	00c08204 	movi	r3,520
 5054370:	dc001a15 	stw	r16,104(sp)
 5054374:	3005883a 	mov	r2,r6
 5054378:	dfc01b15 	stw	ra,108(sp)
 505437c:	d8c0030d 	sth	r3,12(sp)
 5054380:	d9400015 	stw	r5,0(sp)
 5054384:	d9400415 	stw	r5,16(sp)
 5054388:	380d883a 	mov	r6,r7
 505438c:	2021883a 	mov	r16,r4
 5054390:	10001326 	beq	r2,zero,50543e0 <_vsnprintf_r+0x7c>
 5054394:	00c141b4 	movhi	r3,1286
 5054398:	18cd0f04 	addi	r3,r3,13372
 505439c:	19000017 	ldw	r4,0(r3)
 50543a0:	d9c01c17 	ldw	r7,112(sp)
 50543a4:	10bfffc4 	addi	r2,r2,-1
 50543a8:	d8800215 	stw	r2,8(sp)
 50543ac:	d8800515 	stw	r2,20(sp)
 50543b0:	d80b883a 	mov	r5,sp
 50543b4:	00bfffc4 	movi	r2,-1
 50543b8:	d880038d 	sth	r2,14(sp)
 50543bc:	504febc0 	call	504febc <___svfprintf_internal_r>
 50543c0:	00ffffc4 	movi	r3,-1
 50543c4:	10c01616 	blt	r2,r3,5054420 <_vsnprintf_r+0xbc>
 50543c8:	d8c00017 	ldw	r3,0(sp)
 50543cc:	18000005 	stb	zero,0(r3)
 50543d0:	dfc01b17 	ldw	ra,108(sp)
 50543d4:	dc001a17 	ldw	r16,104(sp)
 50543d8:	dec01c04 	addi	sp,sp,112
 50543dc:	f800283a 	ret
 50543e0:	008141b4 	movhi	r2,1286
 50543e4:	108d0f04 	addi	r2,r2,13372
 50543e8:	11000017 	ldw	r4,0(r2)
 50543ec:	d9c01c17 	ldw	r7,112(sp)
 50543f0:	00bfffc4 	movi	r2,-1
 50543f4:	d80b883a 	mov	r5,sp
 50543f8:	d8000215 	stw	zero,8(sp)
 50543fc:	d8000515 	stw	zero,20(sp)
 5054400:	d880038d 	sth	r2,14(sp)
 5054404:	504febc0 	call	504febc <___svfprintf_internal_r>
 5054408:	00ffffc4 	movi	r3,-1
 505440c:	10c00716 	blt	r2,r3,505442c <_vsnprintf_r+0xc8>
 5054410:	dfc01b17 	ldw	ra,108(sp)
 5054414:	dc001a17 	ldw	r16,104(sp)
 5054418:	dec01c04 	addi	sp,sp,112
 505441c:	f800283a 	ret
 5054420:	00c022c4 	movi	r3,139
 5054424:	80c00015 	stw	r3,0(r16)
 5054428:	003fe706 	br	50543c8 <_gp+0xfffe8fa0>
 505442c:	00c022c4 	movi	r3,139
 5054430:	80c00015 	stw	r3,0(r16)
 5054434:	dfc01b17 	ldw	ra,108(sp)
 5054438:	dc001a17 	ldw	r16,104(sp)
 505443c:	dec01c04 	addi	sp,sp,112
 5054440:	f800283a 	ret
 5054444:	008022c4 	movi	r2,139
 5054448:	20800015 	stw	r2,0(r4)
 505444c:	00bfffc4 	movi	r2,-1
 5054450:	f800283a 	ret

05054454 <vsnprintf>:
 5054454:	defffe04 	addi	sp,sp,-8
 5054458:	008141b4 	movhi	r2,1286
 505445c:	d9c00015 	stw	r7,0(sp)
 5054460:	108d0f04 	addi	r2,r2,13372
 5054464:	300f883a 	mov	r7,r6
 5054468:	280d883a 	mov	r6,r5
 505446c:	200b883a 	mov	r5,r4
 5054470:	11000017 	ldw	r4,0(r2)
 5054474:	dfc00115 	stw	ra,4(sp)
 5054478:	50543640 	call	5054364 <_vsnprintf_r>
 505447c:	dfc00117 	ldw	ra,4(sp)
 5054480:	dec00204 	addi	sp,sp,8
 5054484:	f800283a 	ret

05054488 <__swsetup_r>:
 5054488:	008141b4 	movhi	r2,1286
 505448c:	defffd04 	addi	sp,sp,-12
 5054490:	108d0f04 	addi	r2,r2,13372
 5054494:	dc400115 	stw	r17,4(sp)
 5054498:	2023883a 	mov	r17,r4
 505449c:	11000017 	ldw	r4,0(r2)
 50544a0:	dc000015 	stw	r16,0(sp)
 50544a4:	dfc00215 	stw	ra,8(sp)
 50544a8:	2821883a 	mov	r16,r5
 50544ac:	20000226 	beq	r4,zero,50544b8 <__swsetup_r+0x30>
 50544b0:	20800e17 	ldw	r2,56(r4)
 50544b4:	10003126 	beq	r2,zero,505457c <__swsetup_r+0xf4>
 50544b8:	8080030b 	ldhu	r2,12(r16)
 50544bc:	10c0020c 	andi	r3,r2,8
 50544c0:	1009883a 	mov	r4,r2
 50544c4:	18000f26 	beq	r3,zero,5054504 <__swsetup_r+0x7c>
 50544c8:	80c00417 	ldw	r3,16(r16)
 50544cc:	18001526 	beq	r3,zero,5054524 <__swsetup_r+0x9c>
 50544d0:	1100004c 	andi	r4,r2,1
 50544d4:	20001c1e 	bne	r4,zero,5054548 <__swsetup_r+0xc0>
 50544d8:	1080008c 	andi	r2,r2,2
 50544dc:	1000291e 	bne	r2,zero,5054584 <__swsetup_r+0xfc>
 50544e0:	80800517 	ldw	r2,20(r16)
 50544e4:	80800215 	stw	r2,8(r16)
 50544e8:	18001c26 	beq	r3,zero,505455c <__swsetup_r+0xd4>
 50544ec:	0005883a 	mov	r2,zero
 50544f0:	dfc00217 	ldw	ra,8(sp)
 50544f4:	dc400117 	ldw	r17,4(sp)
 50544f8:	dc000017 	ldw	r16,0(sp)
 50544fc:	dec00304 	addi	sp,sp,12
 5054500:	f800283a 	ret
 5054504:	2080040c 	andi	r2,r4,16
 5054508:	10002e26 	beq	r2,zero,50545c4 <__swsetup_r+0x13c>
 505450c:	2080010c 	andi	r2,r4,4
 5054510:	10001e1e 	bne	r2,zero,505458c <__swsetup_r+0x104>
 5054514:	80c00417 	ldw	r3,16(r16)
 5054518:	20800214 	ori	r2,r4,8
 505451c:	8080030d 	sth	r2,12(r16)
 5054520:	183feb1e 	bne	r3,zero,50544d0 <_gp+0xfffe90a8>
 5054524:	1100a00c 	andi	r4,r2,640
 5054528:	01408004 	movi	r5,512
 505452c:	217fe826 	beq	r4,r5,50544d0 <_gp+0xfffe90a8>
 5054530:	800b883a 	mov	r5,r16
 5054534:	8809883a 	mov	r4,r17
 5054538:	50570000 	call	5057000 <__smakebuf_r>
 505453c:	8080030b 	ldhu	r2,12(r16)
 5054540:	80c00417 	ldw	r3,16(r16)
 5054544:	003fe206 	br	50544d0 <_gp+0xfffe90a8>
 5054548:	80800517 	ldw	r2,20(r16)
 505454c:	80000215 	stw	zero,8(r16)
 5054550:	0085c83a 	sub	r2,zero,r2
 5054554:	80800615 	stw	r2,24(r16)
 5054558:	183fe41e 	bne	r3,zero,50544ec <_gp+0xfffe90c4>
 505455c:	80c0030b 	ldhu	r3,12(r16)
 5054560:	0005883a 	mov	r2,zero
 5054564:	1900200c 	andi	r4,r3,128
 5054568:	203fe126 	beq	r4,zero,50544f0 <_gp+0xfffe90c8>
 505456c:	18c01014 	ori	r3,r3,64
 5054570:	80c0030d 	sth	r3,12(r16)
 5054574:	00bfffc4 	movi	r2,-1
 5054578:	003fdd06 	br	50544f0 <_gp+0xfffe90c8>
 505457c:	505645c0 	call	505645c <__sinit>
 5054580:	003fcd06 	br	50544b8 <_gp+0xfffe9090>
 5054584:	0005883a 	mov	r2,zero
 5054588:	003fd606 	br	50544e4 <_gp+0xfffe90bc>
 505458c:	81400c17 	ldw	r5,48(r16)
 5054590:	28000626 	beq	r5,zero,50545ac <__swsetup_r+0x124>
 5054594:	80801004 	addi	r2,r16,64
 5054598:	28800326 	beq	r5,r2,50545a8 <__swsetup_r+0x120>
 505459c:	8809883a 	mov	r4,r17
 50545a0:	50565d00 	call	50565d0 <_free_r>
 50545a4:	8100030b 	ldhu	r4,12(r16)
 50545a8:	80000c15 	stw	zero,48(r16)
 50545ac:	80c00417 	ldw	r3,16(r16)
 50545b0:	00bff6c4 	movi	r2,-37
 50545b4:	1108703a 	and	r4,r2,r4
 50545b8:	80000115 	stw	zero,4(r16)
 50545bc:	80c00015 	stw	r3,0(r16)
 50545c0:	003fd506 	br	5054518 <_gp+0xfffe90f0>
 50545c4:	00800244 	movi	r2,9
 50545c8:	88800015 	stw	r2,0(r17)
 50545cc:	20801014 	ori	r2,r4,64
 50545d0:	8080030d 	sth	r2,12(r16)
 50545d4:	00bfffc4 	movi	r2,-1
 50545d8:	003fc506 	br	50544f0 <_gp+0xfffe90c8>

050545dc <quorem>:
 50545dc:	defff704 	addi	sp,sp,-36
 50545e0:	dc800215 	stw	r18,8(sp)
 50545e4:	20800417 	ldw	r2,16(r4)
 50545e8:	2c800417 	ldw	r18,16(r5)
 50545ec:	dfc00815 	stw	ra,32(sp)
 50545f0:	ddc00715 	stw	r23,28(sp)
 50545f4:	dd800615 	stw	r22,24(sp)
 50545f8:	dd400515 	stw	r21,20(sp)
 50545fc:	dd000415 	stw	r20,16(sp)
 5054600:	dcc00315 	stw	r19,12(sp)
 5054604:	dc400115 	stw	r17,4(sp)
 5054608:	dc000015 	stw	r16,0(sp)
 505460c:	14807116 	blt	r2,r18,50547d4 <quorem+0x1f8>
 5054610:	94bfffc4 	addi	r18,r18,-1
 5054614:	94ad883a 	add	r22,r18,r18
 5054618:	b5ad883a 	add	r22,r22,r22
 505461c:	2c400504 	addi	r17,r5,20
 5054620:	8da9883a 	add	r20,r17,r22
 5054624:	25400504 	addi	r21,r4,20
 5054628:	282f883a 	mov	r23,r5
 505462c:	adad883a 	add	r22,r21,r22
 5054630:	a1400017 	ldw	r5,0(r20)
 5054634:	2021883a 	mov	r16,r4
 5054638:	b1000017 	ldw	r4,0(r22)
 505463c:	29400044 	addi	r5,r5,1
 5054640:	504b3ec0 	call	504b3ec <__udivsi3>
 5054644:	1027883a 	mov	r19,r2
 5054648:	10002c26 	beq	r2,zero,50546fc <quorem+0x120>
 505464c:	a813883a 	mov	r9,r21
 5054650:	880b883a 	mov	r5,r17
 5054654:	0009883a 	mov	r4,zero
 5054658:	000d883a 	mov	r6,zero
 505465c:	2a000017 	ldw	r8,0(r5)
 5054660:	49c00017 	ldw	r7,0(r9)
 5054664:	29400104 	addi	r5,r5,4
 5054668:	40bfffcc 	andi	r2,r8,65535
 505466c:	14c5383a 	mul	r2,r2,r19
 5054670:	4010d43a 	srli	r8,r8,16
 5054674:	38ffffcc 	andi	r3,r7,65535
 5054678:	1105883a 	add	r2,r2,r4
 505467c:	1008d43a 	srli	r4,r2,16
 5054680:	44d1383a 	mul	r8,r8,r19
 5054684:	198d883a 	add	r6,r3,r6
 5054688:	10ffffcc 	andi	r3,r2,65535
 505468c:	30c7c83a 	sub	r3,r6,r3
 5054690:	380ed43a 	srli	r7,r7,16
 5054694:	4105883a 	add	r2,r8,r4
 5054698:	180dd43a 	srai	r6,r3,16
 505469c:	113fffcc 	andi	r4,r2,65535
 50546a0:	390fc83a 	sub	r7,r7,r4
 50546a4:	398d883a 	add	r6,r7,r6
 50546a8:	300e943a 	slli	r7,r6,16
 50546ac:	18ffffcc 	andi	r3,r3,65535
 50546b0:	1008d43a 	srli	r4,r2,16
 50546b4:	38ceb03a 	or	r7,r7,r3
 50546b8:	49c00015 	stw	r7,0(r9)
 50546bc:	300dd43a 	srai	r6,r6,16
 50546c0:	4a400104 	addi	r9,r9,4
 50546c4:	a17fe52e 	bgeu	r20,r5,505465c <_gp+0xfffe9234>
 50546c8:	b0800017 	ldw	r2,0(r22)
 50546cc:	10000b1e 	bne	r2,zero,50546fc <quorem+0x120>
 50546d0:	b0bfff04 	addi	r2,r22,-4
 50546d4:	a880082e 	bgeu	r21,r2,50546f8 <quorem+0x11c>
 50546d8:	b0ffff17 	ldw	r3,-4(r22)
 50546dc:	18000326 	beq	r3,zero,50546ec <quorem+0x110>
 50546e0:	00000506 	br	50546f8 <quorem+0x11c>
 50546e4:	10c00017 	ldw	r3,0(r2)
 50546e8:	1800031e 	bne	r3,zero,50546f8 <quorem+0x11c>
 50546ec:	10bfff04 	addi	r2,r2,-4
 50546f0:	94bfffc4 	addi	r18,r18,-1
 50546f4:	a8bffb36 	bltu	r21,r2,50546e4 <_gp+0xfffe92bc>
 50546f8:	84800415 	stw	r18,16(r16)
 50546fc:	b80b883a 	mov	r5,r23
 5054700:	8009883a 	mov	r4,r16
 5054704:	5057cc40 	call	5057cc4 <__mcmp>
 5054708:	10002616 	blt	r2,zero,50547a4 <quorem+0x1c8>
 505470c:	9cc00044 	addi	r19,r19,1
 5054710:	a805883a 	mov	r2,r21
 5054714:	000b883a 	mov	r5,zero
 5054718:	11000017 	ldw	r4,0(r2)
 505471c:	89800017 	ldw	r6,0(r17)
 5054720:	10800104 	addi	r2,r2,4
 5054724:	20ffffcc 	andi	r3,r4,65535
 5054728:	194b883a 	add	r5,r3,r5
 505472c:	30ffffcc 	andi	r3,r6,65535
 5054730:	28c7c83a 	sub	r3,r5,r3
 5054734:	300cd43a 	srli	r6,r6,16
 5054738:	2008d43a 	srli	r4,r4,16
 505473c:	180bd43a 	srai	r5,r3,16
 5054740:	18ffffcc 	andi	r3,r3,65535
 5054744:	2189c83a 	sub	r4,r4,r6
 5054748:	2149883a 	add	r4,r4,r5
 505474c:	200c943a 	slli	r6,r4,16
 5054750:	8c400104 	addi	r17,r17,4
 5054754:	200bd43a 	srai	r5,r4,16
 5054758:	30c6b03a 	or	r3,r6,r3
 505475c:	10ffff15 	stw	r3,-4(r2)
 5054760:	a47fed2e 	bgeu	r20,r17,5054718 <_gp+0xfffe92f0>
 5054764:	9485883a 	add	r2,r18,r18
 5054768:	1085883a 	add	r2,r2,r2
 505476c:	a887883a 	add	r3,r21,r2
 5054770:	18800017 	ldw	r2,0(r3)
 5054774:	10000b1e 	bne	r2,zero,50547a4 <quorem+0x1c8>
 5054778:	18bfff04 	addi	r2,r3,-4
 505477c:	a880082e 	bgeu	r21,r2,50547a0 <quorem+0x1c4>
 5054780:	18ffff17 	ldw	r3,-4(r3)
 5054784:	18000326 	beq	r3,zero,5054794 <quorem+0x1b8>
 5054788:	00000506 	br	50547a0 <quorem+0x1c4>
 505478c:	10c00017 	ldw	r3,0(r2)
 5054790:	1800031e 	bne	r3,zero,50547a0 <quorem+0x1c4>
 5054794:	10bfff04 	addi	r2,r2,-4
 5054798:	94bfffc4 	addi	r18,r18,-1
 505479c:	a8bffb36 	bltu	r21,r2,505478c <_gp+0xfffe9364>
 50547a0:	84800415 	stw	r18,16(r16)
 50547a4:	9805883a 	mov	r2,r19
 50547a8:	dfc00817 	ldw	ra,32(sp)
 50547ac:	ddc00717 	ldw	r23,28(sp)
 50547b0:	dd800617 	ldw	r22,24(sp)
 50547b4:	dd400517 	ldw	r21,20(sp)
 50547b8:	dd000417 	ldw	r20,16(sp)
 50547bc:	dcc00317 	ldw	r19,12(sp)
 50547c0:	dc800217 	ldw	r18,8(sp)
 50547c4:	dc400117 	ldw	r17,4(sp)
 50547c8:	dc000017 	ldw	r16,0(sp)
 50547cc:	dec00904 	addi	sp,sp,36
 50547d0:	f800283a 	ret
 50547d4:	0005883a 	mov	r2,zero
 50547d8:	003ff306 	br	50547a8 <_gp+0xfffe9380>

050547dc <_dtoa_r>:
 50547dc:	20801017 	ldw	r2,64(r4)
 50547e0:	deffde04 	addi	sp,sp,-136
 50547e4:	df002015 	stw	fp,128(sp)
 50547e8:	dcc01b15 	stw	r19,108(sp)
 50547ec:	dc801a15 	stw	r18,104(sp)
 50547f0:	dc401915 	stw	r17,100(sp)
 50547f4:	dc001815 	stw	r16,96(sp)
 50547f8:	dfc02115 	stw	ra,132(sp)
 50547fc:	ddc01f15 	stw	r23,124(sp)
 5054800:	dd801e15 	stw	r22,120(sp)
 5054804:	dd401d15 	stw	r21,116(sp)
 5054808:	dd001c15 	stw	r20,112(sp)
 505480c:	d9c00315 	stw	r7,12(sp)
 5054810:	2039883a 	mov	fp,r4
 5054814:	3023883a 	mov	r17,r6
 5054818:	2825883a 	mov	r18,r5
 505481c:	dc002417 	ldw	r16,144(sp)
 5054820:	3027883a 	mov	r19,r6
 5054824:	10000826 	beq	r2,zero,5054848 <_dtoa_r+0x6c>
 5054828:	21801117 	ldw	r6,68(r4)
 505482c:	00c00044 	movi	r3,1
 5054830:	100b883a 	mov	r5,r2
 5054834:	1986983a 	sll	r3,r3,r6
 5054838:	11800115 	stw	r6,4(r2)
 505483c:	10c00215 	stw	r3,8(r2)
 5054840:	50574a40 	call	50574a4 <_Bfree>
 5054844:	e0001015 	stw	zero,64(fp)
 5054848:	88002e16 	blt	r17,zero,5054904 <_dtoa_r+0x128>
 505484c:	80000015 	stw	zero,0(r16)
 5054850:	889ffc2c 	andhi	r2,r17,32752
 5054854:	00dffc34 	movhi	r3,32752
 5054858:	10c01c26 	beq	r2,r3,50548cc <_dtoa_r+0xf0>
 505485c:	000d883a 	mov	r6,zero
 5054860:	000f883a 	mov	r7,zero
 5054864:	9009883a 	mov	r4,r18
 5054868:	980b883a 	mov	r5,r19
 505486c:	504daa80 	call	504daa8 <__eqdf2>
 5054870:	10002b1e 	bne	r2,zero,5054920 <_dtoa_r+0x144>
 5054874:	d9c02317 	ldw	r7,140(sp)
 5054878:	00800044 	movi	r2,1
 505487c:	38800015 	stw	r2,0(r7)
 5054880:	d8802517 	ldw	r2,148(sp)
 5054884:	10019e26 	beq	r2,zero,5054f00 <_dtoa_r+0x724>
 5054888:	d8c02517 	ldw	r3,148(sp)
 505488c:	008141b4 	movhi	r2,1286
 5054890:	10849444 	addi	r2,r2,4689
 5054894:	18800015 	stw	r2,0(r3)
 5054898:	10bfffc4 	addi	r2,r2,-1
 505489c:	dfc02117 	ldw	ra,132(sp)
 50548a0:	df002017 	ldw	fp,128(sp)
 50548a4:	ddc01f17 	ldw	r23,124(sp)
 50548a8:	dd801e17 	ldw	r22,120(sp)
 50548ac:	dd401d17 	ldw	r21,116(sp)
 50548b0:	dd001c17 	ldw	r20,112(sp)
 50548b4:	dcc01b17 	ldw	r19,108(sp)
 50548b8:	dc801a17 	ldw	r18,104(sp)
 50548bc:	dc401917 	ldw	r17,100(sp)
 50548c0:	dc001817 	ldw	r16,96(sp)
 50548c4:	dec02204 	addi	sp,sp,136
 50548c8:	f800283a 	ret
 50548cc:	d8c02317 	ldw	r3,140(sp)
 50548d0:	0089c3c4 	movi	r2,9999
 50548d4:	18800015 	stw	r2,0(r3)
 50548d8:	90017726 	beq	r18,zero,5054eb8 <_dtoa_r+0x6dc>
 50548dc:	008141b4 	movhi	r2,1286
 50548e0:	1084a804 	addi	r2,r2,4768
 50548e4:	d9002517 	ldw	r4,148(sp)
 50548e8:	203fec26 	beq	r4,zero,505489c <_gp+0xfffe9474>
 50548ec:	10c000c7 	ldb	r3,3(r2)
 50548f0:	1801781e 	bne	r3,zero,5054ed4 <_dtoa_r+0x6f8>
 50548f4:	10c000c4 	addi	r3,r2,3
 50548f8:	d9802517 	ldw	r6,148(sp)
 50548fc:	30c00015 	stw	r3,0(r6)
 5054900:	003fe606 	br	505489c <_gp+0xfffe9474>
 5054904:	04e00034 	movhi	r19,32768
 5054908:	9cffffc4 	addi	r19,r19,-1
 505490c:	00800044 	movi	r2,1
 5054910:	8ce6703a 	and	r19,r17,r19
 5054914:	80800015 	stw	r2,0(r16)
 5054918:	9823883a 	mov	r17,r19
 505491c:	003fcc06 	br	5054850 <_gp+0xfffe9428>
 5054920:	d8800204 	addi	r2,sp,8
 5054924:	d8800015 	stw	r2,0(sp)
 5054928:	d9c00104 	addi	r7,sp,4
 505492c:	900b883a 	mov	r5,r18
 5054930:	980d883a 	mov	r6,r19
 5054934:	e009883a 	mov	r4,fp
 5054938:	8820d53a 	srli	r16,r17,20
 505493c:	50580900 	call	5058090 <__d2b>
 5054940:	d8800915 	stw	r2,36(sp)
 5054944:	8001651e 	bne	r16,zero,5054edc <_dtoa_r+0x700>
 5054948:	dd800217 	ldw	r22,8(sp)
 505494c:	dc000117 	ldw	r16,4(sp)
 5054950:	00800804 	movi	r2,32
 5054954:	b421883a 	add	r16,r22,r16
 5054958:	80c10c84 	addi	r3,r16,1074
 505495c:	10c2d10e 	bge	r2,r3,50554a4 <_dtoa_r+0xcc8>
 5054960:	00801004 	movi	r2,64
 5054964:	81010484 	addi	r4,r16,1042
 5054968:	10c7c83a 	sub	r3,r2,r3
 505496c:	9108d83a 	srl	r4,r18,r4
 5054970:	88e2983a 	sll	r17,r17,r3
 5054974:	2448b03a 	or	r4,r4,r17
 5054978:	505cb140 	call	505cb14 <__floatunsidf>
 505497c:	017f8434 	movhi	r5,65040
 5054980:	01800044 	movi	r6,1
 5054984:	1009883a 	mov	r4,r2
 5054988:	194b883a 	add	r5,r3,r5
 505498c:	843fffc4 	addi	r16,r16,-1
 5054990:	d9801115 	stw	r6,68(sp)
 5054994:	000d883a 	mov	r6,zero
 5054998:	01cffe34 	movhi	r7,16376
 505499c:	504e3240 	call	504e324 <__subdf3>
 50549a0:	0198dbf4 	movhi	r6,25455
 50549a4:	01cff4f4 	movhi	r7,16339
 50549a8:	3190d844 	addi	r6,r6,17249
 50549ac:	39e1e9c4 	addi	r7,r7,-30809
 50549b0:	1009883a 	mov	r4,r2
 50549b4:	180b883a 	mov	r5,r3
 50549b8:	504dc0c0 	call	504dc0c <__muldf3>
 50549bc:	01a2d874 	movhi	r6,35681
 50549c0:	01cff1f4 	movhi	r7,16327
 50549c4:	31b22cc4 	addi	r6,r6,-14157
 50549c8:	39e28a04 	addi	r7,r7,-30168
 50549cc:	180b883a 	mov	r5,r3
 50549d0:	1009883a 	mov	r4,r2
 50549d4:	504c9140 	call	504c914 <__adddf3>
 50549d8:	8009883a 	mov	r4,r16
 50549dc:	1029883a 	mov	r20,r2
 50549e0:	1823883a 	mov	r17,r3
 50549e4:	504eca00 	call	504eca0 <__floatsidf>
 50549e8:	019427f4 	movhi	r6,20639
 50549ec:	01cff4f4 	movhi	r7,16339
 50549f0:	319e7ec4 	addi	r6,r6,31227
 50549f4:	39d104c4 	addi	r7,r7,17427
 50549f8:	1009883a 	mov	r4,r2
 50549fc:	180b883a 	mov	r5,r3
 5054a00:	504dc0c0 	call	504dc0c <__muldf3>
 5054a04:	100d883a 	mov	r6,r2
 5054a08:	180f883a 	mov	r7,r3
 5054a0c:	a009883a 	mov	r4,r20
 5054a10:	880b883a 	mov	r5,r17
 5054a14:	504c9140 	call	504c914 <__adddf3>
 5054a18:	1009883a 	mov	r4,r2
 5054a1c:	180b883a 	mov	r5,r3
 5054a20:	1029883a 	mov	r20,r2
 5054a24:	1823883a 	mov	r17,r3
 5054a28:	504ec200 	call	504ec20 <__fixdfsi>
 5054a2c:	000d883a 	mov	r6,zero
 5054a30:	000f883a 	mov	r7,zero
 5054a34:	a009883a 	mov	r4,r20
 5054a38:	880b883a 	mov	r5,r17
 5054a3c:	d8800515 	stw	r2,20(sp)
 5054a40:	505ca200 	call	505ca20 <__ledf2>
 5054a44:	10028716 	blt	r2,zero,5055464 <_dtoa_r+0xc88>
 5054a48:	d8c00517 	ldw	r3,20(sp)
 5054a4c:	00800584 	movi	r2,22
 5054a50:	10c27536 	bltu	r2,r3,5055428 <_dtoa_r+0xc4c>
 5054a54:	180490fa 	slli	r2,r3,3
 5054a58:	00c141b4 	movhi	r3,1286
 5054a5c:	18c4c404 	addi	r3,r3,4880
 5054a60:	1885883a 	add	r2,r3,r2
 5054a64:	11000017 	ldw	r4,0(r2)
 5054a68:	11400117 	ldw	r5,4(r2)
 5054a6c:	900d883a 	mov	r6,r18
 5054a70:	980f883a 	mov	r7,r19
 5054a74:	504db300 	call	504db30 <__gedf2>
 5054a78:	00828d0e 	bge	zero,r2,50554b0 <_dtoa_r+0xcd4>
 5054a7c:	d9000517 	ldw	r4,20(sp)
 5054a80:	d8000e15 	stw	zero,56(sp)
 5054a84:	213fffc4 	addi	r4,r4,-1
 5054a88:	d9000515 	stw	r4,20(sp)
 5054a8c:	b42dc83a 	sub	r22,r22,r16
 5054a90:	b5bfffc4 	addi	r22,r22,-1
 5054a94:	b0026f16 	blt	r22,zero,5055454 <_dtoa_r+0xc78>
 5054a98:	d8000815 	stw	zero,32(sp)
 5054a9c:	d9c00517 	ldw	r7,20(sp)
 5054aa0:	38026416 	blt	r7,zero,5055434 <_dtoa_r+0xc58>
 5054aa4:	b1ed883a 	add	r22,r22,r7
 5054aa8:	d9c00d15 	stw	r7,52(sp)
 5054aac:	d8000a15 	stw	zero,40(sp)
 5054ab0:	d9800317 	ldw	r6,12(sp)
 5054ab4:	00800244 	movi	r2,9
 5054ab8:	11811436 	bltu	r2,r6,5054f0c <_dtoa_r+0x730>
 5054abc:	00800144 	movi	r2,5
 5054ac0:	1184e10e 	bge	r2,r6,5055e48 <_dtoa_r+0x166c>
 5054ac4:	31bfff04 	addi	r6,r6,-4
 5054ac8:	d9800315 	stw	r6,12(sp)
 5054acc:	0023883a 	mov	r17,zero
 5054ad0:	d9800317 	ldw	r6,12(sp)
 5054ad4:	008000c4 	movi	r2,3
 5054ad8:	30836726 	beq	r6,r2,5055878 <_dtoa_r+0x109c>
 5054adc:	1183410e 	bge	r2,r6,50557e4 <_dtoa_r+0x1008>
 5054ae0:	d9c00317 	ldw	r7,12(sp)
 5054ae4:	00800104 	movi	r2,4
 5054ae8:	38827c26 	beq	r7,r2,50554dc <_dtoa_r+0xd00>
 5054aec:	00800144 	movi	r2,5
 5054af0:	3884c41e 	bne	r7,r2,5055e04 <_dtoa_r+0x1628>
 5054af4:	00800044 	movi	r2,1
 5054af8:	d8800b15 	stw	r2,44(sp)
 5054afc:	d8c00517 	ldw	r3,20(sp)
 5054b00:	d9002217 	ldw	r4,136(sp)
 5054b04:	1907883a 	add	r3,r3,r4
 5054b08:	19800044 	addi	r6,r3,1
 5054b0c:	d8c00c15 	stw	r3,48(sp)
 5054b10:	d9800615 	stw	r6,24(sp)
 5054b14:	0183a40e 	bge	zero,r6,50559a8 <_dtoa_r+0x11cc>
 5054b18:	d9800617 	ldw	r6,24(sp)
 5054b1c:	3021883a 	mov	r16,r6
 5054b20:	e0001115 	stw	zero,68(fp)
 5054b24:	008005c4 	movi	r2,23
 5054b28:	1184c92e 	bgeu	r2,r6,5055e50 <_dtoa_r+0x1674>
 5054b2c:	00c00044 	movi	r3,1
 5054b30:	00800104 	movi	r2,4
 5054b34:	1085883a 	add	r2,r2,r2
 5054b38:	11000504 	addi	r4,r2,20
 5054b3c:	180b883a 	mov	r5,r3
 5054b40:	18c00044 	addi	r3,r3,1
 5054b44:	313ffb2e 	bgeu	r6,r4,5054b34 <_gp+0xfffe970c>
 5054b48:	e1401115 	stw	r5,68(fp)
 5054b4c:	e009883a 	mov	r4,fp
 5054b50:	50573fc0 	call	50573fc <_Balloc>
 5054b54:	d8800715 	stw	r2,28(sp)
 5054b58:	e0801015 	stw	r2,64(fp)
 5054b5c:	00800384 	movi	r2,14
 5054b60:	1400f736 	bltu	r2,r16,5054f40 <_dtoa_r+0x764>
 5054b64:	8800f626 	beq	r17,zero,5054f40 <_dtoa_r+0x764>
 5054b68:	d9c00517 	ldw	r7,20(sp)
 5054b6c:	01c39a0e 	bge	zero,r7,50559d8 <_dtoa_r+0x11fc>
 5054b70:	388003cc 	andi	r2,r7,15
 5054b74:	100490fa 	slli	r2,r2,3
 5054b78:	382bd13a 	srai	r21,r7,4
 5054b7c:	00c141b4 	movhi	r3,1286
 5054b80:	18c4c404 	addi	r3,r3,4880
 5054b84:	1885883a 	add	r2,r3,r2
 5054b88:	a8c0040c 	andi	r3,r21,16
 5054b8c:	12400017 	ldw	r9,0(r2)
 5054b90:	12000117 	ldw	r8,4(r2)
 5054b94:	18037926 	beq	r3,zero,505597c <_dtoa_r+0x11a0>
 5054b98:	008141b4 	movhi	r2,1286
 5054b9c:	1084ba04 	addi	r2,r2,4840
 5054ba0:	11800817 	ldw	r6,32(r2)
 5054ba4:	11c00917 	ldw	r7,36(r2)
 5054ba8:	9009883a 	mov	r4,r18
 5054bac:	980b883a 	mov	r5,r19
 5054bb0:	da001715 	stw	r8,92(sp)
 5054bb4:	da401615 	stw	r9,88(sp)
 5054bb8:	504d1c00 	call	504d1c0 <__divdf3>
 5054bbc:	da001717 	ldw	r8,92(sp)
 5054bc0:	da401617 	ldw	r9,88(sp)
 5054bc4:	ad4003cc 	andi	r21,r21,15
 5054bc8:	040000c4 	movi	r16,3
 5054bcc:	1023883a 	mov	r17,r2
 5054bd0:	1829883a 	mov	r20,r3
 5054bd4:	a8001126 	beq	r21,zero,5054c1c <_dtoa_r+0x440>
 5054bd8:	05c141b4 	movhi	r23,1286
 5054bdc:	bdc4ba04 	addi	r23,r23,4840
 5054be0:	4805883a 	mov	r2,r9
 5054be4:	4007883a 	mov	r3,r8
 5054be8:	a980004c 	andi	r6,r21,1
 5054bec:	1009883a 	mov	r4,r2
 5054bf0:	a82bd07a 	srai	r21,r21,1
 5054bf4:	180b883a 	mov	r5,r3
 5054bf8:	30000426 	beq	r6,zero,5054c0c <_dtoa_r+0x430>
 5054bfc:	b9800017 	ldw	r6,0(r23)
 5054c00:	b9c00117 	ldw	r7,4(r23)
 5054c04:	84000044 	addi	r16,r16,1
 5054c08:	504dc0c0 	call	504dc0c <__muldf3>
 5054c0c:	bdc00204 	addi	r23,r23,8
 5054c10:	a83ff51e 	bne	r21,zero,5054be8 <_gp+0xfffe97c0>
 5054c14:	1013883a 	mov	r9,r2
 5054c18:	1811883a 	mov	r8,r3
 5054c1c:	480d883a 	mov	r6,r9
 5054c20:	400f883a 	mov	r7,r8
 5054c24:	8809883a 	mov	r4,r17
 5054c28:	a00b883a 	mov	r5,r20
 5054c2c:	504d1c00 	call	504d1c0 <__divdf3>
 5054c30:	d8800f15 	stw	r2,60(sp)
 5054c34:	d8c01015 	stw	r3,64(sp)
 5054c38:	d8c00e17 	ldw	r3,56(sp)
 5054c3c:	18000626 	beq	r3,zero,5054c58 <_dtoa_r+0x47c>
 5054c40:	d9000f17 	ldw	r4,60(sp)
 5054c44:	d9401017 	ldw	r5,64(sp)
 5054c48:	000d883a 	mov	r6,zero
 5054c4c:	01cffc34 	movhi	r7,16368
 5054c50:	505ca200 	call	505ca20 <__ledf2>
 5054c54:	10040b16 	blt	r2,zero,5055c84 <_dtoa_r+0x14a8>
 5054c58:	8009883a 	mov	r4,r16
 5054c5c:	504eca00 	call	504eca0 <__floatsidf>
 5054c60:	d9800f17 	ldw	r6,60(sp)
 5054c64:	d9c01017 	ldw	r7,64(sp)
 5054c68:	1009883a 	mov	r4,r2
 5054c6c:	180b883a 	mov	r5,r3
 5054c70:	504dc0c0 	call	504dc0c <__muldf3>
 5054c74:	000d883a 	mov	r6,zero
 5054c78:	01d00734 	movhi	r7,16412
 5054c7c:	1009883a 	mov	r4,r2
 5054c80:	180b883a 	mov	r5,r3
 5054c84:	504c9140 	call	504c914 <__adddf3>
 5054c88:	1021883a 	mov	r16,r2
 5054c8c:	d8800617 	ldw	r2,24(sp)
 5054c90:	047f3034 	movhi	r17,64704
 5054c94:	1c63883a 	add	r17,r3,r17
 5054c98:	10031826 	beq	r2,zero,50558fc <_dtoa_r+0x1120>
 5054c9c:	d8c00517 	ldw	r3,20(sp)
 5054ca0:	db000617 	ldw	r12,24(sp)
 5054ca4:	d8c01315 	stw	r3,76(sp)
 5054ca8:	d9000b17 	ldw	r4,44(sp)
 5054cac:	20038f26 	beq	r4,zero,5055aec <_dtoa_r+0x1310>
 5054cb0:	60bfffc4 	addi	r2,r12,-1
 5054cb4:	100490fa 	slli	r2,r2,3
 5054cb8:	00c141b4 	movhi	r3,1286
 5054cbc:	18c4c404 	addi	r3,r3,4880
 5054cc0:	1885883a 	add	r2,r3,r2
 5054cc4:	11800017 	ldw	r6,0(r2)
 5054cc8:	11c00117 	ldw	r7,4(r2)
 5054ccc:	d8800717 	ldw	r2,28(sp)
 5054cd0:	0009883a 	mov	r4,zero
 5054cd4:	014ff834 	movhi	r5,16352
 5054cd8:	db001615 	stw	r12,88(sp)
 5054cdc:	15c00044 	addi	r23,r2,1
 5054ce0:	504d1c00 	call	504d1c0 <__divdf3>
 5054ce4:	800d883a 	mov	r6,r16
 5054ce8:	880f883a 	mov	r7,r17
 5054cec:	1009883a 	mov	r4,r2
 5054cf0:	180b883a 	mov	r5,r3
 5054cf4:	504e3240 	call	504e324 <__subdf3>
 5054cf8:	d9401017 	ldw	r5,64(sp)
 5054cfc:	d9000f17 	ldw	r4,60(sp)
 5054d00:	102b883a 	mov	r21,r2
 5054d04:	d8c01215 	stw	r3,72(sp)
 5054d08:	504ec200 	call	504ec20 <__fixdfsi>
 5054d0c:	1009883a 	mov	r4,r2
 5054d10:	1029883a 	mov	r20,r2
 5054d14:	504eca00 	call	504eca0 <__floatsidf>
 5054d18:	d9000f17 	ldw	r4,60(sp)
 5054d1c:	d9401017 	ldw	r5,64(sp)
 5054d20:	100d883a 	mov	r6,r2
 5054d24:	180f883a 	mov	r7,r3
 5054d28:	504e3240 	call	504e324 <__subdf3>
 5054d2c:	1823883a 	mov	r17,r3
 5054d30:	d8c00717 	ldw	r3,28(sp)
 5054d34:	d9401217 	ldw	r5,72(sp)
 5054d38:	a2000c04 	addi	r8,r20,48
 5054d3c:	1021883a 	mov	r16,r2
 5054d40:	1a000005 	stb	r8,0(r3)
 5054d44:	800d883a 	mov	r6,r16
 5054d48:	880f883a 	mov	r7,r17
 5054d4c:	a809883a 	mov	r4,r21
 5054d50:	4029883a 	mov	r20,r8
 5054d54:	504db300 	call	504db30 <__gedf2>
 5054d58:	00841d16 	blt	zero,r2,5055dd0 <_dtoa_r+0x15f4>
 5054d5c:	800d883a 	mov	r6,r16
 5054d60:	880f883a 	mov	r7,r17
 5054d64:	0009883a 	mov	r4,zero
 5054d68:	014ffc34 	movhi	r5,16368
 5054d6c:	504e3240 	call	504e324 <__subdf3>
 5054d70:	d9401217 	ldw	r5,72(sp)
 5054d74:	100d883a 	mov	r6,r2
 5054d78:	180f883a 	mov	r7,r3
 5054d7c:	a809883a 	mov	r4,r21
 5054d80:	504db300 	call	504db30 <__gedf2>
 5054d84:	db001617 	ldw	r12,88(sp)
 5054d88:	00840e16 	blt	zero,r2,5055dc4 <_dtoa_r+0x15e8>
 5054d8c:	00800044 	movi	r2,1
 5054d90:	13006b0e 	bge	r2,r12,5054f40 <_dtoa_r+0x764>
 5054d94:	d9000717 	ldw	r4,28(sp)
 5054d98:	dd800f15 	stw	r22,60(sp)
 5054d9c:	dcc01015 	stw	r19,64(sp)
 5054da0:	2319883a 	add	r12,r4,r12
 5054da4:	dcc01217 	ldw	r19,72(sp)
 5054da8:	602d883a 	mov	r22,r12
 5054dac:	dc801215 	stw	r18,72(sp)
 5054db0:	b825883a 	mov	r18,r23
 5054db4:	00000906 	br	5054ddc <_dtoa_r+0x600>
 5054db8:	504e3240 	call	504e324 <__subdf3>
 5054dbc:	a80d883a 	mov	r6,r21
 5054dc0:	980f883a 	mov	r7,r19
 5054dc4:	1009883a 	mov	r4,r2
 5054dc8:	180b883a 	mov	r5,r3
 5054dcc:	505ca200 	call	505ca20 <__ledf2>
 5054dd0:	1003e816 	blt	r2,zero,5055d74 <_dtoa_r+0x1598>
 5054dd4:	b825883a 	mov	r18,r23
 5054dd8:	bd83e926 	beq	r23,r22,5055d80 <_dtoa_r+0x15a4>
 5054ddc:	a809883a 	mov	r4,r21
 5054de0:	980b883a 	mov	r5,r19
 5054de4:	000d883a 	mov	r6,zero
 5054de8:	01d00934 	movhi	r7,16420
 5054dec:	504dc0c0 	call	504dc0c <__muldf3>
 5054df0:	000d883a 	mov	r6,zero
 5054df4:	01d00934 	movhi	r7,16420
 5054df8:	8009883a 	mov	r4,r16
 5054dfc:	880b883a 	mov	r5,r17
 5054e00:	102b883a 	mov	r21,r2
 5054e04:	1827883a 	mov	r19,r3
 5054e08:	504dc0c0 	call	504dc0c <__muldf3>
 5054e0c:	180b883a 	mov	r5,r3
 5054e10:	1009883a 	mov	r4,r2
 5054e14:	1821883a 	mov	r16,r3
 5054e18:	1023883a 	mov	r17,r2
 5054e1c:	504ec200 	call	504ec20 <__fixdfsi>
 5054e20:	1009883a 	mov	r4,r2
 5054e24:	1029883a 	mov	r20,r2
 5054e28:	504eca00 	call	504eca0 <__floatsidf>
 5054e2c:	8809883a 	mov	r4,r17
 5054e30:	800b883a 	mov	r5,r16
 5054e34:	100d883a 	mov	r6,r2
 5054e38:	180f883a 	mov	r7,r3
 5054e3c:	504e3240 	call	504e324 <__subdf3>
 5054e40:	a5000c04 	addi	r20,r20,48
 5054e44:	a80d883a 	mov	r6,r21
 5054e48:	980f883a 	mov	r7,r19
 5054e4c:	1009883a 	mov	r4,r2
 5054e50:	180b883a 	mov	r5,r3
 5054e54:	95000005 	stb	r20,0(r18)
 5054e58:	1021883a 	mov	r16,r2
 5054e5c:	1823883a 	mov	r17,r3
 5054e60:	505ca200 	call	505ca20 <__ledf2>
 5054e64:	bdc00044 	addi	r23,r23,1
 5054e68:	800d883a 	mov	r6,r16
 5054e6c:	880f883a 	mov	r7,r17
 5054e70:	0009883a 	mov	r4,zero
 5054e74:	014ffc34 	movhi	r5,16368
 5054e78:	103fcf0e 	bge	r2,zero,5054db8 <_gp+0xfffe9990>
 5054e7c:	d8c01317 	ldw	r3,76(sp)
 5054e80:	d8c00515 	stw	r3,20(sp)
 5054e84:	d9400917 	ldw	r5,36(sp)
 5054e88:	e009883a 	mov	r4,fp
 5054e8c:	50574a40 	call	50574a4 <_Bfree>
 5054e90:	d9000517 	ldw	r4,20(sp)
 5054e94:	d9802317 	ldw	r6,140(sp)
 5054e98:	d9c02517 	ldw	r7,148(sp)
 5054e9c:	b8000005 	stb	zero,0(r23)
 5054ea0:	20800044 	addi	r2,r4,1
 5054ea4:	30800015 	stw	r2,0(r6)
 5054ea8:	3802aa26 	beq	r7,zero,5055954 <_dtoa_r+0x1178>
 5054eac:	3dc00015 	stw	r23,0(r7)
 5054eb0:	d8800717 	ldw	r2,28(sp)
 5054eb4:	003e7906 	br	505489c <_gp+0xfffe9474>
 5054eb8:	00800434 	movhi	r2,16
 5054ebc:	10bfffc4 	addi	r2,r2,-1
 5054ec0:	88a2703a 	and	r17,r17,r2
 5054ec4:	883e851e 	bne	r17,zero,50548dc <_gp+0xfffe94b4>
 5054ec8:	008141b4 	movhi	r2,1286
 5054ecc:	1084a504 	addi	r2,r2,4756
 5054ed0:	003e8406 	br	50548e4 <_gp+0xfffe94bc>
 5054ed4:	10c00204 	addi	r3,r2,8
 5054ed8:	003e8706 	br	50548f8 <_gp+0xfffe94d0>
 5054edc:	01400434 	movhi	r5,16
 5054ee0:	297fffc4 	addi	r5,r5,-1
 5054ee4:	994a703a 	and	r5,r19,r5
 5054ee8:	9009883a 	mov	r4,r18
 5054eec:	843f0044 	addi	r16,r16,-1023
 5054ef0:	294ffc34 	orhi	r5,r5,16368
 5054ef4:	dd800217 	ldw	r22,8(sp)
 5054ef8:	d8001115 	stw	zero,68(sp)
 5054efc:	003ea506 	br	5054994 <_gp+0xfffe956c>
 5054f00:	008141b4 	movhi	r2,1286
 5054f04:	10849404 	addi	r2,r2,4688
 5054f08:	003e6406 	br	505489c <_gp+0xfffe9474>
 5054f0c:	e0001115 	stw	zero,68(fp)
 5054f10:	000b883a 	mov	r5,zero
 5054f14:	e009883a 	mov	r4,fp
 5054f18:	50573fc0 	call	50573fc <_Balloc>
 5054f1c:	01bfffc4 	movi	r6,-1
 5054f20:	01c00044 	movi	r7,1
 5054f24:	d8800715 	stw	r2,28(sp)
 5054f28:	d9800c15 	stw	r6,48(sp)
 5054f2c:	e0801015 	stw	r2,64(fp)
 5054f30:	d8000315 	stw	zero,12(sp)
 5054f34:	d9c00b15 	stw	r7,44(sp)
 5054f38:	d9800615 	stw	r6,24(sp)
 5054f3c:	d8002215 	stw	zero,136(sp)
 5054f40:	d8800117 	ldw	r2,4(sp)
 5054f44:	10008916 	blt	r2,zero,505516c <_dtoa_r+0x990>
 5054f48:	d9000517 	ldw	r4,20(sp)
 5054f4c:	00c00384 	movi	r3,14
 5054f50:	19008616 	blt	r3,r4,505516c <_dtoa_r+0x990>
 5054f54:	200490fa 	slli	r2,r4,3
 5054f58:	00c141b4 	movhi	r3,1286
 5054f5c:	d9802217 	ldw	r6,136(sp)
 5054f60:	18c4c404 	addi	r3,r3,4880
 5054f64:	1885883a 	add	r2,r3,r2
 5054f68:	14000017 	ldw	r16,0(r2)
 5054f6c:	14400117 	ldw	r17,4(r2)
 5054f70:	30016316 	blt	r6,zero,5055500 <_dtoa_r+0xd24>
 5054f74:	800d883a 	mov	r6,r16
 5054f78:	880f883a 	mov	r7,r17
 5054f7c:	9009883a 	mov	r4,r18
 5054f80:	980b883a 	mov	r5,r19
 5054f84:	504d1c00 	call	504d1c0 <__divdf3>
 5054f88:	180b883a 	mov	r5,r3
 5054f8c:	1009883a 	mov	r4,r2
 5054f90:	504ec200 	call	504ec20 <__fixdfsi>
 5054f94:	1009883a 	mov	r4,r2
 5054f98:	102b883a 	mov	r21,r2
 5054f9c:	504eca00 	call	504eca0 <__floatsidf>
 5054fa0:	800d883a 	mov	r6,r16
 5054fa4:	880f883a 	mov	r7,r17
 5054fa8:	1009883a 	mov	r4,r2
 5054fac:	180b883a 	mov	r5,r3
 5054fb0:	504dc0c0 	call	504dc0c <__muldf3>
 5054fb4:	100d883a 	mov	r6,r2
 5054fb8:	180f883a 	mov	r7,r3
 5054fbc:	9009883a 	mov	r4,r18
 5054fc0:	980b883a 	mov	r5,r19
 5054fc4:	504e3240 	call	504e324 <__subdf3>
 5054fc8:	d9c00717 	ldw	r7,28(sp)
 5054fcc:	1009883a 	mov	r4,r2
 5054fd0:	a8800c04 	addi	r2,r21,48
 5054fd4:	38800005 	stb	r2,0(r7)
 5054fd8:	3dc00044 	addi	r23,r7,1
 5054fdc:	d9c00617 	ldw	r7,24(sp)
 5054fe0:	01800044 	movi	r6,1
 5054fe4:	180b883a 	mov	r5,r3
 5054fe8:	2005883a 	mov	r2,r4
 5054fec:	39803826 	beq	r7,r6,50550d0 <_dtoa_r+0x8f4>
 5054ff0:	000d883a 	mov	r6,zero
 5054ff4:	01d00934 	movhi	r7,16420
 5054ff8:	504dc0c0 	call	504dc0c <__muldf3>
 5054ffc:	000d883a 	mov	r6,zero
 5055000:	000f883a 	mov	r7,zero
 5055004:	1009883a 	mov	r4,r2
 5055008:	180b883a 	mov	r5,r3
 505500c:	1025883a 	mov	r18,r2
 5055010:	1827883a 	mov	r19,r3
 5055014:	504daa80 	call	504daa8 <__eqdf2>
 5055018:	103f9a26 	beq	r2,zero,5054e84 <_gp+0xfffe9a5c>
 505501c:	d9c00617 	ldw	r7,24(sp)
 5055020:	d8c00717 	ldw	r3,28(sp)
 5055024:	b829883a 	mov	r20,r23
 5055028:	38bfffc4 	addi	r2,r7,-1
 505502c:	18ad883a 	add	r22,r3,r2
 5055030:	00000a06 	br	505505c <_dtoa_r+0x880>
 5055034:	504dc0c0 	call	504dc0c <__muldf3>
 5055038:	000d883a 	mov	r6,zero
 505503c:	000f883a 	mov	r7,zero
 5055040:	1009883a 	mov	r4,r2
 5055044:	180b883a 	mov	r5,r3
 5055048:	1025883a 	mov	r18,r2
 505504c:	1827883a 	mov	r19,r3
 5055050:	b829883a 	mov	r20,r23
 5055054:	504daa80 	call	504daa8 <__eqdf2>
 5055058:	103f8a26 	beq	r2,zero,5054e84 <_gp+0xfffe9a5c>
 505505c:	800d883a 	mov	r6,r16
 5055060:	880f883a 	mov	r7,r17
 5055064:	9009883a 	mov	r4,r18
 5055068:	980b883a 	mov	r5,r19
 505506c:	504d1c00 	call	504d1c0 <__divdf3>
 5055070:	180b883a 	mov	r5,r3
 5055074:	1009883a 	mov	r4,r2
 5055078:	504ec200 	call	504ec20 <__fixdfsi>
 505507c:	1009883a 	mov	r4,r2
 5055080:	102b883a 	mov	r21,r2
 5055084:	504eca00 	call	504eca0 <__floatsidf>
 5055088:	800d883a 	mov	r6,r16
 505508c:	880f883a 	mov	r7,r17
 5055090:	1009883a 	mov	r4,r2
 5055094:	180b883a 	mov	r5,r3
 5055098:	504dc0c0 	call	504dc0c <__muldf3>
 505509c:	100d883a 	mov	r6,r2
 50550a0:	180f883a 	mov	r7,r3
 50550a4:	9009883a 	mov	r4,r18
 50550a8:	980b883a 	mov	r5,r19
 50550ac:	504e3240 	call	504e324 <__subdf3>
 50550b0:	aa000c04 	addi	r8,r21,48
 50550b4:	a2000005 	stb	r8,0(r20)
 50550b8:	000d883a 	mov	r6,zero
 50550bc:	01d00934 	movhi	r7,16420
 50550c0:	1009883a 	mov	r4,r2
 50550c4:	180b883a 	mov	r5,r3
 50550c8:	a5c00044 	addi	r23,r20,1
 50550cc:	b53fd91e 	bne	r22,r20,5055034 <_gp+0xfffe9c0c>
 50550d0:	100d883a 	mov	r6,r2
 50550d4:	180f883a 	mov	r7,r3
 50550d8:	1009883a 	mov	r4,r2
 50550dc:	180b883a 	mov	r5,r3
 50550e0:	504c9140 	call	504c914 <__adddf3>
 50550e4:	100d883a 	mov	r6,r2
 50550e8:	180f883a 	mov	r7,r3
 50550ec:	8009883a 	mov	r4,r16
 50550f0:	880b883a 	mov	r5,r17
 50550f4:	1027883a 	mov	r19,r2
 50550f8:	1825883a 	mov	r18,r3
 50550fc:	505ca200 	call	505ca20 <__ledf2>
 5055100:	10000816 	blt	r2,zero,5055124 <_dtoa_r+0x948>
 5055104:	980d883a 	mov	r6,r19
 5055108:	900f883a 	mov	r7,r18
 505510c:	8009883a 	mov	r4,r16
 5055110:	880b883a 	mov	r5,r17
 5055114:	504daa80 	call	504daa8 <__eqdf2>
 5055118:	103f5a1e 	bne	r2,zero,5054e84 <_gp+0xfffe9a5c>
 505511c:	ad40004c 	andi	r21,r21,1
 5055120:	a83f5826 	beq	r21,zero,5054e84 <_gp+0xfffe9a5c>
 5055124:	bd3fffc3 	ldbu	r20,-1(r23)
 5055128:	b8bfffc4 	addi	r2,r23,-1
 505512c:	1007883a 	mov	r3,r2
 5055130:	01400e44 	movi	r5,57
 5055134:	d9800717 	ldw	r6,28(sp)
 5055138:	00000506 	br	5055150 <_dtoa_r+0x974>
 505513c:	18ffffc4 	addi	r3,r3,-1
 5055140:	11824726 	beq	r2,r6,5055a60 <_dtoa_r+0x1284>
 5055144:	1d000003 	ldbu	r20,0(r3)
 5055148:	102f883a 	mov	r23,r2
 505514c:	10bfffc4 	addi	r2,r2,-1
 5055150:	a1003fcc 	andi	r4,r20,255
 5055154:	2100201c 	xori	r4,r4,128
 5055158:	213fe004 	addi	r4,r4,-128
 505515c:	217ff726 	beq	r4,r5,505513c <_gp+0xfffe9d14>
 5055160:	a2000044 	addi	r8,r20,1
 5055164:	12000005 	stb	r8,0(r2)
 5055168:	003f4606 	br	5054e84 <_gp+0xfffe9a5c>
 505516c:	d9000b17 	ldw	r4,44(sp)
 5055170:	2000c826 	beq	r4,zero,5055494 <_dtoa_r+0xcb8>
 5055174:	d9800317 	ldw	r6,12(sp)
 5055178:	00c00044 	movi	r3,1
 505517c:	1980f90e 	bge	r3,r6,5055564 <_dtoa_r+0xd88>
 5055180:	d8800617 	ldw	r2,24(sp)
 5055184:	d8c00a17 	ldw	r3,40(sp)
 5055188:	157fffc4 	addi	r21,r2,-1
 505518c:	1d41f316 	blt	r3,r21,505595c <_dtoa_r+0x1180>
 5055190:	1d6bc83a 	sub	r21,r3,r21
 5055194:	d9c00617 	ldw	r7,24(sp)
 5055198:	3802aa16 	blt	r7,zero,5055c44 <_dtoa_r+0x1468>
 505519c:	dd000817 	ldw	r20,32(sp)
 50551a0:	d8800617 	ldw	r2,24(sp)
 50551a4:	d8c00817 	ldw	r3,32(sp)
 50551a8:	01400044 	movi	r5,1
 50551ac:	e009883a 	mov	r4,fp
 50551b0:	1887883a 	add	r3,r3,r2
 50551b4:	d8c00815 	stw	r3,32(sp)
 50551b8:	b0ad883a 	add	r22,r22,r2
 50551bc:	50578080 	call	5057808 <__i2b>
 50551c0:	1023883a 	mov	r17,r2
 50551c4:	a0000826 	beq	r20,zero,50551e8 <_dtoa_r+0xa0c>
 50551c8:	0580070e 	bge	zero,r22,50551e8 <_dtoa_r+0xa0c>
 50551cc:	a005883a 	mov	r2,r20
 50551d0:	b500b916 	blt	r22,r20,50554b8 <_dtoa_r+0xcdc>
 50551d4:	d9000817 	ldw	r4,32(sp)
 50551d8:	a0a9c83a 	sub	r20,r20,r2
 50551dc:	b0adc83a 	sub	r22,r22,r2
 50551e0:	2089c83a 	sub	r4,r4,r2
 50551e4:	d9000815 	stw	r4,32(sp)
 50551e8:	d9800a17 	ldw	r6,40(sp)
 50551ec:	0181810e 	bge	zero,r6,50557f4 <_dtoa_r+0x1018>
 50551f0:	d9c00b17 	ldw	r7,44(sp)
 50551f4:	3800b326 	beq	r7,zero,50554c4 <_dtoa_r+0xce8>
 50551f8:	a800b226 	beq	r21,zero,50554c4 <_dtoa_r+0xce8>
 50551fc:	880b883a 	mov	r5,r17
 5055200:	a80d883a 	mov	r6,r21
 5055204:	e009883a 	mov	r4,fp
 5055208:	5057a3c0 	call	5057a3c <__pow5mult>
 505520c:	d9800917 	ldw	r6,36(sp)
 5055210:	100b883a 	mov	r5,r2
 5055214:	e009883a 	mov	r4,fp
 5055218:	1023883a 	mov	r17,r2
 505521c:	50578440 	call	5057844 <__multiply>
 5055220:	1021883a 	mov	r16,r2
 5055224:	d8800a17 	ldw	r2,40(sp)
 5055228:	d9400917 	ldw	r5,36(sp)
 505522c:	e009883a 	mov	r4,fp
 5055230:	1545c83a 	sub	r2,r2,r21
 5055234:	d8800a15 	stw	r2,40(sp)
 5055238:	50574a40 	call	50574a4 <_Bfree>
 505523c:	d8c00a17 	ldw	r3,40(sp)
 5055240:	18009f1e 	bne	r3,zero,50554c0 <_dtoa_r+0xce4>
 5055244:	05c00044 	movi	r23,1
 5055248:	e009883a 	mov	r4,fp
 505524c:	b80b883a 	mov	r5,r23
 5055250:	50578080 	call	5057808 <__i2b>
 5055254:	d9000d17 	ldw	r4,52(sp)
 5055258:	102b883a 	mov	r21,r2
 505525c:	2000ce26 	beq	r4,zero,5055598 <_dtoa_r+0xdbc>
 5055260:	200d883a 	mov	r6,r4
 5055264:	100b883a 	mov	r5,r2
 5055268:	e009883a 	mov	r4,fp
 505526c:	5057a3c0 	call	5057a3c <__pow5mult>
 5055270:	d9800317 	ldw	r6,12(sp)
 5055274:	102b883a 	mov	r21,r2
 5055278:	b981810e 	bge	r23,r6,5055880 <_dtoa_r+0x10a4>
 505527c:	0027883a 	mov	r19,zero
 5055280:	a8800417 	ldw	r2,16(r21)
 5055284:	05c00804 	movi	r23,32
 5055288:	10800104 	addi	r2,r2,4
 505528c:	1085883a 	add	r2,r2,r2
 5055290:	1085883a 	add	r2,r2,r2
 5055294:	a885883a 	add	r2,r21,r2
 5055298:	11000017 	ldw	r4,0(r2)
 505529c:	50576f00 	call	50576f0 <__hi0bits>
 50552a0:	b885c83a 	sub	r2,r23,r2
 50552a4:	1585883a 	add	r2,r2,r22
 50552a8:	108007cc 	andi	r2,r2,31
 50552ac:	1000b326 	beq	r2,zero,505557c <_dtoa_r+0xda0>
 50552b0:	00c00804 	movi	r3,32
 50552b4:	1887c83a 	sub	r3,r3,r2
 50552b8:	01000104 	movi	r4,4
 50552bc:	20c2cd0e 	bge	r4,r3,5055df4 <_dtoa_r+0x1618>
 50552c0:	00c00704 	movi	r3,28
 50552c4:	1885c83a 	sub	r2,r3,r2
 50552c8:	d8c00817 	ldw	r3,32(sp)
 50552cc:	a0a9883a 	add	r20,r20,r2
 50552d0:	b0ad883a 	add	r22,r22,r2
 50552d4:	1887883a 	add	r3,r3,r2
 50552d8:	d8c00815 	stw	r3,32(sp)
 50552dc:	d9800817 	ldw	r6,32(sp)
 50552e0:	0180040e 	bge	zero,r6,50552f4 <_dtoa_r+0xb18>
 50552e4:	800b883a 	mov	r5,r16
 50552e8:	e009883a 	mov	r4,fp
 50552ec:	5057b7c0 	call	5057b7c <__lshift>
 50552f0:	1021883a 	mov	r16,r2
 50552f4:	0580050e 	bge	zero,r22,505530c <_dtoa_r+0xb30>
 50552f8:	a80b883a 	mov	r5,r21
 50552fc:	b00d883a 	mov	r6,r22
 5055300:	e009883a 	mov	r4,fp
 5055304:	5057b7c0 	call	5057b7c <__lshift>
 5055308:	102b883a 	mov	r21,r2
 505530c:	d9c00e17 	ldw	r7,56(sp)
 5055310:	3801211e 	bne	r7,zero,5055798 <_dtoa_r+0xfbc>
 5055314:	d9800617 	ldw	r6,24(sp)
 5055318:	0181380e 	bge	zero,r6,50557fc <_dtoa_r+0x1020>
 505531c:	d8c00b17 	ldw	r3,44(sp)
 5055320:	1800ab1e 	bne	r3,zero,50555d0 <_dtoa_r+0xdf4>
 5055324:	dc800717 	ldw	r18,28(sp)
 5055328:	dcc00617 	ldw	r19,24(sp)
 505532c:	9029883a 	mov	r20,r18
 5055330:	00000206 	br	505533c <_dtoa_r+0xb60>
 5055334:	50574cc0 	call	50574cc <__multadd>
 5055338:	1021883a 	mov	r16,r2
 505533c:	a80b883a 	mov	r5,r21
 5055340:	8009883a 	mov	r4,r16
 5055344:	50545dc0 	call	50545dc <quorem>
 5055348:	10800c04 	addi	r2,r2,48
 505534c:	90800005 	stb	r2,0(r18)
 5055350:	94800044 	addi	r18,r18,1
 5055354:	9507c83a 	sub	r3,r18,r20
 5055358:	000f883a 	mov	r7,zero
 505535c:	01800284 	movi	r6,10
 5055360:	800b883a 	mov	r5,r16
 5055364:	e009883a 	mov	r4,fp
 5055368:	1cfff216 	blt	r3,r19,5055334 <_gp+0xfffe9f0c>
 505536c:	1011883a 	mov	r8,r2
 5055370:	d8800617 	ldw	r2,24(sp)
 5055374:	0082370e 	bge	zero,r2,5055c54 <_dtoa_r+0x1478>
 5055378:	d9000717 	ldw	r4,28(sp)
 505537c:	0025883a 	mov	r18,zero
 5055380:	20af883a 	add	r23,r4,r2
 5055384:	01800044 	movi	r6,1
 5055388:	800b883a 	mov	r5,r16
 505538c:	e009883a 	mov	r4,fp
 5055390:	da001715 	stw	r8,92(sp)
 5055394:	5057b7c0 	call	5057b7c <__lshift>
 5055398:	a80b883a 	mov	r5,r21
 505539c:	1009883a 	mov	r4,r2
 50553a0:	d8800915 	stw	r2,36(sp)
 50553a4:	5057cc40 	call	5057cc4 <__mcmp>
 50553a8:	da001717 	ldw	r8,92(sp)
 50553ac:	0081800e 	bge	zero,r2,50559b0 <_dtoa_r+0x11d4>
 50553b0:	b93fffc3 	ldbu	r4,-1(r23)
 50553b4:	b8bfffc4 	addi	r2,r23,-1
 50553b8:	1007883a 	mov	r3,r2
 50553bc:	01800e44 	movi	r6,57
 50553c0:	d9c00717 	ldw	r7,28(sp)
 50553c4:	00000506 	br	50553dc <_dtoa_r+0xc00>
 50553c8:	18ffffc4 	addi	r3,r3,-1
 50553cc:	11c12326 	beq	r2,r7,505585c <_dtoa_r+0x1080>
 50553d0:	19000003 	ldbu	r4,0(r3)
 50553d4:	102f883a 	mov	r23,r2
 50553d8:	10bfffc4 	addi	r2,r2,-1
 50553dc:	21403fcc 	andi	r5,r4,255
 50553e0:	2940201c 	xori	r5,r5,128
 50553e4:	297fe004 	addi	r5,r5,-128
 50553e8:	29bff726 	beq	r5,r6,50553c8 <_gp+0xfffe9fa0>
 50553ec:	21000044 	addi	r4,r4,1
 50553f0:	11000005 	stb	r4,0(r2)
 50553f4:	a80b883a 	mov	r5,r21
 50553f8:	e009883a 	mov	r4,fp
 50553fc:	50574a40 	call	50574a4 <_Bfree>
 5055400:	883ea026 	beq	r17,zero,5054e84 <_gp+0xfffe9a5c>
 5055404:	90000426 	beq	r18,zero,5055418 <_dtoa_r+0xc3c>
 5055408:	94400326 	beq	r18,r17,5055418 <_dtoa_r+0xc3c>
 505540c:	900b883a 	mov	r5,r18
 5055410:	e009883a 	mov	r4,fp
 5055414:	50574a40 	call	50574a4 <_Bfree>
 5055418:	880b883a 	mov	r5,r17
 505541c:	e009883a 	mov	r4,fp
 5055420:	50574a40 	call	50574a4 <_Bfree>
 5055424:	003e9706 	br	5054e84 <_gp+0xfffe9a5c>
 5055428:	01800044 	movi	r6,1
 505542c:	d9800e15 	stw	r6,56(sp)
 5055430:	003d9606 	br	5054a8c <_gp+0xfffe9664>
 5055434:	d8800817 	ldw	r2,32(sp)
 5055438:	d8c00517 	ldw	r3,20(sp)
 505543c:	d8000d15 	stw	zero,52(sp)
 5055440:	10c5c83a 	sub	r2,r2,r3
 5055444:	00c9c83a 	sub	r4,zero,r3
 5055448:	d8800815 	stw	r2,32(sp)
 505544c:	d9000a15 	stw	r4,40(sp)
 5055450:	003d9706 	br	5054ab0 <_gp+0xfffe9688>
 5055454:	05adc83a 	sub	r22,zero,r22
 5055458:	dd800815 	stw	r22,32(sp)
 505545c:	002d883a 	mov	r22,zero
 5055460:	003d8e06 	br	5054a9c <_gp+0xfffe9674>
 5055464:	d9000517 	ldw	r4,20(sp)
 5055468:	504eca00 	call	504eca0 <__floatsidf>
 505546c:	100d883a 	mov	r6,r2
 5055470:	180f883a 	mov	r7,r3
 5055474:	a009883a 	mov	r4,r20
 5055478:	880b883a 	mov	r5,r17
 505547c:	504daa80 	call	504daa8 <__eqdf2>
 5055480:	103d7126 	beq	r2,zero,5054a48 <_gp+0xfffe9620>
 5055484:	d9c00517 	ldw	r7,20(sp)
 5055488:	39ffffc4 	addi	r7,r7,-1
 505548c:	d9c00515 	stw	r7,20(sp)
 5055490:	003d6d06 	br	5054a48 <_gp+0xfffe9620>
 5055494:	dd400a17 	ldw	r21,40(sp)
 5055498:	dd000817 	ldw	r20,32(sp)
 505549c:	0023883a 	mov	r17,zero
 50554a0:	003f4806 	br	50551c4 <_gp+0xfffe9d9c>
 50554a4:	10e3c83a 	sub	r17,r2,r3
 50554a8:	9448983a 	sll	r4,r18,r17
 50554ac:	003d3206 	br	5054978 <_gp+0xfffe9550>
 50554b0:	d8000e15 	stw	zero,56(sp)
 50554b4:	003d7506 	br	5054a8c <_gp+0xfffe9664>
 50554b8:	b005883a 	mov	r2,r22
 50554bc:	003f4506 	br	50551d4 <_gp+0xfffe9dac>
 50554c0:	dc000915 	stw	r16,36(sp)
 50554c4:	d9800a17 	ldw	r6,40(sp)
 50554c8:	d9400917 	ldw	r5,36(sp)
 50554cc:	e009883a 	mov	r4,fp
 50554d0:	5057a3c0 	call	5057a3c <__pow5mult>
 50554d4:	1021883a 	mov	r16,r2
 50554d8:	003f5a06 	br	5055244 <_gp+0xfffe9e1c>
 50554dc:	01c00044 	movi	r7,1
 50554e0:	d9c00b15 	stw	r7,44(sp)
 50554e4:	d8802217 	ldw	r2,136(sp)
 50554e8:	0081280e 	bge	zero,r2,505598c <_dtoa_r+0x11b0>
 50554ec:	100d883a 	mov	r6,r2
 50554f0:	1021883a 	mov	r16,r2
 50554f4:	d8800c15 	stw	r2,48(sp)
 50554f8:	d8800615 	stw	r2,24(sp)
 50554fc:	003d8806 	br	5054b20 <_gp+0xfffe96f8>
 5055500:	d8800617 	ldw	r2,24(sp)
 5055504:	00be9b16 	blt	zero,r2,5054f74 <_gp+0xfffe9b4c>
 5055508:	10010f1e 	bne	r2,zero,5055948 <_dtoa_r+0x116c>
 505550c:	880b883a 	mov	r5,r17
 5055510:	000d883a 	mov	r6,zero
 5055514:	01d00534 	movhi	r7,16404
 5055518:	8009883a 	mov	r4,r16
 505551c:	504dc0c0 	call	504dc0c <__muldf3>
 5055520:	900d883a 	mov	r6,r18
 5055524:	980f883a 	mov	r7,r19
 5055528:	1009883a 	mov	r4,r2
 505552c:	180b883a 	mov	r5,r3
 5055530:	504db300 	call	504db30 <__gedf2>
 5055534:	002b883a 	mov	r21,zero
 5055538:	0023883a 	mov	r17,zero
 505553c:	1000bf16 	blt	r2,zero,505583c <_dtoa_r+0x1060>
 5055540:	d9802217 	ldw	r6,136(sp)
 5055544:	ddc00717 	ldw	r23,28(sp)
 5055548:	018c303a 	nor	r6,zero,r6
 505554c:	d9800515 	stw	r6,20(sp)
 5055550:	a80b883a 	mov	r5,r21
 5055554:	e009883a 	mov	r4,fp
 5055558:	50574a40 	call	50574a4 <_Bfree>
 505555c:	883e4926 	beq	r17,zero,5054e84 <_gp+0xfffe9a5c>
 5055560:	003fad06 	br	5055418 <_gp+0xfffe9ff0>
 5055564:	d9c01117 	ldw	r7,68(sp)
 5055568:	3801bc26 	beq	r7,zero,5055c5c <_dtoa_r+0x1480>
 505556c:	10810cc4 	addi	r2,r2,1075
 5055570:	dd400a17 	ldw	r21,40(sp)
 5055574:	dd000817 	ldw	r20,32(sp)
 5055578:	003f0a06 	br	50551a4 <_gp+0xfffe9d7c>
 505557c:	00800704 	movi	r2,28
 5055580:	d9000817 	ldw	r4,32(sp)
 5055584:	a0a9883a 	add	r20,r20,r2
 5055588:	b0ad883a 	add	r22,r22,r2
 505558c:	2089883a 	add	r4,r4,r2
 5055590:	d9000815 	stw	r4,32(sp)
 5055594:	003f5106 	br	50552dc <_gp+0xfffe9eb4>
 5055598:	d8c00317 	ldw	r3,12(sp)
 505559c:	b8c1fc0e 	bge	r23,r3,5055d90 <_dtoa_r+0x15b4>
 50555a0:	0027883a 	mov	r19,zero
 50555a4:	b805883a 	mov	r2,r23
 50555a8:	003f3e06 	br	50552a4 <_gp+0xfffe9e7c>
 50555ac:	880b883a 	mov	r5,r17
 50555b0:	e009883a 	mov	r4,fp
 50555b4:	000f883a 	mov	r7,zero
 50555b8:	01800284 	movi	r6,10
 50555bc:	50574cc0 	call	50574cc <__multadd>
 50555c0:	d9000c17 	ldw	r4,48(sp)
 50555c4:	1023883a 	mov	r17,r2
 50555c8:	0102040e 	bge	zero,r4,5055ddc <_dtoa_r+0x1600>
 50555cc:	d9000615 	stw	r4,24(sp)
 50555d0:	0500050e 	bge	zero,r20,50555e8 <_dtoa_r+0xe0c>
 50555d4:	880b883a 	mov	r5,r17
 50555d8:	a00d883a 	mov	r6,r20
 50555dc:	e009883a 	mov	r4,fp
 50555e0:	5057b7c0 	call	5057b7c <__lshift>
 50555e4:	1023883a 	mov	r17,r2
 50555e8:	9801241e 	bne	r19,zero,5055a7c <_dtoa_r+0x12a0>
 50555ec:	8829883a 	mov	r20,r17
 50555f0:	d9000617 	ldw	r4,24(sp)
 50555f4:	dcc00717 	ldw	r19,28(sp)
 50555f8:	9480004c 	andi	r18,r18,1
 50555fc:	20bfffc4 	addi	r2,r4,-1
 5055600:	9885883a 	add	r2,r19,r2
 5055604:	d8800415 	stw	r2,16(sp)
 5055608:	dc800615 	stw	r18,24(sp)
 505560c:	a80b883a 	mov	r5,r21
 5055610:	8009883a 	mov	r4,r16
 5055614:	50545dc0 	call	50545dc <quorem>
 5055618:	880b883a 	mov	r5,r17
 505561c:	8009883a 	mov	r4,r16
 5055620:	102f883a 	mov	r23,r2
 5055624:	5057cc40 	call	5057cc4 <__mcmp>
 5055628:	a80b883a 	mov	r5,r21
 505562c:	a00d883a 	mov	r6,r20
 5055630:	e009883a 	mov	r4,fp
 5055634:	102d883a 	mov	r22,r2
 5055638:	5057d240 	call	5057d24 <__mdiff>
 505563c:	1007883a 	mov	r3,r2
 5055640:	10800317 	ldw	r2,12(r2)
 5055644:	bc800c04 	addi	r18,r23,48
 5055648:	180b883a 	mov	r5,r3
 505564c:	10004e1e 	bne	r2,zero,5055788 <_dtoa_r+0xfac>
 5055650:	8009883a 	mov	r4,r16
 5055654:	d8c01615 	stw	r3,88(sp)
 5055658:	5057cc40 	call	5057cc4 <__mcmp>
 505565c:	d8c01617 	ldw	r3,88(sp)
 5055660:	e009883a 	mov	r4,fp
 5055664:	d8801615 	stw	r2,88(sp)
 5055668:	180b883a 	mov	r5,r3
 505566c:	50574a40 	call	50574a4 <_Bfree>
 5055670:	d8801617 	ldw	r2,88(sp)
 5055674:	1000041e 	bne	r2,zero,5055688 <_dtoa_r+0xeac>
 5055678:	d9800317 	ldw	r6,12(sp)
 505567c:	3000021e 	bne	r6,zero,5055688 <_dtoa_r+0xeac>
 5055680:	d8c00617 	ldw	r3,24(sp)
 5055684:	18003726 	beq	r3,zero,5055764 <_dtoa_r+0xf88>
 5055688:	b0002016 	blt	r22,zero,505570c <_dtoa_r+0xf30>
 505568c:	b000041e 	bne	r22,zero,50556a0 <_dtoa_r+0xec4>
 5055690:	d9000317 	ldw	r4,12(sp)
 5055694:	2000021e 	bne	r4,zero,50556a0 <_dtoa_r+0xec4>
 5055698:	d8c00617 	ldw	r3,24(sp)
 505569c:	18001b26 	beq	r3,zero,505570c <_dtoa_r+0xf30>
 50556a0:	00810716 	blt	zero,r2,5055ac0 <_dtoa_r+0x12e4>
 50556a4:	d8c00417 	ldw	r3,16(sp)
 50556a8:	9d800044 	addi	r22,r19,1
 50556ac:	9c800005 	stb	r18,0(r19)
 50556b0:	b02f883a 	mov	r23,r22
 50556b4:	98c10626 	beq	r19,r3,5055ad0 <_dtoa_r+0x12f4>
 50556b8:	800b883a 	mov	r5,r16
 50556bc:	000f883a 	mov	r7,zero
 50556c0:	01800284 	movi	r6,10
 50556c4:	e009883a 	mov	r4,fp
 50556c8:	50574cc0 	call	50574cc <__multadd>
 50556cc:	1021883a 	mov	r16,r2
 50556d0:	000f883a 	mov	r7,zero
 50556d4:	01800284 	movi	r6,10
 50556d8:	880b883a 	mov	r5,r17
 50556dc:	e009883a 	mov	r4,fp
 50556e0:	8d002526 	beq	r17,r20,5055778 <_dtoa_r+0xf9c>
 50556e4:	50574cc0 	call	50574cc <__multadd>
 50556e8:	a00b883a 	mov	r5,r20
 50556ec:	000f883a 	mov	r7,zero
 50556f0:	01800284 	movi	r6,10
 50556f4:	e009883a 	mov	r4,fp
 50556f8:	1023883a 	mov	r17,r2
 50556fc:	50574cc0 	call	50574cc <__multadd>
 5055700:	1029883a 	mov	r20,r2
 5055704:	b027883a 	mov	r19,r22
 5055708:	003fc006 	br	505560c <_gp+0xfffea1e4>
 505570c:	9011883a 	mov	r8,r18
 5055710:	00800e0e 	bge	zero,r2,505574c <_dtoa_r+0xf70>
 5055714:	800b883a 	mov	r5,r16
 5055718:	01800044 	movi	r6,1
 505571c:	e009883a 	mov	r4,fp
 5055720:	da001715 	stw	r8,92(sp)
 5055724:	5057b7c0 	call	5057b7c <__lshift>
 5055728:	a80b883a 	mov	r5,r21
 505572c:	1009883a 	mov	r4,r2
 5055730:	1021883a 	mov	r16,r2
 5055734:	5057cc40 	call	5057cc4 <__mcmp>
 5055738:	da001717 	ldw	r8,92(sp)
 505573c:	0081960e 	bge	zero,r2,5055d98 <_dtoa_r+0x15bc>
 5055740:	00800e44 	movi	r2,57
 5055744:	40817026 	beq	r8,r2,5055d08 <_dtoa_r+0x152c>
 5055748:	ba000c44 	addi	r8,r23,49
 505574c:	8825883a 	mov	r18,r17
 5055750:	9dc00044 	addi	r23,r19,1
 5055754:	9a000005 	stb	r8,0(r19)
 5055758:	a023883a 	mov	r17,r20
 505575c:	dc000915 	stw	r16,36(sp)
 5055760:	003f2406 	br	50553f4 <_gp+0xfffe9fcc>
 5055764:	00800e44 	movi	r2,57
 5055768:	9011883a 	mov	r8,r18
 505576c:	90816626 	beq	r18,r2,5055d08 <_dtoa_r+0x152c>
 5055770:	05bff516 	blt	zero,r22,5055748 <_gp+0xfffea320>
 5055774:	003ff506 	br	505574c <_gp+0xfffea324>
 5055778:	50574cc0 	call	50574cc <__multadd>
 505577c:	1023883a 	mov	r17,r2
 5055780:	1029883a 	mov	r20,r2
 5055784:	003fdf06 	br	5055704 <_gp+0xfffea2dc>
 5055788:	e009883a 	mov	r4,fp
 505578c:	50574a40 	call	50574a4 <_Bfree>
 5055790:	00800044 	movi	r2,1
 5055794:	003fbc06 	br	5055688 <_gp+0xfffea260>
 5055798:	a80b883a 	mov	r5,r21
 505579c:	8009883a 	mov	r4,r16
 50557a0:	5057cc40 	call	5057cc4 <__mcmp>
 50557a4:	103edb0e 	bge	r2,zero,5055314 <_gp+0xfffe9eec>
 50557a8:	800b883a 	mov	r5,r16
 50557ac:	000f883a 	mov	r7,zero
 50557b0:	01800284 	movi	r6,10
 50557b4:	e009883a 	mov	r4,fp
 50557b8:	50574cc0 	call	50574cc <__multadd>
 50557bc:	1021883a 	mov	r16,r2
 50557c0:	d8800517 	ldw	r2,20(sp)
 50557c4:	d8c00b17 	ldw	r3,44(sp)
 50557c8:	10bfffc4 	addi	r2,r2,-1
 50557cc:	d8800515 	stw	r2,20(sp)
 50557d0:	183f761e 	bne	r3,zero,50555ac <_gp+0xfffea184>
 50557d4:	d9000c17 	ldw	r4,48(sp)
 50557d8:	0101730e 	bge	zero,r4,5055da8 <_dtoa_r+0x15cc>
 50557dc:	d9000615 	stw	r4,24(sp)
 50557e0:	003ed006 	br	5055324 <_gp+0xfffe9efc>
 50557e4:	00800084 	movi	r2,2
 50557e8:	3081861e 	bne	r6,r2,5055e04 <_dtoa_r+0x1628>
 50557ec:	d8000b15 	stw	zero,44(sp)
 50557f0:	003f3c06 	br	50554e4 <_gp+0xfffea0bc>
 50557f4:	dc000917 	ldw	r16,36(sp)
 50557f8:	003e9206 	br	5055244 <_gp+0xfffe9e1c>
 50557fc:	d9c00317 	ldw	r7,12(sp)
 5055800:	00800084 	movi	r2,2
 5055804:	11fec50e 	bge	r2,r7,505531c <_gp+0xfffe9ef4>
 5055808:	d9000617 	ldw	r4,24(sp)
 505580c:	20013c1e 	bne	r4,zero,5055d00 <_dtoa_r+0x1524>
 5055810:	a80b883a 	mov	r5,r21
 5055814:	000f883a 	mov	r7,zero
 5055818:	01800144 	movi	r6,5
 505581c:	e009883a 	mov	r4,fp
 5055820:	50574cc0 	call	50574cc <__multadd>
 5055824:	100b883a 	mov	r5,r2
 5055828:	8009883a 	mov	r4,r16
 505582c:	102b883a 	mov	r21,r2
 5055830:	5057cc40 	call	5057cc4 <__mcmp>
 5055834:	dc000915 	stw	r16,36(sp)
 5055838:	00bf410e 	bge	zero,r2,5055540 <_gp+0xfffea118>
 505583c:	d9c00717 	ldw	r7,28(sp)
 5055840:	00800c44 	movi	r2,49
 5055844:	38800005 	stb	r2,0(r7)
 5055848:	d8800517 	ldw	r2,20(sp)
 505584c:	3dc00044 	addi	r23,r7,1
 5055850:	10800044 	addi	r2,r2,1
 5055854:	d8800515 	stw	r2,20(sp)
 5055858:	003f3d06 	br	5055550 <_gp+0xfffea128>
 505585c:	d9800517 	ldw	r6,20(sp)
 5055860:	d9c00717 	ldw	r7,28(sp)
 5055864:	00800c44 	movi	r2,49
 5055868:	31800044 	addi	r6,r6,1
 505586c:	d9800515 	stw	r6,20(sp)
 5055870:	38800005 	stb	r2,0(r7)
 5055874:	003edf06 	br	50553f4 <_gp+0xfffe9fcc>
 5055878:	d8000b15 	stw	zero,44(sp)
 505587c:	003c9f06 	br	5054afc <_gp+0xfffe96d4>
 5055880:	903e7e1e 	bne	r18,zero,505527c <_gp+0xfffe9e54>
 5055884:	00800434 	movhi	r2,16
 5055888:	10bfffc4 	addi	r2,r2,-1
 505588c:	9884703a 	and	r2,r19,r2
 5055890:	1000ea1e 	bne	r2,zero,5055c3c <_dtoa_r+0x1460>
 5055894:	9cdffc2c 	andhi	r19,r19,32752
 5055898:	9800e826 	beq	r19,zero,5055c3c <_dtoa_r+0x1460>
 505589c:	d9c00817 	ldw	r7,32(sp)
 50558a0:	b5800044 	addi	r22,r22,1
 50558a4:	04c00044 	movi	r19,1
 50558a8:	39c00044 	addi	r7,r7,1
 50558ac:	d9c00815 	stw	r7,32(sp)
 50558b0:	d8800d17 	ldw	r2,52(sp)
 50558b4:	103e721e 	bne	r2,zero,5055280 <_gp+0xfffe9e58>
 50558b8:	00800044 	movi	r2,1
 50558bc:	003e7906 	br	50552a4 <_gp+0xfffe9e7c>
 50558c0:	8009883a 	mov	r4,r16
 50558c4:	504eca00 	call	504eca0 <__floatsidf>
 50558c8:	d9800f17 	ldw	r6,60(sp)
 50558cc:	d9c01017 	ldw	r7,64(sp)
 50558d0:	1009883a 	mov	r4,r2
 50558d4:	180b883a 	mov	r5,r3
 50558d8:	504dc0c0 	call	504dc0c <__muldf3>
 50558dc:	000d883a 	mov	r6,zero
 50558e0:	01d00734 	movhi	r7,16412
 50558e4:	1009883a 	mov	r4,r2
 50558e8:	180b883a 	mov	r5,r3
 50558ec:	504c9140 	call	504c914 <__adddf3>
 50558f0:	047f3034 	movhi	r17,64704
 50558f4:	1021883a 	mov	r16,r2
 50558f8:	1c63883a 	add	r17,r3,r17
 50558fc:	d9000f17 	ldw	r4,60(sp)
 5055900:	d9401017 	ldw	r5,64(sp)
 5055904:	000d883a 	mov	r6,zero
 5055908:	01d00534 	movhi	r7,16404
 505590c:	504e3240 	call	504e324 <__subdf3>
 5055910:	800d883a 	mov	r6,r16
 5055914:	880f883a 	mov	r7,r17
 5055918:	1009883a 	mov	r4,r2
 505591c:	180b883a 	mov	r5,r3
 5055920:	102b883a 	mov	r21,r2
 5055924:	1829883a 	mov	r20,r3
 5055928:	504db300 	call	504db30 <__gedf2>
 505592c:	00806c16 	blt	zero,r2,5055ae0 <_dtoa_r+0x1304>
 5055930:	89e0003c 	xorhi	r7,r17,32768
 5055934:	800d883a 	mov	r6,r16
 5055938:	a809883a 	mov	r4,r21
 505593c:	a00b883a 	mov	r5,r20
 5055940:	505ca200 	call	505ca20 <__ledf2>
 5055944:	103d7e0e 	bge	r2,zero,5054f40 <_gp+0xfffe9b18>
 5055948:	002b883a 	mov	r21,zero
 505594c:	0023883a 	mov	r17,zero
 5055950:	003efb06 	br	5055540 <_gp+0xfffea118>
 5055954:	d8800717 	ldw	r2,28(sp)
 5055958:	003bd006 	br	505489c <_gp+0xfffe9474>
 505595c:	d9000a17 	ldw	r4,40(sp)
 5055960:	d9800d17 	ldw	r6,52(sp)
 5055964:	dd400a15 	stw	r21,40(sp)
 5055968:	a905c83a 	sub	r2,r21,r4
 505596c:	308d883a 	add	r6,r6,r2
 5055970:	d9800d15 	stw	r6,52(sp)
 5055974:	002b883a 	mov	r21,zero
 5055978:	003e0606 	br	5055194 <_gp+0xfffe9d6c>
 505597c:	9023883a 	mov	r17,r18
 5055980:	9829883a 	mov	r20,r19
 5055984:	04000084 	movi	r16,2
 5055988:	003c9206 	br	5054bd4 <_gp+0xfffe97ac>
 505598c:	04000044 	movi	r16,1
 5055990:	dc000c15 	stw	r16,48(sp)
 5055994:	dc000615 	stw	r16,24(sp)
 5055998:	dc002215 	stw	r16,136(sp)
 505599c:	e0001115 	stw	zero,68(fp)
 50559a0:	000b883a 	mov	r5,zero
 50559a4:	003c6906 	br	5054b4c <_gp+0xfffe9724>
 50559a8:	3021883a 	mov	r16,r6
 50559ac:	003ffb06 	br	505599c <_gp+0xfffea574>
 50559b0:	1000021e 	bne	r2,zero,50559bc <_dtoa_r+0x11e0>
 50559b4:	4200004c 	andi	r8,r8,1
 50559b8:	403e7d1e 	bne	r8,zero,50553b0 <_gp+0xfffe9f88>
 50559bc:	01000c04 	movi	r4,48
 50559c0:	00000106 	br	50559c8 <_dtoa_r+0x11ec>
 50559c4:	102f883a 	mov	r23,r2
 50559c8:	b8bfffc4 	addi	r2,r23,-1
 50559cc:	10c00007 	ldb	r3,0(r2)
 50559d0:	193ffc26 	beq	r3,r4,50559c4 <_gp+0xfffea59c>
 50559d4:	003e8706 	br	50553f4 <_gp+0xfffe9fcc>
 50559d8:	d8800517 	ldw	r2,20(sp)
 50559dc:	00a3c83a 	sub	r17,zero,r2
 50559e0:	8800a426 	beq	r17,zero,5055c74 <_dtoa_r+0x1498>
 50559e4:	888003cc 	andi	r2,r17,15
 50559e8:	100490fa 	slli	r2,r2,3
 50559ec:	00c141b4 	movhi	r3,1286
 50559f0:	18c4c404 	addi	r3,r3,4880
 50559f4:	1885883a 	add	r2,r3,r2
 50559f8:	11800017 	ldw	r6,0(r2)
 50559fc:	11c00117 	ldw	r7,4(r2)
 5055a00:	9009883a 	mov	r4,r18
 5055a04:	980b883a 	mov	r5,r19
 5055a08:	8823d13a 	srai	r17,r17,4
 5055a0c:	504dc0c0 	call	504dc0c <__muldf3>
 5055a10:	d8800f15 	stw	r2,60(sp)
 5055a14:	d8c01015 	stw	r3,64(sp)
 5055a18:	8800e826 	beq	r17,zero,5055dbc <_dtoa_r+0x15e0>
 5055a1c:	050141b4 	movhi	r20,1286
 5055a20:	a504ba04 	addi	r20,r20,4840
 5055a24:	04000084 	movi	r16,2
 5055a28:	8980004c 	andi	r6,r17,1
 5055a2c:	1009883a 	mov	r4,r2
 5055a30:	8823d07a 	srai	r17,r17,1
 5055a34:	180b883a 	mov	r5,r3
 5055a38:	30000426 	beq	r6,zero,5055a4c <_dtoa_r+0x1270>
 5055a3c:	a1800017 	ldw	r6,0(r20)
 5055a40:	a1c00117 	ldw	r7,4(r20)
 5055a44:	84000044 	addi	r16,r16,1
 5055a48:	504dc0c0 	call	504dc0c <__muldf3>
 5055a4c:	a5000204 	addi	r20,r20,8
 5055a50:	883ff51e 	bne	r17,zero,5055a28 <_gp+0xfffea600>
 5055a54:	d8800f15 	stw	r2,60(sp)
 5055a58:	d8c01015 	stw	r3,64(sp)
 5055a5c:	003c7606 	br	5054c38 <_gp+0xfffe9810>
 5055a60:	00c00c04 	movi	r3,48
 5055a64:	10c00005 	stb	r3,0(r2)
 5055a68:	d8c00517 	ldw	r3,20(sp)
 5055a6c:	bd3fffc3 	ldbu	r20,-1(r23)
 5055a70:	18c00044 	addi	r3,r3,1
 5055a74:	d8c00515 	stw	r3,20(sp)
 5055a78:	003db906 	br	5055160 <_gp+0xfffe9d38>
 5055a7c:	89400117 	ldw	r5,4(r17)
 5055a80:	e009883a 	mov	r4,fp
 5055a84:	50573fc0 	call	50573fc <_Balloc>
 5055a88:	89800417 	ldw	r6,16(r17)
 5055a8c:	89400304 	addi	r5,r17,12
 5055a90:	11000304 	addi	r4,r2,12
 5055a94:	31800084 	addi	r6,r6,2
 5055a98:	318d883a 	add	r6,r6,r6
 5055a9c:	318d883a 	add	r6,r6,r6
 5055aa0:	1027883a 	mov	r19,r2
 5055aa4:	504f8cc0 	call	504f8cc <memcpy>
 5055aa8:	01800044 	movi	r6,1
 5055aac:	980b883a 	mov	r5,r19
 5055ab0:	e009883a 	mov	r4,fp
 5055ab4:	5057b7c0 	call	5057b7c <__lshift>
 5055ab8:	1029883a 	mov	r20,r2
 5055abc:	003ecc06 	br	50555f0 <_gp+0xfffea1c8>
 5055ac0:	00800e44 	movi	r2,57
 5055ac4:	90809026 	beq	r18,r2,5055d08 <_dtoa_r+0x152c>
 5055ac8:	92000044 	addi	r8,r18,1
 5055acc:	003f1f06 	br	505574c <_gp+0xfffea324>
 5055ad0:	9011883a 	mov	r8,r18
 5055ad4:	8825883a 	mov	r18,r17
 5055ad8:	a023883a 	mov	r17,r20
 5055adc:	003e2906 	br	5055384 <_gp+0xfffe9f5c>
 5055ae0:	002b883a 	mov	r21,zero
 5055ae4:	0023883a 	mov	r17,zero
 5055ae8:	003f5406 	br	505583c <_gp+0xfffea414>
 5055aec:	61bfffc4 	addi	r6,r12,-1
 5055af0:	300490fa 	slli	r2,r6,3
 5055af4:	00c141b4 	movhi	r3,1286
 5055af8:	18c4c404 	addi	r3,r3,4880
 5055afc:	1885883a 	add	r2,r3,r2
 5055b00:	11000017 	ldw	r4,0(r2)
 5055b04:	11400117 	ldw	r5,4(r2)
 5055b08:	d8800717 	ldw	r2,28(sp)
 5055b0c:	880f883a 	mov	r7,r17
 5055b10:	d9801215 	stw	r6,72(sp)
 5055b14:	800d883a 	mov	r6,r16
 5055b18:	db001615 	stw	r12,88(sp)
 5055b1c:	15c00044 	addi	r23,r2,1
 5055b20:	504dc0c0 	call	504dc0c <__muldf3>
 5055b24:	d9401017 	ldw	r5,64(sp)
 5055b28:	d9000f17 	ldw	r4,60(sp)
 5055b2c:	d8c01515 	stw	r3,84(sp)
 5055b30:	d8801415 	stw	r2,80(sp)
 5055b34:	504ec200 	call	504ec20 <__fixdfsi>
 5055b38:	1009883a 	mov	r4,r2
 5055b3c:	1021883a 	mov	r16,r2
 5055b40:	504eca00 	call	504eca0 <__floatsidf>
 5055b44:	d9000f17 	ldw	r4,60(sp)
 5055b48:	d9401017 	ldw	r5,64(sp)
 5055b4c:	100d883a 	mov	r6,r2
 5055b50:	180f883a 	mov	r7,r3
 5055b54:	504e3240 	call	504e324 <__subdf3>
 5055b58:	1829883a 	mov	r20,r3
 5055b5c:	d8c00717 	ldw	r3,28(sp)
 5055b60:	84000c04 	addi	r16,r16,48
 5055b64:	1023883a 	mov	r17,r2
 5055b68:	1c000005 	stb	r16,0(r3)
 5055b6c:	db001617 	ldw	r12,88(sp)
 5055b70:	00800044 	movi	r2,1
 5055b74:	60802226 	beq	r12,r2,5055c00 <_dtoa_r+0x1424>
 5055b78:	d9c00717 	ldw	r7,28(sp)
 5055b7c:	8805883a 	mov	r2,r17
 5055b80:	b82b883a 	mov	r21,r23
 5055b84:	3b19883a 	add	r12,r7,r12
 5055b88:	6023883a 	mov	r17,r12
 5055b8c:	a007883a 	mov	r3,r20
 5055b90:	dc800f15 	stw	r18,60(sp)
 5055b94:	000d883a 	mov	r6,zero
 5055b98:	01d00934 	movhi	r7,16420
 5055b9c:	1009883a 	mov	r4,r2
 5055ba0:	180b883a 	mov	r5,r3
 5055ba4:	504dc0c0 	call	504dc0c <__muldf3>
 5055ba8:	180b883a 	mov	r5,r3
 5055bac:	1009883a 	mov	r4,r2
 5055bb0:	1829883a 	mov	r20,r3
 5055bb4:	1025883a 	mov	r18,r2
 5055bb8:	504ec200 	call	504ec20 <__fixdfsi>
 5055bbc:	1009883a 	mov	r4,r2
 5055bc0:	1021883a 	mov	r16,r2
 5055bc4:	504eca00 	call	504eca0 <__floatsidf>
 5055bc8:	100d883a 	mov	r6,r2
 5055bcc:	180f883a 	mov	r7,r3
 5055bd0:	9009883a 	mov	r4,r18
 5055bd4:	a00b883a 	mov	r5,r20
 5055bd8:	84000c04 	addi	r16,r16,48
 5055bdc:	504e3240 	call	504e324 <__subdf3>
 5055be0:	ad400044 	addi	r21,r21,1
 5055be4:	ac3fffc5 	stb	r16,-1(r21)
 5055be8:	ac7fea1e 	bne	r21,r17,5055b94 <_gp+0xfffea76c>
 5055bec:	1023883a 	mov	r17,r2
 5055bf0:	d8801217 	ldw	r2,72(sp)
 5055bf4:	dc800f17 	ldw	r18,60(sp)
 5055bf8:	1829883a 	mov	r20,r3
 5055bfc:	b8af883a 	add	r23,r23,r2
 5055c00:	d9001417 	ldw	r4,80(sp)
 5055c04:	d9401517 	ldw	r5,84(sp)
 5055c08:	000d883a 	mov	r6,zero
 5055c0c:	01cff834 	movhi	r7,16352
 5055c10:	504c9140 	call	504c914 <__adddf3>
 5055c14:	880d883a 	mov	r6,r17
 5055c18:	a00f883a 	mov	r7,r20
 5055c1c:	1009883a 	mov	r4,r2
 5055c20:	180b883a 	mov	r5,r3
 5055c24:	505ca200 	call	505ca20 <__ledf2>
 5055c28:	10003e0e 	bge	r2,zero,5055d24 <_dtoa_r+0x1548>
 5055c2c:	d9001317 	ldw	r4,76(sp)
 5055c30:	bd3fffc3 	ldbu	r20,-1(r23)
 5055c34:	d9000515 	stw	r4,20(sp)
 5055c38:	003d3b06 	br	5055128 <_gp+0xfffe9d00>
 5055c3c:	0027883a 	mov	r19,zero
 5055c40:	003f1b06 	br	50558b0 <_gp+0xfffea488>
 5055c44:	d8800817 	ldw	r2,32(sp)
 5055c48:	11e9c83a 	sub	r20,r2,r7
 5055c4c:	0005883a 	mov	r2,zero
 5055c50:	003d5406 	br	50551a4 <_gp+0xfffe9d7c>
 5055c54:	00800044 	movi	r2,1
 5055c58:	003dc706 	br	5055378 <_gp+0xfffe9f50>
 5055c5c:	d8c00217 	ldw	r3,8(sp)
 5055c60:	00800d84 	movi	r2,54
 5055c64:	dd400a17 	ldw	r21,40(sp)
 5055c68:	10c5c83a 	sub	r2,r2,r3
 5055c6c:	dd000817 	ldw	r20,32(sp)
 5055c70:	003d4c06 	br	50551a4 <_gp+0xfffe9d7c>
 5055c74:	dc800f15 	stw	r18,60(sp)
 5055c78:	dcc01015 	stw	r19,64(sp)
 5055c7c:	04000084 	movi	r16,2
 5055c80:	003bed06 	br	5054c38 <_gp+0xfffe9810>
 5055c84:	d9000617 	ldw	r4,24(sp)
 5055c88:	203f0d26 	beq	r4,zero,50558c0 <_gp+0xfffea498>
 5055c8c:	d9800c17 	ldw	r6,48(sp)
 5055c90:	01bcab0e 	bge	zero,r6,5054f40 <_gp+0xfffe9b18>
 5055c94:	d9401017 	ldw	r5,64(sp)
 5055c98:	d9000f17 	ldw	r4,60(sp)
 5055c9c:	000d883a 	mov	r6,zero
 5055ca0:	01d00934 	movhi	r7,16420
 5055ca4:	504dc0c0 	call	504dc0c <__muldf3>
 5055ca8:	81000044 	addi	r4,r16,1
 5055cac:	d8800f15 	stw	r2,60(sp)
 5055cb0:	d8c01015 	stw	r3,64(sp)
 5055cb4:	504eca00 	call	504eca0 <__floatsidf>
 5055cb8:	d9800f17 	ldw	r6,60(sp)
 5055cbc:	d9c01017 	ldw	r7,64(sp)
 5055cc0:	1009883a 	mov	r4,r2
 5055cc4:	180b883a 	mov	r5,r3
 5055cc8:	504dc0c0 	call	504dc0c <__muldf3>
 5055ccc:	01d00734 	movhi	r7,16412
 5055cd0:	000d883a 	mov	r6,zero
 5055cd4:	1009883a 	mov	r4,r2
 5055cd8:	180b883a 	mov	r5,r3
 5055cdc:	504c9140 	call	504c914 <__adddf3>
 5055ce0:	d9c00517 	ldw	r7,20(sp)
 5055ce4:	047f3034 	movhi	r17,64704
 5055ce8:	1021883a 	mov	r16,r2
 5055cec:	39ffffc4 	addi	r7,r7,-1
 5055cf0:	d9c01315 	stw	r7,76(sp)
 5055cf4:	1c63883a 	add	r17,r3,r17
 5055cf8:	db000c17 	ldw	r12,48(sp)
 5055cfc:	003bea06 	br	5054ca8 <_gp+0xfffe9880>
 5055d00:	dc000915 	stw	r16,36(sp)
 5055d04:	003e0e06 	br	5055540 <_gp+0xfffea118>
 5055d08:	01000e44 	movi	r4,57
 5055d0c:	8825883a 	mov	r18,r17
 5055d10:	9dc00044 	addi	r23,r19,1
 5055d14:	99000005 	stb	r4,0(r19)
 5055d18:	a023883a 	mov	r17,r20
 5055d1c:	dc000915 	stw	r16,36(sp)
 5055d20:	003da406 	br	50553b4 <_gp+0xfffe9f8c>
 5055d24:	d9801417 	ldw	r6,80(sp)
 5055d28:	d9c01517 	ldw	r7,84(sp)
 5055d2c:	0009883a 	mov	r4,zero
 5055d30:	014ff834 	movhi	r5,16352
 5055d34:	504e3240 	call	504e324 <__subdf3>
 5055d38:	880d883a 	mov	r6,r17
 5055d3c:	a00f883a 	mov	r7,r20
 5055d40:	1009883a 	mov	r4,r2
 5055d44:	180b883a 	mov	r5,r3
 5055d48:	504db300 	call	504db30 <__gedf2>
 5055d4c:	00bc7c0e 	bge	zero,r2,5054f40 <_gp+0xfffe9b18>
 5055d50:	01000c04 	movi	r4,48
 5055d54:	00000106 	br	5055d5c <_dtoa_r+0x1580>
 5055d58:	102f883a 	mov	r23,r2
 5055d5c:	b8bfffc4 	addi	r2,r23,-1
 5055d60:	10c00007 	ldb	r3,0(r2)
 5055d64:	193ffc26 	beq	r3,r4,5055d58 <_gp+0xfffea930>
 5055d68:	d9801317 	ldw	r6,76(sp)
 5055d6c:	d9800515 	stw	r6,20(sp)
 5055d70:	003c4406 	br	5054e84 <_gp+0xfffe9a5c>
 5055d74:	d9801317 	ldw	r6,76(sp)
 5055d78:	d9800515 	stw	r6,20(sp)
 5055d7c:	003cea06 	br	5055128 <_gp+0xfffe9d00>
 5055d80:	dd800f17 	ldw	r22,60(sp)
 5055d84:	dcc01017 	ldw	r19,64(sp)
 5055d88:	dc801217 	ldw	r18,72(sp)
 5055d8c:	003c6c06 	br	5054f40 <_gp+0xfffe9b18>
 5055d90:	903e031e 	bne	r18,zero,50555a0 <_gp+0xfffea178>
 5055d94:	003ebb06 	br	5055884 <_gp+0xfffea45c>
 5055d98:	103e6c1e 	bne	r2,zero,505574c <_gp+0xfffea324>
 5055d9c:	4080004c 	andi	r2,r8,1
 5055da0:	103e6a26 	beq	r2,zero,505574c <_gp+0xfffea324>
 5055da4:	003e6606 	br	5055740 <_gp+0xfffea318>
 5055da8:	d8c00317 	ldw	r3,12(sp)
 5055dac:	00800084 	movi	r2,2
 5055db0:	10c02916 	blt	r2,r3,5055e58 <_dtoa_r+0x167c>
 5055db4:	d9000c17 	ldw	r4,48(sp)
 5055db8:	003e8806 	br	50557dc <_gp+0xfffea3b4>
 5055dbc:	04000084 	movi	r16,2
 5055dc0:	003b9d06 	br	5054c38 <_gp+0xfffe9810>
 5055dc4:	d9001317 	ldw	r4,76(sp)
 5055dc8:	d9000515 	stw	r4,20(sp)
 5055dcc:	003cd606 	br	5055128 <_gp+0xfffe9d00>
 5055dd0:	d8801317 	ldw	r2,76(sp)
 5055dd4:	d8800515 	stw	r2,20(sp)
 5055dd8:	003c2a06 	br	5054e84 <_gp+0xfffe9a5c>
 5055ddc:	d9800317 	ldw	r6,12(sp)
 5055de0:	00800084 	movi	r2,2
 5055de4:	11801516 	blt	r2,r6,5055e3c <_dtoa_r+0x1660>
 5055de8:	d9c00c17 	ldw	r7,48(sp)
 5055dec:	d9c00615 	stw	r7,24(sp)
 5055df0:	003df706 	br	50555d0 <_gp+0xfffea1a8>
 5055df4:	193d3926 	beq	r3,r4,50552dc <_gp+0xfffe9eb4>
 5055df8:	00c00f04 	movi	r3,60
 5055dfc:	1885c83a 	sub	r2,r3,r2
 5055e00:	003ddf06 	br	5055580 <_gp+0xfffea158>
 5055e04:	e009883a 	mov	r4,fp
 5055e08:	e0001115 	stw	zero,68(fp)
 5055e0c:	000b883a 	mov	r5,zero
 5055e10:	50573fc0 	call	50573fc <_Balloc>
 5055e14:	d8800715 	stw	r2,28(sp)
 5055e18:	d8c00717 	ldw	r3,28(sp)
 5055e1c:	00bfffc4 	movi	r2,-1
 5055e20:	01000044 	movi	r4,1
 5055e24:	d8800c15 	stw	r2,48(sp)
 5055e28:	e0c01015 	stw	r3,64(fp)
 5055e2c:	d9000b15 	stw	r4,44(sp)
 5055e30:	d8800615 	stw	r2,24(sp)
 5055e34:	d8002215 	stw	zero,136(sp)
 5055e38:	003c4106 	br	5054f40 <_gp+0xfffe9b18>
 5055e3c:	d8c00c17 	ldw	r3,48(sp)
 5055e40:	d8c00615 	stw	r3,24(sp)
 5055e44:	003e7006 	br	5055808 <_gp+0xfffea3e0>
 5055e48:	04400044 	movi	r17,1
 5055e4c:	003b2006 	br	5054ad0 <_gp+0xfffe96a8>
 5055e50:	000b883a 	mov	r5,zero
 5055e54:	003b3d06 	br	5054b4c <_gp+0xfffe9724>
 5055e58:	d8800c17 	ldw	r2,48(sp)
 5055e5c:	d8800615 	stw	r2,24(sp)
 5055e60:	003e6906 	br	5055808 <_gp+0xfffea3e0>

05055e64 <__sflush_r>:
 5055e64:	2880030b 	ldhu	r2,12(r5)
 5055e68:	defffb04 	addi	sp,sp,-20
 5055e6c:	dcc00315 	stw	r19,12(sp)
 5055e70:	dc400115 	stw	r17,4(sp)
 5055e74:	dfc00415 	stw	ra,16(sp)
 5055e78:	dc800215 	stw	r18,8(sp)
 5055e7c:	dc000015 	stw	r16,0(sp)
 5055e80:	10c0020c 	andi	r3,r2,8
 5055e84:	2823883a 	mov	r17,r5
 5055e88:	2027883a 	mov	r19,r4
 5055e8c:	1800311e 	bne	r3,zero,5055f54 <__sflush_r+0xf0>
 5055e90:	28c00117 	ldw	r3,4(r5)
 5055e94:	10820014 	ori	r2,r2,2048
 5055e98:	2880030d 	sth	r2,12(r5)
 5055e9c:	00c04b0e 	bge	zero,r3,5055fcc <__sflush_r+0x168>
 5055ea0:	8a000a17 	ldw	r8,40(r17)
 5055ea4:	40002326 	beq	r8,zero,5055f34 <__sflush_r+0xd0>
 5055ea8:	9c000017 	ldw	r16,0(r19)
 5055eac:	10c4000c 	andi	r3,r2,4096
 5055eb0:	98000015 	stw	zero,0(r19)
 5055eb4:	18004826 	beq	r3,zero,5055fd8 <__sflush_r+0x174>
 5055eb8:	89801417 	ldw	r6,80(r17)
 5055ebc:	10c0010c 	andi	r3,r2,4
 5055ec0:	18000626 	beq	r3,zero,5055edc <__sflush_r+0x78>
 5055ec4:	88c00117 	ldw	r3,4(r17)
 5055ec8:	88800c17 	ldw	r2,48(r17)
 5055ecc:	30cdc83a 	sub	r6,r6,r3
 5055ed0:	10000226 	beq	r2,zero,5055edc <__sflush_r+0x78>
 5055ed4:	88800f17 	ldw	r2,60(r17)
 5055ed8:	308dc83a 	sub	r6,r6,r2
 5055edc:	89400717 	ldw	r5,28(r17)
 5055ee0:	000f883a 	mov	r7,zero
 5055ee4:	9809883a 	mov	r4,r19
 5055ee8:	403ee83a 	callr	r8
 5055eec:	00ffffc4 	movi	r3,-1
 5055ef0:	10c04426 	beq	r2,r3,5056004 <__sflush_r+0x1a0>
 5055ef4:	88c0030b 	ldhu	r3,12(r17)
 5055ef8:	89000417 	ldw	r4,16(r17)
 5055efc:	88000115 	stw	zero,4(r17)
 5055f00:	197dffcc 	andi	r5,r3,63487
 5055f04:	8940030d 	sth	r5,12(r17)
 5055f08:	89000015 	stw	r4,0(r17)
 5055f0c:	18c4000c 	andi	r3,r3,4096
 5055f10:	18002c1e 	bne	r3,zero,5055fc4 <__sflush_r+0x160>
 5055f14:	89400c17 	ldw	r5,48(r17)
 5055f18:	9c000015 	stw	r16,0(r19)
 5055f1c:	28000526 	beq	r5,zero,5055f34 <__sflush_r+0xd0>
 5055f20:	88801004 	addi	r2,r17,64
 5055f24:	28800226 	beq	r5,r2,5055f30 <__sflush_r+0xcc>
 5055f28:	9809883a 	mov	r4,r19
 5055f2c:	50565d00 	call	50565d0 <_free_r>
 5055f30:	88000c15 	stw	zero,48(r17)
 5055f34:	0005883a 	mov	r2,zero
 5055f38:	dfc00417 	ldw	ra,16(sp)
 5055f3c:	dcc00317 	ldw	r19,12(sp)
 5055f40:	dc800217 	ldw	r18,8(sp)
 5055f44:	dc400117 	ldw	r17,4(sp)
 5055f48:	dc000017 	ldw	r16,0(sp)
 5055f4c:	dec00504 	addi	sp,sp,20
 5055f50:	f800283a 	ret
 5055f54:	2c800417 	ldw	r18,16(r5)
 5055f58:	903ff626 	beq	r18,zero,5055f34 <_gp+0xfffeab0c>
 5055f5c:	2c000017 	ldw	r16,0(r5)
 5055f60:	108000cc 	andi	r2,r2,3
 5055f64:	2c800015 	stw	r18,0(r5)
 5055f68:	84a1c83a 	sub	r16,r16,r18
 5055f6c:	1000131e 	bne	r2,zero,5055fbc <__sflush_r+0x158>
 5055f70:	28800517 	ldw	r2,20(r5)
 5055f74:	88800215 	stw	r2,8(r17)
 5055f78:	04000316 	blt	zero,r16,5055f88 <__sflush_r+0x124>
 5055f7c:	003fed06 	br	5055f34 <_gp+0xfffeab0c>
 5055f80:	90a5883a 	add	r18,r18,r2
 5055f84:	043feb0e 	bge	zero,r16,5055f34 <_gp+0xfffeab0c>
 5055f88:	88800917 	ldw	r2,36(r17)
 5055f8c:	89400717 	ldw	r5,28(r17)
 5055f90:	800f883a 	mov	r7,r16
 5055f94:	900d883a 	mov	r6,r18
 5055f98:	9809883a 	mov	r4,r19
 5055f9c:	103ee83a 	callr	r2
 5055fa0:	80a1c83a 	sub	r16,r16,r2
 5055fa4:	00bff616 	blt	zero,r2,5055f80 <_gp+0xfffeab58>
 5055fa8:	88c0030b 	ldhu	r3,12(r17)
 5055fac:	00bfffc4 	movi	r2,-1
 5055fb0:	18c01014 	ori	r3,r3,64
 5055fb4:	88c0030d 	sth	r3,12(r17)
 5055fb8:	003fdf06 	br	5055f38 <_gp+0xfffeab10>
 5055fbc:	0005883a 	mov	r2,zero
 5055fc0:	003fec06 	br	5055f74 <_gp+0xfffeab4c>
 5055fc4:	88801415 	stw	r2,80(r17)
 5055fc8:	003fd206 	br	5055f14 <_gp+0xfffeaaec>
 5055fcc:	28c00f17 	ldw	r3,60(r5)
 5055fd0:	00ffb316 	blt	zero,r3,5055ea0 <_gp+0xfffeaa78>
 5055fd4:	003fd706 	br	5055f34 <_gp+0xfffeab0c>
 5055fd8:	89400717 	ldw	r5,28(r17)
 5055fdc:	000d883a 	mov	r6,zero
 5055fe0:	01c00044 	movi	r7,1
 5055fe4:	9809883a 	mov	r4,r19
 5055fe8:	403ee83a 	callr	r8
 5055fec:	100d883a 	mov	r6,r2
 5055ff0:	00bfffc4 	movi	r2,-1
 5055ff4:	30801426 	beq	r6,r2,5056048 <__sflush_r+0x1e4>
 5055ff8:	8880030b 	ldhu	r2,12(r17)
 5055ffc:	8a000a17 	ldw	r8,40(r17)
 5056000:	003fae06 	br	5055ebc <_gp+0xfffeaa94>
 5056004:	98c00017 	ldw	r3,0(r19)
 5056008:	183fba26 	beq	r3,zero,5055ef4 <_gp+0xfffeaacc>
 505600c:	01000744 	movi	r4,29
 5056010:	19000626 	beq	r3,r4,505602c <__sflush_r+0x1c8>
 5056014:	01000584 	movi	r4,22
 5056018:	19000426 	beq	r3,r4,505602c <__sflush_r+0x1c8>
 505601c:	88c0030b 	ldhu	r3,12(r17)
 5056020:	18c01014 	ori	r3,r3,64
 5056024:	88c0030d 	sth	r3,12(r17)
 5056028:	003fc306 	br	5055f38 <_gp+0xfffeab10>
 505602c:	8880030b 	ldhu	r2,12(r17)
 5056030:	88c00417 	ldw	r3,16(r17)
 5056034:	88000115 	stw	zero,4(r17)
 5056038:	10bdffcc 	andi	r2,r2,63487
 505603c:	8880030d 	sth	r2,12(r17)
 5056040:	88c00015 	stw	r3,0(r17)
 5056044:	003fb306 	br	5055f14 <_gp+0xfffeaaec>
 5056048:	98800017 	ldw	r2,0(r19)
 505604c:	103fea26 	beq	r2,zero,5055ff8 <_gp+0xfffeabd0>
 5056050:	00c00744 	movi	r3,29
 5056054:	10c00226 	beq	r2,r3,5056060 <__sflush_r+0x1fc>
 5056058:	00c00584 	movi	r3,22
 505605c:	10c0031e 	bne	r2,r3,505606c <__sflush_r+0x208>
 5056060:	9c000015 	stw	r16,0(r19)
 5056064:	0005883a 	mov	r2,zero
 5056068:	003fb306 	br	5055f38 <_gp+0xfffeab10>
 505606c:	88c0030b 	ldhu	r3,12(r17)
 5056070:	3005883a 	mov	r2,r6
 5056074:	18c01014 	ori	r3,r3,64
 5056078:	88c0030d 	sth	r3,12(r17)
 505607c:	003fae06 	br	5055f38 <_gp+0xfffeab10>

05056080 <_fflush_r>:
 5056080:	defffd04 	addi	sp,sp,-12
 5056084:	dc000115 	stw	r16,4(sp)
 5056088:	dfc00215 	stw	ra,8(sp)
 505608c:	2021883a 	mov	r16,r4
 5056090:	20000226 	beq	r4,zero,505609c <_fflush_r+0x1c>
 5056094:	20800e17 	ldw	r2,56(r4)
 5056098:	10000c26 	beq	r2,zero,50560cc <_fflush_r+0x4c>
 505609c:	2880030f 	ldh	r2,12(r5)
 50560a0:	1000051e 	bne	r2,zero,50560b8 <_fflush_r+0x38>
 50560a4:	0005883a 	mov	r2,zero
 50560a8:	dfc00217 	ldw	ra,8(sp)
 50560ac:	dc000117 	ldw	r16,4(sp)
 50560b0:	dec00304 	addi	sp,sp,12
 50560b4:	f800283a 	ret
 50560b8:	8009883a 	mov	r4,r16
 50560bc:	dfc00217 	ldw	ra,8(sp)
 50560c0:	dc000117 	ldw	r16,4(sp)
 50560c4:	dec00304 	addi	sp,sp,12
 50560c8:	5055e641 	jmpi	5055e64 <__sflush_r>
 50560cc:	d9400015 	stw	r5,0(sp)
 50560d0:	505645c0 	call	505645c <__sinit>
 50560d4:	d9400017 	ldw	r5,0(sp)
 50560d8:	003ff006 	br	505609c <_gp+0xfffeac74>

050560dc <fflush>:
 50560dc:	20000526 	beq	r4,zero,50560f4 <fflush+0x18>
 50560e0:	008141b4 	movhi	r2,1286
 50560e4:	108d0f04 	addi	r2,r2,13372
 50560e8:	200b883a 	mov	r5,r4
 50560ec:	11000017 	ldw	r4,0(r2)
 50560f0:	50560801 	jmpi	5056080 <_fflush_r>
 50560f4:	008141b4 	movhi	r2,1286
 50560f8:	108d0e04 	addi	r2,r2,13368
 50560fc:	11000017 	ldw	r4,0(r2)
 5056100:	01414174 	movhi	r5,1285
 5056104:	29582004 	addi	r5,r5,24704
 5056108:	5056e601 	jmpi	5056e60 <_fwalk_reent>

0505610c <__fp_unlock>:
 505610c:	0005883a 	mov	r2,zero
 5056110:	f800283a 	ret

05056114 <_cleanup_r>:
 5056114:	014141b4 	movhi	r5,1286
 5056118:	296ded04 	addi	r5,r5,-18508
 505611c:	5056e601 	jmpi	5056e60 <_fwalk_reent>

05056120 <__sinit.part.1>:
 5056120:	defff704 	addi	sp,sp,-36
 5056124:	00c14174 	movhi	r3,1285
 5056128:	dfc00815 	stw	ra,32(sp)
 505612c:	ddc00715 	stw	r23,28(sp)
 5056130:	dd800615 	stw	r22,24(sp)
 5056134:	dd400515 	stw	r21,20(sp)
 5056138:	dd000415 	stw	r20,16(sp)
 505613c:	dcc00315 	stw	r19,12(sp)
 5056140:	dc800215 	stw	r18,8(sp)
 5056144:	dc400115 	stw	r17,4(sp)
 5056148:	dc000015 	stw	r16,0(sp)
 505614c:	18d84504 	addi	r3,r3,24852
 5056150:	24000117 	ldw	r16,4(r4)
 5056154:	20c00f15 	stw	r3,60(r4)
 5056158:	2080bb04 	addi	r2,r4,748
 505615c:	00c000c4 	movi	r3,3
 5056160:	20c0b915 	stw	r3,740(r4)
 5056164:	2080ba15 	stw	r2,744(r4)
 5056168:	2000b815 	stw	zero,736(r4)
 505616c:	05c00204 	movi	r23,8
 5056170:	00800104 	movi	r2,4
 5056174:	2025883a 	mov	r18,r4
 5056178:	b80d883a 	mov	r6,r23
 505617c:	81001704 	addi	r4,r16,92
 5056180:	000b883a 	mov	r5,zero
 5056184:	80000015 	stw	zero,0(r16)
 5056188:	80000115 	stw	zero,4(r16)
 505618c:	80000215 	stw	zero,8(r16)
 5056190:	8080030d 	sth	r2,12(r16)
 5056194:	80001915 	stw	zero,100(r16)
 5056198:	8000038d 	sth	zero,14(r16)
 505619c:	80000415 	stw	zero,16(r16)
 50561a0:	80000515 	stw	zero,20(r16)
 50561a4:	80000615 	stw	zero,24(r16)
 50561a8:	504fa140 	call	504fa14 <memset>
 50561ac:	058141b4 	movhi	r22,1286
 50561b0:	94400217 	ldw	r17,8(r18)
 50561b4:	054141b4 	movhi	r21,1286
 50561b8:	050141b4 	movhi	r20,1286
 50561bc:	04c141b4 	movhi	r19,1286
 50561c0:	b5a27404 	addi	r22,r22,-30256
 50561c4:	ad628b04 	addi	r21,r21,-30164
 50561c8:	a522aa04 	addi	r20,r20,-30040
 50561cc:	9ce2c104 	addi	r19,r19,-29948
 50561d0:	85800815 	stw	r22,32(r16)
 50561d4:	85400915 	stw	r21,36(r16)
 50561d8:	85000a15 	stw	r20,40(r16)
 50561dc:	84c00b15 	stw	r19,44(r16)
 50561e0:	84000715 	stw	r16,28(r16)
 50561e4:	00800284 	movi	r2,10
 50561e8:	8880030d 	sth	r2,12(r17)
 50561ec:	00800044 	movi	r2,1
 50561f0:	b80d883a 	mov	r6,r23
 50561f4:	89001704 	addi	r4,r17,92
 50561f8:	000b883a 	mov	r5,zero
 50561fc:	88000015 	stw	zero,0(r17)
 5056200:	88000115 	stw	zero,4(r17)
 5056204:	88000215 	stw	zero,8(r17)
 5056208:	88001915 	stw	zero,100(r17)
 505620c:	8880038d 	sth	r2,14(r17)
 5056210:	88000415 	stw	zero,16(r17)
 5056214:	88000515 	stw	zero,20(r17)
 5056218:	88000615 	stw	zero,24(r17)
 505621c:	504fa140 	call	504fa14 <memset>
 5056220:	94000317 	ldw	r16,12(r18)
 5056224:	00800484 	movi	r2,18
 5056228:	8c400715 	stw	r17,28(r17)
 505622c:	8d800815 	stw	r22,32(r17)
 5056230:	8d400915 	stw	r21,36(r17)
 5056234:	8d000a15 	stw	r20,40(r17)
 5056238:	8cc00b15 	stw	r19,44(r17)
 505623c:	8080030d 	sth	r2,12(r16)
 5056240:	00800084 	movi	r2,2
 5056244:	80000015 	stw	zero,0(r16)
 5056248:	80000115 	stw	zero,4(r16)
 505624c:	80000215 	stw	zero,8(r16)
 5056250:	80001915 	stw	zero,100(r16)
 5056254:	8080038d 	sth	r2,14(r16)
 5056258:	80000415 	stw	zero,16(r16)
 505625c:	80000515 	stw	zero,20(r16)
 5056260:	80000615 	stw	zero,24(r16)
 5056264:	b80d883a 	mov	r6,r23
 5056268:	000b883a 	mov	r5,zero
 505626c:	81001704 	addi	r4,r16,92
 5056270:	504fa140 	call	504fa14 <memset>
 5056274:	00800044 	movi	r2,1
 5056278:	84000715 	stw	r16,28(r16)
 505627c:	85800815 	stw	r22,32(r16)
 5056280:	85400915 	stw	r21,36(r16)
 5056284:	85000a15 	stw	r20,40(r16)
 5056288:	84c00b15 	stw	r19,44(r16)
 505628c:	90800e15 	stw	r2,56(r18)
 5056290:	dfc00817 	ldw	ra,32(sp)
 5056294:	ddc00717 	ldw	r23,28(sp)
 5056298:	dd800617 	ldw	r22,24(sp)
 505629c:	dd400517 	ldw	r21,20(sp)
 50562a0:	dd000417 	ldw	r20,16(sp)
 50562a4:	dcc00317 	ldw	r19,12(sp)
 50562a8:	dc800217 	ldw	r18,8(sp)
 50562ac:	dc400117 	ldw	r17,4(sp)
 50562b0:	dc000017 	ldw	r16,0(sp)
 50562b4:	dec00904 	addi	sp,sp,36
 50562b8:	f800283a 	ret

050562bc <__fp_lock>:
 50562bc:	0005883a 	mov	r2,zero
 50562c0:	f800283a 	ret

050562c4 <__sfmoreglue>:
 50562c4:	defffc04 	addi	sp,sp,-16
 50562c8:	dc400115 	stw	r17,4(sp)
 50562cc:	2c7fffc4 	addi	r17,r5,-1
 50562d0:	8c401a24 	muli	r17,r17,104
 50562d4:	dc800215 	stw	r18,8(sp)
 50562d8:	2825883a 	mov	r18,r5
 50562dc:	89401d04 	addi	r5,r17,116
 50562e0:	dc000015 	stw	r16,0(sp)
 50562e4:	dfc00315 	stw	ra,12(sp)
 50562e8:	504f0c00 	call	504f0c0 <_malloc_r>
 50562ec:	1021883a 	mov	r16,r2
 50562f0:	10000726 	beq	r2,zero,5056310 <__sfmoreglue+0x4c>
 50562f4:	11000304 	addi	r4,r2,12
 50562f8:	10000015 	stw	zero,0(r2)
 50562fc:	14800115 	stw	r18,4(r2)
 5056300:	11000215 	stw	r4,8(r2)
 5056304:	89801a04 	addi	r6,r17,104
 5056308:	000b883a 	mov	r5,zero
 505630c:	504fa140 	call	504fa14 <memset>
 5056310:	8005883a 	mov	r2,r16
 5056314:	dfc00317 	ldw	ra,12(sp)
 5056318:	dc800217 	ldw	r18,8(sp)
 505631c:	dc400117 	ldw	r17,4(sp)
 5056320:	dc000017 	ldw	r16,0(sp)
 5056324:	dec00404 	addi	sp,sp,16
 5056328:	f800283a 	ret

0505632c <__sfp>:
 505632c:	defffb04 	addi	sp,sp,-20
 5056330:	dc000015 	stw	r16,0(sp)
 5056334:	040141b4 	movhi	r16,1286
 5056338:	840d0e04 	addi	r16,r16,13368
 505633c:	dcc00315 	stw	r19,12(sp)
 5056340:	2027883a 	mov	r19,r4
 5056344:	81000017 	ldw	r4,0(r16)
 5056348:	dfc00415 	stw	ra,16(sp)
 505634c:	dc800215 	stw	r18,8(sp)
 5056350:	20800e17 	ldw	r2,56(r4)
 5056354:	dc400115 	stw	r17,4(sp)
 5056358:	1000021e 	bne	r2,zero,5056364 <__sfp+0x38>
 505635c:	50561200 	call	5056120 <__sinit.part.1>
 5056360:	81000017 	ldw	r4,0(r16)
 5056364:	2480b804 	addi	r18,r4,736
 5056368:	047fffc4 	movi	r17,-1
 505636c:	91000117 	ldw	r4,4(r18)
 5056370:	94000217 	ldw	r16,8(r18)
 5056374:	213fffc4 	addi	r4,r4,-1
 5056378:	20000a16 	blt	r4,zero,50563a4 <__sfp+0x78>
 505637c:	8080030f 	ldh	r2,12(r16)
 5056380:	10000c26 	beq	r2,zero,50563b4 <__sfp+0x88>
 5056384:	80c01d04 	addi	r3,r16,116
 5056388:	00000206 	br	5056394 <__sfp+0x68>
 505638c:	18bfe60f 	ldh	r2,-104(r3)
 5056390:	10000826 	beq	r2,zero,50563b4 <__sfp+0x88>
 5056394:	213fffc4 	addi	r4,r4,-1
 5056398:	1c3ffd04 	addi	r16,r3,-12
 505639c:	18c01a04 	addi	r3,r3,104
 50563a0:	247ffa1e 	bne	r4,r17,505638c <_gp+0xfffeaf64>
 50563a4:	90800017 	ldw	r2,0(r18)
 50563a8:	10001d26 	beq	r2,zero,5056420 <__sfp+0xf4>
 50563ac:	1025883a 	mov	r18,r2
 50563b0:	003fee06 	br	505636c <_gp+0xfffeaf44>
 50563b4:	00bfffc4 	movi	r2,-1
 50563b8:	8080038d 	sth	r2,14(r16)
 50563bc:	00800044 	movi	r2,1
 50563c0:	8080030d 	sth	r2,12(r16)
 50563c4:	80001915 	stw	zero,100(r16)
 50563c8:	80000015 	stw	zero,0(r16)
 50563cc:	80000215 	stw	zero,8(r16)
 50563d0:	80000115 	stw	zero,4(r16)
 50563d4:	80000415 	stw	zero,16(r16)
 50563d8:	80000515 	stw	zero,20(r16)
 50563dc:	80000615 	stw	zero,24(r16)
 50563e0:	01800204 	movi	r6,8
 50563e4:	000b883a 	mov	r5,zero
 50563e8:	81001704 	addi	r4,r16,92
 50563ec:	504fa140 	call	504fa14 <memset>
 50563f0:	8005883a 	mov	r2,r16
 50563f4:	80000c15 	stw	zero,48(r16)
 50563f8:	80000d15 	stw	zero,52(r16)
 50563fc:	80001115 	stw	zero,68(r16)
 5056400:	80001215 	stw	zero,72(r16)
 5056404:	dfc00417 	ldw	ra,16(sp)
 5056408:	dcc00317 	ldw	r19,12(sp)
 505640c:	dc800217 	ldw	r18,8(sp)
 5056410:	dc400117 	ldw	r17,4(sp)
 5056414:	dc000017 	ldw	r16,0(sp)
 5056418:	dec00504 	addi	sp,sp,20
 505641c:	f800283a 	ret
 5056420:	01400104 	movi	r5,4
 5056424:	9809883a 	mov	r4,r19
 5056428:	50562c40 	call	50562c4 <__sfmoreglue>
 505642c:	90800015 	stw	r2,0(r18)
 5056430:	103fde1e 	bne	r2,zero,50563ac <_gp+0xfffeaf84>
 5056434:	00800304 	movi	r2,12
 5056438:	98800015 	stw	r2,0(r19)
 505643c:	0005883a 	mov	r2,zero
 5056440:	003ff006 	br	5056404 <_gp+0xfffeafdc>

05056444 <_cleanup>:
 5056444:	008141b4 	movhi	r2,1286
 5056448:	108d0e04 	addi	r2,r2,13368
 505644c:	11000017 	ldw	r4,0(r2)
 5056450:	014141b4 	movhi	r5,1286
 5056454:	296ded04 	addi	r5,r5,-18508
 5056458:	5056e601 	jmpi	5056e60 <_fwalk_reent>

0505645c <__sinit>:
 505645c:	20800e17 	ldw	r2,56(r4)
 5056460:	10000126 	beq	r2,zero,5056468 <__sinit+0xc>
 5056464:	f800283a 	ret
 5056468:	50561201 	jmpi	5056120 <__sinit.part.1>

0505646c <__sfp_lock_acquire>:
 505646c:	f800283a 	ret

05056470 <__sfp_lock_release>:
 5056470:	f800283a 	ret

05056474 <__sinit_lock_acquire>:
 5056474:	f800283a 	ret

05056478 <__sinit_lock_release>:
 5056478:	f800283a 	ret

0505647c <__fp_lock_all>:
 505647c:	008141b4 	movhi	r2,1286
 5056480:	108d0f04 	addi	r2,r2,13372
 5056484:	11000017 	ldw	r4,0(r2)
 5056488:	01414174 	movhi	r5,1285
 505648c:	2958af04 	addi	r5,r5,25276
 5056490:	5056d9c1 	jmpi	5056d9c <_fwalk>

05056494 <__fp_unlock_all>:
 5056494:	008141b4 	movhi	r2,1286
 5056498:	108d0f04 	addi	r2,r2,13372
 505649c:	11000017 	ldw	r4,0(r2)
 50564a0:	01414174 	movhi	r5,1285
 50564a4:	29584304 	addi	r5,r5,24844
 50564a8:	5056d9c1 	jmpi	5056d9c <_fwalk>

050564ac <_malloc_trim_r>:
 50564ac:	defffb04 	addi	sp,sp,-20
 50564b0:	dcc00315 	stw	r19,12(sp)
 50564b4:	04c141b4 	movhi	r19,1286
 50564b8:	dc800215 	stw	r18,8(sp)
 50564bc:	dc400115 	stw	r17,4(sp)
 50564c0:	dc000015 	stw	r16,0(sp)
 50564c4:	dfc00415 	stw	ra,16(sp)
 50564c8:	2821883a 	mov	r16,r5
 50564cc:	9cc62e04 	addi	r19,r19,6328
 50564d0:	2025883a 	mov	r18,r4
 50564d4:	505d3e40 	call	505d3e4 <__malloc_lock>
 50564d8:	98800217 	ldw	r2,8(r19)
 50564dc:	14400117 	ldw	r17,4(r2)
 50564e0:	00bfff04 	movi	r2,-4
 50564e4:	88a2703a 	and	r17,r17,r2
 50564e8:	8c21c83a 	sub	r16,r17,r16
 50564ec:	8403fbc4 	addi	r16,r16,4079
 50564f0:	8020d33a 	srli	r16,r16,12
 50564f4:	0083ffc4 	movi	r2,4095
 50564f8:	843fffc4 	addi	r16,r16,-1
 50564fc:	8020933a 	slli	r16,r16,12
 5056500:	1400060e 	bge	r2,r16,505651c <_malloc_trim_r+0x70>
 5056504:	000b883a 	mov	r5,zero
 5056508:	9009883a 	mov	r4,r18
 505650c:	504fc7c0 	call	504fc7c <_sbrk_r>
 5056510:	98c00217 	ldw	r3,8(r19)
 5056514:	1c47883a 	add	r3,r3,r17
 5056518:	10c00a26 	beq	r2,r3,5056544 <_malloc_trim_r+0x98>
 505651c:	9009883a 	mov	r4,r18
 5056520:	505d4080 	call	505d408 <__malloc_unlock>
 5056524:	0005883a 	mov	r2,zero
 5056528:	dfc00417 	ldw	ra,16(sp)
 505652c:	dcc00317 	ldw	r19,12(sp)
 5056530:	dc800217 	ldw	r18,8(sp)
 5056534:	dc400117 	ldw	r17,4(sp)
 5056538:	dc000017 	ldw	r16,0(sp)
 505653c:	dec00504 	addi	sp,sp,20
 5056540:	f800283a 	ret
 5056544:	040bc83a 	sub	r5,zero,r16
 5056548:	9009883a 	mov	r4,r18
 505654c:	504fc7c0 	call	504fc7c <_sbrk_r>
 5056550:	00ffffc4 	movi	r3,-1
 5056554:	10c00d26 	beq	r2,r3,505658c <_malloc_trim_r+0xe0>
 5056558:	00c141b4 	movhi	r3,1286
 505655c:	18d63304 	addi	r3,r3,22732
 5056560:	18800017 	ldw	r2,0(r3)
 5056564:	99000217 	ldw	r4,8(r19)
 5056568:	8c23c83a 	sub	r17,r17,r16
 505656c:	8c400054 	ori	r17,r17,1
 5056570:	1421c83a 	sub	r16,r2,r16
 5056574:	24400115 	stw	r17,4(r4)
 5056578:	9009883a 	mov	r4,r18
 505657c:	1c000015 	stw	r16,0(r3)
 5056580:	505d4080 	call	505d408 <__malloc_unlock>
 5056584:	00800044 	movi	r2,1
 5056588:	003fe706 	br	5056528 <_gp+0xfffeb100>
 505658c:	000b883a 	mov	r5,zero
 5056590:	9009883a 	mov	r4,r18
 5056594:	504fc7c0 	call	504fc7c <_sbrk_r>
 5056598:	99000217 	ldw	r4,8(r19)
 505659c:	014003c4 	movi	r5,15
 50565a0:	1107c83a 	sub	r3,r2,r4
 50565a4:	28ffdd0e 	bge	r5,r3,505651c <_gp+0xfffeb0f4>
 50565a8:	014141b4 	movhi	r5,1286
 50565ac:	294d0c04 	addi	r5,r5,13360
 50565b0:	29400017 	ldw	r5,0(r5)
 50565b4:	18c00054 	ori	r3,r3,1
 50565b8:	20c00115 	stw	r3,4(r4)
 50565bc:	00c141b4 	movhi	r3,1286
 50565c0:	1145c83a 	sub	r2,r2,r5
 50565c4:	18d63304 	addi	r3,r3,22732
 50565c8:	18800015 	stw	r2,0(r3)
 50565cc:	003fd306 	br	505651c <_gp+0xfffeb0f4>

050565d0 <_free_r>:
 50565d0:	28004126 	beq	r5,zero,50566d8 <_free_r+0x108>
 50565d4:	defffd04 	addi	sp,sp,-12
 50565d8:	dc400115 	stw	r17,4(sp)
 50565dc:	dc000015 	stw	r16,0(sp)
 50565e0:	2023883a 	mov	r17,r4
 50565e4:	2821883a 	mov	r16,r5
 50565e8:	dfc00215 	stw	ra,8(sp)
 50565ec:	505d3e40 	call	505d3e4 <__malloc_lock>
 50565f0:	81ffff17 	ldw	r7,-4(r16)
 50565f4:	00bfff84 	movi	r2,-2
 50565f8:	010141b4 	movhi	r4,1286
 50565fc:	81bffe04 	addi	r6,r16,-8
 5056600:	3884703a 	and	r2,r7,r2
 5056604:	21062e04 	addi	r4,r4,6328
 5056608:	308b883a 	add	r5,r6,r2
 505660c:	2a400117 	ldw	r9,4(r5)
 5056610:	22000217 	ldw	r8,8(r4)
 5056614:	00ffff04 	movi	r3,-4
 5056618:	48c6703a 	and	r3,r9,r3
 505661c:	2a005726 	beq	r5,r8,505677c <_free_r+0x1ac>
 5056620:	28c00115 	stw	r3,4(r5)
 5056624:	39c0004c 	andi	r7,r7,1
 5056628:	3800091e 	bne	r7,zero,5056650 <_free_r+0x80>
 505662c:	823ffe17 	ldw	r8,-8(r16)
 5056630:	22400204 	addi	r9,r4,8
 5056634:	320dc83a 	sub	r6,r6,r8
 5056638:	31c00217 	ldw	r7,8(r6)
 505663c:	1205883a 	add	r2,r2,r8
 5056640:	3a406526 	beq	r7,r9,50567d8 <_free_r+0x208>
 5056644:	32000317 	ldw	r8,12(r6)
 5056648:	3a000315 	stw	r8,12(r7)
 505664c:	41c00215 	stw	r7,8(r8)
 5056650:	28cf883a 	add	r7,r5,r3
 5056654:	39c00117 	ldw	r7,4(r7)
 5056658:	39c0004c 	andi	r7,r7,1
 505665c:	38003a26 	beq	r7,zero,5056748 <_free_r+0x178>
 5056660:	10c00054 	ori	r3,r2,1
 5056664:	30c00115 	stw	r3,4(r6)
 5056668:	3087883a 	add	r3,r6,r2
 505666c:	18800015 	stw	r2,0(r3)
 5056670:	00c07fc4 	movi	r3,511
 5056674:	18801936 	bltu	r3,r2,50566dc <_free_r+0x10c>
 5056678:	1004d0fa 	srli	r2,r2,3
 505667c:	01c00044 	movi	r7,1
 5056680:	21400117 	ldw	r5,4(r4)
 5056684:	10c00044 	addi	r3,r2,1
 5056688:	18c7883a 	add	r3,r3,r3
 505668c:	1005d0ba 	srai	r2,r2,2
 5056690:	18c7883a 	add	r3,r3,r3
 5056694:	18c7883a 	add	r3,r3,r3
 5056698:	1907883a 	add	r3,r3,r4
 505669c:	3884983a 	sll	r2,r7,r2
 50566a0:	19c00017 	ldw	r7,0(r3)
 50566a4:	1a3ffe04 	addi	r8,r3,-8
 50566a8:	1144b03a 	or	r2,r2,r5
 50566ac:	32000315 	stw	r8,12(r6)
 50566b0:	31c00215 	stw	r7,8(r6)
 50566b4:	20800115 	stw	r2,4(r4)
 50566b8:	19800015 	stw	r6,0(r3)
 50566bc:	39800315 	stw	r6,12(r7)
 50566c0:	8809883a 	mov	r4,r17
 50566c4:	dfc00217 	ldw	ra,8(sp)
 50566c8:	dc400117 	ldw	r17,4(sp)
 50566cc:	dc000017 	ldw	r16,0(sp)
 50566d0:	dec00304 	addi	sp,sp,12
 50566d4:	505d4081 	jmpi	505d408 <__malloc_unlock>
 50566d8:	f800283a 	ret
 50566dc:	100ad27a 	srli	r5,r2,9
 50566e0:	00c00104 	movi	r3,4
 50566e4:	19404a36 	bltu	r3,r5,5056810 <_free_r+0x240>
 50566e8:	100ad1ba 	srli	r5,r2,6
 50566ec:	28c00e44 	addi	r3,r5,57
 50566f0:	18c7883a 	add	r3,r3,r3
 50566f4:	29400e04 	addi	r5,r5,56
 50566f8:	18c7883a 	add	r3,r3,r3
 50566fc:	18c7883a 	add	r3,r3,r3
 5056700:	1909883a 	add	r4,r3,r4
 5056704:	20c00017 	ldw	r3,0(r4)
 5056708:	01c141b4 	movhi	r7,1286
 505670c:	213ffe04 	addi	r4,r4,-8
 5056710:	39c62e04 	addi	r7,r7,6328
 5056714:	20c04426 	beq	r4,r3,5056828 <_free_r+0x258>
 5056718:	01ffff04 	movi	r7,-4
 505671c:	19400117 	ldw	r5,4(r3)
 5056720:	29ca703a 	and	r5,r5,r7
 5056724:	1140022e 	bgeu	r2,r5,5056730 <_free_r+0x160>
 5056728:	18c00217 	ldw	r3,8(r3)
 505672c:	20fffb1e 	bne	r4,r3,505671c <_gp+0xfffeb2f4>
 5056730:	19000317 	ldw	r4,12(r3)
 5056734:	31000315 	stw	r4,12(r6)
 5056738:	30c00215 	stw	r3,8(r6)
 505673c:	21800215 	stw	r6,8(r4)
 5056740:	19800315 	stw	r6,12(r3)
 5056744:	003fde06 	br	50566c0 <_gp+0xfffeb298>
 5056748:	29c00217 	ldw	r7,8(r5)
 505674c:	10c5883a 	add	r2,r2,r3
 5056750:	00c141b4 	movhi	r3,1286
 5056754:	18c63004 	addi	r3,r3,6336
 5056758:	38c03b26 	beq	r7,r3,5056848 <_free_r+0x278>
 505675c:	2a000317 	ldw	r8,12(r5)
 5056760:	11400054 	ori	r5,r2,1
 5056764:	3087883a 	add	r3,r6,r2
 5056768:	3a000315 	stw	r8,12(r7)
 505676c:	41c00215 	stw	r7,8(r8)
 5056770:	31400115 	stw	r5,4(r6)
 5056774:	18800015 	stw	r2,0(r3)
 5056778:	003fbd06 	br	5056670 <_gp+0xfffeb248>
 505677c:	39c0004c 	andi	r7,r7,1
 5056780:	10c5883a 	add	r2,r2,r3
 5056784:	3800071e 	bne	r7,zero,50567a4 <_free_r+0x1d4>
 5056788:	81fffe17 	ldw	r7,-8(r16)
 505678c:	31cdc83a 	sub	r6,r6,r7
 5056790:	30c00317 	ldw	r3,12(r6)
 5056794:	31400217 	ldw	r5,8(r6)
 5056798:	11c5883a 	add	r2,r2,r7
 505679c:	28c00315 	stw	r3,12(r5)
 50567a0:	19400215 	stw	r5,8(r3)
 50567a4:	10c00054 	ori	r3,r2,1
 50567a8:	30c00115 	stw	r3,4(r6)
 50567ac:	00c141b4 	movhi	r3,1286
 50567b0:	18cd0d04 	addi	r3,r3,13364
 50567b4:	18c00017 	ldw	r3,0(r3)
 50567b8:	21800215 	stw	r6,8(r4)
 50567bc:	10ffc036 	bltu	r2,r3,50566c0 <_gp+0xfffeb298>
 50567c0:	008141b4 	movhi	r2,1286
 50567c4:	10951c04 	addi	r2,r2,21616
 50567c8:	11400017 	ldw	r5,0(r2)
 50567cc:	8809883a 	mov	r4,r17
 50567d0:	50564ac0 	call	50564ac <_malloc_trim_r>
 50567d4:	003fba06 	br	50566c0 <_gp+0xfffeb298>
 50567d8:	28c9883a 	add	r4,r5,r3
 50567dc:	21000117 	ldw	r4,4(r4)
 50567e0:	2100004c 	andi	r4,r4,1
 50567e4:	2000391e 	bne	r4,zero,50568cc <_free_r+0x2fc>
 50567e8:	29c00217 	ldw	r7,8(r5)
 50567ec:	29000317 	ldw	r4,12(r5)
 50567f0:	1885883a 	add	r2,r3,r2
 50567f4:	10c00054 	ori	r3,r2,1
 50567f8:	39000315 	stw	r4,12(r7)
 50567fc:	21c00215 	stw	r7,8(r4)
 5056800:	30c00115 	stw	r3,4(r6)
 5056804:	308d883a 	add	r6,r6,r2
 5056808:	30800015 	stw	r2,0(r6)
 505680c:	003fac06 	br	50566c0 <_gp+0xfffeb298>
 5056810:	00c00504 	movi	r3,20
 5056814:	19401536 	bltu	r3,r5,505686c <_free_r+0x29c>
 5056818:	28c01704 	addi	r3,r5,92
 505681c:	18c7883a 	add	r3,r3,r3
 5056820:	294016c4 	addi	r5,r5,91
 5056824:	003fb406 	br	50566f8 <_gp+0xfffeb2d0>
 5056828:	280bd0ba 	srai	r5,r5,2
 505682c:	00c00044 	movi	r3,1
 5056830:	38800117 	ldw	r2,4(r7)
 5056834:	194a983a 	sll	r5,r3,r5
 5056838:	2007883a 	mov	r3,r4
 505683c:	2884b03a 	or	r2,r5,r2
 5056840:	38800115 	stw	r2,4(r7)
 5056844:	003fbb06 	br	5056734 <_gp+0xfffeb30c>
 5056848:	21800515 	stw	r6,20(r4)
 505684c:	21800415 	stw	r6,16(r4)
 5056850:	10c00054 	ori	r3,r2,1
 5056854:	31c00315 	stw	r7,12(r6)
 5056858:	31c00215 	stw	r7,8(r6)
 505685c:	30c00115 	stw	r3,4(r6)
 5056860:	308d883a 	add	r6,r6,r2
 5056864:	30800015 	stw	r2,0(r6)
 5056868:	003f9506 	br	50566c0 <_gp+0xfffeb298>
 505686c:	00c01504 	movi	r3,84
 5056870:	19400536 	bltu	r3,r5,5056888 <_free_r+0x2b8>
 5056874:	100ad33a 	srli	r5,r2,12
 5056878:	28c01bc4 	addi	r3,r5,111
 505687c:	18c7883a 	add	r3,r3,r3
 5056880:	29401b84 	addi	r5,r5,110
 5056884:	003f9c06 	br	50566f8 <_gp+0xfffeb2d0>
 5056888:	00c05504 	movi	r3,340
 505688c:	19400536 	bltu	r3,r5,50568a4 <_free_r+0x2d4>
 5056890:	100ad3fa 	srli	r5,r2,15
 5056894:	28c01e04 	addi	r3,r5,120
 5056898:	18c7883a 	add	r3,r3,r3
 505689c:	29401dc4 	addi	r5,r5,119
 50568a0:	003f9506 	br	50566f8 <_gp+0xfffeb2d0>
 50568a4:	00c15504 	movi	r3,1364
 50568a8:	19400536 	bltu	r3,r5,50568c0 <_free_r+0x2f0>
 50568ac:	100ad4ba 	srli	r5,r2,18
 50568b0:	28c01f44 	addi	r3,r5,125
 50568b4:	18c7883a 	add	r3,r3,r3
 50568b8:	29401f04 	addi	r5,r5,124
 50568bc:	003f8e06 	br	50566f8 <_gp+0xfffeb2d0>
 50568c0:	00c03f84 	movi	r3,254
 50568c4:	01401f84 	movi	r5,126
 50568c8:	003f8b06 	br	50566f8 <_gp+0xfffeb2d0>
 50568cc:	10c00054 	ori	r3,r2,1
 50568d0:	30c00115 	stw	r3,4(r6)
 50568d4:	308d883a 	add	r6,r6,r2
 50568d8:	30800015 	stw	r2,0(r6)
 50568dc:	003f7806 	br	50566c0 <_gp+0xfffeb298>

050568e0 <__sfvwrite_r>:
 50568e0:	30800217 	ldw	r2,8(r6)
 50568e4:	10006726 	beq	r2,zero,5056a84 <__sfvwrite_r+0x1a4>
 50568e8:	28c0030b 	ldhu	r3,12(r5)
 50568ec:	defff404 	addi	sp,sp,-48
 50568f0:	dd400715 	stw	r21,28(sp)
 50568f4:	dd000615 	stw	r20,24(sp)
 50568f8:	dc000215 	stw	r16,8(sp)
 50568fc:	dfc00b15 	stw	ra,44(sp)
 5056900:	df000a15 	stw	fp,40(sp)
 5056904:	ddc00915 	stw	r23,36(sp)
 5056908:	dd800815 	stw	r22,32(sp)
 505690c:	dcc00515 	stw	r19,20(sp)
 5056910:	dc800415 	stw	r18,16(sp)
 5056914:	dc400315 	stw	r17,12(sp)
 5056918:	1880020c 	andi	r2,r3,8
 505691c:	2821883a 	mov	r16,r5
 5056920:	202b883a 	mov	r21,r4
 5056924:	3029883a 	mov	r20,r6
 5056928:	10002726 	beq	r2,zero,50569c8 <__sfvwrite_r+0xe8>
 505692c:	28800417 	ldw	r2,16(r5)
 5056930:	10002526 	beq	r2,zero,50569c8 <__sfvwrite_r+0xe8>
 5056934:	1880008c 	andi	r2,r3,2
 5056938:	a4400017 	ldw	r17,0(r20)
 505693c:	10002a26 	beq	r2,zero,50569e8 <__sfvwrite_r+0x108>
 5056940:	05a00034 	movhi	r22,32768
 5056944:	0027883a 	mov	r19,zero
 5056948:	0025883a 	mov	r18,zero
 505694c:	b5bf0004 	addi	r22,r22,-1024
 5056950:	980d883a 	mov	r6,r19
 5056954:	a809883a 	mov	r4,r21
 5056958:	90004626 	beq	r18,zero,5056a74 <__sfvwrite_r+0x194>
 505695c:	900f883a 	mov	r7,r18
 5056960:	b480022e 	bgeu	r22,r18,505696c <__sfvwrite_r+0x8c>
 5056964:	01e00034 	movhi	r7,32768
 5056968:	39ff0004 	addi	r7,r7,-1024
 505696c:	80800917 	ldw	r2,36(r16)
 5056970:	81400717 	ldw	r5,28(r16)
 5056974:	103ee83a 	callr	r2
 5056978:	0080570e 	bge	zero,r2,5056ad8 <__sfvwrite_r+0x1f8>
 505697c:	a0c00217 	ldw	r3,8(r20)
 5056980:	98a7883a 	add	r19,r19,r2
 5056984:	90a5c83a 	sub	r18,r18,r2
 5056988:	1885c83a 	sub	r2,r3,r2
 505698c:	a0800215 	stw	r2,8(r20)
 5056990:	103fef1e 	bne	r2,zero,5056950 <_gp+0xfffeb528>
 5056994:	0005883a 	mov	r2,zero
 5056998:	dfc00b17 	ldw	ra,44(sp)
 505699c:	df000a17 	ldw	fp,40(sp)
 50569a0:	ddc00917 	ldw	r23,36(sp)
 50569a4:	dd800817 	ldw	r22,32(sp)
 50569a8:	dd400717 	ldw	r21,28(sp)
 50569ac:	dd000617 	ldw	r20,24(sp)
 50569b0:	dcc00517 	ldw	r19,20(sp)
 50569b4:	dc800417 	ldw	r18,16(sp)
 50569b8:	dc400317 	ldw	r17,12(sp)
 50569bc:	dc000217 	ldw	r16,8(sp)
 50569c0:	dec00c04 	addi	sp,sp,48
 50569c4:	f800283a 	ret
 50569c8:	800b883a 	mov	r5,r16
 50569cc:	a809883a 	mov	r4,r21
 50569d0:	50544880 	call	5054488 <__swsetup_r>
 50569d4:	1000eb1e 	bne	r2,zero,5056d84 <__sfvwrite_r+0x4a4>
 50569d8:	80c0030b 	ldhu	r3,12(r16)
 50569dc:	a4400017 	ldw	r17,0(r20)
 50569e0:	1880008c 	andi	r2,r3,2
 50569e4:	103fd61e 	bne	r2,zero,5056940 <_gp+0xfffeb518>
 50569e8:	1880004c 	andi	r2,r3,1
 50569ec:	10003f1e 	bne	r2,zero,5056aec <__sfvwrite_r+0x20c>
 50569f0:	0039883a 	mov	fp,zero
 50569f4:	0025883a 	mov	r18,zero
 50569f8:	90001a26 	beq	r18,zero,5056a64 <__sfvwrite_r+0x184>
 50569fc:	1880800c 	andi	r2,r3,512
 5056a00:	84c00217 	ldw	r19,8(r16)
 5056a04:	10002126 	beq	r2,zero,5056a8c <__sfvwrite_r+0x1ac>
 5056a08:	982f883a 	mov	r23,r19
 5056a0c:	94c09336 	bltu	r18,r19,5056c5c <__sfvwrite_r+0x37c>
 5056a10:	1881200c 	andi	r2,r3,1152
 5056a14:	10009e1e 	bne	r2,zero,5056c90 <__sfvwrite_r+0x3b0>
 5056a18:	81000017 	ldw	r4,0(r16)
 5056a1c:	b80d883a 	mov	r6,r23
 5056a20:	e00b883a 	mov	r5,fp
 5056a24:	50572a00 	call	50572a0 <memmove>
 5056a28:	80c00217 	ldw	r3,8(r16)
 5056a2c:	81000017 	ldw	r4,0(r16)
 5056a30:	9005883a 	mov	r2,r18
 5056a34:	1ce7c83a 	sub	r19,r3,r19
 5056a38:	25cf883a 	add	r7,r4,r23
 5056a3c:	84c00215 	stw	r19,8(r16)
 5056a40:	81c00015 	stw	r7,0(r16)
 5056a44:	a0c00217 	ldw	r3,8(r20)
 5056a48:	e0b9883a 	add	fp,fp,r2
 5056a4c:	90a5c83a 	sub	r18,r18,r2
 5056a50:	18a7c83a 	sub	r19,r3,r2
 5056a54:	a4c00215 	stw	r19,8(r20)
 5056a58:	983fce26 	beq	r19,zero,5056994 <_gp+0xfffeb56c>
 5056a5c:	80c0030b 	ldhu	r3,12(r16)
 5056a60:	903fe61e 	bne	r18,zero,50569fc <_gp+0xfffeb5d4>
 5056a64:	8f000017 	ldw	fp,0(r17)
 5056a68:	8c800117 	ldw	r18,4(r17)
 5056a6c:	8c400204 	addi	r17,r17,8
 5056a70:	003fe106 	br	50569f8 <_gp+0xfffeb5d0>
 5056a74:	8cc00017 	ldw	r19,0(r17)
 5056a78:	8c800117 	ldw	r18,4(r17)
 5056a7c:	8c400204 	addi	r17,r17,8
 5056a80:	003fb306 	br	5056950 <_gp+0xfffeb528>
 5056a84:	0005883a 	mov	r2,zero
 5056a88:	f800283a 	ret
 5056a8c:	81000017 	ldw	r4,0(r16)
 5056a90:	80800417 	ldw	r2,16(r16)
 5056a94:	11005736 	bltu	r2,r4,5056bf4 <__sfvwrite_r+0x314>
 5056a98:	85c00517 	ldw	r23,20(r16)
 5056a9c:	95c05536 	bltu	r18,r23,5056bf4 <__sfvwrite_r+0x314>
 5056aa0:	00a00034 	movhi	r2,32768
 5056aa4:	10bfffc4 	addi	r2,r2,-1
 5056aa8:	9009883a 	mov	r4,r18
 5056aac:	1480012e 	bgeu	r2,r18,5056ab4 <__sfvwrite_r+0x1d4>
 5056ab0:	1009883a 	mov	r4,r2
 5056ab4:	b80b883a 	mov	r5,r23
 5056ab8:	504b2f40 	call	504b2f4 <__divsi3>
 5056abc:	15cf383a 	mul	r7,r2,r23
 5056ac0:	81400717 	ldw	r5,28(r16)
 5056ac4:	80800917 	ldw	r2,36(r16)
 5056ac8:	e00d883a 	mov	r6,fp
 5056acc:	a809883a 	mov	r4,r21
 5056ad0:	103ee83a 	callr	r2
 5056ad4:	00bfdb16 	blt	zero,r2,5056a44 <_gp+0xfffeb61c>
 5056ad8:	8080030b 	ldhu	r2,12(r16)
 5056adc:	10801014 	ori	r2,r2,64
 5056ae0:	8080030d 	sth	r2,12(r16)
 5056ae4:	00bfffc4 	movi	r2,-1
 5056ae8:	003fab06 	br	5056998 <_gp+0xfffeb570>
 5056aec:	0027883a 	mov	r19,zero
 5056af0:	0011883a 	mov	r8,zero
 5056af4:	0039883a 	mov	fp,zero
 5056af8:	0025883a 	mov	r18,zero
 5056afc:	90001f26 	beq	r18,zero,5056b7c <__sfvwrite_r+0x29c>
 5056b00:	40005a26 	beq	r8,zero,5056c6c <__sfvwrite_r+0x38c>
 5056b04:	982d883a 	mov	r22,r19
 5056b08:	94c0012e 	bgeu	r18,r19,5056b10 <__sfvwrite_r+0x230>
 5056b0c:	902d883a 	mov	r22,r18
 5056b10:	81000017 	ldw	r4,0(r16)
 5056b14:	80800417 	ldw	r2,16(r16)
 5056b18:	b02f883a 	mov	r23,r22
 5056b1c:	81c00517 	ldw	r7,20(r16)
 5056b20:	1100032e 	bgeu	r2,r4,5056b30 <__sfvwrite_r+0x250>
 5056b24:	80c00217 	ldw	r3,8(r16)
 5056b28:	38c7883a 	add	r3,r7,r3
 5056b2c:	1d801816 	blt	r3,r22,5056b90 <__sfvwrite_r+0x2b0>
 5056b30:	b1c03e16 	blt	r22,r7,5056c2c <__sfvwrite_r+0x34c>
 5056b34:	80800917 	ldw	r2,36(r16)
 5056b38:	81400717 	ldw	r5,28(r16)
 5056b3c:	e00d883a 	mov	r6,fp
 5056b40:	da000115 	stw	r8,4(sp)
 5056b44:	a809883a 	mov	r4,r21
 5056b48:	103ee83a 	callr	r2
 5056b4c:	102f883a 	mov	r23,r2
 5056b50:	da000117 	ldw	r8,4(sp)
 5056b54:	00bfe00e 	bge	zero,r2,5056ad8 <_gp+0xfffeb6b0>
 5056b58:	9de7c83a 	sub	r19,r19,r23
 5056b5c:	98001f26 	beq	r19,zero,5056bdc <__sfvwrite_r+0x2fc>
 5056b60:	a0800217 	ldw	r2,8(r20)
 5056b64:	e5f9883a 	add	fp,fp,r23
 5056b68:	95e5c83a 	sub	r18,r18,r23
 5056b6c:	15efc83a 	sub	r23,r2,r23
 5056b70:	a5c00215 	stw	r23,8(r20)
 5056b74:	b83f8726 	beq	r23,zero,5056994 <_gp+0xfffeb56c>
 5056b78:	903fe11e 	bne	r18,zero,5056b00 <_gp+0xfffeb6d8>
 5056b7c:	8f000017 	ldw	fp,0(r17)
 5056b80:	8c800117 	ldw	r18,4(r17)
 5056b84:	0011883a 	mov	r8,zero
 5056b88:	8c400204 	addi	r17,r17,8
 5056b8c:	003fdb06 	br	5056afc <_gp+0xfffeb6d4>
 5056b90:	180d883a 	mov	r6,r3
 5056b94:	e00b883a 	mov	r5,fp
 5056b98:	da000115 	stw	r8,4(sp)
 5056b9c:	d8c00015 	stw	r3,0(sp)
 5056ba0:	50572a00 	call	50572a0 <memmove>
 5056ba4:	d8c00017 	ldw	r3,0(sp)
 5056ba8:	80800017 	ldw	r2,0(r16)
 5056bac:	800b883a 	mov	r5,r16
 5056bb0:	a809883a 	mov	r4,r21
 5056bb4:	10c5883a 	add	r2,r2,r3
 5056bb8:	80800015 	stw	r2,0(r16)
 5056bbc:	d8c00015 	stw	r3,0(sp)
 5056bc0:	50560800 	call	5056080 <_fflush_r>
 5056bc4:	d8c00017 	ldw	r3,0(sp)
 5056bc8:	da000117 	ldw	r8,4(sp)
 5056bcc:	103fc21e 	bne	r2,zero,5056ad8 <_gp+0xfffeb6b0>
 5056bd0:	182f883a 	mov	r23,r3
 5056bd4:	9de7c83a 	sub	r19,r19,r23
 5056bd8:	983fe11e 	bne	r19,zero,5056b60 <_gp+0xfffeb738>
 5056bdc:	800b883a 	mov	r5,r16
 5056be0:	a809883a 	mov	r4,r21
 5056be4:	50560800 	call	5056080 <_fflush_r>
 5056be8:	103fbb1e 	bne	r2,zero,5056ad8 <_gp+0xfffeb6b0>
 5056bec:	0011883a 	mov	r8,zero
 5056bf0:	003fdb06 	br	5056b60 <_gp+0xfffeb738>
 5056bf4:	94c0012e 	bgeu	r18,r19,5056bfc <__sfvwrite_r+0x31c>
 5056bf8:	9027883a 	mov	r19,r18
 5056bfc:	980d883a 	mov	r6,r19
 5056c00:	e00b883a 	mov	r5,fp
 5056c04:	50572a00 	call	50572a0 <memmove>
 5056c08:	80800217 	ldw	r2,8(r16)
 5056c0c:	80c00017 	ldw	r3,0(r16)
 5056c10:	14c5c83a 	sub	r2,r2,r19
 5056c14:	1cc7883a 	add	r3,r3,r19
 5056c18:	80800215 	stw	r2,8(r16)
 5056c1c:	80c00015 	stw	r3,0(r16)
 5056c20:	10004326 	beq	r2,zero,5056d30 <__sfvwrite_r+0x450>
 5056c24:	9805883a 	mov	r2,r19
 5056c28:	003f8606 	br	5056a44 <_gp+0xfffeb61c>
 5056c2c:	b00d883a 	mov	r6,r22
 5056c30:	e00b883a 	mov	r5,fp
 5056c34:	da000115 	stw	r8,4(sp)
 5056c38:	50572a00 	call	50572a0 <memmove>
 5056c3c:	80800217 	ldw	r2,8(r16)
 5056c40:	80c00017 	ldw	r3,0(r16)
 5056c44:	da000117 	ldw	r8,4(sp)
 5056c48:	1585c83a 	sub	r2,r2,r22
 5056c4c:	1dad883a 	add	r22,r3,r22
 5056c50:	80800215 	stw	r2,8(r16)
 5056c54:	85800015 	stw	r22,0(r16)
 5056c58:	003fbf06 	br	5056b58 <_gp+0xfffeb730>
 5056c5c:	81000017 	ldw	r4,0(r16)
 5056c60:	9027883a 	mov	r19,r18
 5056c64:	902f883a 	mov	r23,r18
 5056c68:	003f6c06 	br	5056a1c <_gp+0xfffeb5f4>
 5056c6c:	900d883a 	mov	r6,r18
 5056c70:	01400284 	movi	r5,10
 5056c74:	e009883a 	mov	r4,fp
 5056c78:	50571bc0 	call	50571bc <memchr>
 5056c7c:	10003e26 	beq	r2,zero,5056d78 <__sfvwrite_r+0x498>
 5056c80:	10800044 	addi	r2,r2,1
 5056c84:	1727c83a 	sub	r19,r2,fp
 5056c88:	02000044 	movi	r8,1
 5056c8c:	003f9d06 	br	5056b04 <_gp+0xfffeb6dc>
 5056c90:	80800517 	ldw	r2,20(r16)
 5056c94:	81400417 	ldw	r5,16(r16)
 5056c98:	81c00017 	ldw	r7,0(r16)
 5056c9c:	10a7883a 	add	r19,r2,r2
 5056ca0:	9885883a 	add	r2,r19,r2
 5056ca4:	1026d7fa 	srli	r19,r2,31
 5056ca8:	396dc83a 	sub	r22,r7,r5
 5056cac:	b1000044 	addi	r4,r22,1
 5056cb0:	9885883a 	add	r2,r19,r2
 5056cb4:	1027d07a 	srai	r19,r2,1
 5056cb8:	2485883a 	add	r2,r4,r18
 5056cbc:	980d883a 	mov	r6,r19
 5056cc0:	9880022e 	bgeu	r19,r2,5056ccc <__sfvwrite_r+0x3ec>
 5056cc4:	1027883a 	mov	r19,r2
 5056cc8:	100d883a 	mov	r6,r2
 5056ccc:	18c1000c 	andi	r3,r3,1024
 5056cd0:	18001c26 	beq	r3,zero,5056d44 <__sfvwrite_r+0x464>
 5056cd4:	300b883a 	mov	r5,r6
 5056cd8:	a809883a 	mov	r4,r21
 5056cdc:	504f0c00 	call	504f0c0 <_malloc_r>
 5056ce0:	102f883a 	mov	r23,r2
 5056ce4:	10002926 	beq	r2,zero,5056d8c <__sfvwrite_r+0x4ac>
 5056ce8:	81400417 	ldw	r5,16(r16)
 5056cec:	b00d883a 	mov	r6,r22
 5056cf0:	1009883a 	mov	r4,r2
 5056cf4:	504f8cc0 	call	504f8cc <memcpy>
 5056cf8:	8080030b 	ldhu	r2,12(r16)
 5056cfc:	00fedfc4 	movi	r3,-1153
 5056d00:	10c4703a 	and	r2,r2,r3
 5056d04:	10802014 	ori	r2,r2,128
 5056d08:	8080030d 	sth	r2,12(r16)
 5056d0c:	bd89883a 	add	r4,r23,r22
 5056d10:	9d8fc83a 	sub	r7,r19,r22
 5056d14:	85c00415 	stw	r23,16(r16)
 5056d18:	84c00515 	stw	r19,20(r16)
 5056d1c:	81000015 	stw	r4,0(r16)
 5056d20:	9027883a 	mov	r19,r18
 5056d24:	81c00215 	stw	r7,8(r16)
 5056d28:	902f883a 	mov	r23,r18
 5056d2c:	003f3b06 	br	5056a1c <_gp+0xfffeb5f4>
 5056d30:	800b883a 	mov	r5,r16
 5056d34:	a809883a 	mov	r4,r21
 5056d38:	50560800 	call	5056080 <_fflush_r>
 5056d3c:	103fb926 	beq	r2,zero,5056c24 <_gp+0xfffeb7fc>
 5056d40:	003f6506 	br	5056ad8 <_gp+0xfffeb6b0>
 5056d44:	a809883a 	mov	r4,r21
 5056d48:	50583f80 	call	50583f8 <_realloc_r>
 5056d4c:	102f883a 	mov	r23,r2
 5056d50:	103fee1e 	bne	r2,zero,5056d0c <_gp+0xfffeb8e4>
 5056d54:	81400417 	ldw	r5,16(r16)
 5056d58:	a809883a 	mov	r4,r21
 5056d5c:	50565d00 	call	50565d0 <_free_r>
 5056d60:	8080030b 	ldhu	r2,12(r16)
 5056d64:	00ffdfc4 	movi	r3,-129
 5056d68:	1884703a 	and	r2,r3,r2
 5056d6c:	00c00304 	movi	r3,12
 5056d70:	a8c00015 	stw	r3,0(r21)
 5056d74:	003f5906 	br	5056adc <_gp+0xfffeb6b4>
 5056d78:	94c00044 	addi	r19,r18,1
 5056d7c:	02000044 	movi	r8,1
 5056d80:	003f6006 	br	5056b04 <_gp+0xfffeb6dc>
 5056d84:	00bfffc4 	movi	r2,-1
 5056d88:	003f0306 	br	5056998 <_gp+0xfffeb570>
 5056d8c:	00800304 	movi	r2,12
 5056d90:	a8800015 	stw	r2,0(r21)
 5056d94:	8080030b 	ldhu	r2,12(r16)
 5056d98:	003f5006 	br	5056adc <_gp+0xfffeb6b4>

05056d9c <_fwalk>:
 5056d9c:	defff704 	addi	sp,sp,-36
 5056da0:	dd000415 	stw	r20,16(sp)
 5056da4:	dfc00815 	stw	ra,32(sp)
 5056da8:	ddc00715 	stw	r23,28(sp)
 5056dac:	dd800615 	stw	r22,24(sp)
 5056db0:	dd400515 	stw	r21,20(sp)
 5056db4:	dcc00315 	stw	r19,12(sp)
 5056db8:	dc800215 	stw	r18,8(sp)
 5056dbc:	dc400115 	stw	r17,4(sp)
 5056dc0:	dc000015 	stw	r16,0(sp)
 5056dc4:	2500b804 	addi	r20,r4,736
 5056dc8:	a0002326 	beq	r20,zero,5056e58 <_fwalk+0xbc>
 5056dcc:	282b883a 	mov	r21,r5
 5056dd0:	002f883a 	mov	r23,zero
 5056dd4:	05800044 	movi	r22,1
 5056dd8:	04ffffc4 	movi	r19,-1
 5056ddc:	a4400117 	ldw	r17,4(r20)
 5056de0:	a4800217 	ldw	r18,8(r20)
 5056de4:	8c7fffc4 	addi	r17,r17,-1
 5056de8:	88000d16 	blt	r17,zero,5056e20 <_fwalk+0x84>
 5056dec:	94000304 	addi	r16,r18,12
 5056df0:	94800384 	addi	r18,r18,14
 5056df4:	8080000b 	ldhu	r2,0(r16)
 5056df8:	8c7fffc4 	addi	r17,r17,-1
 5056dfc:	813ffd04 	addi	r4,r16,-12
 5056e00:	b080042e 	bgeu	r22,r2,5056e14 <_fwalk+0x78>
 5056e04:	9080000f 	ldh	r2,0(r18)
 5056e08:	14c00226 	beq	r2,r19,5056e14 <_fwalk+0x78>
 5056e0c:	a83ee83a 	callr	r21
 5056e10:	b8aeb03a 	or	r23,r23,r2
 5056e14:	84001a04 	addi	r16,r16,104
 5056e18:	94801a04 	addi	r18,r18,104
 5056e1c:	8cfff51e 	bne	r17,r19,5056df4 <_gp+0xfffeb9cc>
 5056e20:	a5000017 	ldw	r20,0(r20)
 5056e24:	a03fed1e 	bne	r20,zero,5056ddc <_gp+0xfffeb9b4>
 5056e28:	b805883a 	mov	r2,r23
 5056e2c:	dfc00817 	ldw	ra,32(sp)
 5056e30:	ddc00717 	ldw	r23,28(sp)
 5056e34:	dd800617 	ldw	r22,24(sp)
 5056e38:	dd400517 	ldw	r21,20(sp)
 5056e3c:	dd000417 	ldw	r20,16(sp)
 5056e40:	dcc00317 	ldw	r19,12(sp)
 5056e44:	dc800217 	ldw	r18,8(sp)
 5056e48:	dc400117 	ldw	r17,4(sp)
 5056e4c:	dc000017 	ldw	r16,0(sp)
 5056e50:	dec00904 	addi	sp,sp,36
 5056e54:	f800283a 	ret
 5056e58:	002f883a 	mov	r23,zero
 5056e5c:	003ff206 	br	5056e28 <_gp+0xfffeba00>

05056e60 <_fwalk_reent>:
 5056e60:	defff704 	addi	sp,sp,-36
 5056e64:	dd000415 	stw	r20,16(sp)
 5056e68:	dfc00815 	stw	ra,32(sp)
 5056e6c:	ddc00715 	stw	r23,28(sp)
 5056e70:	dd800615 	stw	r22,24(sp)
 5056e74:	dd400515 	stw	r21,20(sp)
 5056e78:	dcc00315 	stw	r19,12(sp)
 5056e7c:	dc800215 	stw	r18,8(sp)
 5056e80:	dc400115 	stw	r17,4(sp)
 5056e84:	dc000015 	stw	r16,0(sp)
 5056e88:	2500b804 	addi	r20,r4,736
 5056e8c:	a0002326 	beq	r20,zero,5056f1c <_fwalk_reent+0xbc>
 5056e90:	282b883a 	mov	r21,r5
 5056e94:	2027883a 	mov	r19,r4
 5056e98:	002f883a 	mov	r23,zero
 5056e9c:	05800044 	movi	r22,1
 5056ea0:	04bfffc4 	movi	r18,-1
 5056ea4:	a4400117 	ldw	r17,4(r20)
 5056ea8:	a4000217 	ldw	r16,8(r20)
 5056eac:	8c7fffc4 	addi	r17,r17,-1
 5056eb0:	88000c16 	blt	r17,zero,5056ee4 <_fwalk_reent+0x84>
 5056eb4:	84000304 	addi	r16,r16,12
 5056eb8:	8080000b 	ldhu	r2,0(r16)
 5056ebc:	8c7fffc4 	addi	r17,r17,-1
 5056ec0:	817ffd04 	addi	r5,r16,-12
 5056ec4:	b080052e 	bgeu	r22,r2,5056edc <_fwalk_reent+0x7c>
 5056ec8:	8080008f 	ldh	r2,2(r16)
 5056ecc:	9809883a 	mov	r4,r19
 5056ed0:	14800226 	beq	r2,r18,5056edc <_fwalk_reent+0x7c>
 5056ed4:	a83ee83a 	callr	r21
 5056ed8:	b8aeb03a 	or	r23,r23,r2
 5056edc:	84001a04 	addi	r16,r16,104
 5056ee0:	8cbff51e 	bne	r17,r18,5056eb8 <_gp+0xfffeba90>
 5056ee4:	a5000017 	ldw	r20,0(r20)
 5056ee8:	a03fee1e 	bne	r20,zero,5056ea4 <_gp+0xfffeba7c>
 5056eec:	b805883a 	mov	r2,r23
 5056ef0:	dfc00817 	ldw	ra,32(sp)
 5056ef4:	ddc00717 	ldw	r23,28(sp)
 5056ef8:	dd800617 	ldw	r22,24(sp)
 5056efc:	dd400517 	ldw	r21,20(sp)
 5056f00:	dd000417 	ldw	r20,16(sp)
 5056f04:	dcc00317 	ldw	r19,12(sp)
 5056f08:	dc800217 	ldw	r18,8(sp)
 5056f0c:	dc400117 	ldw	r17,4(sp)
 5056f10:	dc000017 	ldw	r16,0(sp)
 5056f14:	dec00904 	addi	sp,sp,36
 5056f18:	f800283a 	ret
 5056f1c:	002f883a 	mov	r23,zero
 5056f20:	003ff206 	br	5056eec <_gp+0xfffebac4>

05056f24 <_setlocale_r>:
 5056f24:	30001b26 	beq	r6,zero,5056f94 <_setlocale_r+0x70>
 5056f28:	014141b4 	movhi	r5,1286
 5056f2c:	defffe04 	addi	sp,sp,-8
 5056f30:	2944aa04 	addi	r5,r5,4776
 5056f34:	3009883a 	mov	r4,r6
 5056f38:	dc000015 	stw	r16,0(sp)
 5056f3c:	dfc00115 	stw	ra,4(sp)
 5056f40:	3021883a 	mov	r16,r6
 5056f44:	5058b0c0 	call	5058b0c <strcmp>
 5056f48:	1000061e 	bne	r2,zero,5056f64 <_setlocale_r+0x40>
 5056f4c:	008141b4 	movhi	r2,1286
 5056f50:	1084a904 	addi	r2,r2,4772
 5056f54:	dfc00117 	ldw	ra,4(sp)
 5056f58:	dc000017 	ldw	r16,0(sp)
 5056f5c:	dec00204 	addi	sp,sp,8
 5056f60:	f800283a 	ret
 5056f64:	014141b4 	movhi	r5,1286
 5056f68:	2944a904 	addi	r5,r5,4772
 5056f6c:	8009883a 	mov	r4,r16
 5056f70:	5058b0c0 	call	5058b0c <strcmp>
 5056f74:	103ff526 	beq	r2,zero,5056f4c <_gp+0xfffebb24>
 5056f78:	014141b4 	movhi	r5,1286
 5056f7c:	29448c04 	addi	r5,r5,4656
 5056f80:	8009883a 	mov	r4,r16
 5056f84:	5058b0c0 	call	5058b0c <strcmp>
 5056f88:	103ff026 	beq	r2,zero,5056f4c <_gp+0xfffebb24>
 5056f8c:	0005883a 	mov	r2,zero
 5056f90:	003ff006 	br	5056f54 <_gp+0xfffebb2c>
 5056f94:	008141b4 	movhi	r2,1286
 5056f98:	1084a904 	addi	r2,r2,4772
 5056f9c:	f800283a 	ret

05056fa0 <__locale_charset>:
 5056fa0:	008141b4 	movhi	r2,1286
 5056fa4:	10884104 	addi	r2,r2,8452
 5056fa8:	f800283a 	ret

05056fac <__locale_mb_cur_max>:
 5056fac:	008141b4 	movhi	r2,1286
 5056fb0:	108d1004 	addi	r2,r2,13376
 5056fb4:	10800017 	ldw	r2,0(r2)
 5056fb8:	f800283a 	ret

05056fbc <__locale_msgcharset>:
 5056fbc:	008141b4 	movhi	r2,1286
 5056fc0:	10883904 	addi	r2,r2,8420
 5056fc4:	f800283a 	ret

05056fc8 <__locale_cjk_lang>:
 5056fc8:	0005883a 	mov	r2,zero
 5056fcc:	f800283a 	ret

05056fd0 <_localeconv_r>:
 5056fd0:	008141b4 	movhi	r2,1286
 5056fd4:	10884904 	addi	r2,r2,8484
 5056fd8:	f800283a 	ret

05056fdc <setlocale>:
 5056fdc:	008141b4 	movhi	r2,1286
 5056fe0:	108d0f04 	addi	r2,r2,13372
 5056fe4:	280d883a 	mov	r6,r5
 5056fe8:	200b883a 	mov	r5,r4
 5056fec:	11000017 	ldw	r4,0(r2)
 5056ff0:	5056f241 	jmpi	5056f24 <_setlocale_r>

05056ff4 <localeconv>:
 5056ff4:	008141b4 	movhi	r2,1286
 5056ff8:	10884904 	addi	r2,r2,8484
 5056ffc:	f800283a 	ret

05057000 <__smakebuf_r>:
 5057000:	2880030b 	ldhu	r2,12(r5)
 5057004:	10c0008c 	andi	r3,r2,2
 5057008:	1800411e 	bne	r3,zero,5057110 <__smakebuf_r+0x110>
 505700c:	deffec04 	addi	sp,sp,-80
 5057010:	dc000f15 	stw	r16,60(sp)
 5057014:	2821883a 	mov	r16,r5
 5057018:	2940038f 	ldh	r5,14(r5)
 505701c:	dc401015 	stw	r17,64(sp)
 5057020:	dfc01315 	stw	ra,76(sp)
 5057024:	dcc01215 	stw	r19,72(sp)
 5057028:	dc801115 	stw	r18,68(sp)
 505702c:	2023883a 	mov	r17,r4
 5057030:	28001c16 	blt	r5,zero,50570a4 <__smakebuf_r+0xa4>
 5057034:	d80d883a 	mov	r6,sp
 5057038:	505bac00 	call	505bac0 <_fstat_r>
 505703c:	10001816 	blt	r2,zero,50570a0 <__smakebuf_r+0xa0>
 5057040:	d8800117 	ldw	r2,4(sp)
 5057044:	00e00014 	movui	r3,32768
 5057048:	10bc000c 	andi	r2,r2,61440
 505704c:	14c80020 	cmpeqi	r19,r2,8192
 5057050:	10c03726 	beq	r2,r3,5057130 <__smakebuf_r+0x130>
 5057054:	80c0030b 	ldhu	r3,12(r16)
 5057058:	18c20014 	ori	r3,r3,2048
 505705c:	80c0030d 	sth	r3,12(r16)
 5057060:	00c80004 	movi	r3,8192
 5057064:	10c0521e 	bne	r2,r3,50571b0 <__smakebuf_r+0x1b0>
 5057068:	8140038f 	ldh	r5,14(r16)
 505706c:	8809883a 	mov	r4,r17
 5057070:	505bb1c0 	call	505bb1c <_isatty_r>
 5057074:	10004c26 	beq	r2,zero,50571a8 <__smakebuf_r+0x1a8>
 5057078:	8080030b 	ldhu	r2,12(r16)
 505707c:	80c010c4 	addi	r3,r16,67
 5057080:	80c00015 	stw	r3,0(r16)
 5057084:	10800054 	ori	r2,r2,1
 5057088:	8080030d 	sth	r2,12(r16)
 505708c:	00800044 	movi	r2,1
 5057090:	80c00415 	stw	r3,16(r16)
 5057094:	80800515 	stw	r2,20(r16)
 5057098:	04810004 	movi	r18,1024
 505709c:	00000706 	br	50570bc <__smakebuf_r+0xbc>
 50570a0:	8080030b 	ldhu	r2,12(r16)
 50570a4:	10c0200c 	andi	r3,r2,128
 50570a8:	18001f1e 	bne	r3,zero,5057128 <__smakebuf_r+0x128>
 50570ac:	04810004 	movi	r18,1024
 50570b0:	10820014 	ori	r2,r2,2048
 50570b4:	8080030d 	sth	r2,12(r16)
 50570b8:	0027883a 	mov	r19,zero
 50570bc:	900b883a 	mov	r5,r18
 50570c0:	8809883a 	mov	r4,r17
 50570c4:	504f0c00 	call	504f0c0 <_malloc_r>
 50570c8:	10002c26 	beq	r2,zero,505717c <__smakebuf_r+0x17c>
 50570cc:	80c0030b 	ldhu	r3,12(r16)
 50570d0:	01014174 	movhi	r4,1285
 50570d4:	21184504 	addi	r4,r4,24852
 50570d8:	89000f15 	stw	r4,60(r17)
 50570dc:	18c02014 	ori	r3,r3,128
 50570e0:	80c0030d 	sth	r3,12(r16)
 50570e4:	80800015 	stw	r2,0(r16)
 50570e8:	80800415 	stw	r2,16(r16)
 50570ec:	84800515 	stw	r18,20(r16)
 50570f0:	98001a1e 	bne	r19,zero,505715c <__smakebuf_r+0x15c>
 50570f4:	dfc01317 	ldw	ra,76(sp)
 50570f8:	dcc01217 	ldw	r19,72(sp)
 50570fc:	dc801117 	ldw	r18,68(sp)
 5057100:	dc401017 	ldw	r17,64(sp)
 5057104:	dc000f17 	ldw	r16,60(sp)
 5057108:	dec01404 	addi	sp,sp,80
 505710c:	f800283a 	ret
 5057110:	288010c4 	addi	r2,r5,67
 5057114:	28800015 	stw	r2,0(r5)
 5057118:	28800415 	stw	r2,16(r5)
 505711c:	00800044 	movi	r2,1
 5057120:	28800515 	stw	r2,20(r5)
 5057124:	f800283a 	ret
 5057128:	04801004 	movi	r18,64
 505712c:	003fe006 	br	50570b0 <_gp+0xfffebc88>
 5057130:	81000a17 	ldw	r4,40(r16)
 5057134:	00c141b4 	movhi	r3,1286
 5057138:	18e2aa04 	addi	r3,r3,-30040
 505713c:	20ffc51e 	bne	r4,r3,5057054 <_gp+0xfffebc2c>
 5057140:	8080030b 	ldhu	r2,12(r16)
 5057144:	04810004 	movi	r18,1024
 5057148:	84801315 	stw	r18,76(r16)
 505714c:	1484b03a 	or	r2,r2,r18
 5057150:	8080030d 	sth	r2,12(r16)
 5057154:	0027883a 	mov	r19,zero
 5057158:	003fd806 	br	50570bc <_gp+0xfffebc94>
 505715c:	8140038f 	ldh	r5,14(r16)
 5057160:	8809883a 	mov	r4,r17
 5057164:	505bb1c0 	call	505bb1c <_isatty_r>
 5057168:	103fe226 	beq	r2,zero,50570f4 <_gp+0xfffebccc>
 505716c:	8080030b 	ldhu	r2,12(r16)
 5057170:	10800054 	ori	r2,r2,1
 5057174:	8080030d 	sth	r2,12(r16)
 5057178:	003fde06 	br	50570f4 <_gp+0xfffebccc>
 505717c:	8080030b 	ldhu	r2,12(r16)
 5057180:	10c0800c 	andi	r3,r2,512
 5057184:	183fdb1e 	bne	r3,zero,50570f4 <_gp+0xfffebccc>
 5057188:	10800094 	ori	r2,r2,2
 505718c:	80c010c4 	addi	r3,r16,67
 5057190:	8080030d 	sth	r2,12(r16)
 5057194:	00800044 	movi	r2,1
 5057198:	80c00015 	stw	r3,0(r16)
 505719c:	80c00415 	stw	r3,16(r16)
 50571a0:	80800515 	stw	r2,20(r16)
 50571a4:	003fd306 	br	50570f4 <_gp+0xfffebccc>
 50571a8:	04810004 	movi	r18,1024
 50571ac:	003fc306 	br	50570bc <_gp+0xfffebc94>
 50571b0:	0027883a 	mov	r19,zero
 50571b4:	04810004 	movi	r18,1024
 50571b8:	003fc006 	br	50570bc <_gp+0xfffebc94>

050571bc <memchr>:
 50571bc:	208000cc 	andi	r2,r4,3
 50571c0:	280f883a 	mov	r7,r5
 50571c4:	10003426 	beq	r2,zero,5057298 <memchr+0xdc>
 50571c8:	30bfffc4 	addi	r2,r6,-1
 50571cc:	30001a26 	beq	r6,zero,5057238 <memchr+0x7c>
 50571d0:	20c00003 	ldbu	r3,0(r4)
 50571d4:	29803fcc 	andi	r6,r5,255
 50571d8:	30c0051e 	bne	r6,r3,50571f0 <memchr+0x34>
 50571dc:	00001806 	br	5057240 <memchr+0x84>
 50571e0:	10001526 	beq	r2,zero,5057238 <memchr+0x7c>
 50571e4:	20c00003 	ldbu	r3,0(r4)
 50571e8:	10bfffc4 	addi	r2,r2,-1
 50571ec:	30c01426 	beq	r6,r3,5057240 <memchr+0x84>
 50571f0:	21000044 	addi	r4,r4,1
 50571f4:	20c000cc 	andi	r3,r4,3
 50571f8:	183ff91e 	bne	r3,zero,50571e0 <_gp+0xfffebdb8>
 50571fc:	020000c4 	movi	r8,3
 5057200:	40801136 	bltu	r8,r2,5057248 <memchr+0x8c>
 5057204:	10000c26 	beq	r2,zero,5057238 <memchr+0x7c>
 5057208:	20c00003 	ldbu	r3,0(r4)
 505720c:	29403fcc 	andi	r5,r5,255
 5057210:	28c00b26 	beq	r5,r3,5057240 <memchr+0x84>
 5057214:	20c00044 	addi	r3,r4,1
 5057218:	39803fcc 	andi	r6,r7,255
 505721c:	2089883a 	add	r4,r4,r2
 5057220:	00000306 	br	5057230 <memchr+0x74>
 5057224:	18c00044 	addi	r3,r3,1
 5057228:	197fffc3 	ldbu	r5,-1(r3)
 505722c:	31400526 	beq	r6,r5,5057244 <memchr+0x88>
 5057230:	1805883a 	mov	r2,r3
 5057234:	20fffb1e 	bne	r4,r3,5057224 <_gp+0xfffebdfc>
 5057238:	0005883a 	mov	r2,zero
 505723c:	f800283a 	ret
 5057240:	2005883a 	mov	r2,r4
 5057244:	f800283a 	ret
 5057248:	28c03fcc 	andi	r3,r5,255
 505724c:	1812923a 	slli	r9,r3,8
 5057250:	02ffbff4 	movhi	r11,65279
 5057254:	02a02074 	movhi	r10,32897
 5057258:	48d2b03a 	or	r9,r9,r3
 505725c:	4806943a 	slli	r3,r9,16
 5057260:	5affbfc4 	addi	r11,r11,-257
 5057264:	52a02004 	addi	r10,r10,-32640
 5057268:	48d2b03a 	or	r9,r9,r3
 505726c:	20c00017 	ldw	r3,0(r4)
 5057270:	48c6f03a 	xor	r3,r9,r3
 5057274:	1acd883a 	add	r6,r3,r11
 5057278:	00c6303a 	nor	r3,zero,r3
 505727c:	30c6703a 	and	r3,r6,r3
 5057280:	1a86703a 	and	r3,r3,r10
 5057284:	183fe01e 	bne	r3,zero,5057208 <_gp+0xfffebde0>
 5057288:	10bfff04 	addi	r2,r2,-4
 505728c:	21000104 	addi	r4,r4,4
 5057290:	40bff636 	bltu	r8,r2,505726c <_gp+0xfffebe44>
 5057294:	003fdb06 	br	5057204 <_gp+0xfffebddc>
 5057298:	3005883a 	mov	r2,r6
 505729c:	003fd706 	br	50571fc <_gp+0xfffebdd4>

050572a0 <memmove>:
 50572a0:	2005883a 	mov	r2,r4
 50572a4:	29000b2e 	bgeu	r5,r4,50572d4 <memmove+0x34>
 50572a8:	298f883a 	add	r7,r5,r6
 50572ac:	21c0092e 	bgeu	r4,r7,50572d4 <memmove+0x34>
 50572b0:	2187883a 	add	r3,r4,r6
 50572b4:	198bc83a 	sub	r5,r3,r6
 50572b8:	30004826 	beq	r6,zero,50573dc <memmove+0x13c>
 50572bc:	39ffffc4 	addi	r7,r7,-1
 50572c0:	39000003 	ldbu	r4,0(r7)
 50572c4:	18ffffc4 	addi	r3,r3,-1
 50572c8:	19000005 	stb	r4,0(r3)
 50572cc:	28fffb1e 	bne	r5,r3,50572bc <_gp+0xfffebe94>
 50572d0:	f800283a 	ret
 50572d4:	00c003c4 	movi	r3,15
 50572d8:	1980412e 	bgeu	r3,r6,50573e0 <memmove+0x140>
 50572dc:	2886b03a 	or	r3,r5,r2
 50572e0:	18c000cc 	andi	r3,r3,3
 50572e4:	1800401e 	bne	r3,zero,50573e8 <memmove+0x148>
 50572e8:	33fffc04 	addi	r15,r6,-16
 50572ec:	781ed13a 	srli	r15,r15,4
 50572f0:	28c00104 	addi	r3,r5,4
 50572f4:	13400104 	addi	r13,r2,4
 50572f8:	781c913a 	slli	r14,r15,4
 50572fc:	2b000204 	addi	r12,r5,8
 5057300:	12c00204 	addi	r11,r2,8
 5057304:	73800504 	addi	r14,r14,20
 5057308:	2a800304 	addi	r10,r5,12
 505730c:	12400304 	addi	r9,r2,12
 5057310:	2b9d883a 	add	r14,r5,r14
 5057314:	2811883a 	mov	r8,r5
 5057318:	100f883a 	mov	r7,r2
 505731c:	41000017 	ldw	r4,0(r8)
 5057320:	39c00404 	addi	r7,r7,16
 5057324:	18c00404 	addi	r3,r3,16
 5057328:	393ffc15 	stw	r4,-16(r7)
 505732c:	193ffc17 	ldw	r4,-16(r3)
 5057330:	6b400404 	addi	r13,r13,16
 5057334:	5ac00404 	addi	r11,r11,16
 5057338:	693ffc15 	stw	r4,-16(r13)
 505733c:	61000017 	ldw	r4,0(r12)
 5057340:	4a400404 	addi	r9,r9,16
 5057344:	42000404 	addi	r8,r8,16
 5057348:	593ffc15 	stw	r4,-16(r11)
 505734c:	51000017 	ldw	r4,0(r10)
 5057350:	63000404 	addi	r12,r12,16
 5057354:	52800404 	addi	r10,r10,16
 5057358:	493ffc15 	stw	r4,-16(r9)
 505735c:	1bbfef1e 	bne	r3,r14,505731c <_gp+0xfffebef4>
 5057360:	79000044 	addi	r4,r15,1
 5057364:	2008913a 	slli	r4,r4,4
 5057368:	328003cc 	andi	r10,r6,15
 505736c:	02c000c4 	movi	r11,3
 5057370:	1107883a 	add	r3,r2,r4
 5057374:	290b883a 	add	r5,r5,r4
 5057378:	5a801e2e 	bgeu	r11,r10,50573f4 <memmove+0x154>
 505737c:	1813883a 	mov	r9,r3
 5057380:	2811883a 	mov	r8,r5
 5057384:	500f883a 	mov	r7,r10
 5057388:	41000017 	ldw	r4,0(r8)
 505738c:	4a400104 	addi	r9,r9,4
 5057390:	39ffff04 	addi	r7,r7,-4
 5057394:	493fff15 	stw	r4,-4(r9)
 5057398:	42000104 	addi	r8,r8,4
 505739c:	59fffa36 	bltu	r11,r7,5057388 <_gp+0xfffebf60>
 50573a0:	513fff04 	addi	r4,r10,-4
 50573a4:	2008d0ba 	srli	r4,r4,2
 50573a8:	318000cc 	andi	r6,r6,3
 50573ac:	21000044 	addi	r4,r4,1
 50573b0:	2109883a 	add	r4,r4,r4
 50573b4:	2109883a 	add	r4,r4,r4
 50573b8:	1907883a 	add	r3,r3,r4
 50573bc:	290b883a 	add	r5,r5,r4
 50573c0:	30000b26 	beq	r6,zero,50573f0 <memmove+0x150>
 50573c4:	198d883a 	add	r6,r3,r6
 50573c8:	29c00003 	ldbu	r7,0(r5)
 50573cc:	18c00044 	addi	r3,r3,1
 50573d0:	29400044 	addi	r5,r5,1
 50573d4:	19ffffc5 	stb	r7,-1(r3)
 50573d8:	19bffb1e 	bne	r3,r6,50573c8 <_gp+0xfffebfa0>
 50573dc:	f800283a 	ret
 50573e0:	1007883a 	mov	r3,r2
 50573e4:	003ff606 	br	50573c0 <_gp+0xfffebf98>
 50573e8:	1007883a 	mov	r3,r2
 50573ec:	003ff506 	br	50573c4 <_gp+0xfffebf9c>
 50573f0:	f800283a 	ret
 50573f4:	500d883a 	mov	r6,r10
 50573f8:	003ff106 	br	50573c0 <_gp+0xfffebf98>

050573fc <_Balloc>:
 50573fc:	20801317 	ldw	r2,76(r4)
 5057400:	defffc04 	addi	sp,sp,-16
 5057404:	dc400115 	stw	r17,4(sp)
 5057408:	dc000015 	stw	r16,0(sp)
 505740c:	dfc00315 	stw	ra,12(sp)
 5057410:	dc800215 	stw	r18,8(sp)
 5057414:	2023883a 	mov	r17,r4
 5057418:	2821883a 	mov	r16,r5
 505741c:	10000f26 	beq	r2,zero,505745c <_Balloc+0x60>
 5057420:	8407883a 	add	r3,r16,r16
 5057424:	18c7883a 	add	r3,r3,r3
 5057428:	10c7883a 	add	r3,r2,r3
 505742c:	18800017 	ldw	r2,0(r3)
 5057430:	10001126 	beq	r2,zero,5057478 <_Balloc+0x7c>
 5057434:	11000017 	ldw	r4,0(r2)
 5057438:	19000015 	stw	r4,0(r3)
 505743c:	10000415 	stw	zero,16(r2)
 5057440:	10000315 	stw	zero,12(r2)
 5057444:	dfc00317 	ldw	ra,12(sp)
 5057448:	dc800217 	ldw	r18,8(sp)
 505744c:	dc400117 	ldw	r17,4(sp)
 5057450:	dc000017 	ldw	r16,0(sp)
 5057454:	dec00404 	addi	sp,sp,16
 5057458:	f800283a 	ret
 505745c:	01800844 	movi	r6,33
 5057460:	01400104 	movi	r5,4
 5057464:	505b6f00 	call	505b6f0 <_calloc_r>
 5057468:	88801315 	stw	r2,76(r17)
 505746c:	103fec1e 	bne	r2,zero,5057420 <_gp+0xfffebff8>
 5057470:	0005883a 	mov	r2,zero
 5057474:	003ff306 	br	5057444 <_gp+0xfffec01c>
 5057478:	01400044 	movi	r5,1
 505747c:	2c24983a 	sll	r18,r5,r16
 5057480:	8809883a 	mov	r4,r17
 5057484:	91800144 	addi	r6,r18,5
 5057488:	318d883a 	add	r6,r6,r6
 505748c:	318d883a 	add	r6,r6,r6
 5057490:	505b6f00 	call	505b6f0 <_calloc_r>
 5057494:	103ff626 	beq	r2,zero,5057470 <_gp+0xfffec048>
 5057498:	14000115 	stw	r16,4(r2)
 505749c:	14800215 	stw	r18,8(r2)
 50574a0:	003fe606 	br	505743c <_gp+0xfffec014>

050574a4 <_Bfree>:
 50574a4:	28000826 	beq	r5,zero,50574c8 <_Bfree+0x24>
 50574a8:	28c00117 	ldw	r3,4(r5)
 50574ac:	20801317 	ldw	r2,76(r4)
 50574b0:	18c7883a 	add	r3,r3,r3
 50574b4:	18c7883a 	add	r3,r3,r3
 50574b8:	10c5883a 	add	r2,r2,r3
 50574bc:	10c00017 	ldw	r3,0(r2)
 50574c0:	28c00015 	stw	r3,0(r5)
 50574c4:	11400015 	stw	r5,0(r2)
 50574c8:	f800283a 	ret

050574cc <__multadd>:
 50574cc:	defffa04 	addi	sp,sp,-24
 50574d0:	dc800315 	stw	r18,12(sp)
 50574d4:	dc400215 	stw	r17,8(sp)
 50574d8:	dc000115 	stw	r16,4(sp)
 50574dc:	2823883a 	mov	r17,r5
 50574e0:	2c000417 	ldw	r16,16(r5)
 50574e4:	dfc00515 	stw	ra,20(sp)
 50574e8:	dcc00415 	stw	r19,16(sp)
 50574ec:	2025883a 	mov	r18,r4
 50574f0:	29400504 	addi	r5,r5,20
 50574f4:	0011883a 	mov	r8,zero
 50574f8:	28c00017 	ldw	r3,0(r5)
 50574fc:	29400104 	addi	r5,r5,4
 5057500:	42000044 	addi	r8,r8,1
 5057504:	18bfffcc 	andi	r2,r3,65535
 5057508:	1185383a 	mul	r2,r2,r6
 505750c:	1806d43a 	srli	r3,r3,16
 5057510:	11cf883a 	add	r7,r2,r7
 5057514:	3808d43a 	srli	r4,r7,16
 5057518:	1987383a 	mul	r3,r3,r6
 505751c:	38bfffcc 	andi	r2,r7,65535
 5057520:	1907883a 	add	r3,r3,r4
 5057524:	1808943a 	slli	r4,r3,16
 5057528:	180ed43a 	srli	r7,r3,16
 505752c:	2085883a 	add	r2,r4,r2
 5057530:	28bfff15 	stw	r2,-4(r5)
 5057534:	443ff016 	blt	r8,r16,50574f8 <_gp+0xfffec0d0>
 5057538:	38000926 	beq	r7,zero,5057560 <__multadd+0x94>
 505753c:	88800217 	ldw	r2,8(r17)
 5057540:	80800f0e 	bge	r16,r2,5057580 <__multadd+0xb4>
 5057544:	80800144 	addi	r2,r16,5
 5057548:	1085883a 	add	r2,r2,r2
 505754c:	1085883a 	add	r2,r2,r2
 5057550:	8885883a 	add	r2,r17,r2
 5057554:	11c00015 	stw	r7,0(r2)
 5057558:	84000044 	addi	r16,r16,1
 505755c:	8c000415 	stw	r16,16(r17)
 5057560:	8805883a 	mov	r2,r17
 5057564:	dfc00517 	ldw	ra,20(sp)
 5057568:	dcc00417 	ldw	r19,16(sp)
 505756c:	dc800317 	ldw	r18,12(sp)
 5057570:	dc400217 	ldw	r17,8(sp)
 5057574:	dc000117 	ldw	r16,4(sp)
 5057578:	dec00604 	addi	sp,sp,24
 505757c:	f800283a 	ret
 5057580:	89400117 	ldw	r5,4(r17)
 5057584:	9009883a 	mov	r4,r18
 5057588:	d9c00015 	stw	r7,0(sp)
 505758c:	29400044 	addi	r5,r5,1
 5057590:	50573fc0 	call	50573fc <_Balloc>
 5057594:	89800417 	ldw	r6,16(r17)
 5057598:	89400304 	addi	r5,r17,12
 505759c:	11000304 	addi	r4,r2,12
 50575a0:	31800084 	addi	r6,r6,2
 50575a4:	318d883a 	add	r6,r6,r6
 50575a8:	318d883a 	add	r6,r6,r6
 50575ac:	1027883a 	mov	r19,r2
 50575b0:	504f8cc0 	call	504f8cc <memcpy>
 50575b4:	d9c00017 	ldw	r7,0(sp)
 50575b8:	88000a26 	beq	r17,zero,50575e4 <__multadd+0x118>
 50575bc:	88c00117 	ldw	r3,4(r17)
 50575c0:	90801317 	ldw	r2,76(r18)
 50575c4:	18c7883a 	add	r3,r3,r3
 50575c8:	18c7883a 	add	r3,r3,r3
 50575cc:	10c5883a 	add	r2,r2,r3
 50575d0:	10c00017 	ldw	r3,0(r2)
 50575d4:	88c00015 	stw	r3,0(r17)
 50575d8:	14400015 	stw	r17,0(r2)
 50575dc:	9823883a 	mov	r17,r19
 50575e0:	003fd806 	br	5057544 <_gp+0xfffec11c>
 50575e4:	9823883a 	mov	r17,r19
 50575e8:	003fd606 	br	5057544 <_gp+0xfffec11c>

050575ec <__s2b>:
 50575ec:	defff904 	addi	sp,sp,-28
 50575f0:	dc400115 	stw	r17,4(sp)
 50575f4:	dc000015 	stw	r16,0(sp)
 50575f8:	2023883a 	mov	r17,r4
 50575fc:	2821883a 	mov	r16,r5
 5057600:	39000204 	addi	r4,r7,8
 5057604:	01400244 	movi	r5,9
 5057608:	dcc00315 	stw	r19,12(sp)
 505760c:	dc800215 	stw	r18,8(sp)
 5057610:	dfc00615 	stw	ra,24(sp)
 5057614:	dd400515 	stw	r21,20(sp)
 5057618:	dd000415 	stw	r20,16(sp)
 505761c:	3825883a 	mov	r18,r7
 5057620:	3027883a 	mov	r19,r6
 5057624:	504b2f40 	call	504b2f4 <__divsi3>
 5057628:	00c00044 	movi	r3,1
 505762c:	000b883a 	mov	r5,zero
 5057630:	1880030e 	bge	r3,r2,5057640 <__s2b+0x54>
 5057634:	18c7883a 	add	r3,r3,r3
 5057638:	29400044 	addi	r5,r5,1
 505763c:	18bffd16 	blt	r3,r2,5057634 <_gp+0xfffec20c>
 5057640:	8809883a 	mov	r4,r17
 5057644:	50573fc0 	call	50573fc <_Balloc>
 5057648:	d8c00717 	ldw	r3,28(sp)
 505764c:	10c00515 	stw	r3,20(r2)
 5057650:	00c00044 	movi	r3,1
 5057654:	10c00415 	stw	r3,16(r2)
 5057658:	00c00244 	movi	r3,9
 505765c:	1cc0210e 	bge	r3,r19,50576e4 <__s2b+0xf8>
 5057660:	80eb883a 	add	r21,r16,r3
 5057664:	a829883a 	mov	r20,r21
 5057668:	84e1883a 	add	r16,r16,r19
 505766c:	a1c00007 	ldb	r7,0(r20)
 5057670:	01800284 	movi	r6,10
 5057674:	a5000044 	addi	r20,r20,1
 5057678:	100b883a 	mov	r5,r2
 505767c:	39fff404 	addi	r7,r7,-48
 5057680:	8809883a 	mov	r4,r17
 5057684:	50574cc0 	call	50574cc <__multadd>
 5057688:	a43ff81e 	bne	r20,r16,505766c <_gp+0xfffec244>
 505768c:	ace1883a 	add	r16,r21,r19
 5057690:	843ffe04 	addi	r16,r16,-8
 5057694:	9c800a0e 	bge	r19,r18,50576c0 <__s2b+0xd4>
 5057698:	94e5c83a 	sub	r18,r18,r19
 505769c:	84a5883a 	add	r18,r16,r18
 50576a0:	81c00007 	ldb	r7,0(r16)
 50576a4:	01800284 	movi	r6,10
 50576a8:	84000044 	addi	r16,r16,1
 50576ac:	100b883a 	mov	r5,r2
 50576b0:	39fff404 	addi	r7,r7,-48
 50576b4:	8809883a 	mov	r4,r17
 50576b8:	50574cc0 	call	50574cc <__multadd>
 50576bc:	84bff81e 	bne	r16,r18,50576a0 <_gp+0xfffec278>
 50576c0:	dfc00617 	ldw	ra,24(sp)
 50576c4:	dd400517 	ldw	r21,20(sp)
 50576c8:	dd000417 	ldw	r20,16(sp)
 50576cc:	dcc00317 	ldw	r19,12(sp)
 50576d0:	dc800217 	ldw	r18,8(sp)
 50576d4:	dc400117 	ldw	r17,4(sp)
 50576d8:	dc000017 	ldw	r16,0(sp)
 50576dc:	dec00704 	addi	sp,sp,28
 50576e0:	f800283a 	ret
 50576e4:	84000284 	addi	r16,r16,10
 50576e8:	1827883a 	mov	r19,r3
 50576ec:	003fe906 	br	5057694 <_gp+0xfffec26c>

050576f0 <__hi0bits>:
 50576f0:	20bfffec 	andhi	r2,r4,65535
 50576f4:	1000141e 	bne	r2,zero,5057748 <__hi0bits+0x58>
 50576f8:	2008943a 	slli	r4,r4,16
 50576fc:	00800404 	movi	r2,16
 5057700:	20ffc02c 	andhi	r3,r4,65280
 5057704:	1800021e 	bne	r3,zero,5057710 <__hi0bits+0x20>
 5057708:	2008923a 	slli	r4,r4,8
 505770c:	10800204 	addi	r2,r2,8
 5057710:	20fc002c 	andhi	r3,r4,61440
 5057714:	1800021e 	bne	r3,zero,5057720 <__hi0bits+0x30>
 5057718:	2008913a 	slli	r4,r4,4
 505771c:	10800104 	addi	r2,r2,4
 5057720:	20f0002c 	andhi	r3,r4,49152
 5057724:	1800031e 	bne	r3,zero,5057734 <__hi0bits+0x44>
 5057728:	2109883a 	add	r4,r4,r4
 505772c:	10800084 	addi	r2,r2,2
 5057730:	2109883a 	add	r4,r4,r4
 5057734:	20000316 	blt	r4,zero,5057744 <__hi0bits+0x54>
 5057738:	2110002c 	andhi	r4,r4,16384
 505773c:	2000041e 	bne	r4,zero,5057750 <__hi0bits+0x60>
 5057740:	00800804 	movi	r2,32
 5057744:	f800283a 	ret
 5057748:	0005883a 	mov	r2,zero
 505774c:	003fec06 	br	5057700 <_gp+0xfffec2d8>
 5057750:	10800044 	addi	r2,r2,1
 5057754:	f800283a 	ret

05057758 <__lo0bits>:
 5057758:	20c00017 	ldw	r3,0(r4)
 505775c:	188001cc 	andi	r2,r3,7
 5057760:	10000826 	beq	r2,zero,5057784 <__lo0bits+0x2c>
 5057764:	1880004c 	andi	r2,r3,1
 5057768:	1000211e 	bne	r2,zero,50577f0 <__lo0bits+0x98>
 505776c:	1880008c 	andi	r2,r3,2
 5057770:	1000211e 	bne	r2,zero,50577f8 <__lo0bits+0xa0>
 5057774:	1806d0ba 	srli	r3,r3,2
 5057778:	00800084 	movi	r2,2
 505777c:	20c00015 	stw	r3,0(r4)
 5057780:	f800283a 	ret
 5057784:	18bfffcc 	andi	r2,r3,65535
 5057788:	10001326 	beq	r2,zero,50577d8 <__lo0bits+0x80>
 505778c:	0005883a 	mov	r2,zero
 5057790:	19403fcc 	andi	r5,r3,255
 5057794:	2800021e 	bne	r5,zero,50577a0 <__lo0bits+0x48>
 5057798:	1806d23a 	srli	r3,r3,8
 505779c:	10800204 	addi	r2,r2,8
 50577a0:	194003cc 	andi	r5,r3,15
 50577a4:	2800021e 	bne	r5,zero,50577b0 <__lo0bits+0x58>
 50577a8:	1806d13a 	srli	r3,r3,4
 50577ac:	10800104 	addi	r2,r2,4
 50577b0:	194000cc 	andi	r5,r3,3
 50577b4:	2800021e 	bne	r5,zero,50577c0 <__lo0bits+0x68>
 50577b8:	1806d0ba 	srli	r3,r3,2
 50577bc:	10800084 	addi	r2,r2,2
 50577c0:	1940004c 	andi	r5,r3,1
 50577c4:	2800081e 	bne	r5,zero,50577e8 <__lo0bits+0x90>
 50577c8:	1806d07a 	srli	r3,r3,1
 50577cc:	1800051e 	bne	r3,zero,50577e4 <__lo0bits+0x8c>
 50577d0:	00800804 	movi	r2,32
 50577d4:	f800283a 	ret
 50577d8:	1806d43a 	srli	r3,r3,16
 50577dc:	00800404 	movi	r2,16
 50577e0:	003feb06 	br	5057790 <_gp+0xfffec368>
 50577e4:	10800044 	addi	r2,r2,1
 50577e8:	20c00015 	stw	r3,0(r4)
 50577ec:	f800283a 	ret
 50577f0:	0005883a 	mov	r2,zero
 50577f4:	f800283a 	ret
 50577f8:	1806d07a 	srli	r3,r3,1
 50577fc:	00800044 	movi	r2,1
 5057800:	20c00015 	stw	r3,0(r4)
 5057804:	f800283a 	ret

05057808 <__i2b>:
 5057808:	defffd04 	addi	sp,sp,-12
 505780c:	dc000015 	stw	r16,0(sp)
 5057810:	04000044 	movi	r16,1
 5057814:	dc400115 	stw	r17,4(sp)
 5057818:	2823883a 	mov	r17,r5
 505781c:	800b883a 	mov	r5,r16
 5057820:	dfc00215 	stw	ra,8(sp)
 5057824:	50573fc0 	call	50573fc <_Balloc>
 5057828:	14400515 	stw	r17,20(r2)
 505782c:	14000415 	stw	r16,16(r2)
 5057830:	dfc00217 	ldw	ra,8(sp)
 5057834:	dc400117 	ldw	r17,4(sp)
 5057838:	dc000017 	ldw	r16,0(sp)
 505783c:	dec00304 	addi	sp,sp,12
 5057840:	f800283a 	ret

05057844 <__multiply>:
 5057844:	defffa04 	addi	sp,sp,-24
 5057848:	dcc00315 	stw	r19,12(sp)
 505784c:	dc800215 	stw	r18,8(sp)
 5057850:	34c00417 	ldw	r19,16(r6)
 5057854:	2c800417 	ldw	r18,16(r5)
 5057858:	dd000415 	stw	r20,16(sp)
 505785c:	dc400115 	stw	r17,4(sp)
 5057860:	dfc00515 	stw	ra,20(sp)
 5057864:	dc000015 	stw	r16,0(sp)
 5057868:	2829883a 	mov	r20,r5
 505786c:	3023883a 	mov	r17,r6
 5057870:	94c0050e 	bge	r18,r19,5057888 <__multiply+0x44>
 5057874:	9007883a 	mov	r3,r18
 5057878:	3029883a 	mov	r20,r6
 505787c:	9825883a 	mov	r18,r19
 5057880:	2823883a 	mov	r17,r5
 5057884:	1827883a 	mov	r19,r3
 5057888:	a0800217 	ldw	r2,8(r20)
 505788c:	94e1883a 	add	r16,r18,r19
 5057890:	a1400117 	ldw	r5,4(r20)
 5057894:	1400010e 	bge	r2,r16,505789c <__multiply+0x58>
 5057898:	29400044 	addi	r5,r5,1
 505789c:	50573fc0 	call	50573fc <_Balloc>
 50578a0:	8415883a 	add	r10,r16,r16
 50578a4:	12c00504 	addi	r11,r2,20
 50578a8:	5295883a 	add	r10,r10,r10
 50578ac:	5a95883a 	add	r10,r11,r10
 50578b0:	5807883a 	mov	r3,r11
 50578b4:	5a80032e 	bgeu	r11,r10,50578c4 <__multiply+0x80>
 50578b8:	18000015 	stw	zero,0(r3)
 50578bc:	18c00104 	addi	r3,r3,4
 50578c0:	1abffd36 	bltu	r3,r10,50578b8 <_gp+0xfffec490>
 50578c4:	9ce7883a 	add	r19,r19,r19
 50578c8:	94a5883a 	add	r18,r18,r18
 50578cc:	89800504 	addi	r6,r17,20
 50578d0:	9ce7883a 	add	r19,r19,r19
 50578d4:	a3400504 	addi	r13,r20,20
 50578d8:	94a5883a 	add	r18,r18,r18
 50578dc:	34d9883a 	add	r12,r6,r19
 50578e0:	6c93883a 	add	r9,r13,r18
 50578e4:	3300422e 	bgeu	r6,r12,50579f0 <__multiply+0x1ac>
 50578e8:	37c00017 	ldw	ra,0(r6)
 50578ec:	fbffffcc 	andi	r15,ra,65535
 50578f0:	78001b26 	beq	r15,zero,5057960 <__multiply+0x11c>
 50578f4:	5811883a 	mov	r8,r11
 50578f8:	681d883a 	mov	r14,r13
 50578fc:	000f883a 	mov	r7,zero
 5057900:	71000017 	ldw	r4,0(r14)
 5057904:	40c00017 	ldw	r3,0(r8)
 5057908:	73800104 	addi	r14,r14,4
 505790c:	217fffcc 	andi	r5,r4,65535
 5057910:	2bcb383a 	mul	r5,r5,r15
 5057914:	2008d43a 	srli	r4,r4,16
 5057918:	1c7fffcc 	andi	r17,r3,65535
 505791c:	2c4b883a 	add	r5,r5,r17
 5057920:	29cb883a 	add	r5,r5,r7
 5057924:	23c9383a 	mul	r4,r4,r15
 5057928:	1806d43a 	srli	r3,r3,16
 505792c:	280ed43a 	srli	r7,r5,16
 5057930:	297fffcc 	andi	r5,r5,65535
 5057934:	20c7883a 	add	r3,r4,r3
 5057938:	19c7883a 	add	r3,r3,r7
 505793c:	1808943a 	slli	r4,r3,16
 5057940:	4023883a 	mov	r17,r8
 5057944:	180ed43a 	srli	r7,r3,16
 5057948:	214ab03a 	or	r5,r4,r5
 505794c:	41400015 	stw	r5,0(r8)
 5057950:	42000104 	addi	r8,r8,4
 5057954:	727fea36 	bltu	r14,r9,5057900 <_gp+0xfffec4d8>
 5057958:	89c00115 	stw	r7,4(r17)
 505795c:	37c00017 	ldw	ra,0(r6)
 5057960:	f83ed43a 	srli	ra,ra,16
 5057964:	f8001f26 	beq	ra,zero,50579e4 <__multiply+0x1a0>
 5057968:	58c00017 	ldw	r3,0(r11)
 505796c:	681d883a 	mov	r14,r13
 5057970:	581f883a 	mov	r15,r11
 5057974:	1811883a 	mov	r8,r3
 5057978:	5825883a 	mov	r18,r11
 505797c:	000f883a 	mov	r7,zero
 5057980:	00000106 	br	5057988 <__multiply+0x144>
 5057984:	8825883a 	mov	r18,r17
 5057988:	7140000b 	ldhu	r5,0(r14)
 505798c:	4010d43a 	srli	r8,r8,16
 5057990:	193fffcc 	andi	r4,r3,65535
 5057994:	2fcb383a 	mul	r5,r5,ra
 5057998:	7bc00104 	addi	r15,r15,4
 505799c:	73800104 	addi	r14,r14,4
 50579a0:	2a0b883a 	add	r5,r5,r8
 50579a4:	29cb883a 	add	r5,r5,r7
 50579a8:	2806943a 	slli	r3,r5,16
 50579ac:	94400104 	addi	r17,r18,4
 50579b0:	280ad43a 	srli	r5,r5,16
 50579b4:	1908b03a 	or	r4,r3,r4
 50579b8:	793fff15 	stw	r4,-4(r15)
 50579bc:	70ffff17 	ldw	r3,-4(r14)
 50579c0:	8a000017 	ldw	r8,0(r17)
 50579c4:	1806d43a 	srli	r3,r3,16
 50579c8:	413fffcc 	andi	r4,r8,65535
 50579cc:	1fc7383a 	mul	r3,r3,ra
 50579d0:	1907883a 	add	r3,r3,r4
 50579d4:	1947883a 	add	r3,r3,r5
 50579d8:	180ed43a 	srli	r7,r3,16
 50579dc:	727fe936 	bltu	r14,r9,5057984 <_gp+0xfffec55c>
 50579e0:	90c00115 	stw	r3,4(r18)
 50579e4:	31800104 	addi	r6,r6,4
 50579e8:	5ac00104 	addi	r11,r11,4
 50579ec:	333fbe36 	bltu	r6,r12,50578e8 <_gp+0xfffec4c0>
 50579f0:	0400090e 	bge	zero,r16,5057a18 <__multiply+0x1d4>
 50579f4:	50ffff17 	ldw	r3,-4(r10)
 50579f8:	52bfff04 	addi	r10,r10,-4
 50579fc:	18000326 	beq	r3,zero,5057a0c <__multiply+0x1c8>
 5057a00:	00000506 	br	5057a18 <__multiply+0x1d4>
 5057a04:	50c00017 	ldw	r3,0(r10)
 5057a08:	1800031e 	bne	r3,zero,5057a18 <__multiply+0x1d4>
 5057a0c:	843fffc4 	addi	r16,r16,-1
 5057a10:	52bfff04 	addi	r10,r10,-4
 5057a14:	803ffb1e 	bne	r16,zero,5057a04 <_gp+0xfffec5dc>
 5057a18:	14000415 	stw	r16,16(r2)
 5057a1c:	dfc00517 	ldw	ra,20(sp)
 5057a20:	dd000417 	ldw	r20,16(sp)
 5057a24:	dcc00317 	ldw	r19,12(sp)
 5057a28:	dc800217 	ldw	r18,8(sp)
 5057a2c:	dc400117 	ldw	r17,4(sp)
 5057a30:	dc000017 	ldw	r16,0(sp)
 5057a34:	dec00604 	addi	sp,sp,24
 5057a38:	f800283a 	ret

05057a3c <__pow5mult>:
 5057a3c:	defffa04 	addi	sp,sp,-24
 5057a40:	dcc00315 	stw	r19,12(sp)
 5057a44:	dc000015 	stw	r16,0(sp)
 5057a48:	dfc00515 	stw	ra,20(sp)
 5057a4c:	dd000415 	stw	r20,16(sp)
 5057a50:	dc800215 	stw	r18,8(sp)
 5057a54:	dc400115 	stw	r17,4(sp)
 5057a58:	308000cc 	andi	r2,r6,3
 5057a5c:	3021883a 	mov	r16,r6
 5057a60:	2027883a 	mov	r19,r4
 5057a64:	10002f1e 	bne	r2,zero,5057b24 <__pow5mult+0xe8>
 5057a68:	2825883a 	mov	r18,r5
 5057a6c:	8021d0ba 	srai	r16,r16,2
 5057a70:	80001a26 	beq	r16,zero,5057adc <__pow5mult+0xa0>
 5057a74:	9c401217 	ldw	r17,72(r19)
 5057a78:	8800061e 	bne	r17,zero,5057a94 <__pow5mult+0x58>
 5057a7c:	00003406 	br	5057b50 <__pow5mult+0x114>
 5057a80:	8021d07a 	srai	r16,r16,1
 5057a84:	80001526 	beq	r16,zero,5057adc <__pow5mult+0xa0>
 5057a88:	88800017 	ldw	r2,0(r17)
 5057a8c:	10001c26 	beq	r2,zero,5057b00 <__pow5mult+0xc4>
 5057a90:	1023883a 	mov	r17,r2
 5057a94:	8080004c 	andi	r2,r16,1
 5057a98:	103ff926 	beq	r2,zero,5057a80 <_gp+0xfffec658>
 5057a9c:	880d883a 	mov	r6,r17
 5057aa0:	900b883a 	mov	r5,r18
 5057aa4:	9809883a 	mov	r4,r19
 5057aa8:	50578440 	call	5057844 <__multiply>
 5057aac:	90001b26 	beq	r18,zero,5057b1c <__pow5mult+0xe0>
 5057ab0:	91000117 	ldw	r4,4(r18)
 5057ab4:	98c01317 	ldw	r3,76(r19)
 5057ab8:	8021d07a 	srai	r16,r16,1
 5057abc:	2109883a 	add	r4,r4,r4
 5057ac0:	2109883a 	add	r4,r4,r4
 5057ac4:	1907883a 	add	r3,r3,r4
 5057ac8:	19000017 	ldw	r4,0(r3)
 5057acc:	91000015 	stw	r4,0(r18)
 5057ad0:	1c800015 	stw	r18,0(r3)
 5057ad4:	1025883a 	mov	r18,r2
 5057ad8:	803feb1e 	bne	r16,zero,5057a88 <_gp+0xfffec660>
 5057adc:	9005883a 	mov	r2,r18
 5057ae0:	dfc00517 	ldw	ra,20(sp)
 5057ae4:	dd000417 	ldw	r20,16(sp)
 5057ae8:	dcc00317 	ldw	r19,12(sp)
 5057aec:	dc800217 	ldw	r18,8(sp)
 5057af0:	dc400117 	ldw	r17,4(sp)
 5057af4:	dc000017 	ldw	r16,0(sp)
 5057af8:	dec00604 	addi	sp,sp,24
 5057afc:	f800283a 	ret
 5057b00:	880d883a 	mov	r6,r17
 5057b04:	880b883a 	mov	r5,r17
 5057b08:	9809883a 	mov	r4,r19
 5057b0c:	50578440 	call	5057844 <__multiply>
 5057b10:	88800015 	stw	r2,0(r17)
 5057b14:	10000015 	stw	zero,0(r2)
 5057b18:	003fdd06 	br	5057a90 <_gp+0xfffec668>
 5057b1c:	1025883a 	mov	r18,r2
 5057b20:	003fd706 	br	5057a80 <_gp+0xfffec658>
 5057b24:	10bfffc4 	addi	r2,r2,-1
 5057b28:	1085883a 	add	r2,r2,r2
 5057b2c:	00c141b4 	movhi	r3,1286
 5057b30:	18c4ad04 	addi	r3,r3,4788
 5057b34:	1085883a 	add	r2,r2,r2
 5057b38:	1885883a 	add	r2,r3,r2
 5057b3c:	11800017 	ldw	r6,0(r2)
 5057b40:	000f883a 	mov	r7,zero
 5057b44:	50574cc0 	call	50574cc <__multadd>
 5057b48:	1025883a 	mov	r18,r2
 5057b4c:	003fc706 	br	5057a6c <_gp+0xfffec644>
 5057b50:	05000044 	movi	r20,1
 5057b54:	a00b883a 	mov	r5,r20
 5057b58:	9809883a 	mov	r4,r19
 5057b5c:	50573fc0 	call	50573fc <_Balloc>
 5057b60:	1023883a 	mov	r17,r2
 5057b64:	00809c44 	movi	r2,625
 5057b68:	88800515 	stw	r2,20(r17)
 5057b6c:	8d000415 	stw	r20,16(r17)
 5057b70:	9c401215 	stw	r17,72(r19)
 5057b74:	88000015 	stw	zero,0(r17)
 5057b78:	003fc606 	br	5057a94 <_gp+0xfffec66c>

05057b7c <__lshift>:
 5057b7c:	defff904 	addi	sp,sp,-28
 5057b80:	dd400515 	stw	r21,20(sp)
 5057b84:	dcc00315 	stw	r19,12(sp)
 5057b88:	302bd17a 	srai	r21,r6,5
 5057b8c:	2cc00417 	ldw	r19,16(r5)
 5057b90:	28800217 	ldw	r2,8(r5)
 5057b94:	dd000415 	stw	r20,16(sp)
 5057b98:	ace7883a 	add	r19,r21,r19
 5057b9c:	dc800215 	stw	r18,8(sp)
 5057ba0:	dc400115 	stw	r17,4(sp)
 5057ba4:	dc000015 	stw	r16,0(sp)
 5057ba8:	dfc00615 	stw	ra,24(sp)
 5057bac:	9c000044 	addi	r16,r19,1
 5057bb0:	2823883a 	mov	r17,r5
 5057bb4:	3029883a 	mov	r20,r6
 5057bb8:	2025883a 	mov	r18,r4
 5057bbc:	29400117 	ldw	r5,4(r5)
 5057bc0:	1400030e 	bge	r2,r16,5057bd0 <__lshift+0x54>
 5057bc4:	1085883a 	add	r2,r2,r2
 5057bc8:	29400044 	addi	r5,r5,1
 5057bcc:	143ffd16 	blt	r2,r16,5057bc4 <_gp+0xfffec79c>
 5057bd0:	9009883a 	mov	r4,r18
 5057bd4:	50573fc0 	call	50573fc <_Balloc>
 5057bd8:	10c00504 	addi	r3,r2,20
 5057bdc:	0540070e 	bge	zero,r21,5057bfc <__lshift+0x80>
 5057be0:	ad6b883a 	add	r21,r21,r21
 5057be4:	ad6b883a 	add	r21,r21,r21
 5057be8:	1809883a 	mov	r4,r3
 5057bec:	1d47883a 	add	r3,r3,r21
 5057bf0:	20000015 	stw	zero,0(r4)
 5057bf4:	21000104 	addi	r4,r4,4
 5057bf8:	193ffd1e 	bne	r3,r4,5057bf0 <_gp+0xfffec7c8>
 5057bfc:	8a000417 	ldw	r8,16(r17)
 5057c00:	89000504 	addi	r4,r17,20
 5057c04:	a18007cc 	andi	r6,r20,31
 5057c08:	4211883a 	add	r8,r8,r8
 5057c0c:	4211883a 	add	r8,r8,r8
 5057c10:	2211883a 	add	r8,r4,r8
 5057c14:	30002326 	beq	r6,zero,5057ca4 <__lshift+0x128>
 5057c18:	02400804 	movi	r9,32
 5057c1c:	4993c83a 	sub	r9,r9,r6
 5057c20:	000b883a 	mov	r5,zero
 5057c24:	21c00017 	ldw	r7,0(r4)
 5057c28:	1815883a 	mov	r10,r3
 5057c2c:	18c00104 	addi	r3,r3,4
 5057c30:	398e983a 	sll	r7,r7,r6
 5057c34:	21000104 	addi	r4,r4,4
 5057c38:	394ab03a 	or	r5,r7,r5
 5057c3c:	197fff15 	stw	r5,-4(r3)
 5057c40:	217fff17 	ldw	r5,-4(r4)
 5057c44:	2a4ad83a 	srl	r5,r5,r9
 5057c48:	223ff636 	bltu	r4,r8,5057c24 <_gp+0xfffec7fc>
 5057c4c:	51400115 	stw	r5,4(r10)
 5057c50:	28001a1e 	bne	r5,zero,5057cbc <__lshift+0x140>
 5057c54:	843fffc4 	addi	r16,r16,-1
 5057c58:	14000415 	stw	r16,16(r2)
 5057c5c:	88000826 	beq	r17,zero,5057c80 <__lshift+0x104>
 5057c60:	89000117 	ldw	r4,4(r17)
 5057c64:	90c01317 	ldw	r3,76(r18)
 5057c68:	2109883a 	add	r4,r4,r4
 5057c6c:	2109883a 	add	r4,r4,r4
 5057c70:	1907883a 	add	r3,r3,r4
 5057c74:	19000017 	ldw	r4,0(r3)
 5057c78:	89000015 	stw	r4,0(r17)
 5057c7c:	1c400015 	stw	r17,0(r3)
 5057c80:	dfc00617 	ldw	ra,24(sp)
 5057c84:	dd400517 	ldw	r21,20(sp)
 5057c88:	dd000417 	ldw	r20,16(sp)
 5057c8c:	dcc00317 	ldw	r19,12(sp)
 5057c90:	dc800217 	ldw	r18,8(sp)
 5057c94:	dc400117 	ldw	r17,4(sp)
 5057c98:	dc000017 	ldw	r16,0(sp)
 5057c9c:	dec00704 	addi	sp,sp,28
 5057ca0:	f800283a 	ret
 5057ca4:	21400017 	ldw	r5,0(r4)
 5057ca8:	18c00104 	addi	r3,r3,4
 5057cac:	21000104 	addi	r4,r4,4
 5057cb0:	197fff15 	stw	r5,-4(r3)
 5057cb4:	223ffb36 	bltu	r4,r8,5057ca4 <_gp+0xfffec87c>
 5057cb8:	003fe606 	br	5057c54 <_gp+0xfffec82c>
 5057cbc:	9c000084 	addi	r16,r19,2
 5057cc0:	003fe406 	br	5057c54 <_gp+0xfffec82c>

05057cc4 <__mcmp>:
 5057cc4:	20800417 	ldw	r2,16(r4)
 5057cc8:	28c00417 	ldw	r3,16(r5)
 5057ccc:	10c5c83a 	sub	r2,r2,r3
 5057cd0:	1000111e 	bne	r2,zero,5057d18 <__mcmp+0x54>
 5057cd4:	18c7883a 	add	r3,r3,r3
 5057cd8:	18c7883a 	add	r3,r3,r3
 5057cdc:	21000504 	addi	r4,r4,20
 5057ce0:	29400504 	addi	r5,r5,20
 5057ce4:	20c5883a 	add	r2,r4,r3
 5057ce8:	28cb883a 	add	r5,r5,r3
 5057cec:	00000106 	br	5057cf4 <__mcmp+0x30>
 5057cf0:	20800a2e 	bgeu	r4,r2,5057d1c <__mcmp+0x58>
 5057cf4:	10bfff04 	addi	r2,r2,-4
 5057cf8:	297fff04 	addi	r5,r5,-4
 5057cfc:	11800017 	ldw	r6,0(r2)
 5057d00:	28c00017 	ldw	r3,0(r5)
 5057d04:	30fffa26 	beq	r6,r3,5057cf0 <_gp+0xfffec8c8>
 5057d08:	30c00236 	bltu	r6,r3,5057d14 <__mcmp+0x50>
 5057d0c:	00800044 	movi	r2,1
 5057d10:	f800283a 	ret
 5057d14:	00bfffc4 	movi	r2,-1
 5057d18:	f800283a 	ret
 5057d1c:	0005883a 	mov	r2,zero
 5057d20:	f800283a 	ret

05057d24 <__mdiff>:
 5057d24:	28c00417 	ldw	r3,16(r5)
 5057d28:	30800417 	ldw	r2,16(r6)
 5057d2c:	defffa04 	addi	sp,sp,-24
 5057d30:	dcc00315 	stw	r19,12(sp)
 5057d34:	dc800215 	stw	r18,8(sp)
 5057d38:	dfc00515 	stw	ra,20(sp)
 5057d3c:	dd000415 	stw	r20,16(sp)
 5057d40:	dc400115 	stw	r17,4(sp)
 5057d44:	dc000015 	stw	r16,0(sp)
 5057d48:	1887c83a 	sub	r3,r3,r2
 5057d4c:	2825883a 	mov	r18,r5
 5057d50:	3027883a 	mov	r19,r6
 5057d54:	1800141e 	bne	r3,zero,5057da8 <__mdiff+0x84>
 5057d58:	1085883a 	add	r2,r2,r2
 5057d5c:	1085883a 	add	r2,r2,r2
 5057d60:	2a000504 	addi	r8,r5,20
 5057d64:	34000504 	addi	r16,r6,20
 5057d68:	4087883a 	add	r3,r8,r2
 5057d6c:	8085883a 	add	r2,r16,r2
 5057d70:	00000106 	br	5057d78 <__mdiff+0x54>
 5057d74:	40c0592e 	bgeu	r8,r3,5057edc <__mdiff+0x1b8>
 5057d78:	18ffff04 	addi	r3,r3,-4
 5057d7c:	10bfff04 	addi	r2,r2,-4
 5057d80:	19c00017 	ldw	r7,0(r3)
 5057d84:	11400017 	ldw	r5,0(r2)
 5057d88:	397ffa26 	beq	r7,r5,5057d74 <_gp+0xfffec94c>
 5057d8c:	3940592e 	bgeu	r7,r5,5057ef4 <__mdiff+0x1d0>
 5057d90:	9005883a 	mov	r2,r18
 5057d94:	4023883a 	mov	r17,r8
 5057d98:	9825883a 	mov	r18,r19
 5057d9c:	05000044 	movi	r20,1
 5057da0:	1027883a 	mov	r19,r2
 5057da4:	00000406 	br	5057db8 <__mdiff+0x94>
 5057da8:	18005616 	blt	r3,zero,5057f04 <__mdiff+0x1e0>
 5057dac:	34400504 	addi	r17,r6,20
 5057db0:	2c000504 	addi	r16,r5,20
 5057db4:	0029883a 	mov	r20,zero
 5057db8:	91400117 	ldw	r5,4(r18)
 5057dbc:	50573fc0 	call	50573fc <_Balloc>
 5057dc0:	92400417 	ldw	r9,16(r18)
 5057dc4:	9b000417 	ldw	r12,16(r19)
 5057dc8:	12c00504 	addi	r11,r2,20
 5057dcc:	4a51883a 	add	r8,r9,r9
 5057dd0:	6319883a 	add	r12,r12,r12
 5057dd4:	4211883a 	add	r8,r8,r8
 5057dd8:	6319883a 	add	r12,r12,r12
 5057ddc:	15000315 	stw	r20,12(r2)
 5057de0:	8211883a 	add	r8,r16,r8
 5057de4:	8b19883a 	add	r12,r17,r12
 5057de8:	0007883a 	mov	r3,zero
 5057dec:	81400017 	ldw	r5,0(r16)
 5057df0:	89c00017 	ldw	r7,0(r17)
 5057df4:	59800104 	addi	r6,r11,4
 5057df8:	293fffcc 	andi	r4,r5,65535
 5057dfc:	20c7883a 	add	r3,r4,r3
 5057e00:	393fffcc 	andi	r4,r7,65535
 5057e04:	1909c83a 	sub	r4,r3,r4
 5057e08:	280ad43a 	srli	r5,r5,16
 5057e0c:	380ed43a 	srli	r7,r7,16
 5057e10:	2007d43a 	srai	r3,r4,16
 5057e14:	213fffcc 	andi	r4,r4,65535
 5057e18:	29cbc83a 	sub	r5,r5,r7
 5057e1c:	28c7883a 	add	r3,r5,r3
 5057e20:	180a943a 	slli	r5,r3,16
 5057e24:	8c400104 	addi	r17,r17,4
 5057e28:	84000104 	addi	r16,r16,4
 5057e2c:	2908b03a 	or	r4,r5,r4
 5057e30:	59000015 	stw	r4,0(r11)
 5057e34:	1807d43a 	srai	r3,r3,16
 5057e38:	3015883a 	mov	r10,r6
 5057e3c:	3017883a 	mov	r11,r6
 5057e40:	8b3fea36 	bltu	r17,r12,5057dec <_gp+0xfffec9c4>
 5057e44:	8200162e 	bgeu	r16,r8,5057ea0 <__mdiff+0x17c>
 5057e48:	8017883a 	mov	r11,r16
 5057e4c:	59400017 	ldw	r5,0(r11)
 5057e50:	31800104 	addi	r6,r6,4
 5057e54:	5ac00104 	addi	r11,r11,4
 5057e58:	293fffcc 	andi	r4,r5,65535
 5057e5c:	20c7883a 	add	r3,r4,r3
 5057e60:	280ed43a 	srli	r7,r5,16
 5057e64:	180bd43a 	srai	r5,r3,16
 5057e68:	193fffcc 	andi	r4,r3,65535
 5057e6c:	3947883a 	add	r3,r7,r5
 5057e70:	180a943a 	slli	r5,r3,16
 5057e74:	1807d43a 	srai	r3,r3,16
 5057e78:	2908b03a 	or	r4,r5,r4
 5057e7c:	313fff15 	stw	r4,-4(r6)
 5057e80:	5a3ff236 	bltu	r11,r8,5057e4c <_gp+0xfffeca24>
 5057e84:	0406303a 	nor	r3,zero,r16
 5057e88:	1a07883a 	add	r3,r3,r8
 5057e8c:	1806d0ba 	srli	r3,r3,2
 5057e90:	18c00044 	addi	r3,r3,1
 5057e94:	18c7883a 	add	r3,r3,r3
 5057e98:	18c7883a 	add	r3,r3,r3
 5057e9c:	50d5883a 	add	r10,r10,r3
 5057ea0:	50ffff04 	addi	r3,r10,-4
 5057ea4:	2000041e 	bne	r4,zero,5057eb8 <__mdiff+0x194>
 5057ea8:	18ffff04 	addi	r3,r3,-4
 5057eac:	19000017 	ldw	r4,0(r3)
 5057eb0:	4a7fffc4 	addi	r9,r9,-1
 5057eb4:	203ffc26 	beq	r4,zero,5057ea8 <_gp+0xfffeca80>
 5057eb8:	12400415 	stw	r9,16(r2)
 5057ebc:	dfc00517 	ldw	ra,20(sp)
 5057ec0:	dd000417 	ldw	r20,16(sp)
 5057ec4:	dcc00317 	ldw	r19,12(sp)
 5057ec8:	dc800217 	ldw	r18,8(sp)
 5057ecc:	dc400117 	ldw	r17,4(sp)
 5057ed0:	dc000017 	ldw	r16,0(sp)
 5057ed4:	dec00604 	addi	sp,sp,24
 5057ed8:	f800283a 	ret
 5057edc:	000b883a 	mov	r5,zero
 5057ee0:	50573fc0 	call	50573fc <_Balloc>
 5057ee4:	00c00044 	movi	r3,1
 5057ee8:	10c00415 	stw	r3,16(r2)
 5057eec:	10000515 	stw	zero,20(r2)
 5057ef0:	003ff206 	br	5057ebc <_gp+0xfffeca94>
 5057ef4:	8023883a 	mov	r17,r16
 5057ef8:	0029883a 	mov	r20,zero
 5057efc:	4021883a 	mov	r16,r8
 5057f00:	003fad06 	br	5057db8 <_gp+0xfffec990>
 5057f04:	9005883a 	mov	r2,r18
 5057f08:	94400504 	addi	r17,r18,20
 5057f0c:	9c000504 	addi	r16,r19,20
 5057f10:	9825883a 	mov	r18,r19
 5057f14:	05000044 	movi	r20,1
 5057f18:	1027883a 	mov	r19,r2
 5057f1c:	003fa606 	br	5057db8 <_gp+0xfffec990>

05057f20 <__ulp>:
 5057f20:	295ffc2c 	andhi	r5,r5,32752
 5057f24:	00bf3034 	movhi	r2,64704
 5057f28:	2887883a 	add	r3,r5,r2
 5057f2c:	00c0020e 	bge	zero,r3,5057f38 <__ulp+0x18>
 5057f30:	0005883a 	mov	r2,zero
 5057f34:	f800283a 	ret
 5057f38:	00c7c83a 	sub	r3,zero,r3
 5057f3c:	1807d53a 	srai	r3,r3,20
 5057f40:	008004c4 	movi	r2,19
 5057f44:	10c00b0e 	bge	r2,r3,5057f74 <__ulp+0x54>
 5057f48:	18bffb04 	addi	r2,r3,-20
 5057f4c:	01000784 	movi	r4,30
 5057f50:	0007883a 	mov	r3,zero
 5057f54:	20800516 	blt	r4,r2,5057f6c <__ulp+0x4c>
 5057f58:	010007c4 	movi	r4,31
 5057f5c:	2089c83a 	sub	r4,r4,r2
 5057f60:	00800044 	movi	r2,1
 5057f64:	1104983a 	sll	r2,r2,r4
 5057f68:	f800283a 	ret
 5057f6c:	00800044 	movi	r2,1
 5057f70:	f800283a 	ret
 5057f74:	01400234 	movhi	r5,8
 5057f78:	28c7d83a 	sra	r3,r5,r3
 5057f7c:	0005883a 	mov	r2,zero
 5057f80:	f800283a 	ret

05057f84 <__b2d>:
 5057f84:	defffa04 	addi	sp,sp,-24
 5057f88:	dc000015 	stw	r16,0(sp)
 5057f8c:	24000417 	ldw	r16,16(r4)
 5057f90:	dc400115 	stw	r17,4(sp)
 5057f94:	24400504 	addi	r17,r4,20
 5057f98:	8421883a 	add	r16,r16,r16
 5057f9c:	8421883a 	add	r16,r16,r16
 5057fa0:	8c21883a 	add	r16,r17,r16
 5057fa4:	dc800215 	stw	r18,8(sp)
 5057fa8:	84bfff17 	ldw	r18,-4(r16)
 5057fac:	dd000415 	stw	r20,16(sp)
 5057fb0:	dcc00315 	stw	r19,12(sp)
 5057fb4:	9009883a 	mov	r4,r18
 5057fb8:	2829883a 	mov	r20,r5
 5057fbc:	dfc00515 	stw	ra,20(sp)
 5057fc0:	50576f00 	call	50576f0 <__hi0bits>
 5057fc4:	00c00804 	movi	r3,32
 5057fc8:	1889c83a 	sub	r4,r3,r2
 5057fcc:	a1000015 	stw	r4,0(r20)
 5057fd0:	01000284 	movi	r4,10
 5057fd4:	84ffff04 	addi	r19,r16,-4
 5057fd8:	20801216 	blt	r4,r2,5058024 <__b2d+0xa0>
 5057fdc:	018002c4 	movi	r6,11
 5057fe0:	308dc83a 	sub	r6,r6,r2
 5057fe4:	9186d83a 	srl	r3,r18,r6
 5057fe8:	18cffc34 	orhi	r3,r3,16368
 5057fec:	8cc0212e 	bgeu	r17,r19,5058074 <__b2d+0xf0>
 5057ff0:	813ffe17 	ldw	r4,-8(r16)
 5057ff4:	218cd83a 	srl	r6,r4,r6
 5057ff8:	10800544 	addi	r2,r2,21
 5057ffc:	9084983a 	sll	r2,r18,r2
 5058000:	1184b03a 	or	r2,r2,r6
 5058004:	dfc00517 	ldw	ra,20(sp)
 5058008:	dd000417 	ldw	r20,16(sp)
 505800c:	dcc00317 	ldw	r19,12(sp)
 5058010:	dc800217 	ldw	r18,8(sp)
 5058014:	dc400117 	ldw	r17,4(sp)
 5058018:	dc000017 	ldw	r16,0(sp)
 505801c:	dec00604 	addi	sp,sp,24
 5058020:	f800283a 	ret
 5058024:	8cc00f2e 	bgeu	r17,r19,5058064 <__b2d+0xe0>
 5058028:	117ffd44 	addi	r5,r2,-11
 505802c:	80bffe17 	ldw	r2,-8(r16)
 5058030:	28000e26 	beq	r5,zero,505806c <__b2d+0xe8>
 5058034:	1949c83a 	sub	r4,r3,r5
 5058038:	9164983a 	sll	r18,r18,r5
 505803c:	1106d83a 	srl	r3,r2,r4
 5058040:	81bffe04 	addi	r6,r16,-8
 5058044:	948ffc34 	orhi	r18,r18,16368
 5058048:	90c6b03a 	or	r3,r18,r3
 505804c:	89800e2e 	bgeu	r17,r6,5058088 <__b2d+0x104>
 5058050:	81bffd17 	ldw	r6,-12(r16)
 5058054:	1144983a 	sll	r2,r2,r5
 5058058:	310ad83a 	srl	r5,r6,r4
 505805c:	2884b03a 	or	r2,r5,r2
 5058060:	003fe806 	br	5058004 <_gp+0xfffecbdc>
 5058064:	10bffd44 	addi	r2,r2,-11
 5058068:	1000041e 	bne	r2,zero,505807c <__b2d+0xf8>
 505806c:	90cffc34 	orhi	r3,r18,16368
 5058070:	003fe406 	br	5058004 <_gp+0xfffecbdc>
 5058074:	000d883a 	mov	r6,zero
 5058078:	003fdf06 	br	5057ff8 <_gp+0xfffecbd0>
 505807c:	90a4983a 	sll	r18,r18,r2
 5058080:	0005883a 	mov	r2,zero
 5058084:	003ff906 	br	505806c <_gp+0xfffecc44>
 5058088:	1144983a 	sll	r2,r2,r5
 505808c:	003fdd06 	br	5058004 <_gp+0xfffecbdc>

05058090 <__d2b>:
 5058090:	defff804 	addi	sp,sp,-32
 5058094:	dc000215 	stw	r16,8(sp)
 5058098:	3021883a 	mov	r16,r6
 505809c:	dc400315 	stw	r17,12(sp)
 50580a0:	8022907a 	slli	r17,r16,1
 50580a4:	dd000615 	stw	r20,24(sp)
 50580a8:	2829883a 	mov	r20,r5
 50580ac:	01400044 	movi	r5,1
 50580b0:	dcc00515 	stw	r19,20(sp)
 50580b4:	dc800415 	stw	r18,16(sp)
 50580b8:	dfc00715 	stw	ra,28(sp)
 50580bc:	3825883a 	mov	r18,r7
 50580c0:	8822d57a 	srli	r17,r17,21
 50580c4:	50573fc0 	call	50573fc <_Balloc>
 50580c8:	1027883a 	mov	r19,r2
 50580cc:	00800434 	movhi	r2,16
 50580d0:	10bfffc4 	addi	r2,r2,-1
 50580d4:	808c703a 	and	r6,r16,r2
 50580d8:	88000126 	beq	r17,zero,50580e0 <__d2b+0x50>
 50580dc:	31800434 	orhi	r6,r6,16
 50580e0:	d9800015 	stw	r6,0(sp)
 50580e4:	a0002426 	beq	r20,zero,5058178 <__d2b+0xe8>
 50580e8:	d9000104 	addi	r4,sp,4
 50580ec:	dd000115 	stw	r20,4(sp)
 50580f0:	50577580 	call	5057758 <__lo0bits>
 50580f4:	d8c00017 	ldw	r3,0(sp)
 50580f8:	10002f1e 	bne	r2,zero,50581b8 <__d2b+0x128>
 50580fc:	d9000117 	ldw	r4,4(sp)
 5058100:	99000515 	stw	r4,20(r19)
 5058104:	1821003a 	cmpeq	r16,r3,zero
 5058108:	01000084 	movi	r4,2
 505810c:	2421c83a 	sub	r16,r4,r16
 5058110:	98c00615 	stw	r3,24(r19)
 5058114:	9c000415 	stw	r16,16(r19)
 5058118:	88001f1e 	bne	r17,zero,5058198 <__d2b+0x108>
 505811c:	10bef384 	addi	r2,r2,-1074
 5058120:	90800015 	stw	r2,0(r18)
 5058124:	00900034 	movhi	r2,16384
 5058128:	10bfffc4 	addi	r2,r2,-1
 505812c:	8085883a 	add	r2,r16,r2
 5058130:	1085883a 	add	r2,r2,r2
 5058134:	1085883a 	add	r2,r2,r2
 5058138:	9885883a 	add	r2,r19,r2
 505813c:	11000517 	ldw	r4,20(r2)
 5058140:	8020917a 	slli	r16,r16,5
 5058144:	50576f00 	call	50576f0 <__hi0bits>
 5058148:	d8c00817 	ldw	r3,32(sp)
 505814c:	8085c83a 	sub	r2,r16,r2
 5058150:	18800015 	stw	r2,0(r3)
 5058154:	9805883a 	mov	r2,r19
 5058158:	dfc00717 	ldw	ra,28(sp)
 505815c:	dd000617 	ldw	r20,24(sp)
 5058160:	dcc00517 	ldw	r19,20(sp)
 5058164:	dc800417 	ldw	r18,16(sp)
 5058168:	dc400317 	ldw	r17,12(sp)
 505816c:	dc000217 	ldw	r16,8(sp)
 5058170:	dec00804 	addi	sp,sp,32
 5058174:	f800283a 	ret
 5058178:	d809883a 	mov	r4,sp
 505817c:	50577580 	call	5057758 <__lo0bits>
 5058180:	d8c00017 	ldw	r3,0(sp)
 5058184:	04000044 	movi	r16,1
 5058188:	9c000415 	stw	r16,16(r19)
 505818c:	98c00515 	stw	r3,20(r19)
 5058190:	10800804 	addi	r2,r2,32
 5058194:	883fe126 	beq	r17,zero,505811c <_gp+0xfffeccf4>
 5058198:	00c00d44 	movi	r3,53
 505819c:	8c7ef344 	addi	r17,r17,-1075
 50581a0:	88a3883a 	add	r17,r17,r2
 50581a4:	1885c83a 	sub	r2,r3,r2
 50581a8:	d8c00817 	ldw	r3,32(sp)
 50581ac:	94400015 	stw	r17,0(r18)
 50581b0:	18800015 	stw	r2,0(r3)
 50581b4:	003fe706 	br	5058154 <_gp+0xfffecd2c>
 50581b8:	01000804 	movi	r4,32
 50581bc:	2089c83a 	sub	r4,r4,r2
 50581c0:	1908983a 	sll	r4,r3,r4
 50581c4:	d9400117 	ldw	r5,4(sp)
 50581c8:	1886d83a 	srl	r3,r3,r2
 50581cc:	2148b03a 	or	r4,r4,r5
 50581d0:	99000515 	stw	r4,20(r19)
 50581d4:	d8c00015 	stw	r3,0(sp)
 50581d8:	003fca06 	br	5058104 <_gp+0xfffeccdc>

050581dc <__ratio>:
 50581dc:	defff904 	addi	sp,sp,-28
 50581e0:	dc400315 	stw	r17,12(sp)
 50581e4:	2823883a 	mov	r17,r5
 50581e8:	d9400104 	addi	r5,sp,4
 50581ec:	dfc00615 	stw	ra,24(sp)
 50581f0:	dcc00515 	stw	r19,20(sp)
 50581f4:	dc800415 	stw	r18,16(sp)
 50581f8:	2027883a 	mov	r19,r4
 50581fc:	dc000215 	stw	r16,8(sp)
 5058200:	5057f840 	call	5057f84 <__b2d>
 5058204:	d80b883a 	mov	r5,sp
 5058208:	8809883a 	mov	r4,r17
 505820c:	1025883a 	mov	r18,r2
 5058210:	1821883a 	mov	r16,r3
 5058214:	5057f840 	call	5057f84 <__b2d>
 5058218:	8a000417 	ldw	r8,16(r17)
 505821c:	99000417 	ldw	r4,16(r19)
 5058220:	d9400117 	ldw	r5,4(sp)
 5058224:	2209c83a 	sub	r4,r4,r8
 5058228:	2010917a 	slli	r8,r4,5
 505822c:	d9000017 	ldw	r4,0(sp)
 5058230:	2909c83a 	sub	r4,r5,r4
 5058234:	4109883a 	add	r4,r8,r4
 5058238:	01000e0e 	bge	zero,r4,5058274 <__ratio+0x98>
 505823c:	2008953a 	slli	r4,r4,20
 5058240:	2421883a 	add	r16,r4,r16
 5058244:	100d883a 	mov	r6,r2
 5058248:	180f883a 	mov	r7,r3
 505824c:	9009883a 	mov	r4,r18
 5058250:	800b883a 	mov	r5,r16
 5058254:	504d1c00 	call	504d1c0 <__divdf3>
 5058258:	dfc00617 	ldw	ra,24(sp)
 505825c:	dcc00517 	ldw	r19,20(sp)
 5058260:	dc800417 	ldw	r18,16(sp)
 5058264:	dc400317 	ldw	r17,12(sp)
 5058268:	dc000217 	ldw	r16,8(sp)
 505826c:	dec00704 	addi	sp,sp,28
 5058270:	f800283a 	ret
 5058274:	2008953a 	slli	r4,r4,20
 5058278:	1907c83a 	sub	r3,r3,r4
 505827c:	003ff106 	br	5058244 <_gp+0xfffece1c>

05058280 <_mprec_log10>:
 5058280:	defffe04 	addi	sp,sp,-8
 5058284:	dc000015 	stw	r16,0(sp)
 5058288:	dfc00115 	stw	ra,4(sp)
 505828c:	008005c4 	movi	r2,23
 5058290:	2021883a 	mov	r16,r4
 5058294:	11000d0e 	bge	r2,r4,50582cc <_mprec_log10+0x4c>
 5058298:	0005883a 	mov	r2,zero
 505829c:	00cffc34 	movhi	r3,16368
 50582a0:	843fffc4 	addi	r16,r16,-1
 50582a4:	000d883a 	mov	r6,zero
 50582a8:	01d00934 	movhi	r7,16420
 50582ac:	1009883a 	mov	r4,r2
 50582b0:	180b883a 	mov	r5,r3
 50582b4:	504dc0c0 	call	504dc0c <__muldf3>
 50582b8:	803ff91e 	bne	r16,zero,50582a0 <_gp+0xfffece78>
 50582bc:	dfc00117 	ldw	ra,4(sp)
 50582c0:	dc000017 	ldw	r16,0(sp)
 50582c4:	dec00204 	addi	sp,sp,8
 50582c8:	f800283a 	ret
 50582cc:	202090fa 	slli	r16,r4,3
 50582d0:	008141b4 	movhi	r2,1286
 50582d4:	1084c404 	addi	r2,r2,4880
 50582d8:	1421883a 	add	r16,r2,r16
 50582dc:	80800017 	ldw	r2,0(r16)
 50582e0:	80c00117 	ldw	r3,4(r16)
 50582e4:	dfc00117 	ldw	ra,4(sp)
 50582e8:	dc000017 	ldw	r16,0(sp)
 50582ec:	dec00204 	addi	sp,sp,8
 50582f0:	f800283a 	ret

050582f4 <__copybits>:
 50582f4:	297fffc4 	addi	r5,r5,-1
 50582f8:	280fd17a 	srai	r7,r5,5
 50582fc:	30c00417 	ldw	r3,16(r6)
 5058300:	30800504 	addi	r2,r6,20
 5058304:	39c00044 	addi	r7,r7,1
 5058308:	18c7883a 	add	r3,r3,r3
 505830c:	39cf883a 	add	r7,r7,r7
 5058310:	18c7883a 	add	r3,r3,r3
 5058314:	39cf883a 	add	r7,r7,r7
 5058318:	10c7883a 	add	r3,r2,r3
 505831c:	21cf883a 	add	r7,r4,r7
 5058320:	10c00d2e 	bgeu	r2,r3,5058358 <__copybits+0x64>
 5058324:	200b883a 	mov	r5,r4
 5058328:	12000017 	ldw	r8,0(r2)
 505832c:	29400104 	addi	r5,r5,4
 5058330:	10800104 	addi	r2,r2,4
 5058334:	2a3fff15 	stw	r8,-4(r5)
 5058338:	10fffb36 	bltu	r2,r3,5058328 <_gp+0xfffecf00>
 505833c:	1985c83a 	sub	r2,r3,r6
 5058340:	10bffac4 	addi	r2,r2,-21
 5058344:	1004d0ba 	srli	r2,r2,2
 5058348:	10800044 	addi	r2,r2,1
 505834c:	1085883a 	add	r2,r2,r2
 5058350:	1085883a 	add	r2,r2,r2
 5058354:	2089883a 	add	r4,r4,r2
 5058358:	21c0032e 	bgeu	r4,r7,5058368 <__copybits+0x74>
 505835c:	20000015 	stw	zero,0(r4)
 5058360:	21000104 	addi	r4,r4,4
 5058364:	21fffd36 	bltu	r4,r7,505835c <_gp+0xfffecf34>
 5058368:	f800283a 	ret

0505836c <__any_on>:
 505836c:	20c00417 	ldw	r3,16(r4)
 5058370:	2805d17a 	srai	r2,r5,5
 5058374:	21000504 	addi	r4,r4,20
 5058378:	18800d0e 	bge	r3,r2,50583b0 <__any_on+0x44>
 505837c:	18c7883a 	add	r3,r3,r3
 5058380:	18c7883a 	add	r3,r3,r3
 5058384:	20c7883a 	add	r3,r4,r3
 5058388:	20c0192e 	bgeu	r4,r3,50583f0 <__any_on+0x84>
 505838c:	18bfff17 	ldw	r2,-4(r3)
 5058390:	18ffff04 	addi	r3,r3,-4
 5058394:	1000041e 	bne	r2,zero,50583a8 <__any_on+0x3c>
 5058398:	20c0142e 	bgeu	r4,r3,50583ec <__any_on+0x80>
 505839c:	18ffff04 	addi	r3,r3,-4
 50583a0:	19400017 	ldw	r5,0(r3)
 50583a4:	283ffc26 	beq	r5,zero,5058398 <_gp+0xfffecf70>
 50583a8:	00800044 	movi	r2,1
 50583ac:	f800283a 	ret
 50583b0:	10c00a0e 	bge	r2,r3,50583dc <__any_on+0x70>
 50583b4:	1085883a 	add	r2,r2,r2
 50583b8:	1085883a 	add	r2,r2,r2
 50583bc:	294007cc 	andi	r5,r5,31
 50583c0:	2087883a 	add	r3,r4,r2
 50583c4:	283ff026 	beq	r5,zero,5058388 <_gp+0xfffecf60>
 50583c8:	19800017 	ldw	r6,0(r3)
 50583cc:	3144d83a 	srl	r2,r6,r5
 50583d0:	114a983a 	sll	r5,r2,r5
 50583d4:	317ff41e 	bne	r6,r5,50583a8 <_gp+0xfffecf80>
 50583d8:	003feb06 	br	5058388 <_gp+0xfffecf60>
 50583dc:	1085883a 	add	r2,r2,r2
 50583e0:	1085883a 	add	r2,r2,r2
 50583e4:	2087883a 	add	r3,r4,r2
 50583e8:	003fe706 	br	5058388 <_gp+0xfffecf60>
 50583ec:	f800283a 	ret
 50583f0:	0005883a 	mov	r2,zero
 50583f4:	f800283a 	ret

050583f8 <_realloc_r>:
 50583f8:	defff604 	addi	sp,sp,-40
 50583fc:	dc800215 	stw	r18,8(sp)
 5058400:	dfc00915 	stw	ra,36(sp)
 5058404:	df000815 	stw	fp,32(sp)
 5058408:	ddc00715 	stw	r23,28(sp)
 505840c:	dd800615 	stw	r22,24(sp)
 5058410:	dd400515 	stw	r21,20(sp)
 5058414:	dd000415 	stw	r20,16(sp)
 5058418:	dcc00315 	stw	r19,12(sp)
 505841c:	dc400115 	stw	r17,4(sp)
 5058420:	dc000015 	stw	r16,0(sp)
 5058424:	3025883a 	mov	r18,r6
 5058428:	2800b726 	beq	r5,zero,5058708 <_realloc_r+0x310>
 505842c:	282b883a 	mov	r21,r5
 5058430:	2029883a 	mov	r20,r4
 5058434:	505d3e40 	call	505d3e4 <__malloc_lock>
 5058438:	a8bfff17 	ldw	r2,-4(r21)
 505843c:	043fff04 	movi	r16,-4
 5058440:	90c002c4 	addi	r3,r18,11
 5058444:	01000584 	movi	r4,22
 5058448:	acfffe04 	addi	r19,r21,-8
 505844c:	1420703a 	and	r16,r2,r16
 5058450:	20c0332e 	bgeu	r4,r3,5058520 <_realloc_r+0x128>
 5058454:	047ffe04 	movi	r17,-8
 5058458:	1c62703a 	and	r17,r3,r17
 505845c:	8807883a 	mov	r3,r17
 5058460:	88005816 	blt	r17,zero,50585c4 <_realloc_r+0x1cc>
 5058464:	8c805736 	bltu	r17,r18,50585c4 <_realloc_r+0x1cc>
 5058468:	80c0300e 	bge	r16,r3,505852c <_realloc_r+0x134>
 505846c:	070141b4 	movhi	fp,1286
 5058470:	e7062e04 	addi	fp,fp,6328
 5058474:	e1c00217 	ldw	r7,8(fp)
 5058478:	9c09883a 	add	r4,r19,r16
 505847c:	22000117 	ldw	r8,4(r4)
 5058480:	21c06326 	beq	r4,r7,5058610 <_realloc_r+0x218>
 5058484:	017fff84 	movi	r5,-2
 5058488:	414a703a 	and	r5,r8,r5
 505848c:	214b883a 	add	r5,r4,r5
 5058490:	29800117 	ldw	r6,4(r5)
 5058494:	3180004c 	andi	r6,r6,1
 5058498:	30003f26 	beq	r6,zero,5058598 <_realloc_r+0x1a0>
 505849c:	1080004c 	andi	r2,r2,1
 50584a0:	10008326 	beq	r2,zero,50586b0 <_realloc_r+0x2b8>
 50584a4:	900b883a 	mov	r5,r18
 50584a8:	a009883a 	mov	r4,r20
 50584ac:	504f0c00 	call	504f0c0 <_malloc_r>
 50584b0:	1025883a 	mov	r18,r2
 50584b4:	10011e26 	beq	r2,zero,5058930 <_realloc_r+0x538>
 50584b8:	a93fff17 	ldw	r4,-4(r21)
 50584bc:	10fffe04 	addi	r3,r2,-8
 50584c0:	00bfff84 	movi	r2,-2
 50584c4:	2084703a 	and	r2,r4,r2
 50584c8:	9885883a 	add	r2,r19,r2
 50584cc:	1880ee26 	beq	r3,r2,5058888 <_realloc_r+0x490>
 50584d0:	81bfff04 	addi	r6,r16,-4
 50584d4:	00800904 	movi	r2,36
 50584d8:	1180b836 	bltu	r2,r6,50587bc <_realloc_r+0x3c4>
 50584dc:	00c004c4 	movi	r3,19
 50584e0:	19809636 	bltu	r3,r6,505873c <_realloc_r+0x344>
 50584e4:	9005883a 	mov	r2,r18
 50584e8:	a807883a 	mov	r3,r21
 50584ec:	19000017 	ldw	r4,0(r3)
 50584f0:	11000015 	stw	r4,0(r2)
 50584f4:	19000117 	ldw	r4,4(r3)
 50584f8:	11000115 	stw	r4,4(r2)
 50584fc:	18c00217 	ldw	r3,8(r3)
 5058500:	10c00215 	stw	r3,8(r2)
 5058504:	a80b883a 	mov	r5,r21
 5058508:	a009883a 	mov	r4,r20
 505850c:	50565d00 	call	50565d0 <_free_r>
 5058510:	a009883a 	mov	r4,r20
 5058514:	505d4080 	call	505d408 <__malloc_unlock>
 5058518:	9005883a 	mov	r2,r18
 505851c:	00001206 	br	5058568 <_realloc_r+0x170>
 5058520:	00c00404 	movi	r3,16
 5058524:	1823883a 	mov	r17,r3
 5058528:	003fce06 	br	5058464 <_gp+0xfffed03c>
 505852c:	a825883a 	mov	r18,r21
 5058530:	8445c83a 	sub	r2,r16,r17
 5058534:	00c003c4 	movi	r3,15
 5058538:	18802636 	bltu	r3,r2,50585d4 <_realloc_r+0x1dc>
 505853c:	99800117 	ldw	r6,4(r19)
 5058540:	9c07883a 	add	r3,r19,r16
 5058544:	3180004c 	andi	r6,r6,1
 5058548:	3420b03a 	or	r16,r6,r16
 505854c:	9c000115 	stw	r16,4(r19)
 5058550:	18800117 	ldw	r2,4(r3)
 5058554:	10800054 	ori	r2,r2,1
 5058558:	18800115 	stw	r2,4(r3)
 505855c:	a009883a 	mov	r4,r20
 5058560:	505d4080 	call	505d408 <__malloc_unlock>
 5058564:	9005883a 	mov	r2,r18
 5058568:	dfc00917 	ldw	ra,36(sp)
 505856c:	df000817 	ldw	fp,32(sp)
 5058570:	ddc00717 	ldw	r23,28(sp)
 5058574:	dd800617 	ldw	r22,24(sp)
 5058578:	dd400517 	ldw	r21,20(sp)
 505857c:	dd000417 	ldw	r20,16(sp)
 5058580:	dcc00317 	ldw	r19,12(sp)
 5058584:	dc800217 	ldw	r18,8(sp)
 5058588:	dc400117 	ldw	r17,4(sp)
 505858c:	dc000017 	ldw	r16,0(sp)
 5058590:	dec00a04 	addi	sp,sp,40
 5058594:	f800283a 	ret
 5058598:	017fff04 	movi	r5,-4
 505859c:	414a703a 	and	r5,r8,r5
 50585a0:	814d883a 	add	r6,r16,r5
 50585a4:	30c01f16 	blt	r6,r3,5058624 <_realloc_r+0x22c>
 50585a8:	20800317 	ldw	r2,12(r4)
 50585ac:	20c00217 	ldw	r3,8(r4)
 50585b0:	a825883a 	mov	r18,r21
 50585b4:	3021883a 	mov	r16,r6
 50585b8:	18800315 	stw	r2,12(r3)
 50585bc:	10c00215 	stw	r3,8(r2)
 50585c0:	003fdb06 	br	5058530 <_gp+0xfffed108>
 50585c4:	00800304 	movi	r2,12
 50585c8:	a0800015 	stw	r2,0(r20)
 50585cc:	0005883a 	mov	r2,zero
 50585d0:	003fe506 	br	5058568 <_gp+0xfffed140>
 50585d4:	98c00117 	ldw	r3,4(r19)
 50585d8:	9c4b883a 	add	r5,r19,r17
 50585dc:	11000054 	ori	r4,r2,1
 50585e0:	18c0004c 	andi	r3,r3,1
 50585e4:	1c62b03a 	or	r17,r3,r17
 50585e8:	9c400115 	stw	r17,4(r19)
 50585ec:	29000115 	stw	r4,4(r5)
 50585f0:	2885883a 	add	r2,r5,r2
 50585f4:	10c00117 	ldw	r3,4(r2)
 50585f8:	29400204 	addi	r5,r5,8
 50585fc:	a009883a 	mov	r4,r20
 5058600:	18c00054 	ori	r3,r3,1
 5058604:	10c00115 	stw	r3,4(r2)
 5058608:	50565d00 	call	50565d0 <_free_r>
 505860c:	003fd306 	br	505855c <_gp+0xfffed134>
 5058610:	017fff04 	movi	r5,-4
 5058614:	414a703a 	and	r5,r8,r5
 5058618:	89800404 	addi	r6,r17,16
 505861c:	8151883a 	add	r8,r16,r5
 5058620:	4180590e 	bge	r8,r6,5058788 <_realloc_r+0x390>
 5058624:	1080004c 	andi	r2,r2,1
 5058628:	103f9e1e 	bne	r2,zero,50584a4 <_gp+0xfffed07c>
 505862c:	adbffe17 	ldw	r22,-8(r21)
 5058630:	00bfff04 	movi	r2,-4
 5058634:	9dadc83a 	sub	r22,r19,r22
 5058638:	b1800117 	ldw	r6,4(r22)
 505863c:	3084703a 	and	r2,r6,r2
 5058640:	20002026 	beq	r4,zero,50586c4 <_realloc_r+0x2cc>
 5058644:	80af883a 	add	r23,r16,r2
 5058648:	b96f883a 	add	r23,r23,r5
 505864c:	21c05f26 	beq	r4,r7,50587cc <_realloc_r+0x3d4>
 5058650:	b8c01c16 	blt	r23,r3,50586c4 <_realloc_r+0x2cc>
 5058654:	20800317 	ldw	r2,12(r4)
 5058658:	20c00217 	ldw	r3,8(r4)
 505865c:	81bfff04 	addi	r6,r16,-4
 5058660:	01000904 	movi	r4,36
 5058664:	18800315 	stw	r2,12(r3)
 5058668:	10c00215 	stw	r3,8(r2)
 505866c:	b0c00217 	ldw	r3,8(r22)
 5058670:	b0800317 	ldw	r2,12(r22)
 5058674:	b4800204 	addi	r18,r22,8
 5058678:	18800315 	stw	r2,12(r3)
 505867c:	10c00215 	stw	r3,8(r2)
 5058680:	21801b36 	bltu	r4,r6,50586f0 <_realloc_r+0x2f8>
 5058684:	008004c4 	movi	r2,19
 5058688:	1180352e 	bgeu	r2,r6,5058760 <_realloc_r+0x368>
 505868c:	a8800017 	ldw	r2,0(r21)
 5058690:	b0800215 	stw	r2,8(r22)
 5058694:	a8800117 	ldw	r2,4(r21)
 5058698:	b0800315 	stw	r2,12(r22)
 505869c:	008006c4 	movi	r2,27
 50586a0:	11807f36 	bltu	r2,r6,50588a0 <_realloc_r+0x4a8>
 50586a4:	b0800404 	addi	r2,r22,16
 50586a8:	ad400204 	addi	r21,r21,8
 50586ac:	00002d06 	br	5058764 <_realloc_r+0x36c>
 50586b0:	adbffe17 	ldw	r22,-8(r21)
 50586b4:	00bfff04 	movi	r2,-4
 50586b8:	9dadc83a 	sub	r22,r19,r22
 50586bc:	b1000117 	ldw	r4,4(r22)
 50586c0:	2084703a 	and	r2,r4,r2
 50586c4:	b03f7726 	beq	r22,zero,50584a4 <_gp+0xfffed07c>
 50586c8:	80af883a 	add	r23,r16,r2
 50586cc:	b8ff7516 	blt	r23,r3,50584a4 <_gp+0xfffed07c>
 50586d0:	b0800317 	ldw	r2,12(r22)
 50586d4:	b0c00217 	ldw	r3,8(r22)
 50586d8:	81bfff04 	addi	r6,r16,-4
 50586dc:	01000904 	movi	r4,36
 50586e0:	18800315 	stw	r2,12(r3)
 50586e4:	10c00215 	stw	r3,8(r2)
 50586e8:	b4800204 	addi	r18,r22,8
 50586ec:	21bfe52e 	bgeu	r4,r6,5058684 <_gp+0xfffed25c>
 50586f0:	a80b883a 	mov	r5,r21
 50586f4:	9009883a 	mov	r4,r18
 50586f8:	50572a00 	call	50572a0 <memmove>
 50586fc:	b821883a 	mov	r16,r23
 5058700:	b027883a 	mov	r19,r22
 5058704:	003f8a06 	br	5058530 <_gp+0xfffed108>
 5058708:	300b883a 	mov	r5,r6
 505870c:	dfc00917 	ldw	ra,36(sp)
 5058710:	df000817 	ldw	fp,32(sp)
 5058714:	ddc00717 	ldw	r23,28(sp)
 5058718:	dd800617 	ldw	r22,24(sp)
 505871c:	dd400517 	ldw	r21,20(sp)
 5058720:	dd000417 	ldw	r20,16(sp)
 5058724:	dcc00317 	ldw	r19,12(sp)
 5058728:	dc800217 	ldw	r18,8(sp)
 505872c:	dc400117 	ldw	r17,4(sp)
 5058730:	dc000017 	ldw	r16,0(sp)
 5058734:	dec00a04 	addi	sp,sp,40
 5058738:	504f0c01 	jmpi	504f0c0 <_malloc_r>
 505873c:	a8c00017 	ldw	r3,0(r21)
 5058740:	90c00015 	stw	r3,0(r18)
 5058744:	a8c00117 	ldw	r3,4(r21)
 5058748:	90c00115 	stw	r3,4(r18)
 505874c:	00c006c4 	movi	r3,27
 5058750:	19804536 	bltu	r3,r6,5058868 <_realloc_r+0x470>
 5058754:	90800204 	addi	r2,r18,8
 5058758:	a8c00204 	addi	r3,r21,8
 505875c:	003f6306 	br	50584ec <_gp+0xfffed0c4>
 5058760:	9005883a 	mov	r2,r18
 5058764:	a8c00017 	ldw	r3,0(r21)
 5058768:	b821883a 	mov	r16,r23
 505876c:	b027883a 	mov	r19,r22
 5058770:	10c00015 	stw	r3,0(r2)
 5058774:	a8c00117 	ldw	r3,4(r21)
 5058778:	10c00115 	stw	r3,4(r2)
 505877c:	a8c00217 	ldw	r3,8(r21)
 5058780:	10c00215 	stw	r3,8(r2)
 5058784:	003f6a06 	br	5058530 <_gp+0xfffed108>
 5058788:	9c67883a 	add	r19,r19,r17
 505878c:	4445c83a 	sub	r2,r8,r17
 5058790:	e4c00215 	stw	r19,8(fp)
 5058794:	10800054 	ori	r2,r2,1
 5058798:	98800115 	stw	r2,4(r19)
 505879c:	a8bfff17 	ldw	r2,-4(r21)
 50587a0:	a009883a 	mov	r4,r20
 50587a4:	1080004c 	andi	r2,r2,1
 50587a8:	1462b03a 	or	r17,r2,r17
 50587ac:	ac7fff15 	stw	r17,-4(r21)
 50587b0:	505d4080 	call	505d408 <__malloc_unlock>
 50587b4:	a805883a 	mov	r2,r21
 50587b8:	003f6b06 	br	5058568 <_gp+0xfffed140>
 50587bc:	a80b883a 	mov	r5,r21
 50587c0:	9009883a 	mov	r4,r18
 50587c4:	50572a00 	call	50572a0 <memmove>
 50587c8:	003f4e06 	br	5058504 <_gp+0xfffed0dc>
 50587cc:	89000404 	addi	r4,r17,16
 50587d0:	b93fbc16 	blt	r23,r4,50586c4 <_gp+0xfffed29c>
 50587d4:	b0800317 	ldw	r2,12(r22)
 50587d8:	b0c00217 	ldw	r3,8(r22)
 50587dc:	81bfff04 	addi	r6,r16,-4
 50587e0:	01000904 	movi	r4,36
 50587e4:	18800315 	stw	r2,12(r3)
 50587e8:	10c00215 	stw	r3,8(r2)
 50587ec:	b4800204 	addi	r18,r22,8
 50587f0:	21804336 	bltu	r4,r6,5058900 <_realloc_r+0x508>
 50587f4:	008004c4 	movi	r2,19
 50587f8:	11803f2e 	bgeu	r2,r6,50588f8 <_realloc_r+0x500>
 50587fc:	a8800017 	ldw	r2,0(r21)
 5058800:	b0800215 	stw	r2,8(r22)
 5058804:	a8800117 	ldw	r2,4(r21)
 5058808:	b0800315 	stw	r2,12(r22)
 505880c:	008006c4 	movi	r2,27
 5058810:	11803f36 	bltu	r2,r6,5058910 <_realloc_r+0x518>
 5058814:	b0800404 	addi	r2,r22,16
 5058818:	ad400204 	addi	r21,r21,8
 505881c:	a8c00017 	ldw	r3,0(r21)
 5058820:	10c00015 	stw	r3,0(r2)
 5058824:	a8c00117 	ldw	r3,4(r21)
 5058828:	10c00115 	stw	r3,4(r2)
 505882c:	a8c00217 	ldw	r3,8(r21)
 5058830:	10c00215 	stw	r3,8(r2)
 5058834:	b447883a 	add	r3,r22,r17
 5058838:	bc45c83a 	sub	r2,r23,r17
 505883c:	e0c00215 	stw	r3,8(fp)
 5058840:	10800054 	ori	r2,r2,1
 5058844:	18800115 	stw	r2,4(r3)
 5058848:	b0800117 	ldw	r2,4(r22)
 505884c:	a009883a 	mov	r4,r20
 5058850:	1080004c 	andi	r2,r2,1
 5058854:	1462b03a 	or	r17,r2,r17
 5058858:	b4400115 	stw	r17,4(r22)
 505885c:	505d4080 	call	505d408 <__malloc_unlock>
 5058860:	9005883a 	mov	r2,r18
 5058864:	003f4006 	br	5058568 <_gp+0xfffed140>
 5058868:	a8c00217 	ldw	r3,8(r21)
 505886c:	90c00215 	stw	r3,8(r18)
 5058870:	a8c00317 	ldw	r3,12(r21)
 5058874:	90c00315 	stw	r3,12(r18)
 5058878:	30801126 	beq	r6,r2,50588c0 <_realloc_r+0x4c8>
 505887c:	90800404 	addi	r2,r18,16
 5058880:	a8c00404 	addi	r3,r21,16
 5058884:	003f1906 	br	50584ec <_gp+0xfffed0c4>
 5058888:	90ffff17 	ldw	r3,-4(r18)
 505888c:	00bfff04 	movi	r2,-4
 5058890:	a825883a 	mov	r18,r21
 5058894:	1884703a 	and	r2,r3,r2
 5058898:	80a1883a 	add	r16,r16,r2
 505889c:	003f2406 	br	5058530 <_gp+0xfffed108>
 50588a0:	a8800217 	ldw	r2,8(r21)
 50588a4:	b0800415 	stw	r2,16(r22)
 50588a8:	a8800317 	ldw	r2,12(r21)
 50588ac:	b0800515 	stw	r2,20(r22)
 50588b0:	31000a26 	beq	r6,r4,50588dc <_realloc_r+0x4e4>
 50588b4:	b0800604 	addi	r2,r22,24
 50588b8:	ad400404 	addi	r21,r21,16
 50588bc:	003fa906 	br	5058764 <_gp+0xfffed33c>
 50588c0:	a9000417 	ldw	r4,16(r21)
 50588c4:	90800604 	addi	r2,r18,24
 50588c8:	a8c00604 	addi	r3,r21,24
 50588cc:	91000415 	stw	r4,16(r18)
 50588d0:	a9000517 	ldw	r4,20(r21)
 50588d4:	91000515 	stw	r4,20(r18)
 50588d8:	003f0406 	br	50584ec <_gp+0xfffed0c4>
 50588dc:	a8c00417 	ldw	r3,16(r21)
 50588e0:	ad400604 	addi	r21,r21,24
 50588e4:	b0800804 	addi	r2,r22,32
 50588e8:	b0c00615 	stw	r3,24(r22)
 50588ec:	a8ffff17 	ldw	r3,-4(r21)
 50588f0:	b0c00715 	stw	r3,28(r22)
 50588f4:	003f9b06 	br	5058764 <_gp+0xfffed33c>
 50588f8:	9005883a 	mov	r2,r18
 50588fc:	003fc706 	br	505881c <_gp+0xfffed3f4>
 5058900:	a80b883a 	mov	r5,r21
 5058904:	9009883a 	mov	r4,r18
 5058908:	50572a00 	call	50572a0 <memmove>
 505890c:	003fc906 	br	5058834 <_gp+0xfffed40c>
 5058910:	a8800217 	ldw	r2,8(r21)
 5058914:	b0800415 	stw	r2,16(r22)
 5058918:	a8800317 	ldw	r2,12(r21)
 505891c:	b0800515 	stw	r2,20(r22)
 5058920:	31000726 	beq	r6,r4,5058940 <_realloc_r+0x548>
 5058924:	b0800604 	addi	r2,r22,24
 5058928:	ad400404 	addi	r21,r21,16
 505892c:	003fbb06 	br	505881c <_gp+0xfffed3f4>
 5058930:	a009883a 	mov	r4,r20
 5058934:	505d4080 	call	505d408 <__malloc_unlock>
 5058938:	0005883a 	mov	r2,zero
 505893c:	003f0a06 	br	5058568 <_gp+0xfffed140>
 5058940:	a8c00417 	ldw	r3,16(r21)
 5058944:	ad400604 	addi	r21,r21,24
 5058948:	b0800804 	addi	r2,r22,32
 505894c:	b0c00615 	stw	r3,24(r22)
 5058950:	a8ffff17 	ldw	r3,-4(r21)
 5058954:	b0c00715 	stw	r3,28(r22)
 5058958:	003fb006 	br	505881c <_gp+0xfffed3f4>

0505895c <__fpclassifyd>:
 505895c:	00a00034 	movhi	r2,32768
 5058960:	10bfffc4 	addi	r2,r2,-1
 5058964:	2884703a 	and	r2,r5,r2
 5058968:	10000726 	beq	r2,zero,5058988 <__fpclassifyd+0x2c>
 505896c:	00fffc34 	movhi	r3,65520
 5058970:	019ff834 	movhi	r6,32736
 5058974:	28c7883a 	add	r3,r5,r3
 5058978:	31bfffc4 	addi	r6,r6,-1
 505897c:	30c00536 	bltu	r6,r3,5058994 <__fpclassifyd+0x38>
 5058980:	00800104 	movi	r2,4
 5058984:	f800283a 	ret
 5058988:	2000021e 	bne	r4,zero,5058994 <__fpclassifyd+0x38>
 505898c:	00800084 	movi	r2,2
 5058990:	f800283a 	ret
 5058994:	00dffc34 	movhi	r3,32752
 5058998:	019ff834 	movhi	r6,32736
 505899c:	28cb883a 	add	r5,r5,r3
 50589a0:	31bfffc4 	addi	r6,r6,-1
 50589a4:	317ff62e 	bgeu	r6,r5,5058980 <_gp+0xfffed558>
 50589a8:	01400434 	movhi	r5,16
 50589ac:	297fffc4 	addi	r5,r5,-1
 50589b0:	28800236 	bltu	r5,r2,50589bc <__fpclassifyd+0x60>
 50589b4:	008000c4 	movi	r2,3
 50589b8:	f800283a 	ret
 50589bc:	10c00226 	beq	r2,r3,50589c8 <__fpclassifyd+0x6c>
 50589c0:	0005883a 	mov	r2,zero
 50589c4:	f800283a 	ret
 50589c8:	2005003a 	cmpeq	r2,r4,zero
 50589cc:	f800283a 	ret

050589d0 <__sread>:
 50589d0:	defffe04 	addi	sp,sp,-8
 50589d4:	dc000015 	stw	r16,0(sp)
 50589d8:	2821883a 	mov	r16,r5
 50589dc:	2940038f 	ldh	r5,14(r5)
 50589e0:	dfc00115 	stw	ra,4(sp)
 50589e4:	505bbd00 	call	505bbd0 <_read_r>
 50589e8:	10000716 	blt	r2,zero,5058a08 <__sread+0x38>
 50589ec:	80c01417 	ldw	r3,80(r16)
 50589f0:	1887883a 	add	r3,r3,r2
 50589f4:	80c01415 	stw	r3,80(r16)
 50589f8:	dfc00117 	ldw	ra,4(sp)
 50589fc:	dc000017 	ldw	r16,0(sp)
 5058a00:	dec00204 	addi	sp,sp,8
 5058a04:	f800283a 	ret
 5058a08:	80c0030b 	ldhu	r3,12(r16)
 5058a0c:	18fbffcc 	andi	r3,r3,61439
 5058a10:	80c0030d 	sth	r3,12(r16)
 5058a14:	dfc00117 	ldw	ra,4(sp)
 5058a18:	dc000017 	ldw	r16,0(sp)
 5058a1c:	dec00204 	addi	sp,sp,8
 5058a20:	f800283a 	ret

05058a24 <__seofread>:
 5058a24:	0005883a 	mov	r2,zero
 5058a28:	f800283a 	ret

05058a2c <__swrite>:
 5058a2c:	2880030b 	ldhu	r2,12(r5)
 5058a30:	defffb04 	addi	sp,sp,-20
 5058a34:	dcc00315 	stw	r19,12(sp)
 5058a38:	dc800215 	stw	r18,8(sp)
 5058a3c:	dc400115 	stw	r17,4(sp)
 5058a40:	dc000015 	stw	r16,0(sp)
 5058a44:	dfc00415 	stw	ra,16(sp)
 5058a48:	10c0400c 	andi	r3,r2,256
 5058a4c:	2821883a 	mov	r16,r5
 5058a50:	2023883a 	mov	r17,r4
 5058a54:	3025883a 	mov	r18,r6
 5058a58:	3827883a 	mov	r19,r7
 5058a5c:	18000526 	beq	r3,zero,5058a74 <__swrite+0x48>
 5058a60:	2940038f 	ldh	r5,14(r5)
 5058a64:	01c00084 	movi	r7,2
 5058a68:	000d883a 	mov	r6,zero
 5058a6c:	505bb700 	call	505bb70 <_lseek_r>
 5058a70:	8080030b 	ldhu	r2,12(r16)
 5058a74:	8140038f 	ldh	r5,14(r16)
 5058a78:	10bbffcc 	andi	r2,r2,61439
 5058a7c:	980f883a 	mov	r7,r19
 5058a80:	900d883a 	mov	r6,r18
 5058a84:	8809883a 	mov	r4,r17
 5058a88:	8080030d 	sth	r2,12(r16)
 5058a8c:	dfc00417 	ldw	ra,16(sp)
 5058a90:	dcc00317 	ldw	r19,12(sp)
 5058a94:	dc800217 	ldw	r18,8(sp)
 5058a98:	dc400117 	ldw	r17,4(sp)
 5058a9c:	dc000017 	ldw	r16,0(sp)
 5058aa0:	dec00504 	addi	sp,sp,20
 5058aa4:	505b63c1 	jmpi	505b63c <_write_r>

05058aa8 <__sseek>:
 5058aa8:	defffe04 	addi	sp,sp,-8
 5058aac:	dc000015 	stw	r16,0(sp)
 5058ab0:	2821883a 	mov	r16,r5
 5058ab4:	2940038f 	ldh	r5,14(r5)
 5058ab8:	dfc00115 	stw	ra,4(sp)
 5058abc:	505bb700 	call	505bb70 <_lseek_r>
 5058ac0:	00ffffc4 	movi	r3,-1
 5058ac4:	10c00826 	beq	r2,r3,5058ae8 <__sseek+0x40>
 5058ac8:	80c0030b 	ldhu	r3,12(r16)
 5058acc:	80801415 	stw	r2,80(r16)
 5058ad0:	18c40014 	ori	r3,r3,4096
 5058ad4:	80c0030d 	sth	r3,12(r16)
 5058ad8:	dfc00117 	ldw	ra,4(sp)
 5058adc:	dc000017 	ldw	r16,0(sp)
 5058ae0:	dec00204 	addi	sp,sp,8
 5058ae4:	f800283a 	ret
 5058ae8:	80c0030b 	ldhu	r3,12(r16)
 5058aec:	18fbffcc 	andi	r3,r3,61439
 5058af0:	80c0030d 	sth	r3,12(r16)
 5058af4:	dfc00117 	ldw	ra,4(sp)
 5058af8:	dc000017 	ldw	r16,0(sp)
 5058afc:	dec00204 	addi	sp,sp,8
 5058b00:	f800283a 	ret

05058b04 <__sclose>:
 5058b04:	2940038f 	ldh	r5,14(r5)
 5058b08:	505b69c1 	jmpi	505b69c <_close_r>

05058b0c <strcmp>:
 5058b0c:	2144b03a 	or	r2,r4,r5
 5058b10:	108000cc 	andi	r2,r2,3
 5058b14:	1000171e 	bne	r2,zero,5058b74 <strcmp+0x68>
 5058b18:	20800017 	ldw	r2,0(r4)
 5058b1c:	28c00017 	ldw	r3,0(r5)
 5058b20:	10c0141e 	bne	r2,r3,5058b74 <strcmp+0x68>
 5058b24:	027fbff4 	movhi	r9,65279
 5058b28:	4a7fbfc4 	addi	r9,r9,-257
 5058b2c:	0086303a 	nor	r3,zero,r2
 5058b30:	02202074 	movhi	r8,32897
 5058b34:	1245883a 	add	r2,r2,r9
 5058b38:	42202004 	addi	r8,r8,-32640
 5058b3c:	10c4703a 	and	r2,r2,r3
 5058b40:	1204703a 	and	r2,r2,r8
 5058b44:	10000226 	beq	r2,zero,5058b50 <strcmp+0x44>
 5058b48:	00002306 	br	5058bd8 <strcmp+0xcc>
 5058b4c:	1000221e 	bne	r2,zero,5058bd8 <strcmp+0xcc>
 5058b50:	21000104 	addi	r4,r4,4
 5058b54:	20c00017 	ldw	r3,0(r4)
 5058b58:	29400104 	addi	r5,r5,4
 5058b5c:	29800017 	ldw	r6,0(r5)
 5058b60:	1a4f883a 	add	r7,r3,r9
 5058b64:	00c4303a 	nor	r2,zero,r3
 5058b68:	3884703a 	and	r2,r7,r2
 5058b6c:	1204703a 	and	r2,r2,r8
 5058b70:	19bff626 	beq	r3,r6,5058b4c <_gp+0xfffed724>
 5058b74:	20800003 	ldbu	r2,0(r4)
 5058b78:	10c03fcc 	andi	r3,r2,255
 5058b7c:	18c0201c 	xori	r3,r3,128
 5058b80:	18ffe004 	addi	r3,r3,-128
 5058b84:	18000c26 	beq	r3,zero,5058bb8 <strcmp+0xac>
 5058b88:	29800007 	ldb	r6,0(r5)
 5058b8c:	19800326 	beq	r3,r6,5058b9c <strcmp+0x90>
 5058b90:	00001306 	br	5058be0 <strcmp+0xd4>
 5058b94:	29800007 	ldb	r6,0(r5)
 5058b98:	11800b1e 	bne	r2,r6,5058bc8 <strcmp+0xbc>
 5058b9c:	21000044 	addi	r4,r4,1
 5058ba0:	20c00003 	ldbu	r3,0(r4)
 5058ba4:	29400044 	addi	r5,r5,1
 5058ba8:	18803fcc 	andi	r2,r3,255
 5058bac:	1080201c 	xori	r2,r2,128
 5058bb0:	10bfe004 	addi	r2,r2,-128
 5058bb4:	103ff71e 	bne	r2,zero,5058b94 <_gp+0xfffed76c>
 5058bb8:	0007883a 	mov	r3,zero
 5058bbc:	28800003 	ldbu	r2,0(r5)
 5058bc0:	1885c83a 	sub	r2,r3,r2
 5058bc4:	f800283a 	ret
 5058bc8:	28800003 	ldbu	r2,0(r5)
 5058bcc:	18c03fcc 	andi	r3,r3,255
 5058bd0:	1885c83a 	sub	r2,r3,r2
 5058bd4:	f800283a 	ret
 5058bd8:	0005883a 	mov	r2,zero
 5058bdc:	f800283a 	ret
 5058be0:	10c03fcc 	andi	r3,r2,255
 5058be4:	003ff506 	br	5058bbc <_gp+0xfffed794>

05058be8 <__ssprint_r>:
 5058be8:	30800217 	ldw	r2,8(r6)
 5058bec:	defff604 	addi	sp,sp,-40
 5058bf0:	dc800215 	stw	r18,8(sp)
 5058bf4:	dfc00915 	stw	ra,36(sp)
 5058bf8:	df000815 	stw	fp,32(sp)
 5058bfc:	ddc00715 	stw	r23,28(sp)
 5058c00:	dd800615 	stw	r22,24(sp)
 5058c04:	dd400515 	stw	r21,20(sp)
 5058c08:	dd000415 	stw	r20,16(sp)
 5058c0c:	dcc00315 	stw	r19,12(sp)
 5058c10:	dc400115 	stw	r17,4(sp)
 5058c14:	dc000015 	stw	r16,0(sp)
 5058c18:	3025883a 	mov	r18,r6
 5058c1c:	10005826 	beq	r2,zero,5058d80 <__ssprint_r+0x198>
 5058c20:	2027883a 	mov	r19,r4
 5058c24:	35c00017 	ldw	r23,0(r6)
 5058c28:	29000017 	ldw	r4,0(r5)
 5058c2c:	28800217 	ldw	r2,8(r5)
 5058c30:	2823883a 	mov	r17,r5
 5058c34:	0039883a 	mov	fp,zero
 5058c38:	0021883a 	mov	r16,zero
 5058c3c:	80003926 	beq	r16,zero,5058d24 <__ssprint_r+0x13c>
 5058c40:	102b883a 	mov	r21,r2
 5058c44:	102d883a 	mov	r22,r2
 5058c48:	80803a36 	bltu	r16,r2,5058d34 <__ssprint_r+0x14c>
 5058c4c:	88c0030b 	ldhu	r3,12(r17)
 5058c50:	1881200c 	andi	r2,r3,1152
 5058c54:	10002626 	beq	r2,zero,5058cf0 <__ssprint_r+0x108>
 5058c58:	88800517 	ldw	r2,20(r17)
 5058c5c:	89400417 	ldw	r5,16(r17)
 5058c60:	81800044 	addi	r6,r16,1
 5058c64:	108f883a 	add	r7,r2,r2
 5058c68:	3885883a 	add	r2,r7,r2
 5058c6c:	100ed7fa 	srli	r7,r2,31
 5058c70:	216dc83a 	sub	r22,r4,r5
 5058c74:	3589883a 	add	r4,r6,r22
 5058c78:	3885883a 	add	r2,r7,r2
 5058c7c:	102bd07a 	srai	r21,r2,1
 5058c80:	a80d883a 	mov	r6,r21
 5058c84:	a900022e 	bgeu	r21,r4,5058c90 <__ssprint_r+0xa8>
 5058c88:	202b883a 	mov	r21,r4
 5058c8c:	200d883a 	mov	r6,r4
 5058c90:	18c1000c 	andi	r3,r3,1024
 5058c94:	18002a26 	beq	r3,zero,5058d40 <__ssprint_r+0x158>
 5058c98:	300b883a 	mov	r5,r6
 5058c9c:	9809883a 	mov	r4,r19
 5058ca0:	504f0c00 	call	504f0c0 <_malloc_r>
 5058ca4:	1029883a 	mov	r20,r2
 5058ca8:	10002c26 	beq	r2,zero,5058d5c <__ssprint_r+0x174>
 5058cac:	89400417 	ldw	r5,16(r17)
 5058cb0:	b00d883a 	mov	r6,r22
 5058cb4:	1009883a 	mov	r4,r2
 5058cb8:	504f8cc0 	call	504f8cc <memcpy>
 5058cbc:	8880030b 	ldhu	r2,12(r17)
 5058cc0:	00fedfc4 	movi	r3,-1153
 5058cc4:	10c4703a 	and	r2,r2,r3
 5058cc8:	10802014 	ori	r2,r2,128
 5058ccc:	8880030d 	sth	r2,12(r17)
 5058cd0:	a589883a 	add	r4,r20,r22
 5058cd4:	adadc83a 	sub	r22,r21,r22
 5058cd8:	8d400515 	stw	r21,20(r17)
 5058cdc:	8d800215 	stw	r22,8(r17)
 5058ce0:	8d000415 	stw	r20,16(r17)
 5058ce4:	89000015 	stw	r4,0(r17)
 5058ce8:	802b883a 	mov	r21,r16
 5058cec:	802d883a 	mov	r22,r16
 5058cf0:	b00d883a 	mov	r6,r22
 5058cf4:	e00b883a 	mov	r5,fp
 5058cf8:	50572a00 	call	50572a0 <memmove>
 5058cfc:	88800217 	ldw	r2,8(r17)
 5058d00:	89000017 	ldw	r4,0(r17)
 5058d04:	90c00217 	ldw	r3,8(r18)
 5058d08:	1545c83a 	sub	r2,r2,r21
 5058d0c:	2589883a 	add	r4,r4,r22
 5058d10:	88800215 	stw	r2,8(r17)
 5058d14:	89000015 	stw	r4,0(r17)
 5058d18:	1c21c83a 	sub	r16,r3,r16
 5058d1c:	94000215 	stw	r16,8(r18)
 5058d20:	80001726 	beq	r16,zero,5058d80 <__ssprint_r+0x198>
 5058d24:	bf000017 	ldw	fp,0(r23)
 5058d28:	bc000117 	ldw	r16,4(r23)
 5058d2c:	bdc00204 	addi	r23,r23,8
 5058d30:	003fc206 	br	5058c3c <_gp+0xfffed814>
 5058d34:	802b883a 	mov	r21,r16
 5058d38:	802d883a 	mov	r22,r16
 5058d3c:	003fec06 	br	5058cf0 <_gp+0xfffed8c8>
 5058d40:	9809883a 	mov	r4,r19
 5058d44:	50583f80 	call	50583f8 <_realloc_r>
 5058d48:	1029883a 	mov	r20,r2
 5058d4c:	103fe01e 	bne	r2,zero,5058cd0 <_gp+0xfffed8a8>
 5058d50:	89400417 	ldw	r5,16(r17)
 5058d54:	9809883a 	mov	r4,r19
 5058d58:	50565d00 	call	50565d0 <_free_r>
 5058d5c:	88c0030b 	ldhu	r3,12(r17)
 5058d60:	00800304 	movi	r2,12
 5058d64:	98800015 	stw	r2,0(r19)
 5058d68:	18c01014 	ori	r3,r3,64
 5058d6c:	88c0030d 	sth	r3,12(r17)
 5058d70:	00bfffc4 	movi	r2,-1
 5058d74:	90000215 	stw	zero,8(r18)
 5058d78:	90000115 	stw	zero,4(r18)
 5058d7c:	00000206 	br	5058d88 <__ssprint_r+0x1a0>
 5058d80:	90000115 	stw	zero,4(r18)
 5058d84:	0005883a 	mov	r2,zero
 5058d88:	dfc00917 	ldw	ra,36(sp)
 5058d8c:	df000817 	ldw	fp,32(sp)
 5058d90:	ddc00717 	ldw	r23,28(sp)
 5058d94:	dd800617 	ldw	r22,24(sp)
 5058d98:	dd400517 	ldw	r21,20(sp)
 5058d9c:	dd000417 	ldw	r20,16(sp)
 5058da0:	dcc00317 	ldw	r19,12(sp)
 5058da4:	dc800217 	ldw	r18,8(sp)
 5058da8:	dc400117 	ldw	r17,4(sp)
 5058dac:	dc000017 	ldw	r16,0(sp)
 5058db0:	dec00a04 	addi	sp,sp,40
 5058db4:	f800283a 	ret

05058db8 <___svfiprintf_internal_r>:
 5058db8:	2880030b 	ldhu	r2,12(r5)
 5058dbc:	deffc804 	addi	sp,sp,-224
 5058dc0:	dcc03115 	stw	r19,196(sp)
 5058dc4:	dfc03715 	stw	ra,220(sp)
 5058dc8:	df003615 	stw	fp,216(sp)
 5058dcc:	ddc03515 	stw	r23,212(sp)
 5058dd0:	dd803415 	stw	r22,208(sp)
 5058dd4:	dd403315 	stw	r21,204(sp)
 5058dd8:	dd003215 	stw	r20,200(sp)
 5058ddc:	dc803015 	stw	r18,192(sp)
 5058de0:	dc402f15 	stw	r17,188(sp)
 5058de4:	dc002e15 	stw	r16,184(sp)
 5058de8:	d9402715 	stw	r5,156(sp)
 5058dec:	d9002a15 	stw	r4,168(sp)
 5058df0:	1080200c 	andi	r2,r2,128
 5058df4:	d9c02315 	stw	r7,140(sp)
 5058df8:	3027883a 	mov	r19,r6
 5058dfc:	10000226 	beq	r2,zero,5058e08 <___svfiprintf_internal_r+0x50>
 5058e00:	28800417 	ldw	r2,16(r5)
 5058e04:	10041d26 	beq	r2,zero,5059e7c <___svfiprintf_internal_r+0x10c4>
 5058e08:	dac01a04 	addi	r11,sp,104
 5058e0c:	dac01e15 	stw	r11,120(sp)
 5058e10:	d8801e17 	ldw	r2,120(sp)
 5058e14:	dac019c4 	addi	r11,sp,103
 5058e18:	dd402a17 	ldw	r21,168(sp)
 5058e1c:	ddc02717 	ldw	r23,156(sp)
 5058e20:	058141b4 	movhi	r22,1286
 5058e24:	050141b4 	movhi	r20,1286
 5058e28:	dac01f15 	stw	r11,124(sp)
 5058e2c:	12d7c83a 	sub	r11,r2,r11
 5058e30:	b584fa04 	addi	r22,r22,5096
 5058e34:	a504f604 	addi	r20,r20,5080
 5058e38:	dec01a15 	stw	sp,104(sp)
 5058e3c:	d8001c15 	stw	zero,112(sp)
 5058e40:	d8001b15 	stw	zero,108(sp)
 5058e44:	d811883a 	mov	r8,sp
 5058e48:	d8002915 	stw	zero,164(sp)
 5058e4c:	d8002515 	stw	zero,148(sp)
 5058e50:	dac02b15 	stw	r11,172(sp)
 5058e54:	98800007 	ldb	r2,0(r19)
 5058e58:	1002dd26 	beq	r2,zero,50599d0 <___svfiprintf_internal_r+0xc18>
 5058e5c:	00c00944 	movi	r3,37
 5058e60:	9823883a 	mov	r17,r19
 5058e64:	10c0021e 	bne	r2,r3,5058e70 <___svfiprintf_internal_r+0xb8>
 5058e68:	00001406 	br	5058ebc <___svfiprintf_internal_r+0x104>
 5058e6c:	10c00326 	beq	r2,r3,5058e7c <___svfiprintf_internal_r+0xc4>
 5058e70:	8c400044 	addi	r17,r17,1
 5058e74:	88800007 	ldb	r2,0(r17)
 5058e78:	103ffc1e 	bne	r2,zero,5058e6c <_gp+0xfffeda44>
 5058e7c:	8ce1c83a 	sub	r16,r17,r19
 5058e80:	80000e26 	beq	r16,zero,5058ebc <___svfiprintf_internal_r+0x104>
 5058e84:	d8c01c17 	ldw	r3,112(sp)
 5058e88:	d8801b17 	ldw	r2,108(sp)
 5058e8c:	44c00015 	stw	r19,0(r8)
 5058e90:	1c07883a 	add	r3,r3,r16
 5058e94:	10800044 	addi	r2,r2,1
 5058e98:	d8c01c15 	stw	r3,112(sp)
 5058e9c:	44000115 	stw	r16,4(r8)
 5058ea0:	d8801b15 	stw	r2,108(sp)
 5058ea4:	00c001c4 	movi	r3,7
 5058ea8:	18831e16 	blt	r3,r2,5059b24 <___svfiprintf_internal_r+0xd6c>
 5058eac:	42000204 	addi	r8,r8,8
 5058eb0:	dac02517 	ldw	r11,148(sp)
 5058eb4:	5c17883a 	add	r11,r11,r16
 5058eb8:	dac02515 	stw	r11,148(sp)
 5058ebc:	88800007 	ldb	r2,0(r17)
 5058ec0:	1002c526 	beq	r2,zero,50599d8 <___svfiprintf_internal_r+0xc20>
 5058ec4:	88c00047 	ldb	r3,1(r17)
 5058ec8:	8cc00044 	addi	r19,r17,1
 5058ecc:	d8001d85 	stb	zero,118(sp)
 5058ed0:	0009883a 	mov	r4,zero
 5058ed4:	000f883a 	mov	r7,zero
 5058ed8:	043fffc4 	movi	r16,-1
 5058edc:	d8002415 	stw	zero,144(sp)
 5058ee0:	0025883a 	mov	r18,zero
 5058ee4:	01401604 	movi	r5,88
 5058ee8:	01800244 	movi	r6,9
 5058eec:	02800a84 	movi	r10,42
 5058ef0:	02401b04 	movi	r9,108
 5058ef4:	9cc00044 	addi	r19,r19,1
 5058ef8:	18bff804 	addi	r2,r3,-32
 5058efc:	2881dd36 	bltu	r5,r2,5059674 <___svfiprintf_internal_r+0x8bc>
 5058f00:	100490ba 	slli	r2,r2,2
 5058f04:	02c141b4 	movhi	r11,1286
 5058f08:	5ae3c604 	addi	r11,r11,-28904
 5058f0c:	12c5883a 	add	r2,r2,r11
 5058f10:	10800017 	ldw	r2,0(r2)
 5058f14:	1000683a 	jmp	r2
 5058f18:	05059114 	movui	r20,5700
 5058f1c:	05059674 	movhi	r20,5721
 5058f20:	05059674 	movhi	r20,5721
 5058f24:	05059108 	cmpgei	r20,zero,5700
 5058f28:	05059674 	movhi	r20,5721
 5058f2c:	05059674 	movhi	r20,5721
 5058f30:	05059674 	movhi	r20,5721
 5058f34:	05059674 	movhi	r20,5721
 5058f38:	05059674 	movhi	r20,5721
 5058f3c:	05059674 	movhi	r20,5721
 5058f40:	0505907c 	xorhi	r20,zero,5697
 5058f44:	05059258 	cmpnei	r20,zero,5705
 5058f48:	05059674 	movhi	r20,5721
 5058f4c:	050590a8 	cmpgeui	r20,zero,5698
 5058f50:	050596a8 	cmpgeui	r20,zero,5722
 5058f54:	05059674 	movhi	r20,5721
 5058f58:	0505969c 	xori	r20,zero,5722
 5058f5c:	0505963c 	xorhi	r20,zero,5720
 5058f60:	0505963c 	xorhi	r20,zero,5720
 5058f64:	0505963c 	xorhi	r20,zero,5720
 5058f68:	0505963c 	xorhi	r20,zero,5720
 5058f6c:	0505963c 	xorhi	r20,zero,5720
 5058f70:	0505963c 	xorhi	r20,zero,5720
 5058f74:	0505963c 	xorhi	r20,zero,5720
 5058f78:	0505963c 	xorhi	r20,zero,5720
 5058f7c:	0505963c 	xorhi	r20,zero,5720
 5058f80:	05059674 	movhi	r20,5721
 5058f84:	05059674 	movhi	r20,5721
 5058f88:	05059674 	movhi	r20,5721
 5058f8c:	05059674 	movhi	r20,5721
 5058f90:	05059674 	movhi	r20,5721
 5058f94:	05059674 	movhi	r20,5721
 5058f98:	05059674 	movhi	r20,5721
 5058f9c:	05059674 	movhi	r20,5721
 5058fa0:	05059674 	movhi	r20,5721
 5058fa4:	05059674 	movhi	r20,5721
 5058fa8:	050595d8 	cmpnei	r20,zero,5719
 5058fac:	05059674 	movhi	r20,5721
 5058fb0:	05059674 	movhi	r20,5721
 5058fb4:	05059674 	movhi	r20,5721
 5058fb8:	05059674 	movhi	r20,5721
 5058fbc:	05059674 	movhi	r20,5721
 5058fc0:	05059674 	movhi	r20,5721
 5058fc4:	05059674 	movhi	r20,5721
 5058fc8:	05059674 	movhi	r20,5721
 5058fcc:	05059674 	movhi	r20,5721
 5058fd0:	05059674 	movhi	r20,5721
 5058fd4:	05059750 	cmplti	r20,zero,5725
 5058fd8:	05059674 	movhi	r20,5721
 5058fdc:	05059674 	movhi	r20,5721
 5058fe0:	05059674 	movhi	r20,5721
 5058fe4:	05059674 	movhi	r20,5721
 5058fe8:	05059674 	movhi	r20,5721
 5058fec:	050596e8 	cmpgeui	r20,zero,5723
 5058ff0:	05059674 	movhi	r20,5721
 5058ff4:	05059674 	movhi	r20,5721
 5058ff8:	0505941c 	xori	r20,zero,5712
 5058ffc:	05059674 	movhi	r20,5721
 5059000:	05059674 	movhi	r20,5721
 5059004:	05059674 	movhi	r20,5721
 5059008:	05059674 	movhi	r20,5721
 505900c:	05059674 	movhi	r20,5721
 5059010:	05059674 	movhi	r20,5721
 5059014:	05059674 	movhi	r20,5721
 5059018:	05059674 	movhi	r20,5721
 505901c:	05059674 	movhi	r20,5721
 5059020:	05059674 	movhi	r20,5721
 5059024:	0505930c 	andi	r20,zero,5708
 5059028:	050594b8 	rdprs	r20,zero,5714
 505902c:	05059674 	movhi	r20,5721
 5059030:	05059674 	movhi	r20,5721
 5059034:	05059674 	movhi	r20,5721
 5059038:	050594ac 	andhi	r20,zero,5714
 505903c:	050594b8 	rdprs	r20,zero,5714
 5059040:	05059674 	movhi	r20,5721
 5059044:	05059674 	movhi	r20,5721
 5059048:	0505949c 	xori	r20,zero,5714
 505904c:	05059674 	movhi	r20,5721
 5059050:	05059460 	cmpeqi	r20,zero,5713
 5059054:	05059268 	cmpgeui	r20,zero,5705
 5059058:	050590b4 	movhi	r20,5698
 505905c:	050595cc 	andi	r20,zero,5719
 5059060:	05059674 	movhi	r20,5721
 5059064:	05059580 	call	505958 <__alt_mem_new_sdram_controller_0+0x505958>
 5059068:	05059674 	movhi	r20,5721
 505906c:	050591d8 	cmpnei	r20,zero,5703
 5059070:	05059674 	movhi	r20,5721
 5059074:	05059674 	movhi	r20,5721
 5059078:	05059134 	movhi	r20,5700
 505907c:	dac02317 	ldw	r11,140(sp)
 5059080:	5ac00017 	ldw	r11,0(r11)
 5059084:	dac02415 	stw	r11,144(sp)
 5059088:	dac02317 	ldw	r11,140(sp)
 505908c:	58800104 	addi	r2,r11,4
 5059090:	dac02417 	ldw	r11,144(sp)
 5059094:	5802e90e 	bge	r11,zero,5059c3c <___svfiprintf_internal_r+0xe84>
 5059098:	dac02417 	ldw	r11,144(sp)
 505909c:	d8802315 	stw	r2,140(sp)
 50590a0:	02d7c83a 	sub	r11,zero,r11
 50590a4:	dac02415 	stw	r11,144(sp)
 50590a8:	94800114 	ori	r18,r18,4
 50590ac:	98c00007 	ldb	r3,0(r19)
 50590b0:	003f9006 	br	5058ef4 <_gp+0xfffedacc>
 50590b4:	00800c04 	movi	r2,48
 50590b8:	dac02317 	ldw	r11,140(sp)
 50590bc:	d8801d05 	stb	r2,116(sp)
 50590c0:	00801e04 	movi	r2,120
 50590c4:	d8801d45 	stb	r2,117(sp)
 50590c8:	d8001d85 	stb	zero,118(sp)
 50590cc:	58c00104 	addi	r3,r11,4
 50590d0:	5f000017 	ldw	fp,0(r11)
 50590d4:	0013883a 	mov	r9,zero
 50590d8:	90800094 	ori	r2,r18,2
 50590dc:	80032b16 	blt	r16,zero,5059d8c <___svfiprintf_internal_r+0xfd4>
 50590e0:	00bfdfc4 	movi	r2,-129
 50590e4:	90a4703a 	and	r18,r18,r2
 50590e8:	d8c02315 	stw	r3,140(sp)
 50590ec:	94800094 	ori	r18,r18,2
 50590f0:	e002dc26 	beq	fp,zero,5059c64 <___svfiprintf_internal_r+0xeac>
 50590f4:	010141b4 	movhi	r4,1286
 50590f8:	21048d04 	addi	r4,r4,4660
 50590fc:	0015883a 	mov	r10,zero
 5059100:	d9002915 	stw	r4,164(sp)
 5059104:	00002306 	br	5059194 <___svfiprintf_internal_r+0x3dc>
 5059108:	94800054 	ori	r18,r18,1
 505910c:	98c00007 	ldb	r3,0(r19)
 5059110:	003f7806 	br	5058ef4 <_gp+0xfffedacc>
 5059114:	38803fcc 	andi	r2,r7,255
 5059118:	1080201c 	xori	r2,r2,128
 505911c:	10bfe004 	addi	r2,r2,-128
 5059120:	1002f31e 	bne	r2,zero,5059cf0 <___svfiprintf_internal_r+0xf38>
 5059124:	01000044 	movi	r4,1
 5059128:	01c00804 	movi	r7,32
 505912c:	98c00007 	ldb	r3,0(r19)
 5059130:	003f7006 	br	5058ef4 <_gp+0xfffedacc>
 5059134:	21003fcc 	andi	r4,r4,255
 5059138:	2003aa1e 	bne	r4,zero,5059fe4 <___svfiprintf_internal_r+0x122c>
 505913c:	008141b4 	movhi	r2,1286
 5059140:	10848d04 	addi	r2,r2,4660
 5059144:	d8802915 	stw	r2,164(sp)
 5059148:	9080080c 	andi	r2,r18,32
 505914c:	1000ba26 	beq	r2,zero,5059438 <___svfiprintf_internal_r+0x680>
 5059150:	dac02317 	ldw	r11,140(sp)
 5059154:	5f000017 	ldw	fp,0(r11)
 5059158:	5a400117 	ldw	r9,4(r11)
 505915c:	5ac00204 	addi	r11,r11,8
 5059160:	dac02315 	stw	r11,140(sp)
 5059164:	9080004c 	andi	r2,r18,1
 5059168:	10029026 	beq	r2,zero,5059bac <___svfiprintf_internal_r+0xdf4>
 505916c:	e244b03a 	or	r2,fp,r9
 5059170:	1002d41e 	bne	r2,zero,5059cc4 <___svfiprintf_internal_r+0xf0c>
 5059174:	d8001d85 	stb	zero,118(sp)
 5059178:	80030b16 	blt	r16,zero,5059da8 <___svfiprintf_internal_r+0xff0>
 505917c:	00bfdfc4 	movi	r2,-129
 5059180:	90a4703a 	and	r18,r18,r2
 5059184:	0015883a 	mov	r10,zero
 5059188:	80002426 	beq	r16,zero,505921c <___svfiprintf_internal_r+0x464>
 505918c:	0039883a 	mov	fp,zero
 5059190:	0013883a 	mov	r9,zero
 5059194:	d9002917 	ldw	r4,164(sp)
 5059198:	dc401a04 	addi	r17,sp,104
 505919c:	e08003cc 	andi	r2,fp,15
 50591a0:	4806973a 	slli	r3,r9,28
 50591a4:	2085883a 	add	r2,r4,r2
 50591a8:	e038d13a 	srli	fp,fp,4
 50591ac:	10800003 	ldbu	r2,0(r2)
 50591b0:	4812d13a 	srli	r9,r9,4
 50591b4:	8c7fffc4 	addi	r17,r17,-1
 50591b8:	1f38b03a 	or	fp,r3,fp
 50591bc:	88800005 	stb	r2,0(r17)
 50591c0:	e244b03a 	or	r2,fp,r9
 50591c4:	103ff51e 	bne	r2,zero,505919c <_gp+0xfffedd74>
 50591c8:	dac01e17 	ldw	r11,120(sp)
 50591cc:	5c57c83a 	sub	r11,r11,r17
 50591d0:	dac02115 	stw	r11,132(sp)
 50591d4:	00001406 	br	5059228 <___svfiprintf_internal_r+0x470>
 50591d8:	21003fcc 	andi	r4,r4,255
 50591dc:	2003741e 	bne	r4,zero,5059fb0 <___svfiprintf_internal_r+0x11f8>
 50591e0:	9080080c 	andi	r2,r18,32
 50591e4:	10014526 	beq	r2,zero,50596fc <___svfiprintf_internal_r+0x944>
 50591e8:	dac02317 	ldw	r11,140(sp)
 50591ec:	d8001d85 	stb	zero,118(sp)
 50591f0:	58c00204 	addi	r3,r11,8
 50591f4:	5f000017 	ldw	fp,0(r11)
 50591f8:	5a400117 	ldw	r9,4(r11)
 50591fc:	8002d916 	blt	r16,zero,5059d64 <___svfiprintf_internal_r+0xfac>
 5059200:	013fdfc4 	movi	r4,-129
 5059204:	e244b03a 	or	r2,fp,r9
 5059208:	d8c02315 	stw	r3,140(sp)
 505920c:	9124703a 	and	r18,r18,r4
 5059210:	0015883a 	mov	r10,zero
 5059214:	1000b91e 	bne	r2,zero,50594fc <___svfiprintf_internal_r+0x744>
 5059218:	8002e61e 	bne	r16,zero,5059db4 <___svfiprintf_internal_r+0xffc>
 505921c:	0021883a 	mov	r16,zero
 5059220:	d8002115 	stw	zero,132(sp)
 5059224:	dc401a04 	addi	r17,sp,104
 5059228:	d8c02117 	ldw	r3,132(sp)
 505922c:	dc002015 	stw	r16,128(sp)
 5059230:	80c0010e 	bge	r16,r3,5059238 <___svfiprintf_internal_r+0x480>
 5059234:	d8c02015 	stw	r3,128(sp)
 5059238:	52803fcc 	andi	r10,r10,255
 505923c:	5280201c 	xori	r10,r10,128
 5059240:	52bfe004 	addi	r10,r10,-128
 5059244:	50003c26 	beq	r10,zero,5059338 <___svfiprintf_internal_r+0x580>
 5059248:	dac02017 	ldw	r11,128(sp)
 505924c:	5ac00044 	addi	r11,r11,1
 5059250:	dac02015 	stw	r11,128(sp)
 5059254:	00003806 	br	5059338 <___svfiprintf_internal_r+0x580>
 5059258:	01000044 	movi	r4,1
 505925c:	01c00ac4 	movi	r7,43
 5059260:	98c00007 	ldb	r3,0(r19)
 5059264:	003f2306 	br	5058ef4 <_gp+0xfffedacc>
 5059268:	21003fcc 	andi	r4,r4,255
 505926c:	2003481e 	bne	r4,zero,5059f90 <___svfiprintf_internal_r+0x11d8>
 5059270:	9080080c 	andi	r2,r18,32
 5059274:	10013b26 	beq	r2,zero,5059764 <___svfiprintf_internal_r+0x9ac>
 5059278:	dac02317 	ldw	r11,140(sp)
 505927c:	d8001d85 	stb	zero,118(sp)
 5059280:	58800204 	addi	r2,r11,8
 5059284:	5f000017 	ldw	fp,0(r11)
 5059288:	5a400117 	ldw	r9,4(r11)
 505928c:	8002a816 	blt	r16,zero,5059d30 <___svfiprintf_internal_r+0xf78>
 5059290:	013fdfc4 	movi	r4,-129
 5059294:	e246b03a 	or	r3,fp,r9
 5059298:	d8802315 	stw	r2,140(sp)
 505929c:	9124703a 	and	r18,r18,r4
 50592a0:	18013c26 	beq	r3,zero,5059794 <___svfiprintf_internal_r+0x9dc>
 50592a4:	0015883a 	mov	r10,zero
 50592a8:	dc401a04 	addi	r17,sp,104
 50592ac:	e006d0fa 	srli	r3,fp,3
 50592b0:	4808977a 	slli	r4,r9,29
 50592b4:	4812d0fa 	srli	r9,r9,3
 50592b8:	e70001cc 	andi	fp,fp,7
 50592bc:	e0800c04 	addi	r2,fp,48
 50592c0:	8c7fffc4 	addi	r17,r17,-1
 50592c4:	20f8b03a 	or	fp,r4,r3
 50592c8:	88800005 	stb	r2,0(r17)
 50592cc:	e246b03a 	or	r3,fp,r9
 50592d0:	183ff61e 	bne	r3,zero,50592ac <_gp+0xfffede84>
 50592d4:	90c0004c 	andi	r3,r18,1
 50592d8:	1800a526 	beq	r3,zero,5059570 <___svfiprintf_internal_r+0x7b8>
 50592dc:	10803fcc 	andi	r2,r2,255
 50592e0:	1080201c 	xori	r2,r2,128
 50592e4:	10bfe004 	addi	r2,r2,-128
 50592e8:	00c00c04 	movi	r3,48
 50592ec:	10ffb626 	beq	r2,r3,50591c8 <_gp+0xfffedda0>
 50592f0:	88ffffc5 	stb	r3,-1(r17)
 50592f4:	d8c01e17 	ldw	r3,120(sp)
 50592f8:	88bfffc4 	addi	r2,r17,-1
 50592fc:	1023883a 	mov	r17,r2
 5059300:	1887c83a 	sub	r3,r3,r2
 5059304:	d8c02115 	stw	r3,132(sp)
 5059308:	003fc706 	br	5059228 <_gp+0xfffede00>
 505930c:	dac02317 	ldw	r11,140(sp)
 5059310:	00c00044 	movi	r3,1
 5059314:	d8c02015 	stw	r3,128(sp)
 5059318:	58800017 	ldw	r2,0(r11)
 505931c:	5ac00104 	addi	r11,r11,4
 5059320:	d8001d85 	stb	zero,118(sp)
 5059324:	d8801005 	stb	r2,64(sp)
 5059328:	dac02315 	stw	r11,140(sp)
 505932c:	d8c02115 	stw	r3,132(sp)
 5059330:	dc401004 	addi	r17,sp,64
 5059334:	0021883a 	mov	r16,zero
 5059338:	90c0008c 	andi	r3,r18,2
 505933c:	d8c02215 	stw	r3,136(sp)
 5059340:	18000326 	beq	r3,zero,5059350 <___svfiprintf_internal_r+0x598>
 5059344:	dac02017 	ldw	r11,128(sp)
 5059348:	5ac00084 	addi	r11,r11,2
 505934c:	dac02015 	stw	r11,128(sp)
 5059350:	90c0210c 	andi	r3,r18,132
 5059354:	d8c02615 	stw	r3,152(sp)
 5059358:	1801131e 	bne	r3,zero,50597a8 <___svfiprintf_internal_r+0x9f0>
 505935c:	dac02417 	ldw	r11,144(sp)
 5059360:	d8c02017 	ldw	r3,128(sp)
 5059364:	58f9c83a 	sub	fp,r11,r3
 5059368:	07010f0e 	bge	zero,fp,50597a8 <___svfiprintf_internal_r+0x9f0>
 505936c:	02400404 	movi	r9,16
 5059370:	d8c01c17 	ldw	r3,112(sp)
 5059374:	d8801b17 	ldw	r2,108(sp)
 5059378:	4f02d60e 	bge	r9,fp,5059ed4 <___svfiprintf_internal_r+0x111c>
 505937c:	014141b4 	movhi	r5,1286
 5059380:	2944fa04 	addi	r5,r5,5096
 5059384:	d9402815 	stw	r5,160(sp)
 5059388:	028001c4 	movi	r10,7
 505938c:	00000306 	br	505939c <___svfiprintf_internal_r+0x5e4>
 5059390:	e73ffc04 	addi	fp,fp,-16
 5059394:	42000204 	addi	r8,r8,8
 5059398:	4f00150e 	bge	r9,fp,50593f0 <___svfiprintf_internal_r+0x638>
 505939c:	18c00404 	addi	r3,r3,16
 50593a0:	10800044 	addi	r2,r2,1
 50593a4:	45800015 	stw	r22,0(r8)
 50593a8:	42400115 	stw	r9,4(r8)
 50593ac:	d8c01c15 	stw	r3,112(sp)
 50593b0:	d8801b15 	stw	r2,108(sp)
 50593b4:	50bff60e 	bge	r10,r2,5059390 <_gp+0xfffedf68>
 50593b8:	d9801a04 	addi	r6,sp,104
 50593bc:	b80b883a 	mov	r5,r23
 50593c0:	a809883a 	mov	r4,r21
 50593c4:	da402c15 	stw	r9,176(sp)
 50593c8:	da802d15 	stw	r10,180(sp)
 50593cc:	5058be80 	call	5058be8 <__ssprint_r>
 50593d0:	da402c17 	ldw	r9,176(sp)
 50593d4:	da802d17 	ldw	r10,180(sp)
 50593d8:	1001851e 	bne	r2,zero,50599f0 <___svfiprintf_internal_r+0xc38>
 50593dc:	e73ffc04 	addi	fp,fp,-16
 50593e0:	d8c01c17 	ldw	r3,112(sp)
 50593e4:	d8801b17 	ldw	r2,108(sp)
 50593e8:	d811883a 	mov	r8,sp
 50593ec:	4f3feb16 	blt	r9,fp,505939c <_gp+0xfffedf74>
 50593f0:	dac02817 	ldw	r11,160(sp)
 50593f4:	e0c7883a 	add	r3,fp,r3
 50593f8:	10800044 	addi	r2,r2,1
 50593fc:	42c00015 	stw	r11,0(r8)
 5059400:	47000115 	stw	fp,4(r8)
 5059404:	d8c01c15 	stw	r3,112(sp)
 5059408:	d8801b15 	stw	r2,108(sp)
 505940c:	010001c4 	movi	r4,7
 5059410:	2081ee16 	blt	r4,r2,5059bcc <___svfiprintf_internal_r+0xe14>
 5059414:	42000204 	addi	r8,r8,8
 5059418:	0000e506 	br	50597b0 <___svfiprintf_internal_r+0x9f8>
 505941c:	21003fcc 	andi	r4,r4,255
 5059420:	2002dd1e 	bne	r4,zero,5059f98 <___svfiprintf_internal_r+0x11e0>
 5059424:	008141b4 	movhi	r2,1286
 5059428:	10848804 	addi	r2,r2,4640
 505942c:	d8802915 	stw	r2,164(sp)
 5059430:	9080080c 	andi	r2,r18,32
 5059434:	103f461e 	bne	r2,zero,5059150 <_gp+0xfffedd28>
 5059438:	9080040c 	andi	r2,r18,16
 505943c:	10022e1e 	bne	r2,zero,5059cf8 <___svfiprintf_internal_r+0xf40>
 5059440:	9080100c 	andi	r2,r18,64
 5059444:	dac02317 	ldw	r11,140(sp)
 5059448:	10027326 	beq	r2,zero,5059e18 <___svfiprintf_internal_r+0x1060>
 505944c:	5f00000b 	ldhu	fp,0(r11)
 5059450:	5ac00104 	addi	r11,r11,4
 5059454:	0013883a 	mov	r9,zero
 5059458:	dac02315 	stw	r11,140(sp)
 505945c:	003f4106 	br	5059164 <_gp+0xfffedd3c>
 5059460:	21003fcc 	andi	r4,r4,255
 5059464:	2002e11e 	bne	r4,zero,5059fec <___svfiprintf_internal_r+0x1234>
 5059468:	9080080c 	andi	r2,r18,32
 505946c:	1002011e 	bne	r2,zero,5059c74 <___svfiprintf_internal_r+0xebc>
 5059470:	9080040c 	andi	r2,r18,16
 5059474:	10023e1e 	bne	r2,zero,5059d70 <___svfiprintf_internal_r+0xfb8>
 5059478:	9480100c 	andi	r18,r18,64
 505947c:	90023c26 	beq	r18,zero,5059d70 <___svfiprintf_internal_r+0xfb8>
 5059480:	dac02317 	ldw	r11,140(sp)
 5059484:	58800017 	ldw	r2,0(r11)
 5059488:	5ac00104 	addi	r11,r11,4
 505948c:	dac02315 	stw	r11,140(sp)
 5059490:	dac02517 	ldw	r11,148(sp)
 5059494:	12c0000d 	sth	r11,0(r2)
 5059498:	003e6e06 	br	5058e54 <_gp+0xfffeda2c>
 505949c:	98c00007 	ldb	r3,0(r19)
 50594a0:	1a422926 	beq	r3,r9,5059d48 <___svfiprintf_internal_r+0xf90>
 50594a4:	94800414 	ori	r18,r18,16
 50594a8:	003e9206 	br	5058ef4 <_gp+0xfffedacc>
 50594ac:	94801014 	ori	r18,r18,64
 50594b0:	98c00007 	ldb	r3,0(r19)
 50594b4:	003e8f06 	br	5058ef4 <_gp+0xfffedacc>
 50594b8:	21003fcc 	andi	r4,r4,255
 50594bc:	2002c71e 	bne	r4,zero,5059fdc <___svfiprintf_internal_r+0x1224>
 50594c0:	9080080c 	andi	r2,r18,32
 50594c4:	10004926 	beq	r2,zero,50595ec <___svfiprintf_internal_r+0x834>
 50594c8:	dac02317 	ldw	r11,140(sp)
 50594cc:	58800117 	ldw	r2,4(r11)
 50594d0:	5f000017 	ldw	fp,0(r11)
 50594d4:	5ac00204 	addi	r11,r11,8
 50594d8:	dac02315 	stw	r11,140(sp)
 50594dc:	1013883a 	mov	r9,r2
 50594e0:	10004b16 	blt	r2,zero,5059610 <___svfiprintf_internal_r+0x858>
 50594e4:	da801d83 	ldbu	r10,118(sp)
 50594e8:	8001cb16 	blt	r16,zero,5059c18 <___svfiprintf_internal_r+0xe60>
 50594ec:	00ffdfc4 	movi	r3,-129
 50594f0:	e244b03a 	or	r2,fp,r9
 50594f4:	90e4703a 	and	r18,r18,r3
 50594f8:	103f4726 	beq	r2,zero,5059218 <_gp+0xfffeddf0>
 50594fc:	48008c26 	beq	r9,zero,5059730 <___svfiprintf_internal_r+0x978>
 5059500:	dc802015 	stw	r18,128(sp)
 5059504:	dc002115 	stw	r16,132(sp)
 5059508:	dc401a04 	addi	r17,sp,104
 505950c:	e021883a 	mov	r16,fp
 5059510:	da002215 	stw	r8,136(sp)
 5059514:	5039883a 	mov	fp,r10
 5059518:	4825883a 	mov	r18,r9
 505951c:	8009883a 	mov	r4,r16
 5059520:	900b883a 	mov	r5,r18
 5059524:	01800284 	movi	r6,10
 5059528:	000f883a 	mov	r7,zero
 505952c:	505c4e80 	call	505c4e8 <__umoddi3>
 5059530:	10800c04 	addi	r2,r2,48
 5059534:	8c7fffc4 	addi	r17,r17,-1
 5059538:	8009883a 	mov	r4,r16
 505953c:	900b883a 	mov	r5,r18
 5059540:	88800005 	stb	r2,0(r17)
 5059544:	01800284 	movi	r6,10
 5059548:	000f883a 	mov	r7,zero
 505954c:	505bf700 	call	505bf70 <__udivdi3>
 5059550:	1021883a 	mov	r16,r2
 5059554:	10c4b03a 	or	r2,r2,r3
 5059558:	1825883a 	mov	r18,r3
 505955c:	103fef1e 	bne	r2,zero,505951c <_gp+0xfffee0f4>
 5059560:	dc802017 	ldw	r18,128(sp)
 5059564:	dc002117 	ldw	r16,132(sp)
 5059568:	da002217 	ldw	r8,136(sp)
 505956c:	e015883a 	mov	r10,fp
 5059570:	d8c01e17 	ldw	r3,120(sp)
 5059574:	1c47c83a 	sub	r3,r3,r17
 5059578:	d8c02115 	stw	r3,132(sp)
 505957c:	003f2a06 	br	5059228 <_gp+0xfffede00>
 5059580:	dac02317 	ldw	r11,140(sp)
 5059584:	d8001d85 	stb	zero,118(sp)
 5059588:	5c400017 	ldw	r17,0(r11)
 505958c:	5f000104 	addi	fp,r11,4
 5059590:	88022f26 	beq	r17,zero,5059e50 <___svfiprintf_internal_r+0x1098>
 5059594:	80022516 	blt	r16,zero,5059e2c <___svfiprintf_internal_r+0x1074>
 5059598:	800d883a 	mov	r6,r16
 505959c:	000b883a 	mov	r5,zero
 50595a0:	8809883a 	mov	r4,r17
 50595a4:	da002c15 	stw	r8,176(sp)
 50595a8:	50571bc0 	call	50571bc <memchr>
 50595ac:	da002c17 	ldw	r8,176(sp)
 50595b0:	10026426 	beq	r2,zero,5059f44 <___svfiprintf_internal_r+0x118c>
 50595b4:	1445c83a 	sub	r2,r2,r17
 50595b8:	d8802115 	stw	r2,132(sp)
 50595bc:	da801d83 	ldbu	r10,118(sp)
 50595c0:	df002315 	stw	fp,140(sp)
 50595c4:	0021883a 	mov	r16,zero
 50595c8:	003f1706 	br	5059228 <_gp+0xfffede00>
 50595cc:	94800814 	ori	r18,r18,32
 50595d0:	98c00007 	ldb	r3,0(r19)
 50595d4:	003e4706 	br	5058ef4 <_gp+0xfffedacc>
 50595d8:	21003fcc 	andi	r4,r4,255
 50595dc:	2002701e 	bne	r4,zero,5059fa0 <___svfiprintf_internal_r+0x11e8>
 50595e0:	94800414 	ori	r18,r18,16
 50595e4:	9080080c 	andi	r2,r18,32
 50595e8:	103fb71e 	bne	r2,zero,50594c8 <_gp+0xfffee0a0>
 50595ec:	9080040c 	andi	r2,r18,16
 50595f0:	1001ab26 	beq	r2,zero,5059ca0 <___svfiprintf_internal_r+0xee8>
 50595f4:	dac02317 	ldw	r11,140(sp)
 50595f8:	5f000017 	ldw	fp,0(r11)
 50595fc:	5ac00104 	addi	r11,r11,4
 5059600:	dac02315 	stw	r11,140(sp)
 5059604:	e013d7fa 	srai	r9,fp,31
 5059608:	4805883a 	mov	r2,r9
 505960c:	103fb50e 	bge	r2,zero,50594e4 <_gp+0xfffee0bc>
 5059610:	0739c83a 	sub	fp,zero,fp
 5059614:	02800b44 	movi	r10,45
 5059618:	e004c03a 	cmpne	r2,fp,zero
 505961c:	0253c83a 	sub	r9,zero,r9
 5059620:	da801d85 	stb	r10,118(sp)
 5059624:	4893c83a 	sub	r9,r9,r2
 5059628:	80023016 	blt	r16,zero,5059eec <___svfiprintf_internal_r+0x1134>
 505962c:	00bfdfc4 	movi	r2,-129
 5059630:	90a4703a 	and	r18,r18,r2
 5059634:	483fb21e 	bne	r9,zero,5059500 <_gp+0xfffee0d8>
 5059638:	00003d06 	br	5059730 <___svfiprintf_internal_r+0x978>
 505963c:	9817883a 	mov	r11,r19
 5059640:	d8002415 	stw	zero,144(sp)
 5059644:	18bff404 	addi	r2,r3,-48
 5059648:	0019883a 	mov	r12,zero
 505964c:	58c00007 	ldb	r3,0(r11)
 5059650:	630002a4 	muli	r12,r12,10
 5059654:	9cc00044 	addi	r19,r19,1
 5059658:	9817883a 	mov	r11,r19
 505965c:	1319883a 	add	r12,r2,r12
 5059660:	18bff404 	addi	r2,r3,-48
 5059664:	30bff92e 	bgeu	r6,r2,505964c <_gp+0xfffee224>
 5059668:	db002415 	stw	r12,144(sp)
 505966c:	18bff804 	addi	r2,r3,-32
 5059670:	28be232e 	bgeu	r5,r2,5058f00 <_gp+0xfffedad8>
 5059674:	21003fcc 	andi	r4,r4,255
 5059678:	20024b1e 	bne	r4,zero,5059fa8 <___svfiprintf_internal_r+0x11f0>
 505967c:	1800d626 	beq	r3,zero,50599d8 <___svfiprintf_internal_r+0xc20>
 5059680:	02c00044 	movi	r11,1
 5059684:	dac02015 	stw	r11,128(sp)
 5059688:	d8c01005 	stb	r3,64(sp)
 505968c:	d8001d85 	stb	zero,118(sp)
 5059690:	dac02115 	stw	r11,132(sp)
 5059694:	dc401004 	addi	r17,sp,64
 5059698:	003f2606 	br	5059334 <_gp+0xfffedf0c>
 505969c:	94802014 	ori	r18,r18,128
 50596a0:	98c00007 	ldb	r3,0(r19)
 50596a4:	003e1306 	br	5058ef4 <_gp+0xfffedacc>
 50596a8:	98c00007 	ldb	r3,0(r19)
 50596ac:	9ac00044 	addi	r11,r19,1
 50596b0:	1a822b26 	beq	r3,r10,5059f60 <___svfiprintf_internal_r+0x11a8>
 50596b4:	18bff404 	addi	r2,r3,-48
 50596b8:	0021883a 	mov	r16,zero
 50596bc:	30821e36 	bltu	r6,r2,5059f38 <___svfiprintf_internal_r+0x1180>
 50596c0:	58c00007 	ldb	r3,0(r11)
 50596c4:	840002a4 	muli	r16,r16,10
 50596c8:	5cc00044 	addi	r19,r11,1
 50596cc:	9817883a 	mov	r11,r19
 50596d0:	80a1883a 	add	r16,r16,r2
 50596d4:	18bff404 	addi	r2,r3,-48
 50596d8:	30bff92e 	bgeu	r6,r2,50596c0 <_gp+0xfffee298>
 50596dc:	803e060e 	bge	r16,zero,5058ef8 <_gp+0xfffedad0>
 50596e0:	043fffc4 	movi	r16,-1
 50596e4:	003e0406 	br	5058ef8 <_gp+0xfffedad0>
 50596e8:	21003fcc 	andi	r4,r4,255
 50596ec:	2002371e 	bne	r4,zero,5059fcc <___svfiprintf_internal_r+0x1214>
 50596f0:	94800414 	ori	r18,r18,16
 50596f4:	9080080c 	andi	r2,r18,32
 50596f8:	103ebb1e 	bne	r2,zero,50591e8 <_gp+0xfffeddc0>
 50596fc:	9080040c 	andi	r2,r18,16
 5059700:	10013b26 	beq	r2,zero,5059bf0 <___svfiprintf_internal_r+0xe38>
 5059704:	dac02317 	ldw	r11,140(sp)
 5059708:	d8001d85 	stb	zero,118(sp)
 505970c:	0013883a 	mov	r9,zero
 5059710:	58800104 	addi	r2,r11,4
 5059714:	5f000017 	ldw	fp,0(r11)
 5059718:	80013d16 	blt	r16,zero,5059c10 <___svfiprintf_internal_r+0xe58>
 505971c:	00ffdfc4 	movi	r3,-129
 5059720:	d8802315 	stw	r2,140(sp)
 5059724:	90e4703a 	and	r18,r18,r3
 5059728:	0015883a 	mov	r10,zero
 505972c:	e03eba26 	beq	fp,zero,5059218 <_gp+0xfffeddf0>
 5059730:	00800244 	movi	r2,9
 5059734:	173f7236 	bltu	r2,fp,5059500 <_gp+0xfffee0d8>
 5059738:	dac02b17 	ldw	r11,172(sp)
 505973c:	e7000c04 	addi	fp,fp,48
 5059740:	df0019c5 	stb	fp,103(sp)
 5059744:	dac02115 	stw	r11,132(sp)
 5059748:	dc4019c4 	addi	r17,sp,103
 505974c:	003eb606 	br	5059228 <_gp+0xfffede00>
 5059750:	21003fcc 	andi	r4,r4,255
 5059754:	20021f1e 	bne	r4,zero,5059fd4 <___svfiprintf_internal_r+0x121c>
 5059758:	94800414 	ori	r18,r18,16
 505975c:	9080080c 	andi	r2,r18,32
 5059760:	103ec51e 	bne	r2,zero,5059278 <_gp+0xfffede50>
 5059764:	9080040c 	andi	r2,r18,16
 5059768:	10016926 	beq	r2,zero,5059d10 <___svfiprintf_internal_r+0xf58>
 505976c:	dac02317 	ldw	r11,140(sp)
 5059770:	d8001d85 	stb	zero,118(sp)
 5059774:	0013883a 	mov	r9,zero
 5059778:	58800104 	addi	r2,r11,4
 505977c:	5f000017 	ldw	fp,0(r11)
 5059780:	80016b16 	blt	r16,zero,5059d30 <___svfiprintf_internal_r+0xf78>
 5059784:	00ffdfc4 	movi	r3,-129
 5059788:	d8802315 	stw	r2,140(sp)
 505978c:	90e4703a 	and	r18,r18,r3
 5059790:	e03ec41e 	bne	fp,zero,50592a4 <_gp+0xfffede7c>
 5059794:	0015883a 	mov	r10,zero
 5059798:	8001c226 	beq	r16,zero,5059ea4 <___svfiprintf_internal_r+0x10ec>
 505979c:	0039883a 	mov	fp,zero
 50597a0:	0013883a 	mov	r9,zero
 50597a4:	003ec006 	br	50592a8 <_gp+0xfffede80>
 50597a8:	d8c01c17 	ldw	r3,112(sp)
 50597ac:	d8801b17 	ldw	r2,108(sp)
 50597b0:	d9001d87 	ldb	r4,118(sp)
 50597b4:	20000b26 	beq	r4,zero,50597e4 <___svfiprintf_internal_r+0xa2c>
 50597b8:	d9001d84 	addi	r4,sp,118
 50597bc:	18c00044 	addi	r3,r3,1
 50597c0:	10800044 	addi	r2,r2,1
 50597c4:	41000015 	stw	r4,0(r8)
 50597c8:	01000044 	movi	r4,1
 50597cc:	41000115 	stw	r4,4(r8)
 50597d0:	d8c01c15 	stw	r3,112(sp)
 50597d4:	d8801b15 	stw	r2,108(sp)
 50597d8:	010001c4 	movi	r4,7
 50597dc:	2080e116 	blt	r4,r2,5059b64 <___svfiprintf_internal_r+0xdac>
 50597e0:	42000204 	addi	r8,r8,8
 50597e4:	dac02217 	ldw	r11,136(sp)
 50597e8:	58000b26 	beq	r11,zero,5059818 <___svfiprintf_internal_r+0xa60>
 50597ec:	d9001d04 	addi	r4,sp,116
 50597f0:	18c00084 	addi	r3,r3,2
 50597f4:	10800044 	addi	r2,r2,1
 50597f8:	41000015 	stw	r4,0(r8)
 50597fc:	01000084 	movi	r4,2
 5059800:	41000115 	stw	r4,4(r8)
 5059804:	d8c01c15 	stw	r3,112(sp)
 5059808:	d8801b15 	stw	r2,108(sp)
 505980c:	010001c4 	movi	r4,7
 5059810:	2080dd16 	blt	r4,r2,5059b88 <___svfiprintf_internal_r+0xdd0>
 5059814:	42000204 	addi	r8,r8,8
 5059818:	dac02617 	ldw	r11,152(sp)
 505981c:	01002004 	movi	r4,128
 5059820:	59008426 	beq	r11,r4,5059a34 <___svfiprintf_internal_r+0xc7c>
 5059824:	dac02117 	ldw	r11,132(sp)
 5059828:	82e1c83a 	sub	r16,r16,r11
 505982c:	0400270e 	bge	zero,r16,50598cc <___svfiprintf_internal_r+0xb14>
 5059830:	01c00404 	movi	r7,16
 5059834:	3c016a0e 	bge	r7,r16,5059de0 <___svfiprintf_internal_r+0x1028>
 5059838:	014141b4 	movhi	r5,1286
 505983c:	2944f604 	addi	r5,r5,5080
 5059840:	d9402215 	stw	r5,136(sp)
 5059844:	070001c4 	movi	fp,7
 5059848:	00000306 	br	5059858 <___svfiprintf_internal_r+0xaa0>
 505984c:	843ffc04 	addi	r16,r16,-16
 5059850:	42000204 	addi	r8,r8,8
 5059854:	3c00130e 	bge	r7,r16,50598a4 <___svfiprintf_internal_r+0xaec>
 5059858:	18c00404 	addi	r3,r3,16
 505985c:	10800044 	addi	r2,r2,1
 5059860:	45000015 	stw	r20,0(r8)
 5059864:	41c00115 	stw	r7,4(r8)
 5059868:	d8c01c15 	stw	r3,112(sp)
 505986c:	d8801b15 	stw	r2,108(sp)
 5059870:	e0bff60e 	bge	fp,r2,505984c <_gp+0xfffee424>
 5059874:	d9801a04 	addi	r6,sp,104
 5059878:	b80b883a 	mov	r5,r23
 505987c:	a809883a 	mov	r4,r21
 5059880:	d9c02c15 	stw	r7,176(sp)
 5059884:	5058be80 	call	5058be8 <__ssprint_r>
 5059888:	d9c02c17 	ldw	r7,176(sp)
 505988c:	1000581e 	bne	r2,zero,50599f0 <___svfiprintf_internal_r+0xc38>
 5059890:	843ffc04 	addi	r16,r16,-16
 5059894:	d8c01c17 	ldw	r3,112(sp)
 5059898:	d8801b17 	ldw	r2,108(sp)
 505989c:	d811883a 	mov	r8,sp
 50598a0:	3c3fed16 	blt	r7,r16,5059858 <_gp+0xfffee430>
 50598a4:	dac02217 	ldw	r11,136(sp)
 50598a8:	1c07883a 	add	r3,r3,r16
 50598ac:	10800044 	addi	r2,r2,1
 50598b0:	42c00015 	stw	r11,0(r8)
 50598b4:	44000115 	stw	r16,4(r8)
 50598b8:	d8c01c15 	stw	r3,112(sp)
 50598bc:	d8801b15 	stw	r2,108(sp)
 50598c0:	010001c4 	movi	r4,7
 50598c4:	20809e16 	blt	r4,r2,5059b40 <___svfiprintf_internal_r+0xd88>
 50598c8:	42000204 	addi	r8,r8,8
 50598cc:	dac02117 	ldw	r11,132(sp)
 50598d0:	10800044 	addi	r2,r2,1
 50598d4:	44400015 	stw	r17,0(r8)
 50598d8:	58c7883a 	add	r3,r11,r3
 50598dc:	42c00115 	stw	r11,4(r8)
 50598e0:	d8c01c15 	stw	r3,112(sp)
 50598e4:	d8801b15 	stw	r2,108(sp)
 50598e8:	010001c4 	movi	r4,7
 50598ec:	20807f16 	blt	r4,r2,5059aec <___svfiprintf_internal_r+0xd34>
 50598f0:	42000204 	addi	r8,r8,8
 50598f4:	9480010c 	andi	r18,r18,4
 50598f8:	90002926 	beq	r18,zero,50599a0 <___svfiprintf_internal_r+0xbe8>
 50598fc:	dac02417 	ldw	r11,144(sp)
 5059900:	d8802017 	ldw	r2,128(sp)
 5059904:	58a1c83a 	sub	r16,r11,r2
 5059908:	0400250e 	bge	zero,r16,50599a0 <___svfiprintf_internal_r+0xbe8>
 505990c:	04400404 	movi	r17,16
 5059910:	d8801b17 	ldw	r2,108(sp)
 5059914:	8c017c0e 	bge	r17,r16,5059f08 <___svfiprintf_internal_r+0x1150>
 5059918:	014141b4 	movhi	r5,1286
 505991c:	2944fa04 	addi	r5,r5,5096
 5059920:	d9402815 	stw	r5,160(sp)
 5059924:	048001c4 	movi	r18,7
 5059928:	00000306 	br	5059938 <___svfiprintf_internal_r+0xb80>
 505992c:	843ffc04 	addi	r16,r16,-16
 5059930:	42000204 	addi	r8,r8,8
 5059934:	8c00110e 	bge	r17,r16,505997c <___svfiprintf_internal_r+0xbc4>
 5059938:	18c00404 	addi	r3,r3,16
 505993c:	10800044 	addi	r2,r2,1
 5059940:	45800015 	stw	r22,0(r8)
 5059944:	44400115 	stw	r17,4(r8)
 5059948:	d8c01c15 	stw	r3,112(sp)
 505994c:	d8801b15 	stw	r2,108(sp)
 5059950:	90bff60e 	bge	r18,r2,505992c <_gp+0xfffee504>
 5059954:	d9801a04 	addi	r6,sp,104
 5059958:	b80b883a 	mov	r5,r23
 505995c:	a809883a 	mov	r4,r21
 5059960:	5058be80 	call	5058be8 <__ssprint_r>
 5059964:	1000221e 	bne	r2,zero,50599f0 <___svfiprintf_internal_r+0xc38>
 5059968:	843ffc04 	addi	r16,r16,-16
 505996c:	d8c01c17 	ldw	r3,112(sp)
 5059970:	d8801b17 	ldw	r2,108(sp)
 5059974:	d811883a 	mov	r8,sp
 5059978:	8c3fef16 	blt	r17,r16,5059938 <_gp+0xfffee510>
 505997c:	dac02817 	ldw	r11,160(sp)
 5059980:	1c07883a 	add	r3,r3,r16
 5059984:	10800044 	addi	r2,r2,1
 5059988:	42c00015 	stw	r11,0(r8)
 505998c:	44000115 	stw	r16,4(r8)
 5059990:	d8c01c15 	stw	r3,112(sp)
 5059994:	d8801b15 	stw	r2,108(sp)
 5059998:	010001c4 	movi	r4,7
 505999c:	2080aa16 	blt	r4,r2,5059c48 <___svfiprintf_internal_r+0xe90>
 50599a0:	d8802417 	ldw	r2,144(sp)
 50599a4:	dac02017 	ldw	r11,128(sp)
 50599a8:	12c0010e 	bge	r2,r11,50599b0 <___svfiprintf_internal_r+0xbf8>
 50599ac:	5805883a 	mov	r2,r11
 50599b0:	dac02517 	ldw	r11,148(sp)
 50599b4:	5897883a 	add	r11,r11,r2
 50599b8:	dac02515 	stw	r11,148(sp)
 50599bc:	1800531e 	bne	r3,zero,5059b0c <___svfiprintf_internal_r+0xd54>
 50599c0:	98800007 	ldb	r2,0(r19)
 50599c4:	d8001b15 	stw	zero,108(sp)
 50599c8:	d811883a 	mov	r8,sp
 50599cc:	103d231e 	bne	r2,zero,5058e5c <_gp+0xfffeda34>
 50599d0:	9823883a 	mov	r17,r19
 50599d4:	003d3906 	br	5058ebc <_gp+0xfffeda94>
 50599d8:	d8801c17 	ldw	r2,112(sp)
 50599dc:	10000426 	beq	r2,zero,50599f0 <___svfiprintf_internal_r+0xc38>
 50599e0:	d9402717 	ldw	r5,156(sp)
 50599e4:	d9002a17 	ldw	r4,168(sp)
 50599e8:	d9801a04 	addi	r6,sp,104
 50599ec:	5058be80 	call	5058be8 <__ssprint_r>
 50599f0:	dac02717 	ldw	r11,156(sp)
 50599f4:	d8802517 	ldw	r2,148(sp)
 50599f8:	58c0030b 	ldhu	r3,12(r11)
 50599fc:	18c0100c 	andi	r3,r3,64
 5059a00:	1801381e 	bne	r3,zero,5059ee4 <___svfiprintf_internal_r+0x112c>
 5059a04:	dfc03717 	ldw	ra,220(sp)
 5059a08:	df003617 	ldw	fp,216(sp)
 5059a0c:	ddc03517 	ldw	r23,212(sp)
 5059a10:	dd803417 	ldw	r22,208(sp)
 5059a14:	dd403317 	ldw	r21,204(sp)
 5059a18:	dd003217 	ldw	r20,200(sp)
 5059a1c:	dcc03117 	ldw	r19,196(sp)
 5059a20:	dc803017 	ldw	r18,192(sp)
 5059a24:	dc402f17 	ldw	r17,188(sp)
 5059a28:	dc002e17 	ldw	r16,184(sp)
 5059a2c:	dec03804 	addi	sp,sp,224
 5059a30:	f800283a 	ret
 5059a34:	dac02417 	ldw	r11,144(sp)
 5059a38:	d9002017 	ldw	r4,128(sp)
 5059a3c:	5939c83a 	sub	fp,r11,r4
 5059a40:	073f780e 	bge	zero,fp,5059824 <_gp+0xfffee3fc>
 5059a44:	02400404 	movi	r9,16
 5059a48:	4f01370e 	bge	r9,fp,5059f28 <___svfiprintf_internal_r+0x1170>
 5059a4c:	02c141b4 	movhi	r11,1286
 5059a50:	5ac4f604 	addi	r11,r11,5080
 5059a54:	dac02215 	stw	r11,136(sp)
 5059a58:	028001c4 	movi	r10,7
 5059a5c:	00000306 	br	5059a6c <___svfiprintf_internal_r+0xcb4>
 5059a60:	e73ffc04 	addi	fp,fp,-16
 5059a64:	42000204 	addi	r8,r8,8
 5059a68:	4f00150e 	bge	r9,fp,5059ac0 <___svfiprintf_internal_r+0xd08>
 5059a6c:	18c00404 	addi	r3,r3,16
 5059a70:	10800044 	addi	r2,r2,1
 5059a74:	45000015 	stw	r20,0(r8)
 5059a78:	42400115 	stw	r9,4(r8)
 5059a7c:	d8c01c15 	stw	r3,112(sp)
 5059a80:	d8801b15 	stw	r2,108(sp)
 5059a84:	50bff60e 	bge	r10,r2,5059a60 <_gp+0xfffee638>
 5059a88:	d9801a04 	addi	r6,sp,104
 5059a8c:	b80b883a 	mov	r5,r23
 5059a90:	a809883a 	mov	r4,r21
 5059a94:	da402c15 	stw	r9,176(sp)
 5059a98:	da802d15 	stw	r10,180(sp)
 5059a9c:	5058be80 	call	5058be8 <__ssprint_r>
 5059aa0:	da402c17 	ldw	r9,176(sp)
 5059aa4:	da802d17 	ldw	r10,180(sp)
 5059aa8:	103fd11e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059aac:	e73ffc04 	addi	fp,fp,-16
 5059ab0:	d8c01c17 	ldw	r3,112(sp)
 5059ab4:	d8801b17 	ldw	r2,108(sp)
 5059ab8:	d811883a 	mov	r8,sp
 5059abc:	4f3feb16 	blt	r9,fp,5059a6c <_gp+0xfffee644>
 5059ac0:	dac02217 	ldw	r11,136(sp)
 5059ac4:	1f07883a 	add	r3,r3,fp
 5059ac8:	10800044 	addi	r2,r2,1
 5059acc:	42c00015 	stw	r11,0(r8)
 5059ad0:	47000115 	stw	fp,4(r8)
 5059ad4:	d8c01c15 	stw	r3,112(sp)
 5059ad8:	d8801b15 	stw	r2,108(sp)
 5059adc:	010001c4 	movi	r4,7
 5059ae0:	2080b616 	blt	r4,r2,5059dbc <___svfiprintf_internal_r+0x1004>
 5059ae4:	42000204 	addi	r8,r8,8
 5059ae8:	003f4e06 	br	5059824 <_gp+0xfffee3fc>
 5059aec:	d9801a04 	addi	r6,sp,104
 5059af0:	b80b883a 	mov	r5,r23
 5059af4:	a809883a 	mov	r4,r21
 5059af8:	5058be80 	call	5058be8 <__ssprint_r>
 5059afc:	103fbc1e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059b00:	d8c01c17 	ldw	r3,112(sp)
 5059b04:	d811883a 	mov	r8,sp
 5059b08:	003f7a06 	br	50598f4 <_gp+0xfffee4cc>
 5059b0c:	d9801a04 	addi	r6,sp,104
 5059b10:	b80b883a 	mov	r5,r23
 5059b14:	a809883a 	mov	r4,r21
 5059b18:	5058be80 	call	5058be8 <__ssprint_r>
 5059b1c:	103fa826 	beq	r2,zero,50599c0 <_gp+0xfffee598>
 5059b20:	003fb306 	br	50599f0 <_gp+0xfffee5c8>
 5059b24:	d9801a04 	addi	r6,sp,104
 5059b28:	b80b883a 	mov	r5,r23
 5059b2c:	a809883a 	mov	r4,r21
 5059b30:	5058be80 	call	5058be8 <__ssprint_r>
 5059b34:	103fae1e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059b38:	d811883a 	mov	r8,sp
 5059b3c:	003cdc06 	br	5058eb0 <_gp+0xfffeda88>
 5059b40:	d9801a04 	addi	r6,sp,104
 5059b44:	b80b883a 	mov	r5,r23
 5059b48:	a809883a 	mov	r4,r21
 5059b4c:	5058be80 	call	5058be8 <__ssprint_r>
 5059b50:	103fa71e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059b54:	d8c01c17 	ldw	r3,112(sp)
 5059b58:	d8801b17 	ldw	r2,108(sp)
 5059b5c:	d811883a 	mov	r8,sp
 5059b60:	003f5a06 	br	50598cc <_gp+0xfffee4a4>
 5059b64:	d9801a04 	addi	r6,sp,104
 5059b68:	b80b883a 	mov	r5,r23
 5059b6c:	a809883a 	mov	r4,r21
 5059b70:	5058be80 	call	5058be8 <__ssprint_r>
 5059b74:	103f9e1e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059b78:	d8c01c17 	ldw	r3,112(sp)
 5059b7c:	d8801b17 	ldw	r2,108(sp)
 5059b80:	d811883a 	mov	r8,sp
 5059b84:	003f1706 	br	50597e4 <_gp+0xfffee3bc>
 5059b88:	d9801a04 	addi	r6,sp,104
 5059b8c:	b80b883a 	mov	r5,r23
 5059b90:	a809883a 	mov	r4,r21
 5059b94:	5058be80 	call	5058be8 <__ssprint_r>
 5059b98:	103f951e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059b9c:	d8c01c17 	ldw	r3,112(sp)
 5059ba0:	d8801b17 	ldw	r2,108(sp)
 5059ba4:	d811883a 	mov	r8,sp
 5059ba8:	003f1b06 	br	5059818 <_gp+0xfffee3f0>
 5059bac:	d8001d85 	stb	zero,118(sp)
 5059bb0:	80007b16 	blt	r16,zero,5059da0 <___svfiprintf_internal_r+0xfe8>
 5059bb4:	00ffdfc4 	movi	r3,-129
 5059bb8:	e244b03a 	or	r2,fp,r9
 5059bbc:	90e4703a 	and	r18,r18,r3
 5059bc0:	103d7026 	beq	r2,zero,5059184 <_gp+0xfffedd5c>
 5059bc4:	0015883a 	mov	r10,zero
 5059bc8:	003d7206 	br	5059194 <_gp+0xfffedd6c>
 5059bcc:	d9801a04 	addi	r6,sp,104
 5059bd0:	b80b883a 	mov	r5,r23
 5059bd4:	a809883a 	mov	r4,r21
 5059bd8:	5058be80 	call	5058be8 <__ssprint_r>
 5059bdc:	103f841e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059be0:	d8c01c17 	ldw	r3,112(sp)
 5059be4:	d8801b17 	ldw	r2,108(sp)
 5059be8:	d811883a 	mov	r8,sp
 5059bec:	003ef006 	br	50597b0 <_gp+0xfffee388>
 5059bf0:	9080100c 	andi	r2,r18,64
 5059bf4:	d8001d85 	stb	zero,118(sp)
 5059bf8:	dac02317 	ldw	r11,140(sp)
 5059bfc:	10008126 	beq	r2,zero,5059e04 <___svfiprintf_internal_r+0x104c>
 5059c00:	58800104 	addi	r2,r11,4
 5059c04:	5f00000b 	ldhu	fp,0(r11)
 5059c08:	0013883a 	mov	r9,zero
 5059c0c:	803ec30e 	bge	r16,zero,505971c <_gp+0xfffee2f4>
 5059c10:	d8802315 	stw	r2,140(sp)
 5059c14:	0015883a 	mov	r10,zero
 5059c18:	e244b03a 	or	r2,fp,r9
 5059c1c:	103e371e 	bne	r2,zero,50594fc <_gp+0xfffee0d4>
 5059c20:	00800044 	movi	r2,1
 5059c24:	10803fcc 	andi	r2,r2,255
 5059c28:	00c00044 	movi	r3,1
 5059c2c:	10c06126 	beq	r2,r3,5059db4 <___svfiprintf_internal_r+0xffc>
 5059c30:	00c00084 	movi	r3,2
 5059c34:	10fd5526 	beq	r2,r3,505918c <_gp+0xfffedd64>
 5059c38:	003ed806 	br	505979c <_gp+0xfffee374>
 5059c3c:	d8802315 	stw	r2,140(sp)
 5059c40:	98c00007 	ldb	r3,0(r19)
 5059c44:	003cab06 	br	5058ef4 <_gp+0xfffedacc>
 5059c48:	d9801a04 	addi	r6,sp,104
 5059c4c:	b80b883a 	mov	r5,r23
 5059c50:	a809883a 	mov	r4,r21
 5059c54:	5058be80 	call	5058be8 <__ssprint_r>
 5059c58:	103f651e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059c5c:	d8c01c17 	ldw	r3,112(sp)
 5059c60:	003f4f06 	br	50599a0 <_gp+0xfffee578>
 5059c64:	008141b4 	movhi	r2,1286
 5059c68:	10848d04 	addi	r2,r2,4660
 5059c6c:	d8802915 	stw	r2,164(sp)
 5059c70:	003d4406 	br	5059184 <_gp+0xfffedd5c>
 5059c74:	dac02317 	ldw	r11,140(sp)
 5059c78:	58800017 	ldw	r2,0(r11)
 5059c7c:	dac02517 	ldw	r11,148(sp)
 5059c80:	5807d7fa 	srai	r3,r11,31
 5059c84:	dac02317 	ldw	r11,140(sp)
 5059c88:	10c00115 	stw	r3,4(r2)
 5059c8c:	5ac00104 	addi	r11,r11,4
 5059c90:	dac02315 	stw	r11,140(sp)
 5059c94:	dac02517 	ldw	r11,148(sp)
 5059c98:	12c00015 	stw	r11,0(r2)
 5059c9c:	003c6d06 	br	5058e54 <_gp+0xfffeda2c>
 5059ca0:	9080100c 	andi	r2,r18,64
 5059ca4:	dac02317 	ldw	r11,140(sp)
 5059ca8:	103e5326 	beq	r2,zero,50595f8 <_gp+0xfffee1d0>
 5059cac:	5f00000f 	ldh	fp,0(r11)
 5059cb0:	5ac00104 	addi	r11,r11,4
 5059cb4:	dac02315 	stw	r11,140(sp)
 5059cb8:	e013d7fa 	srai	r9,fp,31
 5059cbc:	4805883a 	mov	r2,r9
 5059cc0:	003e0706 	br	50594e0 <_gp+0xfffee0b8>
 5059cc4:	00800c04 	movi	r2,48
 5059cc8:	d8801d05 	stb	r2,116(sp)
 5059ccc:	d8c01d45 	stb	r3,117(sp)
 5059cd0:	d8001d85 	stb	zero,118(sp)
 5059cd4:	90800094 	ori	r2,r18,2
 5059cd8:	80008f16 	blt	r16,zero,5059f18 <___svfiprintf_internal_r+0x1160>
 5059cdc:	00bfdfc4 	movi	r2,-129
 5059ce0:	90a4703a 	and	r18,r18,r2
 5059ce4:	94800094 	ori	r18,r18,2
 5059ce8:	0015883a 	mov	r10,zero
 5059cec:	003d2906 	br	5059194 <_gp+0xfffedd6c>
 5059cf0:	98c00007 	ldb	r3,0(r19)
 5059cf4:	003c7f06 	br	5058ef4 <_gp+0xfffedacc>
 5059cf8:	dac02317 	ldw	r11,140(sp)
 5059cfc:	0013883a 	mov	r9,zero
 5059d00:	5f000017 	ldw	fp,0(r11)
 5059d04:	5ac00104 	addi	r11,r11,4
 5059d08:	dac02315 	stw	r11,140(sp)
 5059d0c:	003d1506 	br	5059164 <_gp+0xfffedd3c>
 5059d10:	9080100c 	andi	r2,r18,64
 5059d14:	d8001d85 	stb	zero,118(sp)
 5059d18:	dac02317 	ldw	r11,140(sp)
 5059d1c:	10003426 	beq	r2,zero,5059df0 <___svfiprintf_internal_r+0x1038>
 5059d20:	58800104 	addi	r2,r11,4
 5059d24:	5f00000b 	ldhu	fp,0(r11)
 5059d28:	0013883a 	mov	r9,zero
 5059d2c:	803e950e 	bge	r16,zero,5059784 <_gp+0xfffee35c>
 5059d30:	e246b03a 	or	r3,fp,r9
 5059d34:	d8802315 	stw	r2,140(sp)
 5059d38:	183d5a1e 	bne	r3,zero,50592a4 <_gp+0xfffede7c>
 5059d3c:	0015883a 	mov	r10,zero
 5059d40:	0005883a 	mov	r2,zero
 5059d44:	003fb706 	br	5059c24 <_gp+0xfffee7fc>
 5059d48:	98c00043 	ldbu	r3,1(r19)
 5059d4c:	94800814 	ori	r18,r18,32
 5059d50:	9cc00044 	addi	r19,r19,1
 5059d54:	18c03fcc 	andi	r3,r3,255
 5059d58:	18c0201c 	xori	r3,r3,128
 5059d5c:	18ffe004 	addi	r3,r3,-128
 5059d60:	003c6406 	br	5058ef4 <_gp+0xfffedacc>
 5059d64:	d8c02315 	stw	r3,140(sp)
 5059d68:	0015883a 	mov	r10,zero
 5059d6c:	003faa06 	br	5059c18 <_gp+0xfffee7f0>
 5059d70:	dac02317 	ldw	r11,140(sp)
 5059d74:	58800017 	ldw	r2,0(r11)
 5059d78:	5ac00104 	addi	r11,r11,4
 5059d7c:	dac02315 	stw	r11,140(sp)
 5059d80:	dac02517 	ldw	r11,148(sp)
 5059d84:	12c00015 	stw	r11,0(r2)
 5059d88:	003c3206 	br	5058e54 <_gp+0xfffeda2c>
 5059d8c:	010141b4 	movhi	r4,1286
 5059d90:	21048d04 	addi	r4,r4,4660
 5059d94:	d9002915 	stw	r4,164(sp)
 5059d98:	d8c02315 	stw	r3,140(sp)
 5059d9c:	1025883a 	mov	r18,r2
 5059da0:	e244b03a 	or	r2,fp,r9
 5059da4:	103f871e 	bne	r2,zero,5059bc4 <_gp+0xfffee79c>
 5059da8:	0015883a 	mov	r10,zero
 5059dac:	00800084 	movi	r2,2
 5059db0:	003f9c06 	br	5059c24 <_gp+0xfffee7fc>
 5059db4:	0039883a 	mov	fp,zero
 5059db8:	003e5f06 	br	5059738 <_gp+0xfffee310>
 5059dbc:	d9801a04 	addi	r6,sp,104
 5059dc0:	b80b883a 	mov	r5,r23
 5059dc4:	a809883a 	mov	r4,r21
 5059dc8:	5058be80 	call	5058be8 <__ssprint_r>
 5059dcc:	103f081e 	bne	r2,zero,50599f0 <_gp+0xfffee5c8>
 5059dd0:	d8c01c17 	ldw	r3,112(sp)
 5059dd4:	d8801b17 	ldw	r2,108(sp)
 5059dd8:	d811883a 	mov	r8,sp
 5059ddc:	003e9106 	br	5059824 <_gp+0xfffee3fc>
 5059de0:	010141b4 	movhi	r4,1286
 5059de4:	2104f604 	addi	r4,r4,5080
 5059de8:	d9002215 	stw	r4,136(sp)
 5059dec:	003ead06 	br	50598a4 <_gp+0xfffee47c>
 5059df0:	58800104 	addi	r2,r11,4
 5059df4:	5f000017 	ldw	fp,0(r11)
 5059df8:	0013883a 	mov	r9,zero
 5059dfc:	803e610e 	bge	r16,zero,5059784 <_gp+0xfffee35c>
 5059e00:	003fcb06 	br	5059d30 <_gp+0xfffee908>
 5059e04:	58800104 	addi	r2,r11,4
 5059e08:	5f000017 	ldw	fp,0(r11)
 5059e0c:	0013883a 	mov	r9,zero
 5059e10:	803e420e 	bge	r16,zero,505971c <_gp+0xfffee2f4>
 5059e14:	003f7e06 	br	5059c10 <_gp+0xfffee7e8>
 5059e18:	5f000017 	ldw	fp,0(r11)
 5059e1c:	5ac00104 	addi	r11,r11,4
 5059e20:	0013883a 	mov	r9,zero
 5059e24:	dac02315 	stw	r11,140(sp)
 5059e28:	003cce06 	br	5059164 <_gp+0xfffedd3c>
 5059e2c:	8809883a 	mov	r4,r17
 5059e30:	da002c15 	stw	r8,176(sp)
 5059e34:	504fe240 	call	504fe24 <strlen>
 5059e38:	d8802115 	stw	r2,132(sp)
 5059e3c:	da801d83 	ldbu	r10,118(sp)
 5059e40:	df002315 	stw	fp,140(sp)
 5059e44:	0021883a 	mov	r16,zero
 5059e48:	da002c17 	ldw	r8,176(sp)
 5059e4c:	003cf606 	br	5059228 <_gp+0xfffede00>
 5059e50:	00800184 	movi	r2,6
 5059e54:	1400012e 	bgeu	r2,r16,5059e5c <___svfiprintf_internal_r+0x10a4>
 5059e58:	1021883a 	mov	r16,r2
 5059e5c:	dc002115 	stw	r16,132(sp)
 5059e60:	8005883a 	mov	r2,r16
 5059e64:	80003c16 	blt	r16,zero,5059f58 <___svfiprintf_internal_r+0x11a0>
 5059e68:	044141b4 	movhi	r17,1286
 5059e6c:	d8802015 	stw	r2,128(sp)
 5059e70:	df002315 	stw	fp,140(sp)
 5059e74:	8c449204 	addi	r17,r17,4680
 5059e78:	003d2e06 	br	5059334 <_gp+0xfffedf0c>
 5059e7c:	04001004 	movi	r16,64
 5059e80:	800b883a 	mov	r5,r16
 5059e84:	504f0c00 	call	504f0c0 <_malloc_r>
 5059e88:	dac02717 	ldw	r11,156(sp)
 5059e8c:	58800015 	stw	r2,0(r11)
 5059e90:	58800415 	stw	r2,16(r11)
 5059e94:	10004826 	beq	r2,zero,5059fb8 <___svfiprintf_internal_r+0x1200>
 5059e98:	dac02717 	ldw	r11,156(sp)
 5059e9c:	5c000515 	stw	r16,20(r11)
 5059ea0:	003bd906 	br	5058e08 <_gp+0xfffed9e0>
 5059ea4:	9080004c 	andi	r2,r18,1
 5059ea8:	0015883a 	mov	r10,zero
 5059eac:	10000626 	beq	r2,zero,5059ec8 <___svfiprintf_internal_r+0x1110>
 5059eb0:	dac02b17 	ldw	r11,172(sp)
 5059eb4:	00800c04 	movi	r2,48
 5059eb8:	d88019c5 	stb	r2,103(sp)
 5059ebc:	dac02115 	stw	r11,132(sp)
 5059ec0:	dc4019c4 	addi	r17,sp,103
 5059ec4:	003cd806 	br	5059228 <_gp+0xfffede00>
 5059ec8:	d8002115 	stw	zero,132(sp)
 5059ecc:	dc401a04 	addi	r17,sp,104
 5059ed0:	003cd506 	br	5059228 <_gp+0xfffede00>
 5059ed4:	010141b4 	movhi	r4,1286
 5059ed8:	2104fa04 	addi	r4,r4,5096
 5059edc:	d9002815 	stw	r4,160(sp)
 5059ee0:	003d4306 	br	50593f0 <_gp+0xfffedfc8>
 5059ee4:	00bfffc4 	movi	r2,-1
 5059ee8:	003ec606 	br	5059a04 <_gp+0xfffee5dc>
 5059eec:	00800044 	movi	r2,1
 5059ef0:	10803fcc 	andi	r2,r2,255
 5059ef4:	00c00044 	movi	r3,1
 5059ef8:	10fd8026 	beq	r2,r3,50594fc <_gp+0xfffee0d4>
 5059efc:	00c00084 	movi	r3,2
 5059f00:	10fca426 	beq	r2,r3,5059194 <_gp+0xfffedd6c>
 5059f04:	003ce806 	br	50592a8 <_gp+0xfffede80>
 5059f08:	010141b4 	movhi	r4,1286
 5059f0c:	2104fa04 	addi	r4,r4,5096
 5059f10:	d9002815 	stw	r4,160(sp)
 5059f14:	003e9906 	br	505997c <_gp+0xfffee554>
 5059f18:	1025883a 	mov	r18,r2
 5059f1c:	0015883a 	mov	r10,zero
 5059f20:	00800084 	movi	r2,2
 5059f24:	003ff206 	br	5059ef0 <_gp+0xfffeeac8>
 5059f28:	014141b4 	movhi	r5,1286
 5059f2c:	2944f604 	addi	r5,r5,5080
 5059f30:	d9402215 	stw	r5,136(sp)
 5059f34:	003ee206 	br	5059ac0 <_gp+0xfffee698>
 5059f38:	5827883a 	mov	r19,r11
 5059f3c:	0021883a 	mov	r16,zero
 5059f40:	003bed06 	br	5058ef8 <_gp+0xfffedad0>
 5059f44:	dc002115 	stw	r16,132(sp)
 5059f48:	da801d83 	ldbu	r10,118(sp)
 5059f4c:	df002315 	stw	fp,140(sp)
 5059f50:	0021883a 	mov	r16,zero
 5059f54:	003cb406 	br	5059228 <_gp+0xfffede00>
 5059f58:	0005883a 	mov	r2,zero
 5059f5c:	003fc206 	br	5059e68 <_gp+0xfffeea40>
 5059f60:	d8802317 	ldw	r2,140(sp)
 5059f64:	98c00043 	ldbu	r3,1(r19)
 5059f68:	5827883a 	mov	r19,r11
 5059f6c:	14000017 	ldw	r16,0(r2)
 5059f70:	10800104 	addi	r2,r2,4
 5059f74:	d8802315 	stw	r2,140(sp)
 5059f78:	803f760e 	bge	r16,zero,5059d54 <_gp+0xfffee92c>
 5059f7c:	18c03fcc 	andi	r3,r3,255
 5059f80:	18c0201c 	xori	r3,r3,128
 5059f84:	043fffc4 	movi	r16,-1
 5059f88:	18ffe004 	addi	r3,r3,-128
 5059f8c:	003bd906 	br	5058ef4 <_gp+0xfffedacc>
 5059f90:	d9c01d85 	stb	r7,118(sp)
 5059f94:	003cb606 	br	5059270 <_gp+0xfffede48>
 5059f98:	d9c01d85 	stb	r7,118(sp)
 5059f9c:	003d2106 	br	5059424 <_gp+0xfffedffc>
 5059fa0:	d9c01d85 	stb	r7,118(sp)
 5059fa4:	003d8e06 	br	50595e0 <_gp+0xfffee1b8>
 5059fa8:	d9c01d85 	stb	r7,118(sp)
 5059fac:	003db306 	br	505967c <_gp+0xfffee254>
 5059fb0:	d9c01d85 	stb	r7,118(sp)
 5059fb4:	003c8a06 	br	50591e0 <_gp+0xfffeddb8>
 5059fb8:	dac02a17 	ldw	r11,168(sp)
 5059fbc:	00800304 	movi	r2,12
 5059fc0:	58800015 	stw	r2,0(r11)
 5059fc4:	00bfffc4 	movi	r2,-1
 5059fc8:	003e8e06 	br	5059a04 <_gp+0xfffee5dc>
 5059fcc:	d9c01d85 	stb	r7,118(sp)
 5059fd0:	003dc706 	br	50596f0 <_gp+0xfffee2c8>
 5059fd4:	d9c01d85 	stb	r7,118(sp)
 5059fd8:	003ddf06 	br	5059758 <_gp+0xfffee330>
 5059fdc:	d9c01d85 	stb	r7,118(sp)
 5059fe0:	003d3706 	br	50594c0 <_gp+0xfffee098>
 5059fe4:	d9c01d85 	stb	r7,118(sp)
 5059fe8:	003c5406 	br	505913c <_gp+0xfffedd14>
 5059fec:	d9c01d85 	stb	r7,118(sp)
 5059ff0:	003d1d06 	br	5059468 <_gp+0xfffee040>

05059ff4 <__sprint_r.part.0>:
 5059ff4:	28801917 	ldw	r2,100(r5)
 5059ff8:	defff604 	addi	sp,sp,-40
 5059ffc:	dd400515 	stw	r21,20(sp)
 505a000:	dfc00915 	stw	ra,36(sp)
 505a004:	df000815 	stw	fp,32(sp)
 505a008:	ddc00715 	stw	r23,28(sp)
 505a00c:	dd800615 	stw	r22,24(sp)
 505a010:	dd000415 	stw	r20,16(sp)
 505a014:	dcc00315 	stw	r19,12(sp)
 505a018:	dc800215 	stw	r18,8(sp)
 505a01c:	dc400115 	stw	r17,4(sp)
 505a020:	dc000015 	stw	r16,0(sp)
 505a024:	1088000c 	andi	r2,r2,8192
 505a028:	302b883a 	mov	r21,r6
 505a02c:	10002e26 	beq	r2,zero,505a0e8 <__sprint_r.part.0+0xf4>
 505a030:	30800217 	ldw	r2,8(r6)
 505a034:	35800017 	ldw	r22,0(r6)
 505a038:	10002926 	beq	r2,zero,505a0e0 <__sprint_r.part.0+0xec>
 505a03c:	2827883a 	mov	r19,r5
 505a040:	2029883a 	mov	r20,r4
 505a044:	b5c00104 	addi	r23,r22,4
 505a048:	04bfffc4 	movi	r18,-1
 505a04c:	bc400017 	ldw	r17,0(r23)
 505a050:	b4000017 	ldw	r16,0(r22)
 505a054:	0039883a 	mov	fp,zero
 505a058:	8822d0ba 	srli	r17,r17,2
 505a05c:	8800031e 	bne	r17,zero,505a06c <__sprint_r.part.0+0x78>
 505a060:	00001806 	br	505a0c4 <__sprint_r.part.0+0xd0>
 505a064:	84000104 	addi	r16,r16,4
 505a068:	8f001526 	beq	r17,fp,505a0c0 <__sprint_r.part.0+0xcc>
 505a06c:	81400017 	ldw	r5,0(r16)
 505a070:	980d883a 	mov	r6,r19
 505a074:	a009883a 	mov	r4,r20
 505a078:	505ba1c0 	call	505ba1c <_fputwc_r>
 505a07c:	e7000044 	addi	fp,fp,1
 505a080:	14bff81e 	bne	r2,r18,505a064 <_gp+0xfffeec3c>
 505a084:	9005883a 	mov	r2,r18
 505a088:	a8000215 	stw	zero,8(r21)
 505a08c:	a8000115 	stw	zero,4(r21)
 505a090:	dfc00917 	ldw	ra,36(sp)
 505a094:	df000817 	ldw	fp,32(sp)
 505a098:	ddc00717 	ldw	r23,28(sp)
 505a09c:	dd800617 	ldw	r22,24(sp)
 505a0a0:	dd400517 	ldw	r21,20(sp)
 505a0a4:	dd000417 	ldw	r20,16(sp)
 505a0a8:	dcc00317 	ldw	r19,12(sp)
 505a0ac:	dc800217 	ldw	r18,8(sp)
 505a0b0:	dc400117 	ldw	r17,4(sp)
 505a0b4:	dc000017 	ldw	r16,0(sp)
 505a0b8:	dec00a04 	addi	sp,sp,40
 505a0bc:	f800283a 	ret
 505a0c0:	a8800217 	ldw	r2,8(r21)
 505a0c4:	8c63883a 	add	r17,r17,r17
 505a0c8:	8c63883a 	add	r17,r17,r17
 505a0cc:	1445c83a 	sub	r2,r2,r17
 505a0d0:	a8800215 	stw	r2,8(r21)
 505a0d4:	b5800204 	addi	r22,r22,8
 505a0d8:	bdc00204 	addi	r23,r23,8
 505a0dc:	103fdb1e 	bne	r2,zero,505a04c <_gp+0xfffeec24>
 505a0e0:	0005883a 	mov	r2,zero
 505a0e4:	003fe806 	br	505a088 <_gp+0xfffeec60>
 505a0e8:	50568e00 	call	50568e0 <__sfvwrite_r>
 505a0ec:	003fe606 	br	505a088 <_gp+0xfffeec60>

0505a0f0 <__sprint_r>:
 505a0f0:	30c00217 	ldw	r3,8(r6)
 505a0f4:	18000126 	beq	r3,zero,505a0fc <__sprint_r+0xc>
 505a0f8:	5059ff41 	jmpi	5059ff4 <__sprint_r.part.0>
 505a0fc:	30000115 	stw	zero,4(r6)
 505a100:	0005883a 	mov	r2,zero
 505a104:	f800283a 	ret

0505a108 <___vfiprintf_internal_r>:
 505a108:	deffc904 	addi	sp,sp,-220
 505a10c:	df003515 	stw	fp,212(sp)
 505a110:	dd003115 	stw	r20,196(sp)
 505a114:	dfc03615 	stw	ra,216(sp)
 505a118:	ddc03415 	stw	r23,208(sp)
 505a11c:	dd803315 	stw	r22,204(sp)
 505a120:	dd403215 	stw	r21,200(sp)
 505a124:	dcc03015 	stw	r19,192(sp)
 505a128:	dc802f15 	stw	r18,188(sp)
 505a12c:	dc402e15 	stw	r17,184(sp)
 505a130:	dc002d15 	stw	r16,180(sp)
 505a134:	d9002015 	stw	r4,128(sp)
 505a138:	d9c02215 	stw	r7,136(sp)
 505a13c:	2829883a 	mov	r20,r5
 505a140:	3039883a 	mov	fp,r6
 505a144:	20000226 	beq	r4,zero,505a150 <___vfiprintf_internal_r+0x48>
 505a148:	20800e17 	ldw	r2,56(r4)
 505a14c:	1000cf26 	beq	r2,zero,505a48c <___vfiprintf_internal_r+0x384>
 505a150:	a080030b 	ldhu	r2,12(r20)
 505a154:	10c8000c 	andi	r3,r2,8192
 505a158:	1800061e 	bne	r3,zero,505a174 <___vfiprintf_internal_r+0x6c>
 505a15c:	a1001917 	ldw	r4,100(r20)
 505a160:	00f7ffc4 	movi	r3,-8193
 505a164:	10880014 	ori	r2,r2,8192
 505a168:	20c6703a 	and	r3,r4,r3
 505a16c:	a080030d 	sth	r2,12(r20)
 505a170:	a0c01915 	stw	r3,100(r20)
 505a174:	10c0020c 	andi	r3,r2,8
 505a178:	1800a926 	beq	r3,zero,505a420 <___vfiprintf_internal_r+0x318>
 505a17c:	a0c00417 	ldw	r3,16(r20)
 505a180:	1800a726 	beq	r3,zero,505a420 <___vfiprintf_internal_r+0x318>
 505a184:	1080068c 	andi	r2,r2,26
 505a188:	00c00284 	movi	r3,10
 505a18c:	10c0ac26 	beq	r2,r3,505a440 <___vfiprintf_internal_r+0x338>
 505a190:	da801a04 	addi	r10,sp,104
 505a194:	da801e15 	stw	r10,120(sp)
 505a198:	d8801e17 	ldw	r2,120(sp)
 505a19c:	da8019c4 	addi	r10,sp,103
 505a1a0:	058141b4 	movhi	r22,1286
 505a1a4:	05c141b4 	movhi	r23,1286
 505a1a8:	da801f15 	stw	r10,124(sp)
 505a1ac:	1295c83a 	sub	r10,r2,r10
 505a1b0:	b5850204 	addi	r22,r22,5128
 505a1b4:	bdc4fe04 	addi	r23,r23,5112
 505a1b8:	dec01a15 	stw	sp,104(sp)
 505a1bc:	d8001c15 	stw	zero,112(sp)
 505a1c0:	d8001b15 	stw	zero,108(sp)
 505a1c4:	d8002615 	stw	zero,152(sp)
 505a1c8:	d8002315 	stw	zero,140(sp)
 505a1cc:	da802715 	stw	r10,156(sp)
 505a1d0:	d811883a 	mov	r8,sp
 505a1d4:	dd002115 	stw	r20,132(sp)
 505a1d8:	e021883a 	mov	r16,fp
 505a1dc:	80800007 	ldb	r2,0(r16)
 505a1e0:	1003ea26 	beq	r2,zero,505b18c <___vfiprintf_internal_r+0x1084>
 505a1e4:	00c00944 	movi	r3,37
 505a1e8:	8025883a 	mov	r18,r16
 505a1ec:	10c0021e 	bne	r2,r3,505a1f8 <___vfiprintf_internal_r+0xf0>
 505a1f0:	00001606 	br	505a24c <___vfiprintf_internal_r+0x144>
 505a1f4:	10c00326 	beq	r2,r3,505a204 <___vfiprintf_internal_r+0xfc>
 505a1f8:	94800044 	addi	r18,r18,1
 505a1fc:	90800007 	ldb	r2,0(r18)
 505a200:	103ffc1e 	bne	r2,zero,505a1f4 <_gp+0xfffeedcc>
 505a204:	9423c83a 	sub	r17,r18,r16
 505a208:	88001026 	beq	r17,zero,505a24c <___vfiprintf_internal_r+0x144>
 505a20c:	d8c01c17 	ldw	r3,112(sp)
 505a210:	d8801b17 	ldw	r2,108(sp)
 505a214:	44000015 	stw	r16,0(r8)
 505a218:	88c7883a 	add	r3,r17,r3
 505a21c:	10800044 	addi	r2,r2,1
 505a220:	44400115 	stw	r17,4(r8)
 505a224:	d8c01c15 	stw	r3,112(sp)
 505a228:	d8801b15 	stw	r2,108(sp)
 505a22c:	010001c4 	movi	r4,7
 505a230:	2080760e 	bge	r4,r2,505a40c <___vfiprintf_internal_r+0x304>
 505a234:	1803821e 	bne	r3,zero,505b040 <___vfiprintf_internal_r+0xf38>
 505a238:	da802317 	ldw	r10,140(sp)
 505a23c:	d8001b15 	stw	zero,108(sp)
 505a240:	d811883a 	mov	r8,sp
 505a244:	5455883a 	add	r10,r10,r17
 505a248:	da802315 	stw	r10,140(sp)
 505a24c:	90800007 	ldb	r2,0(r18)
 505a250:	10044626 	beq	r2,zero,505b36c <___vfiprintf_internal_r+0x1264>
 505a254:	90c00047 	ldb	r3,1(r18)
 505a258:	94000044 	addi	r16,r18,1
 505a25c:	d8001d85 	stb	zero,118(sp)
 505a260:	0009883a 	mov	r4,zero
 505a264:	000f883a 	mov	r7,zero
 505a268:	027fffc4 	movi	r9,-1
 505a26c:	0023883a 	mov	r17,zero
 505a270:	0029883a 	mov	r20,zero
 505a274:	01401604 	movi	r5,88
 505a278:	01800244 	movi	r6,9
 505a27c:	03400a84 	movi	r13,42
 505a280:	03001b04 	movi	r12,108
 505a284:	84000044 	addi	r16,r16,1
 505a288:	18bff804 	addi	r2,r3,-32
 505a28c:	28827336 	bltu	r5,r2,505ac5c <___vfiprintf_internal_r+0xb54>
 505a290:	100490ba 	slli	r2,r2,2
 505a294:	028141b4 	movhi	r10,1286
 505a298:	52a8aa04 	addi	r10,r10,-23896
 505a29c:	1285883a 	add	r2,r2,r10
 505a2a0:	10800017 	ldw	r2,0(r2)
 505a2a4:	1000683a 	jmp	r2
 505a2a8:	0505a990 	cmplti	r20,zero,5798
 505a2ac:	0505ac5c 	xori	r20,zero,5809
 505a2b0:	0505ac5c 	xori	r20,zero,5809
 505a2b4:	0505a9b0 	cmpltui	r20,zero,5798
 505a2b8:	0505ac5c 	xori	r20,zero,5809
 505a2bc:	0505ac5c 	xori	r20,zero,5809
 505a2c0:	0505ac5c 	xori	r20,zero,5809
 505a2c4:	0505ac5c 	xori	r20,zero,5809
 505a2c8:	0505ac5c 	xori	r20,zero,5809
 505a2cc:	0505ac5c 	xori	r20,zero,5809
 505a2d0:	0505ab98 	cmpnei	r20,zero,5806
 505a2d4:	0505abb4 	movhi	r20,5806
 505a2d8:	0505ac5c 	xori	r20,zero,5809
 505a2dc:	0505a49c 	xori	r20,zero,5778
 505a2e0:	0505abc4 	movi	r20,5807
 505a2e4:	0505ac5c 	xori	r20,zero,5809
 505a2e8:	0505a9bc 	xorhi	r20,zero,5798
 505a2ec:	0505a9c8 	cmpgei	r20,zero,5799
 505a2f0:	0505a9c8 	cmpgei	r20,zero,5799
 505a2f4:	0505a9c8 	cmpgei	r20,zero,5799
 505a2f8:	0505a9c8 	cmpgei	r20,zero,5799
 505a2fc:	0505a9c8 	cmpgei	r20,zero,5799
 505a300:	0505a9c8 	cmpgei	r20,zero,5799
 505a304:	0505a9c8 	cmpgei	r20,zero,5799
 505a308:	0505a9c8 	cmpgei	r20,zero,5799
 505a30c:	0505a9c8 	cmpgei	r20,zero,5799
 505a310:	0505ac5c 	xori	r20,zero,5809
 505a314:	0505ac5c 	xori	r20,zero,5809
 505a318:	0505ac5c 	xori	r20,zero,5809
 505a31c:	0505ac5c 	xori	r20,zero,5809
 505a320:	0505ac5c 	xori	r20,zero,5809
 505a324:	0505ac5c 	xori	r20,zero,5809
 505a328:	0505ac5c 	xori	r20,zero,5809
 505a32c:	0505ac5c 	xori	r20,zero,5809
 505a330:	0505ac5c 	xori	r20,zero,5809
 505a334:	0505ac5c 	xori	r20,zero,5809
 505a338:	0505a9f4 	movhi	r20,5799
 505a33c:	0505ac5c 	xori	r20,zero,5809
 505a340:	0505ac5c 	xori	r20,zero,5809
 505a344:	0505ac5c 	xori	r20,zero,5809
 505a348:	0505ac5c 	xori	r20,zero,5809
 505a34c:	0505ac5c 	xori	r20,zero,5809
 505a350:	0505ac5c 	xori	r20,zero,5809
 505a354:	0505ac5c 	xori	r20,zero,5809
 505a358:	0505ac5c 	xori	r20,zero,5809
 505a35c:	0505ac5c 	xori	r20,zero,5809
 505a360:	0505ac5c 	xori	r20,zero,5809
 505a364:	0505aa2c 	andhi	r20,zero,5800
 505a368:	0505ac5c 	xori	r20,zero,5809
 505a36c:	0505ac5c 	xori	r20,zero,5809
 505a370:	0505ac5c 	xori	r20,zero,5809
 505a374:	0505ac5c 	xori	r20,zero,5809
 505a378:	0505ac5c 	xori	r20,zero,5809
 505a37c:	0505aa84 	movi	r20,5802
 505a380:	0505ac5c 	xori	r20,zero,5809
 505a384:	0505ac5c 	xori	r20,zero,5809
 505a388:	0505aaf4 	movhi	r20,5803
 505a38c:	0505ac5c 	xori	r20,zero,5809
 505a390:	0505ac5c 	xori	r20,zero,5809
 505a394:	0505ac5c 	xori	r20,zero,5809
 505a398:	0505ac5c 	xori	r20,zero,5809
 505a39c:	0505ac5c 	xori	r20,zero,5809
 505a3a0:	0505ac5c 	xori	r20,zero,5809
 505a3a4:	0505ac5c 	xori	r20,zero,5809
 505a3a8:	0505ac5c 	xori	r20,zero,5809
 505a3ac:	0505ac5c 	xori	r20,zero,5809
 505a3b0:	0505ac5c 	xori	r20,zero,5809
 505a3b4:	0505a8a0 	cmpeqi	r20,zero,5794
 505a3b8:	0505a8cc 	andi	r20,zero,5795
 505a3bc:	0505ac5c 	xori	r20,zero,5809
 505a3c0:	0505ac5c 	xori	r20,zero,5809
 505a3c4:	0505ac5c 	xori	r20,zero,5809
 505a3c8:	0505ac04 	movi	r20,5808
 505a3cc:	0505a8cc 	andi	r20,zero,5795
 505a3d0:	0505ac5c 	xori	r20,zero,5809
 505a3d4:	0505ac5c 	xori	r20,zero,5809
 505a3d8:	0505a760 	cmpeqi	r20,zero,5789
 505a3dc:	0505ac5c 	xori	r20,zero,5809
 505a3e0:	0505a770 	cmpltui	r20,zero,5789
 505a3e4:	0505a7ac 	andhi	r20,zero,5790
 505a3e8:	0505a4a8 	cmpgeui	r20,zero,5778
 505a3ec:	0505a754 	movui	r20,5789
 505a3f0:	0505ac5c 	xori	r20,zero,5809
 505a3f4:	0505ab30 	cmpltui	r20,zero,5804
 505a3f8:	0505ac5c 	xori	r20,zero,5809
 505a3fc:	0505ab88 	cmpgei	r20,zero,5806
 505a400:	0505ac5c 	xori	r20,zero,5809
 505a404:	0505ac5c 	xori	r20,zero,5809
 505a408:	0505a84c 	andi	r20,zero,5793
 505a40c:	42000204 	addi	r8,r8,8
 505a410:	da802317 	ldw	r10,140(sp)
 505a414:	5455883a 	add	r10,r10,r17
 505a418:	da802315 	stw	r10,140(sp)
 505a41c:	003f8b06 	br	505a24c <_gp+0xfffeee24>
 505a420:	d9002017 	ldw	r4,128(sp)
 505a424:	a00b883a 	mov	r5,r20
 505a428:	50544880 	call	5054488 <__swsetup_r>
 505a42c:	1003b11e 	bne	r2,zero,505b2f4 <___vfiprintf_internal_r+0x11ec>
 505a430:	a080030b 	ldhu	r2,12(r20)
 505a434:	00c00284 	movi	r3,10
 505a438:	1080068c 	andi	r2,r2,26
 505a43c:	10ff541e 	bne	r2,r3,505a190 <_gp+0xfffeed68>
 505a440:	a080038f 	ldh	r2,14(r20)
 505a444:	103f5216 	blt	r2,zero,505a190 <_gp+0xfffeed68>
 505a448:	d9c02217 	ldw	r7,136(sp)
 505a44c:	d9002017 	ldw	r4,128(sp)
 505a450:	e00d883a 	mov	r6,fp
 505a454:	a00b883a 	mov	r5,r20
 505a458:	505b5800 	call	505b580 <__sbprintf>
 505a45c:	dfc03617 	ldw	ra,216(sp)
 505a460:	df003517 	ldw	fp,212(sp)
 505a464:	ddc03417 	ldw	r23,208(sp)
 505a468:	dd803317 	ldw	r22,204(sp)
 505a46c:	dd403217 	ldw	r21,200(sp)
 505a470:	dd003117 	ldw	r20,196(sp)
 505a474:	dcc03017 	ldw	r19,192(sp)
 505a478:	dc802f17 	ldw	r18,188(sp)
 505a47c:	dc402e17 	ldw	r17,184(sp)
 505a480:	dc002d17 	ldw	r16,180(sp)
 505a484:	dec03704 	addi	sp,sp,220
 505a488:	f800283a 	ret
 505a48c:	505645c0 	call	505645c <__sinit>
 505a490:	003f2f06 	br	505a150 <_gp+0xfffeed28>
 505a494:	0463c83a 	sub	r17,zero,r17
 505a498:	d8802215 	stw	r2,136(sp)
 505a49c:	a5000114 	ori	r20,r20,4
 505a4a0:	80c00007 	ldb	r3,0(r16)
 505a4a4:	003f7706 	br	505a284 <_gp+0xfffeee5c>
 505a4a8:	00800c04 	movi	r2,48
 505a4ac:	da802217 	ldw	r10,136(sp)
 505a4b0:	d8801d05 	stb	r2,116(sp)
 505a4b4:	00801e04 	movi	r2,120
 505a4b8:	d8801d45 	stb	r2,117(sp)
 505a4bc:	d8001d85 	stb	zero,118(sp)
 505a4c0:	50c00104 	addi	r3,r10,4
 505a4c4:	54800017 	ldw	r18,0(r10)
 505a4c8:	0027883a 	mov	r19,zero
 505a4cc:	a0800094 	ori	r2,r20,2
 505a4d0:	48030b16 	blt	r9,zero,505b100 <___vfiprintf_internal_r+0xff8>
 505a4d4:	00bfdfc4 	movi	r2,-129
 505a4d8:	a096703a 	and	r11,r20,r2
 505a4dc:	d8c02215 	stw	r3,136(sp)
 505a4e0:	5d000094 	ori	r20,r11,2
 505a4e4:	90032b1e 	bne	r18,zero,505b194 <___vfiprintf_internal_r+0x108c>
 505a4e8:	008141b4 	movhi	r2,1286
 505a4ec:	10848d04 	addi	r2,r2,4660
 505a4f0:	d8802615 	stw	r2,152(sp)
 505a4f4:	0039883a 	mov	fp,zero
 505a4f8:	48017b1e 	bne	r9,zero,505aae8 <___vfiprintf_internal_r+0x9e0>
 505a4fc:	0013883a 	mov	r9,zero
 505a500:	0027883a 	mov	r19,zero
 505a504:	dd401a04 	addi	r21,sp,104
 505a508:	4825883a 	mov	r18,r9
 505a50c:	4cc0010e 	bge	r9,r19,505a514 <___vfiprintf_internal_r+0x40c>
 505a510:	9825883a 	mov	r18,r19
 505a514:	e7003fcc 	andi	fp,fp,255
 505a518:	e700201c 	xori	fp,fp,128
 505a51c:	e73fe004 	addi	fp,fp,-128
 505a520:	e0000126 	beq	fp,zero,505a528 <___vfiprintf_internal_r+0x420>
 505a524:	94800044 	addi	r18,r18,1
 505a528:	a380008c 	andi	r14,r20,2
 505a52c:	70000126 	beq	r14,zero,505a534 <___vfiprintf_internal_r+0x42c>
 505a530:	94800084 	addi	r18,r18,2
 505a534:	a700210c 	andi	fp,r20,132
 505a538:	e001df1e 	bne	fp,zero,505acb8 <___vfiprintf_internal_r+0xbb0>
 505a53c:	8c87c83a 	sub	r3,r17,r18
 505a540:	00c1dd0e 	bge	zero,r3,505acb8 <___vfiprintf_internal_r+0xbb0>
 505a544:	01c00404 	movi	r7,16
 505a548:	d8801c17 	ldw	r2,112(sp)
 505a54c:	38c3ad0e 	bge	r7,r3,505b404 <___vfiprintf_internal_r+0x12fc>
 505a550:	028141b4 	movhi	r10,1286
 505a554:	52850204 	addi	r10,r10,5128
 505a558:	dc002915 	stw	r16,164(sp)
 505a55c:	d9801b17 	ldw	r6,108(sp)
 505a560:	da802415 	stw	r10,144(sp)
 505a564:	03c001c4 	movi	r15,7
 505a568:	da402515 	stw	r9,148(sp)
 505a56c:	db802815 	stw	r14,160(sp)
 505a570:	1821883a 	mov	r16,r3
 505a574:	00000506 	br	505a58c <___vfiprintf_internal_r+0x484>
 505a578:	31400084 	addi	r5,r6,2
 505a57c:	42000204 	addi	r8,r8,8
 505a580:	200d883a 	mov	r6,r4
 505a584:	843ffc04 	addi	r16,r16,-16
 505a588:	3c000d0e 	bge	r7,r16,505a5c0 <___vfiprintf_internal_r+0x4b8>
 505a58c:	10800404 	addi	r2,r2,16
 505a590:	31000044 	addi	r4,r6,1
 505a594:	45800015 	stw	r22,0(r8)
 505a598:	41c00115 	stw	r7,4(r8)
 505a59c:	d8801c15 	stw	r2,112(sp)
 505a5a0:	d9001b15 	stw	r4,108(sp)
 505a5a4:	793ff40e 	bge	r15,r4,505a578 <_gp+0xfffef150>
 505a5a8:	1001b51e 	bne	r2,zero,505ac80 <___vfiprintf_internal_r+0xb78>
 505a5ac:	843ffc04 	addi	r16,r16,-16
 505a5b0:	000d883a 	mov	r6,zero
 505a5b4:	01400044 	movi	r5,1
 505a5b8:	d811883a 	mov	r8,sp
 505a5bc:	3c3ff316 	blt	r7,r16,505a58c <_gp+0xfffef164>
 505a5c0:	8007883a 	mov	r3,r16
 505a5c4:	da402517 	ldw	r9,148(sp)
 505a5c8:	db802817 	ldw	r14,160(sp)
 505a5cc:	dc002917 	ldw	r16,164(sp)
 505a5d0:	da802417 	ldw	r10,144(sp)
 505a5d4:	1885883a 	add	r2,r3,r2
 505a5d8:	40c00115 	stw	r3,4(r8)
 505a5dc:	42800015 	stw	r10,0(r8)
 505a5e0:	d8801c15 	stw	r2,112(sp)
 505a5e4:	d9401b15 	stw	r5,108(sp)
 505a5e8:	00c001c4 	movi	r3,7
 505a5ec:	19426016 	blt	r3,r5,505af70 <___vfiprintf_internal_r+0xe68>
 505a5f0:	d8c01d87 	ldb	r3,118(sp)
 505a5f4:	42000204 	addi	r8,r8,8
 505a5f8:	29000044 	addi	r4,r5,1
 505a5fc:	1801b31e 	bne	r3,zero,505accc <___vfiprintf_internal_r+0xbc4>
 505a600:	7001c026 	beq	r14,zero,505ad04 <___vfiprintf_internal_r+0xbfc>
 505a604:	d8c01d04 	addi	r3,sp,116
 505a608:	10800084 	addi	r2,r2,2
 505a60c:	40c00015 	stw	r3,0(r8)
 505a610:	00c00084 	movi	r3,2
 505a614:	40c00115 	stw	r3,4(r8)
 505a618:	d8801c15 	stw	r2,112(sp)
 505a61c:	d9001b15 	stw	r4,108(sp)
 505a620:	00c001c4 	movi	r3,7
 505a624:	1902650e 	bge	r3,r4,505afbc <___vfiprintf_internal_r+0xeb4>
 505a628:	10029a1e 	bne	r2,zero,505b094 <___vfiprintf_internal_r+0xf8c>
 505a62c:	00c02004 	movi	r3,128
 505a630:	01000044 	movi	r4,1
 505a634:	000b883a 	mov	r5,zero
 505a638:	d811883a 	mov	r8,sp
 505a63c:	e0c1b31e 	bne	fp,r3,505ad0c <___vfiprintf_internal_r+0xc04>
 505a640:	8cb9c83a 	sub	fp,r17,r18
 505a644:	0701b10e 	bge	zero,fp,505ad0c <___vfiprintf_internal_r+0xc04>
 505a648:	01c00404 	movi	r7,16
 505a64c:	3f03890e 	bge	r7,fp,505b474 <___vfiprintf_internal_r+0x136c>
 505a650:	00c141b4 	movhi	r3,1286
 505a654:	18c4fe04 	addi	r3,r3,5112
 505a658:	d8c02415 	stw	r3,144(sp)
 505a65c:	8007883a 	mov	r3,r16
 505a660:	034001c4 	movi	r13,7
 505a664:	e021883a 	mov	r16,fp
 505a668:	da402515 	stw	r9,148(sp)
 505a66c:	1839883a 	mov	fp,r3
 505a670:	00000506 	br	505a688 <___vfiprintf_internal_r+0x580>
 505a674:	29800084 	addi	r6,r5,2
 505a678:	42000204 	addi	r8,r8,8
 505a67c:	180b883a 	mov	r5,r3
 505a680:	843ffc04 	addi	r16,r16,-16
 505a684:	3c000d0e 	bge	r7,r16,505a6bc <___vfiprintf_internal_r+0x5b4>
 505a688:	10800404 	addi	r2,r2,16
 505a68c:	28c00044 	addi	r3,r5,1
 505a690:	45c00015 	stw	r23,0(r8)
 505a694:	41c00115 	stw	r7,4(r8)
 505a698:	d8801c15 	stw	r2,112(sp)
 505a69c:	d8c01b15 	stw	r3,108(sp)
 505a6a0:	68fff40e 	bge	r13,r3,505a674 <_gp+0xfffef24c>
 505a6a4:	1002241e 	bne	r2,zero,505af38 <___vfiprintf_internal_r+0xe30>
 505a6a8:	843ffc04 	addi	r16,r16,-16
 505a6ac:	01800044 	movi	r6,1
 505a6b0:	000b883a 	mov	r5,zero
 505a6b4:	d811883a 	mov	r8,sp
 505a6b8:	3c3ff316 	blt	r7,r16,505a688 <_gp+0xfffef260>
 505a6bc:	da402517 	ldw	r9,148(sp)
 505a6c0:	e007883a 	mov	r3,fp
 505a6c4:	8039883a 	mov	fp,r16
 505a6c8:	1821883a 	mov	r16,r3
 505a6cc:	d8c02417 	ldw	r3,144(sp)
 505a6d0:	1705883a 	add	r2,r2,fp
 505a6d4:	47000115 	stw	fp,4(r8)
 505a6d8:	40c00015 	stw	r3,0(r8)
 505a6dc:	d8801c15 	stw	r2,112(sp)
 505a6e0:	d9801b15 	stw	r6,108(sp)
 505a6e4:	00c001c4 	movi	r3,7
 505a6e8:	19827616 	blt	r3,r6,505b0c4 <___vfiprintf_internal_r+0xfbc>
 505a6ec:	4cf9c83a 	sub	fp,r9,r19
 505a6f0:	42000204 	addi	r8,r8,8
 505a6f4:	31000044 	addi	r4,r6,1
 505a6f8:	300b883a 	mov	r5,r6
 505a6fc:	07018516 	blt	zero,fp,505ad14 <___vfiprintf_internal_r+0xc0c>
 505a700:	9885883a 	add	r2,r19,r2
 505a704:	45400015 	stw	r21,0(r8)
 505a708:	44c00115 	stw	r19,4(r8)
 505a70c:	d8801c15 	stw	r2,112(sp)
 505a710:	d9001b15 	stw	r4,108(sp)
 505a714:	00c001c4 	movi	r3,7
 505a718:	1901dd0e 	bge	r3,r4,505ae90 <___vfiprintf_internal_r+0xd88>
 505a71c:	1002401e 	bne	r2,zero,505b020 <___vfiprintf_internal_r+0xf18>
 505a720:	d8001b15 	stw	zero,108(sp)
 505a724:	a2c0010c 	andi	r11,r20,4
 505a728:	58000226 	beq	r11,zero,505a734 <___vfiprintf_internal_r+0x62c>
 505a72c:	8ca7c83a 	sub	r19,r17,r18
 505a730:	04c2f216 	blt	zero,r19,505b2fc <___vfiprintf_internal_r+0x11f4>
 505a734:	8c80010e 	bge	r17,r18,505a73c <___vfiprintf_internal_r+0x634>
 505a738:	9023883a 	mov	r17,r18
 505a73c:	da802317 	ldw	r10,140(sp)
 505a740:	5455883a 	add	r10,r10,r17
 505a744:	da802315 	stw	r10,140(sp)
 505a748:	d8001b15 	stw	zero,108(sp)
 505a74c:	d811883a 	mov	r8,sp
 505a750:	003ea206 	br	505a1dc <_gp+0xfffeedb4>
 505a754:	a5000814 	ori	r20,r20,32
 505a758:	80c00007 	ldb	r3,0(r16)
 505a75c:	003ec906 	br	505a284 <_gp+0xfffeee5c>
 505a760:	80c00007 	ldb	r3,0(r16)
 505a764:	1b030926 	beq	r3,r12,505b38c <___vfiprintf_internal_r+0x1284>
 505a768:	a5000414 	ori	r20,r20,16
 505a76c:	003ec506 	br	505a284 <_gp+0xfffeee5c>
 505a770:	21003fcc 	andi	r4,r4,255
 505a774:	20035e1e 	bne	r4,zero,505b4f0 <___vfiprintf_internal_r+0x13e8>
 505a778:	a080080c 	andi	r2,r20,32
 505a77c:	1002a526 	beq	r2,zero,505b214 <___vfiprintf_internal_r+0x110c>
 505a780:	da802217 	ldw	r10,136(sp)
 505a784:	50800017 	ldw	r2,0(r10)
 505a788:	da802317 	ldw	r10,140(sp)
 505a78c:	5007d7fa 	srai	r3,r10,31
 505a790:	da802217 	ldw	r10,136(sp)
 505a794:	10c00115 	stw	r3,4(r2)
 505a798:	52800104 	addi	r10,r10,4
 505a79c:	da802215 	stw	r10,136(sp)
 505a7a0:	da802317 	ldw	r10,140(sp)
 505a7a4:	12800015 	stw	r10,0(r2)
 505a7a8:	003e8c06 	br	505a1dc <_gp+0xfffeedb4>
 505a7ac:	21003fcc 	andi	r4,r4,255
 505a7b0:	2003511e 	bne	r4,zero,505b4f8 <___vfiprintf_internal_r+0x13f0>
 505a7b4:	a080080c 	andi	r2,r20,32
 505a7b8:	1000a126 	beq	r2,zero,505aa40 <___vfiprintf_internal_r+0x938>
 505a7bc:	da802217 	ldw	r10,136(sp)
 505a7c0:	d8001d85 	stb	zero,118(sp)
 505a7c4:	50800204 	addi	r2,r10,8
 505a7c8:	54800017 	ldw	r18,0(r10)
 505a7cc:	54c00117 	ldw	r19,4(r10)
 505a7d0:	4802b416 	blt	r9,zero,505b2a4 <___vfiprintf_internal_r+0x119c>
 505a7d4:	013fdfc4 	movi	r4,-129
 505a7d8:	94c6b03a 	or	r3,r18,r19
 505a7dc:	d8802215 	stw	r2,136(sp)
 505a7e0:	a128703a 	and	r20,r20,r4
 505a7e4:	1800a226 	beq	r3,zero,505aa70 <___vfiprintf_internal_r+0x968>
 505a7e8:	0039883a 	mov	fp,zero
 505a7ec:	dd401a04 	addi	r21,sp,104
 505a7f0:	9006d0fa 	srli	r3,r18,3
 505a7f4:	9808977a 	slli	r4,r19,29
 505a7f8:	9826d0fa 	srli	r19,r19,3
 505a7fc:	948001cc 	andi	r18,r18,7
 505a800:	90800c04 	addi	r2,r18,48
 505a804:	ad7fffc4 	addi	r21,r21,-1
 505a808:	20e4b03a 	or	r18,r4,r3
 505a80c:	a8800005 	stb	r2,0(r21)
 505a810:	94c6b03a 	or	r3,r18,r19
 505a814:	183ff61e 	bne	r3,zero,505a7f0 <_gp+0xfffef3c8>
 505a818:	a0c0004c 	andi	r3,r20,1
 505a81c:	18005926 	beq	r3,zero,505a984 <___vfiprintf_internal_r+0x87c>
 505a820:	10803fcc 	andi	r2,r2,255
 505a824:	1080201c 	xori	r2,r2,128
 505a828:	10bfe004 	addi	r2,r2,-128
 505a82c:	00c00c04 	movi	r3,48
 505a830:	10c05426 	beq	r2,r3,505a984 <___vfiprintf_internal_r+0x87c>
 505a834:	da801e17 	ldw	r10,120(sp)
 505a838:	a8bfffc4 	addi	r2,r21,-1
 505a83c:	a8ffffc5 	stb	r3,-1(r21)
 505a840:	50a7c83a 	sub	r19,r10,r2
 505a844:	102b883a 	mov	r21,r2
 505a848:	003f2f06 	br	505a508 <_gp+0xfffef0e0>
 505a84c:	21003fcc 	andi	r4,r4,255
 505a850:	2003421e 	bne	r4,zero,505b55c <___vfiprintf_internal_r+0x1454>
 505a854:	008141b4 	movhi	r2,1286
 505a858:	10848d04 	addi	r2,r2,4660
 505a85c:	d8802615 	stw	r2,152(sp)
 505a860:	a080080c 	andi	r2,r20,32
 505a864:	1000aa26 	beq	r2,zero,505ab10 <___vfiprintf_internal_r+0xa08>
 505a868:	da802217 	ldw	r10,136(sp)
 505a86c:	54800017 	ldw	r18,0(r10)
 505a870:	54c00117 	ldw	r19,4(r10)
 505a874:	52800204 	addi	r10,r10,8
 505a878:	da802215 	stw	r10,136(sp)
 505a87c:	a080004c 	andi	r2,r20,1
 505a880:	1001d226 	beq	r2,zero,505afcc <___vfiprintf_internal_r+0xec4>
 505a884:	94c4b03a 	or	r2,r18,r19
 505a888:	1002351e 	bne	r2,zero,505b160 <___vfiprintf_internal_r+0x1058>
 505a88c:	d8001d85 	stb	zero,118(sp)
 505a890:	48022216 	blt	r9,zero,505b11c <___vfiprintf_internal_r+0x1014>
 505a894:	00bfdfc4 	movi	r2,-129
 505a898:	a0a8703a 	and	r20,r20,r2
 505a89c:	003f1506 	br	505a4f4 <_gp+0xfffef0cc>
 505a8a0:	da802217 	ldw	r10,136(sp)
 505a8a4:	04800044 	movi	r18,1
 505a8a8:	d8001d85 	stb	zero,118(sp)
 505a8ac:	50800017 	ldw	r2,0(r10)
 505a8b0:	52800104 	addi	r10,r10,4
 505a8b4:	da802215 	stw	r10,136(sp)
 505a8b8:	d8801005 	stb	r2,64(sp)
 505a8bc:	9027883a 	mov	r19,r18
 505a8c0:	dd401004 	addi	r21,sp,64
 505a8c4:	0013883a 	mov	r9,zero
 505a8c8:	003f1706 	br	505a528 <_gp+0xfffef100>
 505a8cc:	21003fcc 	andi	r4,r4,255
 505a8d0:	2003201e 	bne	r4,zero,505b554 <___vfiprintf_internal_r+0x144c>
 505a8d4:	a080080c 	andi	r2,r20,32
 505a8d8:	10004b26 	beq	r2,zero,505aa08 <___vfiprintf_internal_r+0x900>
 505a8dc:	da802217 	ldw	r10,136(sp)
 505a8e0:	50800117 	ldw	r2,4(r10)
 505a8e4:	54800017 	ldw	r18,0(r10)
 505a8e8:	52800204 	addi	r10,r10,8
 505a8ec:	da802215 	stw	r10,136(sp)
 505a8f0:	1027883a 	mov	r19,r2
 505a8f4:	10022c16 	blt	r2,zero,505b1a8 <___vfiprintf_internal_r+0x10a0>
 505a8f8:	df001d83 	ldbu	fp,118(sp)
 505a8fc:	48007216 	blt	r9,zero,505aac8 <___vfiprintf_internal_r+0x9c0>
 505a900:	00ffdfc4 	movi	r3,-129
 505a904:	94c4b03a 	or	r2,r18,r19
 505a908:	a0e8703a 	and	r20,r20,r3
 505a90c:	1000cc26 	beq	r2,zero,505ac40 <___vfiprintf_internal_r+0xb38>
 505a910:	98021026 	beq	r19,zero,505b154 <___vfiprintf_internal_r+0x104c>
 505a914:	dc402415 	stw	r17,144(sp)
 505a918:	dc002515 	stw	r16,148(sp)
 505a91c:	9823883a 	mov	r17,r19
 505a920:	9021883a 	mov	r16,r18
 505a924:	dd401a04 	addi	r21,sp,104
 505a928:	4825883a 	mov	r18,r9
 505a92c:	4027883a 	mov	r19,r8
 505a930:	8009883a 	mov	r4,r16
 505a934:	880b883a 	mov	r5,r17
 505a938:	01800284 	movi	r6,10
 505a93c:	000f883a 	mov	r7,zero
 505a940:	505c4e80 	call	505c4e8 <__umoddi3>
 505a944:	10800c04 	addi	r2,r2,48
 505a948:	ad7fffc4 	addi	r21,r21,-1
 505a94c:	8009883a 	mov	r4,r16
 505a950:	880b883a 	mov	r5,r17
 505a954:	a8800005 	stb	r2,0(r21)
 505a958:	01800284 	movi	r6,10
 505a95c:	000f883a 	mov	r7,zero
 505a960:	505bf700 	call	505bf70 <__udivdi3>
 505a964:	1021883a 	mov	r16,r2
 505a968:	10c4b03a 	or	r2,r2,r3
 505a96c:	1823883a 	mov	r17,r3
 505a970:	103fef1e 	bne	r2,zero,505a930 <_gp+0xfffef508>
 505a974:	dc402417 	ldw	r17,144(sp)
 505a978:	dc002517 	ldw	r16,148(sp)
 505a97c:	9013883a 	mov	r9,r18
 505a980:	9811883a 	mov	r8,r19
 505a984:	da801e17 	ldw	r10,120(sp)
 505a988:	5567c83a 	sub	r19,r10,r21
 505a98c:	003ede06 	br	505a508 <_gp+0xfffef0e0>
 505a990:	38803fcc 	andi	r2,r7,255
 505a994:	1080201c 	xori	r2,r2,128
 505a998:	10bfe004 	addi	r2,r2,-128
 505a99c:	1002371e 	bne	r2,zero,505b27c <___vfiprintf_internal_r+0x1174>
 505a9a0:	01000044 	movi	r4,1
 505a9a4:	01c00804 	movi	r7,32
 505a9a8:	80c00007 	ldb	r3,0(r16)
 505a9ac:	003e3506 	br	505a284 <_gp+0xfffeee5c>
 505a9b0:	a5000054 	ori	r20,r20,1
 505a9b4:	80c00007 	ldb	r3,0(r16)
 505a9b8:	003e3206 	br	505a284 <_gp+0xfffeee5c>
 505a9bc:	a5002014 	ori	r20,r20,128
 505a9c0:	80c00007 	ldb	r3,0(r16)
 505a9c4:	003e2f06 	br	505a284 <_gp+0xfffeee5c>
 505a9c8:	8015883a 	mov	r10,r16
 505a9cc:	0023883a 	mov	r17,zero
 505a9d0:	18bff404 	addi	r2,r3,-48
 505a9d4:	50c00007 	ldb	r3,0(r10)
 505a9d8:	8c4002a4 	muli	r17,r17,10
 505a9dc:	84000044 	addi	r16,r16,1
 505a9e0:	8015883a 	mov	r10,r16
 505a9e4:	1463883a 	add	r17,r2,r17
 505a9e8:	18bff404 	addi	r2,r3,-48
 505a9ec:	30bff92e 	bgeu	r6,r2,505a9d4 <_gp+0xfffef5ac>
 505a9f0:	003e2506 	br	505a288 <_gp+0xfffeee60>
 505a9f4:	21003fcc 	andi	r4,r4,255
 505a9f8:	2002d41e 	bne	r4,zero,505b54c <___vfiprintf_internal_r+0x1444>
 505a9fc:	a5000414 	ori	r20,r20,16
 505aa00:	a080080c 	andi	r2,r20,32
 505aa04:	103fb51e 	bne	r2,zero,505a8dc <_gp+0xfffef4b4>
 505aa08:	a080040c 	andi	r2,r20,16
 505aa0c:	1001f826 	beq	r2,zero,505b1f0 <___vfiprintf_internal_r+0x10e8>
 505aa10:	da802217 	ldw	r10,136(sp)
 505aa14:	54800017 	ldw	r18,0(r10)
 505aa18:	52800104 	addi	r10,r10,4
 505aa1c:	da802215 	stw	r10,136(sp)
 505aa20:	9027d7fa 	srai	r19,r18,31
 505aa24:	9805883a 	mov	r2,r19
 505aa28:	003fb206 	br	505a8f4 <_gp+0xfffef4cc>
 505aa2c:	21003fcc 	andi	r4,r4,255
 505aa30:	2002c41e 	bne	r4,zero,505b544 <___vfiprintf_internal_r+0x143c>
 505aa34:	a5000414 	ori	r20,r20,16
 505aa38:	a080080c 	andi	r2,r20,32
 505aa3c:	103f5f1e 	bne	r2,zero,505a7bc <_gp+0xfffef394>
 505aa40:	a080040c 	andi	r2,r20,16
 505aa44:	10020f26 	beq	r2,zero,505b284 <___vfiprintf_internal_r+0x117c>
 505aa48:	da802217 	ldw	r10,136(sp)
 505aa4c:	d8001d85 	stb	zero,118(sp)
 505aa50:	0027883a 	mov	r19,zero
 505aa54:	50800104 	addi	r2,r10,4
 505aa58:	54800017 	ldw	r18,0(r10)
 505aa5c:	48021116 	blt	r9,zero,505b2a4 <___vfiprintf_internal_r+0x119c>
 505aa60:	00ffdfc4 	movi	r3,-129
 505aa64:	d8802215 	stw	r2,136(sp)
 505aa68:	a0e8703a 	and	r20,r20,r3
 505aa6c:	903f5e1e 	bne	r18,zero,505a7e8 <_gp+0xfffef3c0>
 505aa70:	0039883a 	mov	fp,zero
 505aa74:	4802a626 	beq	r9,zero,505b510 <___vfiprintf_internal_r+0x1408>
 505aa78:	0025883a 	mov	r18,zero
 505aa7c:	0027883a 	mov	r19,zero
 505aa80:	003f5a06 	br	505a7ec <_gp+0xfffef3c4>
 505aa84:	21003fcc 	andi	r4,r4,255
 505aa88:	20029f1e 	bne	r4,zero,505b508 <___vfiprintf_internal_r+0x1400>
 505aa8c:	a5000414 	ori	r20,r20,16
 505aa90:	a080080c 	andi	r2,r20,32
 505aa94:	10005e1e 	bne	r2,zero,505ac10 <___vfiprintf_internal_r+0xb08>
 505aa98:	a080040c 	andi	r2,r20,16
 505aa9c:	1001a21e 	bne	r2,zero,505b128 <___vfiprintf_internal_r+0x1020>
 505aaa0:	a080100c 	andi	r2,r20,64
 505aaa4:	d8001d85 	stb	zero,118(sp)
 505aaa8:	da802217 	ldw	r10,136(sp)
 505aaac:	1002231e 	bne	r2,zero,505b33c <___vfiprintf_internal_r+0x1234>
 505aab0:	50800104 	addi	r2,r10,4
 505aab4:	54800017 	ldw	r18,0(r10)
 505aab8:	0027883a 	mov	r19,zero
 505aabc:	4801a00e 	bge	r9,zero,505b140 <___vfiprintf_internal_r+0x1038>
 505aac0:	d8802215 	stw	r2,136(sp)
 505aac4:	0039883a 	mov	fp,zero
 505aac8:	94c4b03a 	or	r2,r18,r19
 505aacc:	103f901e 	bne	r2,zero,505a910 <_gp+0xfffef4e8>
 505aad0:	00800044 	movi	r2,1
 505aad4:	10803fcc 	andi	r2,r2,255
 505aad8:	00c00044 	movi	r3,1
 505aadc:	10c05926 	beq	r2,r3,505ac44 <___vfiprintf_internal_r+0xb3c>
 505aae0:	00c00084 	movi	r3,2
 505aae4:	10ffe41e 	bne	r2,r3,505aa78 <_gp+0xfffef650>
 505aae8:	0025883a 	mov	r18,zero
 505aaec:	0027883a 	mov	r19,zero
 505aaf0:	00013d06 	br	505afe8 <___vfiprintf_internal_r+0xee0>
 505aaf4:	21003fcc 	andi	r4,r4,255
 505aaf8:	2002811e 	bne	r4,zero,505b500 <___vfiprintf_internal_r+0x13f8>
 505aafc:	008141b4 	movhi	r2,1286
 505ab00:	10848804 	addi	r2,r2,4640
 505ab04:	d8802615 	stw	r2,152(sp)
 505ab08:	a080080c 	andi	r2,r20,32
 505ab0c:	103f561e 	bne	r2,zero,505a868 <_gp+0xfffef440>
 505ab10:	a080040c 	andi	r2,r20,16
 505ab14:	1001d126 	beq	r2,zero,505b25c <___vfiprintf_internal_r+0x1154>
 505ab18:	da802217 	ldw	r10,136(sp)
 505ab1c:	0027883a 	mov	r19,zero
 505ab20:	54800017 	ldw	r18,0(r10)
 505ab24:	52800104 	addi	r10,r10,4
 505ab28:	da802215 	stw	r10,136(sp)
 505ab2c:	003f5306 	br	505a87c <_gp+0xfffef454>
 505ab30:	da802217 	ldw	r10,136(sp)
 505ab34:	d8001d85 	stb	zero,118(sp)
 505ab38:	55400017 	ldw	r21,0(r10)
 505ab3c:	50c00104 	addi	r3,r10,4
 505ab40:	a8024226 	beq	r21,zero,505b44c <___vfiprintf_internal_r+0x1344>
 505ab44:	48021816 	blt	r9,zero,505b3a8 <___vfiprintf_internal_r+0x12a0>
 505ab48:	480d883a 	mov	r6,r9
 505ab4c:	000b883a 	mov	r5,zero
 505ab50:	a809883a 	mov	r4,r21
 505ab54:	d8c02a15 	stw	r3,168(sp)
 505ab58:	da002b15 	stw	r8,172(sp)
 505ab5c:	da402c15 	stw	r9,176(sp)
 505ab60:	50571bc0 	call	50571bc <memchr>
 505ab64:	d8c02a17 	ldw	r3,168(sp)
 505ab68:	da002b17 	ldw	r8,172(sp)
 505ab6c:	da402c17 	ldw	r9,176(sp)
 505ab70:	10024826 	beq	r2,zero,505b494 <___vfiprintf_internal_r+0x138c>
 505ab74:	1567c83a 	sub	r19,r2,r21
 505ab78:	df001d83 	ldbu	fp,118(sp)
 505ab7c:	d8c02215 	stw	r3,136(sp)
 505ab80:	0013883a 	mov	r9,zero
 505ab84:	003e6006 	br	505a508 <_gp+0xfffef0e0>
 505ab88:	21003fcc 	andi	r4,r4,255
 505ab8c:	203fc026 	beq	r4,zero,505aa90 <_gp+0xfffef668>
 505ab90:	d9c01d85 	stb	r7,118(sp)
 505ab94:	003fbe06 	br	505aa90 <_gp+0xfffef668>
 505ab98:	da802217 	ldw	r10,136(sp)
 505ab9c:	54400017 	ldw	r17,0(r10)
 505aba0:	50800104 	addi	r2,r10,4
 505aba4:	883e3b16 	blt	r17,zero,505a494 <_gp+0xfffef06c>
 505aba8:	d8802215 	stw	r2,136(sp)
 505abac:	80c00007 	ldb	r3,0(r16)
 505abb0:	003db406 	br	505a284 <_gp+0xfffeee5c>
 505abb4:	01000044 	movi	r4,1
 505abb8:	01c00ac4 	movi	r7,43
 505abbc:	80c00007 	ldb	r3,0(r16)
 505abc0:	003db006 	br	505a284 <_gp+0xfffeee5c>
 505abc4:	80c00007 	ldb	r3,0(r16)
 505abc8:	82800044 	addi	r10,r16,1
 505abcc:	1b423c26 	beq	r3,r13,505b4c0 <___vfiprintf_internal_r+0x13b8>
 505abd0:	18bff404 	addi	r2,r3,-48
 505abd4:	0013883a 	mov	r9,zero
 505abd8:	30822b36 	bltu	r6,r2,505b488 <___vfiprintf_internal_r+0x1380>
 505abdc:	50c00007 	ldb	r3,0(r10)
 505abe0:	4a4002a4 	muli	r9,r9,10
 505abe4:	54000044 	addi	r16,r10,1
 505abe8:	8015883a 	mov	r10,r16
 505abec:	4893883a 	add	r9,r9,r2
 505abf0:	18bff404 	addi	r2,r3,-48
 505abf4:	30bff92e 	bgeu	r6,r2,505abdc <_gp+0xfffef7b4>
 505abf8:	483da30e 	bge	r9,zero,505a288 <_gp+0xfffeee60>
 505abfc:	027fffc4 	movi	r9,-1
 505ac00:	003da106 	br	505a288 <_gp+0xfffeee60>
 505ac04:	a5001014 	ori	r20,r20,64
 505ac08:	80c00007 	ldb	r3,0(r16)
 505ac0c:	003d9d06 	br	505a284 <_gp+0xfffeee5c>
 505ac10:	da802217 	ldw	r10,136(sp)
 505ac14:	d8001d85 	stb	zero,118(sp)
 505ac18:	50c00204 	addi	r3,r10,8
 505ac1c:	54800017 	ldw	r18,0(r10)
 505ac20:	54c00117 	ldw	r19,4(r10)
 505ac24:	4801ca16 	blt	r9,zero,505b350 <___vfiprintf_internal_r+0x1248>
 505ac28:	013fdfc4 	movi	r4,-129
 505ac2c:	94c4b03a 	or	r2,r18,r19
 505ac30:	d8c02215 	stw	r3,136(sp)
 505ac34:	a128703a 	and	r20,r20,r4
 505ac38:	0039883a 	mov	fp,zero
 505ac3c:	103f341e 	bne	r2,zero,505a910 <_gp+0xfffef4e8>
 505ac40:	483e2e26 	beq	r9,zero,505a4fc <_gp+0xfffef0d4>
 505ac44:	0025883a 	mov	r18,zero
 505ac48:	94800c04 	addi	r18,r18,48
 505ac4c:	dc8019c5 	stb	r18,103(sp)
 505ac50:	dcc02717 	ldw	r19,156(sp)
 505ac54:	dd4019c4 	addi	r21,sp,103
 505ac58:	003e2b06 	br	505a508 <_gp+0xfffef0e0>
 505ac5c:	21003fcc 	andi	r4,r4,255
 505ac60:	2002361e 	bne	r4,zero,505b53c <___vfiprintf_internal_r+0x1434>
 505ac64:	1801c126 	beq	r3,zero,505b36c <___vfiprintf_internal_r+0x1264>
 505ac68:	04800044 	movi	r18,1
 505ac6c:	d8c01005 	stb	r3,64(sp)
 505ac70:	d8001d85 	stb	zero,118(sp)
 505ac74:	9027883a 	mov	r19,r18
 505ac78:	dd401004 	addi	r21,sp,64
 505ac7c:	003f1106 	br	505a8c4 <_gp+0xfffef49c>
 505ac80:	d9402117 	ldw	r5,132(sp)
 505ac84:	d9002017 	ldw	r4,128(sp)
 505ac88:	d9801a04 	addi	r6,sp,104
 505ac8c:	d9c02b15 	stw	r7,172(sp)
 505ac90:	dbc02a15 	stw	r15,168(sp)
 505ac94:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505ac98:	d9c02b17 	ldw	r7,172(sp)
 505ac9c:	dbc02a17 	ldw	r15,168(sp)
 505aca0:	10006d1e 	bne	r2,zero,505ae58 <___vfiprintf_internal_r+0xd50>
 505aca4:	d9801b17 	ldw	r6,108(sp)
 505aca8:	d8801c17 	ldw	r2,112(sp)
 505acac:	d811883a 	mov	r8,sp
 505acb0:	31400044 	addi	r5,r6,1
 505acb4:	003e3306 	br	505a584 <_gp+0xfffef15c>
 505acb8:	d9401b17 	ldw	r5,108(sp)
 505acbc:	d8801c17 	ldw	r2,112(sp)
 505acc0:	29000044 	addi	r4,r5,1
 505acc4:	d8c01d87 	ldb	r3,118(sp)
 505acc8:	183e4d26 	beq	r3,zero,505a600 <_gp+0xfffef1d8>
 505accc:	00c00044 	movi	r3,1
 505acd0:	d9401d84 	addi	r5,sp,118
 505acd4:	10c5883a 	add	r2,r2,r3
 505acd8:	41400015 	stw	r5,0(r8)
 505acdc:	40c00115 	stw	r3,4(r8)
 505ace0:	d8801c15 	stw	r2,112(sp)
 505ace4:	d9001b15 	stw	r4,108(sp)
 505ace8:	014001c4 	movi	r5,7
 505acec:	2900a90e 	bge	r5,r4,505af94 <___vfiprintf_internal_r+0xe8c>
 505acf0:	1000da1e 	bne	r2,zero,505b05c <___vfiprintf_internal_r+0xf54>
 505acf4:	7000ab1e 	bne	r14,zero,505afa4 <___vfiprintf_internal_r+0xe9c>
 505acf8:	000b883a 	mov	r5,zero
 505acfc:	1809883a 	mov	r4,r3
 505ad00:	d811883a 	mov	r8,sp
 505ad04:	00c02004 	movi	r3,128
 505ad08:	e0fe4d26 	beq	fp,r3,505a640 <_gp+0xfffef218>
 505ad0c:	4cf9c83a 	sub	fp,r9,r19
 505ad10:	073e7b0e 	bge	zero,fp,505a700 <_gp+0xfffef2d8>
 505ad14:	01c00404 	movi	r7,16
 505ad18:	3f01900e 	bge	r7,fp,505b35c <___vfiprintf_internal_r+0x1254>
 505ad1c:	00c141b4 	movhi	r3,1286
 505ad20:	18c4fe04 	addi	r3,r3,5112
 505ad24:	d8c02415 	stw	r3,144(sp)
 505ad28:	034001c4 	movi	r13,7
 505ad2c:	00000506 	br	505ad44 <___vfiprintf_internal_r+0xc3c>
 505ad30:	29000084 	addi	r4,r5,2
 505ad34:	42000204 	addi	r8,r8,8
 505ad38:	180b883a 	mov	r5,r3
 505ad3c:	e73ffc04 	addi	fp,fp,-16
 505ad40:	3f000d0e 	bge	r7,fp,505ad78 <___vfiprintf_internal_r+0xc70>
 505ad44:	10800404 	addi	r2,r2,16
 505ad48:	28c00044 	addi	r3,r5,1
 505ad4c:	45c00015 	stw	r23,0(r8)
 505ad50:	41c00115 	stw	r7,4(r8)
 505ad54:	d8801c15 	stw	r2,112(sp)
 505ad58:	d8c01b15 	stw	r3,108(sp)
 505ad5c:	68fff40e 	bge	r13,r3,505ad30 <_gp+0xfffef908>
 505ad60:	1000101e 	bne	r2,zero,505ada4 <___vfiprintf_internal_r+0xc9c>
 505ad64:	e73ffc04 	addi	fp,fp,-16
 505ad68:	01000044 	movi	r4,1
 505ad6c:	000b883a 	mov	r5,zero
 505ad70:	d811883a 	mov	r8,sp
 505ad74:	3f3ff316 	blt	r7,fp,505ad44 <_gp+0xfffef91c>
 505ad78:	da802417 	ldw	r10,144(sp)
 505ad7c:	1705883a 	add	r2,r2,fp
 505ad80:	47000115 	stw	fp,4(r8)
 505ad84:	42800015 	stw	r10,0(r8)
 505ad88:	d8801c15 	stw	r2,112(sp)
 505ad8c:	d9001b15 	stw	r4,108(sp)
 505ad90:	00c001c4 	movi	r3,7
 505ad94:	19003616 	blt	r3,r4,505ae70 <___vfiprintf_internal_r+0xd68>
 505ad98:	42000204 	addi	r8,r8,8
 505ad9c:	21000044 	addi	r4,r4,1
 505ada0:	003e5706 	br	505a700 <_gp+0xfffef2d8>
 505ada4:	d9402117 	ldw	r5,132(sp)
 505ada8:	d9002017 	ldw	r4,128(sp)
 505adac:	d9801a04 	addi	r6,sp,104
 505adb0:	d9c02b15 	stw	r7,172(sp)
 505adb4:	db402a15 	stw	r13,168(sp)
 505adb8:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505adbc:	d9c02b17 	ldw	r7,172(sp)
 505adc0:	db402a17 	ldw	r13,168(sp)
 505adc4:	1000241e 	bne	r2,zero,505ae58 <___vfiprintf_internal_r+0xd50>
 505adc8:	d9401b17 	ldw	r5,108(sp)
 505adcc:	d8801c17 	ldw	r2,112(sp)
 505add0:	d811883a 	mov	r8,sp
 505add4:	29000044 	addi	r4,r5,1
 505add8:	003fd806 	br	505ad3c <_gp+0xfffef914>
 505addc:	d9401b17 	ldw	r5,108(sp)
 505ade0:	00c141b4 	movhi	r3,1286
 505ade4:	18c50204 	addi	r3,r3,5128
 505ade8:	d8c02415 	stw	r3,144(sp)
 505adec:	29400044 	addi	r5,r5,1
 505adf0:	d8c02417 	ldw	r3,144(sp)
 505adf4:	14c5883a 	add	r2,r2,r19
 505adf8:	44c00115 	stw	r19,4(r8)
 505adfc:	40c00015 	stw	r3,0(r8)
 505ae00:	d8801c15 	stw	r2,112(sp)
 505ae04:	d9401b15 	stw	r5,108(sp)
 505ae08:	00c001c4 	movi	r3,7
 505ae0c:	1940070e 	bge	r3,r5,505ae2c <___vfiprintf_internal_r+0xd24>
 505ae10:	103e4826 	beq	r2,zero,505a734 <_gp+0xfffef30c>
 505ae14:	d9402117 	ldw	r5,132(sp)
 505ae18:	d9002017 	ldw	r4,128(sp)
 505ae1c:	d9801a04 	addi	r6,sp,104
 505ae20:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505ae24:	10000c1e 	bne	r2,zero,505ae58 <___vfiprintf_internal_r+0xd50>
 505ae28:	d8801c17 	ldw	r2,112(sp)
 505ae2c:	8c80010e 	bge	r17,r18,505ae34 <___vfiprintf_internal_r+0xd2c>
 505ae30:	9023883a 	mov	r17,r18
 505ae34:	da802317 	ldw	r10,140(sp)
 505ae38:	5455883a 	add	r10,r10,r17
 505ae3c:	da802315 	stw	r10,140(sp)
 505ae40:	103e4126 	beq	r2,zero,505a748 <_gp+0xfffef320>
 505ae44:	d9402117 	ldw	r5,132(sp)
 505ae48:	d9002017 	ldw	r4,128(sp)
 505ae4c:	d9801a04 	addi	r6,sp,104
 505ae50:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505ae54:	103e3c26 	beq	r2,zero,505a748 <_gp+0xfffef320>
 505ae58:	dd002117 	ldw	r20,132(sp)
 505ae5c:	a080030b 	ldhu	r2,12(r20)
 505ae60:	1080100c 	andi	r2,r2,64
 505ae64:	1001231e 	bne	r2,zero,505b2f4 <___vfiprintf_internal_r+0x11ec>
 505ae68:	d8802317 	ldw	r2,140(sp)
 505ae6c:	003d7b06 	br	505a45c <_gp+0xfffef034>
 505ae70:	1000991e 	bne	r2,zero,505b0d8 <___vfiprintf_internal_r+0xfd0>
 505ae74:	00c00044 	movi	r3,1
 505ae78:	9805883a 	mov	r2,r19
 505ae7c:	dd400015 	stw	r21,0(sp)
 505ae80:	dcc00115 	stw	r19,4(sp)
 505ae84:	dcc01c15 	stw	r19,112(sp)
 505ae88:	d8c01b15 	stw	r3,108(sp)
 505ae8c:	d811883a 	mov	r8,sp
 505ae90:	42000204 	addi	r8,r8,8
 505ae94:	a2c0010c 	andi	r11,r20,4
 505ae98:	583fe426 	beq	r11,zero,505ae2c <_gp+0xfffefa04>
 505ae9c:	8ca7c83a 	sub	r19,r17,r18
 505aea0:	04ffe20e 	bge	zero,r19,505ae2c <_gp+0xfffefa04>
 505aea4:	01c00404 	movi	r7,16
 505aea8:	3cffcc0e 	bge	r7,r19,505addc <_gp+0xfffef9b4>
 505aeac:	028141b4 	movhi	r10,1286
 505aeb0:	52850204 	addi	r10,r10,5128
 505aeb4:	d9001b17 	ldw	r4,108(sp)
 505aeb8:	da802415 	stw	r10,144(sp)
 505aebc:	382b883a 	mov	r21,r7
 505aec0:	050001c4 	movi	r20,7
 505aec4:	df002017 	ldw	fp,128(sp)
 505aec8:	00000506 	br	505aee0 <___vfiprintf_internal_r+0xdd8>
 505aecc:	21400084 	addi	r5,r4,2
 505aed0:	42000204 	addi	r8,r8,8
 505aed4:	1809883a 	mov	r4,r3
 505aed8:	9cfffc04 	addi	r19,r19,-16
 505aedc:	acffc40e 	bge	r21,r19,505adf0 <_gp+0xfffef9c8>
 505aee0:	10800404 	addi	r2,r2,16
 505aee4:	20c00044 	addi	r3,r4,1
 505aee8:	45800015 	stw	r22,0(r8)
 505aeec:	45400115 	stw	r21,4(r8)
 505aef0:	d8801c15 	stw	r2,112(sp)
 505aef4:	d8c01b15 	stw	r3,108(sp)
 505aef8:	a0fff40e 	bge	r20,r3,505aecc <_gp+0xfffefaa4>
 505aefc:	1000041e 	bne	r2,zero,505af10 <___vfiprintf_internal_r+0xe08>
 505af00:	01400044 	movi	r5,1
 505af04:	0009883a 	mov	r4,zero
 505af08:	d811883a 	mov	r8,sp
 505af0c:	003ff206 	br	505aed8 <_gp+0xfffefab0>
 505af10:	d9402117 	ldw	r5,132(sp)
 505af14:	d9801a04 	addi	r6,sp,104
 505af18:	e009883a 	mov	r4,fp
 505af1c:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505af20:	103fcd1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505af24:	d9001b17 	ldw	r4,108(sp)
 505af28:	d8801c17 	ldw	r2,112(sp)
 505af2c:	d811883a 	mov	r8,sp
 505af30:	21400044 	addi	r5,r4,1
 505af34:	003fe806 	br	505aed8 <_gp+0xfffefab0>
 505af38:	d9402117 	ldw	r5,132(sp)
 505af3c:	d9002017 	ldw	r4,128(sp)
 505af40:	d9801a04 	addi	r6,sp,104
 505af44:	d9c02b15 	stw	r7,172(sp)
 505af48:	db402a15 	stw	r13,168(sp)
 505af4c:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505af50:	d9c02b17 	ldw	r7,172(sp)
 505af54:	db402a17 	ldw	r13,168(sp)
 505af58:	103fbf1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505af5c:	d9401b17 	ldw	r5,108(sp)
 505af60:	d8801c17 	ldw	r2,112(sp)
 505af64:	d811883a 	mov	r8,sp
 505af68:	29800044 	addi	r6,r5,1
 505af6c:	003dc406 	br	505a680 <_gp+0xfffef258>
 505af70:	1000d21e 	bne	r2,zero,505b2bc <___vfiprintf_internal_r+0x11b4>
 505af74:	d8c01d87 	ldb	r3,118(sp)
 505af78:	18009526 	beq	r3,zero,505b1d0 <___vfiprintf_internal_r+0x10c8>
 505af7c:	00800044 	movi	r2,1
 505af80:	d8c01d84 	addi	r3,sp,118
 505af84:	1009883a 	mov	r4,r2
 505af88:	d8c00015 	stw	r3,0(sp)
 505af8c:	d8800115 	stw	r2,4(sp)
 505af90:	d811883a 	mov	r8,sp
 505af94:	200b883a 	mov	r5,r4
 505af98:	42000204 	addi	r8,r8,8
 505af9c:	21000044 	addi	r4,r4,1
 505afa0:	003d9706 	br	505a600 <_gp+0xfffef1d8>
 505afa4:	d9001d04 	addi	r4,sp,116
 505afa8:	00800084 	movi	r2,2
 505afac:	d9000015 	stw	r4,0(sp)
 505afb0:	d8800115 	stw	r2,4(sp)
 505afb4:	1809883a 	mov	r4,r3
 505afb8:	d811883a 	mov	r8,sp
 505afbc:	200b883a 	mov	r5,r4
 505afc0:	42000204 	addi	r8,r8,8
 505afc4:	21000044 	addi	r4,r4,1
 505afc8:	003f4e06 	br	505ad04 <_gp+0xfffef8dc>
 505afcc:	d8001d85 	stb	zero,118(sp)
 505afd0:	48005016 	blt	r9,zero,505b114 <___vfiprintf_internal_r+0x100c>
 505afd4:	00ffdfc4 	movi	r3,-129
 505afd8:	94c4b03a 	or	r2,r18,r19
 505afdc:	a0e8703a 	and	r20,r20,r3
 505afe0:	103d4426 	beq	r2,zero,505a4f4 <_gp+0xfffef0cc>
 505afe4:	0039883a 	mov	fp,zero
 505afe8:	d9002617 	ldw	r4,152(sp)
 505afec:	dd401a04 	addi	r21,sp,104
 505aff0:	908003cc 	andi	r2,r18,15
 505aff4:	9806973a 	slli	r3,r19,28
 505aff8:	2085883a 	add	r2,r4,r2
 505affc:	9024d13a 	srli	r18,r18,4
 505b000:	10800003 	ldbu	r2,0(r2)
 505b004:	9826d13a 	srli	r19,r19,4
 505b008:	ad7fffc4 	addi	r21,r21,-1
 505b00c:	1ca4b03a 	or	r18,r3,r18
 505b010:	a8800005 	stb	r2,0(r21)
 505b014:	94c4b03a 	or	r2,r18,r19
 505b018:	103ff51e 	bne	r2,zero,505aff0 <_gp+0xfffefbc8>
 505b01c:	003e5906 	br	505a984 <_gp+0xfffef55c>
 505b020:	d9402117 	ldw	r5,132(sp)
 505b024:	d9002017 	ldw	r4,128(sp)
 505b028:	d9801a04 	addi	r6,sp,104
 505b02c:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b030:	103f891e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b034:	d8801c17 	ldw	r2,112(sp)
 505b038:	d811883a 	mov	r8,sp
 505b03c:	003f9506 	br	505ae94 <_gp+0xfffefa6c>
 505b040:	d9402117 	ldw	r5,132(sp)
 505b044:	d9002017 	ldw	r4,128(sp)
 505b048:	d9801a04 	addi	r6,sp,104
 505b04c:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b050:	103f811e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b054:	d811883a 	mov	r8,sp
 505b058:	003ced06 	br	505a410 <_gp+0xfffeefe8>
 505b05c:	d9402117 	ldw	r5,132(sp)
 505b060:	d9002017 	ldw	r4,128(sp)
 505b064:	d9801a04 	addi	r6,sp,104
 505b068:	da402c15 	stw	r9,176(sp)
 505b06c:	db802a15 	stw	r14,168(sp)
 505b070:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b074:	da402c17 	ldw	r9,176(sp)
 505b078:	db802a17 	ldw	r14,168(sp)
 505b07c:	103f761e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b080:	d9401b17 	ldw	r5,108(sp)
 505b084:	d8801c17 	ldw	r2,112(sp)
 505b088:	d811883a 	mov	r8,sp
 505b08c:	29000044 	addi	r4,r5,1
 505b090:	003d5b06 	br	505a600 <_gp+0xfffef1d8>
 505b094:	d9402117 	ldw	r5,132(sp)
 505b098:	d9002017 	ldw	r4,128(sp)
 505b09c:	d9801a04 	addi	r6,sp,104
 505b0a0:	da402c15 	stw	r9,176(sp)
 505b0a4:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b0a8:	da402c17 	ldw	r9,176(sp)
 505b0ac:	103f6a1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b0b0:	d9401b17 	ldw	r5,108(sp)
 505b0b4:	d8801c17 	ldw	r2,112(sp)
 505b0b8:	d811883a 	mov	r8,sp
 505b0bc:	29000044 	addi	r4,r5,1
 505b0c0:	003f1006 	br	505ad04 <_gp+0xfffef8dc>
 505b0c4:	1000c31e 	bne	r2,zero,505b3d4 <___vfiprintf_internal_r+0x12cc>
 505b0c8:	01000044 	movi	r4,1
 505b0cc:	000b883a 	mov	r5,zero
 505b0d0:	d811883a 	mov	r8,sp
 505b0d4:	003f0d06 	br	505ad0c <_gp+0xfffef8e4>
 505b0d8:	d9402117 	ldw	r5,132(sp)
 505b0dc:	d9002017 	ldw	r4,128(sp)
 505b0e0:	d9801a04 	addi	r6,sp,104
 505b0e4:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b0e8:	103f5b1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b0ec:	d9001b17 	ldw	r4,108(sp)
 505b0f0:	d8801c17 	ldw	r2,112(sp)
 505b0f4:	d811883a 	mov	r8,sp
 505b0f8:	21000044 	addi	r4,r4,1
 505b0fc:	003d8006 	br	505a700 <_gp+0xfffef2d8>
 505b100:	010141b4 	movhi	r4,1286
 505b104:	21048d04 	addi	r4,r4,4660
 505b108:	d9002615 	stw	r4,152(sp)
 505b10c:	d8c02215 	stw	r3,136(sp)
 505b110:	1029883a 	mov	r20,r2
 505b114:	94c4b03a 	or	r2,r18,r19
 505b118:	103fb21e 	bne	r2,zero,505afe4 <_gp+0xfffefbbc>
 505b11c:	0039883a 	mov	fp,zero
 505b120:	00800084 	movi	r2,2
 505b124:	003e6b06 	br	505aad4 <_gp+0xfffef6ac>
 505b128:	da802217 	ldw	r10,136(sp)
 505b12c:	d8001d85 	stb	zero,118(sp)
 505b130:	0027883a 	mov	r19,zero
 505b134:	50800104 	addi	r2,r10,4
 505b138:	54800017 	ldw	r18,0(r10)
 505b13c:	483e6016 	blt	r9,zero,505aac0 <_gp+0xfffef698>
 505b140:	00ffdfc4 	movi	r3,-129
 505b144:	d8802215 	stw	r2,136(sp)
 505b148:	a0e8703a 	and	r20,r20,r3
 505b14c:	0039883a 	mov	fp,zero
 505b150:	903ebb26 	beq	r18,zero,505ac40 <_gp+0xfffef818>
 505b154:	00800244 	movi	r2,9
 505b158:	14bdee36 	bltu	r2,r18,505a914 <_gp+0xfffef4ec>
 505b15c:	003eba06 	br	505ac48 <_gp+0xfffef820>
 505b160:	00800c04 	movi	r2,48
 505b164:	d8c01d45 	stb	r3,117(sp)
 505b168:	d8801d05 	stb	r2,116(sp)
 505b16c:	d8001d85 	stb	zero,118(sp)
 505b170:	a0c00094 	ori	r3,r20,2
 505b174:	4800a916 	blt	r9,zero,505b41c <___vfiprintf_internal_r+0x1314>
 505b178:	00bfdfc4 	movi	r2,-129
 505b17c:	a096703a 	and	r11,r20,r2
 505b180:	5d000094 	ori	r20,r11,2
 505b184:	0039883a 	mov	fp,zero
 505b188:	003f9706 	br	505afe8 <_gp+0xfffefbc0>
 505b18c:	8025883a 	mov	r18,r16
 505b190:	003c2e06 	br	505a24c <_gp+0xfffeee24>
 505b194:	008141b4 	movhi	r2,1286
 505b198:	10848d04 	addi	r2,r2,4660
 505b19c:	0039883a 	mov	fp,zero
 505b1a0:	d8802615 	stw	r2,152(sp)
 505b1a4:	003f9006 	br	505afe8 <_gp+0xfffefbc0>
 505b1a8:	04a5c83a 	sub	r18,zero,r18
 505b1ac:	07000b44 	movi	fp,45
 505b1b0:	9004c03a 	cmpne	r2,r18,zero
 505b1b4:	04e7c83a 	sub	r19,zero,r19
 505b1b8:	df001d85 	stb	fp,118(sp)
 505b1bc:	98a7c83a 	sub	r19,r19,r2
 505b1c0:	48009f16 	blt	r9,zero,505b440 <___vfiprintf_internal_r+0x1338>
 505b1c4:	00bfdfc4 	movi	r2,-129
 505b1c8:	a0a8703a 	and	r20,r20,r2
 505b1cc:	003dd006 	br	505a910 <_gp+0xfffef4e8>
 505b1d0:	70004c26 	beq	r14,zero,505b304 <___vfiprintf_internal_r+0x11fc>
 505b1d4:	00800084 	movi	r2,2
 505b1d8:	d8c01d04 	addi	r3,sp,116
 505b1dc:	d8c00015 	stw	r3,0(sp)
 505b1e0:	d8800115 	stw	r2,4(sp)
 505b1e4:	01000044 	movi	r4,1
 505b1e8:	d811883a 	mov	r8,sp
 505b1ec:	003f7306 	br	505afbc <_gp+0xfffefb94>
 505b1f0:	a080100c 	andi	r2,r20,64
 505b1f4:	da802217 	ldw	r10,136(sp)
 505b1f8:	103e0626 	beq	r2,zero,505aa14 <_gp+0xfffef5ec>
 505b1fc:	5480000f 	ldh	r18,0(r10)
 505b200:	52800104 	addi	r10,r10,4
 505b204:	da802215 	stw	r10,136(sp)
 505b208:	9027d7fa 	srai	r19,r18,31
 505b20c:	9805883a 	mov	r2,r19
 505b210:	003db806 	br	505a8f4 <_gp+0xfffef4cc>
 505b214:	a080040c 	andi	r2,r20,16
 505b218:	1000091e 	bne	r2,zero,505b240 <___vfiprintf_internal_r+0x1138>
 505b21c:	a2c0100c 	andi	r11,r20,64
 505b220:	58000726 	beq	r11,zero,505b240 <___vfiprintf_internal_r+0x1138>
 505b224:	da802217 	ldw	r10,136(sp)
 505b228:	50800017 	ldw	r2,0(r10)
 505b22c:	52800104 	addi	r10,r10,4
 505b230:	da802215 	stw	r10,136(sp)
 505b234:	da802317 	ldw	r10,140(sp)
 505b238:	1280000d 	sth	r10,0(r2)
 505b23c:	003be706 	br	505a1dc <_gp+0xfffeedb4>
 505b240:	da802217 	ldw	r10,136(sp)
 505b244:	50800017 	ldw	r2,0(r10)
 505b248:	52800104 	addi	r10,r10,4
 505b24c:	da802215 	stw	r10,136(sp)
 505b250:	da802317 	ldw	r10,140(sp)
 505b254:	12800015 	stw	r10,0(r2)
 505b258:	003be006 	br	505a1dc <_gp+0xfffeedb4>
 505b25c:	a080100c 	andi	r2,r20,64
 505b260:	da802217 	ldw	r10,136(sp)
 505b264:	10003026 	beq	r2,zero,505b328 <___vfiprintf_internal_r+0x1220>
 505b268:	5480000b 	ldhu	r18,0(r10)
 505b26c:	52800104 	addi	r10,r10,4
 505b270:	0027883a 	mov	r19,zero
 505b274:	da802215 	stw	r10,136(sp)
 505b278:	003d8006 	br	505a87c <_gp+0xfffef454>
 505b27c:	80c00007 	ldb	r3,0(r16)
 505b280:	003c0006 	br	505a284 <_gp+0xfffeee5c>
 505b284:	a080100c 	andi	r2,r20,64
 505b288:	d8001d85 	stb	zero,118(sp)
 505b28c:	da802217 	ldw	r10,136(sp)
 505b290:	1000201e 	bne	r2,zero,505b314 <___vfiprintf_internal_r+0x120c>
 505b294:	50800104 	addi	r2,r10,4
 505b298:	54800017 	ldw	r18,0(r10)
 505b29c:	0027883a 	mov	r19,zero
 505b2a0:	483def0e 	bge	r9,zero,505aa60 <_gp+0xfffef638>
 505b2a4:	94c6b03a 	or	r3,r18,r19
 505b2a8:	d8802215 	stw	r2,136(sp)
 505b2ac:	183d4e1e 	bne	r3,zero,505a7e8 <_gp+0xfffef3c0>
 505b2b0:	0039883a 	mov	fp,zero
 505b2b4:	0005883a 	mov	r2,zero
 505b2b8:	003e0606 	br	505aad4 <_gp+0xfffef6ac>
 505b2bc:	d9402117 	ldw	r5,132(sp)
 505b2c0:	d9002017 	ldw	r4,128(sp)
 505b2c4:	d9801a04 	addi	r6,sp,104
 505b2c8:	da402c15 	stw	r9,176(sp)
 505b2cc:	db802a15 	stw	r14,168(sp)
 505b2d0:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b2d4:	da402c17 	ldw	r9,176(sp)
 505b2d8:	db802a17 	ldw	r14,168(sp)
 505b2dc:	103ede1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b2e0:	d9401b17 	ldw	r5,108(sp)
 505b2e4:	d8801c17 	ldw	r2,112(sp)
 505b2e8:	d811883a 	mov	r8,sp
 505b2ec:	29000044 	addi	r4,r5,1
 505b2f0:	003e7406 	br	505acc4 <_gp+0xfffef89c>
 505b2f4:	00bfffc4 	movi	r2,-1
 505b2f8:	003c5806 	br	505a45c <_gp+0xfffef034>
 505b2fc:	d811883a 	mov	r8,sp
 505b300:	003ee806 	br	505aea4 <_gp+0xfffefa7c>
 505b304:	000b883a 	mov	r5,zero
 505b308:	01000044 	movi	r4,1
 505b30c:	d811883a 	mov	r8,sp
 505b310:	003e7c06 	br	505ad04 <_gp+0xfffef8dc>
 505b314:	50800104 	addi	r2,r10,4
 505b318:	5480000b 	ldhu	r18,0(r10)
 505b31c:	0027883a 	mov	r19,zero
 505b320:	483dcf0e 	bge	r9,zero,505aa60 <_gp+0xfffef638>
 505b324:	003fdf06 	br	505b2a4 <_gp+0xfffefe7c>
 505b328:	54800017 	ldw	r18,0(r10)
 505b32c:	52800104 	addi	r10,r10,4
 505b330:	0027883a 	mov	r19,zero
 505b334:	da802215 	stw	r10,136(sp)
 505b338:	003d5006 	br	505a87c <_gp+0xfffef454>
 505b33c:	50800104 	addi	r2,r10,4
 505b340:	5480000b 	ldhu	r18,0(r10)
 505b344:	0027883a 	mov	r19,zero
 505b348:	483f7d0e 	bge	r9,zero,505b140 <_gp+0xfffefd18>
 505b34c:	003ddc06 	br	505aac0 <_gp+0xfffef698>
 505b350:	d8c02215 	stw	r3,136(sp)
 505b354:	0039883a 	mov	fp,zero
 505b358:	003ddb06 	br	505aac8 <_gp+0xfffef6a0>
 505b35c:	028141b4 	movhi	r10,1286
 505b360:	5284fe04 	addi	r10,r10,5112
 505b364:	da802415 	stw	r10,144(sp)
 505b368:	003e8306 	br	505ad78 <_gp+0xfffef950>
 505b36c:	d8801c17 	ldw	r2,112(sp)
 505b370:	dd002117 	ldw	r20,132(sp)
 505b374:	103eb926 	beq	r2,zero,505ae5c <_gp+0xfffefa34>
 505b378:	d9002017 	ldw	r4,128(sp)
 505b37c:	d9801a04 	addi	r6,sp,104
 505b380:	a00b883a 	mov	r5,r20
 505b384:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b388:	003eb406 	br	505ae5c <_gp+0xfffefa34>
 505b38c:	80c00043 	ldbu	r3,1(r16)
 505b390:	a5000814 	ori	r20,r20,32
 505b394:	84000044 	addi	r16,r16,1
 505b398:	18c03fcc 	andi	r3,r3,255
 505b39c:	18c0201c 	xori	r3,r3,128
 505b3a0:	18ffe004 	addi	r3,r3,-128
 505b3a4:	003bb706 	br	505a284 <_gp+0xfffeee5c>
 505b3a8:	a809883a 	mov	r4,r21
 505b3ac:	d8c02a15 	stw	r3,168(sp)
 505b3b0:	da002b15 	stw	r8,172(sp)
 505b3b4:	504fe240 	call	504fe24 <strlen>
 505b3b8:	d8c02a17 	ldw	r3,168(sp)
 505b3bc:	1027883a 	mov	r19,r2
 505b3c0:	df001d83 	ldbu	fp,118(sp)
 505b3c4:	d8c02215 	stw	r3,136(sp)
 505b3c8:	0013883a 	mov	r9,zero
 505b3cc:	da002b17 	ldw	r8,172(sp)
 505b3d0:	003c4d06 	br	505a508 <_gp+0xfffef0e0>
 505b3d4:	d9402117 	ldw	r5,132(sp)
 505b3d8:	d9002017 	ldw	r4,128(sp)
 505b3dc:	d9801a04 	addi	r6,sp,104
 505b3e0:	da402c15 	stw	r9,176(sp)
 505b3e4:	5059ff40 	call	5059ff4 <__sprint_r.part.0>
 505b3e8:	da402c17 	ldw	r9,176(sp)
 505b3ec:	103e9a1e 	bne	r2,zero,505ae58 <_gp+0xfffefa30>
 505b3f0:	d9401b17 	ldw	r5,108(sp)
 505b3f4:	d8801c17 	ldw	r2,112(sp)
 505b3f8:	d811883a 	mov	r8,sp
 505b3fc:	29000044 	addi	r4,r5,1
 505b400:	003e4206 	br	505ad0c <_gp+0xfffef8e4>
 505b404:	d9401b17 	ldw	r5,108(sp)
 505b408:	010141b4 	movhi	r4,1286
 505b40c:	21050204 	addi	r4,r4,5128
 505b410:	d9002415 	stw	r4,144(sp)
 505b414:	29400044 	addi	r5,r5,1
 505b418:	003c6d06 	br	505a5d0 <_gp+0xfffef1a8>
 505b41c:	0039883a 	mov	fp,zero
 505b420:	00800084 	movi	r2,2
 505b424:	10803fcc 	andi	r2,r2,255
 505b428:	01000044 	movi	r4,1
 505b42c:	11001e26 	beq	r2,r4,505b4a8 <___vfiprintf_internal_r+0x13a0>
 505b430:	01000084 	movi	r4,2
 505b434:	11001e1e 	bne	r2,r4,505b4b0 <___vfiprintf_internal_r+0x13a8>
 505b438:	1829883a 	mov	r20,r3
 505b43c:	003eea06 	br	505afe8 <_gp+0xfffefbc0>
 505b440:	a007883a 	mov	r3,r20
 505b444:	00800044 	movi	r2,1
 505b448:	003ff606 	br	505b424 <_gp+0xfffefffc>
 505b44c:	00800184 	movi	r2,6
 505b450:	1240012e 	bgeu	r2,r9,505b458 <___vfiprintf_internal_r+0x1350>
 505b454:	1013883a 	mov	r9,r2
 505b458:	4827883a 	mov	r19,r9
 505b45c:	4825883a 	mov	r18,r9
 505b460:	48001516 	blt	r9,zero,505b4b8 <___vfiprintf_internal_r+0x13b0>
 505b464:	054141b4 	movhi	r21,1286
 505b468:	d8c02215 	stw	r3,136(sp)
 505b46c:	ad449204 	addi	r21,r21,4680
 505b470:	003d1406 	br	505a8c4 <_gp+0xfffef49c>
 505b474:	028141b4 	movhi	r10,1286
 505b478:	5284fe04 	addi	r10,r10,5112
 505b47c:	da802415 	stw	r10,144(sp)
 505b480:	200d883a 	mov	r6,r4
 505b484:	003c9106 	br	505a6cc <_gp+0xfffef2a4>
 505b488:	5021883a 	mov	r16,r10
 505b48c:	0013883a 	mov	r9,zero
 505b490:	003b7d06 	br	505a288 <_gp+0xfffeee60>
 505b494:	4827883a 	mov	r19,r9
 505b498:	df001d83 	ldbu	fp,118(sp)
 505b49c:	d8c02215 	stw	r3,136(sp)
 505b4a0:	0013883a 	mov	r9,zero
 505b4a4:	003c1806 	br	505a508 <_gp+0xfffef0e0>
 505b4a8:	1829883a 	mov	r20,r3
 505b4ac:	003d1806 	br	505a910 <_gp+0xfffef4e8>
 505b4b0:	1829883a 	mov	r20,r3
 505b4b4:	003ccd06 	br	505a7ec <_gp+0xfffef3c4>
 505b4b8:	0025883a 	mov	r18,zero
 505b4bc:	003fe906 	br	505b464 <_gp+0xffff003c>
 505b4c0:	d8802217 	ldw	r2,136(sp)
 505b4c4:	80c00043 	ldbu	r3,1(r16)
 505b4c8:	5021883a 	mov	r16,r10
 505b4cc:	12400017 	ldw	r9,0(r2)
 505b4d0:	10800104 	addi	r2,r2,4
 505b4d4:	d8802215 	stw	r2,136(sp)
 505b4d8:	483faf0e 	bge	r9,zero,505b398 <_gp+0xfffeff70>
 505b4dc:	18c03fcc 	andi	r3,r3,255
 505b4e0:	18c0201c 	xori	r3,r3,128
 505b4e4:	027fffc4 	movi	r9,-1
 505b4e8:	18ffe004 	addi	r3,r3,-128
 505b4ec:	003b6506 	br	505a284 <_gp+0xfffeee5c>
 505b4f0:	d9c01d85 	stb	r7,118(sp)
 505b4f4:	003ca006 	br	505a778 <_gp+0xfffef350>
 505b4f8:	d9c01d85 	stb	r7,118(sp)
 505b4fc:	003cad06 	br	505a7b4 <_gp+0xfffef38c>
 505b500:	d9c01d85 	stb	r7,118(sp)
 505b504:	003d7d06 	br	505aafc <_gp+0xfffef6d4>
 505b508:	d9c01d85 	stb	r7,118(sp)
 505b50c:	003d5f06 	br	505aa8c <_gp+0xfffef664>
 505b510:	a080004c 	andi	r2,r20,1
 505b514:	0039883a 	mov	fp,zero
 505b518:	10000526 	beq	r2,zero,505b530 <___vfiprintf_internal_r+0x1428>
 505b51c:	00800c04 	movi	r2,48
 505b520:	d88019c5 	stb	r2,103(sp)
 505b524:	dcc02717 	ldw	r19,156(sp)
 505b528:	dd4019c4 	addi	r21,sp,103
 505b52c:	003bf606 	br	505a508 <_gp+0xfffef0e0>
 505b530:	0027883a 	mov	r19,zero
 505b534:	dd401a04 	addi	r21,sp,104
 505b538:	003bf306 	br	505a508 <_gp+0xfffef0e0>
 505b53c:	d9c01d85 	stb	r7,118(sp)
 505b540:	003dc806 	br	505ac64 <_gp+0xfffef83c>
 505b544:	d9c01d85 	stb	r7,118(sp)
 505b548:	003d3a06 	br	505aa34 <_gp+0xfffef60c>
 505b54c:	d9c01d85 	stb	r7,118(sp)
 505b550:	003d2a06 	br	505a9fc <_gp+0xfffef5d4>
 505b554:	d9c01d85 	stb	r7,118(sp)
 505b558:	003cde06 	br	505a8d4 <_gp+0xfffef4ac>
 505b55c:	d9c01d85 	stb	r7,118(sp)
 505b560:	003cbc06 	br	505a854 <_gp+0xfffef42c>

0505b564 <__vfiprintf_internal>:
 505b564:	008141b4 	movhi	r2,1286
 505b568:	108d0f04 	addi	r2,r2,13372
 505b56c:	300f883a 	mov	r7,r6
 505b570:	280d883a 	mov	r6,r5
 505b574:	200b883a 	mov	r5,r4
 505b578:	11000017 	ldw	r4,0(r2)
 505b57c:	505a1081 	jmpi	505a108 <___vfiprintf_internal_r>

0505b580 <__sbprintf>:
 505b580:	2880030b 	ldhu	r2,12(r5)
 505b584:	2ac01917 	ldw	r11,100(r5)
 505b588:	2a80038b 	ldhu	r10,14(r5)
 505b58c:	2a400717 	ldw	r9,28(r5)
 505b590:	2a000917 	ldw	r8,36(r5)
 505b594:	defee204 	addi	sp,sp,-1144
 505b598:	00c10004 	movi	r3,1024
 505b59c:	dc011a15 	stw	r16,1128(sp)
 505b5a0:	10bfff4c 	andi	r2,r2,65533
 505b5a4:	2821883a 	mov	r16,r5
 505b5a8:	d8cb883a 	add	r5,sp,r3
 505b5ac:	dc811c15 	stw	r18,1136(sp)
 505b5b0:	dc411b15 	stw	r17,1132(sp)
 505b5b4:	dfc11d15 	stw	ra,1140(sp)
 505b5b8:	2025883a 	mov	r18,r4
 505b5bc:	d881030d 	sth	r2,1036(sp)
 505b5c0:	dac11915 	stw	r11,1124(sp)
 505b5c4:	da81038d 	sth	r10,1038(sp)
 505b5c8:	da410715 	stw	r9,1052(sp)
 505b5cc:	da010915 	stw	r8,1060(sp)
 505b5d0:	dec10015 	stw	sp,1024(sp)
 505b5d4:	dec10415 	stw	sp,1040(sp)
 505b5d8:	d8c10215 	stw	r3,1032(sp)
 505b5dc:	d8c10515 	stw	r3,1044(sp)
 505b5e0:	d8010615 	stw	zero,1048(sp)
 505b5e4:	505a1080 	call	505a108 <___vfiprintf_internal_r>
 505b5e8:	1023883a 	mov	r17,r2
 505b5ec:	10000416 	blt	r2,zero,505b600 <__sbprintf+0x80>
 505b5f0:	d9410004 	addi	r5,sp,1024
 505b5f4:	9009883a 	mov	r4,r18
 505b5f8:	50560800 	call	5056080 <_fflush_r>
 505b5fc:	10000d1e 	bne	r2,zero,505b634 <__sbprintf+0xb4>
 505b600:	d881030b 	ldhu	r2,1036(sp)
 505b604:	1080100c 	andi	r2,r2,64
 505b608:	10000326 	beq	r2,zero,505b618 <__sbprintf+0x98>
 505b60c:	8080030b 	ldhu	r2,12(r16)
 505b610:	10801014 	ori	r2,r2,64
 505b614:	8080030d 	sth	r2,12(r16)
 505b618:	8805883a 	mov	r2,r17
 505b61c:	dfc11d17 	ldw	ra,1140(sp)
 505b620:	dc811c17 	ldw	r18,1136(sp)
 505b624:	dc411b17 	ldw	r17,1132(sp)
 505b628:	dc011a17 	ldw	r16,1128(sp)
 505b62c:	dec11e04 	addi	sp,sp,1144
 505b630:	f800283a 	ret
 505b634:	047fffc4 	movi	r17,-1
 505b638:	003ff106 	br	505b600 <_gp+0xffff01d8>

0505b63c <_write_r>:
 505b63c:	defffd04 	addi	sp,sp,-12
 505b640:	2805883a 	mov	r2,r5
 505b644:	dc000015 	stw	r16,0(sp)
 505b648:	040141b4 	movhi	r16,1286
 505b64c:	dc400115 	stw	r17,4(sp)
 505b650:	300b883a 	mov	r5,r6
 505b654:	84151d04 	addi	r16,r16,21620
 505b658:	2023883a 	mov	r17,r4
 505b65c:	380d883a 	mov	r6,r7
 505b660:	1009883a 	mov	r4,r2
 505b664:	dfc00215 	stw	ra,8(sp)
 505b668:	80000015 	stw	zero,0(r16)
 505b66c:	505d8880 	call	505d888 <write>
 505b670:	00ffffc4 	movi	r3,-1
 505b674:	10c00526 	beq	r2,r3,505b68c <_write_r+0x50>
 505b678:	dfc00217 	ldw	ra,8(sp)
 505b67c:	dc400117 	ldw	r17,4(sp)
 505b680:	dc000017 	ldw	r16,0(sp)
 505b684:	dec00304 	addi	sp,sp,12
 505b688:	f800283a 	ret
 505b68c:	80c00017 	ldw	r3,0(r16)
 505b690:	183ff926 	beq	r3,zero,505b678 <_gp+0xffff0250>
 505b694:	88c00015 	stw	r3,0(r17)
 505b698:	003ff706 	br	505b678 <_gp+0xffff0250>

0505b69c <_close_r>:
 505b69c:	defffd04 	addi	sp,sp,-12
 505b6a0:	dc000015 	stw	r16,0(sp)
 505b6a4:	040141b4 	movhi	r16,1286
 505b6a8:	dc400115 	stw	r17,4(sp)
 505b6ac:	84151d04 	addi	r16,r16,21620
 505b6b0:	2023883a 	mov	r17,r4
 505b6b4:	2809883a 	mov	r4,r5
 505b6b8:	dfc00215 	stw	ra,8(sp)
 505b6bc:	80000015 	stw	zero,0(r16)
 505b6c0:	505cd240 	call	505cd24 <close>
 505b6c4:	00ffffc4 	movi	r3,-1
 505b6c8:	10c00526 	beq	r2,r3,505b6e0 <_close_r+0x44>
 505b6cc:	dfc00217 	ldw	ra,8(sp)
 505b6d0:	dc400117 	ldw	r17,4(sp)
 505b6d4:	dc000017 	ldw	r16,0(sp)
 505b6d8:	dec00304 	addi	sp,sp,12
 505b6dc:	f800283a 	ret
 505b6e0:	80c00017 	ldw	r3,0(r16)
 505b6e4:	183ff926 	beq	r3,zero,505b6cc <_gp+0xffff02a4>
 505b6e8:	88c00015 	stw	r3,0(r17)
 505b6ec:	003ff706 	br	505b6cc <_gp+0xffff02a4>

0505b6f0 <_calloc_r>:
 505b6f0:	298b383a 	mul	r5,r5,r6
 505b6f4:	defffe04 	addi	sp,sp,-8
 505b6f8:	dfc00115 	stw	ra,4(sp)
 505b6fc:	dc000015 	stw	r16,0(sp)
 505b700:	504f0c00 	call	504f0c0 <_malloc_r>
 505b704:	10002926 	beq	r2,zero,505b7ac <_calloc_r+0xbc>
 505b708:	11bfff17 	ldw	r6,-4(r2)
 505b70c:	1021883a 	mov	r16,r2
 505b710:	00bfff04 	movi	r2,-4
 505b714:	308c703a 	and	r6,r6,r2
 505b718:	00c00904 	movi	r3,36
 505b71c:	308d883a 	add	r6,r6,r2
 505b720:	19801636 	bltu	r3,r6,505b77c <_calloc_r+0x8c>
 505b724:	008004c4 	movi	r2,19
 505b728:	11800b2e 	bgeu	r2,r6,505b758 <_calloc_r+0x68>
 505b72c:	80000015 	stw	zero,0(r16)
 505b730:	80000115 	stw	zero,4(r16)
 505b734:	008006c4 	movi	r2,27
 505b738:	11801a2e 	bgeu	r2,r6,505b7a4 <_calloc_r+0xb4>
 505b73c:	80000215 	stw	zero,8(r16)
 505b740:	80000315 	stw	zero,12(r16)
 505b744:	30c0151e 	bne	r6,r3,505b79c <_calloc_r+0xac>
 505b748:	80000415 	stw	zero,16(r16)
 505b74c:	80800604 	addi	r2,r16,24
 505b750:	80000515 	stw	zero,20(r16)
 505b754:	00000106 	br	505b75c <_calloc_r+0x6c>
 505b758:	8005883a 	mov	r2,r16
 505b75c:	10000015 	stw	zero,0(r2)
 505b760:	10000115 	stw	zero,4(r2)
 505b764:	10000215 	stw	zero,8(r2)
 505b768:	8005883a 	mov	r2,r16
 505b76c:	dfc00117 	ldw	ra,4(sp)
 505b770:	dc000017 	ldw	r16,0(sp)
 505b774:	dec00204 	addi	sp,sp,8
 505b778:	f800283a 	ret
 505b77c:	000b883a 	mov	r5,zero
 505b780:	8009883a 	mov	r4,r16
 505b784:	504fa140 	call	504fa14 <memset>
 505b788:	8005883a 	mov	r2,r16
 505b78c:	dfc00117 	ldw	ra,4(sp)
 505b790:	dc000017 	ldw	r16,0(sp)
 505b794:	dec00204 	addi	sp,sp,8
 505b798:	f800283a 	ret
 505b79c:	80800404 	addi	r2,r16,16
 505b7a0:	003fee06 	br	505b75c <_gp+0xffff0334>
 505b7a4:	80800204 	addi	r2,r16,8
 505b7a8:	003fec06 	br	505b75c <_gp+0xffff0334>
 505b7ac:	0005883a 	mov	r2,zero
 505b7b0:	003fee06 	br	505b76c <_gp+0xffff0344>

0505b7b4 <_fclose_r>:
 505b7b4:	28003926 	beq	r5,zero,505b89c <_fclose_r+0xe8>
 505b7b8:	defffc04 	addi	sp,sp,-16
 505b7bc:	dc400115 	stw	r17,4(sp)
 505b7c0:	dc000015 	stw	r16,0(sp)
 505b7c4:	dfc00315 	stw	ra,12(sp)
 505b7c8:	dc800215 	stw	r18,8(sp)
 505b7cc:	2023883a 	mov	r17,r4
 505b7d0:	2821883a 	mov	r16,r5
 505b7d4:	20000226 	beq	r4,zero,505b7e0 <_fclose_r+0x2c>
 505b7d8:	20800e17 	ldw	r2,56(r4)
 505b7dc:	10002726 	beq	r2,zero,505b87c <_fclose_r+0xc8>
 505b7e0:	8080030f 	ldh	r2,12(r16)
 505b7e4:	1000071e 	bne	r2,zero,505b804 <_fclose_r+0x50>
 505b7e8:	0005883a 	mov	r2,zero
 505b7ec:	dfc00317 	ldw	ra,12(sp)
 505b7f0:	dc800217 	ldw	r18,8(sp)
 505b7f4:	dc400117 	ldw	r17,4(sp)
 505b7f8:	dc000017 	ldw	r16,0(sp)
 505b7fc:	dec00404 	addi	sp,sp,16
 505b800:	f800283a 	ret
 505b804:	800b883a 	mov	r5,r16
 505b808:	8809883a 	mov	r4,r17
 505b80c:	5055e640 	call	5055e64 <__sflush_r>
 505b810:	1025883a 	mov	r18,r2
 505b814:	80800b17 	ldw	r2,44(r16)
 505b818:	10000426 	beq	r2,zero,505b82c <_fclose_r+0x78>
 505b81c:	81400717 	ldw	r5,28(r16)
 505b820:	8809883a 	mov	r4,r17
 505b824:	103ee83a 	callr	r2
 505b828:	10001616 	blt	r2,zero,505b884 <_fclose_r+0xd0>
 505b82c:	8080030b 	ldhu	r2,12(r16)
 505b830:	1080200c 	andi	r2,r2,128
 505b834:	1000151e 	bne	r2,zero,505b88c <_fclose_r+0xd8>
 505b838:	81400c17 	ldw	r5,48(r16)
 505b83c:	28000526 	beq	r5,zero,505b854 <_fclose_r+0xa0>
 505b840:	80801004 	addi	r2,r16,64
 505b844:	28800226 	beq	r5,r2,505b850 <_fclose_r+0x9c>
 505b848:	8809883a 	mov	r4,r17
 505b84c:	50565d00 	call	50565d0 <_free_r>
 505b850:	80000c15 	stw	zero,48(r16)
 505b854:	81401117 	ldw	r5,68(r16)
 505b858:	28000326 	beq	r5,zero,505b868 <_fclose_r+0xb4>
 505b85c:	8809883a 	mov	r4,r17
 505b860:	50565d00 	call	50565d0 <_free_r>
 505b864:	80001115 	stw	zero,68(r16)
 505b868:	505646c0 	call	505646c <__sfp_lock_acquire>
 505b86c:	8000030d 	sth	zero,12(r16)
 505b870:	50564700 	call	5056470 <__sfp_lock_release>
 505b874:	9005883a 	mov	r2,r18
 505b878:	003fdc06 	br	505b7ec <_gp+0xffff03c4>
 505b87c:	505645c0 	call	505645c <__sinit>
 505b880:	003fd706 	br	505b7e0 <_gp+0xffff03b8>
 505b884:	04bfffc4 	movi	r18,-1
 505b888:	003fe806 	br	505b82c <_gp+0xffff0404>
 505b88c:	81400417 	ldw	r5,16(r16)
 505b890:	8809883a 	mov	r4,r17
 505b894:	50565d00 	call	50565d0 <_free_r>
 505b898:	003fe706 	br	505b838 <_gp+0xffff0410>
 505b89c:	0005883a 	mov	r2,zero
 505b8a0:	f800283a 	ret

0505b8a4 <fclose>:
 505b8a4:	008141b4 	movhi	r2,1286
 505b8a8:	108d0f04 	addi	r2,r2,13372
 505b8ac:	200b883a 	mov	r5,r4
 505b8b0:	11000017 	ldw	r4,0(r2)
 505b8b4:	505b7b41 	jmpi	505b7b4 <_fclose_r>

0505b8b8 <__fputwc>:
 505b8b8:	defff804 	addi	sp,sp,-32
 505b8bc:	dcc00415 	stw	r19,16(sp)
 505b8c0:	dc800315 	stw	r18,12(sp)
 505b8c4:	dc000115 	stw	r16,4(sp)
 505b8c8:	dfc00715 	stw	ra,28(sp)
 505b8cc:	dd400615 	stw	r21,24(sp)
 505b8d0:	dd000515 	stw	r20,20(sp)
 505b8d4:	dc400215 	stw	r17,8(sp)
 505b8d8:	2027883a 	mov	r19,r4
 505b8dc:	2825883a 	mov	r18,r5
 505b8e0:	3021883a 	mov	r16,r6
 505b8e4:	5056fac0 	call	5056fac <__locale_mb_cur_max>
 505b8e8:	00c00044 	movi	r3,1
 505b8ec:	10c03e26 	beq	r2,r3,505b9e8 <__fputwc+0x130>
 505b8f0:	81c01704 	addi	r7,r16,92
 505b8f4:	900d883a 	mov	r6,r18
 505b8f8:	d80b883a 	mov	r5,sp
 505b8fc:	9809883a 	mov	r4,r19
 505b900:	505bd880 	call	505bd88 <_wcrtomb_r>
 505b904:	1029883a 	mov	r20,r2
 505b908:	00bfffc4 	movi	r2,-1
 505b90c:	a0802026 	beq	r20,r2,505b990 <__fputwc+0xd8>
 505b910:	d9400003 	ldbu	r5,0(sp)
 505b914:	a0001c26 	beq	r20,zero,505b988 <__fputwc+0xd0>
 505b918:	0023883a 	mov	r17,zero
 505b91c:	05400284 	movi	r21,10
 505b920:	00000906 	br	505b948 <__fputwc+0x90>
 505b924:	80800017 	ldw	r2,0(r16)
 505b928:	11400005 	stb	r5,0(r2)
 505b92c:	80c00017 	ldw	r3,0(r16)
 505b930:	18c00044 	addi	r3,r3,1
 505b934:	80c00015 	stw	r3,0(r16)
 505b938:	8c400044 	addi	r17,r17,1
 505b93c:	dc45883a 	add	r2,sp,r17
 505b940:	8d00112e 	bgeu	r17,r20,505b988 <__fputwc+0xd0>
 505b944:	11400003 	ldbu	r5,0(r2)
 505b948:	80c00217 	ldw	r3,8(r16)
 505b94c:	18ffffc4 	addi	r3,r3,-1
 505b950:	80c00215 	stw	r3,8(r16)
 505b954:	183ff30e 	bge	r3,zero,505b924 <_gp+0xffff04fc>
 505b958:	80800617 	ldw	r2,24(r16)
 505b95c:	18801916 	blt	r3,r2,505b9c4 <__fputwc+0x10c>
 505b960:	80800017 	ldw	r2,0(r16)
 505b964:	11400005 	stb	r5,0(r2)
 505b968:	80800017 	ldw	r2,0(r16)
 505b96c:	10c00003 	ldbu	r3,0(r2)
 505b970:	10800044 	addi	r2,r2,1
 505b974:	1d402326 	beq	r3,r21,505ba04 <__fputwc+0x14c>
 505b978:	80800015 	stw	r2,0(r16)
 505b97c:	8c400044 	addi	r17,r17,1
 505b980:	dc45883a 	add	r2,sp,r17
 505b984:	8d3fef36 	bltu	r17,r20,505b944 <_gp+0xffff051c>
 505b988:	9005883a 	mov	r2,r18
 505b98c:	00000406 	br	505b9a0 <__fputwc+0xe8>
 505b990:	80c0030b 	ldhu	r3,12(r16)
 505b994:	a005883a 	mov	r2,r20
 505b998:	18c01014 	ori	r3,r3,64
 505b99c:	80c0030d 	sth	r3,12(r16)
 505b9a0:	dfc00717 	ldw	ra,28(sp)
 505b9a4:	dd400617 	ldw	r21,24(sp)
 505b9a8:	dd000517 	ldw	r20,20(sp)
 505b9ac:	dcc00417 	ldw	r19,16(sp)
 505b9b0:	dc800317 	ldw	r18,12(sp)
 505b9b4:	dc400217 	ldw	r17,8(sp)
 505b9b8:	dc000117 	ldw	r16,4(sp)
 505b9bc:	dec00804 	addi	sp,sp,32
 505b9c0:	f800283a 	ret
 505b9c4:	800d883a 	mov	r6,r16
 505b9c8:	29403fcc 	andi	r5,r5,255
 505b9cc:	9809883a 	mov	r4,r19
 505b9d0:	505bc300 	call	505bc30 <__swbuf_r>
 505b9d4:	10bfffe0 	cmpeqi	r2,r2,-1
 505b9d8:	10803fcc 	andi	r2,r2,255
 505b9dc:	103fd626 	beq	r2,zero,505b938 <_gp+0xffff0510>
 505b9e0:	00bfffc4 	movi	r2,-1
 505b9e4:	003fee06 	br	505b9a0 <_gp+0xffff0578>
 505b9e8:	90ffffc4 	addi	r3,r18,-1
 505b9ec:	01003f84 	movi	r4,254
 505b9f0:	20ffbf36 	bltu	r4,r3,505b8f0 <_gp+0xffff04c8>
 505b9f4:	900b883a 	mov	r5,r18
 505b9f8:	dc800005 	stb	r18,0(sp)
 505b9fc:	1029883a 	mov	r20,r2
 505ba00:	003fc506 	br	505b918 <_gp+0xffff04f0>
 505ba04:	800d883a 	mov	r6,r16
 505ba08:	a80b883a 	mov	r5,r21
 505ba0c:	9809883a 	mov	r4,r19
 505ba10:	505bc300 	call	505bc30 <__swbuf_r>
 505ba14:	10bfffe0 	cmpeqi	r2,r2,-1
 505ba18:	003fef06 	br	505b9d8 <_gp+0xffff05b0>

0505ba1c <_fputwc_r>:
 505ba1c:	3080030b 	ldhu	r2,12(r6)
 505ba20:	10c8000c 	andi	r3,r2,8192
 505ba24:	1800051e 	bne	r3,zero,505ba3c <_fputwc_r+0x20>
 505ba28:	30c01917 	ldw	r3,100(r6)
 505ba2c:	10880014 	ori	r2,r2,8192
 505ba30:	3080030d 	sth	r2,12(r6)
 505ba34:	18880014 	ori	r2,r3,8192
 505ba38:	30801915 	stw	r2,100(r6)
 505ba3c:	505b8b81 	jmpi	505b8b8 <__fputwc>

0505ba40 <fputwc>:
 505ba40:	008141b4 	movhi	r2,1286
 505ba44:	defffc04 	addi	sp,sp,-16
 505ba48:	108d0f04 	addi	r2,r2,13372
 505ba4c:	dc000115 	stw	r16,4(sp)
 505ba50:	14000017 	ldw	r16,0(r2)
 505ba54:	dc400215 	stw	r17,8(sp)
 505ba58:	dfc00315 	stw	ra,12(sp)
 505ba5c:	2023883a 	mov	r17,r4
 505ba60:	80000226 	beq	r16,zero,505ba6c <fputwc+0x2c>
 505ba64:	80800e17 	ldw	r2,56(r16)
 505ba68:	10001026 	beq	r2,zero,505baac <fputwc+0x6c>
 505ba6c:	2880030b 	ldhu	r2,12(r5)
 505ba70:	10c8000c 	andi	r3,r2,8192
 505ba74:	1800051e 	bne	r3,zero,505ba8c <fputwc+0x4c>
 505ba78:	28c01917 	ldw	r3,100(r5)
 505ba7c:	10880014 	ori	r2,r2,8192
 505ba80:	2880030d 	sth	r2,12(r5)
 505ba84:	18880014 	ori	r2,r3,8192
 505ba88:	28801915 	stw	r2,100(r5)
 505ba8c:	280d883a 	mov	r6,r5
 505ba90:	8009883a 	mov	r4,r16
 505ba94:	880b883a 	mov	r5,r17
 505ba98:	dfc00317 	ldw	ra,12(sp)
 505ba9c:	dc400217 	ldw	r17,8(sp)
 505baa0:	dc000117 	ldw	r16,4(sp)
 505baa4:	dec00404 	addi	sp,sp,16
 505baa8:	505b8b81 	jmpi	505b8b8 <__fputwc>
 505baac:	8009883a 	mov	r4,r16
 505bab0:	d9400015 	stw	r5,0(sp)
 505bab4:	505645c0 	call	505645c <__sinit>
 505bab8:	d9400017 	ldw	r5,0(sp)
 505babc:	003feb06 	br	505ba6c <_gp+0xffff0644>

0505bac0 <_fstat_r>:
 505bac0:	defffd04 	addi	sp,sp,-12
 505bac4:	2805883a 	mov	r2,r5
 505bac8:	dc000015 	stw	r16,0(sp)
 505bacc:	040141b4 	movhi	r16,1286
 505bad0:	dc400115 	stw	r17,4(sp)
 505bad4:	84151d04 	addi	r16,r16,21620
 505bad8:	2023883a 	mov	r17,r4
 505badc:	300b883a 	mov	r5,r6
 505bae0:	1009883a 	mov	r4,r2
 505bae4:	dfc00215 	stw	ra,8(sp)
 505bae8:	80000015 	stw	zero,0(r16)
 505baec:	505ce5c0 	call	505ce5c <fstat>
 505baf0:	00ffffc4 	movi	r3,-1
 505baf4:	10c00526 	beq	r2,r3,505bb0c <_fstat_r+0x4c>
 505baf8:	dfc00217 	ldw	ra,8(sp)
 505bafc:	dc400117 	ldw	r17,4(sp)
 505bb00:	dc000017 	ldw	r16,0(sp)
 505bb04:	dec00304 	addi	sp,sp,12
 505bb08:	f800283a 	ret
 505bb0c:	80c00017 	ldw	r3,0(r16)
 505bb10:	183ff926 	beq	r3,zero,505baf8 <_gp+0xffff06d0>
 505bb14:	88c00015 	stw	r3,0(r17)
 505bb18:	003ff706 	br	505baf8 <_gp+0xffff06d0>

0505bb1c <_isatty_r>:
 505bb1c:	defffd04 	addi	sp,sp,-12
 505bb20:	dc000015 	stw	r16,0(sp)
 505bb24:	040141b4 	movhi	r16,1286
 505bb28:	dc400115 	stw	r17,4(sp)
 505bb2c:	84151d04 	addi	r16,r16,21620
 505bb30:	2023883a 	mov	r17,r4
 505bb34:	2809883a 	mov	r4,r5
 505bb38:	dfc00215 	stw	ra,8(sp)
 505bb3c:	80000015 	stw	zero,0(r16)
 505bb40:	505d0c80 	call	505d0c8 <isatty>
 505bb44:	00ffffc4 	movi	r3,-1
 505bb48:	10c00526 	beq	r2,r3,505bb60 <_isatty_r+0x44>
 505bb4c:	dfc00217 	ldw	ra,8(sp)
 505bb50:	dc400117 	ldw	r17,4(sp)
 505bb54:	dc000017 	ldw	r16,0(sp)
 505bb58:	dec00304 	addi	sp,sp,12
 505bb5c:	f800283a 	ret
 505bb60:	80c00017 	ldw	r3,0(r16)
 505bb64:	183ff926 	beq	r3,zero,505bb4c <_gp+0xffff0724>
 505bb68:	88c00015 	stw	r3,0(r17)
 505bb6c:	003ff706 	br	505bb4c <_gp+0xffff0724>

0505bb70 <_lseek_r>:
 505bb70:	defffd04 	addi	sp,sp,-12
 505bb74:	2805883a 	mov	r2,r5
 505bb78:	dc000015 	stw	r16,0(sp)
 505bb7c:	040141b4 	movhi	r16,1286
 505bb80:	dc400115 	stw	r17,4(sp)
 505bb84:	300b883a 	mov	r5,r6
 505bb88:	84151d04 	addi	r16,r16,21620
 505bb8c:	2023883a 	mov	r17,r4
 505bb90:	380d883a 	mov	r6,r7
 505bb94:	1009883a 	mov	r4,r2
 505bb98:	dfc00215 	stw	ra,8(sp)
 505bb9c:	80000015 	stw	zero,0(r16)
 505bba0:	505d2940 	call	505d294 <lseek>
 505bba4:	00ffffc4 	movi	r3,-1
 505bba8:	10c00526 	beq	r2,r3,505bbc0 <_lseek_r+0x50>
 505bbac:	dfc00217 	ldw	ra,8(sp)
 505bbb0:	dc400117 	ldw	r17,4(sp)
 505bbb4:	dc000017 	ldw	r16,0(sp)
 505bbb8:	dec00304 	addi	sp,sp,12
 505bbbc:	f800283a 	ret
 505bbc0:	80c00017 	ldw	r3,0(r16)
 505bbc4:	183ff926 	beq	r3,zero,505bbac <_gp+0xffff0784>
 505bbc8:	88c00015 	stw	r3,0(r17)
 505bbcc:	003ff706 	br	505bbac <_gp+0xffff0784>

0505bbd0 <_read_r>:
 505bbd0:	defffd04 	addi	sp,sp,-12
 505bbd4:	2805883a 	mov	r2,r5
 505bbd8:	dc000015 	stw	r16,0(sp)
 505bbdc:	040141b4 	movhi	r16,1286
 505bbe0:	dc400115 	stw	r17,4(sp)
 505bbe4:	300b883a 	mov	r5,r6
 505bbe8:	84151d04 	addi	r16,r16,21620
 505bbec:	2023883a 	mov	r17,r4
 505bbf0:	380d883a 	mov	r6,r7
 505bbf4:	1009883a 	mov	r4,r2
 505bbf8:	dfc00215 	stw	ra,8(sp)
 505bbfc:	80000015 	stw	zero,0(r16)
 505bc00:	505d4680 	call	505d468 <read>
 505bc04:	00ffffc4 	movi	r3,-1
 505bc08:	10c00526 	beq	r2,r3,505bc20 <_read_r+0x50>
 505bc0c:	dfc00217 	ldw	ra,8(sp)
 505bc10:	dc400117 	ldw	r17,4(sp)
 505bc14:	dc000017 	ldw	r16,0(sp)
 505bc18:	dec00304 	addi	sp,sp,12
 505bc1c:	f800283a 	ret
 505bc20:	80c00017 	ldw	r3,0(r16)
 505bc24:	183ff926 	beq	r3,zero,505bc0c <_gp+0xffff07e4>
 505bc28:	88c00015 	stw	r3,0(r17)
 505bc2c:	003ff706 	br	505bc0c <_gp+0xffff07e4>

0505bc30 <__swbuf_r>:
 505bc30:	defffb04 	addi	sp,sp,-20
 505bc34:	dcc00315 	stw	r19,12(sp)
 505bc38:	dc800215 	stw	r18,8(sp)
 505bc3c:	dc000015 	stw	r16,0(sp)
 505bc40:	dfc00415 	stw	ra,16(sp)
 505bc44:	dc400115 	stw	r17,4(sp)
 505bc48:	2025883a 	mov	r18,r4
 505bc4c:	2827883a 	mov	r19,r5
 505bc50:	3021883a 	mov	r16,r6
 505bc54:	20000226 	beq	r4,zero,505bc60 <__swbuf_r+0x30>
 505bc58:	20800e17 	ldw	r2,56(r4)
 505bc5c:	10004226 	beq	r2,zero,505bd68 <__swbuf_r+0x138>
 505bc60:	80800617 	ldw	r2,24(r16)
 505bc64:	8100030b 	ldhu	r4,12(r16)
 505bc68:	80800215 	stw	r2,8(r16)
 505bc6c:	2080020c 	andi	r2,r4,8
 505bc70:	10003626 	beq	r2,zero,505bd4c <__swbuf_r+0x11c>
 505bc74:	80c00417 	ldw	r3,16(r16)
 505bc78:	18003426 	beq	r3,zero,505bd4c <__swbuf_r+0x11c>
 505bc7c:	2088000c 	andi	r2,r4,8192
 505bc80:	9c403fcc 	andi	r17,r19,255
 505bc84:	10001a26 	beq	r2,zero,505bcf0 <__swbuf_r+0xc0>
 505bc88:	80800017 	ldw	r2,0(r16)
 505bc8c:	81000517 	ldw	r4,20(r16)
 505bc90:	10c7c83a 	sub	r3,r2,r3
 505bc94:	1900200e 	bge	r3,r4,505bd18 <__swbuf_r+0xe8>
 505bc98:	18c00044 	addi	r3,r3,1
 505bc9c:	81000217 	ldw	r4,8(r16)
 505bca0:	11400044 	addi	r5,r2,1
 505bca4:	81400015 	stw	r5,0(r16)
 505bca8:	213fffc4 	addi	r4,r4,-1
 505bcac:	81000215 	stw	r4,8(r16)
 505bcb0:	14c00005 	stb	r19,0(r2)
 505bcb4:	80800517 	ldw	r2,20(r16)
 505bcb8:	10c01e26 	beq	r2,r3,505bd34 <__swbuf_r+0x104>
 505bcbc:	8080030b 	ldhu	r2,12(r16)
 505bcc0:	1080004c 	andi	r2,r2,1
 505bcc4:	10000226 	beq	r2,zero,505bcd0 <__swbuf_r+0xa0>
 505bcc8:	00800284 	movi	r2,10
 505bccc:	88801926 	beq	r17,r2,505bd34 <__swbuf_r+0x104>
 505bcd0:	8805883a 	mov	r2,r17
 505bcd4:	dfc00417 	ldw	ra,16(sp)
 505bcd8:	dcc00317 	ldw	r19,12(sp)
 505bcdc:	dc800217 	ldw	r18,8(sp)
 505bce0:	dc400117 	ldw	r17,4(sp)
 505bce4:	dc000017 	ldw	r16,0(sp)
 505bce8:	dec00504 	addi	sp,sp,20
 505bcec:	f800283a 	ret
 505bcf0:	81401917 	ldw	r5,100(r16)
 505bcf4:	00b7ffc4 	movi	r2,-8193
 505bcf8:	21080014 	ori	r4,r4,8192
 505bcfc:	2884703a 	and	r2,r5,r2
 505bd00:	80801915 	stw	r2,100(r16)
 505bd04:	80800017 	ldw	r2,0(r16)
 505bd08:	8100030d 	sth	r4,12(r16)
 505bd0c:	81000517 	ldw	r4,20(r16)
 505bd10:	10c7c83a 	sub	r3,r2,r3
 505bd14:	193fe016 	blt	r3,r4,505bc98 <_gp+0xffff0870>
 505bd18:	800b883a 	mov	r5,r16
 505bd1c:	9009883a 	mov	r4,r18
 505bd20:	50560800 	call	5056080 <_fflush_r>
 505bd24:	1000071e 	bne	r2,zero,505bd44 <__swbuf_r+0x114>
 505bd28:	80800017 	ldw	r2,0(r16)
 505bd2c:	00c00044 	movi	r3,1
 505bd30:	003fda06 	br	505bc9c <_gp+0xffff0874>
 505bd34:	800b883a 	mov	r5,r16
 505bd38:	9009883a 	mov	r4,r18
 505bd3c:	50560800 	call	5056080 <_fflush_r>
 505bd40:	103fe326 	beq	r2,zero,505bcd0 <_gp+0xffff08a8>
 505bd44:	00bfffc4 	movi	r2,-1
 505bd48:	003fe206 	br	505bcd4 <_gp+0xffff08ac>
 505bd4c:	800b883a 	mov	r5,r16
 505bd50:	9009883a 	mov	r4,r18
 505bd54:	50544880 	call	5054488 <__swsetup_r>
 505bd58:	103ffa1e 	bne	r2,zero,505bd44 <_gp+0xffff091c>
 505bd5c:	8100030b 	ldhu	r4,12(r16)
 505bd60:	80c00417 	ldw	r3,16(r16)
 505bd64:	003fc506 	br	505bc7c <_gp+0xffff0854>
 505bd68:	505645c0 	call	505645c <__sinit>
 505bd6c:	003fbc06 	br	505bc60 <_gp+0xffff0838>

0505bd70 <__swbuf>:
 505bd70:	008141b4 	movhi	r2,1286
 505bd74:	108d0f04 	addi	r2,r2,13372
 505bd78:	280d883a 	mov	r6,r5
 505bd7c:	200b883a 	mov	r5,r4
 505bd80:	11000017 	ldw	r4,0(r2)
 505bd84:	505bc301 	jmpi	505bc30 <__swbuf_r>

0505bd88 <_wcrtomb_r>:
 505bd88:	defff604 	addi	sp,sp,-40
 505bd8c:	008141b4 	movhi	r2,1286
 505bd90:	dc800815 	stw	r18,32(sp)
 505bd94:	dc400715 	stw	r17,28(sp)
 505bd98:	dc000615 	stw	r16,24(sp)
 505bd9c:	108d1104 	addi	r2,r2,13380
 505bda0:	dfc00915 	stw	ra,36(sp)
 505bda4:	2021883a 	mov	r16,r4
 505bda8:	3823883a 	mov	r17,r7
 505bdac:	14800017 	ldw	r18,0(r2)
 505bdb0:	28001426 	beq	r5,zero,505be04 <_wcrtomb_r+0x7c>
 505bdb4:	d9400415 	stw	r5,16(sp)
 505bdb8:	d9800515 	stw	r6,20(sp)
 505bdbc:	5056fa00 	call	5056fa0 <__locale_charset>
 505bdc0:	d9800517 	ldw	r6,20(sp)
 505bdc4:	d9400417 	ldw	r5,16(sp)
 505bdc8:	100f883a 	mov	r7,r2
 505bdcc:	dc400015 	stw	r17,0(sp)
 505bdd0:	8009883a 	mov	r4,r16
 505bdd4:	903ee83a 	callr	r18
 505bdd8:	00ffffc4 	movi	r3,-1
 505bddc:	10c0031e 	bne	r2,r3,505bdec <_wcrtomb_r+0x64>
 505bde0:	88000015 	stw	zero,0(r17)
 505bde4:	00c02284 	movi	r3,138
 505bde8:	80c00015 	stw	r3,0(r16)
 505bdec:	dfc00917 	ldw	ra,36(sp)
 505bdf0:	dc800817 	ldw	r18,32(sp)
 505bdf4:	dc400717 	ldw	r17,28(sp)
 505bdf8:	dc000617 	ldw	r16,24(sp)
 505bdfc:	dec00a04 	addi	sp,sp,40
 505be00:	f800283a 	ret
 505be04:	5056fa00 	call	5056fa0 <__locale_charset>
 505be08:	100f883a 	mov	r7,r2
 505be0c:	dc400015 	stw	r17,0(sp)
 505be10:	000d883a 	mov	r6,zero
 505be14:	d9400104 	addi	r5,sp,4
 505be18:	8009883a 	mov	r4,r16
 505be1c:	903ee83a 	callr	r18
 505be20:	003fed06 	br	505bdd8 <_gp+0xffff09b0>

0505be24 <wcrtomb>:
 505be24:	defff604 	addi	sp,sp,-40
 505be28:	008141b4 	movhi	r2,1286
 505be2c:	dc800615 	stw	r18,24(sp)
 505be30:	dc400515 	stw	r17,20(sp)
 505be34:	108d0f04 	addi	r2,r2,13372
 505be38:	dfc00915 	stw	ra,36(sp)
 505be3c:	dd000815 	stw	r20,32(sp)
 505be40:	dcc00715 	stw	r19,28(sp)
 505be44:	dc000415 	stw	r16,16(sp)
 505be48:	3025883a 	mov	r18,r6
 505be4c:	14400017 	ldw	r17,0(r2)
 505be50:	20001926 	beq	r4,zero,505beb8 <wcrtomb+0x94>
 505be54:	008141b4 	movhi	r2,1286
 505be58:	108d1104 	addi	r2,r2,13380
 505be5c:	15000017 	ldw	r20,0(r2)
 505be60:	2021883a 	mov	r16,r4
 505be64:	2827883a 	mov	r19,r5
 505be68:	5056fa00 	call	5056fa0 <__locale_charset>
 505be6c:	100f883a 	mov	r7,r2
 505be70:	dc800015 	stw	r18,0(sp)
 505be74:	980d883a 	mov	r6,r19
 505be78:	800b883a 	mov	r5,r16
 505be7c:	8809883a 	mov	r4,r17
 505be80:	a03ee83a 	callr	r20
 505be84:	00ffffc4 	movi	r3,-1
 505be88:	10c0031e 	bne	r2,r3,505be98 <wcrtomb+0x74>
 505be8c:	90000015 	stw	zero,0(r18)
 505be90:	00c02284 	movi	r3,138
 505be94:	88c00015 	stw	r3,0(r17)
 505be98:	dfc00917 	ldw	ra,36(sp)
 505be9c:	dd000817 	ldw	r20,32(sp)
 505bea0:	dcc00717 	ldw	r19,28(sp)
 505bea4:	dc800617 	ldw	r18,24(sp)
 505bea8:	dc400517 	ldw	r17,20(sp)
 505beac:	dc000417 	ldw	r16,16(sp)
 505beb0:	dec00a04 	addi	sp,sp,40
 505beb4:	f800283a 	ret
 505beb8:	008141b4 	movhi	r2,1286
 505bebc:	108d1104 	addi	r2,r2,13380
 505bec0:	14000017 	ldw	r16,0(r2)
 505bec4:	5056fa00 	call	5056fa0 <__locale_charset>
 505bec8:	100f883a 	mov	r7,r2
 505becc:	dc800015 	stw	r18,0(sp)
 505bed0:	000d883a 	mov	r6,zero
 505bed4:	d9400104 	addi	r5,sp,4
 505bed8:	8809883a 	mov	r4,r17
 505bedc:	803ee83a 	callr	r16
 505bee0:	003fe806 	br	505be84 <_gp+0xffff0a5c>

0505bee4 <__ascii_wctomb>:
 505bee4:	28000526 	beq	r5,zero,505befc <__ascii_wctomb+0x18>
 505bee8:	00803fc4 	movi	r2,255
 505beec:	11800536 	bltu	r2,r6,505bf04 <__ascii_wctomb+0x20>
 505bef0:	29800005 	stb	r6,0(r5)
 505bef4:	00800044 	movi	r2,1
 505bef8:	f800283a 	ret
 505befc:	0005883a 	mov	r2,zero
 505bf00:	f800283a 	ret
 505bf04:	00802284 	movi	r2,138
 505bf08:	20800015 	stw	r2,0(r4)
 505bf0c:	00bfffc4 	movi	r2,-1
 505bf10:	f800283a 	ret

0505bf14 <_wctomb_r>:
 505bf14:	008141b4 	movhi	r2,1286
 505bf18:	defff904 	addi	sp,sp,-28
 505bf1c:	108d1104 	addi	r2,r2,13380
 505bf20:	dfc00615 	stw	ra,24(sp)
 505bf24:	dc400515 	stw	r17,20(sp)
 505bf28:	dc000415 	stw	r16,16(sp)
 505bf2c:	3823883a 	mov	r17,r7
 505bf30:	14000017 	ldw	r16,0(r2)
 505bf34:	d9000115 	stw	r4,4(sp)
 505bf38:	d9400215 	stw	r5,8(sp)
 505bf3c:	d9800315 	stw	r6,12(sp)
 505bf40:	5056fa00 	call	5056fa0 <__locale_charset>
 505bf44:	d9800317 	ldw	r6,12(sp)
 505bf48:	d9400217 	ldw	r5,8(sp)
 505bf4c:	d9000117 	ldw	r4,4(sp)
 505bf50:	100f883a 	mov	r7,r2
 505bf54:	dc400015 	stw	r17,0(sp)
 505bf58:	803ee83a 	callr	r16
 505bf5c:	dfc00617 	ldw	ra,24(sp)
 505bf60:	dc400517 	ldw	r17,20(sp)
 505bf64:	dc000417 	ldw	r16,16(sp)
 505bf68:	dec00704 	addi	sp,sp,28
 505bf6c:	f800283a 	ret

0505bf70 <__udivdi3>:
 505bf70:	defff504 	addi	sp,sp,-44
 505bf74:	dcc00415 	stw	r19,16(sp)
 505bf78:	dc000115 	stw	r16,4(sp)
 505bf7c:	dfc00a15 	stw	ra,40(sp)
 505bf80:	df000915 	stw	fp,36(sp)
 505bf84:	ddc00815 	stw	r23,32(sp)
 505bf88:	dd800715 	stw	r22,28(sp)
 505bf8c:	dd400615 	stw	r21,24(sp)
 505bf90:	dd000515 	stw	r20,20(sp)
 505bf94:	dc800315 	stw	r18,12(sp)
 505bf98:	dc400215 	stw	r17,8(sp)
 505bf9c:	2027883a 	mov	r19,r4
 505bfa0:	2821883a 	mov	r16,r5
 505bfa4:	3800411e 	bne	r7,zero,505c0ac <__udivdi3+0x13c>
 505bfa8:	3023883a 	mov	r17,r6
 505bfac:	2025883a 	mov	r18,r4
 505bfb0:	2980522e 	bgeu	r5,r6,505c0fc <__udivdi3+0x18c>
 505bfb4:	00bfffd4 	movui	r2,65535
 505bfb8:	282d883a 	mov	r22,r5
 505bfbc:	1180a836 	bltu	r2,r6,505c260 <__udivdi3+0x2f0>
 505bfc0:	00803fc4 	movi	r2,255
 505bfc4:	1185803a 	cmpltu	r2,r2,r6
 505bfc8:	100490fa 	slli	r2,r2,3
 505bfcc:	3086d83a 	srl	r3,r6,r2
 505bfd0:	010141b4 	movhi	r4,1286
 505bfd4:	21044304 	addi	r4,r4,4364
 505bfd8:	20c7883a 	add	r3,r4,r3
 505bfdc:	18c00003 	ldbu	r3,0(r3)
 505bfe0:	1885883a 	add	r2,r3,r2
 505bfe4:	00c00804 	movi	r3,32
 505bfe8:	1887c83a 	sub	r3,r3,r2
 505bfec:	18000526 	beq	r3,zero,505c004 <__udivdi3+0x94>
 505bff0:	80e0983a 	sll	r16,r16,r3
 505bff4:	9884d83a 	srl	r2,r19,r2
 505bff8:	30e2983a 	sll	r17,r6,r3
 505bffc:	98e4983a 	sll	r18,r19,r3
 505c000:	142cb03a 	or	r22,r2,r16
 505c004:	882ad43a 	srli	r21,r17,16
 505c008:	b009883a 	mov	r4,r22
 505c00c:	8d3fffcc 	andi	r20,r17,65535
 505c010:	a80b883a 	mov	r5,r21
 505c014:	504b4500 	call	504b450 <__umodsi3>
 505c018:	b009883a 	mov	r4,r22
 505c01c:	a80b883a 	mov	r5,r21
 505c020:	1027883a 	mov	r19,r2
 505c024:	504b3ec0 	call	504b3ec <__udivsi3>
 505c028:	102d883a 	mov	r22,r2
 505c02c:	9826943a 	slli	r19,r19,16
 505c030:	9004d43a 	srli	r2,r18,16
 505c034:	a5a1383a 	mul	r16,r20,r22
 505c038:	14c4b03a 	or	r2,r2,r19
 505c03c:	1400052e 	bgeu	r2,r16,505c054 <__udivdi3+0xe4>
 505c040:	1445883a 	add	r2,r2,r17
 505c044:	b0ffffc4 	addi	r3,r22,-1
 505c048:	14400136 	bltu	r2,r17,505c050 <__udivdi3+0xe0>
 505c04c:	14012336 	bltu	r2,r16,505c4dc <__udivdi3+0x56c>
 505c050:	182d883a 	mov	r22,r3
 505c054:	1421c83a 	sub	r16,r2,r16
 505c058:	a80b883a 	mov	r5,r21
 505c05c:	8009883a 	mov	r4,r16
 505c060:	504b4500 	call	504b450 <__umodsi3>
 505c064:	1027883a 	mov	r19,r2
 505c068:	a80b883a 	mov	r5,r21
 505c06c:	8009883a 	mov	r4,r16
 505c070:	504b3ec0 	call	504b3ec <__udivsi3>
 505c074:	9826943a 	slli	r19,r19,16
 505c078:	a0a9383a 	mul	r20,r20,r2
 505c07c:	94bfffcc 	andi	r18,r18,65535
 505c080:	94e4b03a 	or	r18,r18,r19
 505c084:	9500052e 	bgeu	r18,r20,505c09c <__udivdi3+0x12c>
 505c088:	8ca5883a 	add	r18,r17,r18
 505c08c:	10ffffc4 	addi	r3,r2,-1
 505c090:	9440f136 	bltu	r18,r17,505c458 <__udivdi3+0x4e8>
 505c094:	9500f02e 	bgeu	r18,r20,505c458 <__udivdi3+0x4e8>
 505c098:	10bfff84 	addi	r2,r2,-2
 505c09c:	b00c943a 	slli	r6,r22,16
 505c0a0:	0007883a 	mov	r3,zero
 505c0a4:	3084b03a 	or	r2,r6,r2
 505c0a8:	00005906 	br	505c210 <__udivdi3+0x2a0>
 505c0ac:	29c05636 	bltu	r5,r7,505c208 <__udivdi3+0x298>
 505c0b0:	00bfffd4 	movui	r2,65535
 505c0b4:	11c0622e 	bgeu	r2,r7,505c240 <__udivdi3+0x2d0>
 505c0b8:	00804034 	movhi	r2,256
 505c0bc:	10bfffc4 	addi	r2,r2,-1
 505c0c0:	11c0ee36 	bltu	r2,r7,505c47c <__udivdi3+0x50c>
 505c0c4:	00800404 	movi	r2,16
 505c0c8:	3886d83a 	srl	r3,r7,r2
 505c0cc:	010141b4 	movhi	r4,1286
 505c0d0:	21044304 	addi	r4,r4,4364
 505c0d4:	20c7883a 	add	r3,r4,r3
 505c0d8:	18c00003 	ldbu	r3,0(r3)
 505c0dc:	05400804 	movi	r21,32
 505c0e0:	1885883a 	add	r2,r3,r2
 505c0e4:	a8abc83a 	sub	r21,r21,r2
 505c0e8:	a800621e 	bne	r21,zero,505c274 <__udivdi3+0x304>
 505c0ec:	3c00e936 	bltu	r7,r16,505c494 <__udivdi3+0x524>
 505c0f0:	9985403a 	cmpgeu	r2,r19,r6
 505c0f4:	0007883a 	mov	r3,zero
 505c0f8:	00004506 	br	505c210 <__udivdi3+0x2a0>
 505c0fc:	3000041e 	bne	r6,zero,505c110 <__udivdi3+0x1a0>
 505c100:	000b883a 	mov	r5,zero
 505c104:	01000044 	movi	r4,1
 505c108:	504b3ec0 	call	504b3ec <__udivsi3>
 505c10c:	1023883a 	mov	r17,r2
 505c110:	00bfffd4 	movui	r2,65535
 505c114:	14404e2e 	bgeu	r2,r17,505c250 <__udivdi3+0x2e0>
 505c118:	00804034 	movhi	r2,256
 505c11c:	10bfffc4 	addi	r2,r2,-1
 505c120:	1440d836 	bltu	r2,r17,505c484 <__udivdi3+0x514>
 505c124:	00800404 	movi	r2,16
 505c128:	8886d83a 	srl	r3,r17,r2
 505c12c:	010141b4 	movhi	r4,1286
 505c130:	21044304 	addi	r4,r4,4364
 505c134:	20c7883a 	add	r3,r4,r3
 505c138:	18c00003 	ldbu	r3,0(r3)
 505c13c:	1885883a 	add	r2,r3,r2
 505c140:	00c00804 	movi	r3,32
 505c144:	1887c83a 	sub	r3,r3,r2
 505c148:	18008f1e 	bne	r3,zero,505c388 <__udivdi3+0x418>
 505c14c:	882ad43a 	srli	r21,r17,16
 505c150:	8461c83a 	sub	r16,r16,r17
 505c154:	8d3fffcc 	andi	r20,r17,65535
 505c158:	00c00044 	movi	r3,1
 505c15c:	8009883a 	mov	r4,r16
 505c160:	a80b883a 	mov	r5,r21
 505c164:	d8c00015 	stw	r3,0(sp)
 505c168:	504b4500 	call	504b450 <__umodsi3>
 505c16c:	8009883a 	mov	r4,r16
 505c170:	a80b883a 	mov	r5,r21
 505c174:	1027883a 	mov	r19,r2
 505c178:	504b3ec0 	call	504b3ec <__udivsi3>
 505c17c:	9826943a 	slli	r19,r19,16
 505c180:	9008d43a 	srli	r4,r18,16
 505c184:	1521383a 	mul	r16,r2,r20
 505c188:	102d883a 	mov	r22,r2
 505c18c:	24c8b03a 	or	r4,r4,r19
 505c190:	d8c00017 	ldw	r3,0(sp)
 505c194:	2400052e 	bgeu	r4,r16,505c1ac <__udivdi3+0x23c>
 505c198:	2449883a 	add	r4,r4,r17
 505c19c:	b0bfffc4 	addi	r2,r22,-1
 505c1a0:	24400136 	bltu	r4,r17,505c1a8 <__udivdi3+0x238>
 505c1a4:	2400ca36 	bltu	r4,r16,505c4d0 <__udivdi3+0x560>
 505c1a8:	102d883a 	mov	r22,r2
 505c1ac:	2421c83a 	sub	r16,r4,r16
 505c1b0:	a80b883a 	mov	r5,r21
 505c1b4:	8009883a 	mov	r4,r16
 505c1b8:	d8c00015 	stw	r3,0(sp)
 505c1bc:	504b4500 	call	504b450 <__umodsi3>
 505c1c0:	1027883a 	mov	r19,r2
 505c1c4:	a80b883a 	mov	r5,r21
 505c1c8:	8009883a 	mov	r4,r16
 505c1cc:	504b3ec0 	call	504b3ec <__udivsi3>
 505c1d0:	9826943a 	slli	r19,r19,16
 505c1d4:	1529383a 	mul	r20,r2,r20
 505c1d8:	94bfffcc 	andi	r18,r18,65535
 505c1dc:	94e4b03a 	or	r18,r18,r19
 505c1e0:	d8c00017 	ldw	r3,0(sp)
 505c1e4:	9500052e 	bgeu	r18,r20,505c1fc <__udivdi3+0x28c>
 505c1e8:	8ca5883a 	add	r18,r17,r18
 505c1ec:	113fffc4 	addi	r4,r2,-1
 505c1f0:	94409736 	bltu	r18,r17,505c450 <__udivdi3+0x4e0>
 505c1f4:	9500962e 	bgeu	r18,r20,505c450 <__udivdi3+0x4e0>
 505c1f8:	10bfff84 	addi	r2,r2,-2
 505c1fc:	b00c943a 	slli	r6,r22,16
 505c200:	3084b03a 	or	r2,r6,r2
 505c204:	00000206 	br	505c210 <__udivdi3+0x2a0>
 505c208:	0007883a 	mov	r3,zero
 505c20c:	0005883a 	mov	r2,zero
 505c210:	dfc00a17 	ldw	ra,40(sp)
 505c214:	df000917 	ldw	fp,36(sp)
 505c218:	ddc00817 	ldw	r23,32(sp)
 505c21c:	dd800717 	ldw	r22,28(sp)
 505c220:	dd400617 	ldw	r21,24(sp)
 505c224:	dd000517 	ldw	r20,20(sp)
 505c228:	dcc00417 	ldw	r19,16(sp)
 505c22c:	dc800317 	ldw	r18,12(sp)
 505c230:	dc400217 	ldw	r17,8(sp)
 505c234:	dc000117 	ldw	r16,4(sp)
 505c238:	dec00b04 	addi	sp,sp,44
 505c23c:	f800283a 	ret
 505c240:	00803fc4 	movi	r2,255
 505c244:	11c5803a 	cmpltu	r2,r2,r7
 505c248:	100490fa 	slli	r2,r2,3
 505c24c:	003f9e06 	br	505c0c8 <_gp+0xffff0ca0>
 505c250:	00803fc4 	movi	r2,255
 505c254:	1445803a 	cmpltu	r2,r2,r17
 505c258:	100490fa 	slli	r2,r2,3
 505c25c:	003fb206 	br	505c128 <_gp+0xffff0d00>
 505c260:	00804034 	movhi	r2,256
 505c264:	10bfffc4 	addi	r2,r2,-1
 505c268:	11808836 	bltu	r2,r6,505c48c <__udivdi3+0x51c>
 505c26c:	00800404 	movi	r2,16
 505c270:	003f5606 	br	505bfcc <_gp+0xffff0ba4>
 505c274:	30aed83a 	srl	r23,r6,r2
 505c278:	3d4e983a 	sll	r7,r7,r21
 505c27c:	80acd83a 	srl	r22,r16,r2
 505c280:	9884d83a 	srl	r2,r19,r2
 505c284:	3deeb03a 	or	r23,r7,r23
 505c288:	b824d43a 	srli	r18,r23,16
 505c28c:	8560983a 	sll	r16,r16,r21
 505c290:	b009883a 	mov	r4,r22
 505c294:	900b883a 	mov	r5,r18
 505c298:	3568983a 	sll	r20,r6,r21
 505c29c:	1420b03a 	or	r16,r2,r16
 505c2a0:	504b4500 	call	504b450 <__umodsi3>
 505c2a4:	b009883a 	mov	r4,r22
 505c2a8:	900b883a 	mov	r5,r18
 505c2ac:	1023883a 	mov	r17,r2
 505c2b0:	504b3ec0 	call	504b3ec <__udivsi3>
 505c2b4:	8808943a 	slli	r4,r17,16
 505c2b8:	bf3fffcc 	andi	fp,r23,65535
 505c2bc:	8006d43a 	srli	r3,r16,16
 505c2c0:	e0a3383a 	mul	r17,fp,r2
 505c2c4:	100d883a 	mov	r6,r2
 505c2c8:	1906b03a 	or	r3,r3,r4
 505c2cc:	1c40042e 	bgeu	r3,r17,505c2e0 <__udivdi3+0x370>
 505c2d0:	1dc7883a 	add	r3,r3,r23
 505c2d4:	10bfffc4 	addi	r2,r2,-1
 505c2d8:	1dc0752e 	bgeu	r3,r23,505c4b0 <__udivdi3+0x540>
 505c2dc:	100d883a 	mov	r6,r2
 505c2e0:	1c63c83a 	sub	r17,r3,r17
 505c2e4:	900b883a 	mov	r5,r18
 505c2e8:	8809883a 	mov	r4,r17
 505c2ec:	d9800015 	stw	r6,0(sp)
 505c2f0:	504b4500 	call	504b450 <__umodsi3>
 505c2f4:	102d883a 	mov	r22,r2
 505c2f8:	8809883a 	mov	r4,r17
 505c2fc:	900b883a 	mov	r5,r18
 505c300:	504b3ec0 	call	504b3ec <__udivsi3>
 505c304:	b02c943a 	slli	r22,r22,16
 505c308:	e089383a 	mul	r4,fp,r2
 505c30c:	843fffcc 	andi	r16,r16,65535
 505c310:	85a0b03a 	or	r16,r16,r22
 505c314:	d9800017 	ldw	r6,0(sp)
 505c318:	8100042e 	bgeu	r16,r4,505c32c <__udivdi3+0x3bc>
 505c31c:	85e1883a 	add	r16,r16,r23
 505c320:	10ffffc4 	addi	r3,r2,-1
 505c324:	85c05e2e 	bgeu	r16,r23,505c4a0 <__udivdi3+0x530>
 505c328:	1805883a 	mov	r2,r3
 505c32c:	300c943a 	slli	r6,r6,16
 505c330:	a17fffcc 	andi	r5,r20,65535
 505c334:	a028d43a 	srli	r20,r20,16
 505c338:	3084b03a 	or	r2,r6,r2
 505c33c:	10ffffcc 	andi	r3,r2,65535
 505c340:	100cd43a 	srli	r6,r2,16
 505c344:	194f383a 	mul	r7,r3,r5
 505c348:	1d07383a 	mul	r3,r3,r20
 505c34c:	314b383a 	mul	r5,r6,r5
 505c350:	3810d43a 	srli	r8,r7,16
 505c354:	8121c83a 	sub	r16,r16,r4
 505c358:	1947883a 	add	r3,r3,r5
 505c35c:	40c7883a 	add	r3,r8,r3
 505c360:	350d383a 	mul	r6,r6,r20
 505c364:	1940022e 	bgeu	r3,r5,505c370 <__udivdi3+0x400>
 505c368:	01000074 	movhi	r4,1
 505c36c:	310d883a 	add	r6,r6,r4
 505c370:	1828d43a 	srli	r20,r3,16
 505c374:	a18d883a 	add	r6,r20,r6
 505c378:	81803e36 	bltu	r16,r6,505c474 <__udivdi3+0x504>
 505c37c:	81803826 	beq	r16,r6,505c460 <__udivdi3+0x4f0>
 505c380:	0007883a 	mov	r3,zero
 505c384:	003fa206 	br	505c210 <_gp+0xffff0de8>
 505c388:	88e2983a 	sll	r17,r17,r3
 505c38c:	80a8d83a 	srl	r20,r16,r2
 505c390:	80e0983a 	sll	r16,r16,r3
 505c394:	882ad43a 	srli	r21,r17,16
 505c398:	9884d83a 	srl	r2,r19,r2
 505c39c:	a009883a 	mov	r4,r20
 505c3a0:	a80b883a 	mov	r5,r21
 505c3a4:	142eb03a 	or	r23,r2,r16
 505c3a8:	98e4983a 	sll	r18,r19,r3
 505c3ac:	504b4500 	call	504b450 <__umodsi3>
 505c3b0:	a009883a 	mov	r4,r20
 505c3b4:	a80b883a 	mov	r5,r21
 505c3b8:	1021883a 	mov	r16,r2
 505c3bc:	504b3ec0 	call	504b3ec <__udivsi3>
 505c3c0:	1039883a 	mov	fp,r2
 505c3c4:	8d3fffcc 	andi	r20,r17,65535
 505c3c8:	8020943a 	slli	r16,r16,16
 505c3cc:	b804d43a 	srli	r2,r23,16
 505c3d0:	a72d383a 	mul	r22,r20,fp
 505c3d4:	1404b03a 	or	r2,r2,r16
 505c3d8:	1580062e 	bgeu	r2,r22,505c3f4 <__udivdi3+0x484>
 505c3dc:	1445883a 	add	r2,r2,r17
 505c3e0:	e0ffffc4 	addi	r3,fp,-1
 505c3e4:	14403836 	bltu	r2,r17,505c4c8 <__udivdi3+0x558>
 505c3e8:	1580372e 	bgeu	r2,r22,505c4c8 <__udivdi3+0x558>
 505c3ec:	e73fff84 	addi	fp,fp,-2
 505c3f0:	1445883a 	add	r2,r2,r17
 505c3f4:	15adc83a 	sub	r22,r2,r22
 505c3f8:	a80b883a 	mov	r5,r21
 505c3fc:	b009883a 	mov	r4,r22
 505c400:	504b4500 	call	504b450 <__umodsi3>
 505c404:	1027883a 	mov	r19,r2
 505c408:	b009883a 	mov	r4,r22
 505c40c:	a80b883a 	mov	r5,r21
 505c410:	504b3ec0 	call	504b3ec <__udivsi3>
 505c414:	9826943a 	slli	r19,r19,16
 505c418:	a0a1383a 	mul	r16,r20,r2
 505c41c:	b93fffcc 	andi	r4,r23,65535
 505c420:	24c8b03a 	or	r4,r4,r19
 505c424:	2400062e 	bgeu	r4,r16,505c440 <__udivdi3+0x4d0>
 505c428:	2449883a 	add	r4,r4,r17
 505c42c:	10ffffc4 	addi	r3,r2,-1
 505c430:	24402336 	bltu	r4,r17,505c4c0 <__udivdi3+0x550>
 505c434:	2400222e 	bgeu	r4,r16,505c4c0 <__udivdi3+0x550>
 505c438:	10bfff84 	addi	r2,r2,-2
 505c43c:	2449883a 	add	r4,r4,r17
 505c440:	e038943a 	slli	fp,fp,16
 505c444:	2421c83a 	sub	r16,r4,r16
 505c448:	e086b03a 	or	r3,fp,r2
 505c44c:	003f4306 	br	505c15c <_gp+0xffff0d34>
 505c450:	2005883a 	mov	r2,r4
 505c454:	003f6906 	br	505c1fc <_gp+0xffff0dd4>
 505c458:	1805883a 	mov	r2,r3
 505c45c:	003f0f06 	br	505c09c <_gp+0xffff0c74>
 505c460:	1806943a 	slli	r3,r3,16
 505c464:	9d66983a 	sll	r19,r19,r21
 505c468:	39ffffcc 	andi	r7,r7,65535
 505c46c:	19c7883a 	add	r3,r3,r7
 505c470:	98ffc32e 	bgeu	r19,r3,505c380 <_gp+0xffff0f58>
 505c474:	10bfffc4 	addi	r2,r2,-1
 505c478:	003fc106 	br	505c380 <_gp+0xffff0f58>
 505c47c:	00800604 	movi	r2,24
 505c480:	003f1106 	br	505c0c8 <_gp+0xffff0ca0>
 505c484:	00800604 	movi	r2,24
 505c488:	003f2706 	br	505c128 <_gp+0xffff0d00>
 505c48c:	00800604 	movi	r2,24
 505c490:	003ece06 	br	505bfcc <_gp+0xffff0ba4>
 505c494:	0007883a 	mov	r3,zero
 505c498:	00800044 	movi	r2,1
 505c49c:	003f5c06 	br	505c210 <_gp+0xffff0de8>
 505c4a0:	813fa12e 	bgeu	r16,r4,505c328 <_gp+0xffff0f00>
 505c4a4:	10bfff84 	addi	r2,r2,-2
 505c4a8:	85e1883a 	add	r16,r16,r23
 505c4ac:	003f9f06 	br	505c32c <_gp+0xffff0f04>
 505c4b0:	1c7f8a2e 	bgeu	r3,r17,505c2dc <_gp+0xffff0eb4>
 505c4b4:	31bfff84 	addi	r6,r6,-2
 505c4b8:	1dc7883a 	add	r3,r3,r23
 505c4bc:	003f8806 	br	505c2e0 <_gp+0xffff0eb8>
 505c4c0:	1805883a 	mov	r2,r3
 505c4c4:	003fde06 	br	505c440 <_gp+0xffff1018>
 505c4c8:	1839883a 	mov	fp,r3
 505c4cc:	003fc906 	br	505c3f4 <_gp+0xffff0fcc>
 505c4d0:	b5bfff84 	addi	r22,r22,-2
 505c4d4:	2449883a 	add	r4,r4,r17
 505c4d8:	003f3406 	br	505c1ac <_gp+0xffff0d84>
 505c4dc:	b5bfff84 	addi	r22,r22,-2
 505c4e0:	1445883a 	add	r2,r2,r17
 505c4e4:	003edb06 	br	505c054 <_gp+0xffff0c2c>

0505c4e8 <__umoddi3>:
 505c4e8:	defff404 	addi	sp,sp,-48
 505c4ec:	df000a15 	stw	fp,40(sp)
 505c4f0:	dc400315 	stw	r17,12(sp)
 505c4f4:	dc000215 	stw	r16,8(sp)
 505c4f8:	dfc00b15 	stw	ra,44(sp)
 505c4fc:	ddc00915 	stw	r23,36(sp)
 505c500:	dd800815 	stw	r22,32(sp)
 505c504:	dd400715 	stw	r21,28(sp)
 505c508:	dd000615 	stw	r20,24(sp)
 505c50c:	dcc00515 	stw	r19,20(sp)
 505c510:	dc800415 	stw	r18,16(sp)
 505c514:	2021883a 	mov	r16,r4
 505c518:	2823883a 	mov	r17,r5
 505c51c:	2839883a 	mov	fp,r5
 505c520:	38003c1e 	bne	r7,zero,505c614 <__umoddi3+0x12c>
 505c524:	3027883a 	mov	r19,r6
 505c528:	2029883a 	mov	r20,r4
 505c52c:	2980512e 	bgeu	r5,r6,505c674 <__umoddi3+0x18c>
 505c530:	00bfffd4 	movui	r2,65535
 505c534:	11809a36 	bltu	r2,r6,505c7a0 <__umoddi3+0x2b8>
 505c538:	01003fc4 	movi	r4,255
 505c53c:	2189803a 	cmpltu	r4,r4,r6
 505c540:	200890fa 	slli	r4,r4,3
 505c544:	3104d83a 	srl	r2,r6,r4
 505c548:	00c141b4 	movhi	r3,1286
 505c54c:	18c44304 	addi	r3,r3,4364
 505c550:	1885883a 	add	r2,r3,r2
 505c554:	10c00003 	ldbu	r3,0(r2)
 505c558:	00800804 	movi	r2,32
 505c55c:	1909883a 	add	r4,r3,r4
 505c560:	1125c83a 	sub	r18,r2,r4
 505c564:	90000526 	beq	r18,zero,505c57c <__umoddi3+0x94>
 505c568:	8ca2983a 	sll	r17,r17,r18
 505c56c:	8108d83a 	srl	r4,r16,r4
 505c570:	34a6983a 	sll	r19,r6,r18
 505c574:	84a8983a 	sll	r20,r16,r18
 505c578:	2478b03a 	or	fp,r4,r17
 505c57c:	982ed43a 	srli	r23,r19,16
 505c580:	e009883a 	mov	r4,fp
 505c584:	9dbfffcc 	andi	r22,r19,65535
 505c588:	b80b883a 	mov	r5,r23
 505c58c:	504b4500 	call	504b450 <__umodsi3>
 505c590:	e009883a 	mov	r4,fp
 505c594:	b80b883a 	mov	r5,r23
 505c598:	102b883a 	mov	r21,r2
 505c59c:	504b3ec0 	call	504b3ec <__udivsi3>
 505c5a0:	a806943a 	slli	r3,r21,16
 505c5a4:	a008d43a 	srli	r4,r20,16
 505c5a8:	b085383a 	mul	r2,r22,r2
 505c5ac:	20c8b03a 	or	r4,r4,r3
 505c5b0:	2080032e 	bgeu	r4,r2,505c5c0 <__umoddi3+0xd8>
 505c5b4:	24c9883a 	add	r4,r4,r19
 505c5b8:	24c00136 	bltu	r4,r19,505c5c0 <__umoddi3+0xd8>
 505c5bc:	20811036 	bltu	r4,r2,505ca00 <__umoddi3+0x518>
 505c5c0:	20abc83a 	sub	r21,r4,r2
 505c5c4:	b80b883a 	mov	r5,r23
 505c5c8:	a809883a 	mov	r4,r21
 505c5cc:	504b4500 	call	504b450 <__umodsi3>
 505c5d0:	1023883a 	mov	r17,r2
 505c5d4:	b80b883a 	mov	r5,r23
 505c5d8:	a809883a 	mov	r4,r21
 505c5dc:	504b3ec0 	call	504b3ec <__udivsi3>
 505c5e0:	8822943a 	slli	r17,r17,16
 505c5e4:	b085383a 	mul	r2,r22,r2
 505c5e8:	a0ffffcc 	andi	r3,r20,65535
 505c5ec:	1c46b03a 	or	r3,r3,r17
 505c5f0:	1880042e 	bgeu	r3,r2,505c604 <__umoddi3+0x11c>
 505c5f4:	1cc7883a 	add	r3,r3,r19
 505c5f8:	1cc00236 	bltu	r3,r19,505c604 <__umoddi3+0x11c>
 505c5fc:	1880012e 	bgeu	r3,r2,505c604 <__umoddi3+0x11c>
 505c600:	1cc7883a 	add	r3,r3,r19
 505c604:	1885c83a 	sub	r2,r3,r2
 505c608:	1484d83a 	srl	r2,r2,r18
 505c60c:	0007883a 	mov	r3,zero
 505c610:	00004f06 	br	505c750 <__umoddi3+0x268>
 505c614:	29c04c36 	bltu	r5,r7,505c748 <__umoddi3+0x260>
 505c618:	00bfffd4 	movui	r2,65535
 505c61c:	11c0582e 	bgeu	r2,r7,505c780 <__umoddi3+0x298>
 505c620:	00804034 	movhi	r2,256
 505c624:	10bfffc4 	addi	r2,r2,-1
 505c628:	11c0e736 	bltu	r2,r7,505c9c8 <__umoddi3+0x4e0>
 505c62c:	01000404 	movi	r4,16
 505c630:	3904d83a 	srl	r2,r7,r4
 505c634:	00c141b4 	movhi	r3,1286
 505c638:	18c44304 	addi	r3,r3,4364
 505c63c:	1885883a 	add	r2,r3,r2
 505c640:	14c00003 	ldbu	r19,0(r2)
 505c644:	00c00804 	movi	r3,32
 505c648:	9927883a 	add	r19,r19,r4
 505c64c:	1ce9c83a 	sub	r20,r3,r19
 505c650:	a000581e 	bne	r20,zero,505c7b4 <__umoddi3+0x2cc>
 505c654:	3c400136 	bltu	r7,r17,505c65c <__umoddi3+0x174>
 505c658:	8180eb36 	bltu	r16,r6,505ca08 <__umoddi3+0x520>
 505c65c:	8185c83a 	sub	r2,r16,r6
 505c660:	89e3c83a 	sub	r17,r17,r7
 505c664:	8089803a 	cmpltu	r4,r16,r2
 505c668:	8939c83a 	sub	fp,r17,r4
 505c66c:	e007883a 	mov	r3,fp
 505c670:	00003706 	br	505c750 <__umoddi3+0x268>
 505c674:	3000041e 	bne	r6,zero,505c688 <__umoddi3+0x1a0>
 505c678:	000b883a 	mov	r5,zero
 505c67c:	01000044 	movi	r4,1
 505c680:	504b3ec0 	call	504b3ec <__udivsi3>
 505c684:	1027883a 	mov	r19,r2
 505c688:	00bfffd4 	movui	r2,65535
 505c68c:	14c0402e 	bgeu	r2,r19,505c790 <__umoddi3+0x2a8>
 505c690:	00804034 	movhi	r2,256
 505c694:	10bfffc4 	addi	r2,r2,-1
 505c698:	14c0cd36 	bltu	r2,r19,505c9d0 <__umoddi3+0x4e8>
 505c69c:	00800404 	movi	r2,16
 505c6a0:	9886d83a 	srl	r3,r19,r2
 505c6a4:	010141b4 	movhi	r4,1286
 505c6a8:	21044304 	addi	r4,r4,4364
 505c6ac:	20c7883a 	add	r3,r4,r3
 505c6b0:	18c00003 	ldbu	r3,0(r3)
 505c6b4:	1887883a 	add	r3,r3,r2
 505c6b8:	00800804 	movi	r2,32
 505c6bc:	10e5c83a 	sub	r18,r2,r3
 505c6c0:	9000901e 	bne	r18,zero,505c904 <__umoddi3+0x41c>
 505c6c4:	982cd43a 	srli	r22,r19,16
 505c6c8:	8ce3c83a 	sub	r17,r17,r19
 505c6cc:	9d7fffcc 	andi	r21,r19,65535
 505c6d0:	b00b883a 	mov	r5,r22
 505c6d4:	8809883a 	mov	r4,r17
 505c6d8:	504b4500 	call	504b450 <__umodsi3>
 505c6dc:	8809883a 	mov	r4,r17
 505c6e0:	b00b883a 	mov	r5,r22
 505c6e4:	1021883a 	mov	r16,r2
 505c6e8:	504b3ec0 	call	504b3ec <__udivsi3>
 505c6ec:	8006943a 	slli	r3,r16,16
 505c6f0:	a008d43a 	srli	r4,r20,16
 505c6f4:	1545383a 	mul	r2,r2,r21
 505c6f8:	20c8b03a 	or	r4,r4,r3
 505c6fc:	2080042e 	bgeu	r4,r2,505c710 <__umoddi3+0x228>
 505c700:	24c9883a 	add	r4,r4,r19
 505c704:	24c00236 	bltu	r4,r19,505c710 <__umoddi3+0x228>
 505c708:	2080012e 	bgeu	r4,r2,505c710 <__umoddi3+0x228>
 505c70c:	24c9883a 	add	r4,r4,r19
 505c710:	20a1c83a 	sub	r16,r4,r2
 505c714:	b00b883a 	mov	r5,r22
 505c718:	8009883a 	mov	r4,r16
 505c71c:	504b4500 	call	504b450 <__umodsi3>
 505c720:	1023883a 	mov	r17,r2
 505c724:	b00b883a 	mov	r5,r22
 505c728:	8009883a 	mov	r4,r16
 505c72c:	504b3ec0 	call	504b3ec <__udivsi3>
 505c730:	8822943a 	slli	r17,r17,16
 505c734:	1545383a 	mul	r2,r2,r21
 505c738:	a53fffcc 	andi	r20,r20,65535
 505c73c:	a446b03a 	or	r3,r20,r17
 505c740:	18bfb02e 	bgeu	r3,r2,505c604 <_gp+0xffff11dc>
 505c744:	003fab06 	br	505c5f4 <_gp+0xffff11cc>
 505c748:	2005883a 	mov	r2,r4
 505c74c:	2807883a 	mov	r3,r5
 505c750:	dfc00b17 	ldw	ra,44(sp)
 505c754:	df000a17 	ldw	fp,40(sp)
 505c758:	ddc00917 	ldw	r23,36(sp)
 505c75c:	dd800817 	ldw	r22,32(sp)
 505c760:	dd400717 	ldw	r21,28(sp)
 505c764:	dd000617 	ldw	r20,24(sp)
 505c768:	dcc00517 	ldw	r19,20(sp)
 505c76c:	dc800417 	ldw	r18,16(sp)
 505c770:	dc400317 	ldw	r17,12(sp)
 505c774:	dc000217 	ldw	r16,8(sp)
 505c778:	dec00c04 	addi	sp,sp,48
 505c77c:	f800283a 	ret
 505c780:	04c03fc4 	movi	r19,255
 505c784:	99c9803a 	cmpltu	r4,r19,r7
 505c788:	200890fa 	slli	r4,r4,3
 505c78c:	003fa806 	br	505c630 <_gp+0xffff1208>
 505c790:	00803fc4 	movi	r2,255
 505c794:	14c5803a 	cmpltu	r2,r2,r19
 505c798:	100490fa 	slli	r2,r2,3
 505c79c:	003fc006 	br	505c6a0 <_gp+0xffff1278>
 505c7a0:	00804034 	movhi	r2,256
 505c7a4:	10bfffc4 	addi	r2,r2,-1
 505c7a8:	11808b36 	bltu	r2,r6,505c9d8 <__umoddi3+0x4f0>
 505c7ac:	01000404 	movi	r4,16
 505c7b0:	003f6406 	br	505c544 <_gp+0xffff111c>
 505c7b4:	34c4d83a 	srl	r2,r6,r19
 505c7b8:	3d0e983a 	sll	r7,r7,r20
 505c7bc:	8cf8d83a 	srl	fp,r17,r19
 505c7c0:	8d10983a 	sll	r8,r17,r20
 505c7c4:	38aab03a 	or	r21,r7,r2
 505c7c8:	a82cd43a 	srli	r22,r21,16
 505c7cc:	84e2d83a 	srl	r17,r16,r19
 505c7d0:	e009883a 	mov	r4,fp
 505c7d4:	b00b883a 	mov	r5,r22
 505c7d8:	8a22b03a 	or	r17,r17,r8
 505c7dc:	3524983a 	sll	r18,r6,r20
 505c7e0:	504b4500 	call	504b450 <__umodsi3>
 505c7e4:	e009883a 	mov	r4,fp
 505c7e8:	b00b883a 	mov	r5,r22
 505c7ec:	102f883a 	mov	r23,r2
 505c7f0:	504b3ec0 	call	504b3ec <__udivsi3>
 505c7f4:	100d883a 	mov	r6,r2
 505c7f8:	b808943a 	slli	r4,r23,16
 505c7fc:	aa3fffcc 	andi	r8,r21,65535
 505c800:	8804d43a 	srli	r2,r17,16
 505c804:	41af383a 	mul	r23,r8,r6
 505c808:	8520983a 	sll	r16,r16,r20
 505c80c:	1104b03a 	or	r2,r2,r4
 505c810:	15c0042e 	bgeu	r2,r23,505c824 <__umoddi3+0x33c>
 505c814:	1545883a 	add	r2,r2,r21
 505c818:	30ffffc4 	addi	r3,r6,-1
 505c81c:	1540742e 	bgeu	r2,r21,505c9f0 <__umoddi3+0x508>
 505c820:	180d883a 	mov	r6,r3
 505c824:	15efc83a 	sub	r23,r2,r23
 505c828:	b00b883a 	mov	r5,r22
 505c82c:	b809883a 	mov	r4,r23
 505c830:	d9800115 	stw	r6,4(sp)
 505c834:	da000015 	stw	r8,0(sp)
 505c838:	504b4500 	call	504b450 <__umodsi3>
 505c83c:	b00b883a 	mov	r5,r22
 505c840:	b809883a 	mov	r4,r23
 505c844:	1039883a 	mov	fp,r2
 505c848:	504b3ec0 	call	504b3ec <__udivsi3>
 505c84c:	da000017 	ldw	r8,0(sp)
 505c850:	e038943a 	slli	fp,fp,16
 505c854:	100b883a 	mov	r5,r2
 505c858:	4089383a 	mul	r4,r8,r2
 505c85c:	8a3fffcc 	andi	r8,r17,65535
 505c860:	4710b03a 	or	r8,r8,fp
 505c864:	d9800117 	ldw	r6,4(sp)
 505c868:	4100042e 	bgeu	r8,r4,505c87c <__umoddi3+0x394>
 505c86c:	4551883a 	add	r8,r8,r21
 505c870:	10bfffc4 	addi	r2,r2,-1
 505c874:	45405a2e 	bgeu	r8,r21,505c9e0 <__umoddi3+0x4f8>
 505c878:	100b883a 	mov	r5,r2
 505c87c:	300c943a 	slli	r6,r6,16
 505c880:	91ffffcc 	andi	r7,r18,65535
 505c884:	9004d43a 	srli	r2,r18,16
 505c888:	314cb03a 	or	r6,r6,r5
 505c88c:	317fffcc 	andi	r5,r6,65535
 505c890:	300cd43a 	srli	r6,r6,16
 505c894:	29d3383a 	mul	r9,r5,r7
 505c898:	288b383a 	mul	r5,r5,r2
 505c89c:	31cf383a 	mul	r7,r6,r7
 505c8a0:	4806d43a 	srli	r3,r9,16
 505c8a4:	4111c83a 	sub	r8,r8,r4
 505c8a8:	29cb883a 	add	r5,r5,r7
 505c8ac:	194b883a 	add	r5,r3,r5
 505c8b0:	3085383a 	mul	r2,r6,r2
 505c8b4:	29c0022e 	bgeu	r5,r7,505c8c0 <__umoddi3+0x3d8>
 505c8b8:	00c00074 	movhi	r3,1
 505c8bc:	10c5883a 	add	r2,r2,r3
 505c8c0:	2808d43a 	srli	r4,r5,16
 505c8c4:	280a943a 	slli	r5,r5,16
 505c8c8:	4a7fffcc 	andi	r9,r9,65535
 505c8cc:	2085883a 	add	r2,r4,r2
 505c8d0:	2a4b883a 	add	r5,r5,r9
 505c8d4:	40803636 	bltu	r8,r2,505c9b0 <__umoddi3+0x4c8>
 505c8d8:	40804d26 	beq	r8,r2,505ca10 <__umoddi3+0x528>
 505c8dc:	4089c83a 	sub	r4,r8,r2
 505c8e0:	280f883a 	mov	r7,r5
 505c8e4:	81cfc83a 	sub	r7,r16,r7
 505c8e8:	81c7803a 	cmpltu	r3,r16,r7
 505c8ec:	20c7c83a 	sub	r3,r4,r3
 505c8f0:	1cc4983a 	sll	r2,r3,r19
 505c8f4:	3d0ed83a 	srl	r7,r7,r20
 505c8f8:	1d06d83a 	srl	r3,r3,r20
 505c8fc:	11c4b03a 	or	r2,r2,r7
 505c900:	003f9306 	br	505c750 <_gp+0xffff1328>
 505c904:	9ca6983a 	sll	r19,r19,r18
 505c908:	88e8d83a 	srl	r20,r17,r3
 505c90c:	80c4d83a 	srl	r2,r16,r3
 505c910:	982cd43a 	srli	r22,r19,16
 505c914:	8ca2983a 	sll	r17,r17,r18
 505c918:	a009883a 	mov	r4,r20
 505c91c:	b00b883a 	mov	r5,r22
 505c920:	1478b03a 	or	fp,r2,r17
 505c924:	504b4500 	call	504b450 <__umodsi3>
 505c928:	a009883a 	mov	r4,r20
 505c92c:	b00b883a 	mov	r5,r22
 505c930:	1023883a 	mov	r17,r2
 505c934:	504b3ec0 	call	504b3ec <__udivsi3>
 505c938:	9d7fffcc 	andi	r21,r19,65535
 505c93c:	880a943a 	slli	r5,r17,16
 505c940:	e008d43a 	srli	r4,fp,16
 505c944:	a885383a 	mul	r2,r21,r2
 505c948:	84a8983a 	sll	r20,r16,r18
 505c94c:	2148b03a 	or	r4,r4,r5
 505c950:	2080042e 	bgeu	r4,r2,505c964 <__umoddi3+0x47c>
 505c954:	24c9883a 	add	r4,r4,r19
 505c958:	24c00236 	bltu	r4,r19,505c964 <__umoddi3+0x47c>
 505c95c:	2080012e 	bgeu	r4,r2,505c964 <__umoddi3+0x47c>
 505c960:	24c9883a 	add	r4,r4,r19
 505c964:	20a3c83a 	sub	r17,r4,r2
 505c968:	b00b883a 	mov	r5,r22
 505c96c:	8809883a 	mov	r4,r17
 505c970:	504b4500 	call	504b450 <__umodsi3>
 505c974:	102f883a 	mov	r23,r2
 505c978:	8809883a 	mov	r4,r17
 505c97c:	b00b883a 	mov	r5,r22
 505c980:	504b3ec0 	call	504b3ec <__udivsi3>
 505c984:	b82e943a 	slli	r23,r23,16
 505c988:	a885383a 	mul	r2,r21,r2
 505c98c:	e13fffcc 	andi	r4,fp,65535
 505c990:	25c8b03a 	or	r4,r4,r23
 505c994:	2080042e 	bgeu	r4,r2,505c9a8 <__umoddi3+0x4c0>
 505c998:	24c9883a 	add	r4,r4,r19
 505c99c:	24c00236 	bltu	r4,r19,505c9a8 <__umoddi3+0x4c0>
 505c9a0:	2080012e 	bgeu	r4,r2,505c9a8 <__umoddi3+0x4c0>
 505c9a4:	24c9883a 	add	r4,r4,r19
 505c9a8:	20a3c83a 	sub	r17,r4,r2
 505c9ac:	003f4806 	br	505c6d0 <_gp+0xffff12a8>
 505c9b0:	2c8fc83a 	sub	r7,r5,r18
 505c9b4:	1545c83a 	sub	r2,r2,r21
 505c9b8:	29cb803a 	cmpltu	r5,r5,r7
 505c9bc:	1145c83a 	sub	r2,r2,r5
 505c9c0:	4089c83a 	sub	r4,r8,r2
 505c9c4:	003fc706 	br	505c8e4 <_gp+0xffff14bc>
 505c9c8:	01000604 	movi	r4,24
 505c9cc:	003f1806 	br	505c630 <_gp+0xffff1208>
 505c9d0:	00800604 	movi	r2,24
 505c9d4:	003f3206 	br	505c6a0 <_gp+0xffff1278>
 505c9d8:	01000604 	movi	r4,24
 505c9dc:	003ed906 	br	505c544 <_gp+0xffff111c>
 505c9e0:	413fa52e 	bgeu	r8,r4,505c878 <_gp+0xffff1450>
 505c9e4:	297fff84 	addi	r5,r5,-2
 505c9e8:	4551883a 	add	r8,r8,r21
 505c9ec:	003fa306 	br	505c87c <_gp+0xffff1454>
 505c9f0:	15ff8b2e 	bgeu	r2,r23,505c820 <_gp+0xffff13f8>
 505c9f4:	31bfff84 	addi	r6,r6,-2
 505c9f8:	1545883a 	add	r2,r2,r21
 505c9fc:	003f8906 	br	505c824 <_gp+0xffff13fc>
 505ca00:	24c9883a 	add	r4,r4,r19
 505ca04:	003eee06 	br	505c5c0 <_gp+0xffff1198>
 505ca08:	8005883a 	mov	r2,r16
 505ca0c:	003f1706 	br	505c66c <_gp+0xffff1244>
 505ca10:	817fe736 	bltu	r16,r5,505c9b0 <_gp+0xffff1588>
 505ca14:	280f883a 	mov	r7,r5
 505ca18:	0009883a 	mov	r4,zero
 505ca1c:	003fb106 	br	505c8e4 <_gp+0xffff14bc>

0505ca20 <__ledf2>:
 505ca20:	2804d53a 	srli	r2,r5,20
 505ca24:	3810d53a 	srli	r8,r7,20
 505ca28:	00c00434 	movhi	r3,16
 505ca2c:	18ffffc4 	addi	r3,r3,-1
 505ca30:	1081ffcc 	andi	r2,r2,2047
 505ca34:	0241ffc4 	movi	r9,2047
 505ca38:	28d4703a 	and	r10,r5,r3
 505ca3c:	4201ffcc 	andi	r8,r8,2047
 505ca40:	38c6703a 	and	r3,r7,r3
 505ca44:	280ad7fa 	srli	r5,r5,31
 505ca48:	380ed7fa 	srli	r7,r7,31
 505ca4c:	12401f26 	beq	r2,r9,505cacc <__ledf2+0xac>
 505ca50:	0241ffc4 	movi	r9,2047
 505ca54:	42401426 	beq	r8,r9,505caa8 <__ledf2+0x88>
 505ca58:	1000091e 	bne	r2,zero,505ca80 <__ledf2+0x60>
 505ca5c:	2296b03a 	or	r11,r4,r10
 505ca60:	5813003a 	cmpeq	r9,r11,zero
 505ca64:	29403fcc 	andi	r5,r5,255
 505ca68:	40000a1e 	bne	r8,zero,505ca94 <__ledf2+0x74>
 505ca6c:	30d8b03a 	or	r12,r6,r3
 505ca70:	6000081e 	bne	r12,zero,505ca94 <__ledf2+0x74>
 505ca74:	0005883a 	mov	r2,zero
 505ca78:	5800111e 	bne	r11,zero,505cac0 <__ledf2+0xa0>
 505ca7c:	f800283a 	ret
 505ca80:	29403fcc 	andi	r5,r5,255
 505ca84:	40000c1e 	bne	r8,zero,505cab8 <__ledf2+0x98>
 505ca88:	30d2b03a 	or	r9,r6,r3
 505ca8c:	48000c26 	beq	r9,zero,505cac0 <__ledf2+0xa0>
 505ca90:	0013883a 	mov	r9,zero
 505ca94:	39c03fcc 	andi	r7,r7,255
 505ca98:	48000826 	beq	r9,zero,505cabc <__ledf2+0x9c>
 505ca9c:	38001126 	beq	r7,zero,505cae4 <__ledf2+0xc4>
 505caa0:	00800044 	movi	r2,1
 505caa4:	f800283a 	ret
 505caa8:	30d2b03a 	or	r9,r6,r3
 505caac:	483fea26 	beq	r9,zero,505ca58 <_gp+0xffff1630>
 505cab0:	00800084 	movi	r2,2
 505cab4:	f800283a 	ret
 505cab8:	39c03fcc 	andi	r7,r7,255
 505cabc:	39400726 	beq	r7,r5,505cadc <__ledf2+0xbc>
 505cac0:	2800081e 	bne	r5,zero,505cae4 <__ledf2+0xc4>
 505cac4:	00800044 	movi	r2,1
 505cac8:	f800283a 	ret
 505cacc:	2292b03a 	or	r9,r4,r10
 505cad0:	483fdf26 	beq	r9,zero,505ca50 <_gp+0xffff1628>
 505cad4:	00800084 	movi	r2,2
 505cad8:	f800283a 	ret
 505cadc:	4080030e 	bge	r8,r2,505caec <__ledf2+0xcc>
 505cae0:	383fef26 	beq	r7,zero,505caa0 <_gp+0xffff1678>
 505cae4:	00bfffc4 	movi	r2,-1
 505cae8:	f800283a 	ret
 505caec:	123feb16 	blt	r2,r8,505ca9c <_gp+0xffff1674>
 505caf0:	1abff336 	bltu	r3,r10,505cac0 <_gp+0xffff1698>
 505caf4:	50c00326 	beq	r10,r3,505cb04 <__ledf2+0xe4>
 505caf8:	50c0042e 	bgeu	r10,r3,505cb0c <__ledf2+0xec>
 505cafc:	283fe81e 	bne	r5,zero,505caa0 <_gp+0xffff1678>
 505cb00:	003ff806 	br	505cae4 <_gp+0xffff16bc>
 505cb04:	313fee36 	bltu	r6,r4,505cac0 <_gp+0xffff1698>
 505cb08:	21bffc36 	bltu	r4,r6,505cafc <_gp+0xffff16d4>
 505cb0c:	0005883a 	mov	r2,zero
 505cb10:	f800283a 	ret

0505cb14 <__floatunsidf>:
 505cb14:	defffe04 	addi	sp,sp,-8
 505cb18:	dc000015 	stw	r16,0(sp)
 505cb1c:	dfc00115 	stw	ra,4(sp)
 505cb20:	2021883a 	mov	r16,r4
 505cb24:	20002226 	beq	r4,zero,505cbb0 <__floatunsidf+0x9c>
 505cb28:	504f0340 	call	504f034 <__clzsi2>
 505cb2c:	01010784 	movi	r4,1054
 505cb30:	2089c83a 	sub	r4,r4,r2
 505cb34:	01810cc4 	movi	r6,1075
 505cb38:	310dc83a 	sub	r6,r6,r4
 505cb3c:	00c007c4 	movi	r3,31
 505cb40:	1980120e 	bge	r3,r6,505cb8c <__floatunsidf+0x78>
 505cb44:	00c104c4 	movi	r3,1043
 505cb48:	1907c83a 	sub	r3,r3,r4
 505cb4c:	80ca983a 	sll	r5,r16,r3
 505cb50:	00800434 	movhi	r2,16
 505cb54:	10bfffc4 	addi	r2,r2,-1
 505cb58:	2101ffcc 	andi	r4,r4,2047
 505cb5c:	0021883a 	mov	r16,zero
 505cb60:	288a703a 	and	r5,r5,r2
 505cb64:	2008953a 	slli	r4,r4,20
 505cb68:	00c00434 	movhi	r3,16
 505cb6c:	18ffffc4 	addi	r3,r3,-1
 505cb70:	28c6703a 	and	r3,r5,r3
 505cb74:	8005883a 	mov	r2,r16
 505cb78:	1906b03a 	or	r3,r3,r4
 505cb7c:	dfc00117 	ldw	ra,4(sp)
 505cb80:	dc000017 	ldw	r16,0(sp)
 505cb84:	dec00204 	addi	sp,sp,8
 505cb88:	f800283a 	ret
 505cb8c:	00c002c4 	movi	r3,11
 505cb90:	188bc83a 	sub	r5,r3,r2
 505cb94:	814ad83a 	srl	r5,r16,r5
 505cb98:	00c00434 	movhi	r3,16
 505cb9c:	18ffffc4 	addi	r3,r3,-1
 505cba0:	81a0983a 	sll	r16,r16,r6
 505cba4:	2101ffcc 	andi	r4,r4,2047
 505cba8:	28ca703a 	and	r5,r5,r3
 505cbac:	003fed06 	br	505cb64 <_gp+0xffff173c>
 505cbb0:	0009883a 	mov	r4,zero
 505cbb4:	000b883a 	mov	r5,zero
 505cbb8:	003fea06 	br	505cb64 <_gp+0xffff173c>

0505cbbc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 505cbbc:	defff504 	addi	sp,sp,-44
 505cbc0:	df000a15 	stw	fp,40(sp)
 505cbc4:	df000a04 	addi	fp,sp,40
 505cbc8:	e13ffc15 	stw	r4,-16(fp)
 505cbcc:	e17ffd15 	stw	r5,-12(fp)
 505cbd0:	e1bffe15 	stw	r6,-8(fp)
 505cbd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 505cbd8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 505cbdc:	d0a81b17 	ldw	r2,-24468(gp)
  
  if (alt_ticks_per_second ())
 505cbe0:	10003c26 	beq	r2,zero,505ccd4 <alt_alarm_start+0x118>
  {
    if (alarm)
 505cbe4:	e0bffc17 	ldw	r2,-16(fp)
 505cbe8:	10003826 	beq	r2,zero,505cccc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 505cbec:	e0bffc17 	ldw	r2,-16(fp)
 505cbf0:	e0fffe17 	ldw	r3,-8(fp)
 505cbf4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 505cbf8:	e0bffc17 	ldw	r2,-16(fp)
 505cbfc:	e0ffff17 	ldw	r3,-4(fp)
 505cc00:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505cc04:	0005303a 	rdctl	r2,status
 505cc08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505cc0c:	e0fff917 	ldw	r3,-28(fp)
 505cc10:	00bfff84 	movi	r2,-2
 505cc14:	1884703a 	and	r2,r3,r2
 505cc18:	1001703a 	wrctl	status,r2
  
  return context;
 505cc1c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 505cc20:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 505cc24:	d0a81c17 	ldw	r2,-24464(gp)
      
      current_nticks = alt_nticks();
 505cc28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 505cc2c:	e0fffd17 	ldw	r3,-12(fp)
 505cc30:	e0bff617 	ldw	r2,-40(fp)
 505cc34:	1885883a 	add	r2,r3,r2
 505cc38:	10c00044 	addi	r3,r2,1
 505cc3c:	e0bffc17 	ldw	r2,-16(fp)
 505cc40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 505cc44:	e0bffc17 	ldw	r2,-16(fp)
 505cc48:	10c00217 	ldw	r3,8(r2)
 505cc4c:	e0bff617 	ldw	r2,-40(fp)
 505cc50:	1880042e 	bgeu	r3,r2,505cc64 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 505cc54:	e0bffc17 	ldw	r2,-16(fp)
 505cc58:	00c00044 	movi	r3,1
 505cc5c:	10c00405 	stb	r3,16(r2)
 505cc60:	00000206 	br	505cc6c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 505cc64:	e0bffc17 	ldw	r2,-16(fp)
 505cc68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 505cc6c:	e0bffc17 	ldw	r2,-16(fp)
 505cc70:	d0e01004 	addi	r3,gp,-32704
 505cc74:	e0fffa15 	stw	r3,-24(fp)
 505cc78:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 505cc7c:	e0bffb17 	ldw	r2,-20(fp)
 505cc80:	e0fffa17 	ldw	r3,-24(fp)
 505cc84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 505cc88:	e0bffa17 	ldw	r2,-24(fp)
 505cc8c:	10c00017 	ldw	r3,0(r2)
 505cc90:	e0bffb17 	ldw	r2,-20(fp)
 505cc94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 505cc98:	e0bffa17 	ldw	r2,-24(fp)
 505cc9c:	10800017 	ldw	r2,0(r2)
 505cca0:	e0fffb17 	ldw	r3,-20(fp)
 505cca4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 505cca8:	e0bffa17 	ldw	r2,-24(fp)
 505ccac:	e0fffb17 	ldw	r3,-20(fp)
 505ccb0:	10c00015 	stw	r3,0(r2)
 505ccb4:	e0bff817 	ldw	r2,-32(fp)
 505ccb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505ccbc:	e0bff717 	ldw	r2,-36(fp)
 505ccc0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 505ccc4:	0005883a 	mov	r2,zero
 505ccc8:	00000306 	br	505ccd8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 505cccc:	00bffa84 	movi	r2,-22
 505ccd0:	00000106 	br	505ccd8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 505ccd4:	00bfde84 	movi	r2,-134
  }
}
 505ccd8:	e037883a 	mov	sp,fp
 505ccdc:	df000017 	ldw	fp,0(sp)
 505cce0:	dec00104 	addi	sp,sp,4
 505cce4:	f800283a 	ret

0505cce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505cce8:	defffe04 	addi	sp,sp,-8
 505ccec:	dfc00115 	stw	ra,4(sp)
 505ccf0:	df000015 	stw	fp,0(sp)
 505ccf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505ccf8:	d0a00d17 	ldw	r2,-32716(gp)
 505ccfc:	10000326 	beq	r2,zero,505cd0c <alt_get_errno+0x24>
 505cd00:	d0a00d17 	ldw	r2,-32716(gp)
 505cd04:	103ee83a 	callr	r2
 505cd08:	00000106 	br	505cd10 <alt_get_errno+0x28>
 505cd0c:	d0a81304 	addi	r2,gp,-24500
}
 505cd10:	e037883a 	mov	sp,fp
 505cd14:	dfc00117 	ldw	ra,4(sp)
 505cd18:	df000017 	ldw	fp,0(sp)
 505cd1c:	dec00204 	addi	sp,sp,8
 505cd20:	f800283a 	ret

0505cd24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 505cd24:	defffb04 	addi	sp,sp,-20
 505cd28:	dfc00415 	stw	ra,16(sp)
 505cd2c:	df000315 	stw	fp,12(sp)
 505cd30:	df000304 	addi	fp,sp,12
 505cd34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 505cd38:	e0bfff17 	ldw	r2,-4(fp)
 505cd3c:	10000616 	blt	r2,zero,505cd58 <close+0x34>
 505cd40:	e0bfff17 	ldw	r2,-4(fp)
 505cd44:	10c00324 	muli	r3,r2,12
 505cd48:	008141b4 	movhi	r2,1286
 505cd4c:	10886104 	addi	r2,r2,8580
 505cd50:	1885883a 	add	r2,r3,r2
 505cd54:	00000106 	br	505cd5c <close+0x38>
 505cd58:	0005883a 	mov	r2,zero
 505cd5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 505cd60:	e0bffd17 	ldw	r2,-12(fp)
 505cd64:	10001926 	beq	r2,zero,505cdcc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 505cd68:	e0bffd17 	ldw	r2,-12(fp)
 505cd6c:	10800017 	ldw	r2,0(r2)
 505cd70:	10800417 	ldw	r2,16(r2)
 505cd74:	10000626 	beq	r2,zero,505cd90 <close+0x6c>
 505cd78:	e0bffd17 	ldw	r2,-12(fp)
 505cd7c:	10800017 	ldw	r2,0(r2)
 505cd80:	10800417 	ldw	r2,16(r2)
 505cd84:	e13ffd17 	ldw	r4,-12(fp)
 505cd88:	103ee83a 	callr	r2
 505cd8c:	00000106 	br	505cd94 <close+0x70>
 505cd90:	0005883a 	mov	r2,zero
 505cd94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 505cd98:	e13fff17 	ldw	r4,-4(fp)
 505cd9c:	505d5640 	call	505d564 <alt_release_fd>
    if (rval < 0)
 505cda0:	e0bffe17 	ldw	r2,-8(fp)
 505cda4:	1000070e 	bge	r2,zero,505cdc4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 505cda8:	505cce80 	call	505cce8 <alt_get_errno>
 505cdac:	1007883a 	mov	r3,r2
 505cdb0:	e0bffe17 	ldw	r2,-8(fp)
 505cdb4:	0085c83a 	sub	r2,zero,r2
 505cdb8:	18800015 	stw	r2,0(r3)
      return -1;
 505cdbc:	00bfffc4 	movi	r2,-1
 505cdc0:	00000706 	br	505cde0 <close+0xbc>
    }
    return 0;
 505cdc4:	0005883a 	mov	r2,zero
 505cdc8:	00000506 	br	505cde0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 505cdcc:	505cce80 	call	505cce8 <alt_get_errno>
 505cdd0:	1007883a 	mov	r3,r2
 505cdd4:	00801444 	movi	r2,81
 505cdd8:	18800015 	stw	r2,0(r3)
    return -1;
 505cddc:	00bfffc4 	movi	r2,-1
  }
}
 505cde0:	e037883a 	mov	sp,fp
 505cde4:	dfc00117 	ldw	ra,4(sp)
 505cde8:	df000017 	ldw	fp,0(sp)
 505cdec:	dec00204 	addi	sp,sp,8
 505cdf0:	f800283a 	ret

0505cdf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 505cdf4:	defffc04 	addi	sp,sp,-16
 505cdf8:	df000315 	stw	fp,12(sp)
 505cdfc:	df000304 	addi	fp,sp,12
 505ce00:	e13ffd15 	stw	r4,-12(fp)
 505ce04:	e17ffe15 	stw	r5,-8(fp)
 505ce08:	e1bfff15 	stw	r6,-4(fp)
  return len;
 505ce0c:	e0bfff17 	ldw	r2,-4(fp)
}
 505ce10:	e037883a 	mov	sp,fp
 505ce14:	df000017 	ldw	fp,0(sp)
 505ce18:	dec00104 	addi	sp,sp,4
 505ce1c:	f800283a 	ret

0505ce20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505ce20:	defffe04 	addi	sp,sp,-8
 505ce24:	dfc00115 	stw	ra,4(sp)
 505ce28:	df000015 	stw	fp,0(sp)
 505ce2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505ce30:	d0a00d17 	ldw	r2,-32716(gp)
 505ce34:	10000326 	beq	r2,zero,505ce44 <alt_get_errno+0x24>
 505ce38:	d0a00d17 	ldw	r2,-32716(gp)
 505ce3c:	103ee83a 	callr	r2
 505ce40:	00000106 	br	505ce48 <alt_get_errno+0x28>
 505ce44:	d0a81304 	addi	r2,gp,-24500
}
 505ce48:	e037883a 	mov	sp,fp
 505ce4c:	dfc00117 	ldw	ra,4(sp)
 505ce50:	df000017 	ldw	fp,0(sp)
 505ce54:	dec00204 	addi	sp,sp,8
 505ce58:	f800283a 	ret

0505ce5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 505ce5c:	defffb04 	addi	sp,sp,-20
 505ce60:	dfc00415 	stw	ra,16(sp)
 505ce64:	df000315 	stw	fp,12(sp)
 505ce68:	df000304 	addi	fp,sp,12
 505ce6c:	e13ffe15 	stw	r4,-8(fp)
 505ce70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 505ce74:	e0bffe17 	ldw	r2,-8(fp)
 505ce78:	10000616 	blt	r2,zero,505ce94 <fstat+0x38>
 505ce7c:	e0bffe17 	ldw	r2,-8(fp)
 505ce80:	10c00324 	muli	r3,r2,12
 505ce84:	008141b4 	movhi	r2,1286
 505ce88:	10886104 	addi	r2,r2,8580
 505ce8c:	1885883a 	add	r2,r3,r2
 505ce90:	00000106 	br	505ce98 <fstat+0x3c>
 505ce94:	0005883a 	mov	r2,zero
 505ce98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 505ce9c:	e0bffd17 	ldw	r2,-12(fp)
 505cea0:	10001026 	beq	r2,zero,505cee4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 505cea4:	e0bffd17 	ldw	r2,-12(fp)
 505cea8:	10800017 	ldw	r2,0(r2)
 505ceac:	10800817 	ldw	r2,32(r2)
 505ceb0:	10000726 	beq	r2,zero,505ced0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 505ceb4:	e0bffd17 	ldw	r2,-12(fp)
 505ceb8:	10800017 	ldw	r2,0(r2)
 505cebc:	10800817 	ldw	r2,32(r2)
 505cec0:	e17fff17 	ldw	r5,-4(fp)
 505cec4:	e13ffd17 	ldw	r4,-12(fp)
 505cec8:	103ee83a 	callr	r2
 505cecc:	00000a06 	br	505cef8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 505ced0:	e0bfff17 	ldw	r2,-4(fp)
 505ced4:	00c80004 	movi	r3,8192
 505ced8:	10c00115 	stw	r3,4(r2)
      return 0;
 505cedc:	0005883a 	mov	r2,zero
 505cee0:	00000506 	br	505cef8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 505cee4:	505ce200 	call	505ce20 <alt_get_errno>
 505cee8:	1007883a 	mov	r3,r2
 505ceec:	00801444 	movi	r2,81
 505cef0:	18800015 	stw	r2,0(r3)
    return -1;
 505cef4:	00bfffc4 	movi	r2,-1
  }
}
 505cef8:	e037883a 	mov	sp,fp
 505cefc:	dfc00117 	ldw	ra,4(sp)
 505cf00:	df000017 	ldw	fp,0(sp)
 505cf04:	dec00204 	addi	sp,sp,8
 505cf08:	f800283a 	ret

0505cf0c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 505cf0c:	defff004 	addi	sp,sp,-64
 505cf10:	df000f15 	stw	fp,60(sp)
 505cf14:	df000f04 	addi	fp,sp,60
 505cf18:	e13ffd15 	stw	r4,-12(fp)
 505cf1c:	e17ffe15 	stw	r5,-8(fp)
 505cf20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 505cf24:	00bffa84 	movi	r2,-22
 505cf28:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 505cf2c:	e0bffd17 	ldw	r2,-12(fp)
 505cf30:	10800828 	cmpgeui	r2,r2,32
 505cf34:	1000501e 	bne	r2,zero,505d078 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505cf38:	0005303a 	rdctl	r2,status
 505cf3c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505cf40:	e0fff617 	ldw	r3,-40(fp)
 505cf44:	00bfff84 	movi	r2,-2
 505cf48:	1884703a 	and	r2,r3,r2
 505cf4c:	1001703a 	wrctl	status,r2
  
  return context;
 505cf50:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 505cf54:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 505cf58:	008141b4 	movhi	r2,1286
 505cf5c:	10963d04 	addi	r2,r2,22772
 505cf60:	e0fffd17 	ldw	r3,-12(fp)
 505cf64:	180690fa 	slli	r3,r3,3
 505cf68:	10c5883a 	add	r2,r2,r3
 505cf6c:	e0ffff17 	ldw	r3,-4(fp)
 505cf70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 505cf74:	008141b4 	movhi	r2,1286
 505cf78:	10963d04 	addi	r2,r2,22772
 505cf7c:	e0fffd17 	ldw	r3,-12(fp)
 505cf80:	180690fa 	slli	r3,r3,3
 505cf84:	10c5883a 	add	r2,r2,r3
 505cf88:	10800104 	addi	r2,r2,4
 505cf8c:	e0fffe17 	ldw	r3,-8(fp)
 505cf90:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 505cf94:	e0bfff17 	ldw	r2,-4(fp)
 505cf98:	10001926 	beq	r2,zero,505d000 <alt_irq_register+0xf4>
 505cf9c:	e0bffd17 	ldw	r2,-12(fp)
 505cfa0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505cfa4:	0005303a 	rdctl	r2,status
 505cfa8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505cfac:	e0fff717 	ldw	r3,-36(fp)
 505cfb0:	00bfff84 	movi	r2,-2
 505cfb4:	1884703a 	and	r2,r3,r2
 505cfb8:	1001703a 	wrctl	status,r2
  
  return context;
 505cfbc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 505cfc0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 505cfc4:	00c00044 	movi	r3,1
 505cfc8:	e0bff217 	ldw	r2,-56(fp)
 505cfcc:	1884983a 	sll	r2,r3,r2
 505cfd0:	1007883a 	mov	r3,r2
 505cfd4:	d0a81717 	ldw	r2,-24484(gp)
 505cfd8:	1884b03a 	or	r2,r3,r2
 505cfdc:	d0a81715 	stw	r2,-24484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 505cfe0:	d0a81717 	ldw	r2,-24484(gp)
 505cfe4:	100170fa 	wrctl	ienable,r2
 505cfe8:	e0bff817 	ldw	r2,-32(fp)
 505cfec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505cff0:	e0bff917 	ldw	r2,-28(fp)
 505cff4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 505cff8:	0005883a 	mov	r2,zero
 505cffc:	00001906 	br	505d064 <alt_irq_register+0x158>
 505d000:	e0bffd17 	ldw	r2,-12(fp)
 505d004:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505d008:	0005303a 	rdctl	r2,status
 505d00c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505d010:	e0fffa17 	ldw	r3,-24(fp)
 505d014:	00bfff84 	movi	r2,-2
 505d018:	1884703a 	and	r2,r3,r2
 505d01c:	1001703a 	wrctl	status,r2
  
  return context;
 505d020:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 505d024:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 505d028:	00c00044 	movi	r3,1
 505d02c:	e0bff417 	ldw	r2,-48(fp)
 505d030:	1884983a 	sll	r2,r3,r2
 505d034:	0084303a 	nor	r2,zero,r2
 505d038:	1007883a 	mov	r3,r2
 505d03c:	d0a81717 	ldw	r2,-24484(gp)
 505d040:	1884703a 	and	r2,r3,r2
 505d044:	d0a81715 	stw	r2,-24484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 505d048:	d0a81717 	ldw	r2,-24484(gp)
 505d04c:	100170fa 	wrctl	ienable,r2
 505d050:	e0bffb17 	ldw	r2,-20(fp)
 505d054:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505d058:	e0bffc17 	ldw	r2,-16(fp)
 505d05c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 505d060:	0005883a 	mov	r2,zero
 505d064:	e0bff115 	stw	r2,-60(fp)
 505d068:	e0bff317 	ldw	r2,-52(fp)
 505d06c:	e0bff515 	stw	r2,-44(fp)
 505d070:	e0bff517 	ldw	r2,-44(fp)
 505d074:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 505d078:	e0bff117 	ldw	r2,-60(fp)
}
 505d07c:	e037883a 	mov	sp,fp
 505d080:	df000017 	ldw	fp,0(sp)
 505d084:	dec00104 	addi	sp,sp,4
 505d088:	f800283a 	ret

0505d08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505d08c:	defffe04 	addi	sp,sp,-8
 505d090:	dfc00115 	stw	ra,4(sp)
 505d094:	df000015 	stw	fp,0(sp)
 505d098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505d09c:	d0a00d17 	ldw	r2,-32716(gp)
 505d0a0:	10000326 	beq	r2,zero,505d0b0 <alt_get_errno+0x24>
 505d0a4:	d0a00d17 	ldw	r2,-32716(gp)
 505d0a8:	103ee83a 	callr	r2
 505d0ac:	00000106 	br	505d0b4 <alt_get_errno+0x28>
 505d0b0:	d0a81304 	addi	r2,gp,-24500
}
 505d0b4:	e037883a 	mov	sp,fp
 505d0b8:	dfc00117 	ldw	ra,4(sp)
 505d0bc:	df000017 	ldw	fp,0(sp)
 505d0c0:	dec00204 	addi	sp,sp,8
 505d0c4:	f800283a 	ret

0505d0c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 505d0c8:	deffed04 	addi	sp,sp,-76
 505d0cc:	dfc01215 	stw	ra,72(sp)
 505d0d0:	df001115 	stw	fp,68(sp)
 505d0d4:	df001104 	addi	fp,sp,68
 505d0d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 505d0dc:	e0bfff17 	ldw	r2,-4(fp)
 505d0e0:	10000616 	blt	r2,zero,505d0fc <isatty+0x34>
 505d0e4:	e0bfff17 	ldw	r2,-4(fp)
 505d0e8:	10c00324 	muli	r3,r2,12
 505d0ec:	008141b4 	movhi	r2,1286
 505d0f0:	10886104 	addi	r2,r2,8580
 505d0f4:	1885883a 	add	r2,r3,r2
 505d0f8:	00000106 	br	505d100 <isatty+0x38>
 505d0fc:	0005883a 	mov	r2,zero
 505d100:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 505d104:	e0bfef17 	ldw	r2,-68(fp)
 505d108:	10000e26 	beq	r2,zero,505d144 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 505d10c:	e0bfef17 	ldw	r2,-68(fp)
 505d110:	10800017 	ldw	r2,0(r2)
 505d114:	10800817 	ldw	r2,32(r2)
 505d118:	1000021e 	bne	r2,zero,505d124 <isatty+0x5c>
    {
      return 1;
 505d11c:	00800044 	movi	r2,1
 505d120:	00000d06 	br	505d158 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 505d124:	e0bff004 	addi	r2,fp,-64
 505d128:	100b883a 	mov	r5,r2
 505d12c:	e13fff17 	ldw	r4,-4(fp)
 505d130:	505ce5c0 	call	505ce5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 505d134:	e0bff117 	ldw	r2,-60(fp)
 505d138:	10880020 	cmpeqi	r2,r2,8192
 505d13c:	10803fcc 	andi	r2,r2,255
 505d140:	00000506 	br	505d158 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 505d144:	505d08c0 	call	505d08c <alt_get_errno>
 505d148:	1007883a 	mov	r3,r2
 505d14c:	00801444 	movi	r2,81
 505d150:	18800015 	stw	r2,0(r3)
    return 0;
 505d154:	0005883a 	mov	r2,zero
  }
}
 505d158:	e037883a 	mov	sp,fp
 505d15c:	dfc00117 	ldw	ra,4(sp)
 505d160:	df000017 	ldw	fp,0(sp)
 505d164:	dec00204 	addi	sp,sp,8
 505d168:	f800283a 	ret

0505d16c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 505d16c:	defffc04 	addi	sp,sp,-16
 505d170:	df000315 	stw	fp,12(sp)
 505d174:	df000304 	addi	fp,sp,12
 505d178:	e13ffd15 	stw	r4,-12(fp)
 505d17c:	e17ffe15 	stw	r5,-8(fp)
 505d180:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 505d184:	e0fffe17 	ldw	r3,-8(fp)
 505d188:	e0bffd17 	ldw	r2,-12(fp)
 505d18c:	18800c26 	beq	r3,r2,505d1c0 <alt_load_section+0x54>
  {
    while( to != end )
 505d190:	00000806 	br	505d1b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 505d194:	e0bffe17 	ldw	r2,-8(fp)
 505d198:	10c00104 	addi	r3,r2,4
 505d19c:	e0fffe15 	stw	r3,-8(fp)
 505d1a0:	e0fffd17 	ldw	r3,-12(fp)
 505d1a4:	19000104 	addi	r4,r3,4
 505d1a8:	e13ffd15 	stw	r4,-12(fp)
 505d1ac:	18c00017 	ldw	r3,0(r3)
 505d1b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 505d1b4:	e0fffe17 	ldw	r3,-8(fp)
 505d1b8:	e0bfff17 	ldw	r2,-4(fp)
 505d1bc:	18bff51e 	bne	r3,r2,505d194 <_gp+0xffff1d6c>
    {
      *to++ = *from++;
    }
  }
}
 505d1c0:	0001883a 	nop
 505d1c4:	e037883a 	mov	sp,fp
 505d1c8:	df000017 	ldw	fp,0(sp)
 505d1cc:	dec00104 	addi	sp,sp,4
 505d1d0:	f800283a 	ret

0505d1d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 505d1d4:	defffe04 	addi	sp,sp,-8
 505d1d8:	dfc00115 	stw	ra,4(sp)
 505d1dc:	df000015 	stw	fp,0(sp)
 505d1e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 505d1e4:	018141b4 	movhi	r6,1286
 505d1e8:	318d1c04 	addi	r6,r6,13424
 505d1ec:	014141b4 	movhi	r5,1286
 505d1f0:	29452804 	addi	r5,r5,5280
 505d1f4:	010141b4 	movhi	r4,1286
 505d1f8:	210d1c04 	addi	r4,r4,13424
 505d1fc:	505d16c0 	call	505d16c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 505d200:	01814134 	movhi	r6,1284
 505d204:	31809204 	addi	r6,r6,584
 505d208:	01414134 	movhi	r5,1284
 505d20c:	29400804 	addi	r5,r5,32
 505d210:	01014134 	movhi	r4,1284
 505d214:	21000804 	addi	r4,r4,32
 505d218:	505d16c0 	call	505d16c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 505d21c:	018141b4 	movhi	r6,1286
 505d220:	31852804 	addi	r6,r6,5280
 505d224:	014141b4 	movhi	r5,1286
 505d228:	29430a04 	addi	r5,r5,3112
 505d22c:	010141b4 	movhi	r4,1286
 505d230:	21030a04 	addi	r4,r4,3112
 505d234:	505d16c0 	call	505d16c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 505d238:	505ff540 	call	505ff54 <alt_dcache_flush_all>
  alt_icache_flush_all();
 505d23c:	50601cc0 	call	50601cc <alt_icache_flush_all>
}
 505d240:	0001883a 	nop
 505d244:	e037883a 	mov	sp,fp
 505d248:	dfc00117 	ldw	ra,4(sp)
 505d24c:	df000017 	ldw	fp,0(sp)
 505d250:	dec00204 	addi	sp,sp,8
 505d254:	f800283a 	ret

0505d258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505d258:	defffe04 	addi	sp,sp,-8
 505d25c:	dfc00115 	stw	ra,4(sp)
 505d260:	df000015 	stw	fp,0(sp)
 505d264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505d268:	d0a00d17 	ldw	r2,-32716(gp)
 505d26c:	10000326 	beq	r2,zero,505d27c <alt_get_errno+0x24>
 505d270:	d0a00d17 	ldw	r2,-32716(gp)
 505d274:	103ee83a 	callr	r2
 505d278:	00000106 	br	505d280 <alt_get_errno+0x28>
 505d27c:	d0a81304 	addi	r2,gp,-24500
}
 505d280:	e037883a 	mov	sp,fp
 505d284:	dfc00117 	ldw	ra,4(sp)
 505d288:	df000017 	ldw	fp,0(sp)
 505d28c:	dec00204 	addi	sp,sp,8
 505d290:	f800283a 	ret

0505d294 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 505d294:	defff904 	addi	sp,sp,-28
 505d298:	dfc00615 	stw	ra,24(sp)
 505d29c:	df000515 	stw	fp,20(sp)
 505d2a0:	df000504 	addi	fp,sp,20
 505d2a4:	e13ffd15 	stw	r4,-12(fp)
 505d2a8:	e17ffe15 	stw	r5,-8(fp)
 505d2ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 505d2b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 505d2b4:	e0bffd17 	ldw	r2,-12(fp)
 505d2b8:	10000616 	blt	r2,zero,505d2d4 <lseek+0x40>
 505d2bc:	e0bffd17 	ldw	r2,-12(fp)
 505d2c0:	10c00324 	muli	r3,r2,12
 505d2c4:	008141b4 	movhi	r2,1286
 505d2c8:	10886104 	addi	r2,r2,8580
 505d2cc:	1885883a 	add	r2,r3,r2
 505d2d0:	00000106 	br	505d2d8 <lseek+0x44>
 505d2d4:	0005883a 	mov	r2,zero
 505d2d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 505d2dc:	e0bffc17 	ldw	r2,-16(fp)
 505d2e0:	10001026 	beq	r2,zero,505d324 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 505d2e4:	e0bffc17 	ldw	r2,-16(fp)
 505d2e8:	10800017 	ldw	r2,0(r2)
 505d2ec:	10800717 	ldw	r2,28(r2)
 505d2f0:	10000926 	beq	r2,zero,505d318 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 505d2f4:	e0bffc17 	ldw	r2,-16(fp)
 505d2f8:	10800017 	ldw	r2,0(r2)
 505d2fc:	10800717 	ldw	r2,28(r2)
 505d300:	e1bfff17 	ldw	r6,-4(fp)
 505d304:	e17ffe17 	ldw	r5,-8(fp)
 505d308:	e13ffc17 	ldw	r4,-16(fp)
 505d30c:	103ee83a 	callr	r2
 505d310:	e0bffb15 	stw	r2,-20(fp)
 505d314:	00000506 	br	505d32c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 505d318:	00bfde84 	movi	r2,-134
 505d31c:	e0bffb15 	stw	r2,-20(fp)
 505d320:	00000206 	br	505d32c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 505d324:	00bfebc4 	movi	r2,-81
 505d328:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 505d32c:	e0bffb17 	ldw	r2,-20(fp)
 505d330:	1000070e 	bge	r2,zero,505d350 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 505d334:	505d2580 	call	505d258 <alt_get_errno>
 505d338:	1007883a 	mov	r3,r2
 505d33c:	e0bffb17 	ldw	r2,-20(fp)
 505d340:	0085c83a 	sub	r2,zero,r2
 505d344:	18800015 	stw	r2,0(r3)
    rc = -1;
 505d348:	00bfffc4 	movi	r2,-1
 505d34c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 505d350:	e0bffb17 	ldw	r2,-20(fp)
}
 505d354:	e037883a 	mov	sp,fp
 505d358:	dfc00117 	ldw	ra,4(sp)
 505d35c:	df000017 	ldw	fp,0(sp)
 505d360:	dec00204 	addi	sp,sp,8
 505d364:	f800283a 	ret

0505d368 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 505d368:	defffd04 	addi	sp,sp,-12
 505d36c:	dfc00215 	stw	ra,8(sp)
 505d370:	df000115 	stw	fp,4(sp)
 505d374:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 505d378:	0009883a 	mov	r4,zero
 505d37c:	505d9b40 	call	505d9b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 505d380:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 505d384:	505d9ec0 	call	505d9ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 505d388:	018141b4 	movhi	r6,1286
 505d38c:	31850904 	addi	r6,r6,5156
 505d390:	014141b4 	movhi	r5,1286
 505d394:	29450904 	addi	r5,r5,5156
 505d398:	010141b4 	movhi	r4,1286
 505d39c:	21050904 	addi	r4,r4,5156
 505d3a0:	50602c40 	call	50602c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 505d3a4:	506007c0 	call	506007c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 505d3a8:	010141b4 	movhi	r4,1286
 505d3ac:	21003704 	addi	r4,r4,220
 505d3b0:	50608900 	call	5060890 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 505d3b4:	d0a81817 	ldw	r2,-24480(gp)
 505d3b8:	d0e81917 	ldw	r3,-24476(gp)
 505d3bc:	d1281a17 	ldw	r4,-24472(gp)
 505d3c0:	200d883a 	mov	r6,r4
 505d3c4:	180b883a 	mov	r5,r3
 505d3c8:	1009883a 	mov	r4,r2
 505d3cc:	50484a80 	call	50484a8 <main>
 505d3d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 505d3d4:	01000044 	movi	r4,1
 505d3d8:	505cd240 	call	505cd24 <close>
  exit (result);
 505d3dc:	e13fff17 	ldw	r4,-4(fp)
 505d3e0:	50608a40 	call	50608a4 <exit>

0505d3e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 505d3e4:	defffe04 	addi	sp,sp,-8
 505d3e8:	df000115 	stw	fp,4(sp)
 505d3ec:	df000104 	addi	fp,sp,4
 505d3f0:	e13fff15 	stw	r4,-4(fp)
}
 505d3f4:	0001883a 	nop
 505d3f8:	e037883a 	mov	sp,fp
 505d3fc:	df000017 	ldw	fp,0(sp)
 505d400:	dec00104 	addi	sp,sp,4
 505d404:	f800283a 	ret

0505d408 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 505d408:	defffe04 	addi	sp,sp,-8
 505d40c:	df000115 	stw	fp,4(sp)
 505d410:	df000104 	addi	fp,sp,4
 505d414:	e13fff15 	stw	r4,-4(fp)
}
 505d418:	0001883a 	nop
 505d41c:	e037883a 	mov	sp,fp
 505d420:	df000017 	ldw	fp,0(sp)
 505d424:	dec00104 	addi	sp,sp,4
 505d428:	f800283a 	ret

0505d42c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505d42c:	defffe04 	addi	sp,sp,-8
 505d430:	dfc00115 	stw	ra,4(sp)
 505d434:	df000015 	stw	fp,0(sp)
 505d438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505d43c:	d0a00d17 	ldw	r2,-32716(gp)
 505d440:	10000326 	beq	r2,zero,505d450 <alt_get_errno+0x24>
 505d444:	d0a00d17 	ldw	r2,-32716(gp)
 505d448:	103ee83a 	callr	r2
 505d44c:	00000106 	br	505d454 <alt_get_errno+0x28>
 505d450:	d0a81304 	addi	r2,gp,-24500
}
 505d454:	e037883a 	mov	sp,fp
 505d458:	dfc00117 	ldw	ra,4(sp)
 505d45c:	df000017 	ldw	fp,0(sp)
 505d460:	dec00204 	addi	sp,sp,8
 505d464:	f800283a 	ret

0505d468 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 505d468:	defff904 	addi	sp,sp,-28
 505d46c:	dfc00615 	stw	ra,24(sp)
 505d470:	df000515 	stw	fp,20(sp)
 505d474:	df000504 	addi	fp,sp,20
 505d478:	e13ffd15 	stw	r4,-12(fp)
 505d47c:	e17ffe15 	stw	r5,-8(fp)
 505d480:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 505d484:	e0bffd17 	ldw	r2,-12(fp)
 505d488:	10000616 	blt	r2,zero,505d4a4 <read+0x3c>
 505d48c:	e0bffd17 	ldw	r2,-12(fp)
 505d490:	10c00324 	muli	r3,r2,12
 505d494:	008141b4 	movhi	r2,1286
 505d498:	10886104 	addi	r2,r2,8580
 505d49c:	1885883a 	add	r2,r3,r2
 505d4a0:	00000106 	br	505d4a8 <read+0x40>
 505d4a4:	0005883a 	mov	r2,zero
 505d4a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 505d4ac:	e0bffb17 	ldw	r2,-20(fp)
 505d4b0:	10002226 	beq	r2,zero,505d53c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 505d4b4:	e0bffb17 	ldw	r2,-20(fp)
 505d4b8:	10800217 	ldw	r2,8(r2)
 505d4bc:	108000cc 	andi	r2,r2,3
 505d4c0:	10800060 	cmpeqi	r2,r2,1
 505d4c4:	1000181e 	bne	r2,zero,505d528 <read+0xc0>
        (fd->dev->read))
 505d4c8:	e0bffb17 	ldw	r2,-20(fp)
 505d4cc:	10800017 	ldw	r2,0(r2)
 505d4d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 505d4d4:	10001426 	beq	r2,zero,505d528 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 505d4d8:	e0bffb17 	ldw	r2,-20(fp)
 505d4dc:	10800017 	ldw	r2,0(r2)
 505d4e0:	10800517 	ldw	r2,20(r2)
 505d4e4:	e0ffff17 	ldw	r3,-4(fp)
 505d4e8:	180d883a 	mov	r6,r3
 505d4ec:	e17ffe17 	ldw	r5,-8(fp)
 505d4f0:	e13ffb17 	ldw	r4,-20(fp)
 505d4f4:	103ee83a 	callr	r2
 505d4f8:	e0bffc15 	stw	r2,-16(fp)
 505d4fc:	e0bffc17 	ldw	r2,-16(fp)
 505d500:	1000070e 	bge	r2,zero,505d520 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 505d504:	505d42c0 	call	505d42c <alt_get_errno>
 505d508:	1007883a 	mov	r3,r2
 505d50c:	e0bffc17 	ldw	r2,-16(fp)
 505d510:	0085c83a 	sub	r2,zero,r2
 505d514:	18800015 	stw	r2,0(r3)
          return -1;
 505d518:	00bfffc4 	movi	r2,-1
 505d51c:	00000c06 	br	505d550 <read+0xe8>
        }
        return rval;
 505d520:	e0bffc17 	ldw	r2,-16(fp)
 505d524:	00000a06 	br	505d550 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 505d528:	505d42c0 	call	505d42c <alt_get_errno>
 505d52c:	1007883a 	mov	r3,r2
 505d530:	00800344 	movi	r2,13
 505d534:	18800015 	stw	r2,0(r3)
 505d538:	00000406 	br	505d54c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 505d53c:	505d42c0 	call	505d42c <alt_get_errno>
 505d540:	1007883a 	mov	r3,r2
 505d544:	00801444 	movi	r2,81
 505d548:	18800015 	stw	r2,0(r3)
  }
  return -1;
 505d54c:	00bfffc4 	movi	r2,-1
}
 505d550:	e037883a 	mov	sp,fp
 505d554:	dfc00117 	ldw	ra,4(sp)
 505d558:	df000017 	ldw	fp,0(sp)
 505d55c:	dec00204 	addi	sp,sp,8
 505d560:	f800283a 	ret

0505d564 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 505d564:	defffe04 	addi	sp,sp,-8
 505d568:	df000115 	stw	fp,4(sp)
 505d56c:	df000104 	addi	fp,sp,4
 505d570:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 505d574:	e0bfff17 	ldw	r2,-4(fp)
 505d578:	108000d0 	cmplti	r2,r2,3
 505d57c:	10000d1e 	bne	r2,zero,505d5b4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 505d580:	008141b4 	movhi	r2,1286
 505d584:	10886104 	addi	r2,r2,8580
 505d588:	e0ffff17 	ldw	r3,-4(fp)
 505d58c:	18c00324 	muli	r3,r3,12
 505d590:	10c5883a 	add	r2,r2,r3
 505d594:	10800204 	addi	r2,r2,8
 505d598:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 505d59c:	008141b4 	movhi	r2,1286
 505d5a0:	10886104 	addi	r2,r2,8580
 505d5a4:	e0ffff17 	ldw	r3,-4(fp)
 505d5a8:	18c00324 	muli	r3,r3,12
 505d5ac:	10c5883a 	add	r2,r2,r3
 505d5b0:	10000015 	stw	zero,0(r2)
  }
}
 505d5b4:	0001883a 	nop
 505d5b8:	e037883a 	mov	sp,fp
 505d5bc:	df000017 	ldw	fp,0(sp)
 505d5c0:	dec00104 	addi	sp,sp,4
 505d5c4:	f800283a 	ret

0505d5c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 505d5c8:	defff904 	addi	sp,sp,-28
 505d5cc:	df000615 	stw	fp,24(sp)
 505d5d0:	df000604 	addi	fp,sp,24
 505d5d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505d5d8:	0005303a 	rdctl	r2,status
 505d5dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505d5e0:	e0fffe17 	ldw	r3,-8(fp)
 505d5e4:	00bfff84 	movi	r2,-2
 505d5e8:	1884703a 	and	r2,r3,r2
 505d5ec:	1001703a 	wrctl	status,r2
  
  return context;
 505d5f0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 505d5f4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 505d5f8:	d0a00f17 	ldw	r2,-32708(gp)
 505d5fc:	10c000c4 	addi	r3,r2,3
 505d600:	00bfff04 	movi	r2,-4
 505d604:	1884703a 	and	r2,r3,r2
 505d608:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 505d60c:	d0e00f17 	ldw	r3,-32708(gp)
 505d610:	e0bfff17 	ldw	r2,-4(fp)
 505d614:	1887883a 	add	r3,r3,r2
 505d618:	008141b4 	movhi	r2,1286
 505d61c:	109c4004 	addi	r2,r2,28928
 505d620:	10c0062e 	bgeu	r2,r3,505d63c <sbrk+0x74>
 505d624:	e0bffb17 	ldw	r2,-20(fp)
 505d628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505d62c:	e0bffa17 	ldw	r2,-24(fp)
 505d630:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 505d634:	00bfffc4 	movi	r2,-1
 505d638:	00000b06 	br	505d668 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 505d63c:	d0a00f17 	ldw	r2,-32708(gp)
 505d640:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 505d644:	d0e00f17 	ldw	r3,-32708(gp)
 505d648:	e0bfff17 	ldw	r2,-4(fp)
 505d64c:	1885883a 	add	r2,r3,r2
 505d650:	d0a00f15 	stw	r2,-32708(gp)
 505d654:	e0bffb17 	ldw	r2,-20(fp)
 505d658:	e0bffc15 	stw	r2,-16(fp)
 505d65c:	e0bffc17 	ldw	r2,-16(fp)
 505d660:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 505d664:	e0bffd17 	ldw	r2,-12(fp)
} 
 505d668:	e037883a 	mov	sp,fp
 505d66c:	df000017 	ldw	fp,0(sp)
 505d670:	dec00104 	addi	sp,sp,4
 505d674:	f800283a 	ret

0505d678 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 505d678:	defffa04 	addi	sp,sp,-24
 505d67c:	df000515 	stw	fp,20(sp)
 505d680:	df000504 	addi	fp,sp,20
 505d684:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505d688:	0005303a 	rdctl	r2,status
 505d68c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505d690:	e0fffc17 	ldw	r3,-16(fp)
 505d694:	00bfff84 	movi	r2,-2
 505d698:	1884703a 	and	r2,r3,r2
 505d69c:	1001703a 	wrctl	status,r2
  
  return context;
 505d6a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 505d6a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 505d6a8:	e0bfff17 	ldw	r2,-4(fp)
 505d6ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 505d6b0:	e0bffd17 	ldw	r2,-12(fp)
 505d6b4:	10800017 	ldw	r2,0(r2)
 505d6b8:	e0fffd17 	ldw	r3,-12(fp)
 505d6bc:	18c00117 	ldw	r3,4(r3)
 505d6c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 505d6c4:	e0bffd17 	ldw	r2,-12(fp)
 505d6c8:	10800117 	ldw	r2,4(r2)
 505d6cc:	e0fffd17 	ldw	r3,-12(fp)
 505d6d0:	18c00017 	ldw	r3,0(r3)
 505d6d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 505d6d8:	e0bffd17 	ldw	r2,-12(fp)
 505d6dc:	e0fffd17 	ldw	r3,-12(fp)
 505d6e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 505d6e4:	e0bffd17 	ldw	r2,-12(fp)
 505d6e8:	e0fffd17 	ldw	r3,-12(fp)
 505d6ec:	10c00015 	stw	r3,0(r2)
 505d6f0:	e0bffb17 	ldw	r2,-20(fp)
 505d6f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505d6f8:	e0bffe17 	ldw	r2,-8(fp)
 505d6fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 505d700:	0001883a 	nop
 505d704:	e037883a 	mov	sp,fp
 505d708:	df000017 	ldw	fp,0(sp)
 505d70c:	dec00104 	addi	sp,sp,4
 505d710:	f800283a 	ret

0505d714 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 505d714:	defffb04 	addi	sp,sp,-20
 505d718:	dfc00415 	stw	ra,16(sp)
 505d71c:	df000315 	stw	fp,12(sp)
 505d720:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 505d724:	d0a01017 	ldw	r2,-32704(gp)
 505d728:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 505d72c:	d0a81c17 	ldw	r2,-24464(gp)
 505d730:	10800044 	addi	r2,r2,1
 505d734:	d0a81c15 	stw	r2,-24464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 505d738:	00002e06 	br	505d7f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 505d73c:	e0bffd17 	ldw	r2,-12(fp)
 505d740:	10800017 	ldw	r2,0(r2)
 505d744:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 505d748:	e0bffd17 	ldw	r2,-12(fp)
 505d74c:	10800403 	ldbu	r2,16(r2)
 505d750:	10803fcc 	andi	r2,r2,255
 505d754:	10000426 	beq	r2,zero,505d768 <alt_tick+0x54>
 505d758:	d0a81c17 	ldw	r2,-24464(gp)
 505d75c:	1000021e 	bne	r2,zero,505d768 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 505d760:	e0bffd17 	ldw	r2,-12(fp)
 505d764:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 505d768:	e0bffd17 	ldw	r2,-12(fp)
 505d76c:	10800217 	ldw	r2,8(r2)
 505d770:	d0e81c17 	ldw	r3,-24464(gp)
 505d774:	18801d36 	bltu	r3,r2,505d7ec <alt_tick+0xd8>
 505d778:	e0bffd17 	ldw	r2,-12(fp)
 505d77c:	10800403 	ldbu	r2,16(r2)
 505d780:	10803fcc 	andi	r2,r2,255
 505d784:	1000191e 	bne	r2,zero,505d7ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 505d788:	e0bffd17 	ldw	r2,-12(fp)
 505d78c:	10800317 	ldw	r2,12(r2)
 505d790:	e0fffd17 	ldw	r3,-12(fp)
 505d794:	18c00517 	ldw	r3,20(r3)
 505d798:	1809883a 	mov	r4,r3
 505d79c:	103ee83a 	callr	r2
 505d7a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 505d7a4:	e0bfff17 	ldw	r2,-4(fp)
 505d7a8:	1000031e 	bne	r2,zero,505d7b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 505d7ac:	e13ffd17 	ldw	r4,-12(fp)
 505d7b0:	505d6780 	call	505d678 <alt_alarm_stop>
 505d7b4:	00000d06 	br	505d7ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 505d7b8:	e0bffd17 	ldw	r2,-12(fp)
 505d7bc:	10c00217 	ldw	r3,8(r2)
 505d7c0:	e0bfff17 	ldw	r2,-4(fp)
 505d7c4:	1887883a 	add	r3,r3,r2
 505d7c8:	e0bffd17 	ldw	r2,-12(fp)
 505d7cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 505d7d0:	e0bffd17 	ldw	r2,-12(fp)
 505d7d4:	10c00217 	ldw	r3,8(r2)
 505d7d8:	d0a81c17 	ldw	r2,-24464(gp)
 505d7dc:	1880032e 	bgeu	r3,r2,505d7ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 505d7e0:	e0bffd17 	ldw	r2,-12(fp)
 505d7e4:	00c00044 	movi	r3,1
 505d7e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 505d7ec:	e0bffe17 	ldw	r2,-8(fp)
 505d7f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 505d7f4:	e0fffd17 	ldw	r3,-12(fp)
 505d7f8:	d0a01004 	addi	r2,gp,-32704
 505d7fc:	18bfcf1e 	bne	r3,r2,505d73c <_gp+0xffff2314>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 505d800:	0001883a 	nop
}
 505d804:	0001883a 	nop
 505d808:	e037883a 	mov	sp,fp
 505d80c:	dfc00117 	ldw	ra,4(sp)
 505d810:	df000017 	ldw	fp,0(sp)
 505d814:	dec00204 	addi	sp,sp,8
 505d818:	f800283a 	ret

0505d81c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 505d81c:	defffd04 	addi	sp,sp,-12
 505d820:	dfc00215 	stw	ra,8(sp)
 505d824:	df000115 	stw	fp,4(sp)
 505d828:	df000104 	addi	fp,sp,4
 505d82c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 505d830:	e13fff17 	ldw	r4,-4(fp)
 505d834:	505fdfc0 	call	505fdfc <alt_busy_sleep>
}
 505d838:	e037883a 	mov	sp,fp
 505d83c:	dfc00117 	ldw	ra,4(sp)
 505d840:	df000017 	ldw	fp,0(sp)
 505d844:	dec00204 	addi	sp,sp,8
 505d848:	f800283a 	ret

0505d84c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505d84c:	defffe04 	addi	sp,sp,-8
 505d850:	dfc00115 	stw	ra,4(sp)
 505d854:	df000015 	stw	fp,0(sp)
 505d858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505d85c:	d0a00d17 	ldw	r2,-32716(gp)
 505d860:	10000326 	beq	r2,zero,505d870 <alt_get_errno+0x24>
 505d864:	d0a00d17 	ldw	r2,-32716(gp)
 505d868:	103ee83a 	callr	r2
 505d86c:	00000106 	br	505d874 <alt_get_errno+0x28>
 505d870:	d0a81304 	addi	r2,gp,-24500
}
 505d874:	e037883a 	mov	sp,fp
 505d878:	dfc00117 	ldw	ra,4(sp)
 505d87c:	df000017 	ldw	fp,0(sp)
 505d880:	dec00204 	addi	sp,sp,8
 505d884:	f800283a 	ret

0505d888 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 505d888:	defff904 	addi	sp,sp,-28
 505d88c:	dfc00615 	stw	ra,24(sp)
 505d890:	df000515 	stw	fp,20(sp)
 505d894:	df000504 	addi	fp,sp,20
 505d898:	e13ffd15 	stw	r4,-12(fp)
 505d89c:	e17ffe15 	stw	r5,-8(fp)
 505d8a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 505d8a4:	e0bffd17 	ldw	r2,-12(fp)
 505d8a8:	10000616 	blt	r2,zero,505d8c4 <write+0x3c>
 505d8ac:	e0bffd17 	ldw	r2,-12(fp)
 505d8b0:	10c00324 	muli	r3,r2,12
 505d8b4:	008141b4 	movhi	r2,1286
 505d8b8:	10886104 	addi	r2,r2,8580
 505d8bc:	1885883a 	add	r2,r3,r2
 505d8c0:	00000106 	br	505d8c8 <write+0x40>
 505d8c4:	0005883a 	mov	r2,zero
 505d8c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 505d8cc:	e0bffb17 	ldw	r2,-20(fp)
 505d8d0:	10002126 	beq	r2,zero,505d958 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 505d8d4:	e0bffb17 	ldw	r2,-20(fp)
 505d8d8:	10800217 	ldw	r2,8(r2)
 505d8dc:	108000cc 	andi	r2,r2,3
 505d8e0:	10001826 	beq	r2,zero,505d944 <write+0xbc>
 505d8e4:	e0bffb17 	ldw	r2,-20(fp)
 505d8e8:	10800017 	ldw	r2,0(r2)
 505d8ec:	10800617 	ldw	r2,24(r2)
 505d8f0:	10001426 	beq	r2,zero,505d944 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 505d8f4:	e0bffb17 	ldw	r2,-20(fp)
 505d8f8:	10800017 	ldw	r2,0(r2)
 505d8fc:	10800617 	ldw	r2,24(r2)
 505d900:	e0ffff17 	ldw	r3,-4(fp)
 505d904:	180d883a 	mov	r6,r3
 505d908:	e17ffe17 	ldw	r5,-8(fp)
 505d90c:	e13ffb17 	ldw	r4,-20(fp)
 505d910:	103ee83a 	callr	r2
 505d914:	e0bffc15 	stw	r2,-16(fp)
 505d918:	e0bffc17 	ldw	r2,-16(fp)
 505d91c:	1000070e 	bge	r2,zero,505d93c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 505d920:	505d84c0 	call	505d84c <alt_get_errno>
 505d924:	1007883a 	mov	r3,r2
 505d928:	e0bffc17 	ldw	r2,-16(fp)
 505d92c:	0085c83a 	sub	r2,zero,r2
 505d930:	18800015 	stw	r2,0(r3)
        return -1;
 505d934:	00bfffc4 	movi	r2,-1
 505d938:	00000c06 	br	505d96c <write+0xe4>
      }
      return rval;
 505d93c:	e0bffc17 	ldw	r2,-16(fp)
 505d940:	00000a06 	br	505d96c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 505d944:	505d84c0 	call	505d84c <alt_get_errno>
 505d948:	1007883a 	mov	r3,r2
 505d94c:	00800344 	movi	r2,13
 505d950:	18800015 	stw	r2,0(r3)
 505d954:	00000406 	br	505d968 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 505d958:	505d84c0 	call	505d84c <alt_get_errno>
 505d95c:	1007883a 	mov	r3,r2
 505d960:	00801444 	movi	r2,81
 505d964:	18800015 	stw	r2,0(r3)
  }
  return -1;
 505d968:	00bfffc4 	movi	r2,-1
}
 505d96c:	e037883a 	mov	sp,fp
 505d970:	dfc00117 	ldw	ra,4(sp)
 505d974:	df000017 	ldw	fp,0(sp)
 505d978:	dec00204 	addi	sp,sp,8
 505d97c:	f800283a 	ret

0505d980 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 505d980:	defffd04 	addi	sp,sp,-12
 505d984:	dfc00215 	stw	ra,8(sp)
 505d988:	df000115 	stw	fp,4(sp)
 505d98c:	df000104 	addi	fp,sp,4
 505d990:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 505d994:	d1600a04 	addi	r5,gp,-32728
 505d998:	e13fff17 	ldw	r4,-4(fp)
 505d99c:	505ffd80 	call	505ffd8 <alt_dev_llist_insert>
}
 505d9a0:	e037883a 	mov	sp,fp
 505d9a4:	dfc00117 	ldw	ra,4(sp)
 505d9a8:	df000017 	ldw	fp,0(sp)
 505d9ac:	dec00204 	addi	sp,sp,8
 505d9b0:	f800283a 	ret

0505d9b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 505d9b4:	defffd04 	addi	sp,sp,-12
 505d9b8:	dfc00215 	stw	ra,8(sp)
 505d9bc:	df000115 	stw	fp,4(sp)
 505d9c0:	df000104 	addi	fp,sp,4
 505d9c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 505d9c8:	50605940 	call	5060594 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 505d9cc:	00800044 	movi	r2,1
 505d9d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 505d9d4:	0001883a 	nop
 505d9d8:	e037883a 	mov	sp,fp
 505d9dc:	dfc00117 	ldw	ra,4(sp)
 505d9e0:	df000017 	ldw	fp,0(sp)
 505d9e4:	dec00204 	addi	sp,sp,8
 505d9e8:	f800283a 	ret

0505d9ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 505d9ec:	defffd04 	addi	sp,sp,-12
 505d9f0:	dfc00215 	stw	ra,8(sp)
 505d9f4:	df000115 	stw	fp,4(sp)
 505d9f8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 505d9fc:	01c0fa04 	movi	r7,1000
 505da00:	01800044 	movi	r6,1
 505da04:	000b883a 	mov	r5,zero
 505da08:	01014034 	movhi	r4,1280
 505da0c:	21040804 	addi	r4,r4,4128
 505da10:	505ea0c0 	call	505ea0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 505da14:	00814034 	movhi	r2,1280
 505da18:	10840004 	addi	r2,r2,4096
 505da1c:	d0a81d15 	stw	r2,-24460(gp)
 505da20:	00813174 	movhi	r2,1221
 505da24:	10ad0004 	addi	r2,r2,-19456
 505da28:	d0a81e15 	stw	r2,-24456(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 505da2c:	01800404 	movi	r6,16
 505da30:	000b883a 	mov	r5,zero
 505da34:	010141b4 	movhi	r4,1286
 505da38:	2108cb04 	addi	r4,r4,9004
 505da3c:	505de980 	call	505de98 <altera_avalon_jtag_uart_init>
 505da40:	010141b4 	movhi	r4,1286
 505da44:	2108c104 	addi	r4,r4,8964
 505da48:	505d9800 	call	505d980 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_SPI, touch_spi);
 505da4c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 505da50:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
 505da54:	010141b4 	movhi	r4,1286
 505da58:	210cd904 	addi	r4,r4,13156
 505da5c:	505d9800 	call	505d980 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 505da60:	008141b4 	movhi	r2,1286
 505da64:	108ce404 	addi	r2,r2,13200
 505da68:	10800a17 	ldw	r2,40(r2)
 505da6c:	10800017 	ldw	r2,0(r2)
 505da70:	1007883a 	mov	r3,r2
 505da74:	008141b4 	movhi	r2,1286
 505da78:	108ce404 	addi	r2,r2,13200
 505da7c:	10c00b15 	stw	r3,44(r2)
 505da80:	008141b4 	movhi	r2,1286
 505da84:	108ce404 	addi	r2,r2,13200
 505da88:	10800a17 	ldw	r2,40(r2)
 505da8c:	10800104 	addi	r2,r2,4
 505da90:	10800017 	ldw	r2,0(r2)
 505da94:	1007883a 	mov	r3,r2
 505da98:	008141b4 	movhi	r2,1286
 505da9c:	108ce404 	addi	r2,r2,13200
 505daa0:	10c00c15 	stw	r3,48(r2)
 505daa4:	008141b4 	movhi	r2,1286
 505daa8:	108ce404 	addi	r2,r2,13200
 505daac:	10800a17 	ldw	r2,40(r2)
 505dab0:	10800204 	addi	r2,r2,8
 505dab4:	10800017 	ldw	r2,0(r2)
 505dab8:	10ffffcc 	andi	r3,r2,65535
 505dabc:	008141b4 	movhi	r2,1286
 505dac0:	108ce404 	addi	r2,r2,13200
 505dac4:	10c00f15 	stw	r3,60(r2)
 505dac8:	008141b4 	movhi	r2,1286
 505dacc:	108ce404 	addi	r2,r2,13200
 505dad0:	10800a17 	ldw	r2,40(r2)
 505dad4:	10800204 	addi	r2,r2,8
 505dad8:	10800017 	ldw	r2,0(r2)
 505dadc:	1006d43a 	srli	r3,r2,16
 505dae0:	008141b4 	movhi	r2,1286
 505dae4:	108ce404 	addi	r2,r2,13200
 505dae8:	10c01015 	stw	r3,64(r2)
 505daec:	008141b4 	movhi	r2,1286
 505daf0:	108ce404 	addi	r2,r2,13200
 505daf4:	10800a17 	ldw	r2,40(r2)
 505daf8:	10800304 	addi	r2,r2,12
 505dafc:	10800017 	ldw	r2,0(r2)
 505db00:	1005d07a 	srai	r2,r2,1
 505db04:	10c0004c 	andi	r3,r2,1
 505db08:	008141b4 	movhi	r2,1286
 505db0c:	108ce404 	addi	r2,r2,13200
 505db10:	10c00d15 	stw	r3,52(r2)
 505db14:	008141b4 	movhi	r2,1286
 505db18:	108ce404 	addi	r2,r2,13200
 505db1c:	10800a17 	ldw	r2,40(r2)
 505db20:	10800304 	addi	r2,r2,12
 505db24:	10800017 	ldw	r2,0(r2)
 505db28:	1005d13a 	srai	r2,r2,4
 505db2c:	10c003cc 	andi	r3,r2,15
 505db30:	008141b4 	movhi	r2,1286
 505db34:	108ce404 	addi	r2,r2,13200
 505db38:	10c00e15 	stw	r3,56(r2)
 505db3c:	008141b4 	movhi	r2,1286
 505db40:	108ce404 	addi	r2,r2,13200
 505db44:	10800a17 	ldw	r2,40(r2)
 505db48:	10800304 	addi	r2,r2,12
 505db4c:	10800017 	ldw	r2,0(r2)
 505db50:	1005d43a 	srai	r2,r2,16
 505db54:	e0bfff05 	stb	r2,-4(fp)
 505db58:	008141b4 	movhi	r2,1286
 505db5c:	108ce404 	addi	r2,r2,13200
 505db60:	10800a17 	ldw	r2,40(r2)
 505db64:	10800304 	addi	r2,r2,12
 505db68:	10800017 	ldw	r2,0(r2)
 505db6c:	1004d63a 	srli	r2,r2,24
 505db70:	e0bfff45 	stb	r2,-3(fp)
 505db74:	008141b4 	movhi	r2,1286
 505db78:	108ce404 	addi	r2,r2,13200
 505db7c:	10800e17 	ldw	r2,56(r2)
 505db80:	10800058 	cmpnei	r2,r2,1
 505db84:	1000041e 	bne	r2,zero,505db98 <alt_sys_init+0x1ac>
 505db88:	008141b4 	movhi	r2,1286
 505db8c:	108ce404 	addi	r2,r2,13200
 505db90:	10001115 	stw	zero,68(r2)
 505db94:	00000e06 	br	505dbd0 <alt_sys_init+0x1e4>
 505db98:	008141b4 	movhi	r2,1286
 505db9c:	108ce404 	addi	r2,r2,13200
 505dba0:	10800e17 	ldw	r2,56(r2)
 505dba4:	10800098 	cmpnei	r2,r2,2
 505dba8:	1000051e 	bne	r2,zero,505dbc0 <alt_sys_init+0x1d4>
 505dbac:	008141b4 	movhi	r2,1286
 505dbb0:	108ce404 	addi	r2,r2,13200
 505dbb4:	00c00044 	movi	r3,1
 505dbb8:	10c01115 	stw	r3,68(r2)
 505dbbc:	00000406 	br	505dbd0 <alt_sys_init+0x1e4>
 505dbc0:	008141b4 	movhi	r2,1286
 505dbc4:	108ce404 	addi	r2,r2,13200
 505dbc8:	00c00084 	movi	r3,2
 505dbcc:	10c01115 	stw	r3,68(r2)
 505dbd0:	e0bfff03 	ldbu	r2,-4(fp)
 505dbd4:	00c00804 	movi	r3,32
 505dbd8:	1885c83a 	sub	r2,r3,r2
 505dbdc:	00ffffc4 	movi	r3,-1
 505dbe0:	1886d83a 	srl	r3,r3,r2
 505dbe4:	008141b4 	movhi	r2,1286
 505dbe8:	108ce404 	addi	r2,r2,13200
 505dbec:	10c01215 	stw	r3,72(r2)
 505dbf0:	e0ffff03 	ldbu	r3,-4(fp)
 505dbf4:	008141b4 	movhi	r2,1286
 505dbf8:	108ce404 	addi	r2,r2,13200
 505dbfc:	10801117 	ldw	r2,68(r2)
 505dc00:	1887883a 	add	r3,r3,r2
 505dc04:	008141b4 	movhi	r2,1286
 505dc08:	108ce404 	addi	r2,r2,13200
 505dc0c:	10c01315 	stw	r3,76(r2)
 505dc10:	e0bfff43 	ldbu	r2,-3(fp)
 505dc14:	00c00804 	movi	r3,32
 505dc18:	1885c83a 	sub	r2,r3,r2
 505dc1c:	00ffffc4 	movi	r3,-1
 505dc20:	1886d83a 	srl	r3,r3,r2
 505dc24:	008141b4 	movhi	r2,1286
 505dc28:	108ce404 	addi	r2,r2,13200
 505dc2c:	10c01415 	stw	r3,80(r2)
 505dc30:	010141b4 	movhi	r4,1286
 505dc34:	210ce404 	addi	r4,r4,13200
 505dc38:	505d9800 	call	505d980 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 505dc3c:	008141b4 	movhi	r2,1286
 505dc40:	108cf904 	addi	r2,r2,13284
 505dc44:	10800a17 	ldw	r2,40(r2)
 505dc48:	10800017 	ldw	r2,0(r2)
 505dc4c:	10c003cc 	andi	r3,r2,15
 505dc50:	008141b4 	movhi	r2,1286
 505dc54:	108cf904 	addi	r2,r2,13284
 505dc58:	10c00b15 	stw	r3,44(r2)
 505dc5c:	008141b4 	movhi	r2,1286
 505dc60:	108cf904 	addi	r2,r2,13284
 505dc64:	10800a17 	ldw	r2,40(r2)
 505dc68:	10800017 	ldw	r2,0(r2)
 505dc6c:	1005d13a 	srai	r2,r2,4
 505dc70:	10c0004c 	andi	r3,r2,1
 505dc74:	008141b4 	movhi	r2,1286
 505dc78:	108cf904 	addi	r2,r2,13284
 505dc7c:	10c00c15 	stw	r3,48(r2)
 505dc80:	008141b4 	movhi	r2,1286
 505dc84:	108cf904 	addi	r2,r2,13284
 505dc88:	10800a17 	ldw	r2,40(r2)
 505dc8c:	10800017 	ldw	r2,0(r2)
 505dc90:	1005d17a 	srai	r2,r2,5
 505dc94:	10c0004c 	andi	r3,r2,1
 505dc98:	008141b4 	movhi	r2,1286
 505dc9c:	108cf904 	addi	r2,r2,13284
 505dca0:	10c00d15 	stw	r3,52(r2)
 505dca4:	008141b4 	movhi	r2,1286
 505dca8:	108cf904 	addi	r2,r2,13284
 505dcac:	10800a17 	ldw	r2,40(r2)
 505dcb0:	10800017 	ldw	r2,0(r2)
 505dcb4:	1005d43a 	srai	r2,r2,16
 505dcb8:	10c003cc 	andi	r3,r2,15
 505dcbc:	008141b4 	movhi	r2,1286
 505dcc0:	108cf904 	addi	r2,r2,13284
 505dcc4:	10c00e15 	stw	r3,56(r2)
 505dcc8:	008141b4 	movhi	r2,1286
 505dccc:	108cf904 	addi	r2,r2,13284
 505dcd0:	10800a17 	ldw	r2,40(r2)
 505dcd4:	10800017 	ldw	r2,0(r2)
 505dcd8:	1005d53a 	srai	r2,r2,20
 505dcdc:	10c0004c 	andi	r3,r2,1
 505dce0:	008141b4 	movhi	r2,1286
 505dce4:	108cf904 	addi	r2,r2,13284
 505dce8:	10c00f15 	stw	r3,60(r2)
 505dcec:	008141b4 	movhi	r2,1286
 505dcf0:	108cf904 	addi	r2,r2,13284
 505dcf4:	10800a17 	ldw	r2,40(r2)
 505dcf8:	10800017 	ldw	r2,0(r2)
 505dcfc:	1005d57a 	srai	r2,r2,21
 505dd00:	10c0004c 	andi	r3,r2,1
 505dd04:	008141b4 	movhi	r2,1286
 505dd08:	108cf904 	addi	r2,r2,13284
 505dd0c:	10c01015 	stw	r3,64(r2)
 505dd10:	010141b4 	movhi	r4,1286
 505dd14:	210cf904 	addi	r4,r4,13284
 505dd18:	505d9800 	call	505d980 <alt_dev_reg>
}
 505dd1c:	0001883a 	nop
 505dd20:	e037883a 	mov	sp,fp
 505dd24:	dfc00117 	ldw	ra,4(sp)
 505dd28:	df000017 	ldw	fp,0(sp)
 505dd2c:	dec00204 	addi	sp,sp,8
 505dd30:	f800283a 	ret

0505dd34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 505dd34:	defffa04 	addi	sp,sp,-24
 505dd38:	dfc00515 	stw	ra,20(sp)
 505dd3c:	df000415 	stw	fp,16(sp)
 505dd40:	df000404 	addi	fp,sp,16
 505dd44:	e13ffd15 	stw	r4,-12(fp)
 505dd48:	e17ffe15 	stw	r5,-8(fp)
 505dd4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 505dd50:	e0bffd17 	ldw	r2,-12(fp)
 505dd54:	10800017 	ldw	r2,0(r2)
 505dd58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 505dd5c:	e0bffc17 	ldw	r2,-16(fp)
 505dd60:	10c00a04 	addi	r3,r2,40
 505dd64:	e0bffd17 	ldw	r2,-12(fp)
 505dd68:	10800217 	ldw	r2,8(r2)
 505dd6c:	100f883a 	mov	r7,r2
 505dd70:	e1bfff17 	ldw	r6,-4(fp)
 505dd74:	e17ffe17 	ldw	r5,-8(fp)
 505dd78:	1809883a 	mov	r4,r3
 505dd7c:	505e3540 	call	505e354 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 505dd80:	e037883a 	mov	sp,fp
 505dd84:	dfc00117 	ldw	ra,4(sp)
 505dd88:	df000017 	ldw	fp,0(sp)
 505dd8c:	dec00204 	addi	sp,sp,8
 505dd90:	f800283a 	ret

0505dd94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 505dd94:	defffa04 	addi	sp,sp,-24
 505dd98:	dfc00515 	stw	ra,20(sp)
 505dd9c:	df000415 	stw	fp,16(sp)
 505dda0:	df000404 	addi	fp,sp,16
 505dda4:	e13ffd15 	stw	r4,-12(fp)
 505dda8:	e17ffe15 	stw	r5,-8(fp)
 505ddac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 505ddb0:	e0bffd17 	ldw	r2,-12(fp)
 505ddb4:	10800017 	ldw	r2,0(r2)
 505ddb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 505ddbc:	e0bffc17 	ldw	r2,-16(fp)
 505ddc0:	10c00a04 	addi	r3,r2,40
 505ddc4:	e0bffd17 	ldw	r2,-12(fp)
 505ddc8:	10800217 	ldw	r2,8(r2)
 505ddcc:	100f883a 	mov	r7,r2
 505ddd0:	e1bfff17 	ldw	r6,-4(fp)
 505ddd4:	e17ffe17 	ldw	r5,-8(fp)
 505ddd8:	1809883a 	mov	r4,r3
 505dddc:	505e5700 	call	505e570 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 505dde0:	e037883a 	mov	sp,fp
 505dde4:	dfc00117 	ldw	ra,4(sp)
 505dde8:	df000017 	ldw	fp,0(sp)
 505ddec:	dec00204 	addi	sp,sp,8
 505ddf0:	f800283a 	ret

0505ddf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 505ddf4:	defffc04 	addi	sp,sp,-16
 505ddf8:	dfc00315 	stw	ra,12(sp)
 505ddfc:	df000215 	stw	fp,8(sp)
 505de00:	df000204 	addi	fp,sp,8
 505de04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 505de08:	e0bfff17 	ldw	r2,-4(fp)
 505de0c:	10800017 	ldw	r2,0(r2)
 505de10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 505de14:	e0bffe17 	ldw	r2,-8(fp)
 505de18:	10c00a04 	addi	r3,r2,40
 505de1c:	e0bfff17 	ldw	r2,-4(fp)
 505de20:	10800217 	ldw	r2,8(r2)
 505de24:	100b883a 	mov	r5,r2
 505de28:	1809883a 	mov	r4,r3
 505de2c:	505e1fc0 	call	505e1fc <altera_avalon_jtag_uart_close>
}
 505de30:	e037883a 	mov	sp,fp
 505de34:	dfc00117 	ldw	ra,4(sp)
 505de38:	df000017 	ldw	fp,0(sp)
 505de3c:	dec00204 	addi	sp,sp,8
 505de40:	f800283a 	ret

0505de44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 505de44:	defffa04 	addi	sp,sp,-24
 505de48:	dfc00515 	stw	ra,20(sp)
 505de4c:	df000415 	stw	fp,16(sp)
 505de50:	df000404 	addi	fp,sp,16
 505de54:	e13ffd15 	stw	r4,-12(fp)
 505de58:	e17ffe15 	stw	r5,-8(fp)
 505de5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 505de60:	e0bffd17 	ldw	r2,-12(fp)
 505de64:	10800017 	ldw	r2,0(r2)
 505de68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 505de6c:	e0bffc17 	ldw	r2,-16(fp)
 505de70:	10800a04 	addi	r2,r2,40
 505de74:	e1bfff17 	ldw	r6,-4(fp)
 505de78:	e17ffe17 	ldw	r5,-8(fp)
 505de7c:	1009883a 	mov	r4,r2
 505de80:	505e2640 	call	505e264 <altera_avalon_jtag_uart_ioctl>
}
 505de84:	e037883a 	mov	sp,fp
 505de88:	dfc00117 	ldw	ra,4(sp)
 505de8c:	df000017 	ldw	fp,0(sp)
 505de90:	dec00204 	addi	sp,sp,8
 505de94:	f800283a 	ret

0505de98 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 505de98:	defffb04 	addi	sp,sp,-20
 505de9c:	dfc00415 	stw	ra,16(sp)
 505dea0:	df000315 	stw	fp,12(sp)
 505dea4:	df000304 	addi	fp,sp,12
 505dea8:	e13ffd15 	stw	r4,-12(fp)
 505deac:	e17ffe15 	stw	r5,-8(fp)
 505deb0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 505deb4:	e0bffd17 	ldw	r2,-12(fp)
 505deb8:	00c00044 	movi	r3,1
 505debc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 505dec0:	e0bffd17 	ldw	r2,-12(fp)
 505dec4:	10800017 	ldw	r2,0(r2)
 505dec8:	10800104 	addi	r2,r2,4
 505decc:	1007883a 	mov	r3,r2
 505ded0:	e0bffd17 	ldw	r2,-12(fp)
 505ded4:	10800817 	ldw	r2,32(r2)
 505ded8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 505dedc:	e0bfff17 	ldw	r2,-4(fp)
 505dee0:	018141b4 	movhi	r6,1286
 505dee4:	31b7d304 	addi	r6,r6,-8372
 505dee8:	e17ffd17 	ldw	r5,-12(fp)
 505deec:	1009883a 	mov	r4,r2
 505def0:	505cf0c0 	call	505cf0c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 505def4:	e0bffd17 	ldw	r2,-12(fp)
 505def8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 505defc:	e0bffd17 	ldw	r2,-12(fp)
 505df00:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 505df04:	d0e81b17 	ldw	r3,-24468(gp)
 505df08:	e1fffd17 	ldw	r7,-12(fp)
 505df0c:	018141b4 	movhi	r6,1286
 505df10:	31b85704 	addi	r6,r6,-7844
 505df14:	180b883a 	mov	r5,r3
 505df18:	1009883a 	mov	r4,r2
 505df1c:	505cbbc0 	call	505cbbc <alt_alarm_start>
 505df20:	1000040e 	bge	r2,zero,505df34 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 505df24:	e0fffd17 	ldw	r3,-12(fp)
 505df28:	00a00034 	movhi	r2,32768
 505df2c:	10bfffc4 	addi	r2,r2,-1
 505df30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 505df34:	0001883a 	nop
 505df38:	e037883a 	mov	sp,fp
 505df3c:	dfc00117 	ldw	ra,4(sp)
 505df40:	df000017 	ldw	fp,0(sp)
 505df44:	dec00204 	addi	sp,sp,8
 505df48:	f800283a 	ret

0505df4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 505df4c:	defff704 	addi	sp,sp,-36
 505df50:	df000815 	stw	fp,32(sp)
 505df54:	df000804 	addi	fp,sp,32
 505df58:	e13ffe15 	stw	r4,-8(fp)
 505df5c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 505df60:	e0bffe17 	ldw	r2,-8(fp)
 505df64:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 505df68:	e0bffa17 	ldw	r2,-24(fp)
 505df6c:	10800017 	ldw	r2,0(r2)
 505df70:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 505df74:	e0bffb17 	ldw	r2,-20(fp)
 505df78:	10800104 	addi	r2,r2,4
 505df7c:	10800037 	ldwio	r2,0(r2)
 505df80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 505df84:	e0bffc17 	ldw	r2,-16(fp)
 505df88:	1080c00c 	andi	r2,r2,768
 505df8c:	10006d26 	beq	r2,zero,505e144 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 505df90:	e0bffc17 	ldw	r2,-16(fp)
 505df94:	1080400c 	andi	r2,r2,256
 505df98:	10003526 	beq	r2,zero,505e070 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 505df9c:	00800074 	movhi	r2,1
 505dfa0:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 505dfa4:	e0bffa17 	ldw	r2,-24(fp)
 505dfa8:	10800a17 	ldw	r2,40(r2)
 505dfac:	10800044 	addi	r2,r2,1
 505dfb0:	1081ffcc 	andi	r2,r2,2047
 505dfb4:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 505dfb8:	e0bffa17 	ldw	r2,-24(fp)
 505dfbc:	10c00b17 	ldw	r3,44(r2)
 505dfc0:	e0bffd17 	ldw	r2,-12(fp)
 505dfc4:	18801526 	beq	r3,r2,505e01c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 505dfc8:	e0bffb17 	ldw	r2,-20(fp)
 505dfcc:	10800037 	ldwio	r2,0(r2)
 505dfd0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 505dfd4:	e0bff817 	ldw	r2,-32(fp)
 505dfd8:	10a0000c 	andi	r2,r2,32768
 505dfdc:	10001126 	beq	r2,zero,505e024 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 505dfe0:	e0bffa17 	ldw	r2,-24(fp)
 505dfe4:	10800a17 	ldw	r2,40(r2)
 505dfe8:	e0fff817 	ldw	r3,-32(fp)
 505dfec:	1809883a 	mov	r4,r3
 505dff0:	e0fffa17 	ldw	r3,-24(fp)
 505dff4:	1885883a 	add	r2,r3,r2
 505dff8:	10800e04 	addi	r2,r2,56
 505dffc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 505e000:	e0bffa17 	ldw	r2,-24(fp)
 505e004:	10800a17 	ldw	r2,40(r2)
 505e008:	10800044 	addi	r2,r2,1
 505e00c:	10c1ffcc 	andi	r3,r2,2047
 505e010:	e0bffa17 	ldw	r2,-24(fp)
 505e014:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 505e018:	003fe206 	br	505dfa4 <_gp+0xffff2b7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 505e01c:	0001883a 	nop
 505e020:	00000106 	br	505e028 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 505e024:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 505e028:	e0bff817 	ldw	r2,-32(fp)
 505e02c:	10bfffec 	andhi	r2,r2,65535
 505e030:	10000f26 	beq	r2,zero,505e070 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 505e034:	e0bffa17 	ldw	r2,-24(fp)
 505e038:	10c00817 	ldw	r3,32(r2)
 505e03c:	00bfff84 	movi	r2,-2
 505e040:	1886703a 	and	r3,r3,r2
 505e044:	e0bffa17 	ldw	r2,-24(fp)
 505e048:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 505e04c:	e0bffb17 	ldw	r2,-20(fp)
 505e050:	10800104 	addi	r2,r2,4
 505e054:	1007883a 	mov	r3,r2
 505e058:	e0bffa17 	ldw	r2,-24(fp)
 505e05c:	10800817 	ldw	r2,32(r2)
 505e060:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 505e064:	e0bffb17 	ldw	r2,-20(fp)
 505e068:	10800104 	addi	r2,r2,4
 505e06c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 505e070:	e0bffc17 	ldw	r2,-16(fp)
 505e074:	1080800c 	andi	r2,r2,512
 505e078:	103fbe26 	beq	r2,zero,505df74 <_gp+0xffff2b4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 505e07c:	e0bffc17 	ldw	r2,-16(fp)
 505e080:	1004d43a 	srli	r2,r2,16
 505e084:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 505e088:	00001406 	br	505e0dc <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 505e08c:	e0bffb17 	ldw	r2,-20(fp)
 505e090:	e0fffa17 	ldw	r3,-24(fp)
 505e094:	18c00d17 	ldw	r3,52(r3)
 505e098:	e13ffa17 	ldw	r4,-24(fp)
 505e09c:	20c7883a 	add	r3,r4,r3
 505e0a0:	18c20e04 	addi	r3,r3,2104
 505e0a4:	18c00003 	ldbu	r3,0(r3)
 505e0a8:	18c03fcc 	andi	r3,r3,255
 505e0ac:	18c0201c 	xori	r3,r3,128
 505e0b0:	18ffe004 	addi	r3,r3,-128
 505e0b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 505e0b8:	e0bffa17 	ldw	r2,-24(fp)
 505e0bc:	10800d17 	ldw	r2,52(r2)
 505e0c0:	10800044 	addi	r2,r2,1
 505e0c4:	10c1ffcc 	andi	r3,r2,2047
 505e0c8:	e0bffa17 	ldw	r2,-24(fp)
 505e0cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 505e0d0:	e0bff917 	ldw	r2,-28(fp)
 505e0d4:	10bfffc4 	addi	r2,r2,-1
 505e0d8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 505e0dc:	e0bff917 	ldw	r2,-28(fp)
 505e0e0:	10000526 	beq	r2,zero,505e0f8 <altera_avalon_jtag_uart_irq+0x1ac>
 505e0e4:	e0bffa17 	ldw	r2,-24(fp)
 505e0e8:	10c00d17 	ldw	r3,52(r2)
 505e0ec:	e0bffa17 	ldw	r2,-24(fp)
 505e0f0:	10800c17 	ldw	r2,48(r2)
 505e0f4:	18bfe51e 	bne	r3,r2,505e08c <_gp+0xffff2c64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 505e0f8:	e0bff917 	ldw	r2,-28(fp)
 505e0fc:	103f9d26 	beq	r2,zero,505df74 <_gp+0xffff2b4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 505e100:	e0bffa17 	ldw	r2,-24(fp)
 505e104:	10c00817 	ldw	r3,32(r2)
 505e108:	00bfff44 	movi	r2,-3
 505e10c:	1886703a 	and	r3,r3,r2
 505e110:	e0bffa17 	ldw	r2,-24(fp)
 505e114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 505e118:	e0bffa17 	ldw	r2,-24(fp)
 505e11c:	10800017 	ldw	r2,0(r2)
 505e120:	10800104 	addi	r2,r2,4
 505e124:	1007883a 	mov	r3,r2
 505e128:	e0bffa17 	ldw	r2,-24(fp)
 505e12c:	10800817 	ldw	r2,32(r2)
 505e130:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 505e134:	e0bffb17 	ldw	r2,-20(fp)
 505e138:	10800104 	addi	r2,r2,4
 505e13c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 505e140:	003f8c06 	br	505df74 <_gp+0xffff2b4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 505e144:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 505e148:	0001883a 	nop
 505e14c:	e037883a 	mov	sp,fp
 505e150:	df000017 	ldw	fp,0(sp)
 505e154:	dec00104 	addi	sp,sp,4
 505e158:	f800283a 	ret

0505e15c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 505e15c:	defff804 	addi	sp,sp,-32
 505e160:	df000715 	stw	fp,28(sp)
 505e164:	df000704 	addi	fp,sp,28
 505e168:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 505e16c:	e0bffb17 	ldw	r2,-20(fp)
 505e170:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 505e174:	e0bff917 	ldw	r2,-28(fp)
 505e178:	10800017 	ldw	r2,0(r2)
 505e17c:	10800104 	addi	r2,r2,4
 505e180:	10800037 	ldwio	r2,0(r2)
 505e184:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 505e188:	e0bffa17 	ldw	r2,-24(fp)
 505e18c:	1081000c 	andi	r2,r2,1024
 505e190:	10000b26 	beq	r2,zero,505e1c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 505e194:	e0bff917 	ldw	r2,-28(fp)
 505e198:	10800017 	ldw	r2,0(r2)
 505e19c:	10800104 	addi	r2,r2,4
 505e1a0:	1007883a 	mov	r3,r2
 505e1a4:	e0bff917 	ldw	r2,-28(fp)
 505e1a8:	10800817 	ldw	r2,32(r2)
 505e1ac:	10810014 	ori	r2,r2,1024
 505e1b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 505e1b4:	e0bff917 	ldw	r2,-28(fp)
 505e1b8:	10000915 	stw	zero,36(r2)
 505e1bc:	00000a06 	br	505e1e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 505e1c0:	e0bff917 	ldw	r2,-28(fp)
 505e1c4:	10c00917 	ldw	r3,36(r2)
 505e1c8:	00a00034 	movhi	r2,32768
 505e1cc:	10bfff04 	addi	r2,r2,-4
 505e1d0:	10c00536 	bltu	r2,r3,505e1e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 505e1d4:	e0bff917 	ldw	r2,-28(fp)
 505e1d8:	10800917 	ldw	r2,36(r2)
 505e1dc:	10c00044 	addi	r3,r2,1
 505e1e0:	e0bff917 	ldw	r2,-28(fp)
 505e1e4:	10c00915 	stw	r3,36(r2)
 505e1e8:	d0a81b17 	ldw	r2,-24468(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 505e1ec:	e037883a 	mov	sp,fp
 505e1f0:	df000017 	ldw	fp,0(sp)
 505e1f4:	dec00104 	addi	sp,sp,4
 505e1f8:	f800283a 	ret

0505e1fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 505e1fc:	defffd04 	addi	sp,sp,-12
 505e200:	df000215 	stw	fp,8(sp)
 505e204:	df000204 	addi	fp,sp,8
 505e208:	e13ffe15 	stw	r4,-8(fp)
 505e20c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 505e210:	00000506 	br	505e228 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 505e214:	e0bfff17 	ldw	r2,-4(fp)
 505e218:	1090000c 	andi	r2,r2,16384
 505e21c:	10000226 	beq	r2,zero,505e228 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 505e220:	00bffd44 	movi	r2,-11
 505e224:	00000b06 	br	505e254 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 505e228:	e0bffe17 	ldw	r2,-8(fp)
 505e22c:	10c00d17 	ldw	r3,52(r2)
 505e230:	e0bffe17 	ldw	r2,-8(fp)
 505e234:	10800c17 	ldw	r2,48(r2)
 505e238:	18800526 	beq	r3,r2,505e250 <altera_avalon_jtag_uart_close+0x54>
 505e23c:	e0bffe17 	ldw	r2,-8(fp)
 505e240:	10c00917 	ldw	r3,36(r2)
 505e244:	e0bffe17 	ldw	r2,-8(fp)
 505e248:	10800117 	ldw	r2,4(r2)
 505e24c:	18bff136 	bltu	r3,r2,505e214 <_gp+0xffff2dec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 505e250:	0005883a 	mov	r2,zero
}
 505e254:	e037883a 	mov	sp,fp
 505e258:	df000017 	ldw	fp,0(sp)
 505e25c:	dec00104 	addi	sp,sp,4
 505e260:	f800283a 	ret

0505e264 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 505e264:	defffa04 	addi	sp,sp,-24
 505e268:	df000515 	stw	fp,20(sp)
 505e26c:	df000504 	addi	fp,sp,20
 505e270:	e13ffd15 	stw	r4,-12(fp)
 505e274:	e17ffe15 	stw	r5,-8(fp)
 505e278:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 505e27c:	00bff9c4 	movi	r2,-25
 505e280:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 505e284:	e0bffe17 	ldw	r2,-8(fp)
 505e288:	10da8060 	cmpeqi	r3,r2,27137
 505e28c:	1800031e 	bne	r3,zero,505e29c <altera_avalon_jtag_uart_ioctl+0x38>
 505e290:	109a80a0 	cmpeqi	r2,r2,27138
 505e294:	1000181e 	bne	r2,zero,505e2f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 505e298:	00002906 	br	505e340 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 505e29c:	e0bffd17 	ldw	r2,-12(fp)
 505e2a0:	10c00117 	ldw	r3,4(r2)
 505e2a4:	00a00034 	movhi	r2,32768
 505e2a8:	10bfffc4 	addi	r2,r2,-1
 505e2ac:	18802126 	beq	r3,r2,505e334 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 505e2b0:	e0bfff17 	ldw	r2,-4(fp)
 505e2b4:	10800017 	ldw	r2,0(r2)
 505e2b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 505e2bc:	e0bffc17 	ldw	r2,-16(fp)
 505e2c0:	10800090 	cmplti	r2,r2,2
 505e2c4:	1000061e 	bne	r2,zero,505e2e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 505e2c8:	e0fffc17 	ldw	r3,-16(fp)
 505e2cc:	00a00034 	movhi	r2,32768
 505e2d0:	10bfffc4 	addi	r2,r2,-1
 505e2d4:	18800226 	beq	r3,r2,505e2e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 505e2d8:	e0bffc17 	ldw	r2,-16(fp)
 505e2dc:	00000206 	br	505e2e8 <altera_avalon_jtag_uart_ioctl+0x84>
 505e2e0:	00a00034 	movhi	r2,32768
 505e2e4:	10bfff84 	addi	r2,r2,-2
 505e2e8:	e0fffd17 	ldw	r3,-12(fp)
 505e2ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 505e2f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 505e2f4:	00000f06 	br	505e334 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 505e2f8:	e0bffd17 	ldw	r2,-12(fp)
 505e2fc:	10c00117 	ldw	r3,4(r2)
 505e300:	00a00034 	movhi	r2,32768
 505e304:	10bfffc4 	addi	r2,r2,-1
 505e308:	18800c26 	beq	r3,r2,505e33c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 505e30c:	e0bffd17 	ldw	r2,-12(fp)
 505e310:	10c00917 	ldw	r3,36(r2)
 505e314:	e0bffd17 	ldw	r2,-12(fp)
 505e318:	10800117 	ldw	r2,4(r2)
 505e31c:	1885803a 	cmpltu	r2,r3,r2
 505e320:	10c03fcc 	andi	r3,r2,255
 505e324:	e0bfff17 	ldw	r2,-4(fp)
 505e328:	10c00015 	stw	r3,0(r2)
      rc = 0;
 505e32c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 505e330:	00000206 	br	505e33c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 505e334:	0001883a 	nop
 505e338:	00000106 	br	505e340 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 505e33c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 505e340:	e0bffb17 	ldw	r2,-20(fp)
}
 505e344:	e037883a 	mov	sp,fp
 505e348:	df000017 	ldw	fp,0(sp)
 505e34c:	dec00104 	addi	sp,sp,4
 505e350:	f800283a 	ret

0505e354 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 505e354:	defff304 	addi	sp,sp,-52
 505e358:	dfc00c15 	stw	ra,48(sp)
 505e35c:	df000b15 	stw	fp,44(sp)
 505e360:	df000b04 	addi	fp,sp,44
 505e364:	e13ffc15 	stw	r4,-16(fp)
 505e368:	e17ffd15 	stw	r5,-12(fp)
 505e36c:	e1bffe15 	stw	r6,-8(fp)
 505e370:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 505e374:	e0bffd17 	ldw	r2,-12(fp)
 505e378:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 505e37c:	00004706 	br	505e49c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 505e380:	e0bffc17 	ldw	r2,-16(fp)
 505e384:	10800a17 	ldw	r2,40(r2)
 505e388:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 505e38c:	e0bffc17 	ldw	r2,-16(fp)
 505e390:	10800b17 	ldw	r2,44(r2)
 505e394:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 505e398:	e0fff717 	ldw	r3,-36(fp)
 505e39c:	e0bff817 	ldw	r2,-32(fp)
 505e3a0:	18800536 	bltu	r3,r2,505e3b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 505e3a4:	e0fff717 	ldw	r3,-36(fp)
 505e3a8:	e0bff817 	ldw	r2,-32(fp)
 505e3ac:	1885c83a 	sub	r2,r3,r2
 505e3b0:	e0bff615 	stw	r2,-40(fp)
 505e3b4:	00000406 	br	505e3c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 505e3b8:	00c20004 	movi	r3,2048
 505e3bc:	e0bff817 	ldw	r2,-32(fp)
 505e3c0:	1885c83a 	sub	r2,r3,r2
 505e3c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 505e3c8:	e0bff617 	ldw	r2,-40(fp)
 505e3cc:	10001e26 	beq	r2,zero,505e448 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 505e3d0:	e0fffe17 	ldw	r3,-8(fp)
 505e3d4:	e0bff617 	ldw	r2,-40(fp)
 505e3d8:	1880022e 	bgeu	r3,r2,505e3e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 505e3dc:	e0bffe17 	ldw	r2,-8(fp)
 505e3e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 505e3e4:	e0bffc17 	ldw	r2,-16(fp)
 505e3e8:	10c00e04 	addi	r3,r2,56
 505e3ec:	e0bff817 	ldw	r2,-32(fp)
 505e3f0:	1885883a 	add	r2,r3,r2
 505e3f4:	e1bff617 	ldw	r6,-40(fp)
 505e3f8:	100b883a 	mov	r5,r2
 505e3fc:	e13ff517 	ldw	r4,-44(fp)
 505e400:	504f8cc0 	call	504f8cc <memcpy>
      ptr   += n;
 505e404:	e0fff517 	ldw	r3,-44(fp)
 505e408:	e0bff617 	ldw	r2,-40(fp)
 505e40c:	1885883a 	add	r2,r3,r2
 505e410:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 505e414:	e0fffe17 	ldw	r3,-8(fp)
 505e418:	e0bff617 	ldw	r2,-40(fp)
 505e41c:	1885c83a 	sub	r2,r3,r2
 505e420:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 505e424:	e0fff817 	ldw	r3,-32(fp)
 505e428:	e0bff617 	ldw	r2,-40(fp)
 505e42c:	1885883a 	add	r2,r3,r2
 505e430:	10c1ffcc 	andi	r3,r2,2047
 505e434:	e0bffc17 	ldw	r2,-16(fp)
 505e438:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 505e43c:	e0bffe17 	ldw	r2,-8(fp)
 505e440:	00bfcf16 	blt	zero,r2,505e380 <_gp+0xffff2f58>
 505e444:	00000106 	br	505e44c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 505e448:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 505e44c:	e0fff517 	ldw	r3,-44(fp)
 505e450:	e0bffd17 	ldw	r2,-12(fp)
 505e454:	1880141e 	bne	r3,r2,505e4a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 505e458:	e0bfff17 	ldw	r2,-4(fp)
 505e45c:	1090000c 	andi	r2,r2,16384
 505e460:	1000131e 	bne	r2,zero,505e4b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 505e464:	0001883a 	nop
 505e468:	e0bffc17 	ldw	r2,-16(fp)
 505e46c:	10c00a17 	ldw	r3,40(r2)
 505e470:	e0bff717 	ldw	r2,-36(fp)
 505e474:	1880051e 	bne	r3,r2,505e48c <altera_avalon_jtag_uart_read+0x138>
 505e478:	e0bffc17 	ldw	r2,-16(fp)
 505e47c:	10c00917 	ldw	r3,36(r2)
 505e480:	e0bffc17 	ldw	r2,-16(fp)
 505e484:	10800117 	ldw	r2,4(r2)
 505e488:	18bff736 	bltu	r3,r2,505e468 <_gp+0xffff3040>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 505e48c:	e0bffc17 	ldw	r2,-16(fp)
 505e490:	10c00a17 	ldw	r3,40(r2)
 505e494:	e0bff717 	ldw	r2,-36(fp)
 505e498:	18800726 	beq	r3,r2,505e4b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 505e49c:	e0bffe17 	ldw	r2,-8(fp)
 505e4a0:	00bfb716 	blt	zero,r2,505e380 <_gp+0xffff2f58>
 505e4a4:	00000506 	br	505e4bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 505e4a8:	0001883a 	nop
 505e4ac:	00000306 	br	505e4bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 505e4b0:	0001883a 	nop
 505e4b4:	00000106 	br	505e4bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 505e4b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 505e4bc:	e0fff517 	ldw	r3,-44(fp)
 505e4c0:	e0bffd17 	ldw	r2,-12(fp)
 505e4c4:	18801826 	beq	r3,r2,505e528 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505e4c8:	0005303a 	rdctl	r2,status
 505e4cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505e4d0:	e0fffb17 	ldw	r3,-20(fp)
 505e4d4:	00bfff84 	movi	r2,-2
 505e4d8:	1884703a 	and	r2,r3,r2
 505e4dc:	1001703a 	wrctl	status,r2
  
  return context;
 505e4e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 505e4e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 505e4e8:	e0bffc17 	ldw	r2,-16(fp)
 505e4ec:	10800817 	ldw	r2,32(r2)
 505e4f0:	10c00054 	ori	r3,r2,1
 505e4f4:	e0bffc17 	ldw	r2,-16(fp)
 505e4f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 505e4fc:	e0bffc17 	ldw	r2,-16(fp)
 505e500:	10800017 	ldw	r2,0(r2)
 505e504:	10800104 	addi	r2,r2,4
 505e508:	1007883a 	mov	r3,r2
 505e50c:	e0bffc17 	ldw	r2,-16(fp)
 505e510:	10800817 	ldw	r2,32(r2)
 505e514:	18800035 	stwio	r2,0(r3)
 505e518:	e0bffa17 	ldw	r2,-24(fp)
 505e51c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505e520:	e0bff917 	ldw	r2,-28(fp)
 505e524:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 505e528:	e0fff517 	ldw	r3,-44(fp)
 505e52c:	e0bffd17 	ldw	r2,-12(fp)
 505e530:	18800426 	beq	r3,r2,505e544 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 505e534:	e0fff517 	ldw	r3,-44(fp)
 505e538:	e0bffd17 	ldw	r2,-12(fp)
 505e53c:	1885c83a 	sub	r2,r3,r2
 505e540:	00000606 	br	505e55c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 505e544:	e0bfff17 	ldw	r2,-4(fp)
 505e548:	1090000c 	andi	r2,r2,16384
 505e54c:	10000226 	beq	r2,zero,505e558 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 505e550:	00bffd44 	movi	r2,-11
 505e554:	00000106 	br	505e55c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 505e558:	00bffec4 	movi	r2,-5
}
 505e55c:	e037883a 	mov	sp,fp
 505e560:	dfc00117 	ldw	ra,4(sp)
 505e564:	df000017 	ldw	fp,0(sp)
 505e568:	dec00204 	addi	sp,sp,8
 505e56c:	f800283a 	ret

0505e570 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 505e570:	defff304 	addi	sp,sp,-52
 505e574:	dfc00c15 	stw	ra,48(sp)
 505e578:	df000b15 	stw	fp,44(sp)
 505e57c:	df000b04 	addi	fp,sp,44
 505e580:	e13ffc15 	stw	r4,-16(fp)
 505e584:	e17ffd15 	stw	r5,-12(fp)
 505e588:	e1bffe15 	stw	r6,-8(fp)
 505e58c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 505e590:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 505e594:	e0bffd17 	ldw	r2,-12(fp)
 505e598:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 505e59c:	00003706 	br	505e67c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 505e5a0:	e0bffc17 	ldw	r2,-16(fp)
 505e5a4:	10800c17 	ldw	r2,48(r2)
 505e5a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 505e5ac:	e0bffc17 	ldw	r2,-16(fp)
 505e5b0:	10800d17 	ldw	r2,52(r2)
 505e5b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 505e5b8:	e0fff917 	ldw	r3,-28(fp)
 505e5bc:	e0bff517 	ldw	r2,-44(fp)
 505e5c0:	1880062e 	bgeu	r3,r2,505e5dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 505e5c4:	e0fff517 	ldw	r3,-44(fp)
 505e5c8:	e0bff917 	ldw	r2,-28(fp)
 505e5cc:	1885c83a 	sub	r2,r3,r2
 505e5d0:	10bfffc4 	addi	r2,r2,-1
 505e5d4:	e0bff615 	stw	r2,-40(fp)
 505e5d8:	00000b06 	br	505e608 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 505e5dc:	e0bff517 	ldw	r2,-44(fp)
 505e5e0:	10000526 	beq	r2,zero,505e5f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 505e5e4:	00c20004 	movi	r3,2048
 505e5e8:	e0bff917 	ldw	r2,-28(fp)
 505e5ec:	1885c83a 	sub	r2,r3,r2
 505e5f0:	e0bff615 	stw	r2,-40(fp)
 505e5f4:	00000406 	br	505e608 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 505e5f8:	00c1ffc4 	movi	r3,2047
 505e5fc:	e0bff917 	ldw	r2,-28(fp)
 505e600:	1885c83a 	sub	r2,r3,r2
 505e604:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 505e608:	e0bff617 	ldw	r2,-40(fp)
 505e60c:	10001e26 	beq	r2,zero,505e688 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 505e610:	e0fffe17 	ldw	r3,-8(fp)
 505e614:	e0bff617 	ldw	r2,-40(fp)
 505e618:	1880022e 	bgeu	r3,r2,505e624 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 505e61c:	e0bffe17 	ldw	r2,-8(fp)
 505e620:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 505e624:	e0bffc17 	ldw	r2,-16(fp)
 505e628:	10c20e04 	addi	r3,r2,2104
 505e62c:	e0bff917 	ldw	r2,-28(fp)
 505e630:	1885883a 	add	r2,r3,r2
 505e634:	e1bff617 	ldw	r6,-40(fp)
 505e638:	e17ffd17 	ldw	r5,-12(fp)
 505e63c:	1009883a 	mov	r4,r2
 505e640:	504f8cc0 	call	504f8cc <memcpy>
      ptr   += n;
 505e644:	e0fffd17 	ldw	r3,-12(fp)
 505e648:	e0bff617 	ldw	r2,-40(fp)
 505e64c:	1885883a 	add	r2,r3,r2
 505e650:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 505e654:	e0fffe17 	ldw	r3,-8(fp)
 505e658:	e0bff617 	ldw	r2,-40(fp)
 505e65c:	1885c83a 	sub	r2,r3,r2
 505e660:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 505e664:	e0fff917 	ldw	r3,-28(fp)
 505e668:	e0bff617 	ldw	r2,-40(fp)
 505e66c:	1885883a 	add	r2,r3,r2
 505e670:	10c1ffcc 	andi	r3,r2,2047
 505e674:	e0bffc17 	ldw	r2,-16(fp)
 505e678:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 505e67c:	e0bffe17 	ldw	r2,-8(fp)
 505e680:	00bfc716 	blt	zero,r2,505e5a0 <_gp+0xffff3178>
 505e684:	00000106 	br	505e68c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 505e688:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505e68c:	0005303a 	rdctl	r2,status
 505e690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505e694:	e0fffb17 	ldw	r3,-20(fp)
 505e698:	00bfff84 	movi	r2,-2
 505e69c:	1884703a 	and	r2,r3,r2
 505e6a0:	1001703a 	wrctl	status,r2
  
  return context;
 505e6a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 505e6a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 505e6ac:	e0bffc17 	ldw	r2,-16(fp)
 505e6b0:	10800817 	ldw	r2,32(r2)
 505e6b4:	10c00094 	ori	r3,r2,2
 505e6b8:	e0bffc17 	ldw	r2,-16(fp)
 505e6bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 505e6c0:	e0bffc17 	ldw	r2,-16(fp)
 505e6c4:	10800017 	ldw	r2,0(r2)
 505e6c8:	10800104 	addi	r2,r2,4
 505e6cc:	1007883a 	mov	r3,r2
 505e6d0:	e0bffc17 	ldw	r2,-16(fp)
 505e6d4:	10800817 	ldw	r2,32(r2)
 505e6d8:	18800035 	stwio	r2,0(r3)
 505e6dc:	e0bffa17 	ldw	r2,-24(fp)
 505e6e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505e6e4:	e0bff817 	ldw	r2,-32(fp)
 505e6e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 505e6ec:	e0bffe17 	ldw	r2,-8(fp)
 505e6f0:	0080100e 	bge	zero,r2,505e734 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 505e6f4:	e0bfff17 	ldw	r2,-4(fp)
 505e6f8:	1090000c 	andi	r2,r2,16384
 505e6fc:	1000101e 	bne	r2,zero,505e740 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 505e700:	0001883a 	nop
 505e704:	e0bffc17 	ldw	r2,-16(fp)
 505e708:	10c00d17 	ldw	r3,52(r2)
 505e70c:	e0bff517 	ldw	r2,-44(fp)
 505e710:	1880051e 	bne	r3,r2,505e728 <altera_avalon_jtag_uart_write+0x1b8>
 505e714:	e0bffc17 	ldw	r2,-16(fp)
 505e718:	10c00917 	ldw	r3,36(r2)
 505e71c:	e0bffc17 	ldw	r2,-16(fp)
 505e720:	10800117 	ldw	r2,4(r2)
 505e724:	18bff736 	bltu	r3,r2,505e704 <_gp+0xffff32dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 505e728:	e0bffc17 	ldw	r2,-16(fp)
 505e72c:	10800917 	ldw	r2,36(r2)
 505e730:	1000051e 	bne	r2,zero,505e748 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 505e734:	e0bffe17 	ldw	r2,-8(fp)
 505e738:	00bfd016 	blt	zero,r2,505e67c <_gp+0xffff3254>
 505e73c:	00000306 	br	505e74c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 505e740:	0001883a 	nop
 505e744:	00000106 	br	505e74c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 505e748:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 505e74c:	e0fffd17 	ldw	r3,-12(fp)
 505e750:	e0bff717 	ldw	r2,-36(fp)
 505e754:	18800426 	beq	r3,r2,505e768 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 505e758:	e0fffd17 	ldw	r3,-12(fp)
 505e75c:	e0bff717 	ldw	r2,-36(fp)
 505e760:	1885c83a 	sub	r2,r3,r2
 505e764:	00000606 	br	505e780 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 505e768:	e0bfff17 	ldw	r2,-4(fp)
 505e76c:	1090000c 	andi	r2,r2,16384
 505e770:	10000226 	beq	r2,zero,505e77c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 505e774:	00bffd44 	movi	r2,-11
 505e778:	00000106 	br	505e780 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 505e77c:	00bffec4 	movi	r2,-5
}
 505e780:	e037883a 	mov	sp,fp
 505e784:	dfc00117 	ldw	ra,4(sp)
 505e788:	df000017 	ldw	fp,0(sp)
 505e78c:	dec00204 	addi	sp,sp,8
 505e790:	f800283a 	ret

0505e794 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 505e794:	defff404 	addi	sp,sp,-48
 505e798:	df000b15 	stw	fp,44(sp)
 505e79c:	df000b04 	addi	fp,sp,44
 505e7a0:	e13ffc15 	stw	r4,-16(fp)
 505e7a4:	e17ffd15 	stw	r5,-12(fp)
 505e7a8:	e1bffe15 	stw	r6,-8(fp)
 505e7ac:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 505e7b0:	e0ffff17 	ldw	r3,-4(fp)
 505e7b4:	e0bffe17 	ldw	r2,-8(fp)
 505e7b8:	1885883a 	add	r2,r3,r2
 505e7bc:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 505e7c0:	e0c00217 	ldw	r3,8(fp)
 505e7c4:	e0800117 	ldw	r2,4(fp)
 505e7c8:	1885883a 	add	r2,r3,r2
 505e7cc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 505e7d0:	e0800117 	ldw	r2,4(fp)
 505e7d4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 505e7d8:	e0bffe17 	ldw	r2,-8(fp)
 505e7dc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 505e7e0:	00800044 	movi	r2,1
 505e7e4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 505e7e8:	e0bffc17 	ldw	r2,-16(fp)
 505e7ec:	10800504 	addi	r2,r2,20
 505e7f0:	1009883a 	mov	r4,r2
 505e7f4:	00c00044 	movi	r3,1
 505e7f8:	e0bffd17 	ldw	r2,-12(fp)
 505e7fc:	1884983a 	sll	r2,r3,r2
 505e800:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 505e804:	e0800317 	ldw	r2,12(fp)
 505e808:	1080008c 	andi	r2,r2,2
 505e80c:	1000051e 	bne	r2,zero,505e824 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 505e810:	e0bffc17 	ldw	r2,-16(fp)
 505e814:	10800304 	addi	r2,r2,12
 505e818:	1007883a 	mov	r3,r2
 505e81c:	00810004 	movi	r2,1024
 505e820:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 505e824:	e0bffc17 	ldw	r2,-16(fp)
 505e828:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 505e82c:	e0bffc17 	ldw	r2,-16(fp)
 505e830:	10800204 	addi	r2,r2,8
 505e834:	10800037 	ldwio	r2,0(r2)
 505e838:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 505e83c:	e0bffa17 	ldw	r2,-24(fp)
 505e840:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 505e844:	10000226 	beq	r2,zero,505e850 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 505e848:	e0bff717 	ldw	r2,-36(fp)
 505e84c:	1000031e 	bne	r2,zero,505e85c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 505e850:	e0bffa17 	ldw	r2,-24(fp)
 505e854:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 505e858:	103ff426 	beq	r2,zero,505e82c <_gp+0xffff3404>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 505e85c:	e0bffa17 	ldw	r2,-24(fp)
 505e860:	1080100c 	andi	r2,r2,64
 505e864:	10001e26 	beq	r2,zero,505e8e0 <alt_avalon_spi_command+0x14c>
 505e868:	e0bff717 	ldw	r2,-36(fp)
 505e86c:	00801c0e 	bge	zero,r2,505e8e0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 505e870:	e0bff717 	ldw	r2,-36(fp)
 505e874:	10bfffc4 	addi	r2,r2,-1
 505e878:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 505e87c:	e0ffff17 	ldw	r3,-4(fp)
 505e880:	e0bff817 	ldw	r2,-32(fp)
 505e884:	18800a2e 	bgeu	r3,r2,505e8b0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 505e888:	e0bffc17 	ldw	r2,-16(fp)
 505e88c:	10800104 	addi	r2,r2,4
 505e890:	1009883a 	mov	r4,r2
 505e894:	e0bfff17 	ldw	r2,-4(fp)
 505e898:	10c00044 	addi	r3,r2,1
 505e89c:	e0ffff15 	stw	r3,-4(fp)
 505e8a0:	10800003 	ldbu	r2,0(r2)
 505e8a4:	10803fcc 	andi	r2,r2,255
 505e8a8:	20800035 	stwio	r2,0(r4)
 505e8ac:	00000c06 	br	505e8e0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 505e8b0:	e0bff517 	ldw	r2,-44(fp)
 505e8b4:	10000826 	beq	r2,zero,505e8d8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 505e8b8:	e0bff517 	ldw	r2,-44(fp)
 505e8bc:	10bfffc4 	addi	r2,r2,-1
 505e8c0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 505e8c4:	e0bffc17 	ldw	r2,-16(fp)
 505e8c8:	10800104 	addi	r2,r2,4
 505e8cc:	0007883a 	mov	r3,zero
 505e8d0:	10c00035 	stwio	r3,0(r2)
 505e8d4:	00000206 	br	505e8e0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 505e8d8:	00bf0004 	movi	r2,-1024
 505e8dc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 505e8e0:	e0bffa17 	ldw	r2,-24(fp)
 505e8e4:	1080200c 	andi	r2,r2,128
 505e8e8:	103fd026 	beq	r2,zero,505e82c <_gp+0xffff3404>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 505e8ec:	e0bffc17 	ldw	r2,-16(fp)
 505e8f0:	10800037 	ldwio	r2,0(r2)
 505e8f4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 505e8f8:	e0bff617 	ldw	r2,-40(fp)
 505e8fc:	10000426 	beq	r2,zero,505e910 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 505e900:	e0bff617 	ldw	r2,-40(fp)
 505e904:	10bfffc4 	addi	r2,r2,-1
 505e908:	e0bff615 	stw	r2,-40(fp)
 505e90c:	00000506 	br	505e924 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 505e910:	e0800217 	ldw	r2,8(fp)
 505e914:	10c00044 	addi	r3,r2,1
 505e918:	e0c00215 	stw	r3,8(fp)
 505e91c:	e0fffb17 	ldw	r3,-20(fp)
 505e920:	10c00005 	stb	r3,0(r2)
      credits++;
 505e924:	e0bff717 	ldw	r2,-36(fp)
 505e928:	10800044 	addi	r2,r2,1
 505e92c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 505e930:	e0bff617 	ldw	r2,-40(fp)
 505e934:	103fbd1e 	bne	r2,zero,505e82c <_gp+0xffff3404>
 505e938:	e0c00217 	ldw	r3,8(fp)
 505e93c:	e0bff917 	ldw	r2,-28(fp)
 505e940:	18bfba1e 	bne	r3,r2,505e82c <_gp+0xffff3404>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 505e944:	e0bffc17 	ldw	r2,-16(fp)
 505e948:	10800204 	addi	r2,r2,8
 505e94c:	10800037 	ldwio	r2,0(r2)
 505e950:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 505e954:	e0bffa17 	ldw	r2,-24(fp)
 505e958:	1080080c 	andi	r2,r2,32
 505e95c:	103ff926 	beq	r2,zero,505e944 <_gp+0xffff351c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 505e960:	e0800317 	ldw	r2,12(fp)
 505e964:	1080004c 	andi	r2,r2,1
 505e968:	1000041e 	bne	r2,zero,505e97c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 505e96c:	e0bffc17 	ldw	r2,-16(fp)
 505e970:	10800304 	addi	r2,r2,12
 505e974:	0007883a 	mov	r3,zero
 505e978:	10c00035 	stwio	r3,0(r2)

  return read_length;
 505e97c:	e0800117 	ldw	r2,4(fp)
}
 505e980:	e037883a 	mov	sp,fp
 505e984:	df000017 	ldw	fp,0(sp)
 505e988:	dec00104 	addi	sp,sp,4
 505e98c:	f800283a 	ret

0505e990 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 505e990:	defff904 	addi	sp,sp,-28
 505e994:	dfc00615 	stw	ra,24(sp)
 505e998:	df000515 	stw	fp,20(sp)
 505e99c:	df000504 	addi	fp,sp,20
 505e9a0:	e13ffe15 	stw	r4,-8(fp)
 505e9a4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 505e9a8:	0007883a 	mov	r3,zero
 505e9ac:	e0bffe17 	ldw	r2,-8(fp)
 505e9b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 505e9b4:	e0bffe17 	ldw	r2,-8(fp)
 505e9b8:	10800104 	addi	r2,r2,4
 505e9bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 505e9c0:	0005303a 	rdctl	r2,status
 505e9c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 505e9c8:	e0fffc17 	ldw	r3,-16(fp)
 505e9cc:	00bfff84 	movi	r2,-2
 505e9d0:	1884703a 	and	r2,r3,r2
 505e9d4:	1001703a 	wrctl	status,r2
  
  return context;
 505e9d8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 505e9dc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 505e9e0:	505d7140 	call	505d714 <alt_tick>
 505e9e4:	e0bffb17 	ldw	r2,-20(fp)
 505e9e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 505e9ec:	e0bffd17 	ldw	r2,-12(fp)
 505e9f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 505e9f4:	0001883a 	nop
 505e9f8:	e037883a 	mov	sp,fp
 505e9fc:	dfc00117 	ldw	ra,4(sp)
 505ea00:	df000017 	ldw	fp,0(sp)
 505ea04:	dec00204 	addi	sp,sp,8
 505ea08:	f800283a 	ret

0505ea0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 505ea0c:	defff904 	addi	sp,sp,-28
 505ea10:	dfc00615 	stw	ra,24(sp)
 505ea14:	df000515 	stw	fp,20(sp)
 505ea18:	df000504 	addi	fp,sp,20
 505ea1c:	e13ffc15 	stw	r4,-16(fp)
 505ea20:	e17ffd15 	stw	r5,-12(fp)
 505ea24:	e1bffe15 	stw	r6,-8(fp)
 505ea28:	e1ffff15 	stw	r7,-4(fp)
 505ea2c:	e0bfff17 	ldw	r2,-4(fp)
 505ea30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 505ea34:	d0a81b17 	ldw	r2,-24468(gp)
 505ea38:	1000021e 	bne	r2,zero,505ea44 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 505ea3c:	e0bffb17 	ldw	r2,-20(fp)
 505ea40:	d0a81b15 	stw	r2,-24468(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 505ea44:	e0bffc17 	ldw	r2,-16(fp)
 505ea48:	10800104 	addi	r2,r2,4
 505ea4c:	00c001c4 	movi	r3,7
 505ea50:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 505ea54:	018141b4 	movhi	r6,1286
 505ea58:	31ba6404 	addi	r6,r6,-5744
 505ea5c:	e17ffc17 	ldw	r5,-16(fp)
 505ea60:	e13ffe17 	ldw	r4,-8(fp)
 505ea64:	505cf0c0 	call	505cf0c <alt_irq_register>
#endif  
}
 505ea68:	0001883a 	nop
 505ea6c:	e037883a 	mov	sp,fp
 505ea70:	dfc00117 	ldw	ra,4(sp)
 505ea74:	df000017 	ldw	fp,0(sp)
 505ea78:	dec00204 	addi	sp,sp,8
 505ea7c:	f800283a 	ret

0505ea80 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 505ea80:	defffe04 	addi	sp,sp,-8
 505ea84:	df000115 	stw	fp,4(sp)
 505ea88:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 505ea8c:	d0a81d17 	ldw	r2,-24460(gp)
 505ea90:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 505ea94:	d0a81e17 	ldw	r2,-24456(gp)
 505ea98:	1000021e 	bne	r2,zero,505eaa4 <alt_timestamp_start+0x24>
  {
    return -1;
 505ea9c:	00bfffc4 	movi	r2,-1
 505eaa0:	00001106 	br	505eae8 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 505eaa4:	e0bfff17 	ldw	r2,-4(fp)
 505eaa8:	10800104 	addi	r2,r2,4
 505eaac:	00c00204 	movi	r3,8
 505eab0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 505eab4:	e0bfff17 	ldw	r2,-4(fp)
 505eab8:	10800204 	addi	r2,r2,8
 505eabc:	00ffffd4 	movui	r3,65535
 505eac0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 505eac4:	e0bfff17 	ldw	r2,-4(fp)
 505eac8:	10800304 	addi	r2,r2,12
 505eacc:	00ffffd4 	movui	r3,65535
 505ead0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 505ead4:	e0bfff17 	ldw	r2,-4(fp)
 505ead8:	10800104 	addi	r2,r2,4
 505eadc:	00c00104 	movi	r3,4
 505eae0:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 505eae4:	0005883a 	mov	r2,zero
}
 505eae8:	e037883a 	mov	sp,fp
 505eaec:	df000017 	ldw	fp,0(sp)
 505eaf0:	dec00104 	addi	sp,sp,4
 505eaf4:	f800283a 	ret

0505eaf8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 505eaf8:	defffc04 	addi	sp,sp,-16
 505eafc:	df000315 	stw	fp,12(sp)
 505eb00:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 505eb04:	d0a81d17 	ldw	r2,-24460(gp)
 505eb08:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 505eb0c:	d0a81e17 	ldw	r2,-24456(gp)
 505eb10:	1000021e 	bne	r2,zero,505eb1c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
 505eb14:	00bfffc4 	movi	r2,-1
 505eb18:	00001306 	br	505eb68 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 505eb1c:	e0bffd17 	ldw	r2,-12(fp)
 505eb20:	10800404 	addi	r2,r2,16
 505eb24:	0007883a 	mov	r3,zero
 505eb28:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 505eb2c:	e0bffd17 	ldw	r2,-12(fp)
 505eb30:	10800404 	addi	r2,r2,16
 505eb34:	10800037 	ldwio	r2,0(r2)
 505eb38:	10bfffcc 	andi	r2,r2,65535
 505eb3c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 505eb40:	e0bffd17 	ldw	r2,-12(fp)
 505eb44:	10800504 	addi	r2,r2,20
 505eb48:	10800037 	ldwio	r2,0(r2)
 505eb4c:	10bfffcc 	andi	r2,r2,65535
 505eb50:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 505eb54:	e0bfff17 	ldw	r2,-4(fp)
 505eb58:	1006943a 	slli	r3,r2,16
 505eb5c:	e0bffe17 	ldw	r2,-8(fp)
 505eb60:	1884b03a 	or	r2,r3,r2
 505eb64:	0084303a 	nor	r2,zero,r2
#endif
  }
}
 505eb68:	e037883a 	mov	sp,fp
 505eb6c:	df000017 	ldw	fp,0(sp)
 505eb70:	dec00104 	addi	sp,sp,4
 505eb74:	f800283a 	ret

0505eb78 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 505eb78:	deffff04 	addi	sp,sp,-4
 505eb7c:	df000015 	stw	fp,0(sp)
 505eb80:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 505eb84:	d0a81e17 	ldw	r2,-24456(gp)
}
 505eb88:	e037883a 	mov	sp,fp
 505eb8c:	df000017 	ldw	fp,0(sp)
 505eb90:	dec00104 	addi	sp,sp,4
 505eb94:	f800283a 	ret

0505eb98 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 505eb98:	defffc04 	addi	sp,sp,-16
 505eb9c:	dfc00315 	stw	ra,12(sp)
 505eba0:	df000215 	stw	fp,8(sp)
 505eba4:	df000204 	addi	fp,sp,8
 505eba8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 505ebac:	d1600a04 	addi	r5,gp,-32728
 505ebb0:	e13fff17 	ldw	r4,-4(fp)
 505ebb4:	506013c0 	call	506013c <alt_find_dev>
 505ebb8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 505ebbc:	e0bffe17 	ldw	r2,-8(fp)
}
 505ebc0:	e037883a 	mov	sp,fp
 505ebc4:	dfc00117 	ldw	ra,4(sp)
 505ebc8:	df000017 	ldw	fp,0(sp)
 505ebcc:	dec00204 	addi	sp,sp,8
 505ebd0:	f800283a 	ret

0505ebd4 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 505ebd4:	defffd04 	addi	sp,sp,-12
 505ebd8:	df000215 	stw	fp,8(sp)
 505ebdc:	df000204 	addi	fp,sp,8
 505ebe0:	e13ffe15 	stw	r4,-8(fp)
 505ebe4:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 505ebe8:	e0bffe17 	ldw	r2,-8(fp)
 505ebec:	10800a17 	ldw	r2,40(r2)
 505ebf0:	10800023 	ldbuio	r2,0(r2)
 505ebf4:	10803fcc 	andi	r2,r2,255
 505ebf8:	1007883a 	mov	r3,r2
 505ebfc:	e0bfff17 	ldw	r2,-4(fp)
 505ec00:	10c00005 	stb	r3,0(r2)

	return 0;
 505ec04:	0005883a 	mov	r2,zero
}
 505ec08:	e037883a 	mov	sp,fp
 505ec0c:	df000017 	ldw	fp,0(sp)
 505ec10:	dec00104 	addi	sp,sp,4
 505ec14:	f800283a 	ret

0505ec18 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 505ec18:	defffc04 	addi	sp,sp,-16
 505ec1c:	df000315 	stw	fp,12(sp)
 505ec20:	df000304 	addi	fp,sp,12
 505ec24:	e13ffd15 	stw	r4,-12(fp)
 505ec28:	2805883a 	mov	r2,r5
 505ec2c:	e1bfff15 	stw	r6,-4(fp)
 505ec30:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505ec34:	e0bffd17 	ldw	r2,-12(fp)
 505ec38:	10800a17 	ldw	r2,40(r2)
 505ec3c:	1007883a 	mov	r3,r2
 505ec40:	e0bffe03 	ldbu	r2,-8(fp)
 505ec44:	10800fcc 	andi	r2,r2,63
 505ec48:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 505ec4c:	e0bffd17 	ldw	r2,-12(fp)
 505ec50:	10800a17 	ldw	r2,40(r2)
 505ec54:	10800044 	addi	r2,r2,1
 505ec58:	10800023 	ldbuio	r2,0(r2)
 505ec5c:	10803fcc 	andi	r2,r2,255
 505ec60:	1007883a 	mov	r3,r2
 505ec64:	e0bfff17 	ldw	r2,-4(fp)
 505ec68:	10c00005 	stb	r3,0(r2)

	return 0;
 505ec6c:	0005883a 	mov	r2,zero
}
 505ec70:	e037883a 	mov	sp,fp
 505ec74:	df000017 	ldw	fp,0(sp)
 505ec78:	dec00104 	addi	sp,sp,4
 505ec7c:	f800283a 	ret

0505ec80 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 505ec80:	defffc04 	addi	sp,sp,-16
 505ec84:	df000315 	stw	fp,12(sp)
 505ec88:	df000304 	addi	fp,sp,12
 505ec8c:	e13ffd15 	stw	r4,-12(fp)
 505ec90:	2807883a 	mov	r3,r5
 505ec94:	3005883a 	mov	r2,r6
 505ec98:	e0fffe05 	stb	r3,-8(fp)
 505ec9c:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505eca0:	e0bffd17 	ldw	r2,-12(fp)
 505eca4:	10800a17 	ldw	r2,40(r2)
 505eca8:	1007883a 	mov	r3,r2
 505ecac:	e0bffe03 	ldbu	r2,-8(fp)
 505ecb0:	10800fcc 	andi	r2,r2,63
 505ecb4:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 505ecb8:	e0bffd17 	ldw	r2,-12(fp)
 505ecbc:	10800a17 	ldw	r2,40(r2)
 505ecc0:	10800044 	addi	r2,r2,1
 505ecc4:	1007883a 	mov	r3,r2
 505ecc8:	e0bfff03 	ldbu	r2,-4(fp)
 505eccc:	18800025 	stbio	r2,0(r3)

	return 0;
 505ecd0:	0005883a 	mov	r2,zero
}
 505ecd4:	e037883a 	mov	sp,fp
 505ecd8:	df000017 	ldw	fp,0(sp)
 505ecdc:	dec00104 	addi	sp,sp,4
 505ece0:	f800283a 	ret

0505ece4 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 505ece4:	defffd04 	addi	sp,sp,-12
 505ece8:	df000215 	stw	fp,8(sp)
 505ecec:	df000204 	addi	fp,sp,8
 505ecf0:	e13ffe15 	stw	r4,-8(fp)
 505ecf4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505ecf8:	e0bffe17 	ldw	r2,-8(fp)
 505ecfc:	10800a17 	ldw	r2,40(r2)
 505ed00:	1007883a 	mov	r3,r2
 505ed04:	00800c84 	movi	r2,50
 505ed08:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 505ed0c:	e0bffe17 	ldw	r2,-8(fp)
 505ed10:	10800a17 	ldw	r2,40(r2)
 505ed14:	10800044 	addi	r2,r2,1
 505ed18:	10800023 	ldbuio	r2,0(r2)
 505ed1c:	10803fcc 	andi	r2,r2,255
 505ed20:	10ffffcc 	andi	r3,r2,65535
 505ed24:	e0bfff17 	ldw	r2,-4(fp)
 505ed28:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505ed2c:	e0bffe17 	ldw	r2,-8(fp)
 505ed30:	10800a17 	ldw	r2,40(r2)
 505ed34:	1007883a 	mov	r3,r2
 505ed38:	00800cc4 	movi	r2,51
 505ed3c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 505ed40:	e0bffe17 	ldw	r2,-8(fp)
 505ed44:	10800a17 	ldw	r2,40(r2)
 505ed48:	10800044 	addi	r2,r2,1
 505ed4c:	10800023 	ldbuio	r2,0(r2)
 505ed50:	10803fcc 	andi	r2,r2,255
 505ed54:	10bfffcc 	andi	r2,r2,65535
 505ed58:	1004923a 	slli	r2,r2,8
 505ed5c:	e0ffff17 	ldw	r3,-4(fp)
 505ed60:	18c00017 	ldw	r3,0(r3)
 505ed64:	1885883a 	add	r2,r3,r2
 505ed68:	1007883a 	mov	r3,r2
 505ed6c:	e0bfff17 	ldw	r2,-4(fp)
 505ed70:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 505ed74:	e0bfff17 	ldw	r2,-4(fp)
 505ed78:	10800017 	ldw	r2,0(r2)
 505ed7c:	10a0000c 	andi	r2,r2,32768
 505ed80:	10000626 	beq	r2,zero,505ed9c <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 505ed84:	e0bfff17 	ldw	r2,-4(fp)
 505ed88:	10800017 	ldw	r2,0(r2)
 505ed8c:	10bffff4 	orhi	r2,r2,65535
 505ed90:	1007883a 	mov	r3,r2
 505ed94:	e0bfff17 	ldw	r2,-4(fp)
 505ed98:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 505ed9c:	0005883a 	mov	r2,zero
}
 505eda0:	e037883a 	mov	sp,fp
 505eda4:	df000017 	ldw	fp,0(sp)
 505eda8:	dec00104 	addi	sp,sp,4
 505edac:	f800283a 	ret

0505edb0 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 505edb0:	defffd04 	addi	sp,sp,-12
 505edb4:	df000215 	stw	fp,8(sp)
 505edb8:	df000204 	addi	fp,sp,8
 505edbc:	e13ffe15 	stw	r4,-8(fp)
 505edc0:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505edc4:	e0bffe17 	ldw	r2,-8(fp)
 505edc8:	10800a17 	ldw	r2,40(r2)
 505edcc:	1007883a 	mov	r3,r2
 505edd0:	00800d04 	movi	r2,52
 505edd4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 505edd8:	e0bffe17 	ldw	r2,-8(fp)
 505eddc:	10800a17 	ldw	r2,40(r2)
 505ede0:	10800044 	addi	r2,r2,1
 505ede4:	10800023 	ldbuio	r2,0(r2)
 505ede8:	10803fcc 	andi	r2,r2,255
 505edec:	10ffffcc 	andi	r3,r2,65535
 505edf0:	e0bfff17 	ldw	r2,-4(fp)
 505edf4:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505edf8:	e0bffe17 	ldw	r2,-8(fp)
 505edfc:	10800a17 	ldw	r2,40(r2)
 505ee00:	1007883a 	mov	r3,r2
 505ee04:	00800d44 	movi	r2,53
 505ee08:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 505ee0c:	e0bffe17 	ldw	r2,-8(fp)
 505ee10:	10800a17 	ldw	r2,40(r2)
 505ee14:	10800044 	addi	r2,r2,1
 505ee18:	10800023 	ldbuio	r2,0(r2)
 505ee1c:	10803fcc 	andi	r2,r2,255
 505ee20:	10bfffcc 	andi	r2,r2,65535
 505ee24:	1004923a 	slli	r2,r2,8
 505ee28:	e0ffff17 	ldw	r3,-4(fp)
 505ee2c:	18c00017 	ldw	r3,0(r3)
 505ee30:	1885883a 	add	r2,r3,r2
 505ee34:	1007883a 	mov	r3,r2
 505ee38:	e0bfff17 	ldw	r2,-4(fp)
 505ee3c:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 505ee40:	e0bfff17 	ldw	r2,-4(fp)
 505ee44:	10800017 	ldw	r2,0(r2)
 505ee48:	10a0000c 	andi	r2,r2,32768
 505ee4c:	10000626 	beq	r2,zero,505ee68 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 505ee50:	e0bfff17 	ldw	r2,-4(fp)
 505ee54:	10800017 	ldw	r2,0(r2)
 505ee58:	10bffff4 	orhi	r2,r2,65535
 505ee5c:	1007883a 	mov	r3,r2
 505ee60:	e0bfff17 	ldw	r2,-4(fp)
 505ee64:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 505ee68:	0005883a 	mov	r2,zero
}
 505ee6c:	e037883a 	mov	sp,fp
 505ee70:	df000017 	ldw	fp,0(sp)
 505ee74:	dec00104 	addi	sp,sp,4
 505ee78:	f800283a 	ret

0505ee7c <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 505ee7c:	defffd04 	addi	sp,sp,-12
 505ee80:	df000215 	stw	fp,8(sp)
 505ee84:	df000204 	addi	fp,sp,8
 505ee88:	e13ffe15 	stw	r4,-8(fp)
 505ee8c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505ee90:	e0bffe17 	ldw	r2,-8(fp)
 505ee94:	10800a17 	ldw	r2,40(r2)
 505ee98:	1007883a 	mov	r3,r2
 505ee9c:	00800d84 	movi	r2,54
 505eea0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 505eea4:	e0bffe17 	ldw	r2,-8(fp)
 505eea8:	10800a17 	ldw	r2,40(r2)
 505eeac:	10800044 	addi	r2,r2,1
 505eeb0:	10800023 	ldbuio	r2,0(r2)
 505eeb4:	10803fcc 	andi	r2,r2,255
 505eeb8:	10ffffcc 	andi	r3,r2,65535
 505eebc:	e0bfff17 	ldw	r2,-4(fp)
 505eec0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 505eec4:	e0bffe17 	ldw	r2,-8(fp)
 505eec8:	10800a17 	ldw	r2,40(r2)
 505eecc:	1007883a 	mov	r3,r2
 505eed0:	00800dc4 	movi	r2,55
 505eed4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 505eed8:	e0bffe17 	ldw	r2,-8(fp)
 505eedc:	10800a17 	ldw	r2,40(r2)
 505eee0:	10800044 	addi	r2,r2,1
 505eee4:	10800023 	ldbuio	r2,0(r2)
 505eee8:	10803fcc 	andi	r2,r2,255
 505eeec:	10bfffcc 	andi	r2,r2,65535
 505eef0:	1004923a 	slli	r2,r2,8
 505eef4:	e0ffff17 	ldw	r3,-4(fp)
 505eef8:	18c00017 	ldw	r3,0(r3)
 505eefc:	1885883a 	add	r2,r3,r2
 505ef00:	1007883a 	mov	r3,r2
 505ef04:	e0bfff17 	ldw	r2,-4(fp)
 505ef08:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 505ef0c:	e0bfff17 	ldw	r2,-4(fp)
 505ef10:	10800017 	ldw	r2,0(r2)
 505ef14:	10a0000c 	andi	r2,r2,32768
 505ef18:	10000626 	beq	r2,zero,505ef34 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 505ef1c:	e0bfff17 	ldw	r2,-4(fp)
 505ef20:	10800017 	ldw	r2,0(r2)
 505ef24:	10bffff4 	orhi	r2,r2,65535
 505ef28:	1007883a 	mov	r3,r2
 505ef2c:	e0bfff17 	ldw	r2,-4(fp)
 505ef30:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 505ef34:	0005883a 	mov	r2,zero
}
 505ef38:	e037883a 	mov	sp,fp
 505ef3c:	df000017 	ldw	fp,0(sp)
 505ef40:	dec00104 	addi	sp,sp,4
 505ef44:	f800283a 	ret

0505ef48 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 505ef48:	defffc04 	addi	sp,sp,-16
 505ef4c:	dfc00315 	stw	ra,12(sp)
 505ef50:	df000215 	stw	fp,8(sp)
 505ef54:	df000204 	addi	fp,sp,8
 505ef58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 505ef5c:	d1600a04 	addi	r5,gp,-32728
 505ef60:	e13fff17 	ldw	r4,-4(fp)
 505ef64:	506013c0 	call	506013c <alt_find_dev>
 505ef68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 505ef6c:	e0bffe17 	ldw	r2,-8(fp)
}
 505ef70:	e037883a 	mov	sp,fp
 505ef74:	dfc00117 	ldw	ra,4(sp)
 505ef78:	df000017 	ldw	fp,0(sp)
 505ef7c:	dec00204 	addi	sp,sp,8
 505ef80:	f800283a 	ret

0505ef84 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 505ef84:	defffa04 	addi	sp,sp,-24
 505ef88:	df000515 	stw	fp,20(sp)
 505ef8c:	df000504 	addi	fp,sp,20
 505ef90:	e13ffc15 	stw	r4,-16(fp)
 505ef94:	e17ffd15 	stw	r5,-12(fp)
 505ef98:	e1bffe15 	stw	r6,-8(fp)
 505ef9c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 505efa0:	e0bffc17 	ldw	r2,-16(fp)
 505efa4:	10800f17 	ldw	r2,60(r2)
 505efa8:	e0fffe17 	ldw	r3,-8(fp)
 505efac:	1880042e 	bgeu	r3,r2,505efc0 <alt_up_pixel_buffer_dma_draw+0x3c>
 505efb0:	e0bffc17 	ldw	r2,-16(fp)
 505efb4:	10801017 	ldw	r2,64(r2)
 505efb8:	e0ffff17 	ldw	r3,-4(fp)
 505efbc:	18800236 	bltu	r3,r2,505efc8 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 505efc0:	00bfffc4 	movi	r2,-1
 505efc4:	00005006 	br	505f108 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 505efc8:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 505efcc:	e0bffc17 	ldw	r2,-16(fp)
 505efd0:	10800d17 	ldw	r2,52(r2)
 505efd4:	1000151e 	bne	r2,zero,505f02c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 505efd8:	e0bffc17 	ldw	r2,-16(fp)
 505efdc:	10c01217 	ldw	r3,72(r2)
 505efe0:	e0bffe17 	ldw	r2,-8(fp)
 505efe4:	1886703a 	and	r3,r3,r2
 505efe8:	e0bffc17 	ldw	r2,-16(fp)
 505efec:	10801117 	ldw	r2,68(r2)
 505eff0:	1884983a 	sll	r2,r3,r2
 505eff4:	e0fffb17 	ldw	r3,-20(fp)
 505eff8:	1885883a 	add	r2,r3,r2
 505effc:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 505f000:	e0bffc17 	ldw	r2,-16(fp)
 505f004:	10c01417 	ldw	r3,80(r2)
 505f008:	e0bfff17 	ldw	r2,-4(fp)
 505f00c:	1886703a 	and	r3,r3,r2
 505f010:	e0bffc17 	ldw	r2,-16(fp)
 505f014:	10801317 	ldw	r2,76(r2)
 505f018:	1884983a 	sll	r2,r3,r2
 505f01c:	e0fffb17 	ldw	r3,-20(fp)
 505f020:	1885883a 	add	r2,r3,r2
 505f024:	e0bffb15 	stw	r2,-20(fp)
 505f028:	00001706 	br	505f088 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 505f02c:	e0bffc17 	ldw	r2,-16(fp)
 505f030:	10c01217 	ldw	r3,72(r2)
 505f034:	e0bffe17 	ldw	r2,-8(fp)
 505f038:	1886703a 	and	r3,r3,r2
 505f03c:	e0bffc17 	ldw	r2,-16(fp)
 505f040:	10801117 	ldw	r2,68(r2)
 505f044:	1884983a 	sll	r2,r3,r2
 505f048:	e0fffb17 	ldw	r3,-20(fp)
 505f04c:	1885883a 	add	r2,r3,r2
 505f050:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 505f054:	e0bffc17 	ldw	r2,-16(fp)
 505f058:	10c01417 	ldw	r3,80(r2)
 505f05c:	e0bfff17 	ldw	r2,-4(fp)
 505f060:	1886703a 	and	r3,r3,r2
 505f064:	e0bffc17 	ldw	r2,-16(fp)
 505f068:	10800f17 	ldw	r2,60(r2)
 505f06c:	1887383a 	mul	r3,r3,r2
 505f070:	e0bffc17 	ldw	r2,-16(fp)
 505f074:	10801117 	ldw	r2,68(r2)
 505f078:	1884983a 	sll	r2,r3,r2
 505f07c:	e0fffb17 	ldw	r3,-20(fp)
 505f080:	1885883a 	add	r2,r3,r2
 505f084:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f088:	e0bffc17 	ldw	r2,-16(fp)
 505f08c:	10800e17 	ldw	r2,56(r2)
 505f090:	10800058 	cmpnei	r2,r2,1
 505f094:	1000081e 	bne	r2,zero,505f0b8 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 505f098:	e0bffc17 	ldw	r2,-16(fp)
 505f09c:	10c00c17 	ldw	r3,48(r2)
 505f0a0:	e0bffb17 	ldw	r2,-20(fp)
 505f0a4:	1885883a 	add	r2,r3,r2
 505f0a8:	1007883a 	mov	r3,r2
 505f0ac:	e0bffd17 	ldw	r2,-12(fp)
 505f0b0:	18800025 	stbio	r2,0(r3)
 505f0b4:	00001306 	br	505f104 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f0b8:	e0bffc17 	ldw	r2,-16(fp)
 505f0bc:	10800e17 	ldw	r2,56(r2)
 505f0c0:	10800098 	cmpnei	r2,r2,2
 505f0c4:	1000081e 	bne	r2,zero,505f0e8 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 505f0c8:	e0bffc17 	ldw	r2,-16(fp)
 505f0cc:	10c00c17 	ldw	r3,48(r2)
 505f0d0:	e0bffb17 	ldw	r2,-20(fp)
 505f0d4:	1885883a 	add	r2,r3,r2
 505f0d8:	1007883a 	mov	r3,r2
 505f0dc:	e0bffd17 	ldw	r2,-12(fp)
 505f0e0:	1880002d 	sthio	r2,0(r3)
 505f0e4:	00000706 	br	505f104 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 505f0e8:	e0bffc17 	ldw	r2,-16(fp)
 505f0ec:	10c00c17 	ldw	r3,48(r2)
 505f0f0:	e0bffb17 	ldw	r2,-20(fp)
 505f0f4:	1885883a 	add	r2,r3,r2
 505f0f8:	1007883a 	mov	r3,r2
 505f0fc:	e0bffd17 	ldw	r2,-12(fp)
 505f100:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 505f104:	0005883a 	mov	r2,zero
}
 505f108:	e037883a 	mov	sp,fp
 505f10c:	df000017 	ldw	fp,0(sp)
 505f110:	dec00104 	addi	sp,sp,4
 505f114:	f800283a 	ret

0505f118 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 505f118:	defffd04 	addi	sp,sp,-12
 505f11c:	df000215 	stw	fp,8(sp)
 505f120:	df000204 	addi	fp,sp,8
 505f124:	e13ffe15 	stw	r4,-8(fp)
 505f128:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 505f12c:	e0bffe17 	ldw	r2,-8(fp)
 505f130:	10800a17 	ldw	r2,40(r2)
 505f134:	10800104 	addi	r2,r2,4
 505f138:	1007883a 	mov	r3,r2
 505f13c:	e0bfff17 	ldw	r2,-4(fp)
 505f140:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 505f144:	e0bffe17 	ldw	r2,-8(fp)
 505f148:	10800a17 	ldw	r2,40(r2)
 505f14c:	10800104 	addi	r2,r2,4
 505f150:	10800037 	ldwio	r2,0(r2)
 505f154:	1007883a 	mov	r3,r2
 505f158:	e0bffe17 	ldw	r2,-8(fp)
 505f15c:	10c00c15 	stw	r3,48(r2)
	return 0;
 505f160:	0005883a 	mov	r2,zero
}
 505f164:	e037883a 	mov	sp,fp
 505f168:	df000017 	ldw	fp,0(sp)
 505f16c:	dec00104 	addi	sp,sp,4
 505f170:	f800283a 	ret

0505f174 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 505f174:	defffd04 	addi	sp,sp,-12
 505f178:	df000215 	stw	fp,8(sp)
 505f17c:	dc000115 	stw	r16,4(sp)
 505f180:	df000204 	addi	fp,sp,8
 505f184:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 505f188:	e0bffe17 	ldw	r2,-8(fp)
 505f18c:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 505f190:	e0bffe17 	ldw	r2,-8(fp)
 505f194:	10800a17 	ldw	r2,40(r2)
 505f198:	1007883a 	mov	r3,r2
 505f19c:	00800044 	movi	r2,1
 505f1a0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 505f1a4:	e0bffe17 	ldw	r2,-8(fp)
 505f1a8:	10c00b17 	ldw	r3,44(r2)
 505f1ac:	e0bffe17 	ldw	r2,-8(fp)
 505f1b0:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 505f1b4:	e0bffe17 	ldw	r2,-8(fp)
 505f1b8:	14000b15 	stw	r16,44(r2)
	return 0;
 505f1bc:	0005883a 	mov	r2,zero
}
 505f1c0:	e6ffff04 	addi	sp,fp,-4
 505f1c4:	df000117 	ldw	fp,4(sp)
 505f1c8:	dc000017 	ldw	r16,0(sp)
 505f1cc:	dec00204 	addi	sp,sp,8
 505f1d0:	f800283a 	ret

0505f1d4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 505f1d4:	defffe04 	addi	sp,sp,-8
 505f1d8:	df000115 	stw	fp,4(sp)
 505f1dc:	df000104 	addi	fp,sp,4
 505f1e0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 505f1e4:	e0bfff17 	ldw	r2,-4(fp)
 505f1e8:	10800a17 	ldw	r2,40(r2)
 505f1ec:	10800304 	addi	r2,r2,12
 505f1f0:	10800037 	ldwio	r2,0(r2)
 505f1f4:	1080004c 	andi	r2,r2,1
}
 505f1f8:	e037883a 	mov	sp,fp
 505f1fc:	df000017 	ldw	fp,0(sp)
 505f200:	dec00104 	addi	sp,sp,4
 505f204:	f800283a 	ret

0505f208 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 505f208:	defff704 	addi	sp,sp,-36
 505f20c:	df000815 	stw	fp,32(sp)
 505f210:	dd400715 	stw	r21,28(sp)
 505f214:	dd000615 	stw	r20,24(sp)
 505f218:	dcc00515 	stw	r19,20(sp)
 505f21c:	dc800415 	stw	r18,16(sp)
 505f220:	dc400315 	stw	r17,12(sp)
 505f224:	dc000215 	stw	r16,8(sp)
 505f228:	df000804 	addi	fp,sp,32
 505f22c:	e13ff815 	stw	r4,-32(fp)
 505f230:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 505f234:	e0bff917 	ldw	r2,-28(fp)
 505f238:	10800058 	cmpnei	r2,r2,1
 505f23c:	1000031e 	bne	r2,zero,505f24c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 505f240:	e0bff817 	ldw	r2,-32(fp)
 505f244:	14400c17 	ldw	r17,48(r2)
 505f248:	00000206 	br	505f254 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 505f24c:	e0bff817 	ldw	r2,-32(fp)
 505f250:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 505f254:	e0bff817 	ldw	r2,-32(fp)
 505f258:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f25c:	e0bff817 	ldw	r2,-32(fp)
 505f260:	10800e17 	ldw	r2,56(r2)
 505f264:	10800098 	cmpnei	r2,r2,2
 505f268:	1000031e 	bne	r2,zero,505f278 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 505f26c:	8405883a 	add	r2,r16,r16
 505f270:	1021883a 	mov	r16,r2
 505f274:	00000306 	br	505f284 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 505f278:	8405883a 	add	r2,r16,r16
 505f27c:	1085883a 	add	r2,r2,r2
 505f280:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 505f284:	e0bff817 	ldw	r2,-32(fp)
 505f288:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 505f28c:	e0bff817 	ldw	r2,-32(fp)
 505f290:	10800d17 	ldw	r2,52(r2)
 505f294:	1000111e 	bne	r2,zero,505f2dc <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 505f298:	e0bff817 	ldw	r2,-32(fp)
 505f29c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 505f2a0:	0029883a 	mov	r20,zero
 505f2a4:	00000b06 	br	505f2d4 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 505f2a8:	0027883a 	mov	r19,zero
 505f2ac:	00000406 	br	505f2c0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 505f2b0:	9c45883a 	add	r2,r19,r17
 505f2b4:	0007883a 	mov	r3,zero
 505f2b8:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 505f2bc:	9cc00104 	addi	r19,r19,4
 505f2c0:	9c3ffb36 	bltu	r19,r16,505f2b0 <_gp+0xffff3e88>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 505f2c4:	00800044 	movi	r2,1
 505f2c8:	1544983a 	sll	r2,r2,r21
 505f2cc:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 505f2d0:	a5000044 	addi	r20,r20,1
 505f2d4:	a4bff436 	bltu	r20,r18,505f2a8 <_gp+0xffff3e80>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 505f2d8:	00000a06 	br	505f304 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 505f2dc:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 505f2e0:	0021883a 	mov	r16,zero
 505f2e4:	00000506 	br	505f2fc <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 505f2e8:	8005883a 	mov	r2,r16
 505f2ec:	1445883a 	add	r2,r2,r17
 505f2f0:	0007883a 	mov	r3,zero
 505f2f4:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 505f2f8:	84000104 	addi	r16,r16,4
 505f2fc:	8005883a 	mov	r2,r16
 505f300:	14bff936 	bltu	r2,r18,505f2e8 <_gp+0xffff3ec0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 505f304:	0001883a 	nop
 505f308:	e6fffa04 	addi	sp,fp,-24
 505f30c:	df000617 	ldw	fp,24(sp)
 505f310:	dd400517 	ldw	r21,20(sp)
 505f314:	dd000417 	ldw	r20,16(sp)
 505f318:	dcc00317 	ldw	r19,12(sp)
 505f31c:	dc800217 	ldw	r18,8(sp)
 505f320:	dc400117 	ldw	r17,4(sp)
 505f324:	dc000017 	ldw	r16,0(sp)
 505f328:	dec00704 	addi	sp,sp,28
 505f32c:	f800283a 	ret

0505f330 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 505f330:	defff304 	addi	sp,sp,-52
 505f334:	df000c15 	stw	fp,48(sp)
 505f338:	ddc00b15 	stw	r23,44(sp)
 505f33c:	dd800a15 	stw	r22,40(sp)
 505f340:	dd400915 	stw	r21,36(sp)
 505f344:	dd000815 	stw	r20,32(sp)
 505f348:	dcc00715 	stw	r19,28(sp)
 505f34c:	dc800615 	stw	r18,24(sp)
 505f350:	dc400515 	stw	r17,20(sp)
 505f354:	dc000415 	stw	r16,16(sp)
 505f358:	df000c04 	addi	fp,sp,48
 505f35c:	e13ff415 	stw	r4,-48(fp)
 505f360:	e17ff515 	stw	r5,-44(fp)
 505f364:	e1bff615 	stw	r6,-40(fp)
 505f368:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 505f36c:	e0bff417 	ldw	r2,-48(fp)
 505f370:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 505f374:	e0bff417 	ldw	r2,-48(fp)
 505f378:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 505f37c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 505f380:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 505f384:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 505f388:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 505f38c:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 505f390:	a580032e 	bgeu	r20,r22,505f3a0 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 505f394:	b02b883a 	mov	r21,r22
		l_x = r_x;
 505f398:	a02d883a 	mov	r22,r20
		r_x = temp;
 505f39c:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 505f3a0:	9c40032e 	bgeu	r19,r17,505f3b0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 505f3a4:	882b883a 	mov	r21,r17
		t_y = b_y;
 505f3a8:	9823883a 	mov	r17,r19
		b_y = temp;
 505f3ac:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 505f3b0:	b480892e 	bgeu	r22,r18,505f5d8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 505f3b4:	8c00882e 	bgeu	r17,r16,505f5d8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 505f3b8:	a4800136 	bltu	r20,r18,505f3c0 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 505f3bc:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 505f3c0:	9c000136 	bltu	r19,r16,505f3c8 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 505f3c4:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 505f3c8:	e0800317 	ldw	r2,12(fp)
 505f3cc:	10800058 	cmpnei	r2,r2,1
 505f3d0:	1000031e 	bne	r2,zero,505f3e0 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 505f3d4:	e0bff417 	ldw	r2,-48(fp)
 505f3d8:	14000c17 	ldw	r16,48(r2)
 505f3dc:	00000206 	br	505f3e8 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 505f3e0:	e0bff417 	ldw	r2,-48(fp)
 505f3e4:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 505f3e8:	e0bff417 	ldw	r2,-48(fp)
 505f3ec:	10800d17 	ldw	r2,52(r2)
 505f3f0:	10003c1e 	bne	r2,zero,505f4e4 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 505f3f4:	e0bff417 	ldw	r2,-48(fp)
 505f3f8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 505f3fc:	8d44983a 	sll	r2,r17,r21
 505f400:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f404:	e0bff417 	ldw	r2,-48(fp)
 505f408:	10800e17 	ldw	r2,56(r2)
 505f40c:	10800058 	cmpnei	r2,r2,1
 505f410:	10000f1e 	bne	r2,zero,505f450 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 505f414:	8825883a 	mov	r18,r17
 505f418:	00000b06 	br	505f448 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 505f41c:	b023883a 	mov	r17,r22
 505f420:	00000406 	br	505f434 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 505f424:	8c05883a 	add	r2,r17,r16
 505f428:	b807883a 	mov	r3,r23
 505f42c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f430:	8c400044 	addi	r17,r17,1
 505f434:	a47ffb2e 	bgeu	r20,r17,505f424 <_gp+0xffff3ffc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 505f438:	00800044 	movi	r2,1
 505f43c:	1544983a 	sll	r2,r2,r21
 505f440:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 505f444:	94800044 	addi	r18,r18,1
 505f448:	9cbff42e 	bgeu	r19,r18,505f41c <_gp+0xffff3ff4>
 505f44c:	00006306 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f450:	e0bff417 	ldw	r2,-48(fp)
 505f454:	10800e17 	ldw	r2,56(r2)
 505f458:	10800098 	cmpnei	r2,r2,2
 505f45c:	1000101e 	bne	r2,zero,505f4a0 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 505f460:	8825883a 	mov	r18,r17
 505f464:	00000c06 	br	505f498 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 505f468:	b023883a 	mov	r17,r22
 505f46c:	00000506 	br	505f484 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 505f470:	8c45883a 	add	r2,r17,r17
 505f474:	1405883a 	add	r2,r2,r16
 505f478:	b807883a 	mov	r3,r23
 505f47c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f480:	8c400044 	addi	r17,r17,1
 505f484:	a47ffa2e 	bgeu	r20,r17,505f470 <_gp+0xffff4048>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 505f488:	00800044 	movi	r2,1
 505f48c:	1544983a 	sll	r2,r2,r21
 505f490:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 505f494:	94800044 	addi	r18,r18,1
 505f498:	9cbff32e 	bgeu	r19,r18,505f468 <_gp+0xffff4040>
 505f49c:	00004f06 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 505f4a0:	8825883a 	mov	r18,r17
 505f4a4:	00000d06 	br	505f4dc <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 505f4a8:	b023883a 	mov	r17,r22
 505f4ac:	00000606 	br	505f4c8 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 505f4b0:	8c45883a 	add	r2,r17,r17
 505f4b4:	1085883a 	add	r2,r2,r2
 505f4b8:	1405883a 	add	r2,r2,r16
 505f4bc:	b807883a 	mov	r3,r23
 505f4c0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f4c4:	8c400044 	addi	r17,r17,1
 505f4c8:	a47ff92e 	bgeu	r20,r17,505f4b0 <_gp+0xffff4088>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 505f4cc:	00800044 	movi	r2,1
 505f4d0:	1544983a 	sll	r2,r2,r21
 505f4d4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 505f4d8:	94800044 	addi	r18,r18,1
 505f4dc:	9cbff22e 	bgeu	r19,r18,505f4a8 <_gp+0xffff4080>
 505f4e0:	00003e06 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f4e4:	e0bff417 	ldw	r2,-48(fp)
 505f4e8:	10800e17 	ldw	r2,56(r2)
 505f4ec:	10800058 	cmpnei	r2,r2,1
 505f4f0:	10000f1e 	bne	r2,zero,505f530 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 505f4f4:	8c85383a 	mul	r2,r17,r18
 505f4f8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505f4fc:	882b883a 	mov	r21,r17
 505f500:	00000906 	br	505f528 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 505f504:	b023883a 	mov	r17,r22
 505f508:	00000406 	br	505f51c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 505f50c:	8c05883a 	add	r2,r17,r16
 505f510:	b807883a 	mov	r3,r23
 505f514:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f518:	8c400044 	addi	r17,r17,1
 505f51c:	a47ffb2e 	bgeu	r20,r17,505f50c <_gp+0xffff40e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 505f520:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505f524:	ad400044 	addi	r21,r21,1
 505f528:	9d7ff62e 	bgeu	r19,r21,505f504 <_gp+0xffff40dc>
 505f52c:	00002b06 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f530:	e0bff417 	ldw	r2,-48(fp)
 505f534:	10800e17 	ldw	r2,56(r2)
 505f538:	10800098 	cmpnei	r2,r2,2
 505f53c:	1000121e 	bne	r2,zero,505f588 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 505f540:	9485883a 	add	r2,r18,r18
 505f544:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 505f548:	8c85383a 	mul	r2,r17,r18
 505f54c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505f550:	882b883a 	mov	r21,r17
 505f554:	00000a06 	br	505f580 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 505f558:	b023883a 	mov	r17,r22
 505f55c:	00000506 	br	505f574 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 505f560:	8c45883a 	add	r2,r17,r17
 505f564:	1405883a 	add	r2,r2,r16
 505f568:	b807883a 	mov	r3,r23
 505f56c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f570:	8c400044 	addi	r17,r17,1
 505f574:	a47ffa2e 	bgeu	r20,r17,505f560 <_gp+0xffff4138>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 505f578:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505f57c:	ad400044 	addi	r21,r21,1
 505f580:	9d7ff52e 	bgeu	r19,r21,505f558 <_gp+0xffff4130>
 505f584:	00001506 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 505f588:	9485883a 	add	r2,r18,r18
 505f58c:	1085883a 	add	r2,r2,r2
 505f590:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 505f594:	8c85383a 	mul	r2,r17,r18
 505f598:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505f59c:	882b883a 	mov	r21,r17
 505f5a0:	00000b06 	br	505f5d0 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 505f5a4:	b023883a 	mov	r17,r22
 505f5a8:	00000606 	br	505f5c4 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 505f5ac:	8c45883a 	add	r2,r17,r17
 505f5b0:	1085883a 	add	r2,r2,r2
 505f5b4:	1405883a 	add	r2,r2,r16
 505f5b8:	b807883a 	mov	r3,r23
 505f5bc:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 505f5c0:	8c400044 	addi	r17,r17,1
 505f5c4:	a47ff92e 	bgeu	r20,r17,505f5ac <_gp+0xffff4184>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 505f5c8:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505f5cc:	ad400044 	addi	r21,r21,1
 505f5d0:	9d7ff42e 	bgeu	r19,r21,505f5a4 <_gp+0xffff417c>
 505f5d4:	00000106 	br	505f5dc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 505f5d8:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 505f5dc:	e6fff804 	addi	sp,fp,-32
 505f5e0:	df000817 	ldw	fp,32(sp)
 505f5e4:	ddc00717 	ldw	r23,28(sp)
 505f5e8:	dd800617 	ldw	r22,24(sp)
 505f5ec:	dd400517 	ldw	r21,20(sp)
 505f5f0:	dd000417 	ldw	r20,16(sp)
 505f5f4:	dcc00317 	ldw	r19,12(sp)
 505f5f8:	dc800217 	ldw	r18,8(sp)
 505f5fc:	dc400117 	ldw	r17,4(sp)
 505f600:	dc000017 	ldw	r16,0(sp)
 505f604:	dec00904 	addi	sp,sp,36
 505f608:	f800283a 	ret

0505f60c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 505f60c:	defff404 	addi	sp,sp,-48
 505f610:	df000b15 	stw	fp,44(sp)
 505f614:	dd800a15 	stw	r22,40(sp)
 505f618:	dd400915 	stw	r21,36(sp)
 505f61c:	dd000815 	stw	r20,32(sp)
 505f620:	dcc00715 	stw	r19,28(sp)
 505f624:	dc800615 	stw	r18,24(sp)
 505f628:	dc400515 	stw	r17,20(sp)
 505f62c:	dc000415 	stw	r16,16(sp)
 505f630:	df000b04 	addi	fp,sp,44
 505f634:	e13ff515 	stw	r4,-44(fp)
 505f638:	e17ff615 	stw	r5,-40(fp)
 505f63c:	e1bff715 	stw	r6,-36(fp)
 505f640:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 505f644:	e0bff517 	ldw	r2,-44(fp)
 505f648:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 505f64c:	e0bff517 	ldw	r2,-44(fp)
 505f650:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 505f654:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 505f658:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 505f65c:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 505f660:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 505f664:	9c40032e 	bgeu	r19,r17,505f674 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 505f668:	882d883a 	mov	r22,r17
		l_x = r_x;
 505f66c:	9823883a 	mov	r17,r19
		r_x = temp;
 505f670:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 505f674:	8c805d2e 	bgeu	r17,r18,505f7ec <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 505f678:	a4005c2e 	bgeu	r20,r16,505f7ec <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 505f67c:	9c800136 	bltu	r19,r18,505f684 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 505f680:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 505f684:	e0800217 	ldw	r2,8(fp)
 505f688:	10800058 	cmpnei	r2,r2,1
 505f68c:	1000031e 	bne	r2,zero,505f69c <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 505f690:	e0bff517 	ldw	r2,-44(fp)
 505f694:	14000c17 	ldw	r16,48(r2)
 505f698:	00000206 	br	505f6a4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 505f69c:	e0bff517 	ldw	r2,-44(fp)
 505f6a0:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 505f6a4:	e0bff517 	ldw	r2,-44(fp)
 505f6a8:	10800d17 	ldw	r2,52(r2)
 505f6ac:	1000231e 	bne	r2,zero,505f73c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 505f6b0:	e0bff517 	ldw	r2,-44(fp)
 505f6b4:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 505f6b8:	a484983a 	sll	r2,r20,r18
 505f6bc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f6c0:	e0bff517 	ldw	r2,-44(fp)
 505f6c4:	10800e17 	ldw	r2,56(r2)
 505f6c8:	10800058 	cmpnei	r2,r2,1
 505f6cc:	1000071e 	bne	r2,zero,505f6ec <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 505f6d0:	00000406 	br	505f6e4 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 505f6d4:	8c05883a 	add	r2,r17,r16
 505f6d8:	a807883a 	mov	r3,r21
 505f6dc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 505f6e0:	8c400044 	addi	r17,r17,1
 505f6e4:	9c7ffb2e 	bgeu	r19,r17,505f6d4 <_gp+0xffff42ac>
 505f6e8:	00004106 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f6ec:	e0bff517 	ldw	r2,-44(fp)
 505f6f0:	10800e17 	ldw	r2,56(r2)
 505f6f4:	10800098 	cmpnei	r2,r2,2
 505f6f8:	10000e1e 	bne	r2,zero,505f734 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 505f6fc:	00000506 	br	505f714 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 505f700:	8c45883a 	add	r2,r17,r17
 505f704:	1405883a 	add	r2,r2,r16
 505f708:	a807883a 	mov	r3,r21
 505f70c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 505f710:	8c400044 	addi	r17,r17,1
 505f714:	9c7ffa2e 	bgeu	r19,r17,505f700 <_gp+0xffff42d8>
 505f718:	00003506 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 505f71c:	8c45883a 	add	r2,r17,r17
 505f720:	1085883a 	add	r2,r2,r2
 505f724:	1405883a 	add	r2,r2,r16
 505f728:	a807883a 	mov	r3,r21
 505f72c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 505f730:	8c400044 	addi	r17,r17,1
 505f734:	9c7ff92e 	bgeu	r19,r17,505f71c <_gp+0xffff42f4>
 505f738:	00002d06 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f73c:	e0bff517 	ldw	r2,-44(fp)
 505f740:	10800e17 	ldw	r2,56(r2)
 505f744:	10800058 	cmpnei	r2,r2,1
 505f748:	1000091e 	bne	r2,zero,505f770 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 505f74c:	a485383a 	mul	r2,r20,r18
 505f750:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 505f754:	00000406 	br	505f768 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 505f758:	8c05883a 	add	r2,r17,r16
 505f75c:	a807883a 	mov	r3,r21
 505f760:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 505f764:	8c400044 	addi	r17,r17,1
 505f768:	9c7ffb2e 	bgeu	r19,r17,505f758 <_gp+0xffff4330>
 505f76c:	00002006 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f770:	e0bff517 	ldw	r2,-44(fp)
 505f774:	10800e17 	ldw	r2,56(r2)
 505f778:	10800098 	cmpnei	r2,r2,2
 505f77c:	10000c1e 	bne	r2,zero,505f7b0 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 505f780:	9485883a 	add	r2,r18,r18
 505f784:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 505f788:	a485383a 	mul	r2,r20,r18
 505f78c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 505f790:	00000506 	br	505f7a8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 505f794:	8c45883a 	add	r2,r17,r17
 505f798:	1405883a 	add	r2,r2,r16
 505f79c:	a807883a 	mov	r3,r21
 505f7a0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 505f7a4:	8c400044 	addi	r17,r17,1
 505f7a8:	9c7ffa2e 	bgeu	r19,r17,505f794 <_gp+0xffff436c>
 505f7ac:	00001006 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 505f7b0:	9485883a 	add	r2,r18,r18
 505f7b4:	1085883a 	add	r2,r2,r2
 505f7b8:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 505f7bc:	a485383a 	mul	r2,r20,r18
 505f7c0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 505f7c4:	00000606 	br	505f7e0 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 505f7c8:	8c45883a 	add	r2,r17,r17
 505f7cc:	1085883a 	add	r2,r2,r2
 505f7d0:	1405883a 	add	r2,r2,r16
 505f7d4:	a807883a 	mov	r3,r21
 505f7d8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 505f7dc:	8c400044 	addi	r17,r17,1
 505f7e0:	9c7ff92e 	bgeu	r19,r17,505f7c8 <_gp+0xffff43a0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 505f7e4:	84a1883a 	add	r16,r16,r18
 505f7e8:	00000106 	br	505f7f0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 505f7ec:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 505f7f0:	e6fff904 	addi	sp,fp,-28
 505f7f4:	df000717 	ldw	fp,28(sp)
 505f7f8:	dd800617 	ldw	r22,24(sp)
 505f7fc:	dd400517 	ldw	r21,20(sp)
 505f800:	dd000417 	ldw	r20,16(sp)
 505f804:	dcc00317 	ldw	r19,12(sp)
 505f808:	dc800217 	ldw	r18,8(sp)
 505f80c:	dc400117 	ldw	r17,4(sp)
 505f810:	dc000017 	ldw	r16,0(sp)
 505f814:	dec00804 	addi	sp,sp,32
 505f818:	f800283a 	ret

0505f81c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 505f81c:	defff404 	addi	sp,sp,-48
 505f820:	df000b15 	stw	fp,44(sp)
 505f824:	dd800a15 	stw	r22,40(sp)
 505f828:	dd400915 	stw	r21,36(sp)
 505f82c:	dd000815 	stw	r20,32(sp)
 505f830:	dcc00715 	stw	r19,28(sp)
 505f834:	dc800615 	stw	r18,24(sp)
 505f838:	dc400515 	stw	r17,20(sp)
 505f83c:	dc000415 	stw	r16,16(sp)
 505f840:	df000b04 	addi	fp,sp,44
 505f844:	e13ff515 	stw	r4,-44(fp)
 505f848:	e17ff615 	stw	r5,-40(fp)
 505f84c:	e1bff715 	stw	r6,-36(fp)
 505f850:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 505f854:	e0bff517 	ldw	r2,-44(fp)
 505f858:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 505f85c:	e0bff517 	ldw	r2,-44(fp)
 505f860:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 505f864:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 505f868:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 505f86c:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 505f870:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 505f874:	9d00032e 	bgeu	r19,r20,505f884 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 505f878:	a02b883a 	mov	r21,r20
		t_y = b_y;
 505f87c:	9829883a 	mov	r20,r19
		b_y = temp;
 505f880:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 505f884:	94406c2e 	bgeu	r18,r17,505fa38 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 505f888:	a4006b2e 	bgeu	r20,r16,505fa38 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 505f88c:	9c000136 	bltu	r19,r16,505f894 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 505f890:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 505f894:	e0800217 	ldw	r2,8(fp)
 505f898:	10800058 	cmpnei	r2,r2,1
 505f89c:	1000031e 	bne	r2,zero,505f8ac <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 505f8a0:	e0bff517 	ldw	r2,-44(fp)
 505f8a4:	14000c17 	ldw	r16,48(r2)
 505f8a8:	00000206 	br	505f8b4 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 505f8ac:	e0bff517 	ldw	r2,-44(fp)
 505f8b0:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 505f8b4:	e0bff517 	ldw	r2,-44(fp)
 505f8b8:	10800d17 	ldw	r2,52(r2)
 505f8bc:	1000301e 	bne	r2,zero,505f980 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 505f8c0:	e0bff517 	ldw	r2,-44(fp)
 505f8c4:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 505f8c8:	a544983a 	sll	r2,r20,r21
 505f8cc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f8d0:	e0bff517 	ldw	r2,-44(fp)
 505f8d4:	10800e17 	ldw	r2,56(r2)
 505f8d8:	10800058 	cmpnei	r2,r2,1
 505f8dc:	10000b1e 	bne	r2,zero,505f90c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 505f8e0:	a023883a 	mov	r17,r20
 505f8e4:	00000706 	br	505f904 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 505f8e8:	9405883a 	add	r2,r18,r16
 505f8ec:	b007883a 	mov	r3,r22
 505f8f0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 505f8f4:	00800044 	movi	r2,1
 505f8f8:	1544983a 	sll	r2,r2,r21
 505f8fc:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 505f900:	8c400044 	addi	r17,r17,1
 505f904:	9c7ff82e 	bgeu	r19,r17,505f8e8 <_gp+0xffff44c0>
 505f908:	00004c06 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f90c:	e0bff517 	ldw	r2,-44(fp)
 505f910:	10800e17 	ldw	r2,56(r2)
 505f914:	10800098 	cmpnei	r2,r2,2
 505f918:	10000c1e 	bne	r2,zero,505f94c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 505f91c:	a023883a 	mov	r17,r20
 505f920:	00000806 	br	505f944 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 505f924:	9485883a 	add	r2,r18,r18
 505f928:	1405883a 	add	r2,r2,r16
 505f92c:	b007883a 	mov	r3,r22
 505f930:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 505f934:	00800044 	movi	r2,1
 505f938:	1544983a 	sll	r2,r2,r21
 505f93c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 505f940:	8c400044 	addi	r17,r17,1
 505f944:	9c7ff72e 	bgeu	r19,r17,505f924 <_gp+0xffff44fc>
 505f948:	00003c06 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 505f94c:	a023883a 	mov	r17,r20
 505f950:	00000906 	br	505f978 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 505f954:	9485883a 	add	r2,r18,r18
 505f958:	1085883a 	add	r2,r2,r2
 505f95c:	1405883a 	add	r2,r2,r16
 505f960:	b007883a 	mov	r3,r22
 505f964:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 505f968:	00800044 	movi	r2,1
 505f96c:	1544983a 	sll	r2,r2,r21
 505f970:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 505f974:	8c400044 	addi	r17,r17,1
 505f978:	9c7ff62e 	bgeu	r19,r17,505f954 <_gp+0xffff452c>
 505f97c:	00002f06 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 505f980:	e0bff517 	ldw	r2,-44(fp)
 505f984:	10800e17 	ldw	r2,56(r2)
 505f988:	10800058 	cmpnei	r2,r2,1
 505f98c:	10000a1e 	bne	r2,zero,505f9b8 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 505f990:	a445383a 	mul	r2,r20,r17
 505f994:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505f998:	00000506 	br	505f9b0 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 505f99c:	9405883a 	add	r2,r18,r16
 505f9a0:	b007883a 	mov	r3,r22
 505f9a4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 505f9a8:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505f9ac:	a5000044 	addi	r20,r20,1
 505f9b0:	9d3ffa2e 	bgeu	r19,r20,505f99c <_gp+0xffff4574>
 505f9b4:	00002106 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 505f9b8:	e0bff517 	ldw	r2,-44(fp)
 505f9bc:	10800e17 	ldw	r2,56(r2)
 505f9c0:	10800098 	cmpnei	r2,r2,2
 505f9c4:	10000d1e 	bne	r2,zero,505f9fc <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 505f9c8:	8c45883a 	add	r2,r17,r17
 505f9cc:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 505f9d0:	a445383a 	mul	r2,r20,r17
 505f9d4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505f9d8:	00000606 	br	505f9f4 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 505f9dc:	9485883a 	add	r2,r18,r18
 505f9e0:	1405883a 	add	r2,r2,r16
 505f9e4:	b007883a 	mov	r3,r22
 505f9e8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 505f9ec:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505f9f0:	a5000044 	addi	r20,r20,1
 505f9f4:	9d3ff92e 	bgeu	r19,r20,505f9dc <_gp+0xffff45b4>
 505f9f8:	00001006 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 505f9fc:	8c45883a 	add	r2,r17,r17
 505fa00:	1085883a 	add	r2,r2,r2
 505fa04:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 505fa08:	a445383a 	mul	r2,r20,r17
 505fa0c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 505fa10:	00000706 	br	505fa30 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 505fa14:	9485883a 	add	r2,r18,r18
 505fa18:	1085883a 	add	r2,r2,r2
 505fa1c:	1405883a 	add	r2,r2,r16
 505fa20:	b007883a 	mov	r3,r22
 505fa24:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 505fa28:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 505fa2c:	a5000044 	addi	r20,r20,1
 505fa30:	9d3ff82e 	bgeu	r19,r20,505fa14 <_gp+0xffff45ec>
 505fa34:	00000106 	br	505fa3c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 505fa38:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 505fa3c:	e6fff904 	addi	sp,fp,-28
 505fa40:	df000717 	ldw	fp,28(sp)
 505fa44:	dd800617 	ldw	r22,24(sp)
 505fa48:	dd400517 	ldw	r21,20(sp)
 505fa4c:	dd000417 	ldw	r20,16(sp)
 505fa50:	dcc00317 	ldw	r19,12(sp)
 505fa54:	dc800217 	ldw	r18,8(sp)
 505fa58:	dc400117 	ldw	r17,4(sp)
 505fa5c:	dc000017 	ldw	r16,0(sp)
 505fa60:	dec00804 	addi	sp,sp,32
 505fa64:	f800283a 	ret

0505fa68 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 505fa68:	defff804 	addi	sp,sp,-32
 505fa6c:	dfc00715 	stw	ra,28(sp)
 505fa70:	df000615 	stw	fp,24(sp)
 505fa74:	df000604 	addi	fp,sp,24
 505fa78:	e13ffc15 	stw	r4,-16(fp)
 505fa7c:	e17ffd15 	stw	r5,-12(fp)
 505fa80:	e1bffe15 	stw	r6,-8(fp)
 505fa84:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 505fa88:	e0800417 	ldw	r2,16(fp)
 505fa8c:	d8800115 	stw	r2,4(sp)
 505fa90:	e0800317 	ldw	r2,12(fp)
 505fa94:	d8800015 	stw	r2,0(sp)
 505fa98:	e1fffe17 	ldw	r7,-8(fp)
 505fa9c:	e1bfff17 	ldw	r6,-4(fp)
 505faa0:	e17ffd17 	ldw	r5,-12(fp)
 505faa4:	e13ffc17 	ldw	r4,-16(fp)
 505faa8:	505f60c0 	call	505f60c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 505faac:	e0800417 	ldw	r2,16(fp)
 505fab0:	d8800115 	stw	r2,4(sp)
 505fab4:	e0800317 	ldw	r2,12(fp)
 505fab8:	d8800015 	stw	r2,0(sp)
 505fabc:	e1c00217 	ldw	r7,8(fp)
 505fac0:	e1bfff17 	ldw	r6,-4(fp)
 505fac4:	e17ffd17 	ldw	r5,-12(fp)
 505fac8:	e13ffc17 	ldw	r4,-16(fp)
 505facc:	505f60c0 	call	505f60c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 505fad0:	e0800417 	ldw	r2,16(fp)
 505fad4:	d8800115 	stw	r2,4(sp)
 505fad8:	e0800317 	ldw	r2,12(fp)
 505fadc:	d8800015 	stw	r2,0(sp)
 505fae0:	e1c00217 	ldw	r7,8(fp)
 505fae4:	e1bffe17 	ldw	r6,-8(fp)
 505fae8:	e17ffd17 	ldw	r5,-12(fp)
 505faec:	e13ffc17 	ldw	r4,-16(fp)
 505faf0:	505f81c0 	call	505f81c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 505faf4:	e0800417 	ldw	r2,16(fp)
 505faf8:	d8800115 	stw	r2,4(sp)
 505fafc:	e0800317 	ldw	r2,12(fp)
 505fb00:	d8800015 	stw	r2,0(sp)
 505fb04:	e1c00217 	ldw	r7,8(fp)
 505fb08:	e1bffe17 	ldw	r6,-8(fp)
 505fb0c:	e17fff17 	ldw	r5,-4(fp)
 505fb10:	e13ffc17 	ldw	r4,-16(fp)
 505fb14:	505f81c0 	call	505f81c <alt_up_pixel_buffer_dma_draw_vline>
}
 505fb18:	0001883a 	nop
 505fb1c:	e037883a 	mov	sp,fp
 505fb20:	dfc00117 	ldw	ra,4(sp)
 505fb24:	df000017 	ldw	fp,0(sp)
 505fb28:	dec00204 	addi	sp,sp,8
 505fb2c:	f800283a 	ret

0505fb30 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 505fb30:	deffff04 	addi	sp,sp,-4
 505fb34:	df000015 	stw	fp,0(sp)
 505fb38:	d839883a 	mov	fp,sp
 505fb3c:	2005883a 	mov	r2,r4
 505fb40:	3007883a 	mov	r3,r6
 505fb44:	3809883a 	mov	r4,r7
 505fb48:	e1800117 	ldw	r6,4(fp)
 505fb4c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 505fb50:	3800051e 	bne	r7,zero,505fb68 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 505fb54:	2909383a 	mul	r4,r5,r4
 505fb58:	20c7883a 	add	r3,r4,r3
 505fb5c:	1885883a 	add	r2,r3,r2
 505fb60:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 505fb64:	00000e06 	br	505fba0 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 505fb68:	39c00058 	cmpnei	r7,r7,1
 505fb6c:	3800061e 	bne	r7,zero,505fb88 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 505fb70:	2909383a 	mul	r4,r5,r4
 505fb74:	20c7883a 	add	r3,r4,r3
 505fb78:	18c7883a 	add	r3,r3,r3
 505fb7c:	1885883a 	add	r2,r3,r2
 505fb80:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 505fb84:	00000606 	br	505fba0 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 505fb88:	2909383a 	mul	r4,r5,r4
 505fb8c:	20c7883a 	add	r3,r4,r3
 505fb90:	18c7883a 	add	r3,r3,r3
 505fb94:	18c7883a 	add	r3,r3,r3
 505fb98:	1885883a 	add	r2,r3,r2
 505fb9c:	11800035 	stwio	r6,0(r2)
}
 505fba0:	0001883a 	nop
 505fba4:	e037883a 	mov	sp,fp
 505fba8:	df000017 	ldw	fp,0(sp)
 505fbac:	dec00104 	addi	sp,sp,4
 505fbb0:	f800283a 	ret

0505fbb4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 505fbb4:	deffeb04 	addi	sp,sp,-84
 505fbb8:	dfc01415 	stw	ra,80(sp)
 505fbbc:	df001315 	stw	fp,76(sp)
 505fbc0:	ddc01215 	stw	r23,72(sp)
 505fbc4:	dd801115 	stw	r22,68(sp)
 505fbc8:	dd401015 	stw	r21,64(sp)
 505fbcc:	dd000f15 	stw	r20,60(sp)
 505fbd0:	dcc00e15 	stw	r19,56(sp)
 505fbd4:	dc800d15 	stw	r18,52(sp)
 505fbd8:	dc400c15 	stw	r17,48(sp)
 505fbdc:	dc000b15 	stw	r16,44(sp)
 505fbe0:	df001304 	addi	fp,sp,76
 505fbe4:	e13fef15 	stw	r4,-68(fp)
 505fbe8:	e17ff015 	stw	r5,-64(fp)
 505fbec:	e1bff115 	stw	r6,-60(fp)
 505fbf0:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 505fbf4:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 505fbf8:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 505fbfc:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 505fc00:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 505fc04:	a4c5c83a 	sub	r2,r20,r19
 505fc08:	1000010e 	bge	r2,zero,505fc10 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 505fc0c:	0085c83a 	sub	r2,zero,r2
 505fc10:	1007883a 	mov	r3,r2
 505fc14:	9445c83a 	sub	r2,r18,r17
 505fc18:	1000010e 	bge	r2,zero,505fc20 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 505fc1c:	0085c83a 	sub	r2,zero,r2
 505fc20:	10c4803a 	cmplt	r2,r2,r3
 505fc24:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 505fc28:	e0bfef17 	ldw	r2,-68(fp)
 505fc2c:	10800e17 	ldw	r2,56(r2)
 505fc30:	10800060 	cmpeqi	r2,r2,1
 505fc34:	1000081e 	bne	r2,zero,505fc58 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 505fc38:	e0bfef17 	ldw	r2,-68(fp)
 505fc3c:	10800e17 	ldw	r2,56(r2)
 505fc40:	10800098 	cmpnei	r2,r2,2
 505fc44:	1000021e 	bne	r2,zero,505fc50 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 505fc48:	00800044 	movi	r2,1
 505fc4c:	00000306 	br	505fc5c <alt_up_pixel_buffer_dma_draw_line+0xa8>
 505fc50:	00800084 	movi	r2,2
 505fc54:	00000106 	br	505fc5c <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 505fc58:	0005883a 	mov	r2,zero
 505fc5c:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 505fc60:	e0800317 	ldw	r2,12(fp)
 505fc64:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 505fc68:	e0bfef17 	ldw	r2,-68(fp)
 505fc6c:	10800d17 	ldw	r2,52(r2)
 505fc70:	1000071e 	bne	r2,zero,505fc90 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 505fc74:	e0bfef17 	ldw	r2,-68(fp)
 505fc78:	10801317 	ldw	r2,76(r2)
 505fc7c:	e0fff417 	ldw	r3,-48(fp)
 505fc80:	10c5c83a 	sub	r2,r2,r3
 505fc84:	00c00044 	movi	r3,1
 505fc88:	1884983a 	sll	r2,r3,r2
 505fc8c:	00000206 	br	505fc98 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 505fc90:	e0bfef17 	ldw	r2,-68(fp)
 505fc94:	10800f17 	ldw	r2,60(r2)
 505fc98:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 505fc9c:	e0800417 	ldw	r2,16(fp)
 505fca0:	10800058 	cmpnei	r2,r2,1
 505fca4:	1000031e 	bne	r2,zero,505fcb4 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 505fca8:	e0bfef17 	ldw	r2,-68(fp)
 505fcac:	15c00c17 	ldw	r23,48(r2)
 505fcb0:	00000206 	br	505fcbc <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 505fcb4:	e0bfef17 	ldw	r2,-68(fp)
 505fcb8:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 505fcbc:	e0bff307 	ldb	r2,-52(fp)
 505fcc0:	0080060e 	bge	zero,r2,505fcdc <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 505fcc4:	8821883a 	mov	r16,r17
		x_0 = y_0;
 505fcc8:	9823883a 	mov	r17,r19
		y_0 = error;
 505fccc:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 505fcd0:	9021883a 	mov	r16,r18
		x_1 = y_1;
 505fcd4:	a025883a 	mov	r18,r20
		y_1 = error;
 505fcd8:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 505fcdc:	9440060e 	bge	r18,r17,505fcf8 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 505fce0:	8821883a 	mov	r16,r17
		x_0 = x_1;
 505fce4:	9023883a 	mov	r17,r18
		x_1 = error;
 505fce8:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 505fcec:	9821883a 	mov	r16,r19
		y_0 = y_1;
 505fcf0:	a027883a 	mov	r19,r20
		y_1 = error;
 505fcf4:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 505fcf8:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 505fcfc:	a4c5c83a 	sub	r2,r20,r19
 505fd00:	1000010e 	bge	r2,zero,505fd08 <alt_up_pixel_buffer_dma_draw_line+0x154>
 505fd04:	0085c83a 	sub	r2,zero,r2
 505fd08:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 505fd0c:	a804d7fa 	srli	r2,r21,31
 505fd10:	1545883a 	add	r2,r2,r21
 505fd14:	1005d07a 	srai	r2,r2,1
 505fd18:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 505fd1c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 505fd20:	9d00020e 	bge	r19,r20,505fd2c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 505fd24:	04c00044 	movi	r19,1
 505fd28:	00000106 	br	505fd30 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 505fd2c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 505fd30:	e0bff307 	ldb	r2,-52(fp)
 505fd34:	10800058 	cmpnei	r2,r2,1
 505fd38:	1000211e 	bne	r2,zero,505fdc0 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 505fd3c:	00000f06 	br	505fd7c <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 505fd40:	e0bff417 	ldw	r2,-48(fp)
 505fd44:	d8800115 	stw	r2,4(sp)
 505fd48:	e0bff517 	ldw	r2,-44(fp)
 505fd4c:	d8800015 	stw	r2,0(sp)
 505fd50:	880f883a 	mov	r7,r17
 505fd54:	b00d883a 	mov	r6,r22
 505fd58:	e17ff617 	ldw	r5,-40(fp)
 505fd5c:	b809883a 	mov	r4,r23
 505fd60:	505fb300 	call	505fb30 <helper_plot_pixel>
			error = error + deltay;
 505fd64:	e0bff717 	ldw	r2,-36(fp)
 505fd68:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 505fd6c:	0400020e 	bge	zero,r16,505fd78 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 505fd70:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 505fd74:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 505fd78:	8c400044 	addi	r17,r17,1
 505fd7c:	947ff00e 	bge	r18,r17,505fd40 <_gp+0xffff4918>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 505fd80:	00001006 	br	505fdc4 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 505fd84:	e0bff417 	ldw	r2,-48(fp)
 505fd88:	d8800115 	stw	r2,4(sp)
 505fd8c:	e0bff517 	ldw	r2,-44(fp)
 505fd90:	d8800015 	stw	r2,0(sp)
 505fd94:	b00f883a 	mov	r7,r22
 505fd98:	880d883a 	mov	r6,r17
 505fd9c:	e17ff617 	ldw	r5,-40(fp)
 505fda0:	b809883a 	mov	r4,r23
 505fda4:	505fb300 	call	505fb30 <helper_plot_pixel>
			error = error + deltay;
 505fda8:	e0bff717 	ldw	r2,-36(fp)
 505fdac:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 505fdb0:	0400020e 	bge	zero,r16,505fdbc <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 505fdb4:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 505fdb8:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 505fdbc:	8c400044 	addi	r17,r17,1
 505fdc0:	947ff00e 	bge	r18,r17,505fd84 <_gp+0xffff495c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 505fdc4:	0001883a 	nop
 505fdc8:	e6fff804 	addi	sp,fp,-32
 505fdcc:	dfc00917 	ldw	ra,36(sp)
 505fdd0:	df000817 	ldw	fp,32(sp)
 505fdd4:	ddc00717 	ldw	r23,28(sp)
 505fdd8:	dd800617 	ldw	r22,24(sp)
 505fddc:	dd400517 	ldw	r21,20(sp)
 505fde0:	dd000417 	ldw	r20,16(sp)
 505fde4:	dcc00317 	ldw	r19,12(sp)
 505fde8:	dc800217 	ldw	r18,8(sp)
 505fdec:	dc400117 	ldw	r17,4(sp)
 505fdf0:	dc000017 	ldw	r16,0(sp)
 505fdf4:	dec00a04 	addi	sp,sp,40
 505fdf8:	f800283a 	ret

0505fdfc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 505fdfc:	defffa04 	addi	sp,sp,-24
 505fe00:	dfc00515 	stw	ra,20(sp)
 505fe04:	df000415 	stw	fp,16(sp)
 505fe08:	df000404 	addi	fp,sp,16
 505fe0c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 505fe10:	008000c4 	movi	r2,3
 505fe14:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 505fe18:	e0fffd17 	ldw	r3,-12(fp)
 505fe1c:	008003f4 	movhi	r2,15
 505fe20:	10909004 	addi	r2,r2,16960
 505fe24:	1885383a 	mul	r2,r3,r2
 505fe28:	100b883a 	mov	r5,r2
 505fe2c:	01013174 	movhi	r4,1221
 505fe30:	212d0004 	addi	r4,r4,-19456
 505fe34:	504b3ec0 	call	504b3ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 505fe38:	100b883a 	mov	r5,r2
 505fe3c:	01200034 	movhi	r4,32768
 505fe40:	213fffc4 	addi	r4,r4,-1
 505fe44:	504b3ec0 	call	504b3ec <__udivsi3>
 505fe48:	100b883a 	mov	r5,r2
 505fe4c:	e13fff17 	ldw	r4,-4(fp)
 505fe50:	504b3ec0 	call	504b3ec <__udivsi3>
 505fe54:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 505fe58:	e0bffe17 	ldw	r2,-8(fp)
 505fe5c:	10002a26 	beq	r2,zero,505ff08 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 505fe60:	e03ffc15 	stw	zero,-16(fp)
 505fe64:	00001706 	br	505fec4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 505fe68:	00a00034 	movhi	r2,32768
 505fe6c:	10bfffc4 	addi	r2,r2,-1
 505fe70:	10bfffc4 	addi	r2,r2,-1
 505fe74:	103ffe1e 	bne	r2,zero,505fe70 <_gp+0xffff4a48>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 505fe78:	e0fffd17 	ldw	r3,-12(fp)
 505fe7c:	008003f4 	movhi	r2,15
 505fe80:	10909004 	addi	r2,r2,16960
 505fe84:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 505fe88:	100b883a 	mov	r5,r2
 505fe8c:	01013174 	movhi	r4,1221
 505fe90:	212d0004 	addi	r4,r4,-19456
 505fe94:	504b3ec0 	call	504b3ec <__udivsi3>
 505fe98:	100b883a 	mov	r5,r2
 505fe9c:	01200034 	movhi	r4,32768
 505fea0:	213fffc4 	addi	r4,r4,-1
 505fea4:	504b3ec0 	call	504b3ec <__udivsi3>
 505fea8:	1007883a 	mov	r3,r2
 505feac:	e0bfff17 	ldw	r2,-4(fp)
 505feb0:	10c5c83a 	sub	r2,r2,r3
 505feb4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 505feb8:	e0bffc17 	ldw	r2,-16(fp)
 505febc:	10800044 	addi	r2,r2,1
 505fec0:	e0bffc15 	stw	r2,-16(fp)
 505fec4:	e0fffc17 	ldw	r3,-16(fp)
 505fec8:	e0bffe17 	ldw	r2,-8(fp)
 505fecc:	18bfe616 	blt	r3,r2,505fe68 <_gp+0xffff4a40>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 505fed0:	e0fffd17 	ldw	r3,-12(fp)
 505fed4:	008003f4 	movhi	r2,15
 505fed8:	10909004 	addi	r2,r2,16960
 505fedc:	1885383a 	mul	r2,r3,r2
 505fee0:	100b883a 	mov	r5,r2
 505fee4:	01013174 	movhi	r4,1221
 505fee8:	212d0004 	addi	r4,r4,-19456
 505feec:	504b3ec0 	call	504b3ec <__udivsi3>
 505fef0:	1007883a 	mov	r3,r2
 505fef4:	e0bfff17 	ldw	r2,-4(fp)
 505fef8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 505fefc:	10bfffc4 	addi	r2,r2,-1
 505ff00:	103ffe1e 	bne	r2,zero,505fefc <_gp+0xffff4ad4>
 505ff04:	00000d06 	br	505ff3c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 505ff08:	e0fffd17 	ldw	r3,-12(fp)
 505ff0c:	008003f4 	movhi	r2,15
 505ff10:	10909004 	addi	r2,r2,16960
 505ff14:	1885383a 	mul	r2,r3,r2
 505ff18:	100b883a 	mov	r5,r2
 505ff1c:	01013174 	movhi	r4,1221
 505ff20:	212d0004 	addi	r4,r4,-19456
 505ff24:	504b3ec0 	call	504b3ec <__udivsi3>
 505ff28:	1007883a 	mov	r3,r2
 505ff2c:	e0bfff17 	ldw	r2,-4(fp)
 505ff30:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 505ff34:	10bfffc4 	addi	r2,r2,-1
 505ff38:	00bffe16 	blt	zero,r2,505ff34 <_gp+0xffff4b0c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 505ff3c:	0005883a 	mov	r2,zero
}
 505ff40:	e037883a 	mov	sp,fp
 505ff44:	dfc00117 	ldw	ra,4(sp)
 505ff48:	df000017 	ldw	fp,0(sp)
 505ff4c:	dec00204 	addi	sp,sp,8
 505ff50:	f800283a 	ret

0505ff54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 505ff54:	defffe04 	addi	sp,sp,-8
 505ff58:	df000115 	stw	fp,4(sp)
 505ff5c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 505ff60:	e03fff15 	stw	zero,-4(fp)
 505ff64:	00000506 	br	505ff7c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 505ff68:	e0bfff17 	ldw	r2,-4(fp)
 505ff6c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 505ff70:	e0bfff17 	ldw	r2,-4(fp)
 505ff74:	10800804 	addi	r2,r2,32
 505ff78:	e0bfff15 	stw	r2,-4(fp)
 505ff7c:	e0bfff17 	ldw	r2,-4(fp)
 505ff80:	10820030 	cmpltui	r2,r2,2048
 505ff84:	103ff81e 	bne	r2,zero,505ff68 <_gp+0xffff4b40>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 505ff88:	0001883a 	nop
 505ff8c:	e037883a 	mov	sp,fp
 505ff90:	df000017 	ldw	fp,0(sp)
 505ff94:	dec00104 	addi	sp,sp,4
 505ff98:	f800283a 	ret

0505ff9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 505ff9c:	defffe04 	addi	sp,sp,-8
 505ffa0:	dfc00115 	stw	ra,4(sp)
 505ffa4:	df000015 	stw	fp,0(sp)
 505ffa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 505ffac:	d0a00d17 	ldw	r2,-32716(gp)
 505ffb0:	10000326 	beq	r2,zero,505ffc0 <alt_get_errno+0x24>
 505ffb4:	d0a00d17 	ldw	r2,-32716(gp)
 505ffb8:	103ee83a 	callr	r2
 505ffbc:	00000106 	br	505ffc4 <alt_get_errno+0x28>
 505ffc0:	d0a81304 	addi	r2,gp,-24500
}
 505ffc4:	e037883a 	mov	sp,fp
 505ffc8:	dfc00117 	ldw	ra,4(sp)
 505ffcc:	df000017 	ldw	fp,0(sp)
 505ffd0:	dec00204 	addi	sp,sp,8
 505ffd4:	f800283a 	ret

0505ffd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 505ffd8:	defffa04 	addi	sp,sp,-24
 505ffdc:	dfc00515 	stw	ra,20(sp)
 505ffe0:	df000415 	stw	fp,16(sp)
 505ffe4:	df000404 	addi	fp,sp,16
 505ffe8:	e13ffe15 	stw	r4,-8(fp)
 505ffec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 505fff0:	e0bffe17 	ldw	r2,-8(fp)
 505fff4:	10000326 	beq	r2,zero,5060004 <alt_dev_llist_insert+0x2c>
 505fff8:	e0bffe17 	ldw	r2,-8(fp)
 505fffc:	10800217 	ldw	r2,8(r2)
 5060000:	1000061e 	bne	r2,zero,506001c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 5060004:	505ff9c0 	call	505ff9c <alt_get_errno>
 5060008:	1007883a 	mov	r3,r2
 506000c:	00800584 	movi	r2,22
 5060010:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 5060014:	00bffa84 	movi	r2,-22
 5060018:	00001306 	br	5060068 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 506001c:	e0bffe17 	ldw	r2,-8(fp)
 5060020:	e0ffff17 	ldw	r3,-4(fp)
 5060024:	e0fffc15 	stw	r3,-16(fp)
 5060028:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 506002c:	e0bffd17 	ldw	r2,-12(fp)
 5060030:	e0fffc17 	ldw	r3,-16(fp)
 5060034:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5060038:	e0bffc17 	ldw	r2,-16(fp)
 506003c:	10c00017 	ldw	r3,0(r2)
 5060040:	e0bffd17 	ldw	r2,-12(fp)
 5060044:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5060048:	e0bffc17 	ldw	r2,-16(fp)
 506004c:	10800017 	ldw	r2,0(r2)
 5060050:	e0fffd17 	ldw	r3,-12(fp)
 5060054:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5060058:	e0bffc17 	ldw	r2,-16(fp)
 506005c:	e0fffd17 	ldw	r3,-12(fp)
 5060060:	10c00015 	stw	r3,0(r2)

  return 0;  
 5060064:	0005883a 	mov	r2,zero
}
 5060068:	e037883a 	mov	sp,fp
 506006c:	dfc00117 	ldw	ra,4(sp)
 5060070:	df000017 	ldw	fp,0(sp)
 5060074:	dec00204 	addi	sp,sp,8
 5060078:	f800283a 	ret

0506007c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 506007c:	defffd04 	addi	sp,sp,-12
 5060080:	dfc00215 	stw	ra,8(sp)
 5060084:	df000115 	stw	fp,4(sp)
 5060088:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 506008c:	008141b4 	movhi	r2,1286
 5060090:	10830904 	addi	r2,r2,3108
 5060094:	e0bfff15 	stw	r2,-4(fp)
 5060098:	00000606 	br	50600b4 <_do_ctors+0x38>
        (*ctor) (); 
 506009c:	e0bfff17 	ldw	r2,-4(fp)
 50600a0:	10800017 	ldw	r2,0(r2)
 50600a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 50600a8:	e0bfff17 	ldw	r2,-4(fp)
 50600ac:	10bfff04 	addi	r2,r2,-4
 50600b0:	e0bfff15 	stw	r2,-4(fp)
 50600b4:	e0ffff17 	ldw	r3,-4(fp)
 50600b8:	008141b4 	movhi	r2,1286
 50600bc:	10830904 	addi	r2,r2,3108
 50600c0:	18bff62e 	bgeu	r3,r2,506009c <_gp+0xffff4c74>
        (*ctor) (); 
}
 50600c4:	0001883a 	nop
 50600c8:	e037883a 	mov	sp,fp
 50600cc:	dfc00117 	ldw	ra,4(sp)
 50600d0:	df000017 	ldw	fp,0(sp)
 50600d4:	dec00204 	addi	sp,sp,8
 50600d8:	f800283a 	ret

050600dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 50600dc:	defffd04 	addi	sp,sp,-12
 50600e0:	dfc00215 	stw	ra,8(sp)
 50600e4:	df000115 	stw	fp,4(sp)
 50600e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50600ec:	008141b4 	movhi	r2,1286
 50600f0:	10830904 	addi	r2,r2,3108
 50600f4:	e0bfff15 	stw	r2,-4(fp)
 50600f8:	00000606 	br	5060114 <_do_dtors+0x38>
        (*dtor) (); 
 50600fc:	e0bfff17 	ldw	r2,-4(fp)
 5060100:	10800017 	ldw	r2,0(r2)
 5060104:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5060108:	e0bfff17 	ldw	r2,-4(fp)
 506010c:	10bfff04 	addi	r2,r2,-4
 5060110:	e0bfff15 	stw	r2,-4(fp)
 5060114:	e0ffff17 	ldw	r3,-4(fp)
 5060118:	008141b4 	movhi	r2,1286
 506011c:	10830a04 	addi	r2,r2,3112
 5060120:	18bff62e 	bgeu	r3,r2,50600fc <_gp+0xffff4cd4>
        (*dtor) (); 
}
 5060124:	0001883a 	nop
 5060128:	e037883a 	mov	sp,fp
 506012c:	dfc00117 	ldw	ra,4(sp)
 5060130:	df000017 	ldw	fp,0(sp)
 5060134:	dec00204 	addi	sp,sp,8
 5060138:	f800283a 	ret

0506013c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 506013c:	defffa04 	addi	sp,sp,-24
 5060140:	dfc00515 	stw	ra,20(sp)
 5060144:	df000415 	stw	fp,16(sp)
 5060148:	df000404 	addi	fp,sp,16
 506014c:	e13ffe15 	stw	r4,-8(fp)
 5060150:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5060154:	e0bfff17 	ldw	r2,-4(fp)
 5060158:	10800017 	ldw	r2,0(r2)
 506015c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5060160:	e13ffe17 	ldw	r4,-8(fp)
 5060164:	504fe240 	call	504fe24 <strlen>
 5060168:	10800044 	addi	r2,r2,1
 506016c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5060170:	00000d06 	br	50601a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 5060174:	e0bffc17 	ldw	r2,-16(fp)
 5060178:	10800217 	ldw	r2,8(r2)
 506017c:	e0fffd17 	ldw	r3,-12(fp)
 5060180:	180d883a 	mov	r6,r3
 5060184:	e17ffe17 	ldw	r5,-8(fp)
 5060188:	1009883a 	mov	r4,r2
 506018c:	50608dc0 	call	50608dc <memcmp>
 5060190:	1000021e 	bne	r2,zero,506019c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 5060194:	e0bffc17 	ldw	r2,-16(fp)
 5060198:	00000706 	br	50601b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 506019c:	e0bffc17 	ldw	r2,-16(fp)
 50601a0:	10800017 	ldw	r2,0(r2)
 50601a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50601a8:	e0fffc17 	ldw	r3,-16(fp)
 50601ac:	e0bfff17 	ldw	r2,-4(fp)
 50601b0:	18bff01e 	bne	r3,r2,5060174 <_gp+0xffff4d4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 50601b4:	0005883a 	mov	r2,zero
}
 50601b8:	e037883a 	mov	sp,fp
 50601bc:	dfc00117 	ldw	ra,4(sp)
 50601c0:	df000017 	ldw	fp,0(sp)
 50601c4:	dec00204 	addi	sp,sp,8
 50601c8:	f800283a 	ret

050601cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 50601cc:	defffe04 	addi	sp,sp,-8
 50601d0:	dfc00115 	stw	ra,4(sp)
 50601d4:	df000015 	stw	fp,0(sp)
 50601d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 50601dc:	01440004 	movi	r5,4096
 50601e0:	0009883a 	mov	r4,zero
 50601e4:	50607640 	call	5060764 <alt_icache_flush>
#endif
}
 50601e8:	0001883a 	nop
 50601ec:	e037883a 	mov	sp,fp
 50601f0:	dfc00117 	ldw	ra,4(sp)
 50601f4:	df000017 	ldw	fp,0(sp)
 50601f8:	dec00204 	addi	sp,sp,8
 50601fc:	f800283a 	ret

05060200 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5060200:	defff904 	addi	sp,sp,-28
 5060204:	dfc00615 	stw	ra,24(sp)
 5060208:	df000515 	stw	fp,20(sp)
 506020c:	df000504 	addi	fp,sp,20
 5060210:	e13ffc15 	stw	r4,-16(fp)
 5060214:	e17ffd15 	stw	r5,-12(fp)
 5060218:	e1bffe15 	stw	r6,-8(fp)
 506021c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 5060220:	e1bfff17 	ldw	r6,-4(fp)
 5060224:	e17ffe17 	ldw	r5,-8(fp)
 5060228:	e13ffd17 	ldw	r4,-12(fp)
 506022c:	50604400 	call	5060440 <open>
 5060230:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 5060234:	e0bffb17 	ldw	r2,-20(fp)
 5060238:	10001c16 	blt	r2,zero,50602ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 506023c:	008141b4 	movhi	r2,1286
 5060240:	10886104 	addi	r2,r2,8580
 5060244:	e0fffb17 	ldw	r3,-20(fp)
 5060248:	18c00324 	muli	r3,r3,12
 506024c:	10c5883a 	add	r2,r2,r3
 5060250:	10c00017 	ldw	r3,0(r2)
 5060254:	e0bffc17 	ldw	r2,-16(fp)
 5060258:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 506025c:	008141b4 	movhi	r2,1286
 5060260:	10886104 	addi	r2,r2,8580
 5060264:	e0fffb17 	ldw	r3,-20(fp)
 5060268:	18c00324 	muli	r3,r3,12
 506026c:	10c5883a 	add	r2,r2,r3
 5060270:	10800104 	addi	r2,r2,4
 5060274:	10c00017 	ldw	r3,0(r2)
 5060278:	e0bffc17 	ldw	r2,-16(fp)
 506027c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5060280:	008141b4 	movhi	r2,1286
 5060284:	10886104 	addi	r2,r2,8580
 5060288:	e0fffb17 	ldw	r3,-20(fp)
 506028c:	18c00324 	muli	r3,r3,12
 5060290:	10c5883a 	add	r2,r2,r3
 5060294:	10800204 	addi	r2,r2,8
 5060298:	10c00017 	ldw	r3,0(r2)
 506029c:	e0bffc17 	ldw	r2,-16(fp)
 50602a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 50602a4:	e13ffb17 	ldw	r4,-20(fp)
 50602a8:	505d5640 	call	505d564 <alt_release_fd>
  }
} 
 50602ac:	0001883a 	nop
 50602b0:	e037883a 	mov	sp,fp
 50602b4:	dfc00117 	ldw	ra,4(sp)
 50602b8:	df000017 	ldw	fp,0(sp)
 50602bc:	dec00204 	addi	sp,sp,8
 50602c0:	f800283a 	ret

050602c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 50602c4:	defffb04 	addi	sp,sp,-20
 50602c8:	dfc00415 	stw	ra,16(sp)
 50602cc:	df000315 	stw	fp,12(sp)
 50602d0:	df000304 	addi	fp,sp,12
 50602d4:	e13ffd15 	stw	r4,-12(fp)
 50602d8:	e17ffe15 	stw	r5,-8(fp)
 50602dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 50602e0:	01c07fc4 	movi	r7,511
 50602e4:	01800044 	movi	r6,1
 50602e8:	e17ffd17 	ldw	r5,-12(fp)
 50602ec:	010141b4 	movhi	r4,1286
 50602f0:	21086404 	addi	r4,r4,8592
 50602f4:	50602000 	call	5060200 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 50602f8:	01c07fc4 	movi	r7,511
 50602fc:	000d883a 	mov	r6,zero
 5060300:	e17ffe17 	ldw	r5,-8(fp)
 5060304:	010141b4 	movhi	r4,1286
 5060308:	21086104 	addi	r4,r4,8580
 506030c:	50602000 	call	5060200 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5060310:	01c07fc4 	movi	r7,511
 5060314:	01800044 	movi	r6,1
 5060318:	e17fff17 	ldw	r5,-4(fp)
 506031c:	010141b4 	movhi	r4,1286
 5060320:	21086704 	addi	r4,r4,8604
 5060324:	50602000 	call	5060200 <alt_open_fd>
}  
 5060328:	0001883a 	nop
 506032c:	e037883a 	mov	sp,fp
 5060330:	dfc00117 	ldw	ra,4(sp)
 5060334:	df000017 	ldw	fp,0(sp)
 5060338:	dec00204 	addi	sp,sp,8
 506033c:	f800283a 	ret

05060340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5060340:	defffe04 	addi	sp,sp,-8
 5060344:	dfc00115 	stw	ra,4(sp)
 5060348:	df000015 	stw	fp,0(sp)
 506034c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5060350:	d0a00d17 	ldw	r2,-32716(gp)
 5060354:	10000326 	beq	r2,zero,5060364 <alt_get_errno+0x24>
 5060358:	d0a00d17 	ldw	r2,-32716(gp)
 506035c:	103ee83a 	callr	r2
 5060360:	00000106 	br	5060368 <alt_get_errno+0x28>
 5060364:	d0a81304 	addi	r2,gp,-24500
}
 5060368:	e037883a 	mov	sp,fp
 506036c:	dfc00117 	ldw	ra,4(sp)
 5060370:	df000017 	ldw	fp,0(sp)
 5060374:	dec00204 	addi	sp,sp,8
 5060378:	f800283a 	ret

0506037c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 506037c:	defffd04 	addi	sp,sp,-12
 5060380:	df000215 	stw	fp,8(sp)
 5060384:	df000204 	addi	fp,sp,8
 5060388:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 506038c:	e0bfff17 	ldw	r2,-4(fp)
 5060390:	10800217 	ldw	r2,8(r2)
 5060394:	10d00034 	orhi	r3,r2,16384
 5060398:	e0bfff17 	ldw	r2,-4(fp)
 506039c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 50603a0:	e03ffe15 	stw	zero,-8(fp)
 50603a4:	00001d06 	br	506041c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 50603a8:	008141b4 	movhi	r2,1286
 50603ac:	10886104 	addi	r2,r2,8580
 50603b0:	e0fffe17 	ldw	r3,-8(fp)
 50603b4:	18c00324 	muli	r3,r3,12
 50603b8:	10c5883a 	add	r2,r2,r3
 50603bc:	10c00017 	ldw	r3,0(r2)
 50603c0:	e0bfff17 	ldw	r2,-4(fp)
 50603c4:	10800017 	ldw	r2,0(r2)
 50603c8:	1880111e 	bne	r3,r2,5060410 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 50603cc:	008141b4 	movhi	r2,1286
 50603d0:	10886104 	addi	r2,r2,8580
 50603d4:	e0fffe17 	ldw	r3,-8(fp)
 50603d8:	18c00324 	muli	r3,r3,12
 50603dc:	10c5883a 	add	r2,r2,r3
 50603e0:	10800204 	addi	r2,r2,8
 50603e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 50603e8:	1000090e 	bge	r2,zero,5060410 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 50603ec:	e0bffe17 	ldw	r2,-8(fp)
 50603f0:	10c00324 	muli	r3,r2,12
 50603f4:	008141b4 	movhi	r2,1286
 50603f8:	10886104 	addi	r2,r2,8580
 50603fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5060400:	e0bfff17 	ldw	r2,-4(fp)
 5060404:	18800226 	beq	r3,r2,5060410 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5060408:	00bffcc4 	movi	r2,-13
 506040c:	00000806 	br	5060430 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5060410:	e0bffe17 	ldw	r2,-8(fp)
 5060414:	10800044 	addi	r2,r2,1
 5060418:	e0bffe15 	stw	r2,-8(fp)
 506041c:	d0a00c17 	ldw	r2,-32720(gp)
 5060420:	1007883a 	mov	r3,r2
 5060424:	e0bffe17 	ldw	r2,-8(fp)
 5060428:	18bfdf2e 	bgeu	r3,r2,50603a8 <_gp+0xffff4f80>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 506042c:	0005883a 	mov	r2,zero
}
 5060430:	e037883a 	mov	sp,fp
 5060434:	df000017 	ldw	fp,0(sp)
 5060438:	dec00104 	addi	sp,sp,4
 506043c:	f800283a 	ret

05060440 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5060440:	defff604 	addi	sp,sp,-40
 5060444:	dfc00915 	stw	ra,36(sp)
 5060448:	df000815 	stw	fp,32(sp)
 506044c:	df000804 	addi	fp,sp,32
 5060450:	e13ffd15 	stw	r4,-12(fp)
 5060454:	e17ffe15 	stw	r5,-8(fp)
 5060458:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 506045c:	00bfffc4 	movi	r2,-1
 5060460:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 5060464:	00bffb44 	movi	r2,-19
 5060468:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 506046c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5060470:	d1600a04 	addi	r5,gp,-32728
 5060474:	e13ffd17 	ldw	r4,-12(fp)
 5060478:	506013c0 	call	506013c <alt_find_dev>
 506047c:	e0bff815 	stw	r2,-32(fp)
 5060480:	e0bff817 	ldw	r2,-32(fp)
 5060484:	1000051e 	bne	r2,zero,506049c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5060488:	e13ffd17 	ldw	r4,-12(fp)
 506048c:	50605b80 	call	50605b8 <alt_find_file>
 5060490:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 5060494:	00800044 	movi	r2,1
 5060498:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 506049c:	e0bff817 	ldw	r2,-32(fp)
 50604a0:	10002926 	beq	r2,zero,5060548 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 50604a4:	e13ff817 	ldw	r4,-32(fp)
 50604a8:	50606c00 	call	50606c0 <alt_get_fd>
 50604ac:	e0bff915 	stw	r2,-28(fp)
 50604b0:	e0bff917 	ldw	r2,-28(fp)
 50604b4:	1000030e 	bge	r2,zero,50604c4 <open+0x84>
    {
      status = index;
 50604b8:	e0bff917 	ldw	r2,-28(fp)
 50604bc:	e0bffa15 	stw	r2,-24(fp)
 50604c0:	00002306 	br	5060550 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 50604c4:	e0bff917 	ldw	r2,-28(fp)
 50604c8:	10c00324 	muli	r3,r2,12
 50604cc:	008141b4 	movhi	r2,1286
 50604d0:	10886104 	addi	r2,r2,8580
 50604d4:	1885883a 	add	r2,r3,r2
 50604d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 50604dc:	e0fffe17 	ldw	r3,-8(fp)
 50604e0:	00900034 	movhi	r2,16384
 50604e4:	10bfffc4 	addi	r2,r2,-1
 50604e8:	1886703a 	and	r3,r3,r2
 50604ec:	e0bffc17 	ldw	r2,-16(fp)
 50604f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 50604f4:	e0bffb17 	ldw	r2,-20(fp)
 50604f8:	1000051e 	bne	r2,zero,5060510 <open+0xd0>
 50604fc:	e13ffc17 	ldw	r4,-16(fp)
 5060500:	506037c0 	call	506037c <alt_file_locked>
 5060504:	e0bffa15 	stw	r2,-24(fp)
 5060508:	e0bffa17 	ldw	r2,-24(fp)
 506050c:	10001016 	blt	r2,zero,5060550 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 5060510:	e0bff817 	ldw	r2,-32(fp)
 5060514:	10800317 	ldw	r2,12(r2)
 5060518:	10000826 	beq	r2,zero,506053c <open+0xfc>
 506051c:	e0bff817 	ldw	r2,-32(fp)
 5060520:	10800317 	ldw	r2,12(r2)
 5060524:	e1ffff17 	ldw	r7,-4(fp)
 5060528:	e1bffe17 	ldw	r6,-8(fp)
 506052c:	e17ffd17 	ldw	r5,-12(fp)
 5060530:	e13ffc17 	ldw	r4,-16(fp)
 5060534:	103ee83a 	callr	r2
 5060538:	00000106 	br	5060540 <open+0x100>
 506053c:	0005883a 	mov	r2,zero
 5060540:	e0bffa15 	stw	r2,-24(fp)
 5060544:	00000206 	br	5060550 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 5060548:	00bffb44 	movi	r2,-19
 506054c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5060550:	e0bffa17 	ldw	r2,-24(fp)
 5060554:	1000090e 	bge	r2,zero,506057c <open+0x13c>
  {
    alt_release_fd (index);  
 5060558:	e13ff917 	ldw	r4,-28(fp)
 506055c:	505d5640 	call	505d564 <alt_release_fd>
    ALT_ERRNO = -status;
 5060560:	50603400 	call	5060340 <alt_get_errno>
 5060564:	1007883a 	mov	r3,r2
 5060568:	e0bffa17 	ldw	r2,-24(fp)
 506056c:	0085c83a 	sub	r2,zero,r2
 5060570:	18800015 	stw	r2,0(r3)
    return -1;
 5060574:	00bfffc4 	movi	r2,-1
 5060578:	00000106 	br	5060580 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 506057c:	e0bff917 	ldw	r2,-28(fp)
}
 5060580:	e037883a 	mov	sp,fp
 5060584:	dfc00117 	ldw	ra,4(sp)
 5060588:	df000017 	ldw	fp,0(sp)
 506058c:	dec00204 	addi	sp,sp,8
 5060590:	f800283a 	ret

05060594 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5060594:	deffff04 	addi	sp,sp,-4
 5060598:	df000015 	stw	fp,0(sp)
 506059c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 50605a0:	000170fa 	wrctl	ienable,zero
}
 50605a4:	0001883a 	nop
 50605a8:	e037883a 	mov	sp,fp
 50605ac:	df000017 	ldw	fp,0(sp)
 50605b0:	dec00104 	addi	sp,sp,4
 50605b4:	f800283a 	ret

050605b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 50605b8:	defffb04 	addi	sp,sp,-20
 50605bc:	dfc00415 	stw	ra,16(sp)
 50605c0:	df000315 	stw	fp,12(sp)
 50605c4:	df000304 	addi	fp,sp,12
 50605c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 50605cc:	d0a00817 	ldw	r2,-32736(gp)
 50605d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50605d4:	00003106 	br	506069c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 50605d8:	e0bffd17 	ldw	r2,-12(fp)
 50605dc:	10800217 	ldw	r2,8(r2)
 50605e0:	1009883a 	mov	r4,r2
 50605e4:	504fe240 	call	504fe24 <strlen>
 50605e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 50605ec:	e0bffd17 	ldw	r2,-12(fp)
 50605f0:	10c00217 	ldw	r3,8(r2)
 50605f4:	e0bffe17 	ldw	r2,-8(fp)
 50605f8:	10bfffc4 	addi	r2,r2,-1
 50605fc:	1885883a 	add	r2,r3,r2
 5060600:	10800003 	ldbu	r2,0(r2)
 5060604:	10803fcc 	andi	r2,r2,255
 5060608:	1080201c 	xori	r2,r2,128
 506060c:	10bfe004 	addi	r2,r2,-128
 5060610:	10800bd8 	cmpnei	r2,r2,47
 5060614:	1000031e 	bne	r2,zero,5060624 <alt_find_file+0x6c>
    {
      len -= 1;
 5060618:	e0bffe17 	ldw	r2,-8(fp)
 506061c:	10bfffc4 	addi	r2,r2,-1
 5060620:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5060624:	e0bffe17 	ldw	r2,-8(fp)
 5060628:	e0ffff17 	ldw	r3,-4(fp)
 506062c:	1885883a 	add	r2,r3,r2
 5060630:	10800003 	ldbu	r2,0(r2)
 5060634:	10803fcc 	andi	r2,r2,255
 5060638:	1080201c 	xori	r2,r2,128
 506063c:	10bfe004 	addi	r2,r2,-128
 5060640:	10800be0 	cmpeqi	r2,r2,47
 5060644:	1000081e 	bne	r2,zero,5060668 <alt_find_file+0xb0>
 5060648:	e0bffe17 	ldw	r2,-8(fp)
 506064c:	e0ffff17 	ldw	r3,-4(fp)
 5060650:	1885883a 	add	r2,r3,r2
 5060654:	10800003 	ldbu	r2,0(r2)
 5060658:	10803fcc 	andi	r2,r2,255
 506065c:	1080201c 	xori	r2,r2,128
 5060660:	10bfe004 	addi	r2,r2,-128
 5060664:	10000a1e 	bne	r2,zero,5060690 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5060668:	e0bffd17 	ldw	r2,-12(fp)
 506066c:	10800217 	ldw	r2,8(r2)
 5060670:	e0fffe17 	ldw	r3,-8(fp)
 5060674:	180d883a 	mov	r6,r3
 5060678:	e17fff17 	ldw	r5,-4(fp)
 506067c:	1009883a 	mov	r4,r2
 5060680:	50608dc0 	call	50608dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5060684:	1000021e 	bne	r2,zero,5060690 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 5060688:	e0bffd17 	ldw	r2,-12(fp)
 506068c:	00000706 	br	50606ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 5060690:	e0bffd17 	ldw	r2,-12(fp)
 5060694:	10800017 	ldw	r2,0(r2)
 5060698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 506069c:	e0fffd17 	ldw	r3,-12(fp)
 50606a0:	d0a00804 	addi	r2,gp,-32736
 50606a4:	18bfcc1e 	bne	r3,r2,50605d8 <_gp+0xffff51b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 50606a8:	0005883a 	mov	r2,zero
}
 50606ac:	e037883a 	mov	sp,fp
 50606b0:	dfc00117 	ldw	ra,4(sp)
 50606b4:	df000017 	ldw	fp,0(sp)
 50606b8:	dec00204 	addi	sp,sp,8
 50606bc:	f800283a 	ret

050606c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 50606c0:	defffc04 	addi	sp,sp,-16
 50606c4:	df000315 	stw	fp,12(sp)
 50606c8:	df000304 	addi	fp,sp,12
 50606cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 50606d0:	00bffa04 	movi	r2,-24
 50606d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 50606d8:	e03ffd15 	stw	zero,-12(fp)
 50606dc:	00001906 	br	5060744 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 50606e0:	008141b4 	movhi	r2,1286
 50606e4:	10886104 	addi	r2,r2,8580
 50606e8:	e0fffd17 	ldw	r3,-12(fp)
 50606ec:	18c00324 	muli	r3,r3,12
 50606f0:	10c5883a 	add	r2,r2,r3
 50606f4:	10800017 	ldw	r2,0(r2)
 50606f8:	10000f1e 	bne	r2,zero,5060738 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 50606fc:	008141b4 	movhi	r2,1286
 5060700:	10886104 	addi	r2,r2,8580
 5060704:	e0fffd17 	ldw	r3,-12(fp)
 5060708:	18c00324 	muli	r3,r3,12
 506070c:	10c5883a 	add	r2,r2,r3
 5060710:	e0ffff17 	ldw	r3,-4(fp)
 5060714:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 5060718:	d0e00c17 	ldw	r3,-32720(gp)
 506071c:	e0bffd17 	ldw	r2,-12(fp)
 5060720:	1880020e 	bge	r3,r2,506072c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 5060724:	e0bffd17 	ldw	r2,-12(fp)
 5060728:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 506072c:	e0bffd17 	ldw	r2,-12(fp)
 5060730:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5060734:	00000606 	br	5060750 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5060738:	e0bffd17 	ldw	r2,-12(fp)
 506073c:	10800044 	addi	r2,r2,1
 5060740:	e0bffd15 	stw	r2,-12(fp)
 5060744:	e0bffd17 	ldw	r2,-12(fp)
 5060748:	10800810 	cmplti	r2,r2,32
 506074c:	103fe41e 	bne	r2,zero,50606e0 <_gp+0xffff52b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5060750:	e0bffe17 	ldw	r2,-8(fp)
}
 5060754:	e037883a 	mov	sp,fp
 5060758:	df000017 	ldw	fp,0(sp)
 506075c:	dec00104 	addi	sp,sp,4
 5060760:	f800283a 	ret

05060764 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 5060764:	defffb04 	addi	sp,sp,-20
 5060768:	df000415 	stw	fp,16(sp)
 506076c:	df000404 	addi	fp,sp,16
 5060770:	e13ffe15 	stw	r4,-8(fp)
 5060774:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 5060778:	e0bfff17 	ldw	r2,-4(fp)
 506077c:	10840070 	cmpltui	r2,r2,4097
 5060780:	1000021e 	bne	r2,zero,506078c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 5060784:	00840004 	movi	r2,4096
 5060788:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 506078c:	e0fffe17 	ldw	r3,-8(fp)
 5060790:	e0bfff17 	ldw	r2,-4(fp)
 5060794:	1885883a 	add	r2,r3,r2
 5060798:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 506079c:	e0bffe17 	ldw	r2,-8(fp)
 50607a0:	e0bffc15 	stw	r2,-16(fp)
 50607a4:	00000506 	br	50607bc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 50607a8:	e0bffc17 	ldw	r2,-16(fp)
 50607ac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 50607b0:	e0bffc17 	ldw	r2,-16(fp)
 50607b4:	10800804 	addi	r2,r2,32
 50607b8:	e0bffc15 	stw	r2,-16(fp)
 50607bc:	e0fffc17 	ldw	r3,-16(fp)
 50607c0:	e0bffd17 	ldw	r2,-12(fp)
 50607c4:	18bff836 	bltu	r3,r2,50607a8 <_gp+0xffff5380>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 50607c8:	e0bffe17 	ldw	r2,-8(fp)
 50607cc:	108007cc 	andi	r2,r2,31
 50607d0:	10000226 	beq	r2,zero,50607dc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 50607d4:	e0bffc17 	ldw	r2,-16(fp)
 50607d8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 50607dc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 50607e0:	0001883a 	nop
 50607e4:	e037883a 	mov	sp,fp
 50607e8:	df000017 	ldw	fp,0(sp)
 50607ec:	dec00104 	addi	sp,sp,4
 50607f0:	f800283a 	ret

050607f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 50607f4:	defffe04 	addi	sp,sp,-8
 50607f8:	df000115 	stw	fp,4(sp)
 50607fc:	df000104 	addi	fp,sp,4
 5060800:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 5060804:	e0bfff17 	ldw	r2,-4(fp)
 5060808:	10bffe84 	addi	r2,r2,-6
 506080c:	10c00428 	cmpgeui	r3,r2,16
 5060810:	18001a1e 	bne	r3,zero,506087c <alt_exception_cause_generated_bad_addr+0x88>
 5060814:	100690ba 	slli	r3,r2,2
 5060818:	008141b4 	movhi	r2,1286
 506081c:	10820b04 	addi	r2,r2,2092
 5060820:	1885883a 	add	r2,r3,r2
 5060824:	10800017 	ldw	r2,0(r2)
 5060828:	1000683a 	jmp	r2
 506082c:	0506086c 	andhi	r20,zero,6177
 5060830:	0506086c 	andhi	r20,zero,6177
 5060834:	0506087c 	xorhi	r20,zero,6177
 5060838:	0506087c 	xorhi	r20,zero,6177
 506083c:	0506087c 	xorhi	r20,zero,6177
 5060840:	0506086c 	andhi	r20,zero,6177
 5060844:	05060874 	movhi	r20,6177
 5060848:	0506087c 	xorhi	r20,zero,6177
 506084c:	0506086c 	andhi	r20,zero,6177
 5060850:	0506086c 	andhi	r20,zero,6177
 5060854:	0506087c 	xorhi	r20,zero,6177
 5060858:	0506086c 	andhi	r20,zero,6177
 506085c:	05060874 	movhi	r20,6177
 5060860:	0506087c 	xorhi	r20,zero,6177
 5060864:	0506087c 	xorhi	r20,zero,6177
 5060868:	0506086c 	andhi	r20,zero,6177
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 506086c:	00800044 	movi	r2,1
 5060870:	00000306 	br	5060880 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 5060874:	0005883a 	mov	r2,zero
 5060878:	00000106 	br	5060880 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 506087c:	0005883a 	mov	r2,zero
  }
}
 5060880:	e037883a 	mov	sp,fp
 5060884:	df000017 	ldw	fp,0(sp)
 5060888:	dec00104 	addi	sp,sp,4
 506088c:	f800283a 	ret

05060890 <atexit>:
 5060890:	200b883a 	mov	r5,r4
 5060894:	000f883a 	mov	r7,zero
 5060898:	000d883a 	mov	r6,zero
 506089c:	0009883a 	mov	r4,zero
 50608a0:	50609581 	jmpi	5060958 <__register_exitproc>

050608a4 <exit>:
 50608a4:	defffe04 	addi	sp,sp,-8
 50608a8:	000b883a 	mov	r5,zero
 50608ac:	dc000015 	stw	r16,0(sp)
 50608b0:	dfc00115 	stw	ra,4(sp)
 50608b4:	2021883a 	mov	r16,r4
 50608b8:	5060a700 	call	5060a70 <__call_exitprocs>
 50608bc:	008141b4 	movhi	r2,1286
 50608c0:	108d0e04 	addi	r2,r2,13368
 50608c4:	11000017 	ldw	r4,0(r2)
 50608c8:	20800f17 	ldw	r2,60(r4)
 50608cc:	10000126 	beq	r2,zero,50608d4 <exit+0x30>
 50608d0:	103ee83a 	callr	r2
 50608d4:	8009883a 	mov	r4,r16
 50608d8:	5060bf00 	call	5060bf0 <_exit>

050608dc <memcmp>:
 50608dc:	01c000c4 	movi	r7,3
 50608e0:	3980192e 	bgeu	r7,r6,5060948 <memcmp+0x6c>
 50608e4:	2144b03a 	or	r2,r4,r5
 50608e8:	11c4703a 	and	r2,r2,r7
 50608ec:	10000f26 	beq	r2,zero,506092c <memcmp+0x50>
 50608f0:	20800003 	ldbu	r2,0(r4)
 50608f4:	28c00003 	ldbu	r3,0(r5)
 50608f8:	10c0151e 	bne	r2,r3,5060950 <memcmp+0x74>
 50608fc:	31bfff84 	addi	r6,r6,-2
 5060900:	01ffffc4 	movi	r7,-1
 5060904:	00000406 	br	5060918 <memcmp+0x3c>
 5060908:	20800003 	ldbu	r2,0(r4)
 506090c:	28c00003 	ldbu	r3,0(r5)
 5060910:	31bfffc4 	addi	r6,r6,-1
 5060914:	10c00e1e 	bne	r2,r3,5060950 <memcmp+0x74>
 5060918:	21000044 	addi	r4,r4,1
 506091c:	29400044 	addi	r5,r5,1
 5060920:	31fff91e 	bne	r6,r7,5060908 <_gp+0xffff54e0>
 5060924:	0005883a 	mov	r2,zero
 5060928:	f800283a 	ret
 506092c:	20c00017 	ldw	r3,0(r4)
 5060930:	28800017 	ldw	r2,0(r5)
 5060934:	18bfee1e 	bne	r3,r2,50608f0 <_gp+0xffff54c8>
 5060938:	31bfff04 	addi	r6,r6,-4
 506093c:	21000104 	addi	r4,r4,4
 5060940:	29400104 	addi	r5,r5,4
 5060944:	39bff936 	bltu	r7,r6,506092c <_gp+0xffff5504>
 5060948:	303fe91e 	bne	r6,zero,50608f0 <_gp+0xffff54c8>
 506094c:	003ff506 	br	5060924 <_gp+0xffff54fc>
 5060950:	10c5c83a 	sub	r2,r2,r3
 5060954:	f800283a 	ret

05060958 <__register_exitproc>:
 5060958:	defffa04 	addi	sp,sp,-24
 506095c:	dc000315 	stw	r16,12(sp)
 5060960:	040141b4 	movhi	r16,1286
 5060964:	840d0e04 	addi	r16,r16,13368
 5060968:	80c00017 	ldw	r3,0(r16)
 506096c:	dc400415 	stw	r17,16(sp)
 5060970:	dfc00515 	stw	ra,20(sp)
 5060974:	18805217 	ldw	r2,328(r3)
 5060978:	2023883a 	mov	r17,r4
 506097c:	10003726 	beq	r2,zero,5060a5c <__register_exitproc+0x104>
 5060980:	10c00117 	ldw	r3,4(r2)
 5060984:	010007c4 	movi	r4,31
 5060988:	20c00e16 	blt	r4,r3,50609c4 <__register_exitproc+0x6c>
 506098c:	1a000044 	addi	r8,r3,1
 5060990:	8800221e 	bne	r17,zero,5060a1c <__register_exitproc+0xc4>
 5060994:	18c00084 	addi	r3,r3,2
 5060998:	18c7883a 	add	r3,r3,r3
 506099c:	18c7883a 	add	r3,r3,r3
 50609a0:	12000115 	stw	r8,4(r2)
 50609a4:	10c7883a 	add	r3,r2,r3
 50609a8:	19400015 	stw	r5,0(r3)
 50609ac:	0005883a 	mov	r2,zero
 50609b0:	dfc00517 	ldw	ra,20(sp)
 50609b4:	dc400417 	ldw	r17,16(sp)
 50609b8:	dc000317 	ldw	r16,12(sp)
 50609bc:	dec00604 	addi	sp,sp,24
 50609c0:	f800283a 	ret
 50609c4:	00814174 	movhi	r2,1285
 50609c8:	10bc2604 	addi	r2,r2,-3944
 50609cc:	10002626 	beq	r2,zero,5060a68 <__register_exitproc+0x110>
 50609d0:	01006404 	movi	r4,400
 50609d4:	d9400015 	stw	r5,0(sp)
 50609d8:	d9800115 	stw	r6,4(sp)
 50609dc:	d9c00215 	stw	r7,8(sp)
 50609e0:	504f0980 	call	504f098 <malloc>
 50609e4:	d9400017 	ldw	r5,0(sp)
 50609e8:	d9800117 	ldw	r6,4(sp)
 50609ec:	d9c00217 	ldw	r7,8(sp)
 50609f0:	10001d26 	beq	r2,zero,5060a68 <__register_exitproc+0x110>
 50609f4:	81000017 	ldw	r4,0(r16)
 50609f8:	10000115 	stw	zero,4(r2)
 50609fc:	02000044 	movi	r8,1
 5060a00:	22405217 	ldw	r9,328(r4)
 5060a04:	0007883a 	mov	r3,zero
 5060a08:	12400015 	stw	r9,0(r2)
 5060a0c:	20805215 	stw	r2,328(r4)
 5060a10:	10006215 	stw	zero,392(r2)
 5060a14:	10006315 	stw	zero,396(r2)
 5060a18:	883fde26 	beq	r17,zero,5060994 <_gp+0xffff556c>
 5060a1c:	18c9883a 	add	r4,r3,r3
 5060a20:	2109883a 	add	r4,r4,r4
 5060a24:	1109883a 	add	r4,r2,r4
 5060a28:	21802215 	stw	r6,136(r4)
 5060a2c:	01800044 	movi	r6,1
 5060a30:	12406217 	ldw	r9,392(r2)
 5060a34:	30cc983a 	sll	r6,r6,r3
 5060a38:	4992b03a 	or	r9,r9,r6
 5060a3c:	12406215 	stw	r9,392(r2)
 5060a40:	21c04215 	stw	r7,264(r4)
 5060a44:	01000084 	movi	r4,2
 5060a48:	893fd21e 	bne	r17,r4,5060994 <_gp+0xffff556c>
 5060a4c:	11006317 	ldw	r4,396(r2)
 5060a50:	218cb03a 	or	r6,r4,r6
 5060a54:	11806315 	stw	r6,396(r2)
 5060a58:	003fce06 	br	5060994 <_gp+0xffff556c>
 5060a5c:	18805304 	addi	r2,r3,332
 5060a60:	18805215 	stw	r2,328(r3)
 5060a64:	003fc606 	br	5060980 <_gp+0xffff5558>
 5060a68:	00bfffc4 	movi	r2,-1
 5060a6c:	003fd006 	br	50609b0 <_gp+0xffff5588>

05060a70 <__call_exitprocs>:
 5060a70:	defff504 	addi	sp,sp,-44
 5060a74:	df000915 	stw	fp,36(sp)
 5060a78:	dd400615 	stw	r21,24(sp)
 5060a7c:	dc800315 	stw	r18,12(sp)
 5060a80:	dfc00a15 	stw	ra,40(sp)
 5060a84:	ddc00815 	stw	r23,32(sp)
 5060a88:	dd800715 	stw	r22,28(sp)
 5060a8c:	dd000515 	stw	r20,20(sp)
 5060a90:	dcc00415 	stw	r19,16(sp)
 5060a94:	dc400215 	stw	r17,8(sp)
 5060a98:	dc000115 	stw	r16,4(sp)
 5060a9c:	d9000015 	stw	r4,0(sp)
 5060aa0:	2839883a 	mov	fp,r5
 5060aa4:	04800044 	movi	r18,1
 5060aa8:	057fffc4 	movi	r21,-1
 5060aac:	008141b4 	movhi	r2,1286
 5060ab0:	108d0e04 	addi	r2,r2,13368
 5060ab4:	12000017 	ldw	r8,0(r2)
 5060ab8:	45005217 	ldw	r20,328(r8)
 5060abc:	44c05204 	addi	r19,r8,328
 5060ac0:	a0001c26 	beq	r20,zero,5060b34 <__call_exitprocs+0xc4>
 5060ac4:	a0800117 	ldw	r2,4(r20)
 5060ac8:	15ffffc4 	addi	r23,r2,-1
 5060acc:	b8000d16 	blt	r23,zero,5060b04 <__call_exitprocs+0x94>
 5060ad0:	14000044 	addi	r16,r2,1
 5060ad4:	8421883a 	add	r16,r16,r16
 5060ad8:	8421883a 	add	r16,r16,r16
 5060adc:	84402004 	addi	r17,r16,128
 5060ae0:	a463883a 	add	r17,r20,r17
 5060ae4:	a421883a 	add	r16,r20,r16
 5060ae8:	e0001e26 	beq	fp,zero,5060b64 <__call_exitprocs+0xf4>
 5060aec:	80804017 	ldw	r2,256(r16)
 5060af0:	e0801c26 	beq	fp,r2,5060b64 <__call_exitprocs+0xf4>
 5060af4:	bdffffc4 	addi	r23,r23,-1
 5060af8:	843fff04 	addi	r16,r16,-4
 5060afc:	8c7fff04 	addi	r17,r17,-4
 5060b00:	bd7ff91e 	bne	r23,r21,5060ae8 <_gp+0xffff56c0>
 5060b04:	00814174 	movhi	r2,1285
 5060b08:	10bc2b04 	addi	r2,r2,-3924
 5060b0c:	10000926 	beq	r2,zero,5060b34 <__call_exitprocs+0xc4>
 5060b10:	a0800117 	ldw	r2,4(r20)
 5060b14:	1000301e 	bne	r2,zero,5060bd8 <__call_exitprocs+0x168>
 5060b18:	a0800017 	ldw	r2,0(r20)
 5060b1c:	10003226 	beq	r2,zero,5060be8 <__call_exitprocs+0x178>
 5060b20:	a009883a 	mov	r4,r20
 5060b24:	98800015 	stw	r2,0(r19)
 5060b28:	504f0ac0 	call	504f0ac <free>
 5060b2c:	9d000017 	ldw	r20,0(r19)
 5060b30:	a03fe41e 	bne	r20,zero,5060ac4 <_gp+0xffff569c>
 5060b34:	dfc00a17 	ldw	ra,40(sp)
 5060b38:	df000917 	ldw	fp,36(sp)
 5060b3c:	ddc00817 	ldw	r23,32(sp)
 5060b40:	dd800717 	ldw	r22,28(sp)
 5060b44:	dd400617 	ldw	r21,24(sp)
 5060b48:	dd000517 	ldw	r20,20(sp)
 5060b4c:	dcc00417 	ldw	r19,16(sp)
 5060b50:	dc800317 	ldw	r18,12(sp)
 5060b54:	dc400217 	ldw	r17,8(sp)
 5060b58:	dc000117 	ldw	r16,4(sp)
 5060b5c:	dec00b04 	addi	sp,sp,44
 5060b60:	f800283a 	ret
 5060b64:	a0800117 	ldw	r2,4(r20)
 5060b68:	80c00017 	ldw	r3,0(r16)
 5060b6c:	10bfffc4 	addi	r2,r2,-1
 5060b70:	15c01426 	beq	r2,r23,5060bc4 <__call_exitprocs+0x154>
 5060b74:	80000015 	stw	zero,0(r16)
 5060b78:	183fde26 	beq	r3,zero,5060af4 <_gp+0xffff56cc>
 5060b7c:	95c8983a 	sll	r4,r18,r23
 5060b80:	a0806217 	ldw	r2,392(r20)
 5060b84:	a5800117 	ldw	r22,4(r20)
 5060b88:	2084703a 	and	r2,r4,r2
 5060b8c:	10000b26 	beq	r2,zero,5060bbc <__call_exitprocs+0x14c>
 5060b90:	a0806317 	ldw	r2,396(r20)
 5060b94:	2088703a 	and	r4,r4,r2
 5060b98:	20000c1e 	bne	r4,zero,5060bcc <__call_exitprocs+0x15c>
 5060b9c:	89400017 	ldw	r5,0(r17)
 5060ba0:	d9000017 	ldw	r4,0(sp)
 5060ba4:	183ee83a 	callr	r3
 5060ba8:	a0800117 	ldw	r2,4(r20)
 5060bac:	15bfbf1e 	bne	r2,r22,5060aac <_gp+0xffff5684>
 5060bb0:	98800017 	ldw	r2,0(r19)
 5060bb4:	153fcf26 	beq	r2,r20,5060af4 <_gp+0xffff56cc>
 5060bb8:	003fbc06 	br	5060aac <_gp+0xffff5684>
 5060bbc:	183ee83a 	callr	r3
 5060bc0:	003ff906 	br	5060ba8 <_gp+0xffff5780>
 5060bc4:	a5c00115 	stw	r23,4(r20)
 5060bc8:	003feb06 	br	5060b78 <_gp+0xffff5750>
 5060bcc:	89000017 	ldw	r4,0(r17)
 5060bd0:	183ee83a 	callr	r3
 5060bd4:	003ff406 	br	5060ba8 <_gp+0xffff5780>
 5060bd8:	a0800017 	ldw	r2,0(r20)
 5060bdc:	a027883a 	mov	r19,r20
 5060be0:	1029883a 	mov	r20,r2
 5060be4:	003fb606 	br	5060ac0 <_gp+0xffff5698>
 5060be8:	0005883a 	mov	r2,zero
 5060bec:	003ffb06 	br	5060bdc <_gp+0xffff57b4>

05060bf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5060bf0:	defffd04 	addi	sp,sp,-12
 5060bf4:	df000215 	stw	fp,8(sp)
 5060bf8:	df000204 	addi	fp,sp,8
 5060bfc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5060c00:	0001883a 	nop
 5060c04:	e0bfff17 	ldw	r2,-4(fp)
 5060c08:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5060c0c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5060c10:	10000226 	beq	r2,zero,5060c1c <_exit+0x2c>
    ALT_SIM_FAIL();
 5060c14:	002af070 	cmpltui	zero,zero,43969
 5060c18:	00000106 	br	5060c20 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 5060c1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 5060c20:	003fff06 	br	5060c20 <_gp+0xffff57f8>
 5060c24:	05048900 	call	504890 <__alt_mem_new_sdram_controller_0+0x504890>
