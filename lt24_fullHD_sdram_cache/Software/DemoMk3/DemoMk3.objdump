
DemoMk3.elf:     file format elf32-littlenios2
DemoMk3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000228

Program Header:
    LOAD off    0x00000420 vaddr 0x05001420 paddr 0x00000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00001228 vaddr 0x00000228 paddr 0x00000228 align 2**12
         filesz 0x00013000 memsz 0x00013000 flags r-x
    LOAD off    0x00014228 vaddr 0x00013228 paddr 0x00014d5c align 2**12
         filesz 0x00001b34 memsz 0x00001b34 flags rw-
    LOAD off    0x00016890 vaddr 0x00016890 paddr 0x00016890 align 2**12
         filesz 0x00000000 memsz 0x00005bac flags rw-
    LOAD off    0x00016400 vaddr 0x05001400 paddr 0x05001400 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05001400  05001400  00016400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  05001420  00000000  00000420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010648  00000228  00000228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000029b8  00010870  00010870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  00013228  00014d5c  00014228  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005bac  00016890  00016890  00016890  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0001c43c  0001c43c  00016420  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  05001648  05001648  00016420  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016420  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ec8  00000000  00000000  00016448  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001e2ca  00000000  00000000  00017310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008ac2  00000000  00000000  000355da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b329  00000000  00000000  0003e09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002440  00000000  00000000  000493c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004263  00000000  00000000  0004b808  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000fef0  00000000  00000000  0004fa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0005f95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001580  00000000  00000000  0005f990  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006490d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00064910  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006491c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006491d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006491e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00064922  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00064926  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006492a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00064935  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00064940  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0006494b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005a  00000000  00000000  00064955  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000bb059  00000000  00000000  000649af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05001400 l    d  .entry	00000000 .entry
05001420 l    d  .exceptions	00000000 .exceptions
00000228 l    d  .text	00000000 .text
00010870 l    d  .rodata	00000000 .rodata
00013228 l    d  .rwdata	00000000 .rwdata
00016890 l    d  .bss	00000000 .bss
0001c43c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
05001648 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/vanno/OneDrive/Documents/GitKraken/3D_Graphic_Engine/lt24_fullHD_sdram_cache/Software/DemoMk3_bsp//obj/HAL/src/crt0.o
00000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 accelerometer.cpp
00016894 l     O .bss	00000002 _ZZ24accelerometer_controllervE15slider_data_reg
00016898 l     O .bss	00000004 _ZZ24accelerometer_controllervE5x_acc
0001689c l     O .bss	00000004 _ZZ24accelerometer_controllervE5y_acc
000168a0 l     O .bss	00000002 _ZZ24accelerometer_controllervE15edge_capture_k1
00014d20 l     O .rwdata	00000001 _ZZ24accelerometer_controllervE10command_sw
000168a4 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_rx
000168a8 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_ry
000168ac l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_tx
000168b0 l     O .bss	00000004 _ZZ24accelerometer_controllervE6inc_ty
000168b4 l     O .bss	00000004 _ZZ24accelerometer_controllervE5z_acc
00000000 l    df *ABS*	00000000 functions.cpp
00000000 l    df *ABS*	00000000 graphic_object.cpp
00000000 l    df *ABS*	00000000 main.cpp
00003788 l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
000037dc l     F .text	00000030 _GLOBAL__sub_I_pixel_buf_dma_dev
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 s_tan.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00012f40 l     O .rodata	00000108 two_over_pi
00012ec0 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00013088 l     O .rodata	00000010 init_jk
00013048 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 k_tan.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0000a350 l     F .text	00000008 __fp_unlock
0000a364 l     F .text	0000019c __sinit.part.1
0000a500 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013228 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cb88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cc94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ccc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cdac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ce8c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000cf78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d14c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014d4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d4cc l     F .text	00000034 alt_dev_reg
00013bfc l     O .rwdata	00001060 jtag_uart_0
00014c5c l     O .rwdata	0000002c accelerometer_spi
00014c88 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00014cdc l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000da98 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000dca8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e2e0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f8c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000fb24 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000fde4 l     F .text	0000003c alt_get_errno
0000fe20 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001fe4 g     F .text	00000634 _ZN7Cube_3D22vector_matrix_multiplyEv
000168ec g     O .bss	00000004 alt_instruction_exception_handler
0000cb34 g     F .text	00000054 _isatty_r
0000d088 g     F .text	0000007c alt_main
0000f16c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0000a1e4 g     F .text	000000c0 _puts_r
0001c33c g     O .bss	00000100 alt_irq
00005e18 g     F .text	00000014 fabs
0000c85c g     F .text	00000060 _lseek_r
00014d5c g       *ABS*	00000000 __flash_rwdata_start
00008984 g     F .text	00000088 .hidden __eqdf2
0001c43c g       *ABS*	00000000 __alt_heap_start
0000be10 g     F .text	0000005c __sseek
0000a6a0 g     F .text	00000010 __sinit
0000a508 g     F .text	00000068 __sfmoreglue
0000d128 g     F .text	00000024 __malloc_unlock
0000684c g     F .text	00000440 .hidden __divsf3
000168dc g     O .bss	00000004 altera_avalon_timer_ts_freq
0000b624 g     F .text	0000015c memmove
0000a688 g     F .text	00000018 _cleanup
0000756c g     F .text	00000070 .hidden __fixsfsi
0000e8d4 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
00008a0c g     F .text	000000dc .hidden __gtdf2
000101dc g     F .text	00000024 altera_nios2_gen2_irq_init
0000e898 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
05001400 g     F .entry	0000001c __reset
00001804 g     F .text	000002b8 _ZN7Cube_3D24update_rotation_relativeEfi
0000e634 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00000000 g       *ABS*	00000000 __flash_exceptions_start
0000cad8 g     F .text	0000005c _fstat_r
000168c8 g     O .bss	00000004 errno
00005e2c g     F .text	000001ec floor
0000bd8c g     F .text	00000008 __seofread
000168d0 g     O .bss	00000004 alt_argv
0001cd20 g       *ABS*	00000000 _gp
00007088 g     F .text	000004e4 .hidden __subsf3
0000ea68 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
000012b4 g     F .text	000000f0 _ZN7Cube_3D27update_translation_relativeEfi
00013a7c g     O .rwdata	00000180 alt_fd_list
00003b40 g     F .text	0000076c __ieee754_rem_pio2
0000fa60 g     F .text	00000090 alt_find_dev
00009f74 g     F .text	00000148 memcpy
000002d0 g     F .text	00000360 _Z24accelerometer_controllerv
0000a358 g     F .text	0000000c _cleanup_r
00009b7c g     F .text	000000dc .hidden __floatsidf
0000fbe8 g     F .text	0000007c alt_io_redirect
00010870 g       *ABS*	00000000 __DTOR_END__
0000a2a4 g     F .text	00000014 puts
0001043c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000eb24 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000dea0 g     F .text	0000021c altera_avalon_jtag_uart_read
05001400 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000062c8 g     F .text	00000064 .hidden __udivsi3
0000cde8 g     F .text	000000a4 isatty
0000ef5c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
000042ac g     F .text	000004a4 __kernel_cos
000103ac g     F .text	00000090 alt_icache_flush
000168c4 g     O .bss	00000004 __malloc_top_pad
00002618 g     F .text	00000fa4 _ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_
0000a6f0 g     F .text	000004bc __sfvwrite_r
0000175c g     F .text	000000a8 _ZN7Cube_3D15update_rotationEfi
0000bce4 g     F .text	00000054 _sbrk_r
0000f480 g     F .text	00000084 helper_plot_pixel
0000ca78 g     F .text	00000060 _read_r
00014d44 g     O .rwdata	00000004 alt_max_fd
0000c07c g     F .text	000000f0 _fclose_r
0000c3f8 g     F .text	00000030 fflush
000168c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000fc64 g     F .text	00000180 alt_irq_register
000054e0 g     F .text	000002cc __kernel_sin
00009c58 g     F .text	00000110 .hidden __extendsfdf2
000077f0 g     F .text	000008ac .hidden __adddf3
0000eb58 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0000cfb4 g     F .text	000000d4 lseek
00014d24 g     O .rwdata	00000004 _global_impure_ptr
0000b780 g     F .text	00000564 _realloc_r
0001c43c g       *ABS*	00000000 __bss_end
0000ec80 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
000100d4 g     F .text	00000108 alt_tick
00001bdc g     F .text	000000f0 _ZN7Cube_3D23update_scaling_relativeEfi
0000a6c0 g     F .text	00000018 __fp_lock_all
00010038 g     F .text	0000009c alt_alarm_stop
00001abc g     F .text	00000078 _ZN7Cube_3D14update_scalingEfff
000168e0 g     O .bss	00000004 alt_irq_active
050014fc g     F .exceptions	000000d8 alt_irq_handler
00013a54 g     O .rwdata	00000028 alt_dev_null
00004750 g     F .text	00000d90 __kernel_rem_pio2
0000f878 g     F .text	00000048 alt_dcache_flush_all
0000f3b8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00009afc g     F .text	00000080 .hidden __fixdfsi
00014d5c g       *ABS*	00000000 __ram_rwdata_end
000168f0 g     O .bss	00005a24 Cube
00014d3c g     O .rwdata	00000008 alt_dev_list
0000d3d4 g     F .text	000000f8 write
0000e4c8 g     F .text	00000020 alt_timestamp_freq
0000f504 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00013228 g       *ABS*	00000000 __ram_rodata_end
0000ccfc g     F .text	000000b0 fstat
0000632c g     F .text	00000058 .hidden __umodsi3
0001c43c g       *ABS*	00000000 end
00016890 g     O .bss	00000004 accelerometer_dev
0000d9e4 g     F .text	000000b4 altera_avalon_jtag_uart_init
050015d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001086c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e35c g     F .text	00000074 alt_avalon_timer_sc_init
00009f10 g     F .text	00000064 .hidden __clzsi2
0000361c g     F .text	00000100 _Z11display_fpsm
0000e0bc g     F .text	00000224 altera_avalon_jtag_uart_write
000038c4 g     F .text	000000ec cos
0000a6b0 g     F .text	00000004 __sfp_lock_acquire
0000b540 g     F .text	000000e4 memchr
0000c54c g     F .text	00000310 _free_r
00001b34 g     F .text	000000a8 _ZN7Cube_3D14update_scalingEfi
000106b8 g     F .text	00000180 __call_exitprocs
000007c8 g     F .text	00000084 _Z35helper_plot_pixel_enhanced_clippingjiiiii
00014d2c g     O .rwdata	00000004 __malloc_sbrk_base
00000228 g     F .text	0000004c _start
000168e4 g     O .bss	00000004 _alt_tick_rate
000168b8 g     O .bss	00000004 pixel_buf_dma_dev
000039b0 g     F .text	000000f0 sin
000168e8 g     O .bss	00000004 _alt_nticks
0000d188 g     F .text	000000fc read
0000d538 g     F .text	00000348 alt_sys_init
0000e524 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000075dc g     F .text	00000124 .hidden __floatsisf
000105a0 g     F .text	00000118 __register_exitproc
000035bc g     F .text	00000060 _Z13display_digith
0000dd48 g     F .text	00000068 altera_avalon_jtag_uart_close
00013228 g       *ABS*	00000000 __ram_rwdata_start
00010870 g       *ABS*	00000000 __ram_rodata_start
0001c314 g     O .bss	00000028 __malloc_current_mallinfo
0000120c g     F .text	000000a8 _ZN7Cube_3D18update_translationEfi
00000bd0 g     F .text	000005c4 _ZN7Cube_3DC1Ev
0000d880 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010308 g     F .text	000000a4 alt_get_fd
0000e700 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
0000c028 g     F .text	00000054 _close_r
00010524 g     F .text	0000007c memcmp
0000d940 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001c43c g       *ABS*	00000000 __alt_stack_base
0000d990 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000bed4 g     F .text	00000154 __swsetup_r
0000809c g     F .text	000008e8 .hidden __divdf3
0000a570 g     F .text	00000118 __sfp
0001364c g     O .rwdata	00000408 __malloc_av_
0000a6bc g     F .text	00000004 __sinit_lock_release
00008ae8 g     F .text	00000718 .hidden __muldf3
0000bd38 g     F .text	00000054 __sread
00010200 g     F .text	00000108 alt_find_file
0000f8fc g     F .text	000000a4 alt_dev_llist_insert
0000d104 g     F .text	00000024 __malloc_lock
0000d2e8 g     F .text	000000b0 sbrk
0000c39c g     F .text	0000005c _fflush_r
00016890 g       *ABS*	00000000 __bss_start
0000a0bc g     F .text	00000128 memset
0000371c g     F .text	0000006c main
00001194 g     F .text	00000078 _ZN7Cube_3D18update_translationEfff
000168d4 g     O .bss	00000004 alt_envp
000168bc g     O .bss	00000004 __malloc_max_total_mem
0000eac4 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0000d8e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000274 g     F .text	0000005c _Z18init_accelerometerv
0000be6c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c16c g     F .text	00000014 fclose
00009d68 g     F .text	000001a8 .hidden __truncdfsf2
0000e3d0 g     F .text	00000078 alt_timestamp_start
0000ad34 g     F .text	0000080c _malloc_r
00014d48 g     O .rwdata	00000004 alt_errno
0000abac g     F .text	000000c4 _fwalk
000061d0 g     F .text	00000084 .hidden __divsi3
0000c428 g     F .text	00000124 _malloc_trim_r
00010870 g       *ABS*	00000000 __CTOR_END__
00006c8c g     F .text	000003fc .hidden __mulsf3
00010870 g       *ABS*	00000000 __flash_rodata_start
00010870 g       *ABS*	00000000 __DTOR_LIST__
00003aa0 g     F .text	000000a0 tan
000061b4 g     F .text	0000001c copysign
00000bd0 g     F .text	000005c4 _ZN7Cube_3DC2Ev
00008984 g     F .text	00000088 .hidden __nedf2
0000d500 g     F .text	00000038 alt_irq_init
0000d284 g     F .text	00000064 alt_release_fd
00013098 g     O .rodata	00000100 .hidden __clz_tab
000104d8 g     F .text	00000014 atexit
0000be74 g     F .text	00000060 _write_r
0000380c  w    F .text	000000b8 _ZN7Cube_3D19calculate_renderingEv
00014d28 g     O .rwdata	00000004 _impure_ptr
000168cc g     O .bss	00000004 alt_argc
0000c180 g     F .text	0000021c __sflush_r
00006018 g     F .text	0000019c scalbn
000168d8 g     O .bss	00000004 altera_avalon_timer_ts_base
0000fa00 g     F .text	00000060 _do_dtors
05001420 g       .exceptions	00000000 alt_irq_entry
0000a6d8 g     F .text	00000018 __fp_unlock_all
00014d34 g     O .rwdata	00000008 alt_fs_list
05001420 g       *ABS*	00000000 __ram_exceptions_start
0000e4e8 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
0000e448 g     F .text	00000080 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00014d5c g       *ABS*	00000000 _edata
0001c43c g       *ABS*	00000000 _end
05001648 g       *ABS*	00000000 __ram_exceptions_end
0000ddb0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000bd94 g     F .text	0000007c __swrite
00014d30 g     O .rwdata	00000004 __malloc_trim_threshold
000104ec g     F .text	00000038 exit
0000ac70 g     F .text	000000c4 _fwalk_reent
00007700 g     F .text	000000f0 .hidden __floatunsisf
00006254 g     F .text	00000074 .hidden __modsi3
0000e7cc g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
04000000 g       *ABS*	00000000 __alt_data_end
05001420 g     F .exceptions	00000000 alt_exception
0000a6b4 g     F .text	00000004 __sfp_lock_release
00010838 g     F .text	00000034 _exit
0000f74c g     F .text	0000012c alt_alarm_start
0000e568 g     F .text	00000068 alt_up_accelerometer_spi_read
0000e5d0 g     F .text	00000064 alt_up_accelerometer_spi_write
0000c8bc g     F .text	000001bc __smakebuf_r
0000a2b8 g     F .text	00000098 strlen
0000fee4 g     F .text	00000154 open
00008a0c g     F .text	000000dc .hidden __gedf2
0000faf0 g     F .text	00000034 alt_icache_flush_all
00014d50 g     O .rwdata	00000004 alt_priority_mask
000013a4 g     F .text	000003b8 _ZN7Cube_3D15update_rotationEfff
0000084c g     F .text	00000384 _Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii
00000630 g     F .text	00000198 _Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi
00009200 g     F .text	000008fc .hidden __subdf3
00001ccc g     F .text	00000318 _ZN7Cube_3D13display_frameEv
00014d54 g     O .rwdata	00000008 alt_alarm_list
000057ac g     F .text	0000066c __kernel_tan
0000f9a0 g     F .text	00000060 _do_ctors
0000cbc4 g     F .text	000000d0 close
00006384 g     F .text	000004c8 .hidden __addsf3
0000cef4 g     F .text	00000084 alt_load
0000a6b8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

05001400 <__reset>:
 */

#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
 5001400:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_ICACHE_SIZE
#endif

0:
    initi r2
 5001404:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5001408:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 500140c:	00bffd16 	blt	zero,r2,5001404 <__ram_exceptions_end+0xfffffdbc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5001410:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 5001414:	08408a14 	ori	at,at,552
    jmp r1
 5001418:	0800683a 	jmp	at
 500141c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>

Disassembly of section .exceptions:

05001420 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5001420:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5001424:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5001428:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500142c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5001430:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5001434:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5001438:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500143c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5001440:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5001444:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5001448:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500144c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5001450:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5001454:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5001458:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500145c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5001460:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5001464:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5001468:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500146c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5001470:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5001474:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5001478:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500147c:	10000326 	beq	r2,zero,500148c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5001480:	20000226 	beq	r4,zero,500148c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5001484:	50014fc0 	call	50014fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5001488:	00000706 	br	50014a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500148c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5001490:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5001494:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5001498:	50015d40 	call	50015d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500149c:	1000021e 	bne	r2,zero,50014a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50014a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50014a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50014a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50014ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50014b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50014b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50014b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50014bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50014c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50014c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50014c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50014cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50014d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50014d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50014d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50014dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50014e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50014e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50014e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50014ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50014f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50014f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50014f8:	ef80083a 	eret

050014fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50014fc:	defff904 	addi	sp,sp,-28
 5001500:	dfc00615 	stw	ra,24(sp)
 5001504:	df000515 	stw	fp,20(sp)
 5001508:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500150c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5001510:	0005313a 	rdctl	r2,ipending
 5001514:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5001518:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500151c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5001520:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5001524:	00800044 	movi	r2,1
 5001528:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500152c:	e0fffb17 	ldw	r3,-20(fp)
 5001530:	e0bffc17 	ldw	r2,-16(fp)
 5001534:	1884703a 	and	r2,r3,r2
 5001538:	10001526 	beq	r2,zero,5001590 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 500153c:	008000b4 	movhi	r2,2
 5001540:	10b0cf04 	addi	r2,r2,-15556
 5001544:	e0fffd17 	ldw	r3,-12(fp)
 5001548:	180690fa 	slli	r3,r3,3
 500154c:	10c5883a 	add	r2,r2,r3
 5001550:	10c00017 	ldw	r3,0(r2)
 5001554:	008000b4 	movhi	r2,2
 5001558:	10b0cf04 	addi	r2,r2,-15556
 500155c:	e13ffd17 	ldw	r4,-12(fp)
 5001560:	200890fa 	slli	r4,r4,3
 5001564:	1105883a 	add	r2,r2,r4
 5001568:	10800104 	addi	r2,r2,4
 500156c:	10800017 	ldw	r2,0(r2)
 5001570:	e17ffd17 	ldw	r5,-12(fp)
 5001574:	1009883a 	mov	r4,r2
 5001578:	183ee83a 	callr	r3
#endif
        break;
 500157c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5001580:	0005313a 	rdctl	r2,ipending
 5001584:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5001588:	e0bfff17 	ldw	r2,-4(fp)
 500158c:	00000706 	br	50015ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 5001590:	e0bffc17 	ldw	r2,-16(fp)
 5001594:	1085883a 	add	r2,r2,r2
 5001598:	e0bffc15 	stw	r2,-16(fp)
      i++;
 500159c:	e0bffd17 	ldw	r2,-12(fp)
 50015a0:	10800044 	addi	r2,r2,1
 50015a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50015a8:	003fe006 	br	500152c <__ram_exceptions_end+0xfffffee4>

    active = alt_irq_pending ();
 50015ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50015b0:	e0bffb17 	ldw	r2,-20(fp)
 50015b4:	103fda1e 	bne	r2,zero,5001520 <__ram_exceptions_end+0xfffffed8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50015b8:	0001883a 	nop
}
 50015bc:	0001883a 	nop
 50015c0:	e037883a 	mov	sp,fp
 50015c4:	dfc00117 	ldw	ra,4(sp)
 50015c8:	df000017 	ldw	fp,0(sp)
 50015cc:	dec00204 	addi	sp,sp,8
 50015d0:	f800283a 	ret

050015d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50015d4:	defffb04 	addi	sp,sp,-20
 50015d8:	dfc00415 	stw	ra,16(sp)
 50015dc:	df000315 	stw	fp,12(sp)
 50015e0:	df000304 	addi	fp,sp,12
 50015e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 50015e8:	000531fa 	rdctl	r2,exception
 50015ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 50015f0:	e0bffd17 	ldw	r2,-12(fp)
 50015f4:	10801f0c 	andi	r2,r2,124
 50015f8:	1004d0ba 	srli	r2,r2,2
 50015fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 5001600:	0005333a 	rdctl	r2,badaddr
 5001604:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 5001608:	d0a6f317 	ldw	r2,-25652(gp)
 500160c:	10000726 	beq	r2,zero,500162c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 5001610:	d0a6f317 	ldw	r2,-25652(gp)
 5001614:	e0fffd17 	ldw	r3,-12(fp)
 5001618:	e1bffe17 	ldw	r6,-8(fp)
 500161c:	e17fff17 	ldw	r5,-4(fp)
 5001620:	1809883a 	mov	r4,r3
 5001624:	103ee83a 	callr	r2
 5001628:	00000206 	br	5001634 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 500162c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 5001630:	0005883a 	mov	r2,zero
}
 5001634:	e037883a 	mov	sp,fp
 5001638:	dfc00117 	ldw	ra,4(sp)
 500163c:	df000017 	ldw	fp,0(sp)
 5001640:	dec00204 	addi	sp,sp,8
 5001644:	f800283a 	ret

Disassembly of section .text:

00000228 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
     228:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
     22c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     234:	00bffd16 	blt	zero,r2,22c <__ram_exceptions_end+0xfaffebe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     238:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     23c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     240:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     244:	d6b34814 	ori	gp,gp,52512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     248:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     24c:	109a2414 	ori	r2,r2,26768

    movhi r3, %hi(__bss_end)
     250:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     254:	18f10f14 	ori	r3,r3,50236

    beq r2, r3, 1f
     258:	10c00326 	beq	r2,r3,268 <_start+0x40>

0:
    stw zero, (r2)
     25c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     264:	10fffd36 	bltu	r2,r3,25c <__ram_exceptions_end+0xfaffec14>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     268:	000cef40 	call	cef4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     26c:	000d0880 	call	d088 <alt_main>

00000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     270:	003fff06 	br	270 <__ram_exceptions_end+0xfaffec28>

00000274 <_Z18init_accelerometerv>:

alt_up_accelerometer_spi_dev * accelerometer_dev;

extern Cube_3D Cube;

void init_accelerometer(){
     274:	defffe04 	addi	sp,sp,-8
     278:	dfc00115 	stw	ra,4(sp)
     27c:	df000015 	stw	fp,0(sp)
     280:	d839883a 	mov	fp,sp
    accelerometer_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi");
     284:	01000074 	movhi	r4,1
     288:	21021c04 	addi	r4,r4,2160
     28c:	000e4e80 	call	e4e8 <alt_up_accelerometer_spi_open_dev>
     290:	d0a6dc15 	stw	r2,-25744(gp)
    //#ifdef DEBUG_ACC
    if ( accelerometer_dev == NULL)
     294:	d0a6dc17 	ldw	r2,-25744(gp)
     298:	1000041e 	bne	r2,zero,2ac <_Z18init_accelerometerv+0x38>
        printf ("Error: could not open acc device \n");
     29c:	01000074 	movhi	r4,1
     2a0:	21022204 	addi	r4,r4,2184
     2a4:	000a2a40 	call	a2a4 <puts>
    else
        printf ("Opened acc device \n");
//#endif
}
     2a8:	00000306 	br	2b8 <_Z18init_accelerometerv+0x44>
    accelerometer_dev = alt_up_accelerometer_spi_open_dev ("/dev/accelerometer_spi");
    //#ifdef DEBUG_ACC
    if ( accelerometer_dev == NULL)
        printf ("Error: could not open acc device \n");
    else
        printf ("Opened acc device \n");
     2ac:	01000074 	movhi	r4,1
     2b0:	21022b04 	addi	r4,r4,2220
     2b4:	000a2a40 	call	a2a4 <puts>
//#endif
}
     2b8:	0001883a 	nop
     2bc:	e037883a 	mov	sp,fp
     2c0:	dfc00117 	ldw	ra,4(sp)
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00204 	addi	sp,sp,8
     2cc:	f800283a 	ret

000002d0 <_Z24accelerometer_controllerv>:



void accelerometer_controller(){
     2d0:	defffe04 	addi	sp,sp,-8
     2d4:	dfc00115 	stw	ra,4(sp)
     2d8:	df000015 	stw	fp,0(sp)
     2dc:	d839883a 	mov	fp,sp

    static float inc_rx=0;
    static float inc_ry=0;


    slider_data_reg = IORD_ALTERA_AVALON_PIO_DATA(SLIDERS_BASE);
     2e0:	00814034 	movhi	r2,1280
     2e4:	10861c04 	addi	r2,r2,6256
     2e8:	10800037 	ldwio	r2,0(r2)
     2ec:	d0a6dd0d 	sth	r2,-25740(gp)
    alt_up_accelerometer_spi_read_x_axis(accelerometer_dev, &x_acc);
     2f0:	d0a6dc17 	ldw	r2,-25744(gp)
     2f4:	d166de04 	addi	r5,gp,-25736
     2f8:	1009883a 	mov	r4,r2
     2fc:	000e6340 	call	e634 <alt_up_accelerometer_spi_read_x_axis>
    alt_up_accelerometer_spi_read_y_axis(accelerometer_dev, &y_acc);
     300:	d0a6dc17 	ldw	r2,-25744(gp)
     304:	d166df04 	addi	r5,gp,-25732
     308:	1009883a 	mov	r4,r2
     30c:	000e7000 	call	e700 <alt_up_accelerometer_spi_read_y_axis>
    
    //uso key1 per passare dal controllo della rotazione a quello della traslazione tramite accelerometro
    edge_capture_k1 =  IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & BIT(KEY1);
     310:	00814034 	movhi	r2,1280
     314:	10862304 	addi	r2,r2,6284
     318:	10800037 	ldwio	r2,0(r2)
     31c:	1080004c 	andi	r2,r2,1
     320:	d0a6e00d 	sth	r2,-25728(gp)
    if( edge_capture_k1 ) {
     324:	d0a6e00b 	ldhu	r2,-25728(gp)
     328:	10bfffcc 	andi	r2,r2,65535
     32c:	10000826 	beq	r2,zero,350 <_Z24accelerometer_controllerv+0x80>
        command_sw=!command_sw;
     330:	d0a00003 	ldbu	r2,-32768(gp)
     334:	1080005c 	xori	r2,r2,1
     338:	d0a00005 	stb	r2,-32768(gp)
        edge_capture_k1 = 0;
     33c:	d026e00d 	sth	zero,-25728(gp)
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, BIT(KEY1));
     340:	00c00044 	movi	r3,1
     344:	00814034 	movhi	r2,1280
     348:	10862304 	addi	r2,r2,6284
     34c:	10c00035 	stwio	r3,0(r2)
    }
    //ROTAZIONE
    if(command_sw){
     350:	d0a00003 	ldbu	r2,-32768(gp)
     354:	10803fcc 	andi	r2,r2,255
     358:	10003726 	beq	r2,zero,438 <_Z24accelerometer_controllerv+0x168>
        if( ABS(x_acc) > ACC_TH || ABS(y_acc) > ACC_TH){    // ACC_TH è una soglia per filtrare un po' l'accelerometro e evitare che anche in piano il cubo si muova
     35c:	d0a6de17 	ldw	r2,-25736(gp)
     360:	1000010e 	bge	r2,zero,368 <_Z24accelerometer_controllerv+0x98>
     364:	0085c83a 	sub	r2,zero,r2
     368:	10800148 	cmpgei	r2,r2,5
     36c:	1000051e 	bne	r2,zero,384 <_Z24accelerometer_controllerv+0xb4>
     370:	d0a6df17 	ldw	r2,-25732(gp)
     374:	1000010e 	bge	r2,zero,37c <_Z24accelerometer_controllerv+0xac>
     378:	0085c83a 	sub	r2,zero,r2
     37c:	10800150 	cmplti	r2,r2,5
     380:	1000641e 	bne	r2,zero,514 <_Z24accelerometer_controllerv+0x244>
            inc_rx= (float)y_acc / G_ACC * MAX_INC_R;
     384:	d0a6df17 	ldw	r2,-25732(gp)
     388:	1009883a 	mov	r4,r2
     38c:	00075dc0 	call	75dc <__floatsisf>
     390:	1007883a 	mov	r3,r2
     394:	0150dfb4 	movhi	r5,17278
     398:	1809883a 	mov	r4,r3
     39c:	000684c0 	call	684c <__divsf3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	1805883a 	mov	r2,r3
     3a8:	014fa874 	movhi	r5,16033
     3ac:	29765f04 	addi	r5,r5,-9860
     3b0:	1009883a 	mov	r4,r2
     3b4:	0006c8c0 	call	6c8c <__mulsf3>
     3b8:	1007883a 	mov	r3,r2
     3bc:	1805883a 	mov	r2,r3
     3c0:	d0a6e115 	stw	r2,-25724(gp)
            Cube.update_rotation_relative( inc_rx, X);
     3c4:	d0a6e117 	ldw	r2,-25724(gp)
     3c8:	000d883a 	mov	r6,zero
     3cc:	100b883a 	mov	r5,r2
     3d0:	01000074 	movhi	r4,1
     3d4:	211a3c04 	addi	r4,r4,26864
     3d8:	00018040 	call	1804 <_ZN7Cube_3D24update_rotation_relativeEfi>
            inc_ry= (float)x_acc / G_ACC * MAX_INC_R;
     3dc:	d0a6de17 	ldw	r2,-25736(gp)
     3e0:	1009883a 	mov	r4,r2
     3e4:	00075dc0 	call	75dc <__floatsisf>
     3e8:	1007883a 	mov	r3,r2
     3ec:	0150dfb4 	movhi	r5,17278
     3f0:	1809883a 	mov	r4,r3
     3f4:	000684c0 	call	684c <__divsf3>
     3f8:	1007883a 	mov	r3,r2
     3fc:	1805883a 	mov	r2,r3
     400:	014fa874 	movhi	r5,16033
     404:	29765f04 	addi	r5,r5,-9860
     408:	1009883a 	mov	r4,r2
     40c:	0006c8c0 	call	6c8c <__mulsf3>
     410:	1007883a 	mov	r3,r2
     414:	1805883a 	mov	r2,r3
     418:	d0a6e215 	stw	r2,-25720(gp)
            Cube.update_rotation_relative( inc_ry, Z);
     41c:	d0a6e217 	ldw	r2,-25720(gp)
     420:	01800084 	movi	r6,2
     424:	100b883a 	mov	r5,r2
     428:	01000074 	movhi	r4,1
     42c:	211a3c04 	addi	r4,r4,26864
     430:	00018040 	call	1804 <_ZN7Cube_3D24update_rotation_relativeEfi>
     434:	00003706 	br	514 <_Z24accelerometer_controllerv+0x244>
        }
    }
    //TRASLAZIONE
    else{
        if( ABS(x_acc) > ACC_TH || ABS(y_acc) > ACC_TH){
     438:	d0a6de17 	ldw	r2,-25736(gp)
     43c:	1000010e 	bge	r2,zero,444 <_Z24accelerometer_controllerv+0x174>
     440:	0085c83a 	sub	r2,zero,r2
     444:	10800148 	cmpgei	r2,r2,5
     448:	1000051e 	bne	r2,zero,460 <_Z24accelerometer_controllerv+0x190>
     44c:	d0a6df17 	ldw	r2,-25732(gp)
     450:	1000010e 	bge	r2,zero,458 <_Z24accelerometer_controllerv+0x188>
     454:	0085c83a 	sub	r2,zero,r2
     458:	10800150 	cmplti	r2,r2,5
     45c:	10002d1e 	bne	r2,zero,514 <_Z24accelerometer_controllerv+0x244>
            inc_tx= (float)-x_acc / G_ACC * MAX_INC_T;
     460:	d0a6de17 	ldw	r2,-25736(gp)
     464:	0085c83a 	sub	r2,zero,r2
     468:	1009883a 	mov	r4,r2
     46c:	00075dc0 	call	75dc <__floatsisf>
     470:	1007883a 	mov	r3,r2
     474:	0150dfb4 	movhi	r5,17278
     478:	1809883a 	mov	r4,r3
     47c:	000684c0 	call	684c <__divsf3>
     480:	1007883a 	mov	r3,r2
     484:	1805883a 	mov	r2,r3
     488:	014f4934 	movhi	r5,15652
     48c:	2975c284 	addi	r5,r5,-10486
     490:	1009883a 	mov	r4,r2
     494:	0006c8c0 	call	6c8c <__mulsf3>
     498:	1007883a 	mov	r3,r2
     49c:	1805883a 	mov	r2,r3
     4a0:	d0a6e315 	stw	r2,-25716(gp)
            Cube.update_translation_relative(inc_tx , X);
     4a4:	d0a6e317 	ldw	r2,-25716(gp)
     4a8:	000d883a 	mov	r6,zero
     4ac:	100b883a 	mov	r5,r2
     4b0:	01000074 	movhi	r4,1
     4b4:	211a3c04 	addi	r4,r4,26864
     4b8:	00012b40 	call	12b4 <_ZN7Cube_3D27update_translation_relativeEfi>
            inc_ty= (float)y_acc / G_ACC * MAX_INC_T;
     4bc:	d0a6df17 	ldw	r2,-25732(gp)
     4c0:	1009883a 	mov	r4,r2
     4c4:	00075dc0 	call	75dc <__floatsisf>
     4c8:	1007883a 	mov	r3,r2
     4cc:	0150dfb4 	movhi	r5,17278
     4d0:	1809883a 	mov	r4,r3
     4d4:	000684c0 	call	684c <__divsf3>
     4d8:	1007883a 	mov	r3,r2
     4dc:	1805883a 	mov	r2,r3
     4e0:	014f4934 	movhi	r5,15652
     4e4:	2975c284 	addi	r5,r5,-10486
     4e8:	1009883a 	mov	r4,r2
     4ec:	0006c8c0 	call	6c8c <__mulsf3>
     4f0:	1007883a 	mov	r3,r2
     4f4:	1805883a 	mov	r2,r3
     4f8:	d0a6e415 	stw	r2,-25712(gp)
            Cube.update_translation_relative(inc_ty , Y);
     4fc:	d0a6e417 	ldw	r2,-25712(gp)
     500:	01800044 	movi	r6,1
     504:	100b883a 	mov	r5,r2
     508:	01000074 	movhi	r4,1
     50c:	211a3c04 	addi	r4,r4,26864
     510:	00012b40 	call	12b4 <_ZN7Cube_3D27update_translation_relativeEfi>
        } 
    }
    //SCALA
    if(slider_data_reg & BIT(9)){                       //il segno dell'incremento della scala sta su slider9    
     514:	d0a6dd0b 	ldhu	r2,-25740(gp)
     518:	10bfffcc 	andi	r2,r2,65535
     51c:	1080800c 	andi	r2,r2,512
     520:	10001f26 	beq	r2,zero,5a0 <_Z24accelerometer_controllerv+0x2d0>
        if(slider_data_reg & BIT(0)){                   //scala x
     524:	d0a6dd0b 	ldhu	r2,-25740(gp)
     528:	10bfffcc 	andi	r2,r2,65535
     52c:	1080004c 	andi	r2,r2,1
     530:	10000626 	beq	r2,zero,54c <_Z24accelerometer_controllerv+0x27c>
            Cube.update_scaling_relative( INC_S , X );
     534:	000d883a 	mov	r6,zero
     538:	014f5374 	movhi	r5,15693
     53c:	29733344 	addi	r5,r5,-13107
     540:	01000074 	movhi	r4,1
     544:	211a3c04 	addi	r4,r4,26864
     548:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(1)){                   //scala y
     54c:	d0a6dd0b 	ldhu	r2,-25740(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1080008c 	andi	r2,r2,2
     558:	10000626 	beq	r2,zero,574 <_Z24accelerometer_controllerv+0x2a4>
            Cube.update_scaling_relative( INC_S , Y );
     55c:	01800044 	movi	r6,1
     560:	014f5374 	movhi	r5,15693
     564:	29733344 	addi	r5,r5,-13107
     568:	01000074 	movhi	r4,1
     56c:	211a3c04 	addi	r4,r4,26864
     570:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(2)){                   //scala z
     574:	d0a6dd0b 	ldhu	r2,-25740(gp)
     578:	10bfffcc 	andi	r2,r2,65535
     57c:	1080010c 	andi	r2,r2,4
     580:	10002526 	beq	r2,zero,618 <_Z24accelerometer_controllerv+0x348>
            Cube.update_scaling_relative( INC_S , Z );
     584:	01800084 	movi	r6,2
     588:	014f5374 	movhi	r5,15693
     58c:	29733344 	addi	r5,r5,-13107
     590:	01000074 	movhi	r4,1
     594:	211a3c04 	addi	r4,r4,26864
     598:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
    }
    #ifdef DEBUG_ACC
    printf("%f %f \n", inc_rx, inc_rz );
    #endif

}
     59c:	00001e06 	br	618 <_Z24accelerometer_controllerv+0x348>
        if(slider_data_reg & BIT(2)){                   //scala z
            Cube.update_scaling_relative( INC_S , Z );
        }
    }
    else {                                              //incremento negativo
        if(slider_data_reg & BIT(0)){ 
     5a0:	d0a6dd0b 	ldhu	r2,-25740(gp)
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	1080004c 	andi	r2,r2,1
     5ac:	10000626 	beq	r2,zero,5c8 <_Z24accelerometer_controllerv+0x2f8>
            Cube.update_scaling_relative( -INC_S , X );
     5b0:	000d883a 	mov	r6,zero
     5b4:	016f5374 	movhi	r5,48461
     5b8:	29733344 	addi	r5,r5,-13107
     5bc:	01000074 	movhi	r4,1
     5c0:	211a3c04 	addi	r4,r4,26864
     5c4:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(1)){ 
     5c8:	d0a6dd0b 	ldhu	r2,-25740(gp)
     5cc:	10bfffcc 	andi	r2,r2,65535
     5d0:	1080008c 	andi	r2,r2,2
     5d4:	10000626 	beq	r2,zero,5f0 <_Z24accelerometer_controllerv+0x320>
            Cube.update_scaling_relative( -INC_S , Y );
     5d8:	01800044 	movi	r6,1
     5dc:	016f5374 	movhi	r5,48461
     5e0:	29733344 	addi	r5,r5,-13107
     5e4:	01000074 	movhi	r4,1
     5e8:	211a3c04 	addi	r4,r4,26864
     5ec:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
        }
        if(slider_data_reg & BIT(2)){ 
     5f0:	d0a6dd0b 	ldhu	r2,-25740(gp)
     5f4:	10bfffcc 	andi	r2,r2,65535
     5f8:	1080010c 	andi	r2,r2,4
     5fc:	10000626 	beq	r2,zero,618 <_Z24accelerometer_controllerv+0x348>
            Cube.update_scaling_relative( -INC_S , Z );
     600:	01800084 	movi	r6,2
     604:	016f5374 	movhi	r5,48461
     608:	29733344 	addi	r5,r5,-13107
     60c:	01000074 	movhi	r4,1
     610:	211a3c04 	addi	r4,r4,26864
     614:	0001bdc0 	call	1bdc <_ZN7Cube_3D23update_scaling_relativeEfi>
    }
    #ifdef DEBUG_ACC
    printf("%f %f \n", inc_rx, inc_rz );
    #endif

}
     618:	0001883a 	nop
     61c:	e037883a 	mov	sp,fp
     620:	dfc00117 	ldw	ra,4(sp)
     624:	df000017 	ldw	fp,0(sp)
     628:	dec00204 	addi	sp,sp,8
     62c:	f800283a 	ret

00000630 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi>:



void alt_up_pixel_buffer_dma_clear_screen_delayed(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
     630:	defff704 	addi	sp,sp,-36
     634:	df000815 	stw	fp,32(sp)
     638:	dd400715 	stw	r21,28(sp)
     63c:	dd000615 	stw	r20,24(sp)
     640:	dcc00515 	stw	r19,20(sp)
     644:	dc800415 	stw	r18,16(sp)
     648:	dc400315 	stw	r17,12(sp)
     64c:	dc000215 	stw	r16,8(sp)
     650:	df000804 	addi	fp,sp,32
     654:	e13ff815 	stw	r4,-32(fp)
     658:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
     65c:	e0bff917 	ldw	r2,-28(fp)
     660:	10800058 	cmpnei	r2,r2,1
     664:	1000031e 	bne	r2,zero,674 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x44>
		addr = pixel_buffer->back_buffer_start_address;
     668:	e0bff817 	ldw	r2,-32(fp)
     66c:	14400c17 	ldw	r17,48(r2)
     670:	00000206 	br	67c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
     674:	e0bff817 	ldw	r2,-32(fp)
     678:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
     67c:	e0bff817 	ldw	r2,-32(fp)
     680:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
     684:	e0bff817 	ldw	r2,-32(fp)
     688:	10800e17 	ldw	r2,56(r2)
     68c:	10800098 	cmpnei	r2,r2,2
     690:	1000031e 	bne	r2,zero,6a0 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x70>
		limit_x = limit_x << 1;
     694:	8405883a 	add	r2,r16,r16
     698:	1021883a 	mov	r16,r2
     69c:	00000306 	br	6ac <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x7c>
	} else {
		limit_x = limit_x << 2;
     6a0:	8405883a 	add	r2,r16,r16
     6a4:	1085883a 	add	r2,r2,r2
     6a8:	1021883a 	mov	r16,r2
	}
	limit_y = pixel_buffer->y_resolution;
     6ac:	e0bff817 	ldw	r2,-32(fp)
     6b0:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
     6b4:	e0bff817 	ldw	r2,-32(fp)
     6b8:	10800d17 	ldw	r2,52(r2)
     6bc:	10001b1e 	bne	r2,zero,72c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0xfc>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
     6c0:	e0bff817 	ldw	r2,-32(fp)
     6c4:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
     6c8:	0029883a 	mov	r20,zero
     6cc:	a480332e 	bgeu	r20,r18,79c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x16c>
		{
			for (x = 0; x < limit_x; x = x + 4)
     6d0:	0027883a 	mov	r19,zero
     6d4:	9c00102e 	bgeu	r19,r16,718 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0xe8>
			{
				IOWR_32DIRECT(addr, x, 0);
     6d8:	9c45883a 	add	r2,r19,r17
     6dc:	0007883a 	mov	r3,zero
     6e0:	10c00035 	stwio	r3,0(r2)
				asm("nop");
     6e4:	0001883a 	nop
				asm("nop");
     6e8:	0001883a 	nop
				asm("nop");
     6ec:	0001883a 	nop
				asm("nop");
     6f0:	0001883a 	nop
				asm("nop");
     6f4:	0001883a 	nop
				asm("nop");
     6f8:	0001883a 	nop
				asm("nop");
     6fc:	0001883a 	nop
				asm("nop");
     700:	0001883a 	nop
				asm("nop");
     704:	0001883a 	nop
				asm("nop");
     708:	0001883a 	nop
				asm("nop");
     70c:	0001883a 	nop
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
     710:	9cc00104 	addi	r19,r19,4
     714:	003fef06 	br	6d4 <__ram_exceptions_end+0xfafff08c>
				asm("nop");
				asm("nop");
				asm("nop");

			}
			addr = addr + (1 << offset_y);
     718:	00800044 	movi	r2,1
     71c:	1544983a 	sll	r2,r2,r21
     720:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
     724:	a5000044 	addi	r20,r20,1
     728:	003fe806 	br	6cc <__ram_exceptions_end+0xfafff084>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;
     72c:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
     730:	0021883a 	mov	r16,zero
     734:	8005883a 	mov	r2,r16
     738:	1480182e 	bgeu	r2,r18,79c <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x16c>
		{
			IOWR_32DIRECT(addr, x, 0);
     73c:	8005883a 	mov	r2,r16
     740:	1445883a 	add	r2,r2,r17
     744:	0007883a 	mov	r3,zero
     748:	10c00035 	stwio	r3,0(r2)

			asm("nop");
     74c:	0001883a 	nop
			asm("nop");
     750:	0001883a 	nop
			asm("nop");
     754:	0001883a 	nop
			asm("nop");
     758:	0001883a 	nop
			asm("nop");
     75c:	0001883a 	nop
			asm("nop");
     760:	0001883a 	nop
			asm("nop");
     764:	0001883a 	nop
			asm("nop");
     768:	0001883a 	nop
			asm("nop");
     76c:	0001883a 	nop
			asm("nop");
     770:	0001883a 	nop
			asm("nop");
     774:	0001883a 	nop
			asm("nop");
     778:	0001883a 	nop
			asm("nop");
     77c:	0001883a 	nop
			asm("nop");
     780:	0001883a 	nop
			asm("nop");
     784:	0001883a 	nop
			asm("nop");
     788:	0001883a 	nop
			asm("nop");
     78c:	0001883a 	nop
			asm("nop");
     790:	0001883a 	nop
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;

		for (x = 0; x < limit_y; x = x + 4)
     794:	84000104 	addi	r16,r16,4
     798:	003fe606 	br	734 <__ram_exceptions_end+0xfafff0ec>
			asm("nop");
			*/

		}
	}
}
     79c:	0001883a 	nop
     7a0:	e6fffa04 	addi	sp,fp,-24
     7a4:	df000617 	ldw	fp,24(sp)
     7a8:	dd400517 	ldw	r21,20(sp)
     7ac:	dd000417 	ldw	r20,16(sp)
     7b0:	dcc00317 	ldw	r19,12(sp)
     7b4:	dc800217 	ldw	r18,8(sp)
     7b8:	dc400117 	ldw	r17,4(sp)
     7bc:	dc000017 	ldw	r16,0(sp)
     7c0:	dec00704 	addi	sp,sp,28
     7c4:	f800283a 	ret

000007c8 <_Z35helper_plot_pixel_enhanced_clippingjiiiii>:

void helper_plot_pixel_enhanced_clipping(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
     7c8:	deffff04 	addi	sp,sp,-4
     7cc:	df000015 	stw	fp,0(sp)
     7d0:	d839883a 	mov	fp,sp
     7d4:	2005883a 	mov	r2,r4
     7d8:	3007883a 	mov	r3,r6
     7dc:	3809883a 	mov	r4,r7
     7e0:	e1800117 	ldw	r6,4(fp)
     7e4:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
     7e8:	3800051e 	bne	r7,zero,800 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
     7ec:	2909383a 	mul	r4,r5,r4
     7f0:	20c7883a 	add	r3,r4,r3
     7f4:	1885883a 	add	r2,r3,r2
     7f8:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
     7fc:	00000e06 	br	838 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
     800:	39c00058 	cmpnei	r7,r7,1
     804:	3800061e 	bne	r7,zero,820 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
     808:	2909383a 	mul	r4,r5,r4
     80c:	20c7883a 	add	r3,r4,r3
     810:	18c7883a 	add	r3,r3,r3
     814:	1885883a 	add	r2,r3,r2
     818:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
     81c:	00000606 	br	838 <_Z35helper_plot_pixel_enhanced_clippingjiiiii+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
     820:	2909383a 	mul	r4,r5,r4
     824:	20c7883a 	add	r3,r4,r3
     828:	18c7883a 	add	r3,r3,r3
     82c:	18c7883a 	add	r3,r3,r3
     830:	1885883a 	add	r2,r3,r2
     834:	11800035 	stwio	r6,0(r2)
}
     838:	0001883a 	nop
     83c:	e037883a 	mov	sp,fp
     840:	df000017 	ldw	fp,0(sp)
     844:	dec00104 	addi	sp,sp,4
     848:	f800283a 	ret

0000084c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>:
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not checks if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries.
 * 
 * Aggiunto il controllo per il bordo, per ora si limita a non disegnare le linee
 */
{
     84c:	deffeb04 	addi	sp,sp,-84
     850:	dfc01415 	stw	ra,80(sp)
     854:	df001315 	stw	fp,76(sp)
     858:	ddc01215 	stw	r23,72(sp)
     85c:	dd801115 	stw	r22,68(sp)
     860:	dd401015 	stw	r21,64(sp)
     864:	dd000f15 	stw	r20,60(sp)
     868:	dcc00e15 	stw	r19,56(sp)
     86c:	dc800d15 	stw	r18,52(sp)
     870:	dc400c15 	stw	r17,48(sp)
     874:	dc000b15 	stw	r16,44(sp)
     878:	df001304 	addi	fp,sp,76
     87c:	e13fef15 	stw	r4,-68(fp)
     880:	e17ff015 	stw	r5,-64(fp)
     884:	e1bff115 	stw	r6,-60(fp)
     888:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
     88c:	e4bff017 	ldw	r18,-64(fp)
	register int y_0 = y0;
     890:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
     894:	e47ff217 	ldw	r17,-56(fp)
	register int y_1 = y1;
     898:	e5000217 	ldw	r20,8(fp)

	//overkill per ora, utile se serve fare clipping vero e proprio
	register char x0_valid = ((x_0 >=0) && (x_0<X_RES)) ? 1 : 0;
     89c:	90000616 	blt	r18,zero,8b8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x6c>
     8a0:	d0a6e617 	ldw	r2,-25704(gp)
     8a4:	10800f17 	ldw	r2,60(r2)
     8a8:	9007883a 	mov	r3,r18
     8ac:	1880022e 	bgeu	r3,r2,8b8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x6c>
     8b0:	00800044 	movi	r2,1
     8b4:	00000106 	br	8bc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x70>
     8b8:	0005883a 	mov	r2,zero
     8bc:	102f883a 	mov	r23,r2
	register char x1_valid = ((x_1 >=0) && (x_1<X_RES)) ? 1 : 0;
     8c0:	88000616 	blt	r17,zero,8dc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x90>
     8c4:	d0a6e617 	ldw	r2,-25704(gp)
     8c8:	10800f17 	ldw	r2,60(r2)
     8cc:	8807883a 	mov	r3,r17
     8d0:	1880022e 	bgeu	r3,r2,8dc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x90>
     8d4:	00800044 	movi	r2,1
     8d8:	00000106 	br	8e0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x94>
     8dc:	0005883a 	mov	r2,zero
     8e0:	102d883a 	mov	r22,r2
	register char y0_valid = ((y_0 >=0) && (y_0<Y_RES)) ? 1 : 0;
     8e4:	98000616 	blt	r19,zero,900 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb4>
     8e8:	d0a6e617 	ldw	r2,-25704(gp)
     8ec:	10801017 	ldw	r2,64(r2)
     8f0:	9807883a 	mov	r3,r19
     8f4:	1880022e 	bgeu	r3,r2,900 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb4>
     8f8:	00800044 	movi	r2,1
     8fc:	00000106 	br	904 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xb8>
     900:	0005883a 	mov	r2,zero
     904:	102b883a 	mov	r21,r2
	register char y1_valid = ((y_1 >=0) && (y_1<Y_RES)) ? 1 : 0;
     908:	a0000616 	blt	r20,zero,924 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xd8>
     90c:	d0a6e617 	ldw	r2,-25704(gp)
     910:	10801017 	ldw	r2,64(r2)
     914:	a007883a 	mov	r3,r20
     918:	1880022e 	bgeu	r3,r2,924 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xd8>
     91c:	00800044 	movi	r2,1
     920:	00000106 	br	928 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0xdc>
     924:	0005883a 	mov	r2,zero
     928:	1021883a 	mov	r16,r2
	register char p0_valid = x0_valid && y0_valid;
     92c:	b8803fcc 	andi	r2,r23,255
     930:	1080201c 	xori	r2,r2,128
     934:	10bfe004 	addi	r2,r2,-128
     938:	10000626 	beq	r2,zero,954 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x108>
     93c:	a8803fcc 	andi	r2,r21,255
     940:	1080201c 	xori	r2,r2,128
     944:	10bfe004 	addi	r2,r2,-128
     948:	10000226 	beq	r2,zero,954 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x108>
     94c:	00800044 	movi	r2,1
     950:	00000106 	br	958 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x10c>
     954:	0005883a 	mov	r2,zero
     958:	102b883a 	mov	r21,r2
	register char p1_valid = x1_valid && y1_valid;
     95c:	b0803fcc 	andi	r2,r22,255
     960:	1080201c 	xori	r2,r2,128
     964:	10bfe004 	addi	r2,r2,-128
     968:	10000626 	beq	r2,zero,984 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x138>
     96c:	80803fcc 	andi	r2,r16,255
     970:	1080201c 	xori	r2,r2,128
     974:	10bfe004 	addi	r2,r2,-128
     978:	10000226 	beq	r2,zero,984 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x138>
     97c:	00800044 	movi	r2,1
     980:	00000106 	br	988 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x13c>
     984:	0005883a 	mov	r2,zero
     988:	1021883a 	mov	r16,r2
	register char all_valid = p0_valid && p1_valid;
     98c:	a8803fcc 	andi	r2,r21,255
     990:	1080201c 	xori	r2,r2,128
     994:	10bfe004 	addi	r2,r2,-128
     998:	10000626 	beq	r2,zero,9b4 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x168>
     99c:	80803fcc 	andi	r2,r16,255
     9a0:	1080201c 	xori	r2,r2,128
     9a4:	10bfe004 	addi	r2,r2,-128
     9a8:	10000226 	beq	r2,zero,9b4 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x168>
     9ac:	00800044 	movi	r2,1
     9b0:	00000106 	br	9b8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x16c>
     9b4:	0005883a 	mov	r2,zero
     9b8:	1021883a 	mov	r16,r2

	//
	if(all_valid){
     9bc:	80803fcc 	andi	r2,r16,255
     9c0:	1080201c 	xori	r2,r2,128
     9c4:	10bfe004 	addi	r2,r2,-128
     9c8:	10007326 	beq	r2,zero,b98 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
		register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
     9cc:	a4c5c83a 	sub	r2,r20,r19
     9d0:	1000010e 	bge	r2,zero,9d8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x18c>
     9d4:	0085c83a 	sub	r2,zero,r2
     9d8:	1007883a 	mov	r3,r2
     9dc:	8c85c83a 	sub	r2,r17,r18
     9e0:	1000010e 	bge	r2,zero,9e8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x19c>
     9e4:	0085c83a 	sub	r2,zero,r2
     9e8:	10c0020e 	bge	r2,r3,9f4 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1a8>
     9ec:	00800044 	movi	r2,1
     9f0:	00000106 	br	9f8 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1ac>
     9f4:	0005883a 	mov	r2,zero
     9f8:	e0bff305 	stb	r2,-52(fp)
		register int deltax, deltay, error, ystep, x, y;
		register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
     9fc:	e0bfef17 	ldw	r2,-68(fp)
     a00:	10800e17 	ldw	r2,56(r2)
									(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
     a04:	10800060 	cmpeqi	r2,r2,1
     a08:	1000081e 	bne	r2,zero,a2c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e0>
     a0c:	e0bfef17 	ldw	r2,-68(fp)
     a10:	10800e17 	ldw	r2,56(r2)
     a14:	10800098 	cmpnei	r2,r2,2
     a18:	1000021e 	bne	r2,zero,a24 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1d8>
     a1c:	00800044 	movi	r2,1
     a20:	00000306 	br	a30 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e4>
     a24:	00800084 	movi	r2,2
     a28:	00000106 	br	a30 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x1e4>
     a2c:	0005883a 	mov	r2,zero
     a30:	e0bff415 	stw	r2,-48(fp)
		register int line_color = color;
     a34:	e0800317 	ldw	r2,12(fp)
     a38:	e0bff515 	stw	r2,-44(fp)
		register unsigned int buffer_start;
		register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
     a3c:	e0bfef17 	ldw	r2,-68(fp)
     a40:	10800d17 	ldw	r2,52(r2)
     a44:	1000071e 	bne	r2,zero,a64 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x218>
     a48:	e0bfef17 	ldw	r2,-68(fp)
     a4c:	10801317 	ldw	r2,76(r2)
     a50:	e0fff417 	ldw	r3,-48(fp)
     a54:	10c5c83a 	sub	r2,r2,r3
     a58:	00c00044 	movi	r3,1
     a5c:	1884983a 	sll	r2,r3,r2
     a60:	00000206 	br	a6c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x220>
     a64:	e0bfef17 	ldw	r2,-68(fp)
     a68:	10800f17 	ldw	r2,60(r2)
     a6c:	e0bff615 	stw	r2,-40(fp)

		if (backbuffer == 1)
     a70:	e0800417 	ldw	r2,16(fp)
     a74:	10800058 	cmpnei	r2,r2,1
     a78:	1000031e 	bne	r2,zero,a88 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x23c>
			buffer_start = pixel_buffer->back_buffer_start_address;
     a7c:	e0bfef17 	ldw	r2,-68(fp)
     a80:	15c00c17 	ldw	r23,48(r2)
     a84:	00000206 	br	a90 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x244>
		else
			buffer_start = pixel_buffer->buffer_start_address;
     a88:	e0bfef17 	ldw	r2,-68(fp)
     a8c:	15c00b17 	ldw	r23,44(r2)

		/* Preprocessing inputs */
		if (steep > 0) {
     a90:	e0bff307 	ldb	r2,-52(fp)
     a94:	0080060e 	bge	zero,r2,ab0 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x264>
			// Swap x_0 and y_0
			error = x_0;
     a98:	9021883a 	mov	r16,r18
			x_0 = y_0;
     a9c:	9825883a 	mov	r18,r19
			y_0 = error;
     aa0:	8027883a 	mov	r19,r16
			// Swap x_1 and y_1
			error = x_1;
     aa4:	8821883a 	mov	r16,r17
			x_1 = y_1;
     aa8:	a023883a 	mov	r17,r20
			y_1 = error;
     aac:	8029883a 	mov	r20,r16
		}
		if (x_0 > x_1) {
     ab0:	8c80060e 	bge	r17,r18,acc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x280>
			// Swap x_0 and x_1
			error = x_0;
     ab4:	9021883a 	mov	r16,r18
			x_0 = x_1;
     ab8:	8825883a 	mov	r18,r17
			x_1 = error;
     abc:	8023883a 	mov	r17,r16
			// Swap y_0 and y_1
			error = y_0;
     ac0:	9821883a 	mov	r16,r19
			y_0 = y_1;
     ac4:	a027883a 	mov	r19,r20
			y_1 = error;
     ac8:	8029883a 	mov	r20,r16
		}

		/* Setup local variables */
		deltax = x_1 - x_0;
     acc:	8cabc83a 	sub	r21,r17,r18
		deltay = ABS(y_1 - y_0);
     ad0:	a4c5c83a 	sub	r2,r20,r19
     ad4:	1000010e 	bge	r2,zero,adc <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x290>
     ad8:	0085c83a 	sub	r2,zero,r2
     adc:	e0bff715 	stw	r2,-36(fp)
		error = -(deltax / 2); 
     ae0:	a804d7fa 	srli	r2,r21,31
     ae4:	1545883a 	add	r2,r2,r21
     ae8:	1005d07a 	srai	r2,r2,1
     aec:	00a1c83a 	sub	r16,zero,r2
		y = y_0;
     af0:	982d883a 	mov	r22,r19
		if (y_0 < y_1)
     af4:	9d00020e 	bge	r19,r20,b00 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x2b4>
			ystep = 1;
     af8:	04c00044 	movi	r19,1
     afc:	00000106 	br	b04 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x2b8>
		else
			ystep = -1;
     b00:	04ffffc4 	movi	r19,-1

		/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
		 * compile well on low optimization levels. */
		if (steep == 1)
     b04:	e0bff307 	ldb	r2,-52(fp)
     b08:	10800058 	cmpnei	r2,r2,1
     b0c:	1000111e 	bne	r2,zero,b54 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x308>
		{
			for (x=x_0; x <= x_1; x++) {
     b10:	8c802116 	blt	r17,r18,b98 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
				helper_plot_pixel_enhanced_clipping(buffer_start, line_size, y, x, line_color, color_mode);
     b14:	e0bff417 	ldw	r2,-48(fp)
     b18:	d8800115 	stw	r2,4(sp)
     b1c:	e0bff517 	ldw	r2,-44(fp)
     b20:	d8800015 	stw	r2,0(sp)
     b24:	900f883a 	mov	r7,r18
     b28:	b00d883a 	mov	r6,r22
     b2c:	e17ff617 	ldw	r5,-40(fp)
     b30:	b809883a 	mov	r4,r23
     b34:	00007c80 	call	7c8 <_Z35helper_plot_pixel_enhanced_clippingjiiiii>
				error = error + deltay;
     b38:	e0bff717 	ldw	r2,-36(fp)
     b3c:	80a1883a 	add	r16,r16,r2
				if (error > 0) {
     b40:	0400020e 	bge	zero,r16,b4c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x300>
					y = y + ystep;
     b44:	b4ed883a 	add	r22,r22,r19
					error = error - deltax;
     b48:	8561c83a 	sub	r16,r16,r21

		/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
		 * compile well on low optimization levels. */
		if (steep == 1)
		{
			for (x=x_0; x <= x_1; x++) {
     b4c:	94800044 	addi	r18,r18,1
     b50:	003fef06 	br	b10 <__ram_exceptions_end+0xfafff4c8>
				}
			}
		}
		else
		{
			for (x=x_0; x <= x_1; x++) {
     b54:	8c801016 	blt	r17,r18,b98 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x34c>
				helper_plot_pixel_enhanced_clipping(buffer_start, line_size, x, y, line_color, color_mode);
     b58:	e0bff417 	ldw	r2,-48(fp)
     b5c:	d8800115 	stw	r2,4(sp)
     b60:	e0bff517 	ldw	r2,-44(fp)
     b64:	d8800015 	stw	r2,0(sp)
     b68:	b00f883a 	mov	r7,r22
     b6c:	900d883a 	mov	r6,r18
     b70:	e17ff617 	ldw	r5,-40(fp)
     b74:	b809883a 	mov	r4,r23
     b78:	00007c80 	call	7c8 <_Z35helper_plot_pixel_enhanced_clippingjiiiii>
				error = error + deltay;
     b7c:	e0bff717 	ldw	r2,-36(fp)
     b80:	80a1883a 	add	r16,r16,r2
				if (error > 0) {
     b84:	0400020e 	bge	zero,r16,b90 <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii+0x344>
					y = y + ystep;
     b88:	b4ed883a 	add	r22,r22,r19
					error = error - deltax;
     b8c:	8561c83a 	sub	r16,r16,r21
				}
			}
		}
		else
		{
			for (x=x_0; x <= x_1; x++) {
     b90:	94800044 	addi	r18,r18,1
     b94:	003fef06 	br	b54 <__ram_exceptions_end+0xfafff50c>
					error = error - deltax;
				}
			}
		}
	}
}
     b98:	0001883a 	nop
     b9c:	e6fff804 	addi	sp,fp,-32
     ba0:	dfc00917 	ldw	ra,36(sp)
     ba4:	df000817 	ldw	fp,32(sp)
     ba8:	ddc00717 	ldw	r23,28(sp)
     bac:	dd800617 	ldw	r22,24(sp)
     bb0:	dd400517 	ldw	r21,20(sp)
     bb4:	dd000417 	ldw	r20,16(sp)
     bb8:	dcc00317 	ldw	r19,12(sp)
     bbc:	dc800217 	ldw	r18,8(sp)
     bc0:	dc400117 	ldw	r17,4(sp)
     bc4:	dc000017 	ldw	r16,0(sp)
     bc8:	dec00a04 	addi	sp,sp,40
     bcc:	f800283a 	ret

00000bd0 <_ZN7Cube_3DC1Ev>:
#include "../inc/config.h"

extern alt_up_pixel_buffer_dma_dev *pixel_buf_dma_dev;

Cube_3D::Cube_3D(){
     bd0:	defffb04 	addi	sp,sp,-20
     bd4:	dfc00415 	stw	ra,16(sp)
     bd8:	df000315 	stw	fp,12(sp)
     bdc:	dc400215 	stw	r17,8(sp)
     be0:	dc000115 	stw	r16,4(sp)
     be4:	df000304 	addi	fp,sp,12
     be8:	e13ffd15 	stw	r4,-12(fp)
     bec:	e0fffd17 	ldw	r3,-12(fp)
     bf0:	008f7374 	movhi	r2,15821
     bf4:	10b33344 	addi	r2,r2,-13107
     bf8:	18800915 	stw	r2,36(r3)
     bfc:	e0bffd17 	ldw	r2,-12(fp)
     c00:	00d0b234 	movhi	r3,17096
     c04:	10c00a15 	stw	r3,40(r2)
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	00d08d34 	movhi	r3,16948
     c10:	10c00f15 	stw	r3,60(r2)
     c14:	e0fffd17 	ldw	r3,-12(fp)
     c18:	008feaf4 	movhi	r2,16299
     c1c:	10aaaac4 	addi	r2,r2,-21845
     c20:	18801015 	stw	r2,64(r3)
        float n = 0.1; 
        float f = 100;
        float r, l, t, b; 
        float angleOfView = 45;
        float imageAspectRatio = (float)4/3;
        float scale = tan(angleOfView * 0.5 * M_PI / 180) * n; //= 0.1;          //tan(angleOfView * 0.5 * M_PI / 180) * n;  
     c24:	e0bffd17 	ldw	r2,-12(fp)
     c28:	10c00f17 	ldw	r3,60(r2)
     c2c:	1809883a 	mov	r4,r3
     c30:	0009c580 	call	9c58 <__extendsfdf2>
     c34:	1011883a 	mov	r8,r2
     c38:	1813883a 	mov	r9,r3
     c3c:	000d883a 	mov	r6,zero
     c40:	01cff834 	movhi	r7,16352
     c44:	4009883a 	mov	r4,r8
     c48:	480b883a 	mov	r5,r9
     c4c:	0008ae80 	call	8ae8 <__muldf3>
     c50:	1009883a 	mov	r4,r2
     c54:	180b883a 	mov	r5,r3
     c58:	2005883a 	mov	r2,r4
     c5c:	2807883a 	mov	r3,r5
     c60:	01951134 	movhi	r6,21572
     c64:	318b4604 	addi	r6,r6,11544
     c68:	01d00274 	movhi	r7,16393
     c6c:	39c87ec4 	addi	r7,r7,8699
     c70:	1009883a 	mov	r4,r2
     c74:	180b883a 	mov	r5,r3
     c78:	0008ae80 	call	8ae8 <__muldf3>
     c7c:	1009883a 	mov	r4,r2
     c80:	180b883a 	mov	r5,r3
     c84:	2005883a 	mov	r2,r4
     c88:	2807883a 	mov	r3,r5
     c8c:	000d883a 	mov	r6,zero
     c90:	01d019f4 	movhi	r7,16487
     c94:	39e00004 	addi	r7,r7,-32768
     c98:	1009883a 	mov	r4,r2
     c9c:	180b883a 	mov	r5,r3
     ca0:	000809c0 	call	809c <__divdf3>
     ca4:	1009883a 	mov	r4,r2
     ca8:	180b883a 	mov	r5,r3
     cac:	2005883a 	mov	r2,r4
     cb0:	2807883a 	mov	r3,r5
     cb4:	1009883a 	mov	r4,r2
     cb8:	180b883a 	mov	r5,r3
     cbc:	0003aa00 	call	3aa0 <tan>
     cc0:	1021883a 	mov	r16,r2
     cc4:	1823883a 	mov	r17,r3
     cc8:	e0bffd17 	ldw	r2,-12(fp)
     ccc:	10c00917 	ldw	r3,36(r2)
     cd0:	1809883a 	mov	r4,r3
     cd4:	0009c580 	call	9c58 <__extendsfdf2>
     cd8:	1009883a 	mov	r4,r2
     cdc:	180b883a 	mov	r5,r3
     ce0:	200d883a 	mov	r6,r4
     ce4:	280f883a 	mov	r7,r5
     ce8:	8009883a 	mov	r4,r16
     cec:	880b883a 	mov	r5,r17
     cf0:	0008ae80 	call	8ae8 <__muldf3>
     cf4:	1009883a 	mov	r4,r2
     cf8:	180b883a 	mov	r5,r3
     cfc:	2005883a 	mov	r2,r4
     d00:	2807883a 	mov	r3,r5
     d04:	1009883a 	mov	r4,r2
     d08:	180b883a 	mov	r5,r3
     d0c:	0009d680 	call	9d68 <__truncdfsf2>
     d10:	1007883a 	mov	r3,r2
     d14:	e0bffd17 	ldw	r2,-12(fp)
     d18:	10c01115 	stw	r3,68(r2)
     d1c:	e0fffd17 	ldw	r3,-12(fp)
     d20:	00800074 	movhi	r2,1
     d24:	10823004 	addi	r2,r2,2240
     d28:	18c01204 	addi	r3,r3,72
     d2c:	1009883a 	mov	r4,r2
     d30:	00885804 	movi	r2,8544
     d34:	100d883a 	mov	r6,r2
     d38:	200b883a 	mov	r5,r4
     d3c:	1809883a 	mov	r4,r3
     d40:	0009f740 	call	9f74 <memcpy>
     d44:	e0bffd17 	ldw	r2,-12(fp)
     d48:	10955e04 	addi	r2,r2,21880
     d4c:	00c01004 	movi	r3,64
     d50:	180d883a 	mov	r6,r3
     d54:	000b883a 	mov	r5,zero
     d58:	1009883a 	mov	r4,r2
     d5c:	000a0bc0 	call	a0bc <memset>
     d60:	e0fffd17 	ldw	r3,-12(fp)
     d64:	00800074 	movhi	r2,1
     d68:	108a8804 	addi	r2,r2,10784
     d6c:	18d56e04 	addi	r3,r3,21944
     d70:	1009883a 	mov	r4,r2
     d74:	00801004 	movi	r2,64
     d78:	100d883a 	mov	r6,r2
     d7c:	200b883a 	mov	r5,r4
     d80:	1809883a 	mov	r4,r3
     d84:	0009f740 	call	9f74 <memcpy>
     d88:	e0fffd17 	ldw	r3,-12(fp)
     d8c:	00800074 	movhi	r2,1
     d90:	108a9804 	addi	r2,r2,10848
     d94:	18d57e04 	addi	r3,r3,22008
     d98:	1009883a 	mov	r4,r2
     d9c:	00810b04 	movi	r2,1068
     da0:	100d883a 	mov	r6,r2
     da4:	200b883a 	mov	r5,r4
     da8:	1809883a 	mov	r4,r3
     dac:	0009f740 	call	9f74 <memcpy>
    //la traslazione inziale sull'asse z serve a spostare indietro l'oggetto nel mondo, altrimenti la camera si troverebbe nell'origine e sarebbe "dentro" il cubo(e si vede la croce delle diagonali)
    //NB: se l'oggetto finisce alle spalle della camera viene visto "all'indietro" (front e back del cubo sono invertiti)
    
    //inizializzo matrice di traslazione
    translation_matrix[M4(0,0)] = 1; 
     db0:	e0bffd17 	ldw	r2,-12(fp)
     db4:	00cfe034 	movhi	r3,16256
     db8:	10d50e15 	stw	r3,21560(r2)
    translation_matrix[M4(0,1)] = 0; 
     dbc:	e0bffd17 	ldw	r2,-12(fp)
     dc0:	10150f15 	stw	zero,21564(r2)
    translation_matrix[M4(0,2)] = 0; 
     dc4:	e0bffd17 	ldw	r2,-12(fp)
     dc8:	10151015 	stw	zero,21568(r2)

    translation_matrix[M4(1,0)] = 0; 
     dcc:	e0bffd17 	ldw	r2,-12(fp)
     dd0:	10151215 	stw	zero,21576(r2)
    translation_matrix[M4(1,1)] = 1; 
     dd4:	e0bffd17 	ldw	r2,-12(fp)
     dd8:	00cfe034 	movhi	r3,16256
     ddc:	10d51315 	stw	r3,21580(r2)
    translation_matrix[M4(1,2)] = 0; 
     de0:	e0bffd17 	ldw	r2,-12(fp)
     de4:	10151415 	stw	zero,21584(r2)

    translation_matrix[M4(2,0)] = 0; 
     de8:	e0bffd17 	ldw	r2,-12(fp)
     dec:	10151615 	stw	zero,21592(r2)
    translation_matrix[M4(2,1)] = 0; 
     df0:	e0bffd17 	ldw	r2,-12(fp)
     df4:	10151715 	stw	zero,21596(r2)
    translation_matrix[M4(2,2)] = 1; 
     df8:	e0bffd17 	ldw	r2,-12(fp)
     dfc:	00cfe034 	movhi	r3,16256
     e00:	10d51815 	stw	r3,21600(r2)

    translation_matrix[M4(3,0)] = 0; 
     e04:	e0bffd17 	ldw	r2,-12(fp)
     e08:	10151a15 	stw	zero,21608(r2)
    translation_matrix[M4(3,1)] = 0;
     e0c:	e0bffd17 	ldw	r2,-12(fp)
     e10:	10151b15 	stw	zero,21612(r2)
    translation_matrix[M4(3,2)] = 0;
     e14:	e0bffd17 	ldw	r2,-12(fp)
     e18:	10151c15 	stw	zero,21616(r2)
    translation_matrix[M4(3,3)] = 1;
     e1c:	e0bffd17 	ldw	r2,-12(fp)
     e20:	00cfe034 	movhi	r3,16256
     e24:	10d51d15 	stw	r3,21620(r2)

    update_translation(0, 0, -3);
     e28:	01f01034 	movhi	r7,49216
     e2c:	000d883a 	mov	r6,zero
     e30:	000b883a 	mov	r5,zero
     e34:	e13ffd17 	ldw	r4,-12(fp)
     e38:	00011940 	call	1194 <_ZN7Cube_3D18update_translationEfff>

    //inizializzo matrice di rotazione
    
    rotation_matrix[M4(0,3)] = 0;
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	10150115 	stw	zero,21508(r2)
    rotation_matrix[M4(1,3)] = 0; 
     e44:	e0bffd17 	ldw	r2,-12(fp)
     e48:	10150515 	stw	zero,21524(r2)
    rotation_matrix[M4(2,3)] = 0;
     e4c:	e0bffd17 	ldw	r2,-12(fp)
     e50:	10150915 	stw	zero,21540(r2)
    rotation_matrix[M4(3,0)] = 0;
     e54:	e0bffd17 	ldw	r2,-12(fp)
     e58:	10150a15 	stw	zero,21544(r2)
    rotation_matrix[M4(3,1)] = 0;
     e5c:	e0bffd17 	ldw	r2,-12(fp)
     e60:	10150b15 	stw	zero,21548(r2)
    rotation_matrix[M4(3,2)] = 0;
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	10150c15 	stw	zero,21552(r2)
    rotation_matrix[M4(3,3)] = 1;
     e6c:	e0bffd17 	ldw	r2,-12(fp)
     e70:	00cfe034 	movhi	r3,16256
     e74:	10d50d15 	stw	r3,21556(r2)
    update_rotation(0, 0, 0);
     e78:	000f883a 	mov	r7,zero
     e7c:	000d883a 	mov	r6,zero
     e80:	000b883a 	mov	r5,zero
     e84:	e13ffd17 	ldw	r4,-12(fp)
     e88:	00013a40 	call	13a4 <_ZN7Cube_3D15update_rotationEfff>

    //inizializzo matrice di scala
    scaling_matrix[M4(0,1)] = 0; 
     e8c:	e0bffd17 	ldw	r2,-12(fp)
     e90:	10151f15 	stw	zero,21628(r2)
    scaling_matrix[M4(0,2)] = 0; 
     e94:	e0bffd17 	ldw	r2,-12(fp)
     e98:	10152015 	stw	zero,21632(r2)
    scaling_matrix[M4(0,3)] = 0; 
     e9c:	e0bffd17 	ldw	r2,-12(fp)
     ea0:	10152115 	stw	zero,21636(r2)

    scaling_matrix[M4(1,0)] = 0; 
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	10152215 	stw	zero,21640(r2)
    scaling_matrix[M4(1,2)] = 0; 
     eac:	e0bffd17 	ldw	r2,-12(fp)
     eb0:	10152415 	stw	zero,21648(r2)
    scaling_matrix[M4(1,3)] = 0; 
     eb4:	e0bffd17 	ldw	r2,-12(fp)
     eb8:	10152515 	stw	zero,21652(r2)

    scaling_matrix[M4(2,0)] = 0; 
     ebc:	e0bffd17 	ldw	r2,-12(fp)
     ec0:	10152615 	stw	zero,21656(r2)
    scaling_matrix[M4(2,1)] = 0; 
     ec4:	e0bffd17 	ldw	r2,-12(fp)
     ec8:	10152715 	stw	zero,21660(r2)
    scaling_matrix[M4(2,3)] = 0; 
     ecc:	e0bffd17 	ldw	r2,-12(fp)
     ed0:	10152915 	stw	zero,21668(r2)

    scaling_matrix[M4(3,0)] = 0; 
     ed4:	e0bffd17 	ldw	r2,-12(fp)
     ed8:	10152a15 	stw	zero,21672(r2)
    scaling_matrix[M4(3,1)] = 0; 
     edc:	e0bffd17 	ldw	r2,-12(fp)
     ee0:	10152b15 	stw	zero,21676(r2)
    scaling_matrix[M4(3,2)] = 0; 
     ee4:	e0bffd17 	ldw	r2,-12(fp)
     ee8:	10152c15 	stw	zero,21680(r2)
    scaling_matrix[M4(3,3)] = 1; 
     eec:	e0bffd17 	ldw	r2,-12(fp)
     ef0:	00cfe034 	movhi	r3,16256
     ef4:	10d52d15 	stw	r3,21684(r2)
    update_scaling(0.4, 0.4, 0.4);
     ef8:	01cfb374 	movhi	r7,16077
     efc:	39f33344 	addi	r7,r7,-13107
     f00:	018fb374 	movhi	r6,16077
     f04:	31b33344 	addi	r6,r6,-13107
     f08:	014fb374 	movhi	r5,16077
     f0c:	29733344 	addi	r5,r5,-13107
     f10:	e13ffd17 	ldw	r4,-12(fp)
     f14:	0001abc0 	call	1abc <_ZN7Cube_3D14update_scalingEfff>

    
    
    // set OpenGL perspective projection matrix
    r = imageAspectRatio * scale;
     f18:	e0bffd17 	ldw	r2,-12(fp)
     f1c:	10c01017 	ldw	r3,64(r2)
     f20:	e0bffd17 	ldw	r2,-12(fp)
     f24:	11001117 	ldw	r4,68(r2)
     f28:	200b883a 	mov	r5,r4
     f2c:	1809883a 	mov	r4,r3
     f30:	0006c8c0 	call	6c8c <__mulsf3>
     f34:	1009883a 	mov	r4,r2
     f38:	2007883a 	mov	r3,r4
     f3c:	e0bffd17 	ldw	r2,-12(fp)
     f40:	10c00b15 	stw	r3,44(r2)
    l = -r;
     f44:	e0fffd17 	ldw	r3,-12(fp)
     f48:	18800b17 	ldw	r2,44(r3)
     f4c:	10e0003c 	xorhi	r3,r2,32768
     f50:	e0bffd17 	ldw	r2,-12(fp)
     f54:	10c00c15 	stw	r3,48(r2)
    t = scale;
     f58:	e0bffd17 	ldw	r2,-12(fp)
     f5c:	10c01117 	ldw	r3,68(r2)
     f60:	e0bffd17 	ldw	r2,-12(fp)
     f64:	10c00d15 	stw	r3,52(r2)
    b = -t;
     f68:	e0fffd17 	ldw	r3,-12(fp)
     f6c:	18800d17 	ldw	r2,52(r3)
     f70:	10e0003c 	xorhi	r3,r2,32768
     f74:	e0bffd17 	ldw	r2,-12(fp)
     f78:	10c00e15 	stw	r3,56(r2)

    projection_matrix[M4(0,0)] = (float)(2 * n) / (r - l); 
     f7c:	e0fffd17 	ldw	r3,-12(fp)
     f80:	18800917 	ldw	r2,36(r3)
     f84:	100b883a 	mov	r5,r2
     f88:	1009883a 	mov	r4,r2
     f8c:	00063840 	call	6384 <__addsf3>
     f90:	1007883a 	mov	r3,r2
     f94:	1821883a 	mov	r16,r3
     f98:	e0bffd17 	ldw	r2,-12(fp)
     f9c:	10c00b17 	ldw	r3,44(r2)
     fa0:	e0bffd17 	ldw	r2,-12(fp)
     fa4:	11000c17 	ldw	r4,48(r2)
     fa8:	200b883a 	mov	r5,r4
     fac:	1809883a 	mov	r4,r3
     fb0:	00070880 	call	7088 <__subsf3>
     fb4:	1007883a 	mov	r3,r2
     fb8:	1805883a 	mov	r2,r3
     fbc:	100b883a 	mov	r5,r2
     fc0:	8009883a 	mov	r4,r16
     fc4:	000684c0 	call	684c <__divsf3>
     fc8:	1009883a 	mov	r4,r2
     fcc:	2007883a 	mov	r3,r4
     fd0:	e0bffd17 	ldw	r2,-12(fp)
     fd4:	10d4ee15 	stw	r3,21432(r2)
    projection_matrix[M4(1,0)] = (float)0; 
     fd8:	e0bffd17 	ldw	r2,-12(fp)
     fdc:	1014f215 	stw	zero,21448(r2)
    projection_matrix[M4(2,0)] = (float)0; 
     fe0:	e0bffd17 	ldw	r2,-12(fp)
     fe4:	1014f615 	stw	zero,21464(r2)
    projection_matrix[M4(3,0)] = (float)0; 
     fe8:	e0bffd17 	ldw	r2,-12(fp)
     fec:	1014fa15 	stw	zero,21480(r2)

    projection_matrix[M4(0,1)] = (float)0; 
     ff0:	e0bffd17 	ldw	r2,-12(fp)
     ff4:	1014ef15 	stw	zero,21436(r2)
    projection_matrix[M4(1,1)] = (float)2 * n / (t - b); 
     ff8:	e0fffd17 	ldw	r3,-12(fp)
     ffc:	18800917 	ldw	r2,36(r3)
    1000:	100b883a 	mov	r5,r2
    1004:	1009883a 	mov	r4,r2
    1008:	00063840 	call	6384 <__addsf3>
    100c:	1007883a 	mov	r3,r2
    1010:	1821883a 	mov	r16,r3
    1014:	e0bffd17 	ldw	r2,-12(fp)
    1018:	10c00d17 	ldw	r3,52(r2)
    101c:	e0bffd17 	ldw	r2,-12(fp)
    1020:	11000e17 	ldw	r4,56(r2)
    1024:	200b883a 	mov	r5,r4
    1028:	1809883a 	mov	r4,r3
    102c:	00070880 	call	7088 <__subsf3>
    1030:	1007883a 	mov	r3,r2
    1034:	1805883a 	mov	r2,r3
    1038:	100b883a 	mov	r5,r2
    103c:	8009883a 	mov	r4,r16
    1040:	000684c0 	call	684c <__divsf3>
    1044:	1009883a 	mov	r4,r2
    1048:	2007883a 	mov	r3,r4
    104c:	e0bffd17 	ldw	r2,-12(fp)
    1050:	10d4f315 	stw	r3,21452(r2)
    projection_matrix[M4(2,1)] = (float)0; 
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	1014f715 	stw	zero,21468(r2)
    projection_matrix[M4(3,1)] = (float)0; 
    105c:	e0bffd17 	ldw	r2,-12(fp)
    1060:	1014fb15 	stw	zero,21484(r2)

    projection_matrix[M4(0,2)] = (float)0; 
    1064:	e0bffd17 	ldw	r2,-12(fp)
    1068:	1014f015 	stw	zero,21440(r2)
    projection_matrix[M4(1,2)] = (float)0; 
    106c:	e0bffd17 	ldw	r2,-12(fp)
    1070:	1014f415 	stw	zero,21456(r2)
    projection_matrix[M4(2,2)] = (float)-(f + n) / (f - n); 
    1074:	e0bffd17 	ldw	r2,-12(fp)
    1078:	10c00a17 	ldw	r3,40(r2)
    107c:	e0bffd17 	ldw	r2,-12(fp)
    1080:	11000917 	ldw	r4,36(r2)
    1084:	200b883a 	mov	r5,r4
    1088:	1809883a 	mov	r4,r3
    108c:	00063840 	call	6384 <__addsf3>
    1090:	1007883a 	mov	r3,r2
    1094:	1805883a 	mov	r2,r3
    1098:	1420003c 	xorhi	r16,r2,32768
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	10c00a17 	ldw	r3,40(r2)
    10a4:	e0bffd17 	ldw	r2,-12(fp)
    10a8:	11000917 	ldw	r4,36(r2)
    10ac:	200b883a 	mov	r5,r4
    10b0:	1809883a 	mov	r4,r3
    10b4:	00070880 	call	7088 <__subsf3>
    10b8:	1007883a 	mov	r3,r2
    10bc:	1805883a 	mov	r2,r3
    10c0:	100b883a 	mov	r5,r2
    10c4:	8009883a 	mov	r4,r16
    10c8:	000684c0 	call	684c <__divsf3>
    10cc:	1009883a 	mov	r4,r2
    10d0:	2007883a 	mov	r3,r4
    10d4:	e0bffd17 	ldw	r2,-12(fp)
    10d8:	10d4f815 	stw	r3,21472(r2)
    projection_matrix[M4(3,2)] = (float)-1;
    10dc:	e0bffd17 	ldw	r2,-12(fp)
    10e0:	00efe034 	movhi	r3,49024
    10e4:	10d4fc15 	stw	r3,21488(r2)

    projection_matrix[M4(0,3)] = (float)0; 
    10e8:	e0bffd17 	ldw	r2,-12(fp)
    10ec:	1014f115 	stw	zero,21444(r2)
    projection_matrix[M4(1,3)] = (float)0; 
    10f0:	e0bffd17 	ldw	r2,-12(fp)
    10f4:	1014f515 	stw	zero,21460(r2)
    projection_matrix[M4(2,3)] = (float) -2 * f * n / (f - n);
    10f8:	e0bffd17 	ldw	r2,-12(fp)
    10fc:	10c00a17 	ldw	r3,40(r2)
    1100:	01700034 	movhi	r5,49152
    1104:	1809883a 	mov	r4,r3
    1108:	0006c8c0 	call	6c8c <__mulsf3>
    110c:	1007883a 	mov	r3,r2
    1110:	1809883a 	mov	r4,r3
    1114:	e0bffd17 	ldw	r2,-12(fp)
    1118:	10c00917 	ldw	r3,36(r2)
    111c:	180b883a 	mov	r5,r3
    1120:	0006c8c0 	call	6c8c <__mulsf3>
    1124:	1007883a 	mov	r3,r2
    1128:	1821883a 	mov	r16,r3
    112c:	e0bffd17 	ldw	r2,-12(fp)
    1130:	10c00a17 	ldw	r3,40(r2)
    1134:	e0bffd17 	ldw	r2,-12(fp)
    1138:	11000917 	ldw	r4,36(r2)
    113c:	200b883a 	mov	r5,r4
    1140:	1809883a 	mov	r4,r3
    1144:	00070880 	call	7088 <__subsf3>
    1148:	1007883a 	mov	r3,r2
    114c:	1805883a 	mov	r2,r3
    1150:	100b883a 	mov	r5,r2
    1154:	8009883a 	mov	r4,r16
    1158:	000684c0 	call	684c <__divsf3>
    115c:	1009883a 	mov	r4,r2
    1160:	2007883a 	mov	r3,r4
    1164:	e0bffd17 	ldw	r2,-12(fp)
    1168:	10d4f915 	stw	r3,21476(r2)
    projection_matrix[M4(3,3)] = (float)0; 
    116c:	e0bffd17 	ldw	r2,-12(fp)
    1170:	1014fd15 	stw	zero,21492(r2)

    

   
}
    1174:	0001883a 	nop
    1178:	e6fffe04 	addi	sp,fp,-8
    117c:	dfc00317 	ldw	ra,12(sp)
    1180:	df000217 	ldw	fp,8(sp)
    1184:	dc400117 	ldw	r17,4(sp)
    1188:	dc000017 	ldw	r16,0(sp)
    118c:	dec00404 	addi	sp,sp,16
    1190:	f800283a 	ret

00001194 <_ZN7Cube_3D18update_translationEfff>:

void Cube_3D::update_translation(float x, float y,float z){
    1194:	defffb04 	addi	sp,sp,-20
    1198:	df000415 	stw	fp,16(sp)
    119c:	df000404 	addi	fp,sp,16
    11a0:	e13ffc15 	stw	r4,-16(fp)
    11a4:	e17ffd15 	stw	r5,-12(fp)
    11a8:	e1bffe15 	stw	r6,-8(fp)
    11ac:	e1ffff15 	stw	r7,-4(fp)
    translation_matrix[M4(0,3)] = x;
    11b0:	e0bffc17 	ldw	r2,-16(fp)
    11b4:	e0fffd17 	ldw	r3,-12(fp)
    11b8:	10d51115 	stw	r3,21572(r2)
    translation[X] = x;
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	e0fffd17 	ldw	r3,-12(fp)
    11c4:	10c00015 	stw	r3,0(r2)

    translation_matrix[M4(1,3)] = y;
    11c8:	e0bffc17 	ldw	r2,-16(fp)
    11cc:	e0fffe17 	ldw	r3,-8(fp)
    11d0:	10d51515 	stw	r3,21588(r2)
    translation[Y] = y;
    11d4:	e0bffc17 	ldw	r2,-16(fp)
    11d8:	e0fffe17 	ldw	r3,-8(fp)
    11dc:	10c00115 	stw	r3,4(r2)

    translation_matrix[M4(2,3)] = z;
    11e0:	e0bffc17 	ldw	r2,-16(fp)
    11e4:	e0ffff17 	ldw	r3,-4(fp)
    11e8:	10d51915 	stw	r3,21604(r2)
    translation[Z] = z;
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	e0ffff17 	ldw	r3,-4(fp)
    11f4:	10c00215 	stw	r3,8(r2)
}
    11f8:	0001883a 	nop
    11fc:	e037883a 	mov	sp,fp
    1200:	df000017 	ldw	fp,0(sp)
    1204:	dec00104 	addi	sp,sp,4
    1208:	f800283a 	ret

0000120c <_ZN7Cube_3D18update_translationEfi>:

void Cube_3D::update_translation(float new_value, int axis){
    120c:	defffb04 	addi	sp,sp,-20
    1210:	dfc00415 	stw	ra,16(sp)
    1214:	df000315 	stw	fp,12(sp)
    1218:	df000304 	addi	fp,sp,12
    121c:	e13ffd15 	stw	r4,-12(fp)
    1220:	e17ffe15 	stw	r5,-8(fp)
    1224:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	10c00060 	cmpeqi	r3,r2,1
    1230:	1800071e 	bne	r3,zero,1250 <_ZN7Cube_3D18update_translationEfi+0x44>
    1234:	10c000a0 	cmpeqi	r3,r2,2
    1238:	1800091e 	bne	r3,zero,1260 <_ZN7Cube_3D18update_translationEfi+0x54>
    123c:	10000c1e 	bne	r2,zero,1270 <_ZN7Cube_3D18update_translationEfi+0x64>
    {
        case X:
            translation[X] = new_value;
    1240:	e0bffd17 	ldw	r2,-12(fp)
    1244:	e0fffe17 	ldw	r3,-8(fp)
    1248:	10c00015 	stw	r3,0(r2)
            break;
    124c:	00000806 	br	1270 <_ZN7Cube_3D18update_translationEfi+0x64>
        case Y:
            translation[Y] = new_value;
    1250:	e0bffd17 	ldw	r2,-12(fp)
    1254:	e0fffe17 	ldw	r3,-8(fp)
    1258:	10c00115 	stw	r3,4(r2)
            break;
    125c:	00000406 	br	1270 <_ZN7Cube_3D18update_translationEfi+0x64>
        case Z:
            translation[Z] = new_value;
    1260:	e0bffd17 	ldw	r2,-12(fp)
    1264:	e0fffe17 	ldw	r3,-8(fp)
    1268:	10c00215 	stw	r3,8(r2)
            break;
    126c:	0001883a 	nop
    }
    update_translation(translation[X], translation[Y], translation[Z]);
    1270:	e0bffd17 	ldw	r2,-12(fp)
    1274:	10c00017 	ldw	r3,0(r2)
    1278:	e0bffd17 	ldw	r2,-12(fp)
    127c:	11000117 	ldw	r4,4(r2)
    1280:	e0bffd17 	ldw	r2,-12(fp)
    1284:	11400217 	ldw	r5,8(r2)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffd17 	ldw	r4,-12(fp)
    1298:	00011940 	call	1194 <_ZN7Cube_3D18update_translationEfff>
}
    129c:	0001883a 	nop
    12a0:	e037883a 	mov	sp,fp
    12a4:	dfc00117 	ldw	ra,4(sp)
    12a8:	df000017 	ldw	fp,0(sp)
    12ac:	dec00204 	addi	sp,sp,8
    12b0:	f800283a 	ret

000012b4 <_ZN7Cube_3D27update_translation_relativeEfi>:

void Cube_3D::update_translation_relative(float relative_value, int axis ){
    12b4:	defffb04 	addi	sp,sp,-20
    12b8:	dfc00415 	stw	ra,16(sp)
    12bc:	df000315 	stw	fp,12(sp)
    12c0:	df000304 	addi	fp,sp,12
    12c4:	e13ffd15 	stw	r4,-12(fp)
    12c8:	e17ffe15 	stw	r5,-8(fp)
    12cc:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    12d0:	e0bfff17 	ldw	r2,-4(fp)
    12d4:	10c00060 	cmpeqi	r3,r2,1
    12d8:	18000d1e 	bne	r3,zero,1310 <_ZN7Cube_3D27update_translation_relativeEfi+0x5c>
    12dc:	10c000a0 	cmpeqi	r3,r2,2
    12e0:	1800151e 	bne	r3,zero,1338 <_ZN7Cube_3D27update_translation_relativeEfi+0x84>
    12e4:	10001e1e 	bne	r2,zero,1360 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
    {
        case X:
            translation[X] += relative_value;
    12e8:	e0bffd17 	ldw	r2,-12(fp)
    12ec:	10c00017 	ldw	r3,0(r2)
    12f0:	e17ffe17 	ldw	r5,-8(fp)
    12f4:	1809883a 	mov	r4,r3
    12f8:	00063840 	call	6384 <__addsf3>
    12fc:	1009883a 	mov	r4,r2
    1300:	2007883a 	mov	r3,r4
    1304:	e0bffd17 	ldw	r2,-12(fp)
    1308:	10c00015 	stw	r3,0(r2)
            break;
    130c:	00001406 	br	1360 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
        case Y:
            translation[Y] += relative_value;
    1310:	e0bffd17 	ldw	r2,-12(fp)
    1314:	10c00117 	ldw	r3,4(r2)
    1318:	e17ffe17 	ldw	r5,-8(fp)
    131c:	1809883a 	mov	r4,r3
    1320:	00063840 	call	6384 <__addsf3>
    1324:	1009883a 	mov	r4,r2
    1328:	2007883a 	mov	r3,r4
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10c00115 	stw	r3,4(r2)
            break;
    1334:	00000a06 	br	1360 <_ZN7Cube_3D27update_translation_relativeEfi+0xac>
        case Z:
            translation[Z] += relative_value;
    1338:	e0bffd17 	ldw	r2,-12(fp)
    133c:	10c00217 	ldw	r3,8(r2)
    1340:	e17ffe17 	ldw	r5,-8(fp)
    1344:	1809883a 	mov	r4,r3
    1348:	00063840 	call	6384 <__addsf3>
    134c:	1009883a 	mov	r4,r2
    1350:	2007883a 	mov	r3,r4
    1354:	e0bffd17 	ldw	r2,-12(fp)
    1358:	10c00215 	stw	r3,8(r2)
            break;
    135c:	0001883a 	nop
    }
    update_translation(translation[X], translation[Y], translation[Z]);
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10c00017 	ldw	r3,0(r2)
    1368:	e0bffd17 	ldw	r2,-12(fp)
    136c:	11000117 	ldw	r4,4(r2)
    1370:	e0bffd17 	ldw	r2,-12(fp)
    1374:	11400217 	ldw	r5,8(r2)
    1378:	280f883a 	mov	r7,r5
    137c:	200d883a 	mov	r6,r4
    1380:	180b883a 	mov	r5,r3
    1384:	e13ffd17 	ldw	r4,-12(fp)
    1388:	00011940 	call	1194 <_ZN7Cube_3D18update_translationEfff>
}
    138c:	0001883a 	nop
    1390:	e037883a 	mov	sp,fp
    1394:	dfc00117 	ldw	ra,4(sp)
    1398:	df000017 	ldw	fp,0(sp)
    139c:	dec00204 	addi	sp,sp,8
    13a0:	f800283a 	ret

000013a4 <_ZN7Cube_3D15update_rotationEfff>:


void Cube_3D::update_rotation(float rx, float ry, float rz){
    13a4:	defff104 	addi	sp,sp,-60
    13a8:	dfc00e15 	stw	ra,56(sp)
    13ac:	df000d15 	stw	fp,52(sp)
    13b0:	dc000c15 	stw	r16,48(sp)
    13b4:	df000d04 	addi	fp,sp,52
    13b8:	e13ffb15 	stw	r4,-20(fp)
    13bc:	e17ffc15 	stw	r5,-16(fp)
    13c0:	e1bffd15 	stw	r6,-12(fp)
    13c4:	e1fffe15 	stw	r7,-8(fp)
    //reference: http://www.opengl-tutorial.org/assets/faq_quaternions/index.html#Q36
    rotation[X] = rx;
    13c8:	e0bffb17 	ldw	r2,-20(fp)
    13cc:	e0fffc17 	ldw	r3,-16(fp)
    13d0:	10c00315 	stw	r3,12(r2)
    rotation[Y] = ry;
    13d4:	e0bffb17 	ldw	r2,-20(fp)
    13d8:	e0fffd17 	ldw	r3,-12(fp)
    13dc:	10c00415 	stw	r3,16(r2)
    rotation[Z] = rz;
    13e0:	e0bffb17 	ldw	r2,-20(fp)
    13e4:	e0fffe17 	ldw	r3,-8(fp)
    13e8:	10c00515 	stw	r3,20(r2)

    float a, b, c, d, e, f;
    float ad, bd;
    //calcolo individualmente i coseni proiettori
    a = cos(rotation[X]);
    13ec:	e0bffb17 	ldw	r2,-20(fp)
    13f0:	10c00317 	ldw	r3,12(r2)
    13f4:	1809883a 	mov	r4,r3
    13f8:	0009c580 	call	9c58 <__extendsfdf2>
    13fc:	100b883a 	mov	r5,r2
    1400:	180d883a 	mov	r6,r3
    1404:	2809883a 	mov	r4,r5
    1408:	300b883a 	mov	r5,r6
    140c:	00038c40 	call	38c4 <cos>
    1410:	100b883a 	mov	r5,r2
    1414:	180d883a 	mov	r6,r3
    1418:	2809883a 	mov	r4,r5
    141c:	300b883a 	mov	r5,r6
    1420:	0009d680 	call	9d68 <__truncdfsf2>
    1424:	1007883a 	mov	r3,r2
    1428:	e0fff315 	stw	r3,-52(fp)
    b = sin(rotation[X]);
    142c:	e0bffb17 	ldw	r2,-20(fp)
    1430:	10c00317 	ldw	r3,12(r2)
    1434:	1809883a 	mov	r4,r3
    1438:	0009c580 	call	9c58 <__extendsfdf2>
    143c:	100b883a 	mov	r5,r2
    1440:	180d883a 	mov	r6,r3
    1444:	2809883a 	mov	r4,r5
    1448:	300b883a 	mov	r5,r6
    144c:	00039b00 	call	39b0 <sin>
    1450:	100b883a 	mov	r5,r2
    1454:	180d883a 	mov	r6,r3
    1458:	2809883a 	mov	r4,r5
    145c:	300b883a 	mov	r5,r6
    1460:	0009d680 	call	9d68 <__truncdfsf2>
    1464:	1007883a 	mov	r3,r2
    1468:	e0fff415 	stw	r3,-48(fp)
    c = cos(rotation[Y]); 
    146c:	e0bffb17 	ldw	r2,-20(fp)
    1470:	10c00417 	ldw	r3,16(r2)
    1474:	1809883a 	mov	r4,r3
    1478:	0009c580 	call	9c58 <__extendsfdf2>
    147c:	100b883a 	mov	r5,r2
    1480:	180d883a 	mov	r6,r3
    1484:	2809883a 	mov	r4,r5
    1488:	300b883a 	mov	r5,r6
    148c:	00038c40 	call	38c4 <cos>
    1490:	100b883a 	mov	r5,r2
    1494:	180d883a 	mov	r6,r3
    1498:	2809883a 	mov	r4,r5
    149c:	300b883a 	mov	r5,r6
    14a0:	0009d680 	call	9d68 <__truncdfsf2>
    14a4:	1007883a 	mov	r3,r2
    14a8:	e0fff515 	stw	r3,-44(fp)
    d = sin(rotation[Y]);
    14ac:	e0bffb17 	ldw	r2,-20(fp)
    14b0:	10c00417 	ldw	r3,16(r2)
    14b4:	1809883a 	mov	r4,r3
    14b8:	0009c580 	call	9c58 <__extendsfdf2>
    14bc:	100b883a 	mov	r5,r2
    14c0:	180d883a 	mov	r6,r3
    14c4:	2809883a 	mov	r4,r5
    14c8:	300b883a 	mov	r5,r6
    14cc:	00039b00 	call	39b0 <sin>
    14d0:	100b883a 	mov	r5,r2
    14d4:	180d883a 	mov	r6,r3
    14d8:	2809883a 	mov	r4,r5
    14dc:	300b883a 	mov	r5,r6
    14e0:	0009d680 	call	9d68 <__truncdfsf2>
    14e4:	1007883a 	mov	r3,r2
    14e8:	e0fff615 	stw	r3,-40(fp)
    e = cos(rotation[Z]);
    14ec:	e0bffb17 	ldw	r2,-20(fp)
    14f0:	10c00517 	ldw	r3,20(r2)
    14f4:	1809883a 	mov	r4,r3
    14f8:	0009c580 	call	9c58 <__extendsfdf2>
    14fc:	100b883a 	mov	r5,r2
    1500:	180d883a 	mov	r6,r3
    1504:	2809883a 	mov	r4,r5
    1508:	300b883a 	mov	r5,r6
    150c:	00038c40 	call	38c4 <cos>
    1510:	100b883a 	mov	r5,r2
    1514:	180d883a 	mov	r6,r3
    1518:	2809883a 	mov	r4,r5
    151c:	300b883a 	mov	r5,r6
    1520:	0009d680 	call	9d68 <__truncdfsf2>
    1524:	1007883a 	mov	r3,r2
    1528:	e0fff715 	stw	r3,-36(fp)
    f = sin(rotation[Z]);
    152c:	e0bffb17 	ldw	r2,-20(fp)
    1530:	10c00517 	ldw	r3,20(r2)
    1534:	1809883a 	mov	r4,r3
    1538:	0009c580 	call	9c58 <__extendsfdf2>
    153c:	100b883a 	mov	r5,r2
    1540:	180d883a 	mov	r6,r3
    1544:	2809883a 	mov	r4,r5
    1548:	300b883a 	mov	r5,r6
    154c:	00039b00 	call	39b0 <sin>
    1550:	100b883a 	mov	r5,r2
    1554:	180d883a 	mov	r6,r3
    1558:	2809883a 	mov	r4,r5
    155c:	300b883a 	mov	r5,r6
    1560:	0009d680 	call	9d68 <__truncdfsf2>
    1564:	1007883a 	mov	r3,r2
    1568:	e0fff815 	stw	r3,-32(fp)
    
    ad = a*d;
    156c:	e17ff617 	ldw	r5,-40(fp)
    1570:	e13ff317 	ldw	r4,-52(fp)
    1574:	0006c8c0 	call	6c8c <__mulsf3>
    1578:	1007883a 	mov	r3,r2
    157c:	e0fff915 	stw	r3,-28(fp)
    bd = b*d;
    1580:	e17ff617 	ldw	r5,-40(fp)
    1584:	e13ff417 	ldw	r4,-48(fp)
    1588:	0006c8c0 	call	6c8c <__mulsf3>
    158c:	1007883a 	mov	r3,r2
    1590:	e0fffa15 	stw	r3,-24(fp)

    rotation_matrix[M4(0,0)] = c*e; 
    1594:	e17ff717 	ldw	r5,-36(fp)
    1598:	e13ff517 	ldw	r4,-44(fp)
    159c:	0006c8c0 	call	6c8c <__mulsf3>
    15a0:	1009883a 	mov	r4,r2
    15a4:	2007883a 	mov	r3,r4
    15a8:	e0bffb17 	ldw	r2,-20(fp)
    15ac:	10d4fe15 	stw	r3,21496(r2)
    rotation_matrix[M4(0,1)] = -c*f;
    15b0:	e0bff517 	ldw	r2,-44(fp)
    15b4:	10a0003c 	xorhi	r2,r2,32768
    15b8:	e17ff817 	ldw	r5,-32(fp)
    15bc:	1009883a 	mov	r4,r2
    15c0:	0006c8c0 	call	6c8c <__mulsf3>
    15c4:	1009883a 	mov	r4,r2
    15c8:	2007883a 	mov	r3,r4
    15cc:	e0bffb17 	ldw	r2,-20(fp)
    15d0:	10d4ff15 	stw	r3,21500(r2)
    rotation_matrix[M4(0,2)] = d;
    15d4:	e0bffb17 	ldw	r2,-20(fp)
    15d8:	e0fff617 	ldw	r3,-40(fp)
    15dc:	10d50015 	stw	r3,21504(r2)

    rotation_matrix[M4(1,0)] = bd*e + a*f; 
    15e0:	e17ff717 	ldw	r5,-36(fp)
    15e4:	e13ffa17 	ldw	r4,-24(fp)
    15e8:	0006c8c0 	call	6c8c <__mulsf3>
    15ec:	1007883a 	mov	r3,r2
    15f0:	1821883a 	mov	r16,r3
    15f4:	e17ff817 	ldw	r5,-32(fp)
    15f8:	e13ff317 	ldw	r4,-52(fp)
    15fc:	0006c8c0 	call	6c8c <__mulsf3>
    1600:	1007883a 	mov	r3,r2
    1604:	1805883a 	mov	r2,r3
    1608:	100b883a 	mov	r5,r2
    160c:	8009883a 	mov	r4,r16
    1610:	00063840 	call	6384 <__addsf3>
    1614:	1009883a 	mov	r4,r2
    1618:	2007883a 	mov	r3,r4
    161c:	e0bffb17 	ldw	r2,-20(fp)
    1620:	10d50215 	stw	r3,21512(r2)
    rotation_matrix[M4(1,1)] = -bd*f + a*e; 
    1624:	e0bffa17 	ldw	r2,-24(fp)
    1628:	10a0003c 	xorhi	r2,r2,32768
    162c:	e17ff817 	ldw	r5,-32(fp)
    1630:	1009883a 	mov	r4,r2
    1634:	0006c8c0 	call	6c8c <__mulsf3>
    1638:	1007883a 	mov	r3,r2
    163c:	1821883a 	mov	r16,r3
    1640:	e17ff717 	ldw	r5,-36(fp)
    1644:	e13ff317 	ldw	r4,-52(fp)
    1648:	0006c8c0 	call	6c8c <__mulsf3>
    164c:	1007883a 	mov	r3,r2
    1650:	1805883a 	mov	r2,r3
    1654:	100b883a 	mov	r5,r2
    1658:	8009883a 	mov	r4,r16
    165c:	00063840 	call	6384 <__addsf3>
    1660:	1009883a 	mov	r4,r2
    1664:	2007883a 	mov	r3,r4
    1668:	e0bffb17 	ldw	r2,-20(fp)
    166c:	10d50315 	stw	r3,21516(r2)
    rotation_matrix[M4(1,2)] = - b*c;  
    1670:	e0bff417 	ldw	r2,-48(fp)
    1674:	10a0003c 	xorhi	r2,r2,32768
    1678:	e17ff517 	ldw	r5,-44(fp)
    167c:	1009883a 	mov	r4,r2
    1680:	0006c8c0 	call	6c8c <__mulsf3>
    1684:	1009883a 	mov	r4,r2
    1688:	2007883a 	mov	r3,r4
    168c:	e0bffb17 	ldw	r2,-20(fp)
    1690:	10d50415 	stw	r3,21520(r2)

    rotation_matrix[M4(2,0)] = -ad*e + b*f; 
    1694:	e0bff917 	ldw	r2,-28(fp)
    1698:	10a0003c 	xorhi	r2,r2,32768
    169c:	e17ff717 	ldw	r5,-36(fp)
    16a0:	1009883a 	mov	r4,r2
    16a4:	0006c8c0 	call	6c8c <__mulsf3>
    16a8:	1007883a 	mov	r3,r2
    16ac:	1821883a 	mov	r16,r3
    16b0:	e17ff817 	ldw	r5,-32(fp)
    16b4:	e13ff417 	ldw	r4,-48(fp)
    16b8:	0006c8c0 	call	6c8c <__mulsf3>
    16bc:	1007883a 	mov	r3,r2
    16c0:	1805883a 	mov	r2,r3
    16c4:	100b883a 	mov	r5,r2
    16c8:	8009883a 	mov	r4,r16
    16cc:	00063840 	call	6384 <__addsf3>
    16d0:	1009883a 	mov	r4,r2
    16d4:	2007883a 	mov	r3,r4
    16d8:	e0bffb17 	ldw	r2,-20(fp)
    16dc:	10d50615 	stw	r3,21528(r2)
    rotation_matrix[M4(2,1)] = ad*f + b*e;
    16e0:	e17ff817 	ldw	r5,-32(fp)
    16e4:	e13ff917 	ldw	r4,-28(fp)
    16e8:	0006c8c0 	call	6c8c <__mulsf3>
    16ec:	1007883a 	mov	r3,r2
    16f0:	1821883a 	mov	r16,r3
    16f4:	e17ff717 	ldw	r5,-36(fp)
    16f8:	e13ff417 	ldw	r4,-48(fp)
    16fc:	0006c8c0 	call	6c8c <__mulsf3>
    1700:	1007883a 	mov	r3,r2
    1704:	1805883a 	mov	r2,r3
    1708:	100b883a 	mov	r5,r2
    170c:	8009883a 	mov	r4,r16
    1710:	00063840 	call	6384 <__addsf3>
    1714:	1009883a 	mov	r4,r2
    1718:	2007883a 	mov	r3,r4
    171c:	e0bffb17 	ldw	r2,-20(fp)
    1720:	10d50715 	stw	r3,21532(r2)
    rotation_matrix[M4(2,2)] = a*c;
    1724:	e17ff517 	ldw	r5,-44(fp)
    1728:	e13ff317 	ldw	r4,-52(fp)
    172c:	0006c8c0 	call	6c8c <__mulsf3>
    1730:	1009883a 	mov	r4,r2
    1734:	2007883a 	mov	r3,r4
    1738:	e0bffb17 	ldw	r2,-20(fp)
    173c:	10d50815 	stw	r3,21536(r2)
}
    1740:	0001883a 	nop
    1744:	e6ffff04 	addi	sp,fp,-4
    1748:	dfc00217 	ldw	ra,8(sp)
    174c:	df000117 	ldw	fp,4(sp)
    1750:	dc000017 	ldw	r16,0(sp)
    1754:	dec00304 	addi	sp,sp,12
    1758:	f800283a 	ret

0000175c <_ZN7Cube_3D15update_rotationEfi>:

void Cube_3D::update_rotation(float new_value, int axis){
    175c:	defffb04 	addi	sp,sp,-20
    1760:	dfc00415 	stw	ra,16(sp)
    1764:	df000315 	stw	fp,12(sp)
    1768:	df000304 	addi	fp,sp,12
    176c:	e13ffd15 	stw	r4,-12(fp)
    1770:	e17ffe15 	stw	r5,-8(fp)
    1774:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	10c00060 	cmpeqi	r3,r2,1
    1780:	1800071e 	bne	r3,zero,17a0 <_ZN7Cube_3D15update_rotationEfi+0x44>
    1784:	10c000a0 	cmpeqi	r3,r2,2
    1788:	1800091e 	bne	r3,zero,17b0 <_ZN7Cube_3D15update_rotationEfi+0x54>
    178c:	10000c1e 	bne	r2,zero,17c0 <_ZN7Cube_3D15update_rotationEfi+0x64>
    {
        case X:
            rotation[X] = new_value;
    1790:	e0bffd17 	ldw	r2,-12(fp)
    1794:	e0fffe17 	ldw	r3,-8(fp)
    1798:	10c00315 	stw	r3,12(r2)
            break;
    179c:	00000806 	br	17c0 <_ZN7Cube_3D15update_rotationEfi+0x64>
        case Y:
            rotation[Y] = new_value;
    17a0:	e0bffd17 	ldw	r2,-12(fp)
    17a4:	e0fffe17 	ldw	r3,-8(fp)
    17a8:	10c00415 	stw	r3,16(r2)
            break;
    17ac:	00000406 	br	17c0 <_ZN7Cube_3D15update_rotationEfi+0x64>
        case Z:
            rotation[Z] = new_value;
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	e0fffe17 	ldw	r3,-8(fp)
    17b8:	10c00515 	stw	r3,20(r2)
            break;
    17bc:	0001883a 	nop
    }
    update_rotation(rotation[X], rotation[Y], rotation[Z]);
    17c0:	e0bffd17 	ldw	r2,-12(fp)
    17c4:	10c00317 	ldw	r3,12(r2)
    17c8:	e0bffd17 	ldw	r2,-12(fp)
    17cc:	11000417 	ldw	r4,16(r2)
    17d0:	e0bffd17 	ldw	r2,-12(fp)
    17d4:	11400517 	ldw	r5,20(r2)
    17d8:	280f883a 	mov	r7,r5
    17dc:	200d883a 	mov	r6,r4
    17e0:	180b883a 	mov	r5,r3
    17e4:	e13ffd17 	ldw	r4,-12(fp)
    17e8:	00013a40 	call	13a4 <_ZN7Cube_3D15update_rotationEfff>
}
    17ec:	0001883a 	nop
    17f0:	e037883a 	mov	sp,fp
    17f4:	dfc00117 	ldw	ra,4(sp)
    17f8:	df000017 	ldw	fp,0(sp)
    17fc:	dec00204 	addi	sp,sp,8
    1800:	f800283a 	ret

00001804 <_ZN7Cube_3D24update_rotation_relativeEfi>:

void Cube_3D::update_rotation_relative(float new_value, int axis){
    1804:	defffb04 	addi	sp,sp,-20
    1808:	dfc00415 	stw	ra,16(sp)
    180c:	df000315 	stw	fp,12(sp)
    1810:	df000304 	addi	fp,sp,12
    1814:	e13ffd15 	stw	r4,-12(fp)
    1818:	e17ffe15 	stw	r5,-8(fp)
    181c:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    1820:	e0bfff17 	ldw	r2,-4(fp)
    1824:	10c00060 	cmpeqi	r3,r2,1
    1828:	1800331e 	bne	r3,zero,18f8 <_ZN7Cube_3D24update_rotation_relativeEfi+0xf4>
    182c:	10c000a0 	cmpeqi	r3,r2,2
    1830:	1800611e 	bne	r3,zero,19b8 <_ZN7Cube_3D24update_rotation_relativeEfi+0x1b4>
    1834:	1000901e 	bne	r2,zero,1a78 <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
    {
        case X:
            rotation[X] += new_value;
    1838:	e0bffd17 	ldw	r2,-12(fp)
    183c:	10c00317 	ldw	r3,12(r2)
    1840:	e17ffe17 	ldw	r5,-8(fp)
    1844:	1809883a 	mov	r4,r3
    1848:	00063840 	call	6384 <__addsf3>
    184c:	1009883a 	mov	r4,r2
    1850:	2007883a 	mov	r3,r4
    1854:	e0bffd17 	ldw	r2,-12(fp)
    1858:	10c00315 	stw	r3,12(r2)
            if(rotation[X]>2*M_PI)
    185c:	e0bffd17 	ldw	r2,-12(fp)
    1860:	10c00317 	ldw	r3,12(r2)
    1864:	1809883a 	mov	r4,r3
    1868:	0009c580 	call	9c58 <__extendsfdf2>
    186c:	1011883a 	mov	r8,r2
    1870:	1813883a 	mov	r9,r3
    1874:	01951134 	movhi	r6,21572
    1878:	318b4604 	addi	r6,r6,11544
    187c:	01d00674 	movhi	r7,16409
    1880:	39c87ec4 	addi	r7,r7,8699
    1884:	4009883a 	mov	r4,r8
    1888:	480b883a 	mov	r5,r9
    188c:	0008a0c0 	call	8a0c <__gedf2>
    1890:	00800116 	blt	zero,r2,1898 <_ZN7Cube_3D24update_rotation_relativeEfi+0x94>
                rotation[X]-=2*M_PI;
            break;
    1894:	00007806 	br	1a78 <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
    switch(axis)
    {
        case X:
            rotation[X] += new_value;
            if(rotation[X]>2*M_PI)
                rotation[X]-=2*M_PI;
    1898:	e0bffd17 	ldw	r2,-12(fp)
    189c:	10c00317 	ldw	r3,12(r2)
    18a0:	1809883a 	mov	r4,r3
    18a4:	0009c580 	call	9c58 <__extendsfdf2>
    18a8:	1011883a 	mov	r8,r2
    18ac:	1813883a 	mov	r9,r3
    18b0:	01951134 	movhi	r6,21572
    18b4:	318b4604 	addi	r6,r6,11544
    18b8:	01d00674 	movhi	r7,16409
    18bc:	39c87ec4 	addi	r7,r7,8699
    18c0:	4009883a 	mov	r4,r8
    18c4:	480b883a 	mov	r5,r9
    18c8:	00092000 	call	9200 <__subdf3>
    18cc:	1009883a 	mov	r4,r2
    18d0:	180b883a 	mov	r5,r3
    18d4:	2005883a 	mov	r2,r4
    18d8:	2807883a 	mov	r3,r5
    18dc:	1009883a 	mov	r4,r2
    18e0:	180b883a 	mov	r5,r3
    18e4:	0009d680 	call	9d68 <__truncdfsf2>
    18e8:	1007883a 	mov	r3,r2
    18ec:	e0bffd17 	ldw	r2,-12(fp)
    18f0:	10c00315 	stw	r3,12(r2)
            break;
    18f4:	00006006 	br	1a78 <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
        case Y:
            rotation[Y] += new_value;
    18f8:	e0bffd17 	ldw	r2,-12(fp)
    18fc:	10c00417 	ldw	r3,16(r2)
    1900:	e17ffe17 	ldw	r5,-8(fp)
    1904:	1809883a 	mov	r4,r3
    1908:	00063840 	call	6384 <__addsf3>
    190c:	1009883a 	mov	r4,r2
    1910:	2007883a 	mov	r3,r4
    1914:	e0bffd17 	ldw	r2,-12(fp)
    1918:	10c00415 	stw	r3,16(r2)
            if(rotation[Y]>2*M_PI)
    191c:	e0bffd17 	ldw	r2,-12(fp)
    1920:	10c00417 	ldw	r3,16(r2)
    1924:	1809883a 	mov	r4,r3
    1928:	0009c580 	call	9c58 <__extendsfdf2>
    192c:	1011883a 	mov	r8,r2
    1930:	1813883a 	mov	r9,r3
    1934:	01951134 	movhi	r6,21572
    1938:	318b4604 	addi	r6,r6,11544
    193c:	01d00674 	movhi	r7,16409
    1940:	39c87ec4 	addi	r7,r7,8699
    1944:	4009883a 	mov	r4,r8
    1948:	480b883a 	mov	r5,r9
    194c:	0008a0c0 	call	8a0c <__gedf2>
    1950:	00800116 	blt	zero,r2,1958 <_ZN7Cube_3D24update_rotation_relativeEfi+0x154>
                rotation[Y]-=2*M_PI;
            break;
    1954:	00004806 	br	1a78 <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
                rotation[X]-=2*M_PI;
            break;
        case Y:
            rotation[Y] += new_value;
            if(rotation[Y]>2*M_PI)
                rotation[Y]-=2*M_PI;
    1958:	e0bffd17 	ldw	r2,-12(fp)
    195c:	10c00417 	ldw	r3,16(r2)
    1960:	1809883a 	mov	r4,r3
    1964:	0009c580 	call	9c58 <__extendsfdf2>
    1968:	1011883a 	mov	r8,r2
    196c:	1813883a 	mov	r9,r3
    1970:	01951134 	movhi	r6,21572
    1974:	318b4604 	addi	r6,r6,11544
    1978:	01d00674 	movhi	r7,16409
    197c:	39c87ec4 	addi	r7,r7,8699
    1980:	4009883a 	mov	r4,r8
    1984:	480b883a 	mov	r5,r9
    1988:	00092000 	call	9200 <__subdf3>
    198c:	1009883a 	mov	r4,r2
    1990:	180b883a 	mov	r5,r3
    1994:	2005883a 	mov	r2,r4
    1998:	2807883a 	mov	r3,r5
    199c:	1009883a 	mov	r4,r2
    19a0:	180b883a 	mov	r5,r3
    19a4:	0009d680 	call	9d68 <__truncdfsf2>
    19a8:	1007883a 	mov	r3,r2
    19ac:	e0bffd17 	ldw	r2,-12(fp)
    19b0:	10c00415 	stw	r3,16(r2)
            break;
    19b4:	00003006 	br	1a78 <_ZN7Cube_3D24update_rotation_relativeEfi+0x274>
        case Z:
            rotation[Z] += new_value;
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	10c00517 	ldw	r3,20(r2)
    19c0:	e17ffe17 	ldw	r5,-8(fp)
    19c4:	1809883a 	mov	r4,r3
    19c8:	00063840 	call	6384 <__addsf3>
    19cc:	1009883a 	mov	r4,r2
    19d0:	2007883a 	mov	r3,r4
    19d4:	e0bffd17 	ldw	r2,-12(fp)
    19d8:	10c00515 	stw	r3,20(r2)
            if(rotation[Z]>2*M_PI)
    19dc:	e0bffd17 	ldw	r2,-12(fp)
    19e0:	10c00517 	ldw	r3,20(r2)
    19e4:	1809883a 	mov	r4,r3
    19e8:	0009c580 	call	9c58 <__extendsfdf2>
    19ec:	1011883a 	mov	r8,r2
    19f0:	1813883a 	mov	r9,r3
    19f4:	01951134 	movhi	r6,21572
    19f8:	318b4604 	addi	r6,r6,11544
    19fc:	01d00674 	movhi	r7,16409
    1a00:	39c87ec4 	addi	r7,r7,8699
    1a04:	4009883a 	mov	r4,r8
    1a08:	480b883a 	mov	r5,r9
    1a0c:	0008a0c0 	call	8a0c <__gedf2>
    1a10:	00800116 	blt	zero,r2,1a18 <_ZN7Cube_3D24update_rotation_relativeEfi+0x214>
                rotation[Z]-=2*M_PI;
            break;
    1a14:	00001706 	br	1a74 <_ZN7Cube_3D24update_rotation_relativeEfi+0x270>
                rotation[Y]-=2*M_PI;
            break;
        case Z:
            rotation[Z] += new_value;
            if(rotation[Z]>2*M_PI)
                rotation[Z]-=2*M_PI;
    1a18:	e0bffd17 	ldw	r2,-12(fp)
    1a1c:	10c00517 	ldw	r3,20(r2)
    1a20:	1809883a 	mov	r4,r3
    1a24:	0009c580 	call	9c58 <__extendsfdf2>
    1a28:	1011883a 	mov	r8,r2
    1a2c:	1813883a 	mov	r9,r3
    1a30:	01951134 	movhi	r6,21572
    1a34:	318b4604 	addi	r6,r6,11544
    1a38:	01d00674 	movhi	r7,16409
    1a3c:	39c87ec4 	addi	r7,r7,8699
    1a40:	4009883a 	mov	r4,r8
    1a44:	480b883a 	mov	r5,r9
    1a48:	00092000 	call	9200 <__subdf3>
    1a4c:	1009883a 	mov	r4,r2
    1a50:	180b883a 	mov	r5,r3
    1a54:	2005883a 	mov	r2,r4
    1a58:	2807883a 	mov	r3,r5
    1a5c:	1009883a 	mov	r4,r2
    1a60:	180b883a 	mov	r5,r3
    1a64:	0009d680 	call	9d68 <__truncdfsf2>
    1a68:	1007883a 	mov	r3,r2
    1a6c:	e0bffd17 	ldw	r2,-12(fp)
    1a70:	10c00515 	stw	r3,20(r2)
            break;
    1a74:	0001883a 	nop
    }
    update_rotation(rotation[X], rotation[Y], rotation[Z]);
    1a78:	e0bffd17 	ldw	r2,-12(fp)
    1a7c:	10c00317 	ldw	r3,12(r2)
    1a80:	e0bffd17 	ldw	r2,-12(fp)
    1a84:	11000417 	ldw	r4,16(r2)
    1a88:	e0bffd17 	ldw	r2,-12(fp)
    1a8c:	11400517 	ldw	r5,20(r2)
    1a90:	280f883a 	mov	r7,r5
    1a94:	200d883a 	mov	r6,r4
    1a98:	180b883a 	mov	r5,r3
    1a9c:	e13ffd17 	ldw	r4,-12(fp)
    1aa0:	00013a40 	call	13a4 <_ZN7Cube_3D15update_rotationEfff>
    #ifdef DEBUG_ACC
    printf("rx=%f,ry=%f,rz=%f /n",rotation[X],rotation[Y],rotation[Z]);
    #endif
}
    1aa4:	0001883a 	nop
    1aa8:	e037883a 	mov	sp,fp
    1aac:	dfc00117 	ldw	ra,4(sp)
    1ab0:	df000017 	ldw	fp,0(sp)
    1ab4:	dec00204 	addi	sp,sp,8
    1ab8:	f800283a 	ret

00001abc <_ZN7Cube_3D14update_scalingEfff>:

void Cube_3D::update_scaling(float sx, float sy, float sz){
    1abc:	defffb04 	addi	sp,sp,-20
    1ac0:	df000415 	stw	fp,16(sp)
    1ac4:	df000404 	addi	fp,sp,16
    1ac8:	e13ffc15 	stw	r4,-16(fp)
    1acc:	e17ffd15 	stw	r5,-12(fp)
    1ad0:	e1bffe15 	stw	r6,-8(fp)
    1ad4:	e1ffff15 	stw	r7,-4(fp)
    scaling[X] = sx;
    1ad8:	e0bffc17 	ldw	r2,-16(fp)
    1adc:	e0fffd17 	ldw	r3,-12(fp)
    1ae0:	10c00615 	stw	r3,24(r2)
    scaling_matrix[M4(0,0)] = sx;
    1ae4:	e0bffc17 	ldw	r2,-16(fp)
    1ae8:	e0fffd17 	ldw	r3,-12(fp)
    1aec:	10d51e15 	stw	r3,21624(r2)

    scaling[Y] = sy;
    1af0:	e0bffc17 	ldw	r2,-16(fp)
    1af4:	e0fffe17 	ldw	r3,-8(fp)
    1af8:	10c00715 	stw	r3,28(r2)
    scaling_matrix[M4(1,1)] = sy;
    1afc:	e0bffc17 	ldw	r2,-16(fp)
    1b00:	e0fffe17 	ldw	r3,-8(fp)
    1b04:	10d52315 	stw	r3,21644(r2)

    scaling[Z] = sz;
    1b08:	e0bffc17 	ldw	r2,-16(fp)
    1b0c:	e0ffff17 	ldw	r3,-4(fp)
    1b10:	10c00815 	stw	r3,32(r2)
    scaling_matrix[M4(2,2)] = sz;
    1b14:	e0bffc17 	ldw	r2,-16(fp)
    1b18:	e0ffff17 	ldw	r3,-4(fp)
    1b1c:	10d52815 	stw	r3,21664(r2)
}
    1b20:	0001883a 	nop
    1b24:	e037883a 	mov	sp,fp
    1b28:	df000017 	ldw	fp,0(sp)
    1b2c:	dec00104 	addi	sp,sp,4
    1b30:	f800283a 	ret

00001b34 <_ZN7Cube_3D14update_scalingEfi>:

void Cube_3D::update_scaling(float new_value, int axis){
    1b34:	defffb04 	addi	sp,sp,-20
    1b38:	dfc00415 	stw	ra,16(sp)
    1b3c:	df000315 	stw	fp,12(sp)
    1b40:	df000304 	addi	fp,sp,12
    1b44:	e13ffd15 	stw	r4,-12(fp)
    1b48:	e17ffe15 	stw	r5,-8(fp)
    1b4c:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    1b50:	e0bfff17 	ldw	r2,-4(fp)
    1b54:	10c00060 	cmpeqi	r3,r2,1
    1b58:	1800071e 	bne	r3,zero,1b78 <_ZN7Cube_3D14update_scalingEfi+0x44>
    1b5c:	10c000a0 	cmpeqi	r3,r2,2
    1b60:	1800091e 	bne	r3,zero,1b88 <_ZN7Cube_3D14update_scalingEfi+0x54>
    1b64:	10000c1e 	bne	r2,zero,1b98 <_ZN7Cube_3D14update_scalingEfi+0x64>
    {
        case X:
            scaling[X] = new_value;
    1b68:	e0bffd17 	ldw	r2,-12(fp)
    1b6c:	e0fffe17 	ldw	r3,-8(fp)
    1b70:	10c00615 	stw	r3,24(r2)
            break;
    1b74:	00000806 	br	1b98 <_ZN7Cube_3D14update_scalingEfi+0x64>
        case Y:
            scaling[Y] = new_value;
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	e0fffe17 	ldw	r3,-8(fp)
    1b80:	10c00715 	stw	r3,28(r2)
            break;
    1b84:	00000406 	br	1b98 <_ZN7Cube_3D14update_scalingEfi+0x64>
        case Z:
            scaling[Z] = new_value;
    1b88:	e0bffd17 	ldw	r2,-12(fp)
    1b8c:	e0fffe17 	ldw	r3,-8(fp)
    1b90:	10c00815 	stw	r3,32(r2)
            break;
    1b94:	0001883a 	nop
    }
    update_scaling(scaling[X], scaling[Y], scaling[Z]);
    1b98:	e0bffd17 	ldw	r2,-12(fp)
    1b9c:	10c00617 	ldw	r3,24(r2)
    1ba0:	e0bffd17 	ldw	r2,-12(fp)
    1ba4:	11000717 	ldw	r4,28(r2)
    1ba8:	e0bffd17 	ldw	r2,-12(fp)
    1bac:	11400817 	ldw	r5,32(r2)
    1bb0:	280f883a 	mov	r7,r5
    1bb4:	200d883a 	mov	r6,r4
    1bb8:	180b883a 	mov	r5,r3
    1bbc:	e13ffd17 	ldw	r4,-12(fp)
    1bc0:	0001abc0 	call	1abc <_ZN7Cube_3D14update_scalingEfff>
}
    1bc4:	0001883a 	nop
    1bc8:	e037883a 	mov	sp,fp
    1bcc:	dfc00117 	ldw	ra,4(sp)
    1bd0:	df000017 	ldw	fp,0(sp)
    1bd4:	dec00204 	addi	sp,sp,8
    1bd8:	f800283a 	ret

00001bdc <_ZN7Cube_3D23update_scaling_relativeEfi>:

void Cube_3D::update_scaling_relative(float new_value, int axis){
    1bdc:	defffb04 	addi	sp,sp,-20
    1be0:	dfc00415 	stw	ra,16(sp)
    1be4:	df000315 	stw	fp,12(sp)
    1be8:	df000304 	addi	fp,sp,12
    1bec:	e13ffd15 	stw	r4,-12(fp)
    1bf0:	e17ffe15 	stw	r5,-8(fp)
    1bf4:	e1bfff15 	stw	r6,-4(fp)
    switch(axis)
    1bf8:	e0bfff17 	ldw	r2,-4(fp)
    1bfc:	10c00060 	cmpeqi	r3,r2,1
    1c00:	18000d1e 	bne	r3,zero,1c38 <_ZN7Cube_3D23update_scaling_relativeEfi+0x5c>
    1c04:	10c000a0 	cmpeqi	r3,r2,2
    1c08:	1800151e 	bne	r3,zero,1c60 <_ZN7Cube_3D23update_scaling_relativeEfi+0x84>
    1c0c:	10001e1e 	bne	r2,zero,1c88 <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
    {
        case X:
            scaling[X] += new_value;
    1c10:	e0bffd17 	ldw	r2,-12(fp)
    1c14:	10c00617 	ldw	r3,24(r2)
    1c18:	e17ffe17 	ldw	r5,-8(fp)
    1c1c:	1809883a 	mov	r4,r3
    1c20:	00063840 	call	6384 <__addsf3>
    1c24:	1009883a 	mov	r4,r2
    1c28:	2007883a 	mov	r3,r4
    1c2c:	e0bffd17 	ldw	r2,-12(fp)
    1c30:	10c00615 	stw	r3,24(r2)
            break;
    1c34:	00001406 	br	1c88 <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
        case Y:
            scaling[Y] += new_value;
    1c38:	e0bffd17 	ldw	r2,-12(fp)
    1c3c:	10c00717 	ldw	r3,28(r2)
    1c40:	e17ffe17 	ldw	r5,-8(fp)
    1c44:	1809883a 	mov	r4,r3
    1c48:	00063840 	call	6384 <__addsf3>
    1c4c:	1009883a 	mov	r4,r2
    1c50:	2007883a 	mov	r3,r4
    1c54:	e0bffd17 	ldw	r2,-12(fp)
    1c58:	10c00715 	stw	r3,28(r2)
            break;
    1c5c:	00000a06 	br	1c88 <_ZN7Cube_3D23update_scaling_relativeEfi+0xac>
        case Z:
            scaling[Z] += new_value;
    1c60:	e0bffd17 	ldw	r2,-12(fp)
    1c64:	10c00817 	ldw	r3,32(r2)
    1c68:	e17ffe17 	ldw	r5,-8(fp)
    1c6c:	1809883a 	mov	r4,r3
    1c70:	00063840 	call	6384 <__addsf3>
    1c74:	1009883a 	mov	r4,r2
    1c78:	2007883a 	mov	r3,r4
    1c7c:	e0bffd17 	ldw	r2,-12(fp)
    1c80:	10c00815 	stw	r3,32(r2)
            break;
    1c84:	0001883a 	nop
    }
    update_scaling(scaling[X], scaling[Y], scaling[Z]);
    1c88:	e0bffd17 	ldw	r2,-12(fp)
    1c8c:	10c00617 	ldw	r3,24(r2)
    1c90:	e0bffd17 	ldw	r2,-12(fp)
    1c94:	11000717 	ldw	r4,28(r2)
    1c98:	e0bffd17 	ldw	r2,-12(fp)
    1c9c:	11400817 	ldw	r5,32(r2)
    1ca0:	280f883a 	mov	r7,r5
    1ca4:	200d883a 	mov	r6,r4
    1ca8:	180b883a 	mov	r5,r3
    1cac:	e13ffd17 	ldw	r4,-12(fp)
    1cb0:	0001abc0 	call	1abc <_ZN7Cube_3D14update_scalingEfff>
}
    1cb4:	0001883a 	nop
    1cb8:	e037883a 	mov	sp,fp
    1cbc:	dfc00117 	ldw	ra,4(sp)
    1cc0:	df000017 	ldw	fp,0(sp)
    1cc4:	dec00204 	addi	sp,sp,8
    1cc8:	f800283a 	ret

00001ccc <_ZN7Cube_3D13display_frameEv>:


int Cube_3D::display_frame(){
    1ccc:	defff904 	addi	sp,sp,-28
    1cd0:	dfc00615 	stw	ra,24(sp)
    1cd4:	df000515 	stw	fp,20(sp)
    1cd8:	df000504 	addi	fp,sp,20
    1cdc:	e13fff15 	stw	r4,-4(fp)
    //pulisco il back buffer
    alt_up_pixel_buffer_dma_clear_screen_delayed(pixel_buf_dma_dev,1);
    1ce0:	d0a6e617 	ldw	r2,-25704(gp)
    1ce4:	01400044 	movi	r5,1
    1ce8:	1009883a 	mov	r4,r2
    1cec:	00006300 	call	630 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi>
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[5][X],vertex_on_2D[5][Y],vertex_on_2D[6][X],vertex_on_2D[6][Y], YELLOW, 1);
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[6][X],vertex_on_2D[6][Y],vertex_on_2D[7][X],vertex_on_2D[7][Y], YELLOW, 1);

    //disegno il cubo tramite i vari triangoli
    //disegno una linea tra i vertici dei triangoli, indicizzando la matrice vertex_on_2D con il contenuto di faces, che contiene il n. del vertice di ciascun triangolo
    for(int i=0; i<N_FACES; i++){
    1cf0:	e03ffe15 	stw	zero,-8(fp)
    1cf4:	e0bffe17 	ldw	r2,-8(fp)
    1cf8:	10802c88 	cmpgei	r2,r2,178
    1cfc:	1000a91e 	bne	r2,zero,1fa4 <_ZN7Cube_3D13display_frameEv+0x2d8>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][A]][X], vertex_on_2D[faces[i][A]][Y],vertex_on_2D[faces[i][B]][X],vertex_on_2D[faces[i][B]][Y],0xFFFF , 1);
    1d00:	d126e617 	ldw	r4,-25704(gp)
    1d04:	e0ffff17 	ldw	r3,-4(fp)
    1d08:	e0bffe17 	ldw	r2,-8(fp)
    1d0c:	108001a4 	muli	r2,r2,6
    1d10:	1885883a 	add	r2,r3,r2
    1d14:	10957e04 	addi	r2,r2,22008
    1d18:	1080000b 	ldhu	r2,0(r2)
    1d1c:	10bfffcc 	andi	r2,r2,65535
    1d20:	e0ffff17 	ldw	r3,-4(fp)
    1d24:	10821844 	addi	r2,r2,2145
    1d28:	100490fa 	slli	r2,r2,3
    1d2c:	1885883a 	add	r2,r3,r2
    1d30:	11400017 	ldw	r5,0(r2)
    1d34:	e0ffff17 	ldw	r3,-4(fp)
    1d38:	e0bffe17 	ldw	r2,-8(fp)
    1d3c:	108001a4 	muli	r2,r2,6
    1d40:	1885883a 	add	r2,r3,r2
    1d44:	10957e04 	addi	r2,r2,22008
    1d48:	1080000b 	ldhu	r2,0(r2)
    1d4c:	10bfffcc 	andi	r2,r2,65535
    1d50:	e0ffff17 	ldw	r3,-4(fp)
    1d54:	100490fa 	slli	r2,r2,3
    1d58:	1885883a 	add	r2,r3,r2
    1d5c:	1090c304 	addi	r2,r2,17164
    1d60:	11800017 	ldw	r6,0(r2)
    1d64:	e0ffff17 	ldw	r3,-4(fp)
    1d68:	e0bffe17 	ldw	r2,-8(fp)
    1d6c:	108001a4 	muli	r2,r2,6
    1d70:	1885883a 	add	r2,r3,r2
    1d74:	10957e84 	addi	r2,r2,22010
    1d78:	1080000b 	ldhu	r2,0(r2)
    1d7c:	10bfffcc 	andi	r2,r2,65535
    1d80:	e0ffff17 	ldw	r3,-4(fp)
    1d84:	10821844 	addi	r2,r2,2145
    1d88:	100490fa 	slli	r2,r2,3
    1d8c:	1885883a 	add	r2,r3,r2
    1d90:	11c00017 	ldw	r7,0(r2)
    1d94:	e0ffff17 	ldw	r3,-4(fp)
    1d98:	e0bffe17 	ldw	r2,-8(fp)
    1d9c:	108001a4 	muli	r2,r2,6
    1da0:	1885883a 	add	r2,r3,r2
    1da4:	10957e84 	addi	r2,r2,22010
    1da8:	1080000b 	ldhu	r2,0(r2)
    1dac:	10bfffcc 	andi	r2,r2,65535
    1db0:	e0ffff17 	ldw	r3,-4(fp)
    1db4:	100490fa 	slli	r2,r2,3
    1db8:	1885883a 	add	r2,r3,r2
    1dbc:	1090c304 	addi	r2,r2,17164
    1dc0:	10800017 	ldw	r2,0(r2)
    1dc4:	00c00044 	movi	r3,1
    1dc8:	d8c00215 	stw	r3,8(sp)
    1dcc:	00ffffd4 	movui	r3,65535
    1dd0:	d8c00115 	stw	r3,4(sp)
    1dd4:	d8800015 	stw	r2,0(sp)
    1dd8:	000084c0 	call	84c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][B]][X], vertex_on_2D[faces[i][B]][Y],vertex_on_2D[faces[i][C]][X],vertex_on_2D[faces[i][C]][Y],0xFFFF , 1);
    1ddc:	d126e617 	ldw	r4,-25704(gp)
    1de0:	e0ffff17 	ldw	r3,-4(fp)
    1de4:	e0bffe17 	ldw	r2,-8(fp)
    1de8:	108001a4 	muli	r2,r2,6
    1dec:	1885883a 	add	r2,r3,r2
    1df0:	10957e84 	addi	r2,r2,22010
    1df4:	1080000b 	ldhu	r2,0(r2)
    1df8:	10bfffcc 	andi	r2,r2,65535
    1dfc:	e0ffff17 	ldw	r3,-4(fp)
    1e00:	10821844 	addi	r2,r2,2145
    1e04:	100490fa 	slli	r2,r2,3
    1e08:	1885883a 	add	r2,r3,r2
    1e0c:	11400017 	ldw	r5,0(r2)
    1e10:	e0ffff17 	ldw	r3,-4(fp)
    1e14:	e0bffe17 	ldw	r2,-8(fp)
    1e18:	108001a4 	muli	r2,r2,6
    1e1c:	1885883a 	add	r2,r3,r2
    1e20:	10957e84 	addi	r2,r2,22010
    1e24:	1080000b 	ldhu	r2,0(r2)
    1e28:	10bfffcc 	andi	r2,r2,65535
    1e2c:	e0ffff17 	ldw	r3,-4(fp)
    1e30:	100490fa 	slli	r2,r2,3
    1e34:	1885883a 	add	r2,r3,r2
    1e38:	1090c304 	addi	r2,r2,17164
    1e3c:	11800017 	ldw	r6,0(r2)
    1e40:	e0ffff17 	ldw	r3,-4(fp)
    1e44:	e0bffe17 	ldw	r2,-8(fp)
    1e48:	108001a4 	muli	r2,r2,6
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10957f04 	addi	r2,r2,22012
    1e54:	1080000b 	ldhu	r2,0(r2)
    1e58:	10bfffcc 	andi	r2,r2,65535
    1e5c:	e0ffff17 	ldw	r3,-4(fp)
    1e60:	10821844 	addi	r2,r2,2145
    1e64:	100490fa 	slli	r2,r2,3
    1e68:	1885883a 	add	r2,r3,r2
    1e6c:	11c00017 	ldw	r7,0(r2)
    1e70:	e0ffff17 	ldw	r3,-4(fp)
    1e74:	e0bffe17 	ldw	r2,-8(fp)
    1e78:	108001a4 	muli	r2,r2,6
    1e7c:	1885883a 	add	r2,r3,r2
    1e80:	10957f04 	addi	r2,r2,22012
    1e84:	1080000b 	ldhu	r2,0(r2)
    1e88:	10bfffcc 	andi	r2,r2,65535
    1e8c:	e0ffff17 	ldw	r3,-4(fp)
    1e90:	100490fa 	slli	r2,r2,3
    1e94:	1885883a 	add	r2,r3,r2
    1e98:	1090c304 	addi	r2,r2,17164
    1e9c:	10800017 	ldw	r2,0(r2)
    1ea0:	00c00044 	movi	r3,1
    1ea4:	d8c00215 	stw	r3,8(sp)
    1ea8:	00ffffd4 	movui	r3,65535
    1eac:	d8c00115 	stw	r3,4(sp)
    1eb0:	d8800015 	stw	r2,0(sp)
    1eb4:	000084c0 	call	84c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
        alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev, vertex_on_2D[faces[i][C]][X], vertex_on_2D[faces[i][C]][Y],vertex_on_2D[faces[i][A]][X],vertex_on_2D[faces[i][A]][Y],0xFFFF , 1);
    1eb8:	d126e617 	ldw	r4,-25704(gp)
    1ebc:	e0ffff17 	ldw	r3,-4(fp)
    1ec0:	e0bffe17 	ldw	r2,-8(fp)
    1ec4:	108001a4 	muli	r2,r2,6
    1ec8:	1885883a 	add	r2,r3,r2
    1ecc:	10957f04 	addi	r2,r2,22012
    1ed0:	1080000b 	ldhu	r2,0(r2)
    1ed4:	10bfffcc 	andi	r2,r2,65535
    1ed8:	e0ffff17 	ldw	r3,-4(fp)
    1edc:	10821844 	addi	r2,r2,2145
    1ee0:	100490fa 	slli	r2,r2,3
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	11400017 	ldw	r5,0(r2)
    1eec:	e0ffff17 	ldw	r3,-4(fp)
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	108001a4 	muli	r2,r2,6
    1ef8:	1885883a 	add	r2,r3,r2
    1efc:	10957f04 	addi	r2,r2,22012
    1f00:	1080000b 	ldhu	r2,0(r2)
    1f04:	10bfffcc 	andi	r2,r2,65535
    1f08:	e0ffff17 	ldw	r3,-4(fp)
    1f0c:	100490fa 	slli	r2,r2,3
    1f10:	1885883a 	add	r2,r3,r2
    1f14:	1090c304 	addi	r2,r2,17164
    1f18:	11800017 	ldw	r6,0(r2)
    1f1c:	e0ffff17 	ldw	r3,-4(fp)
    1f20:	e0bffe17 	ldw	r2,-8(fp)
    1f24:	108001a4 	muli	r2,r2,6
    1f28:	1885883a 	add	r2,r3,r2
    1f2c:	10957e04 	addi	r2,r2,22008
    1f30:	1080000b 	ldhu	r2,0(r2)
    1f34:	10bfffcc 	andi	r2,r2,65535
    1f38:	e0ffff17 	ldw	r3,-4(fp)
    1f3c:	10821844 	addi	r2,r2,2145
    1f40:	100490fa 	slli	r2,r2,3
    1f44:	1885883a 	add	r2,r3,r2
    1f48:	11c00017 	ldw	r7,0(r2)
    1f4c:	e0ffff17 	ldw	r3,-4(fp)
    1f50:	e0bffe17 	ldw	r2,-8(fp)
    1f54:	108001a4 	muli	r2,r2,6
    1f58:	1885883a 	add	r2,r3,r2
    1f5c:	10957e04 	addi	r2,r2,22008
    1f60:	1080000b 	ldhu	r2,0(r2)
    1f64:	10bfffcc 	andi	r2,r2,65535
    1f68:	e0ffff17 	ldw	r3,-4(fp)
    1f6c:	100490fa 	slli	r2,r2,3
    1f70:	1885883a 	add	r2,r3,r2
    1f74:	1090c304 	addi	r2,r2,17164
    1f78:	10800017 	ldw	r2,0(r2)
    1f7c:	00c00044 	movi	r3,1
    1f80:	d8c00215 	stw	r3,8(sp)
    1f84:	00ffffd4 	movui	r3,65535
    1f88:	d8c00115 	stw	r3,4(sp)
    1f8c:	d8800015 	stw	r2,0(sp)
    1f90:	000084c0 	call	84c <_Z51alt_up_pixel_buffer_dma_draw_line_enhanced_clippingP27alt_up_pixel_buffer_dma_deviiiiii>
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[5][X],vertex_on_2D[5][Y],vertex_on_2D[6][X],vertex_on_2D[6][Y], YELLOW, 1);
    // alt_up_pixel_buffer_dma_draw_line_enhanced_clipping(pixel_buf_dma_dev,vertex_on_2D[6][X],vertex_on_2D[6][Y],vertex_on_2D[7][X],vertex_on_2D[7][Y], YELLOW, 1);

    //disegno il cubo tramite i vari triangoli
    //disegno una linea tra i vertici dei triangoli, indicizzando la matrice vertex_on_2D con il contenuto di faces, che contiene il n. del vertice di ciascun triangolo
    for(int i=0; i<N_FACES; i++){
    1f94:	e0bffe17 	ldw	r2,-8(fp)
    1f98:	10800044 	addi	r2,r2,1
    1f9c:	e0bffe15 	stw	r2,-8(fp)
    1fa0:	003f5406 	br	1cf4 <__ram_exceptions_end+0xfb0006ac>
    }
    //disegna linea giusto per vedere se effettivamente programma
    //alt_up_pixel_buffer_dma_draw_line(pixel_buf_dma_dev,25, 70,100,100, WHITE, 1);

    //swap del buffer, e attesa che sia eseguito
    alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dma_dev);
    1fa4:	d0a6e617 	ldw	r2,-25704(gp)
    1fa8:	1009883a 	mov	r4,r2
    1fac:	000eac40 	call	eac4 <alt_up_pixel_buffer_dma_swap_buffers>
    while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev)){;}
    1fb0:	d0a6e617 	ldw	r2,-25704(gp)
    1fb4:	1009883a 	mov	r4,r2
    1fb8:	000eb240 	call	eb24 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
    1fbc:	1004c03a 	cmpne	r2,r2,zero
    1fc0:	10803fcc 	andi	r2,r2,255
    1fc4:	10000126 	beq	r2,zero,1fcc <_ZN7Cube_3D13display_frameEv+0x300>
    1fc8:	003ff906 	br	1fb0 <__ram_exceptions_end+0xfb000968>
    return 0;
    1fcc:	0005883a 	mov	r2,zero
}
    1fd0:	e037883a 	mov	sp,fp
    1fd4:	dfc00117 	ldw	ra,4(sp)
    1fd8:	df000017 	ldw	fp,0(sp)
    1fdc:	dec00204 	addi	sp,sp,8
    1fe0:	f800283a 	ret

00001fe4 <_ZN7Cube_3D22vector_matrix_multiplyEv>:

void Cube_3D::vector_matrix_multiply(){
    1fe4:	defff604 	addi	sp,sp,-40
    1fe8:	dfc00915 	stw	ra,36(sp)
    1fec:	df000815 	stw	fp,32(sp)
    1ff0:	dc400715 	stw	r17,28(sp)
    1ff4:	dc000615 	stw	r16,24(sp)
    1ff8:	df000804 	addi	fp,sp,32
    1ffc:	e13ffd15 	stw	r4,-12(fp)
    #ifdef DEBUG_VECTORS
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
    2000:	e03ff815 	stw	zero,-32(fp)
    2004:	e0bff817 	ldw	r2,-32(fp)
    2008:	10808588 	cmpgei	r2,r2,534
    200c:	10017a1e 	bne	r2,zero,25f8 <_ZN7Cube_3D22vector_matrix_multiplyEv+0x614>
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
    2010:	e0bffd17 	ldw	r2,-12(fp)
    2014:	11154e17 	ldw	r4,21816(r2)
    2018:	e0fffd17 	ldw	r3,-12(fp)
    201c:	e0bff817 	ldw	r2,-32(fp)
    2020:	10800484 	addi	r2,r2,18
    2024:	1085883a 	add	r2,r2,r2
    2028:	1085883a 	add	r2,r2,r2
    202c:	1885883a 	add	r2,r3,r2
    2030:	10c00017 	ldw	r3,0(r2)
    2034:	180b883a 	mov	r5,r3
    2038:	0006c8c0 	call	6c8c <__mulsf3>
    203c:	1007883a 	mov	r3,r2
    2040:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
    2044:	e0bffd17 	ldw	r2,-12(fp)
    2048:	11154f17 	ldw	r4,21820(r2)
    204c:	e0bff817 	ldw	r2,-32(fp)
    2050:	10808584 	addi	r2,r2,534
    2054:	e0fffd17 	ldw	r3,-12(fp)
    2058:	10800484 	addi	r2,r2,18
    205c:	1085883a 	add	r2,r2,r2
    2060:	1085883a 	add	r2,r2,r2
    2064:	1885883a 	add	r2,r3,r2
    2068:	10c00017 	ldw	r3,0(r2)
    206c:	180b883a 	mov	r5,r3
    2070:	0006c8c0 	call	6c8c <__mulsf3>
    2074:	1007883a 	mov	r3,r2
    2078:	1805883a 	mov	r2,r3
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
    207c:	100b883a 	mov	r5,r2
    2080:	8009883a 	mov	r4,r16
    2084:	00063840 	call	6384 <__addsf3>
    2088:	1007883a 	mov	r3,r2
    208c:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
    2090:	e0bffd17 	ldw	r2,-12(fp)
    2094:	11155017 	ldw	r4,21824(r2)
    2098:	e0bff817 	ldw	r2,-32(fp)
    209c:	10810b04 	addi	r2,r2,1068
    20a0:	e0fffd17 	ldw	r3,-12(fp)
    20a4:	10800484 	addi	r2,r2,18
    20a8:	1085883a 	add	r2,r2,r2
    20ac:	1085883a 	add	r2,r2,r2
    20b0:	1885883a 	add	r2,r3,r2
    20b4:	10c00017 	ldw	r3,0(r2)
    20b8:	180b883a 	mov	r5,r3
    20bc:	0006c8c0 	call	6c8c <__mulsf3>
    20c0:	1007883a 	mov	r3,r2
    20c4:	1805883a 	mov	r2,r3
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
    20c8:	100b883a 	mov	r5,r2
    20cc:	8009883a 	mov	r4,r16
    20d0:	00063840 	call	6384 <__addsf3>
    20d4:	1007883a 	mov	r3,r2
    20d8:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];
    20dc:	e0bffd17 	ldw	r2,-12(fp)
    20e0:	11155117 	ldw	r4,21828(r2)
    20e4:	e0bff817 	ldw	r2,-32(fp)
    20e8:	10819084 	addi	r2,r2,1602
    20ec:	e0fffd17 	ldw	r3,-12(fp)
    20f0:	10800484 	addi	r2,r2,18
    20f4:	1085883a 	add	r2,r2,r2
    20f8:	1085883a 	add	r2,r2,r2
    20fc:	1885883a 	add	r2,r3,r2
    2100:	10c00017 	ldw	r3,0(r2)
    2104:	180b883a 	mov	r5,r3
    2108:	0006c8c0 	call	6c8c <__mulsf3>
    210c:	1007883a 	mov	r3,r2
    2110:	1805883a 	mov	r2,r3

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
    2114:	100b883a 	mov	r5,r2
    2118:	8009883a 	mov	r4,r16
    211c:	00063840 	call	6384 <__addsf3>
    2120:	1007883a 	mov	r3,r2
    2124:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];
    2128:	e0bff915 	stw	r2,-28(fp)

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	11155217 	ldw	r4,21832(r2)
    2134:	e0fffd17 	ldw	r3,-12(fp)
    2138:	e0bff817 	ldw	r2,-32(fp)
    213c:	10800484 	addi	r2,r2,18
    2140:	1085883a 	add	r2,r2,r2
    2144:	1085883a 	add	r2,r2,r2
    2148:	1885883a 	add	r2,r3,r2
    214c:	10c00017 	ldw	r3,0(r2)
    2150:	180b883a 	mov	r5,r3
    2154:	0006c8c0 	call	6c8c <__mulsf3>
    2158:	1007883a 	mov	r3,r2
    215c:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
    2160:	e0bffd17 	ldw	r2,-12(fp)
    2164:	11155317 	ldw	r4,21836(r2)
    2168:	e0bff817 	ldw	r2,-32(fp)
    216c:	10808584 	addi	r2,r2,534
    2170:	e0fffd17 	ldw	r3,-12(fp)
    2174:	10800484 	addi	r2,r2,18
    2178:	1085883a 	add	r2,r2,r2
    217c:	1085883a 	add	r2,r2,r2
    2180:	1885883a 	add	r2,r3,r2
    2184:	10c00017 	ldw	r3,0(r2)
    2188:	180b883a 	mov	r5,r3
    218c:	0006c8c0 	call	6c8c <__mulsf3>
    2190:	1007883a 	mov	r3,r2
    2194:	1805883a 	mov	r2,r3
        temp_transformed_vertex[X] =   complete_matrix[M4(0,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
    2198:	100b883a 	mov	r5,r2
    219c:	8009883a 	mov	r4,r16
    21a0:	00063840 	call	6384 <__addsf3>
    21a4:	1007883a 	mov	r3,r2
    21a8:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
    21ac:	e0bffd17 	ldw	r2,-12(fp)
    21b0:	11155417 	ldw	r4,21840(r2)
    21b4:	e0bff817 	ldw	r2,-32(fp)
    21b8:	10810b04 	addi	r2,r2,1068
    21bc:	e0fffd17 	ldw	r3,-12(fp)
    21c0:	10800484 	addi	r2,r2,18
    21c4:	1085883a 	add	r2,r2,r2
    21c8:	1085883a 	add	r2,r2,r2
    21cc:	1885883a 	add	r2,r3,r2
    21d0:	10c00017 	ldw	r3,0(r2)
    21d4:	180b883a 	mov	r5,r3
    21d8:	0006c8c0 	call	6c8c <__mulsf3>
    21dc:	1007883a 	mov	r3,r2
    21e0:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
    21e4:	100b883a 	mov	r5,r2
    21e8:	8009883a 	mov	r4,r16
    21ec:	00063840 	call	6384 <__addsf3>
    21f0:	1007883a 	mov	r3,r2
    21f4:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];
    21f8:	e0bffd17 	ldw	r2,-12(fp)
    21fc:	11155517 	ldw	r4,21844(r2)
    2200:	e0bff817 	ldw	r2,-32(fp)
    2204:	10819084 	addi	r2,r2,1602
    2208:	e0fffd17 	ldw	r3,-12(fp)
    220c:	10800484 	addi	r2,r2,18
    2210:	1085883a 	add	r2,r2,r2
    2214:	1085883a 	add	r2,r2,r2
    2218:	1885883a 	add	r2,r3,r2
    221c:	10c00017 	ldw	r3,0(r2)
    2220:	180b883a 	mov	r5,r3
    2224:	0006c8c0 	call	6c8c <__mulsf3>
    2228:	1007883a 	mov	r3,r2
    222c:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(0,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(0,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
    2230:	100b883a 	mov	r5,r2
    2234:	8009883a 	mov	r4,r16
    2238:	00063840 	call	6384 <__addsf3>
    223c:	1007883a 	mov	r3,r2
    2240:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];
    2244:	e0bffa15 	stw	r2,-24(fp)

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
    2248:	e0bffd17 	ldw	r2,-12(fp)
    224c:	11155617 	ldw	r4,21848(r2)
    2250:	e0fffd17 	ldw	r3,-12(fp)
    2254:	e0bff817 	ldw	r2,-32(fp)
    2258:	10800484 	addi	r2,r2,18
    225c:	1085883a 	add	r2,r2,r2
    2260:	1085883a 	add	r2,r2,r2
    2264:	1885883a 	add	r2,r3,r2
    2268:	10c00017 	ldw	r3,0(r2)
    226c:	180b883a 	mov	r5,r3
    2270:	0006c8c0 	call	6c8c <__mulsf3>
    2274:	1007883a 	mov	r3,r2
    2278:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
    227c:	e0bffd17 	ldw	r2,-12(fp)
    2280:	11155717 	ldw	r4,21852(r2)
    2284:	e0bff817 	ldw	r2,-32(fp)
    2288:	10808584 	addi	r2,r2,534
    228c:	e0fffd17 	ldw	r3,-12(fp)
    2290:	10800484 	addi	r2,r2,18
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10c00017 	ldw	r3,0(r2)
    22a4:	180b883a 	mov	r5,r3
    22a8:	0006c8c0 	call	6c8c <__mulsf3>
    22ac:	1007883a 	mov	r3,r2
    22b0:	1805883a 	mov	r2,r3
         temp_transformed_vertex[Y] =   complete_matrix[M4(1,0)] * vertex[M8(X,i)] + \
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
    22b4:	100b883a 	mov	r5,r2
    22b8:	8009883a 	mov	r4,r16
    22bc:	00063840 	call	6384 <__addsf3>
    22c0:	1007883a 	mov	r3,r2
    22c4:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
    22c8:	e0bffd17 	ldw	r2,-12(fp)
    22cc:	11155817 	ldw	r4,21856(r2)
    22d0:	e0bff817 	ldw	r2,-32(fp)
    22d4:	10810b04 	addi	r2,r2,1068
    22d8:	e0fffd17 	ldw	r3,-12(fp)
    22dc:	10800484 	addi	r2,r2,18
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	1085883a 	add	r2,r2,r2
    22e8:	1885883a 	add	r2,r3,r2
    22ec:	10c00017 	ldw	r3,0(r2)
    22f0:	180b883a 	mov	r5,r3
    22f4:	0006c8c0 	call	6c8c <__mulsf3>
    22f8:	1007883a 	mov	r3,r2
    22fc:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,1)] * vertex[M8(Y,i)] + \
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
    2300:	100b883a 	mov	r5,r2
    2304:	8009883a 	mov	r4,r16
    2308:	00063840 	call	6384 <__addsf3>
    230c:	1007883a 	mov	r3,r2
    2310:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];
    2314:	e0bffd17 	ldw	r2,-12(fp)
    2318:	11155917 	ldw	r4,21860(r2)
    231c:	e0bff817 	ldw	r2,-32(fp)
    2320:	10819084 	addi	r2,r2,1602
    2324:	e0fffd17 	ldw	r3,-12(fp)
    2328:	10800484 	addi	r2,r2,18
    232c:	1085883a 	add	r2,r2,r2
    2330:	1085883a 	add	r2,r2,r2
    2334:	1885883a 	add	r2,r3,r2
    2338:	10c00017 	ldw	r3,0(r2)
    233c:	180b883a 	mov	r5,r3
    2340:	0006c8c0 	call	6c8c <__mulsf3>
    2344:	1007883a 	mov	r3,r2
    2348:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(1,2)] * vertex[M8(Z,i)] + \
                                        complete_matrix[M4(1,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
    234c:	100b883a 	mov	r5,r2
    2350:	8009883a 	mov	r4,r16
    2354:	00063840 	call	6384 <__addsf3>
    2358:	1007883a 	mov	r3,r2
    235c:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];
    2360:	e0bffb15 	stw	r2,-20(fp)

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
    2364:	e0bffd17 	ldw	r2,-12(fp)
    2368:	11155a17 	ldw	r4,21864(r2)
    236c:	e0fffd17 	ldw	r3,-12(fp)
    2370:	e0bff817 	ldw	r2,-32(fp)
    2374:	10800484 	addi	r2,r2,18
    2378:	1085883a 	add	r2,r2,r2
    237c:	1085883a 	add	r2,r2,r2
    2380:	1885883a 	add	r2,r3,r2
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	180b883a 	mov	r5,r3
    238c:	0006c8c0 	call	6c8c <__mulsf3>
    2390:	1007883a 	mov	r3,r2
    2394:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
    2398:	e0bffd17 	ldw	r2,-12(fp)
    239c:	11155b17 	ldw	r4,21868(r2)
    23a0:	e0bff817 	ldw	r2,-32(fp)
    23a4:	10808584 	addi	r2,r2,534
    23a8:	e0fffd17 	ldw	r3,-12(fp)
    23ac:	10800484 	addi	r2,r2,18
    23b0:	1085883a 	add	r2,r2,r2
    23b4:	1085883a 	add	r2,r2,r2
    23b8:	1885883a 	add	r2,r3,r2
    23bc:	10c00017 	ldw	r3,0(r2)
    23c0:	180b883a 	mov	r5,r3
    23c4:	0006c8c0 	call	6c8c <__mulsf3>
    23c8:	1007883a 	mov	r3,r2
    23cc:	1805883a 	mov	r2,r3
         temp_transformed_vertex[Z] =   complete_matrix[M4(2,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
    23d0:	100b883a 	mov	r5,r2
    23d4:	8009883a 	mov	r4,r16
    23d8:	00063840 	call	6384 <__addsf3>
    23dc:	1007883a 	mov	r3,r2
    23e0:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
    23e4:	e0bffd17 	ldw	r2,-12(fp)
    23e8:	11155c17 	ldw	r4,21872(r2)
    23ec:	e0bff817 	ldw	r2,-32(fp)
    23f0:	10810b04 	addi	r2,r2,1068
    23f4:	e0fffd17 	ldw	r3,-12(fp)
    23f8:	10800484 	addi	r2,r2,18
    23fc:	1085883a 	add	r2,r2,r2
    2400:	1085883a 	add	r2,r2,r2
    2404:	1885883a 	add	r2,r3,r2
    2408:	10c00017 	ldw	r3,0(r2)
    240c:	180b883a 	mov	r5,r3
    2410:	0006c8c0 	call	6c8c <__mulsf3>
    2414:	1007883a 	mov	r3,r2
    2418:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
    241c:	100b883a 	mov	r5,r2
    2420:	8009883a 	mov	r4,r16
    2424:	00063840 	call	6384 <__addsf3>
    2428:	1007883a 	mov	r3,r2
    242c:	1821883a 	mov	r16,r3
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(3,3)] * vertex[M8(W,i)];
    2430:	e0bffd17 	ldw	r2,-12(fp)
    2434:	11155d17 	ldw	r4,21876(r2)
    2438:	e0bff817 	ldw	r2,-32(fp)
    243c:	10819084 	addi	r2,r2,1602
    2440:	e0fffd17 	ldw	r3,-12(fp)
    2444:	10800484 	addi	r2,r2,18
    2448:	1085883a 	add	r2,r2,r2
    244c:	1085883a 	add	r2,r2,r2
    2450:	1885883a 	add	r2,r3,r2
    2454:	10c00017 	ldw	r3,0(r2)
    2458:	180b883a 	mov	r5,r3
    245c:	0006c8c0 	call	6c8c <__mulsf3>
    2460:	1007883a 	mov	r3,r2
    2464:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(2,2)] * vertex[M8(Z,i)] +\
                                        complete_matrix[M4(2,3)] * vertex[M8(W,i)];

         temp_transformed_vertex[W] =   complete_matrix[M4(3,0)] * vertex[M8(X,i)] +\
                                        complete_matrix[M4(3,1)] * vertex[M8(Y,i)] +\
                                        complete_matrix[M4(3,2)] * vertex[M8(Z,i)] +\
    2468:	100b883a 	mov	r5,r2
    246c:	8009883a 	mov	r4,r16
    2470:	00063840 	call	6384 <__addsf3>
    2474:	1007883a 	mov	r3,r2
    2478:	1805883a 	mov	r2,r3
                                        complete_matrix[M4(3,3)] * vertex[M8(W,i)];
    247c:	e0bffc15 	stw	r2,-16(fp)
        printf("p%d : y%f\n", i, temp_transformed_vertex[Y]);
        printf("p%d : z%f\n", i, temp_transformed_vertex[Z]);
        printf("p%d : w%f\n", i, temp_transformed_vertex[W]);
        #endif

        temp_transformed_vertex[X]/=temp_transformed_vertex[W];
    2480:	e0bff917 	ldw	r2,-28(fp)
    2484:	e0fffc17 	ldw	r3,-16(fp)
    2488:	180b883a 	mov	r5,r3
    248c:	1009883a 	mov	r4,r2
    2490:	000684c0 	call	684c <__divsf3>
    2494:	1007883a 	mov	r3,r2
    2498:	1805883a 	mov	r2,r3
    249c:	e0bff915 	stw	r2,-28(fp)
    	temp_transformed_vertex[Y]/=temp_transformed_vertex[W];
    24a0:	e0bffa17 	ldw	r2,-24(fp)
    24a4:	e0fffc17 	ldw	r3,-16(fp)
    24a8:	180b883a 	mov	r5,r3
    24ac:	1009883a 	mov	r4,r2
    24b0:	000684c0 	call	684c <__divsf3>
    24b4:	1007883a 	mov	r3,r2
    24b8:	1805883a 	mov	r2,r3
    24bc:	e0bffa15 	stw	r2,-24(fp)
    	temp_transformed_vertex[Z]/=temp_transformed_vertex[W];
    24c0:	e0bffb17 	ldw	r2,-20(fp)
    24c4:	e0fffc17 	ldw	r3,-16(fp)
    24c8:	180b883a 	mov	r5,r3
    24cc:	1009883a 	mov	r4,r2
    24d0:	000684c0 	call	684c <__divsf3>
    24d4:	1007883a 	mov	r3,r2
    24d8:	1805883a 	mov	r2,r3
    24dc:	e0bffb15 	stw	r2,-20(fp)
    	temp_transformed_vertex[W]=1;
    24e0:	008fe034 	movhi	r2,16256
    24e4:	e0bffc15 	stw	r2,-16(fp)
    *   |                   |       |                   |
    *   |       VGA         |       |       CUBO        |    
    *   |                   |       |    normalizzato   |
    *   (0,240)---------(320,240)   (-1,-1)----------(1,-1)
    */
        vertex_on_2D[i][X] = ((temp_transformed_vertex[X]*(X_RES/2))+(X_RES/2));
    24e8:	e43ff917 	ldw	r16,-28(fp)
    24ec:	d0a6e617 	ldw	r2,-25704(gp)
    24f0:	10800f17 	ldw	r2,60(r2)
    24f4:	1004d07a 	srli	r2,r2,1
    24f8:	1009883a 	mov	r4,r2
    24fc:	00077000 	call	7700 <__floatunsisf>
    2500:	1007883a 	mov	r3,r2
    2504:	180b883a 	mov	r5,r3
    2508:	8009883a 	mov	r4,r16
    250c:	0006c8c0 	call	6c8c <__mulsf3>
    2510:	1007883a 	mov	r3,r2
    2514:	1821883a 	mov	r16,r3
    2518:	d0a6e617 	ldw	r2,-25704(gp)
    251c:	10800f17 	ldw	r2,60(r2)
    2520:	1004d07a 	srli	r2,r2,1
    2524:	1009883a 	mov	r4,r2
    2528:	00077000 	call	7700 <__floatunsisf>
    252c:	1007883a 	mov	r3,r2
    2530:	180b883a 	mov	r5,r3
    2534:	8009883a 	mov	r4,r16
    2538:	00063840 	call	6384 <__addsf3>
    253c:	1007883a 	mov	r3,r2
    2540:	1805883a 	mov	r2,r3
    2544:	1009883a 	mov	r4,r2
    2548:	000756c0 	call	756c <__fixsfsi>
    254c:	1009883a 	mov	r4,r2
    2550:	e0fffd17 	ldw	r3,-12(fp)
    2554:	e0bff817 	ldw	r2,-32(fp)
    2558:	10821844 	addi	r2,r2,2145
    255c:	100490fa 	slli	r2,r2,3
    2560:	1885883a 	add	r2,r3,r2
    2564:	11000015 	stw	r4,0(r2)
        //il meno è necessario per mappare nell'origine della vga, il valore y=1 nelle coordinate normalizzate del cubo
        vertex_on_2D[i][Y] = (-(temp_transformed_vertex[Y]*(Y_RES/2))+(Y_RES/2));
    2568:	d0a6e617 	ldw	r2,-25704(gp)
    256c:	10801017 	ldw	r2,64(r2)
    2570:	1004d07a 	srli	r2,r2,1
    2574:	1009883a 	mov	r4,r2
    2578:	00077000 	call	7700 <__floatunsisf>
    257c:	1023883a 	mov	r17,r2
    2580:	e43ffa17 	ldw	r16,-24(fp)
    2584:	d0a6e617 	ldw	r2,-25704(gp)
    2588:	10801017 	ldw	r2,64(r2)
    258c:	1004d07a 	srli	r2,r2,1
    2590:	1009883a 	mov	r4,r2
    2594:	00077000 	call	7700 <__floatunsisf>
    2598:	1007883a 	mov	r3,r2
    259c:	180b883a 	mov	r5,r3
    25a0:	8009883a 	mov	r4,r16
    25a4:	0006c8c0 	call	6c8c <__mulsf3>
    25a8:	1007883a 	mov	r3,r2
    25ac:	1805883a 	mov	r2,r3
    25b0:	100b883a 	mov	r5,r2
    25b4:	8809883a 	mov	r4,r17
    25b8:	00070880 	call	7088 <__subsf3>
    25bc:	1007883a 	mov	r3,r2
    25c0:	1805883a 	mov	r2,r3
    25c4:	1009883a 	mov	r4,r2
    25c8:	000756c0 	call	756c <__fixsfsi>
    25cc:	1009883a 	mov	r4,r2
    25d0:	e0fffd17 	ldw	r3,-12(fp)
    25d4:	e0bff817 	ldw	r2,-32(fp)
    25d8:	100490fa 	slli	r2,r2,3
    25dc:	1885883a 	add	r2,r3,r2
    25e0:	1090c304 	addi	r2,r2,17164
    25e4:	11000015 	stw	r4,0(r2)
    #ifdef DEBUG_VECTORS
	printf("START PRINT COORDINATES\n");
    #endif

    float temp_transformed_vertex[4];
    for(int i = 0; i < N_VERTEX; i++){
    25e8:	e0bff817 	ldw	r2,-32(fp)
    25ec:	10800044 	addi	r2,r2,1
    25f0:	e0bff815 	stw	r2,-32(fp)
    25f4:	003e8306 	br	2004 <__ram_exceptions_end+0xfb0009bc>
                                
    }
    #ifdef DEBUG_1
    printf("END PRINT COORDINATES\n");
    #endif
}
    25f8:	0001883a 	nop
    25fc:	e6fffe04 	addi	sp,fp,-8
    2600:	dfc00317 	ldw	ra,12(sp)
    2604:	df000217 	ldw	fp,8(sp)
    2608:	dc400117 	ldw	r17,4(sp)
    260c:	dc000017 	ldw	r16,0(sp)
    2610:	dec00404 	addi	sp,sp,16
    2614:	f800283a 	ret

00002618 <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>:

void Cube_3D::Matrix4x4MultiplyBy4x4 (float src1[4*4], float src2[4*4], float dest[4*4])
{ 
    2618:	defff804 	addi	sp,sp,-32
    261c:	dfc00715 	stw	ra,28(sp)
    2620:	df000615 	stw	fp,24(sp)
    2624:	dc400515 	stw	r17,20(sp)
    2628:	dc000415 	stw	r16,16(sp)
    262c:	df000604 	addi	fp,sp,24
    2630:	e13ffa15 	stw	r4,-24(fp)
    2634:	e17ffb15 	stw	r5,-20(fp)
    2638:	e1bffc15 	stw	r6,-16(fp)
    263c:	e1fffd15 	stw	r7,-12(fp)
    dest[M4(0,0)] = src1[M4(0,0)] * src2[M4(0,0)] + src1[M4(0,1)] * src2[M4(1,0)] + src1[M4(0,2)] * src2[M4(2,0)] + src1[M4(0,3)] * src2[M4(3,0)]; 
    2640:	e0bffb17 	ldw	r2,-20(fp)
    2644:	10c00017 	ldw	r3,0(r2)
    2648:	e0bffc17 	ldw	r2,-16(fp)
    264c:	11000017 	ldw	r4,0(r2)
    2650:	200b883a 	mov	r5,r4
    2654:	1809883a 	mov	r4,r3
    2658:	0006c8c0 	call	6c8c <__mulsf3>
    265c:	1007883a 	mov	r3,r2
    2660:	1821883a 	mov	r16,r3
    2664:	e0bffb17 	ldw	r2,-20(fp)
    2668:	10800104 	addi	r2,r2,4
    266c:	10c00017 	ldw	r3,0(r2)
    2670:	e0bffc17 	ldw	r2,-16(fp)
    2674:	10800404 	addi	r2,r2,16
    2678:	11000017 	ldw	r4,0(r2)
    267c:	200b883a 	mov	r5,r4
    2680:	1809883a 	mov	r4,r3
    2684:	0006c8c0 	call	6c8c <__mulsf3>
    2688:	1007883a 	mov	r3,r2
    268c:	1805883a 	mov	r2,r3
    2690:	100b883a 	mov	r5,r2
    2694:	8009883a 	mov	r4,r16
    2698:	00063840 	call	6384 <__addsf3>
    269c:	1007883a 	mov	r3,r2
    26a0:	1821883a 	mov	r16,r3
    26a4:	e0bffb17 	ldw	r2,-20(fp)
    26a8:	10800204 	addi	r2,r2,8
    26ac:	10c00017 	ldw	r3,0(r2)
    26b0:	e0bffc17 	ldw	r2,-16(fp)
    26b4:	10800804 	addi	r2,r2,32
    26b8:	11000017 	ldw	r4,0(r2)
    26bc:	200b883a 	mov	r5,r4
    26c0:	1809883a 	mov	r4,r3
    26c4:	0006c8c0 	call	6c8c <__mulsf3>
    26c8:	1007883a 	mov	r3,r2
    26cc:	1805883a 	mov	r2,r3
    26d0:	100b883a 	mov	r5,r2
    26d4:	8009883a 	mov	r4,r16
    26d8:	00063840 	call	6384 <__addsf3>
    26dc:	1007883a 	mov	r3,r2
    26e0:	1821883a 	mov	r16,r3
    26e4:	e0bffb17 	ldw	r2,-20(fp)
    26e8:	10800304 	addi	r2,r2,12
    26ec:	10c00017 	ldw	r3,0(r2)
    26f0:	e0bffc17 	ldw	r2,-16(fp)
    26f4:	10800c04 	addi	r2,r2,48
    26f8:	11000017 	ldw	r4,0(r2)
    26fc:	200b883a 	mov	r5,r4
    2700:	1809883a 	mov	r4,r3
    2704:	0006c8c0 	call	6c8c <__mulsf3>
    2708:	1007883a 	mov	r3,r2
    270c:	1805883a 	mov	r2,r3
    2710:	100b883a 	mov	r5,r2
    2714:	8009883a 	mov	r4,r16
    2718:	00063840 	call	6384 <__addsf3>
    271c:	1009883a 	mov	r4,r2
    2720:	2007883a 	mov	r3,r4
    2724:	e0bffd17 	ldw	r2,-12(fp)
    2728:	10c00015 	stw	r3,0(r2)
    dest[M4(0,1)] = src1[M4(0,0)] * src2[M4(0,1)] + src1[M4(0,1)] * src2[M4(1,1)] + src1[M4(0,2)] * src2[M4(2,1)] + src1[M4(0,3)] * src2[M4(3,1)]; 
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	14000104 	addi	r16,r2,4
    2734:	e0bffb17 	ldw	r2,-20(fp)
    2738:	10c00017 	ldw	r3,0(r2)
    273c:	e0bffc17 	ldw	r2,-16(fp)
    2740:	10800104 	addi	r2,r2,4
    2744:	11000017 	ldw	r4,0(r2)
    2748:	200b883a 	mov	r5,r4
    274c:	1809883a 	mov	r4,r3
    2750:	0006c8c0 	call	6c8c <__mulsf3>
    2754:	1007883a 	mov	r3,r2
    2758:	1823883a 	mov	r17,r3
    275c:	e0bffb17 	ldw	r2,-20(fp)
    2760:	10800104 	addi	r2,r2,4
    2764:	10c00017 	ldw	r3,0(r2)
    2768:	e0bffc17 	ldw	r2,-16(fp)
    276c:	10800504 	addi	r2,r2,20
    2770:	11000017 	ldw	r4,0(r2)
    2774:	200b883a 	mov	r5,r4
    2778:	1809883a 	mov	r4,r3
    277c:	0006c8c0 	call	6c8c <__mulsf3>
    2780:	1007883a 	mov	r3,r2
    2784:	1805883a 	mov	r2,r3
    2788:	100b883a 	mov	r5,r2
    278c:	8809883a 	mov	r4,r17
    2790:	00063840 	call	6384 <__addsf3>
    2794:	1007883a 	mov	r3,r2
    2798:	1823883a 	mov	r17,r3
    279c:	e0bffb17 	ldw	r2,-20(fp)
    27a0:	10800204 	addi	r2,r2,8
    27a4:	10c00017 	ldw	r3,0(r2)
    27a8:	e0bffc17 	ldw	r2,-16(fp)
    27ac:	10800904 	addi	r2,r2,36
    27b0:	11000017 	ldw	r4,0(r2)
    27b4:	200b883a 	mov	r5,r4
    27b8:	1809883a 	mov	r4,r3
    27bc:	0006c8c0 	call	6c8c <__mulsf3>
    27c0:	1007883a 	mov	r3,r2
    27c4:	1805883a 	mov	r2,r3
    27c8:	100b883a 	mov	r5,r2
    27cc:	8809883a 	mov	r4,r17
    27d0:	00063840 	call	6384 <__addsf3>
    27d4:	1007883a 	mov	r3,r2
    27d8:	1823883a 	mov	r17,r3
    27dc:	e0bffb17 	ldw	r2,-20(fp)
    27e0:	10800304 	addi	r2,r2,12
    27e4:	10c00017 	ldw	r3,0(r2)
    27e8:	e0bffc17 	ldw	r2,-16(fp)
    27ec:	10800d04 	addi	r2,r2,52
    27f0:	11000017 	ldw	r4,0(r2)
    27f4:	200b883a 	mov	r5,r4
    27f8:	1809883a 	mov	r4,r3
    27fc:	0006c8c0 	call	6c8c <__mulsf3>
    2800:	1007883a 	mov	r3,r2
    2804:	1805883a 	mov	r2,r3
    2808:	100b883a 	mov	r5,r2
    280c:	8809883a 	mov	r4,r17
    2810:	00063840 	call	6384 <__addsf3>
    2814:	1007883a 	mov	r3,r2
    2818:	1805883a 	mov	r2,r3
    281c:	80800015 	stw	r2,0(r16)
    dest[M4(0,2)] = src1[M4(0,0)] * src2[M4(0,2)] + src1[M4(0,1)] * src2[M4(1,2)] + src1[M4(0,2)] * src2[M4(2,2)] + src1[M4(0,3)] * src2[M4(3,2)]; 
    2820:	e0bffd17 	ldw	r2,-12(fp)
    2824:	14000204 	addi	r16,r2,8
    2828:	e0bffb17 	ldw	r2,-20(fp)
    282c:	10c00017 	ldw	r3,0(r2)
    2830:	e0bffc17 	ldw	r2,-16(fp)
    2834:	10800204 	addi	r2,r2,8
    2838:	11000017 	ldw	r4,0(r2)
    283c:	200b883a 	mov	r5,r4
    2840:	1809883a 	mov	r4,r3
    2844:	0006c8c0 	call	6c8c <__mulsf3>
    2848:	1007883a 	mov	r3,r2
    284c:	1823883a 	mov	r17,r3
    2850:	e0bffb17 	ldw	r2,-20(fp)
    2854:	10800104 	addi	r2,r2,4
    2858:	10c00017 	ldw	r3,0(r2)
    285c:	e0bffc17 	ldw	r2,-16(fp)
    2860:	10800604 	addi	r2,r2,24
    2864:	11000017 	ldw	r4,0(r2)
    2868:	200b883a 	mov	r5,r4
    286c:	1809883a 	mov	r4,r3
    2870:	0006c8c0 	call	6c8c <__mulsf3>
    2874:	1007883a 	mov	r3,r2
    2878:	1805883a 	mov	r2,r3
    287c:	100b883a 	mov	r5,r2
    2880:	8809883a 	mov	r4,r17
    2884:	00063840 	call	6384 <__addsf3>
    2888:	1007883a 	mov	r3,r2
    288c:	1823883a 	mov	r17,r3
    2890:	e0bffb17 	ldw	r2,-20(fp)
    2894:	10800204 	addi	r2,r2,8
    2898:	10c00017 	ldw	r3,0(r2)
    289c:	e0bffc17 	ldw	r2,-16(fp)
    28a0:	10800a04 	addi	r2,r2,40
    28a4:	11000017 	ldw	r4,0(r2)
    28a8:	200b883a 	mov	r5,r4
    28ac:	1809883a 	mov	r4,r3
    28b0:	0006c8c0 	call	6c8c <__mulsf3>
    28b4:	1007883a 	mov	r3,r2
    28b8:	1805883a 	mov	r2,r3
    28bc:	100b883a 	mov	r5,r2
    28c0:	8809883a 	mov	r4,r17
    28c4:	00063840 	call	6384 <__addsf3>
    28c8:	1007883a 	mov	r3,r2
    28cc:	1823883a 	mov	r17,r3
    28d0:	e0bffb17 	ldw	r2,-20(fp)
    28d4:	10800304 	addi	r2,r2,12
    28d8:	10c00017 	ldw	r3,0(r2)
    28dc:	e0bffc17 	ldw	r2,-16(fp)
    28e0:	10800e04 	addi	r2,r2,56
    28e4:	11000017 	ldw	r4,0(r2)
    28e8:	200b883a 	mov	r5,r4
    28ec:	1809883a 	mov	r4,r3
    28f0:	0006c8c0 	call	6c8c <__mulsf3>
    28f4:	1007883a 	mov	r3,r2
    28f8:	1805883a 	mov	r2,r3
    28fc:	100b883a 	mov	r5,r2
    2900:	8809883a 	mov	r4,r17
    2904:	00063840 	call	6384 <__addsf3>
    2908:	1007883a 	mov	r3,r2
    290c:	1805883a 	mov	r2,r3
    2910:	80800015 	stw	r2,0(r16)
    dest[M4(0,3)] = src1[M4(0,0)] * src2[M4(0,3)] + src1[M4(0,1)] * src2[M4(1,3)] + src1[M4(0,2)] * src2[M4(2,3)] + src1[M4(0,3)] * src2[M4(3,3)]; 
    2914:	e0bffd17 	ldw	r2,-12(fp)
    2918:	14000304 	addi	r16,r2,12
    291c:	e0bffb17 	ldw	r2,-20(fp)
    2920:	10c00017 	ldw	r3,0(r2)
    2924:	e0bffc17 	ldw	r2,-16(fp)
    2928:	10800304 	addi	r2,r2,12
    292c:	11000017 	ldw	r4,0(r2)
    2930:	200b883a 	mov	r5,r4
    2934:	1809883a 	mov	r4,r3
    2938:	0006c8c0 	call	6c8c <__mulsf3>
    293c:	1007883a 	mov	r3,r2
    2940:	1823883a 	mov	r17,r3
    2944:	e0bffb17 	ldw	r2,-20(fp)
    2948:	10800104 	addi	r2,r2,4
    294c:	10c00017 	ldw	r3,0(r2)
    2950:	e0bffc17 	ldw	r2,-16(fp)
    2954:	10800704 	addi	r2,r2,28
    2958:	11000017 	ldw	r4,0(r2)
    295c:	200b883a 	mov	r5,r4
    2960:	1809883a 	mov	r4,r3
    2964:	0006c8c0 	call	6c8c <__mulsf3>
    2968:	1007883a 	mov	r3,r2
    296c:	1805883a 	mov	r2,r3
    2970:	100b883a 	mov	r5,r2
    2974:	8809883a 	mov	r4,r17
    2978:	00063840 	call	6384 <__addsf3>
    297c:	1007883a 	mov	r3,r2
    2980:	1823883a 	mov	r17,r3
    2984:	e0bffb17 	ldw	r2,-20(fp)
    2988:	10800204 	addi	r2,r2,8
    298c:	10c00017 	ldw	r3,0(r2)
    2990:	e0bffc17 	ldw	r2,-16(fp)
    2994:	10800b04 	addi	r2,r2,44
    2998:	11000017 	ldw	r4,0(r2)
    299c:	200b883a 	mov	r5,r4
    29a0:	1809883a 	mov	r4,r3
    29a4:	0006c8c0 	call	6c8c <__mulsf3>
    29a8:	1007883a 	mov	r3,r2
    29ac:	1805883a 	mov	r2,r3
    29b0:	100b883a 	mov	r5,r2
    29b4:	8809883a 	mov	r4,r17
    29b8:	00063840 	call	6384 <__addsf3>
    29bc:	1007883a 	mov	r3,r2
    29c0:	1823883a 	mov	r17,r3
    29c4:	e0bffb17 	ldw	r2,-20(fp)
    29c8:	10800304 	addi	r2,r2,12
    29cc:	10c00017 	ldw	r3,0(r2)
    29d0:	e0bffc17 	ldw	r2,-16(fp)
    29d4:	10800f04 	addi	r2,r2,60
    29d8:	11000017 	ldw	r4,0(r2)
    29dc:	200b883a 	mov	r5,r4
    29e0:	1809883a 	mov	r4,r3
    29e4:	0006c8c0 	call	6c8c <__mulsf3>
    29e8:	1007883a 	mov	r3,r2
    29ec:	1805883a 	mov	r2,r3
    29f0:	100b883a 	mov	r5,r2
    29f4:	8809883a 	mov	r4,r17
    29f8:	00063840 	call	6384 <__addsf3>
    29fc:	1007883a 	mov	r3,r2
    2a00:	1805883a 	mov	r2,r3
    2a04:	80800015 	stw	r2,0(r16)
    dest[M4(1,0)] = src1[M4(1,0)] * src2[M4(0,0)] + src1[M4(1,1)] * src2[M4(1,0)] + src1[M4(1,2)] * src2[M4(2,0)] + src1[M4(1,3)] * src2[M4(3,0)]; 
    2a08:	e0bffd17 	ldw	r2,-12(fp)
    2a0c:	14000404 	addi	r16,r2,16
    2a10:	e0bffb17 	ldw	r2,-20(fp)
    2a14:	10800404 	addi	r2,r2,16
    2a18:	10c00017 	ldw	r3,0(r2)
    2a1c:	e0bffc17 	ldw	r2,-16(fp)
    2a20:	11000017 	ldw	r4,0(r2)
    2a24:	200b883a 	mov	r5,r4
    2a28:	1809883a 	mov	r4,r3
    2a2c:	0006c8c0 	call	6c8c <__mulsf3>
    2a30:	1007883a 	mov	r3,r2
    2a34:	1823883a 	mov	r17,r3
    2a38:	e0bffb17 	ldw	r2,-20(fp)
    2a3c:	10800504 	addi	r2,r2,20
    2a40:	10c00017 	ldw	r3,0(r2)
    2a44:	e0bffc17 	ldw	r2,-16(fp)
    2a48:	10800404 	addi	r2,r2,16
    2a4c:	11000017 	ldw	r4,0(r2)
    2a50:	200b883a 	mov	r5,r4
    2a54:	1809883a 	mov	r4,r3
    2a58:	0006c8c0 	call	6c8c <__mulsf3>
    2a5c:	1007883a 	mov	r3,r2
    2a60:	1805883a 	mov	r2,r3
    2a64:	100b883a 	mov	r5,r2
    2a68:	8809883a 	mov	r4,r17
    2a6c:	00063840 	call	6384 <__addsf3>
    2a70:	1007883a 	mov	r3,r2
    2a74:	1823883a 	mov	r17,r3
    2a78:	e0bffb17 	ldw	r2,-20(fp)
    2a7c:	10800604 	addi	r2,r2,24
    2a80:	10c00017 	ldw	r3,0(r2)
    2a84:	e0bffc17 	ldw	r2,-16(fp)
    2a88:	10800804 	addi	r2,r2,32
    2a8c:	11000017 	ldw	r4,0(r2)
    2a90:	200b883a 	mov	r5,r4
    2a94:	1809883a 	mov	r4,r3
    2a98:	0006c8c0 	call	6c8c <__mulsf3>
    2a9c:	1007883a 	mov	r3,r2
    2aa0:	1805883a 	mov	r2,r3
    2aa4:	100b883a 	mov	r5,r2
    2aa8:	8809883a 	mov	r4,r17
    2aac:	00063840 	call	6384 <__addsf3>
    2ab0:	1007883a 	mov	r3,r2
    2ab4:	1823883a 	mov	r17,r3
    2ab8:	e0bffb17 	ldw	r2,-20(fp)
    2abc:	10800704 	addi	r2,r2,28
    2ac0:	10c00017 	ldw	r3,0(r2)
    2ac4:	e0bffc17 	ldw	r2,-16(fp)
    2ac8:	10800c04 	addi	r2,r2,48
    2acc:	11000017 	ldw	r4,0(r2)
    2ad0:	200b883a 	mov	r5,r4
    2ad4:	1809883a 	mov	r4,r3
    2ad8:	0006c8c0 	call	6c8c <__mulsf3>
    2adc:	1007883a 	mov	r3,r2
    2ae0:	1805883a 	mov	r2,r3
    2ae4:	100b883a 	mov	r5,r2
    2ae8:	8809883a 	mov	r4,r17
    2aec:	00063840 	call	6384 <__addsf3>
    2af0:	1007883a 	mov	r3,r2
    2af4:	1805883a 	mov	r2,r3
    2af8:	80800015 	stw	r2,0(r16)
    dest[M4(1,1)] = src1[M4(1,0)] * src2[M4(0,1)] + src1[M4(1,1)] * src2[M4(1,1)] + src1[M4(1,2)] * src2[M4(2,1)] + src1[M4(1,3)] * src2[M4(3,1)]; 
    2afc:	e0bffd17 	ldw	r2,-12(fp)
    2b00:	14000504 	addi	r16,r2,20
    2b04:	e0bffb17 	ldw	r2,-20(fp)
    2b08:	10800404 	addi	r2,r2,16
    2b0c:	10c00017 	ldw	r3,0(r2)
    2b10:	e0bffc17 	ldw	r2,-16(fp)
    2b14:	10800104 	addi	r2,r2,4
    2b18:	11000017 	ldw	r4,0(r2)
    2b1c:	200b883a 	mov	r5,r4
    2b20:	1809883a 	mov	r4,r3
    2b24:	0006c8c0 	call	6c8c <__mulsf3>
    2b28:	1007883a 	mov	r3,r2
    2b2c:	1823883a 	mov	r17,r3
    2b30:	e0bffb17 	ldw	r2,-20(fp)
    2b34:	10800504 	addi	r2,r2,20
    2b38:	10c00017 	ldw	r3,0(r2)
    2b3c:	e0bffc17 	ldw	r2,-16(fp)
    2b40:	10800504 	addi	r2,r2,20
    2b44:	11000017 	ldw	r4,0(r2)
    2b48:	200b883a 	mov	r5,r4
    2b4c:	1809883a 	mov	r4,r3
    2b50:	0006c8c0 	call	6c8c <__mulsf3>
    2b54:	1007883a 	mov	r3,r2
    2b58:	1805883a 	mov	r2,r3
    2b5c:	100b883a 	mov	r5,r2
    2b60:	8809883a 	mov	r4,r17
    2b64:	00063840 	call	6384 <__addsf3>
    2b68:	1007883a 	mov	r3,r2
    2b6c:	1823883a 	mov	r17,r3
    2b70:	e0bffb17 	ldw	r2,-20(fp)
    2b74:	10800604 	addi	r2,r2,24
    2b78:	10c00017 	ldw	r3,0(r2)
    2b7c:	e0bffc17 	ldw	r2,-16(fp)
    2b80:	10800904 	addi	r2,r2,36
    2b84:	11000017 	ldw	r4,0(r2)
    2b88:	200b883a 	mov	r5,r4
    2b8c:	1809883a 	mov	r4,r3
    2b90:	0006c8c0 	call	6c8c <__mulsf3>
    2b94:	1007883a 	mov	r3,r2
    2b98:	1805883a 	mov	r2,r3
    2b9c:	100b883a 	mov	r5,r2
    2ba0:	8809883a 	mov	r4,r17
    2ba4:	00063840 	call	6384 <__addsf3>
    2ba8:	1007883a 	mov	r3,r2
    2bac:	1823883a 	mov	r17,r3
    2bb0:	e0bffb17 	ldw	r2,-20(fp)
    2bb4:	10800704 	addi	r2,r2,28
    2bb8:	10c00017 	ldw	r3,0(r2)
    2bbc:	e0bffc17 	ldw	r2,-16(fp)
    2bc0:	10800d04 	addi	r2,r2,52
    2bc4:	11000017 	ldw	r4,0(r2)
    2bc8:	200b883a 	mov	r5,r4
    2bcc:	1809883a 	mov	r4,r3
    2bd0:	0006c8c0 	call	6c8c <__mulsf3>
    2bd4:	1007883a 	mov	r3,r2
    2bd8:	1805883a 	mov	r2,r3
    2bdc:	100b883a 	mov	r5,r2
    2be0:	8809883a 	mov	r4,r17
    2be4:	00063840 	call	6384 <__addsf3>
    2be8:	1007883a 	mov	r3,r2
    2bec:	1805883a 	mov	r2,r3
    2bf0:	80800015 	stw	r2,0(r16)
    dest[M4(1,2)] = src1[M4(1,0)] * src2[M4(0,2)] + src1[M4(1,1)] * src2[M4(1,2)] + src1[M4(1,2)] * src2[M4(2,2)] + src1[M4(1,3)] * src2[M4(3,2)]; 
    2bf4:	e0bffd17 	ldw	r2,-12(fp)
    2bf8:	14000604 	addi	r16,r2,24
    2bfc:	e0bffb17 	ldw	r2,-20(fp)
    2c00:	10800404 	addi	r2,r2,16
    2c04:	10c00017 	ldw	r3,0(r2)
    2c08:	e0bffc17 	ldw	r2,-16(fp)
    2c0c:	10800204 	addi	r2,r2,8
    2c10:	11000017 	ldw	r4,0(r2)
    2c14:	200b883a 	mov	r5,r4
    2c18:	1809883a 	mov	r4,r3
    2c1c:	0006c8c0 	call	6c8c <__mulsf3>
    2c20:	1007883a 	mov	r3,r2
    2c24:	1823883a 	mov	r17,r3
    2c28:	e0bffb17 	ldw	r2,-20(fp)
    2c2c:	10800504 	addi	r2,r2,20
    2c30:	10c00017 	ldw	r3,0(r2)
    2c34:	e0bffc17 	ldw	r2,-16(fp)
    2c38:	10800604 	addi	r2,r2,24
    2c3c:	11000017 	ldw	r4,0(r2)
    2c40:	200b883a 	mov	r5,r4
    2c44:	1809883a 	mov	r4,r3
    2c48:	0006c8c0 	call	6c8c <__mulsf3>
    2c4c:	1007883a 	mov	r3,r2
    2c50:	1805883a 	mov	r2,r3
    2c54:	100b883a 	mov	r5,r2
    2c58:	8809883a 	mov	r4,r17
    2c5c:	00063840 	call	6384 <__addsf3>
    2c60:	1007883a 	mov	r3,r2
    2c64:	1823883a 	mov	r17,r3
    2c68:	e0bffb17 	ldw	r2,-20(fp)
    2c6c:	10800604 	addi	r2,r2,24
    2c70:	10c00017 	ldw	r3,0(r2)
    2c74:	e0bffc17 	ldw	r2,-16(fp)
    2c78:	10800a04 	addi	r2,r2,40
    2c7c:	11000017 	ldw	r4,0(r2)
    2c80:	200b883a 	mov	r5,r4
    2c84:	1809883a 	mov	r4,r3
    2c88:	0006c8c0 	call	6c8c <__mulsf3>
    2c8c:	1007883a 	mov	r3,r2
    2c90:	1805883a 	mov	r2,r3
    2c94:	100b883a 	mov	r5,r2
    2c98:	8809883a 	mov	r4,r17
    2c9c:	00063840 	call	6384 <__addsf3>
    2ca0:	1007883a 	mov	r3,r2
    2ca4:	1823883a 	mov	r17,r3
    2ca8:	e0bffb17 	ldw	r2,-20(fp)
    2cac:	10800704 	addi	r2,r2,28
    2cb0:	10c00017 	ldw	r3,0(r2)
    2cb4:	e0bffc17 	ldw	r2,-16(fp)
    2cb8:	10800e04 	addi	r2,r2,56
    2cbc:	11000017 	ldw	r4,0(r2)
    2cc0:	200b883a 	mov	r5,r4
    2cc4:	1809883a 	mov	r4,r3
    2cc8:	0006c8c0 	call	6c8c <__mulsf3>
    2ccc:	1007883a 	mov	r3,r2
    2cd0:	1805883a 	mov	r2,r3
    2cd4:	100b883a 	mov	r5,r2
    2cd8:	8809883a 	mov	r4,r17
    2cdc:	00063840 	call	6384 <__addsf3>
    2ce0:	1007883a 	mov	r3,r2
    2ce4:	1805883a 	mov	r2,r3
    2ce8:	80800015 	stw	r2,0(r16)
    dest[M4(1,3)] = src1[M4(1,0)] * src2[M4(0,3)] + src1[M4(1,1)] * src2[M4(1,3)] + src1[M4(1,2)] * src2[M4(2,3)] + src1[M4(1,3)] * src2[M4(3,3)]; 
    2cec:	e0bffd17 	ldw	r2,-12(fp)
    2cf0:	14000704 	addi	r16,r2,28
    2cf4:	e0bffb17 	ldw	r2,-20(fp)
    2cf8:	10800404 	addi	r2,r2,16
    2cfc:	10c00017 	ldw	r3,0(r2)
    2d00:	e0bffc17 	ldw	r2,-16(fp)
    2d04:	10800304 	addi	r2,r2,12
    2d08:	11000017 	ldw	r4,0(r2)
    2d0c:	200b883a 	mov	r5,r4
    2d10:	1809883a 	mov	r4,r3
    2d14:	0006c8c0 	call	6c8c <__mulsf3>
    2d18:	1007883a 	mov	r3,r2
    2d1c:	1823883a 	mov	r17,r3
    2d20:	e0bffb17 	ldw	r2,-20(fp)
    2d24:	10800504 	addi	r2,r2,20
    2d28:	10c00017 	ldw	r3,0(r2)
    2d2c:	e0bffc17 	ldw	r2,-16(fp)
    2d30:	10800704 	addi	r2,r2,28
    2d34:	11000017 	ldw	r4,0(r2)
    2d38:	200b883a 	mov	r5,r4
    2d3c:	1809883a 	mov	r4,r3
    2d40:	0006c8c0 	call	6c8c <__mulsf3>
    2d44:	1007883a 	mov	r3,r2
    2d48:	1805883a 	mov	r2,r3
    2d4c:	100b883a 	mov	r5,r2
    2d50:	8809883a 	mov	r4,r17
    2d54:	00063840 	call	6384 <__addsf3>
    2d58:	1007883a 	mov	r3,r2
    2d5c:	1823883a 	mov	r17,r3
    2d60:	e0bffb17 	ldw	r2,-20(fp)
    2d64:	10800604 	addi	r2,r2,24
    2d68:	10c00017 	ldw	r3,0(r2)
    2d6c:	e0bffc17 	ldw	r2,-16(fp)
    2d70:	10800b04 	addi	r2,r2,44
    2d74:	11000017 	ldw	r4,0(r2)
    2d78:	200b883a 	mov	r5,r4
    2d7c:	1809883a 	mov	r4,r3
    2d80:	0006c8c0 	call	6c8c <__mulsf3>
    2d84:	1007883a 	mov	r3,r2
    2d88:	1805883a 	mov	r2,r3
    2d8c:	100b883a 	mov	r5,r2
    2d90:	8809883a 	mov	r4,r17
    2d94:	00063840 	call	6384 <__addsf3>
    2d98:	1007883a 	mov	r3,r2
    2d9c:	1823883a 	mov	r17,r3
    2da0:	e0bffb17 	ldw	r2,-20(fp)
    2da4:	10800704 	addi	r2,r2,28
    2da8:	10c00017 	ldw	r3,0(r2)
    2dac:	e0bffc17 	ldw	r2,-16(fp)
    2db0:	10800f04 	addi	r2,r2,60
    2db4:	11000017 	ldw	r4,0(r2)
    2db8:	200b883a 	mov	r5,r4
    2dbc:	1809883a 	mov	r4,r3
    2dc0:	0006c8c0 	call	6c8c <__mulsf3>
    2dc4:	1007883a 	mov	r3,r2
    2dc8:	1805883a 	mov	r2,r3
    2dcc:	100b883a 	mov	r5,r2
    2dd0:	8809883a 	mov	r4,r17
    2dd4:	00063840 	call	6384 <__addsf3>
    2dd8:	1007883a 	mov	r3,r2
    2ddc:	1805883a 	mov	r2,r3
    2de0:	80800015 	stw	r2,0(r16)
    dest[M4(2,0)] = src1[M4(2,0)] * src2[M4(0,0)] + src1[M4(2,1)] * src2[M4(1,0)] + src1[M4(2,2)] * src2[M4(2,0)] + src1[M4(2,3)] * src2[M4(3,0)]; 
    2de4:	e0bffd17 	ldw	r2,-12(fp)
    2de8:	14000804 	addi	r16,r2,32
    2dec:	e0bffb17 	ldw	r2,-20(fp)
    2df0:	10800804 	addi	r2,r2,32
    2df4:	10c00017 	ldw	r3,0(r2)
    2df8:	e0bffc17 	ldw	r2,-16(fp)
    2dfc:	11000017 	ldw	r4,0(r2)
    2e00:	200b883a 	mov	r5,r4
    2e04:	1809883a 	mov	r4,r3
    2e08:	0006c8c0 	call	6c8c <__mulsf3>
    2e0c:	1007883a 	mov	r3,r2
    2e10:	1823883a 	mov	r17,r3
    2e14:	e0bffb17 	ldw	r2,-20(fp)
    2e18:	10800904 	addi	r2,r2,36
    2e1c:	10c00017 	ldw	r3,0(r2)
    2e20:	e0bffc17 	ldw	r2,-16(fp)
    2e24:	10800404 	addi	r2,r2,16
    2e28:	11000017 	ldw	r4,0(r2)
    2e2c:	200b883a 	mov	r5,r4
    2e30:	1809883a 	mov	r4,r3
    2e34:	0006c8c0 	call	6c8c <__mulsf3>
    2e38:	1007883a 	mov	r3,r2
    2e3c:	1805883a 	mov	r2,r3
    2e40:	100b883a 	mov	r5,r2
    2e44:	8809883a 	mov	r4,r17
    2e48:	00063840 	call	6384 <__addsf3>
    2e4c:	1007883a 	mov	r3,r2
    2e50:	1823883a 	mov	r17,r3
    2e54:	e0bffb17 	ldw	r2,-20(fp)
    2e58:	10800a04 	addi	r2,r2,40
    2e5c:	10c00017 	ldw	r3,0(r2)
    2e60:	e0bffc17 	ldw	r2,-16(fp)
    2e64:	10800804 	addi	r2,r2,32
    2e68:	11000017 	ldw	r4,0(r2)
    2e6c:	200b883a 	mov	r5,r4
    2e70:	1809883a 	mov	r4,r3
    2e74:	0006c8c0 	call	6c8c <__mulsf3>
    2e78:	1007883a 	mov	r3,r2
    2e7c:	1805883a 	mov	r2,r3
    2e80:	100b883a 	mov	r5,r2
    2e84:	8809883a 	mov	r4,r17
    2e88:	00063840 	call	6384 <__addsf3>
    2e8c:	1007883a 	mov	r3,r2
    2e90:	1823883a 	mov	r17,r3
    2e94:	e0bffb17 	ldw	r2,-20(fp)
    2e98:	10800b04 	addi	r2,r2,44
    2e9c:	10c00017 	ldw	r3,0(r2)
    2ea0:	e0bffc17 	ldw	r2,-16(fp)
    2ea4:	10800c04 	addi	r2,r2,48
    2ea8:	11000017 	ldw	r4,0(r2)
    2eac:	200b883a 	mov	r5,r4
    2eb0:	1809883a 	mov	r4,r3
    2eb4:	0006c8c0 	call	6c8c <__mulsf3>
    2eb8:	1007883a 	mov	r3,r2
    2ebc:	1805883a 	mov	r2,r3
    2ec0:	100b883a 	mov	r5,r2
    2ec4:	8809883a 	mov	r4,r17
    2ec8:	00063840 	call	6384 <__addsf3>
    2ecc:	1007883a 	mov	r3,r2
    2ed0:	1805883a 	mov	r2,r3
    2ed4:	80800015 	stw	r2,0(r16)
    dest[M4(2,1)] = src1[M4(2,0)] * src2[M4(0,1)] + src1[M4(2,1)] * src2[M4(1,1)] + src1[M4(2,2)] * src2[M4(2,1)] + src1[M4(2,3)] * src2[M4(3,1)]; 
    2ed8:	e0bffd17 	ldw	r2,-12(fp)
    2edc:	14000904 	addi	r16,r2,36
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10800804 	addi	r2,r2,32
    2ee8:	10c00017 	ldw	r3,0(r2)
    2eec:	e0bffc17 	ldw	r2,-16(fp)
    2ef0:	10800104 	addi	r2,r2,4
    2ef4:	11000017 	ldw	r4,0(r2)
    2ef8:	200b883a 	mov	r5,r4
    2efc:	1809883a 	mov	r4,r3
    2f00:	0006c8c0 	call	6c8c <__mulsf3>
    2f04:	1007883a 	mov	r3,r2
    2f08:	1823883a 	mov	r17,r3
    2f0c:	e0bffb17 	ldw	r2,-20(fp)
    2f10:	10800904 	addi	r2,r2,36
    2f14:	10c00017 	ldw	r3,0(r2)
    2f18:	e0bffc17 	ldw	r2,-16(fp)
    2f1c:	10800504 	addi	r2,r2,20
    2f20:	11000017 	ldw	r4,0(r2)
    2f24:	200b883a 	mov	r5,r4
    2f28:	1809883a 	mov	r4,r3
    2f2c:	0006c8c0 	call	6c8c <__mulsf3>
    2f30:	1007883a 	mov	r3,r2
    2f34:	1805883a 	mov	r2,r3
    2f38:	100b883a 	mov	r5,r2
    2f3c:	8809883a 	mov	r4,r17
    2f40:	00063840 	call	6384 <__addsf3>
    2f44:	1007883a 	mov	r3,r2
    2f48:	1823883a 	mov	r17,r3
    2f4c:	e0bffb17 	ldw	r2,-20(fp)
    2f50:	10800a04 	addi	r2,r2,40
    2f54:	10c00017 	ldw	r3,0(r2)
    2f58:	e0bffc17 	ldw	r2,-16(fp)
    2f5c:	10800904 	addi	r2,r2,36
    2f60:	11000017 	ldw	r4,0(r2)
    2f64:	200b883a 	mov	r5,r4
    2f68:	1809883a 	mov	r4,r3
    2f6c:	0006c8c0 	call	6c8c <__mulsf3>
    2f70:	1007883a 	mov	r3,r2
    2f74:	1805883a 	mov	r2,r3
    2f78:	100b883a 	mov	r5,r2
    2f7c:	8809883a 	mov	r4,r17
    2f80:	00063840 	call	6384 <__addsf3>
    2f84:	1007883a 	mov	r3,r2
    2f88:	1823883a 	mov	r17,r3
    2f8c:	e0bffb17 	ldw	r2,-20(fp)
    2f90:	10800b04 	addi	r2,r2,44
    2f94:	10c00017 	ldw	r3,0(r2)
    2f98:	e0bffc17 	ldw	r2,-16(fp)
    2f9c:	10800d04 	addi	r2,r2,52
    2fa0:	11000017 	ldw	r4,0(r2)
    2fa4:	200b883a 	mov	r5,r4
    2fa8:	1809883a 	mov	r4,r3
    2fac:	0006c8c0 	call	6c8c <__mulsf3>
    2fb0:	1007883a 	mov	r3,r2
    2fb4:	1805883a 	mov	r2,r3
    2fb8:	100b883a 	mov	r5,r2
    2fbc:	8809883a 	mov	r4,r17
    2fc0:	00063840 	call	6384 <__addsf3>
    2fc4:	1007883a 	mov	r3,r2
    2fc8:	1805883a 	mov	r2,r3
    2fcc:	80800015 	stw	r2,0(r16)
    dest[M4(2,2)] = src1[M4(2,0)] * src2[M4(0,2)] + src1[M4(2,1)] * src2[M4(1,2)] + src1[M4(2,2)] * src2[M4(2,2)] + src1[M4(2,3)] * src2[M4(3,2)]; 
    2fd0:	e0bffd17 	ldw	r2,-12(fp)
    2fd4:	14000a04 	addi	r16,r2,40
    2fd8:	e0bffb17 	ldw	r2,-20(fp)
    2fdc:	10800804 	addi	r2,r2,32
    2fe0:	10c00017 	ldw	r3,0(r2)
    2fe4:	e0bffc17 	ldw	r2,-16(fp)
    2fe8:	10800204 	addi	r2,r2,8
    2fec:	11000017 	ldw	r4,0(r2)
    2ff0:	200b883a 	mov	r5,r4
    2ff4:	1809883a 	mov	r4,r3
    2ff8:	0006c8c0 	call	6c8c <__mulsf3>
    2ffc:	1007883a 	mov	r3,r2
    3000:	1823883a 	mov	r17,r3
    3004:	e0bffb17 	ldw	r2,-20(fp)
    3008:	10800904 	addi	r2,r2,36
    300c:	10c00017 	ldw	r3,0(r2)
    3010:	e0bffc17 	ldw	r2,-16(fp)
    3014:	10800604 	addi	r2,r2,24
    3018:	11000017 	ldw	r4,0(r2)
    301c:	200b883a 	mov	r5,r4
    3020:	1809883a 	mov	r4,r3
    3024:	0006c8c0 	call	6c8c <__mulsf3>
    3028:	1007883a 	mov	r3,r2
    302c:	1805883a 	mov	r2,r3
    3030:	100b883a 	mov	r5,r2
    3034:	8809883a 	mov	r4,r17
    3038:	00063840 	call	6384 <__addsf3>
    303c:	1007883a 	mov	r3,r2
    3040:	1823883a 	mov	r17,r3
    3044:	e0bffb17 	ldw	r2,-20(fp)
    3048:	10800a04 	addi	r2,r2,40
    304c:	10c00017 	ldw	r3,0(r2)
    3050:	e0bffc17 	ldw	r2,-16(fp)
    3054:	10800a04 	addi	r2,r2,40
    3058:	11000017 	ldw	r4,0(r2)
    305c:	200b883a 	mov	r5,r4
    3060:	1809883a 	mov	r4,r3
    3064:	0006c8c0 	call	6c8c <__mulsf3>
    3068:	1007883a 	mov	r3,r2
    306c:	1805883a 	mov	r2,r3
    3070:	100b883a 	mov	r5,r2
    3074:	8809883a 	mov	r4,r17
    3078:	00063840 	call	6384 <__addsf3>
    307c:	1007883a 	mov	r3,r2
    3080:	1823883a 	mov	r17,r3
    3084:	e0bffb17 	ldw	r2,-20(fp)
    3088:	10800b04 	addi	r2,r2,44
    308c:	10c00017 	ldw	r3,0(r2)
    3090:	e0bffc17 	ldw	r2,-16(fp)
    3094:	10800e04 	addi	r2,r2,56
    3098:	11000017 	ldw	r4,0(r2)
    309c:	200b883a 	mov	r5,r4
    30a0:	1809883a 	mov	r4,r3
    30a4:	0006c8c0 	call	6c8c <__mulsf3>
    30a8:	1007883a 	mov	r3,r2
    30ac:	1805883a 	mov	r2,r3
    30b0:	100b883a 	mov	r5,r2
    30b4:	8809883a 	mov	r4,r17
    30b8:	00063840 	call	6384 <__addsf3>
    30bc:	1007883a 	mov	r3,r2
    30c0:	1805883a 	mov	r2,r3
    30c4:	80800015 	stw	r2,0(r16)
    dest[M4(2,3)] = src1[M4(2,0)] * src2[M4(0,3)] + src1[M4(2,1)] * src2[M4(1,3)] + src1[M4(2,2)] * src2[M4(2,3)] + src1[M4(2,3)] * src2[M4(3,3)]; 
    30c8:	e0bffd17 	ldw	r2,-12(fp)
    30cc:	14000b04 	addi	r16,r2,44
    30d0:	e0bffb17 	ldw	r2,-20(fp)
    30d4:	10800804 	addi	r2,r2,32
    30d8:	10c00017 	ldw	r3,0(r2)
    30dc:	e0bffc17 	ldw	r2,-16(fp)
    30e0:	10800304 	addi	r2,r2,12
    30e4:	11000017 	ldw	r4,0(r2)
    30e8:	200b883a 	mov	r5,r4
    30ec:	1809883a 	mov	r4,r3
    30f0:	0006c8c0 	call	6c8c <__mulsf3>
    30f4:	1007883a 	mov	r3,r2
    30f8:	1823883a 	mov	r17,r3
    30fc:	e0bffb17 	ldw	r2,-20(fp)
    3100:	10800904 	addi	r2,r2,36
    3104:	10c00017 	ldw	r3,0(r2)
    3108:	e0bffc17 	ldw	r2,-16(fp)
    310c:	10800704 	addi	r2,r2,28
    3110:	11000017 	ldw	r4,0(r2)
    3114:	200b883a 	mov	r5,r4
    3118:	1809883a 	mov	r4,r3
    311c:	0006c8c0 	call	6c8c <__mulsf3>
    3120:	1007883a 	mov	r3,r2
    3124:	1805883a 	mov	r2,r3
    3128:	100b883a 	mov	r5,r2
    312c:	8809883a 	mov	r4,r17
    3130:	00063840 	call	6384 <__addsf3>
    3134:	1007883a 	mov	r3,r2
    3138:	1823883a 	mov	r17,r3
    313c:	e0bffb17 	ldw	r2,-20(fp)
    3140:	10800a04 	addi	r2,r2,40
    3144:	10c00017 	ldw	r3,0(r2)
    3148:	e0bffc17 	ldw	r2,-16(fp)
    314c:	10800b04 	addi	r2,r2,44
    3150:	11000017 	ldw	r4,0(r2)
    3154:	200b883a 	mov	r5,r4
    3158:	1809883a 	mov	r4,r3
    315c:	0006c8c0 	call	6c8c <__mulsf3>
    3160:	1007883a 	mov	r3,r2
    3164:	1805883a 	mov	r2,r3
    3168:	100b883a 	mov	r5,r2
    316c:	8809883a 	mov	r4,r17
    3170:	00063840 	call	6384 <__addsf3>
    3174:	1007883a 	mov	r3,r2
    3178:	1823883a 	mov	r17,r3
    317c:	e0bffb17 	ldw	r2,-20(fp)
    3180:	10800b04 	addi	r2,r2,44
    3184:	10c00017 	ldw	r3,0(r2)
    3188:	e0bffc17 	ldw	r2,-16(fp)
    318c:	10800f04 	addi	r2,r2,60
    3190:	11000017 	ldw	r4,0(r2)
    3194:	200b883a 	mov	r5,r4
    3198:	1809883a 	mov	r4,r3
    319c:	0006c8c0 	call	6c8c <__mulsf3>
    31a0:	1007883a 	mov	r3,r2
    31a4:	1805883a 	mov	r2,r3
    31a8:	100b883a 	mov	r5,r2
    31ac:	8809883a 	mov	r4,r17
    31b0:	00063840 	call	6384 <__addsf3>
    31b4:	1007883a 	mov	r3,r2
    31b8:	1805883a 	mov	r2,r3
    31bc:	80800015 	stw	r2,0(r16)
    dest[M4(3,0)] = src1[M4(3,0)] * src2[M4(0,0)] + src1[M4(3,1)] * src2[M4(1,0)] + src1[M4(3,2)] * src2[M4(2,0)] + src1[M4(3,3)] * src2[M4(3,0)]; 
    31c0:	e0bffd17 	ldw	r2,-12(fp)
    31c4:	14000c04 	addi	r16,r2,48
    31c8:	e0bffb17 	ldw	r2,-20(fp)
    31cc:	10800c04 	addi	r2,r2,48
    31d0:	10c00017 	ldw	r3,0(r2)
    31d4:	e0bffc17 	ldw	r2,-16(fp)
    31d8:	11000017 	ldw	r4,0(r2)
    31dc:	200b883a 	mov	r5,r4
    31e0:	1809883a 	mov	r4,r3
    31e4:	0006c8c0 	call	6c8c <__mulsf3>
    31e8:	1007883a 	mov	r3,r2
    31ec:	1823883a 	mov	r17,r3
    31f0:	e0bffb17 	ldw	r2,-20(fp)
    31f4:	10800d04 	addi	r2,r2,52
    31f8:	10c00017 	ldw	r3,0(r2)
    31fc:	e0bffc17 	ldw	r2,-16(fp)
    3200:	10800404 	addi	r2,r2,16
    3204:	11000017 	ldw	r4,0(r2)
    3208:	200b883a 	mov	r5,r4
    320c:	1809883a 	mov	r4,r3
    3210:	0006c8c0 	call	6c8c <__mulsf3>
    3214:	1007883a 	mov	r3,r2
    3218:	1805883a 	mov	r2,r3
    321c:	100b883a 	mov	r5,r2
    3220:	8809883a 	mov	r4,r17
    3224:	00063840 	call	6384 <__addsf3>
    3228:	1007883a 	mov	r3,r2
    322c:	1823883a 	mov	r17,r3
    3230:	e0bffb17 	ldw	r2,-20(fp)
    3234:	10800e04 	addi	r2,r2,56
    3238:	10c00017 	ldw	r3,0(r2)
    323c:	e0bffc17 	ldw	r2,-16(fp)
    3240:	10800804 	addi	r2,r2,32
    3244:	11000017 	ldw	r4,0(r2)
    3248:	200b883a 	mov	r5,r4
    324c:	1809883a 	mov	r4,r3
    3250:	0006c8c0 	call	6c8c <__mulsf3>
    3254:	1007883a 	mov	r3,r2
    3258:	1805883a 	mov	r2,r3
    325c:	100b883a 	mov	r5,r2
    3260:	8809883a 	mov	r4,r17
    3264:	00063840 	call	6384 <__addsf3>
    3268:	1007883a 	mov	r3,r2
    326c:	1823883a 	mov	r17,r3
    3270:	e0bffb17 	ldw	r2,-20(fp)
    3274:	10800f04 	addi	r2,r2,60
    3278:	10c00017 	ldw	r3,0(r2)
    327c:	e0bffc17 	ldw	r2,-16(fp)
    3280:	10800c04 	addi	r2,r2,48
    3284:	11000017 	ldw	r4,0(r2)
    3288:	200b883a 	mov	r5,r4
    328c:	1809883a 	mov	r4,r3
    3290:	0006c8c0 	call	6c8c <__mulsf3>
    3294:	1007883a 	mov	r3,r2
    3298:	1805883a 	mov	r2,r3
    329c:	100b883a 	mov	r5,r2
    32a0:	8809883a 	mov	r4,r17
    32a4:	00063840 	call	6384 <__addsf3>
    32a8:	1007883a 	mov	r3,r2
    32ac:	1805883a 	mov	r2,r3
    32b0:	80800015 	stw	r2,0(r16)
    dest[M4(3,1)] = src1[M4(3,0)] * src2[M4(0,1)] + src1[M4(3,1)] * src2[M4(1,1)] + src1[M4(3,2)] * src2[M4(2,1)] + src1[M4(3,3)] * src2[M4(3,1)]; 
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	14000d04 	addi	r16,r2,52
    32bc:	e0bffb17 	ldw	r2,-20(fp)
    32c0:	10800c04 	addi	r2,r2,48
    32c4:	10c00017 	ldw	r3,0(r2)
    32c8:	e0bffc17 	ldw	r2,-16(fp)
    32cc:	10800104 	addi	r2,r2,4
    32d0:	11000017 	ldw	r4,0(r2)
    32d4:	200b883a 	mov	r5,r4
    32d8:	1809883a 	mov	r4,r3
    32dc:	0006c8c0 	call	6c8c <__mulsf3>
    32e0:	1007883a 	mov	r3,r2
    32e4:	1823883a 	mov	r17,r3
    32e8:	e0bffb17 	ldw	r2,-20(fp)
    32ec:	10800d04 	addi	r2,r2,52
    32f0:	10c00017 	ldw	r3,0(r2)
    32f4:	e0bffc17 	ldw	r2,-16(fp)
    32f8:	10800504 	addi	r2,r2,20
    32fc:	11000017 	ldw	r4,0(r2)
    3300:	200b883a 	mov	r5,r4
    3304:	1809883a 	mov	r4,r3
    3308:	0006c8c0 	call	6c8c <__mulsf3>
    330c:	1007883a 	mov	r3,r2
    3310:	1805883a 	mov	r2,r3
    3314:	100b883a 	mov	r5,r2
    3318:	8809883a 	mov	r4,r17
    331c:	00063840 	call	6384 <__addsf3>
    3320:	1007883a 	mov	r3,r2
    3324:	1823883a 	mov	r17,r3
    3328:	e0bffb17 	ldw	r2,-20(fp)
    332c:	10800e04 	addi	r2,r2,56
    3330:	10c00017 	ldw	r3,0(r2)
    3334:	e0bffc17 	ldw	r2,-16(fp)
    3338:	10800904 	addi	r2,r2,36
    333c:	11000017 	ldw	r4,0(r2)
    3340:	200b883a 	mov	r5,r4
    3344:	1809883a 	mov	r4,r3
    3348:	0006c8c0 	call	6c8c <__mulsf3>
    334c:	1007883a 	mov	r3,r2
    3350:	1805883a 	mov	r2,r3
    3354:	100b883a 	mov	r5,r2
    3358:	8809883a 	mov	r4,r17
    335c:	00063840 	call	6384 <__addsf3>
    3360:	1007883a 	mov	r3,r2
    3364:	1823883a 	mov	r17,r3
    3368:	e0bffb17 	ldw	r2,-20(fp)
    336c:	10800f04 	addi	r2,r2,60
    3370:	10c00017 	ldw	r3,0(r2)
    3374:	e0bffc17 	ldw	r2,-16(fp)
    3378:	10800d04 	addi	r2,r2,52
    337c:	11000017 	ldw	r4,0(r2)
    3380:	200b883a 	mov	r5,r4
    3384:	1809883a 	mov	r4,r3
    3388:	0006c8c0 	call	6c8c <__mulsf3>
    338c:	1007883a 	mov	r3,r2
    3390:	1805883a 	mov	r2,r3
    3394:	100b883a 	mov	r5,r2
    3398:	8809883a 	mov	r4,r17
    339c:	00063840 	call	6384 <__addsf3>
    33a0:	1007883a 	mov	r3,r2
    33a4:	1805883a 	mov	r2,r3
    33a8:	80800015 	stw	r2,0(r16)
    dest[M4(3,2)] = src1[M4(3,0)] * src2[M4(0,2)] + src1[M4(3,1)] * src2[M4(1,2)] + src1[M4(3,2)] * src2[M4(2,2)] + src1[M4(3,3)] * src2[M4(3,2)]; 
    33ac:	e0bffd17 	ldw	r2,-12(fp)
    33b0:	14000e04 	addi	r16,r2,56
    33b4:	e0bffb17 	ldw	r2,-20(fp)
    33b8:	10800c04 	addi	r2,r2,48
    33bc:	10c00017 	ldw	r3,0(r2)
    33c0:	e0bffc17 	ldw	r2,-16(fp)
    33c4:	10800204 	addi	r2,r2,8
    33c8:	11000017 	ldw	r4,0(r2)
    33cc:	200b883a 	mov	r5,r4
    33d0:	1809883a 	mov	r4,r3
    33d4:	0006c8c0 	call	6c8c <__mulsf3>
    33d8:	1007883a 	mov	r3,r2
    33dc:	1823883a 	mov	r17,r3
    33e0:	e0bffb17 	ldw	r2,-20(fp)
    33e4:	10800d04 	addi	r2,r2,52
    33e8:	10c00017 	ldw	r3,0(r2)
    33ec:	e0bffc17 	ldw	r2,-16(fp)
    33f0:	10800604 	addi	r2,r2,24
    33f4:	11000017 	ldw	r4,0(r2)
    33f8:	200b883a 	mov	r5,r4
    33fc:	1809883a 	mov	r4,r3
    3400:	0006c8c0 	call	6c8c <__mulsf3>
    3404:	1007883a 	mov	r3,r2
    3408:	1805883a 	mov	r2,r3
    340c:	100b883a 	mov	r5,r2
    3410:	8809883a 	mov	r4,r17
    3414:	00063840 	call	6384 <__addsf3>
    3418:	1007883a 	mov	r3,r2
    341c:	1823883a 	mov	r17,r3
    3420:	e0bffb17 	ldw	r2,-20(fp)
    3424:	10800e04 	addi	r2,r2,56
    3428:	10c00017 	ldw	r3,0(r2)
    342c:	e0bffc17 	ldw	r2,-16(fp)
    3430:	10800a04 	addi	r2,r2,40
    3434:	11000017 	ldw	r4,0(r2)
    3438:	200b883a 	mov	r5,r4
    343c:	1809883a 	mov	r4,r3
    3440:	0006c8c0 	call	6c8c <__mulsf3>
    3444:	1007883a 	mov	r3,r2
    3448:	1805883a 	mov	r2,r3
    344c:	100b883a 	mov	r5,r2
    3450:	8809883a 	mov	r4,r17
    3454:	00063840 	call	6384 <__addsf3>
    3458:	1007883a 	mov	r3,r2
    345c:	1823883a 	mov	r17,r3
    3460:	e0bffb17 	ldw	r2,-20(fp)
    3464:	10800f04 	addi	r2,r2,60
    3468:	10c00017 	ldw	r3,0(r2)
    346c:	e0bffc17 	ldw	r2,-16(fp)
    3470:	10800e04 	addi	r2,r2,56
    3474:	11000017 	ldw	r4,0(r2)
    3478:	200b883a 	mov	r5,r4
    347c:	1809883a 	mov	r4,r3
    3480:	0006c8c0 	call	6c8c <__mulsf3>
    3484:	1007883a 	mov	r3,r2
    3488:	1805883a 	mov	r2,r3
    348c:	100b883a 	mov	r5,r2
    3490:	8809883a 	mov	r4,r17
    3494:	00063840 	call	6384 <__addsf3>
    3498:	1007883a 	mov	r3,r2
    349c:	1805883a 	mov	r2,r3
    34a0:	80800015 	stw	r2,0(r16)
    dest[M4(3,3)] = src1[M4(3,0)] * src2[M4(0,3)] + src1[M4(3,1)] * src2[M4(1,3)] + src1[M4(3,2)] * src2[M4(2,3)] + src1[M4(3,3)] * src2[M4(3,3)];
    34a4:	e0bffd17 	ldw	r2,-12(fp)
    34a8:	14000f04 	addi	r16,r2,60
    34ac:	e0bffb17 	ldw	r2,-20(fp)
    34b0:	10800c04 	addi	r2,r2,48
    34b4:	10c00017 	ldw	r3,0(r2)
    34b8:	e0bffc17 	ldw	r2,-16(fp)
    34bc:	10800304 	addi	r2,r2,12
    34c0:	11000017 	ldw	r4,0(r2)
    34c4:	200b883a 	mov	r5,r4
    34c8:	1809883a 	mov	r4,r3
    34cc:	0006c8c0 	call	6c8c <__mulsf3>
    34d0:	1007883a 	mov	r3,r2
    34d4:	1823883a 	mov	r17,r3
    34d8:	e0bffb17 	ldw	r2,-20(fp)
    34dc:	10800d04 	addi	r2,r2,52
    34e0:	10c00017 	ldw	r3,0(r2)
    34e4:	e0bffc17 	ldw	r2,-16(fp)
    34e8:	10800704 	addi	r2,r2,28
    34ec:	11000017 	ldw	r4,0(r2)
    34f0:	200b883a 	mov	r5,r4
    34f4:	1809883a 	mov	r4,r3
    34f8:	0006c8c0 	call	6c8c <__mulsf3>
    34fc:	1007883a 	mov	r3,r2
    3500:	1805883a 	mov	r2,r3
    3504:	100b883a 	mov	r5,r2
    3508:	8809883a 	mov	r4,r17
    350c:	00063840 	call	6384 <__addsf3>
    3510:	1007883a 	mov	r3,r2
    3514:	1823883a 	mov	r17,r3
    3518:	e0bffb17 	ldw	r2,-20(fp)
    351c:	10800e04 	addi	r2,r2,56
    3520:	10c00017 	ldw	r3,0(r2)
    3524:	e0bffc17 	ldw	r2,-16(fp)
    3528:	10800b04 	addi	r2,r2,44
    352c:	11000017 	ldw	r4,0(r2)
    3530:	200b883a 	mov	r5,r4
    3534:	1809883a 	mov	r4,r3
    3538:	0006c8c0 	call	6c8c <__mulsf3>
    353c:	1007883a 	mov	r3,r2
    3540:	1805883a 	mov	r2,r3
    3544:	100b883a 	mov	r5,r2
    3548:	8809883a 	mov	r4,r17
    354c:	00063840 	call	6384 <__addsf3>
    3550:	1007883a 	mov	r3,r2
    3554:	1823883a 	mov	r17,r3
    3558:	e0bffb17 	ldw	r2,-20(fp)
    355c:	10800f04 	addi	r2,r2,60
    3560:	10c00017 	ldw	r3,0(r2)
    3564:	e0bffc17 	ldw	r2,-16(fp)
    3568:	10800f04 	addi	r2,r2,60
    356c:	11000017 	ldw	r4,0(r2)
    3570:	200b883a 	mov	r5,r4
    3574:	1809883a 	mov	r4,r3
    3578:	0006c8c0 	call	6c8c <__mulsf3>
    357c:	1007883a 	mov	r3,r2
    3580:	1805883a 	mov	r2,r3
    3584:	100b883a 	mov	r5,r2
    3588:	8809883a 	mov	r4,r17
    358c:	00063840 	call	6384 <__addsf3>
    3590:	1007883a 	mov	r3,r2
    3594:	1805883a 	mov	r2,r3
    3598:	80800015 	stw	r2,0(r16)
};
    359c:	0001883a 	nop
    35a0:	e6fffe04 	addi	sp,fp,-8
    35a4:	dfc00317 	ldw	ra,12(sp)
    35a8:	df000217 	ldw	fp,8(sp)
    35ac:	dc400117 	ldw	r17,4(sp)
    35b0:	dc000017 	ldw	r16,0(sp)
    35b4:	dec00404 	addi	sp,sp,16
    35b8:	f800283a 	ret

000035bc <_Z13display_digith>:

alt_up_pixel_buffer_dma_dev *pixel_buf_dma_dev;

Cube_3D Cube;

uint8_t display_digit(uint8_t val){
    35bc:	defff804 	addi	sp,sp,-32
    35c0:	dfc00715 	stw	ra,28(sp)
    35c4:	df000615 	stw	fp,24(sp)
    35c8:	df000604 	addi	fp,sp,24
    35cc:	2005883a 	mov	r2,r4
    35d0:	e0bfff05 	stb	r2,-4(fp)
	uint8_t lut[20] = {0x3F, 0x06, 0x5B, 0x4F, 	//0 to 3
					   0x66, 0x6D, 0x7D, 0x07,	//4 to 7
					   0x7F, 0x6F, 0x77, 0x7C,  //8 to B
					   0x39, 0x5E, 0x79, 0x71,  //C to F
					   0x00, 0x40, 0x5E, 0x76};	//0x00 codifica il display spento -> NO_NUMBER, 0x40 codifica il meno;
    35d4:	00800074 	movhi	r2,1
    35d8:	108ba304 	addi	r2,r2,11916
    35dc:	e0fffa04 	addi	r3,fp,-24
    35e0:	1009883a 	mov	r4,r2
    35e4:	00800504 	movi	r2,20
    35e8:	100d883a 	mov	r6,r2
    35ec:	200b883a 	mov	r5,r4
    35f0:	1809883a 	mov	r4,r3
    35f4:	0009f740 	call	9f74 <memcpy>
	return (lut[val]);
    35f8:	e0bfff03 	ldbu	r2,-4(fp)
    35fc:	e0fffa04 	addi	r3,fp,-24
    3600:	1885883a 	add	r2,r3,r2
    3604:	10800003 	ldbu	r2,0(r2)
}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <_Z11display_fpsm>:
void display_fps(uint32_t fps){
    361c:	defffb04 	addi	sp,sp,-20
    3620:	dfc00415 	stw	ra,16(sp)
    3624:	df000315 	stw	fp,12(sp)
    3628:	dc000215 	stw	r16,8(sp)
    362c:	df000304 	addi	fp,sp,12
    3630:	e13ffe15 	stw	r4,-8(fp)
    uint8_t units, tens, hundreds;
	
	hundreds = (fps / 100) ? (fps / 100) : NO_NUMBER ;
    3634:	e0bffe17 	ldw	r2,-8(fp)
    3638:	10801930 	cmpltui	r2,r2,100
    363c:	1000051e 	bne	r2,zero,3654 <_Z11display_fpsm+0x38>
    3640:	e0bffe17 	ldw	r2,-8(fp)
    3644:	01401904 	movi	r5,100
    3648:	1009883a 	mov	r4,r2
    364c:	00062c80 	call	62c8 <__udivsi3>
    3650:	00000106 	br	3658 <_Z11display_fpsm+0x3c>
    3654:	00800404 	movi	r2,16
    3658:	e0bffd05 	stb	r2,-12(fp)
	tens = (fps % 100) / 10;
    365c:	e0bffe17 	ldw	r2,-8(fp)
    3660:	01401904 	movi	r5,100
    3664:	1009883a 	mov	r4,r2
    3668:	000632c0 	call	632c <__umodsi3>
    366c:	01400284 	movi	r5,10
    3670:	1009883a 	mov	r4,r2
    3674:	00062c80 	call	62c8 <__udivsi3>
    3678:	e0bffd45 	stb	r2,-11(fp)
	tens = ((hundreds == NO_NUMBER) && (tens == 0)) ? NO_NUMBER : tens;
    367c:	e0bffd03 	ldbu	r2,-12(fp)
    3680:	10800418 	cmpnei	r2,r2,16
    3684:	1000021e 	bne	r2,zero,3690 <_Z11display_fpsm+0x74>
    3688:	e0bffd43 	ldbu	r2,-11(fp)
    368c:	10000226 	beq	r2,zero,3698 <_Z11display_fpsm+0x7c>
    3690:	e0bffd43 	ldbu	r2,-11(fp)
    3694:	00000106 	br	369c <_Z11display_fpsm+0x80>
    3698:	00800404 	movi	r2,16
    369c:	e0bffd45 	stb	r2,-11(fp)
	units = fps % 10;
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	01400284 	movi	r5,10
    36a8:	1009883a 	mov	r4,r2
    36ac:	000632c0 	call	632c <__umodsi3>
    36b0:	e0bffd85 	stb	r2,-10(fp)
	//HEX3_HEX0_DATA_REG = display_digit(units) << FIRST_DISPLAY | display_digit(tens) << SECOND_DISPLAY | display_digit(hundreds) << THIRD_DISPLAY ;
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_HEX0_BASE, display_digit(units) << FIRST_DISPLAY | display_digit(tens) << SECOND_DISPLAY | display_digit(hundreds) << THIRD_DISPLAY);
    36b4:	e0bffd83 	ldbu	r2,-10(fp)
    36b8:	1009883a 	mov	r4,r2
    36bc:	00035bc0 	call	35bc <_Z13display_digith>
    36c0:	14003fcc 	andi	r16,r2,255
    36c4:	e0bffd43 	ldbu	r2,-11(fp)
    36c8:	1009883a 	mov	r4,r2
    36cc:	00035bc0 	call	35bc <_Z13display_digith>
    36d0:	10803fcc 	andi	r2,r2,255
    36d4:	1004923a 	slli	r2,r2,8
    36d8:	80a0b03a 	or	r16,r16,r2
    36dc:	e0bffd03 	ldbu	r2,-12(fp)
    36e0:	1009883a 	mov	r4,r2
    36e4:	00035bc0 	call	35bc <_Z13display_digith>
    36e8:	10803fcc 	andi	r2,r2,255
    36ec:	1004943a 	slli	r2,r2,16
    36f0:	8086b03a 	or	r3,r16,r2
    36f4:	00814034 	movhi	r2,1280
    36f8:	10861804 	addi	r2,r2,6240
    36fc:	10c00035 	stwio	r3,0(r2)
}
    3700:	0001883a 	nop
    3704:	e6ffff04 	addi	sp,fp,-4
    3708:	dfc00217 	ldw	ra,8(sp)
    370c:	df000117 	ldw	fp,4(sp)
    3710:	dc000017 	ldw	r16,0(sp)
    3714:	dec00304 	addi	sp,sp,12
    3718:	f800283a 	ret

0000371c <main>:

int main(){
    371c:	defffd04 	addi	sp,sp,-12
    3720:	dfc00215 	stw	ra,8(sp)
    3724:	df000115 	stw	fp,4(sp)
    3728:	df000104 	addi	fp,sp,4
    
    #ifdef DEBUG_1
    int current_frame = 0;
    #endif /*DEBUG_1*/

    init_accelerometer();
    372c:	00002740 	call	274 <_Z18init_accelerometerv>
    pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
    3730:	01000074 	movhi	r4,1
    3734:	210ba804 	addi	r4,r4,11936
    3738:	000e8980 	call	e898 <alt_up_pixel_buffer_dma_open_dev>
    373c:	d0a6e615 	stw	r2,-25704(gp)
    alt_timestamp_start();
    3740:	000e3d00 	call	e3d0 <alt_timestamp_start>

        #ifdef DEBUG_1
    	printf("FRAME %d\n", current_frame++);
        #endif /*DEBUG_1*/

        accelerometer_controller();
    3744:	00002d00 	call	2d0 <_Z24accelerometer_controllerv>
        Cube.calculate_rendering();
    3748:	01000074 	movhi	r4,1
    374c:	211a3c04 	addi	r4,r4,26864
    3750:	000380c0 	call	380c <_ZN7Cube_3D19calculate_renderingEv>
        Cube.display_frame(); 
    3754:	01000074 	movhi	r4,1
    3758:	211a3c04 	addi	r4,r4,26864
    375c:	0001ccc0 	call	1ccc <_ZN7Cube_3D13display_frameEv>
        fps = TIMER_FREQ/alt_timestamp();
    3760:	000e4480 	call	e448 <alt_timestamp>
    3764:	100b883a 	mov	r5,r2
    3768:	01013174 	movhi	r4,1221
    376c:	212d0004 	addi	r4,r4,-19456
    3770:	00062c80 	call	62c8 <__udivsi3>
    3774:	e0bfff15 	stw	r2,-4(fp)
        display_fps(fps);
    3778:	e13fff17 	ldw	r4,-4(fp)
    377c:	000361c0 	call	361c <_Z11display_fpsm>

        alt_timestamp_start();
    3780:	000e3d00 	call	e3d0 <alt_timestamp_start>
    pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
    alt_timestamp_start();

    
    
    for(;;){
    3784:	003fef06 	br	3744 <__ram_exceptions_end+0xfb0020fc>

00003788 <_Z41__static_initialization_and_destruction_0ii>:
        display_fps(fps);

        alt_timestamp_start();

    }
}
    3788:	defffc04 	addi	sp,sp,-16
    378c:	dfc00315 	stw	ra,12(sp)
    3790:	df000215 	stw	fp,8(sp)
    3794:	df000204 	addi	fp,sp,8
    3798:	e13ffe15 	stw	r4,-8(fp)
    379c:	e17fff15 	stw	r5,-4(fp)
    37a0:	e0bffe17 	ldw	r2,-8(fp)
    37a4:	10800058 	cmpnei	r2,r2,1
    37a8:	1000061e 	bne	r2,zero,37c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
    37ac:	e0ffff17 	ldw	r3,-4(fp)
    37b0:	00bfffd4 	movui	r2,65535
    37b4:	1880031e 	bne	r3,r2,37c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>

#include "../inc/config.h"

alt_up_pixel_buffer_dma_dev *pixel_buf_dma_dev;

Cube_3D Cube;
    37b8:	01000074 	movhi	r4,1
    37bc:	211a3c04 	addi	r4,r4,26864
    37c0:	0000bd00 	call	bd0 <_ZN7Cube_3DC1Ev>
        display_fps(fps);

        alt_timestamp_start();

    }
}
    37c4:	0001883a 	nop
    37c8:	e037883a 	mov	sp,fp
    37cc:	dfc00117 	ldw	ra,4(sp)
    37d0:	df000017 	ldw	fp,0(sp)
    37d4:	dec00204 	addi	sp,sp,8
    37d8:	f800283a 	ret

000037dc <_GLOBAL__sub_I_pixel_buf_dma_dev>:
    37dc:	defffe04 	addi	sp,sp,-8
    37e0:	dfc00115 	stw	ra,4(sp)
    37e4:	df000015 	stw	fp,0(sp)
    37e8:	d839883a 	mov	fp,sp
    37ec:	017fffd4 	movui	r5,65535
    37f0:	01000044 	movi	r4,1
    37f4:	00037880 	call	3788 <_Z41__static_initialization_and_destruction_0ii>
    37f8:	e037883a 	mov	sp,fp
    37fc:	dfc00117 	ldw	ra,4(sp)
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00204 	addi	sp,sp,8
    3808:	f800283a 	ret

0000380c <_ZN7Cube_3D19calculate_renderingEv>:

        //funzione per calcolo trasformazioni controllate dall'accelerometro
        void update_acc_trsformation();
        
        //una funzione inline pare non possa avere prototipo e definizione su file diversi, quindi la definisco qui
        inline void calculate_rendering(){
    380c:	defffd04 	addi	sp,sp,-12
    3810:	dfc00215 	stw	ra,8(sp)
    3814:	df000115 	stw	fp,4(sp)
    3818:	df000104 	addi	fp,sp,4
    381c:	e13fff15 	stw	r4,-4(fp)
            Matrix4x4MultiplyBy4x4(projection_matrix, translation_matrix, proj_trasl);
    3820:	e0bfff17 	ldw	r2,-4(fp)
    3824:	10d4ee04 	addi	r3,r2,21432
    3828:	e0bfff17 	ldw	r2,-4(fp)
    382c:	11150e04 	addi	r4,r2,21560
    3830:	e0bfff17 	ldw	r2,-4(fp)
    3834:	10952e04 	addi	r2,r2,21688
    3838:	100f883a 	mov	r7,r2
    383c:	200d883a 	mov	r6,r4
    3840:	180b883a 	mov	r5,r3
    3844:	e13fff17 	ldw	r4,-4(fp)
    3848:	00026180 	call	2618 <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            Matrix4x4MultiplyBy4x4(proj_trasl, rotation_matrix, proj_trasl_rot);
    384c:	e0bfff17 	ldw	r2,-4(fp)
    3850:	10d52e04 	addi	r3,r2,21688
    3854:	e0bfff17 	ldw	r2,-4(fp)
    3858:	1114fe04 	addi	r4,r2,21496
    385c:	e0bfff17 	ldw	r2,-4(fp)
    3860:	10953e04 	addi	r2,r2,21752
    3864:	100f883a 	mov	r7,r2
    3868:	200d883a 	mov	r6,r4
    386c:	180b883a 	mov	r5,r3
    3870:	e13fff17 	ldw	r4,-4(fp)
    3874:	00026180 	call	2618 <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            Matrix4x4MultiplyBy4x4(proj_trasl_rot, scaling_matrix, complete_matrix);
    3878:	e0bfff17 	ldw	r2,-4(fp)
    387c:	10d53e04 	addi	r3,r2,21752
    3880:	e0bfff17 	ldw	r2,-4(fp)
    3884:	11151e04 	addi	r4,r2,21624
    3888:	e0bfff17 	ldw	r2,-4(fp)
    388c:	10954e04 	addi	r2,r2,21816
    3890:	100f883a 	mov	r7,r2
    3894:	200d883a 	mov	r6,r4
    3898:	180b883a 	mov	r5,r3
    389c:	e13fff17 	ldw	r4,-4(fp)
    38a0:	00026180 	call	2618 <_ZN7Cube_3D22Matrix4x4MultiplyBy4x4EPfS0_S0_>
            vector_matrix_multiply();
    38a4:	e13fff17 	ldw	r4,-4(fp)
    38a8:	0001fe40 	call	1fe4 <_ZN7Cube_3D22vector_matrix_multiplyEv>
            //from_3D_to_2D();
        }
    38ac:	0001883a 	nop
    38b0:	e037883a 	mov	sp,fp
    38b4:	dfc00117 	ldw	ra,4(sp)
    38b8:	df000017 	ldw	fp,0(sp)
    38bc:	dec00204 	addi	sp,sp,8
    38c0:	f800283a 	ret

000038c4 <cos>:
    38c4:	00a00034 	movhi	r2,32768
    38c8:	defffa04 	addi	sp,sp,-24
    38cc:	10bfffc4 	addi	r2,r2,-1
    38d0:	00cffa74 	movhi	r3,16361
    38d4:	dfc00515 	stw	ra,20(sp)
    38d8:	2884703a 	and	r2,r5,r2
    38dc:	18c87ec4 	addi	r3,r3,8699
    38e0:	1880180e 	bge	r3,r2,3944 <cos+0x80>
    38e4:	00dffc34 	movhi	r3,32752
    38e8:	18ffffc4 	addi	r3,r3,-1
    38ec:	1880060e 	bge	r3,r2,3908 <cos+0x44>
    38f0:	280f883a 	mov	r7,r5
    38f4:	200d883a 	mov	r6,r4
    38f8:	00092000 	call	9200 <__subdf3>
    38fc:	dfc00517 	ldw	ra,20(sp)
    3900:	dec00604 	addi	sp,sp,24
    3904:	f800283a 	ret
    3908:	d9800104 	addi	r6,sp,4
    390c:	0003b400 	call	3b40 <__ieee754_rem_pio2>
    3910:	108000cc 	andi	r2,r2,3
    3914:	00c00044 	movi	r3,1
    3918:	10c01726 	beq	r2,r3,3978 <cos+0xb4>
    391c:	01000084 	movi	r4,2
    3920:	11000e26 	beq	r2,r4,395c <cos+0x98>
    3924:	10001c26 	beq	r2,zero,3998 <cos+0xd4>
    3928:	d9800317 	ldw	r6,12(sp)
    392c:	d9c00417 	ldw	r7,16(sp)
    3930:	d9000117 	ldw	r4,4(sp)
    3934:	d9400217 	ldw	r5,8(sp)
    3938:	d8c00015 	stw	r3,0(sp)
    393c:	00054e00 	call	54e0 <__kernel_sin>
    3940:	003fee06 	br	38fc <__ram_exceptions_end+0xfb0022b4>
    3944:	000d883a 	mov	r6,zero
    3948:	000f883a 	mov	r7,zero
    394c:	00042ac0 	call	42ac <__kernel_cos>
    3950:	dfc00517 	ldw	ra,20(sp)
    3954:	dec00604 	addi	sp,sp,24
    3958:	f800283a 	ret
    395c:	d9800317 	ldw	r6,12(sp)
    3960:	d9c00417 	ldw	r7,16(sp)
    3964:	d9000117 	ldw	r4,4(sp)
    3968:	d9400217 	ldw	r5,8(sp)
    396c:	00042ac0 	call	42ac <__kernel_cos>
    3970:	18e0003c 	xorhi	r3,r3,32768
    3974:	003fe106 	br	38fc <__ram_exceptions_end+0xfb0022b4>
    3978:	d9800317 	ldw	r6,12(sp)
    397c:	d9c00417 	ldw	r7,16(sp)
    3980:	d9000117 	ldw	r4,4(sp)
    3984:	d9400217 	ldw	r5,8(sp)
    3988:	d8800015 	stw	r2,0(sp)
    398c:	00054e00 	call	54e0 <__kernel_sin>
    3990:	18e0003c 	xorhi	r3,r3,32768
    3994:	003fd906 	br	38fc <__ram_exceptions_end+0xfb0022b4>
    3998:	d9800317 	ldw	r6,12(sp)
    399c:	d9c00417 	ldw	r7,16(sp)
    39a0:	d9000117 	ldw	r4,4(sp)
    39a4:	d9400217 	ldw	r5,8(sp)
    39a8:	00042ac0 	call	42ac <__kernel_cos>
    39ac:	003fd306 	br	38fc <__ram_exceptions_end+0xfb0022b4>

000039b0 <sin>:
    39b0:	00a00034 	movhi	r2,32768
    39b4:	defffa04 	addi	sp,sp,-24
    39b8:	10bfffc4 	addi	r2,r2,-1
    39bc:	00cffa74 	movhi	r3,16361
    39c0:	dfc00515 	stw	ra,20(sp)
    39c4:	2884703a 	and	r2,r5,r2
    39c8:	18c87ec4 	addi	r3,r3,8699
    39cc:	1880180e 	bge	r3,r2,3a30 <sin+0x80>
    39d0:	00dffc34 	movhi	r3,32752
    39d4:	18ffffc4 	addi	r3,r3,-1
    39d8:	1880060e 	bge	r3,r2,39f4 <sin+0x44>
    39dc:	280f883a 	mov	r7,r5
    39e0:	200d883a 	mov	r6,r4
    39e4:	00092000 	call	9200 <__subdf3>
    39e8:	dfc00517 	ldw	ra,20(sp)
    39ec:	dec00604 	addi	sp,sp,24
    39f0:	f800283a 	ret
    39f4:	d9800104 	addi	r6,sp,4
    39f8:	0003b400 	call	3b40 <__ieee754_rem_pio2>
    39fc:	108000cc 	andi	r2,r2,3
    3a00:	00c00044 	movi	r3,1
    3a04:	10c01926 	beq	r2,r3,3a6c <sin+0xbc>
    3a08:	01000084 	movi	r4,2
    3a0c:	11000f26 	beq	r2,r4,3a4c <sin+0x9c>
    3a10:	10001c26 	beq	r2,zero,3a84 <sin+0xd4>
    3a14:	d9800317 	ldw	r6,12(sp)
    3a18:	d9c00417 	ldw	r7,16(sp)
    3a1c:	d9000117 	ldw	r4,4(sp)
    3a20:	d9400217 	ldw	r5,8(sp)
    3a24:	00042ac0 	call	42ac <__kernel_cos>
    3a28:	18e0003c 	xorhi	r3,r3,32768
    3a2c:	003fee06 	br	39e8 <__ram_exceptions_end+0xfb0023a0>
    3a30:	d8000015 	stw	zero,0(sp)
    3a34:	000d883a 	mov	r6,zero
    3a38:	000f883a 	mov	r7,zero
    3a3c:	00054e00 	call	54e0 <__kernel_sin>
    3a40:	dfc00517 	ldw	ra,20(sp)
    3a44:	dec00604 	addi	sp,sp,24
    3a48:	f800283a 	ret
    3a4c:	d9800317 	ldw	r6,12(sp)
    3a50:	d9c00417 	ldw	r7,16(sp)
    3a54:	d9000117 	ldw	r4,4(sp)
    3a58:	d9400217 	ldw	r5,8(sp)
    3a5c:	d8c00015 	stw	r3,0(sp)
    3a60:	00054e00 	call	54e0 <__kernel_sin>
    3a64:	18e0003c 	xorhi	r3,r3,32768
    3a68:	003fdf06 	br	39e8 <__ram_exceptions_end+0xfb0023a0>
    3a6c:	d9800317 	ldw	r6,12(sp)
    3a70:	d9c00417 	ldw	r7,16(sp)
    3a74:	d9000117 	ldw	r4,4(sp)
    3a78:	d9400217 	ldw	r5,8(sp)
    3a7c:	00042ac0 	call	42ac <__kernel_cos>
    3a80:	003fd906 	br	39e8 <__ram_exceptions_end+0xfb0023a0>
    3a84:	d9800317 	ldw	r6,12(sp)
    3a88:	d9c00417 	ldw	r7,16(sp)
    3a8c:	d9000117 	ldw	r4,4(sp)
    3a90:	d9400217 	ldw	r5,8(sp)
    3a94:	d8c00015 	stw	r3,0(sp)
    3a98:	00054e00 	call	54e0 <__kernel_sin>
    3a9c:	003fd206 	br	39e8 <__ram_exceptions_end+0xfb0023a0>

00003aa0 <tan>:
    3aa0:	00a00034 	movhi	r2,32768
    3aa4:	defffa04 	addi	sp,sp,-24
    3aa8:	10bfffc4 	addi	r2,r2,-1
    3aac:	00cffa74 	movhi	r3,16361
    3ab0:	dfc00515 	stw	ra,20(sp)
    3ab4:	2884703a 	and	r2,r5,r2
    3ab8:	18c87ec4 	addi	r3,r3,8699
    3abc:	1880180e 	bge	r3,r2,3b20 <tan+0x80>
    3ac0:	00dffc34 	movhi	r3,32752
    3ac4:	18ffffc4 	addi	r3,r3,-1
    3ac8:	1880060e 	bge	r3,r2,3ae4 <tan+0x44>
    3acc:	280f883a 	mov	r7,r5
    3ad0:	200d883a 	mov	r6,r4
    3ad4:	00092000 	call	9200 <__subdf3>
    3ad8:	dfc00517 	ldw	ra,20(sp)
    3adc:	dec00604 	addi	sp,sp,24
    3ae0:	f800283a 	ret
    3ae4:	d9800104 	addi	r6,sp,4
    3ae8:	0003b400 	call	3b40 <__ieee754_rem_pio2>
    3aec:	1080004c 	andi	r2,r2,1
    3af0:	00c00044 	movi	r3,1
    3af4:	d9800317 	ldw	r6,12(sp)
    3af8:	d9c00417 	ldw	r7,16(sp)
    3afc:	d9000117 	ldw	r4,4(sp)
    3b00:	d9400217 	ldw	r5,8(sp)
    3b04:	1085883a 	add	r2,r2,r2
    3b08:	1885c83a 	sub	r2,r3,r2
    3b0c:	d8800015 	stw	r2,0(sp)
    3b10:	00057ac0 	call	57ac <__kernel_tan>
    3b14:	dfc00517 	ldw	ra,20(sp)
    3b18:	dec00604 	addi	sp,sp,24
    3b1c:	f800283a 	ret
    3b20:	00800044 	movi	r2,1
    3b24:	d8800015 	stw	r2,0(sp)
    3b28:	000d883a 	mov	r6,zero
    3b2c:	000f883a 	mov	r7,zero
    3b30:	00057ac0 	call	57ac <__kernel_tan>
    3b34:	dfc00517 	ldw	ra,20(sp)
    3b38:	dec00604 	addi	sp,sp,24
    3b3c:	f800283a 	ret

00003b40 <__ieee754_rem_pio2>:
    3b40:	02200034 	movhi	r8,32768
    3b44:	deffea04 	addi	sp,sp,-88
    3b48:	423fffc4 	addi	r8,r8,-1
    3b4c:	00cffa74 	movhi	r3,16361
    3b50:	ddc01315 	stw	r23,76(sp)
    3b54:	dc400d15 	stw	r17,52(sp)
    3b58:	dfc01515 	stw	ra,84(sp)
    3b5c:	df001415 	stw	fp,80(sp)
    3b60:	dd801215 	stw	r22,72(sp)
    3b64:	dd401115 	stw	r21,68(sp)
    3b68:	dd001015 	stw	r20,64(sp)
    3b6c:	dcc00f15 	stw	r19,60(sp)
    3b70:	dc800e15 	stw	r18,56(sp)
    3b74:	dc000c15 	stw	r16,48(sp)
    3b78:	2a2e703a 	and	r23,r5,r8
    3b7c:	18c87ec4 	addi	r3,r3,8699
    3b80:	2823883a 	mov	r17,r5
    3b84:	1dc0790e 	bge	r3,r23,3d6c <__ieee754_rem_pio2+0x22c>
    3b88:	009000f4 	movhi	r2,16387
    3b8c:	10b65ec4 	addi	r2,r2,-9861
    3b90:	3021883a 	mov	r16,r6
    3b94:	2027883a 	mov	r19,r4
    3b98:	15c02316 	blt	r2,r23,3c28 <__ieee754_rem_pio2+0xe8>
    3b9c:	01cffe74 	movhi	r7,16377
    3ba0:	39c87ec4 	addi	r7,r7,8699
    3ba4:	01951034 	movhi	r6,21568
    3ba8:	01417a0e 	bge	zero,r5,4194 <__ieee754_rem_pio2+0x654>
    3bac:	00092000 	call	9200 <__subdf3>
    3bb0:	1025883a 	mov	r18,r2
    3bb4:	008ffe74 	movhi	r2,16377
    3bb8:	10887ec4 	addi	r2,r2,8699
    3bbc:	1823883a 	mov	r17,r3
    3bc0:	b8808426 	beq	r23,r2,3dd4 <__ieee754_rem_pio2+0x294>
    3bc4:	018698b4 	movhi	r6,6754
    3bc8:	01cf7474 	movhi	r7,15825
    3bcc:	3198cc44 	addi	r6,r6,25393
    3bd0:	39ed1844 	addi	r7,r7,-19359
    3bd4:	9009883a 	mov	r4,r18
    3bd8:	180b883a 	mov	r5,r3
    3bdc:	00092000 	call	9200 <__subdf3>
    3be0:	100d883a 	mov	r6,r2
    3be4:	180f883a 	mov	r7,r3
    3be8:	9009883a 	mov	r4,r18
    3bec:	880b883a 	mov	r5,r17
    3bf0:	80800015 	stw	r2,0(r16)
    3bf4:	80c00115 	stw	r3,4(r16)
    3bf8:	00092000 	call	9200 <__subdf3>
    3bfc:	018698b4 	movhi	r6,6754
    3c00:	01cf7474 	movhi	r7,15825
    3c04:	3198cc44 	addi	r6,r6,25393
    3c08:	39ed1844 	addi	r7,r7,-19359
    3c0c:	1009883a 	mov	r4,r2
    3c10:	180b883a 	mov	r5,r3
    3c14:	00092000 	call	9200 <__subdf3>
    3c18:	80800215 	stw	r2,8(r16)
    3c1c:	80c00315 	stw	r3,12(r16)
    3c20:	00800044 	movi	r2,1
    3c24:	00005606 	br	3d80 <__ieee754_rem_pio2+0x240>
    3c28:	00904e74 	movhi	r2,16697
    3c2c:	10887ec4 	addi	r2,r2,8699
    3c30:	15c0830e 	bge	r2,r23,3e40 <__ieee754_rem_pio2+0x300>
    3c34:	009ffc34 	movhi	r2,32752
    3c38:	10bfffc4 	addi	r2,r2,-1
    3c3c:	15c05c16 	blt	r2,r23,3db0 <__ieee754_rem_pio2+0x270>
    3c40:	b829d53a 	srai	r20,r23,20
    3c44:	a53efa84 	addi	r20,r20,-1046
    3c48:	a024953a 	slli	r18,r20,20
    3c4c:	bca5c83a 	sub	r18,r23,r18
    3c50:	900b883a 	mov	r5,r18
    3c54:	0009afc0 	call	9afc <__fixdfsi>
    3c58:	1009883a 	mov	r4,r2
    3c5c:	0009b7c0 	call	9b7c <__floatsidf>
    3c60:	9809883a 	mov	r4,r19
    3c64:	900b883a 	mov	r5,r18
    3c68:	100d883a 	mov	r6,r2
    3c6c:	180f883a 	mov	r7,r3
    3c70:	d8800215 	stw	r2,8(sp)
    3c74:	d8c00315 	stw	r3,12(sp)
    3c78:	00092000 	call	9200 <__subdf3>
    3c7c:	000d883a 	mov	r6,zero
    3c80:	01d05c34 	movhi	r7,16752
    3c84:	1009883a 	mov	r4,r2
    3c88:	180b883a 	mov	r5,r3
    3c8c:	0008ae80 	call	8ae8 <__muldf3>
    3c90:	180b883a 	mov	r5,r3
    3c94:	1009883a 	mov	r4,r2
    3c98:	182b883a 	mov	r21,r3
    3c9c:	102d883a 	mov	r22,r2
    3ca0:	0009afc0 	call	9afc <__fixdfsi>
    3ca4:	1009883a 	mov	r4,r2
    3ca8:	0009b7c0 	call	9b7c <__floatsidf>
    3cac:	100d883a 	mov	r6,r2
    3cb0:	180f883a 	mov	r7,r3
    3cb4:	b009883a 	mov	r4,r22
    3cb8:	a80b883a 	mov	r5,r21
    3cbc:	1027883a 	mov	r19,r2
    3cc0:	1825883a 	mov	r18,r3
    3cc4:	d8800415 	stw	r2,16(sp)
    3cc8:	d8c00515 	stw	r3,20(sp)
    3ccc:	00092000 	call	9200 <__subdf3>
    3cd0:	000d883a 	mov	r6,zero
    3cd4:	01d05c34 	movhi	r7,16752
    3cd8:	1009883a 	mov	r4,r2
    3cdc:	180b883a 	mov	r5,r3
    3ce0:	0008ae80 	call	8ae8 <__muldf3>
    3ce4:	000d883a 	mov	r6,zero
    3ce8:	000f883a 	mov	r7,zero
    3cec:	1009883a 	mov	r4,r2
    3cf0:	180b883a 	mov	r5,r3
    3cf4:	d8800615 	stw	r2,24(sp)
    3cf8:	d8c00715 	stw	r3,28(sp)
    3cfc:	00089840 	call	8984 <__eqdf2>
    3d00:	1001431e 	bne	r2,zero,4210 <__ieee754_rem_pio2+0x6d0>
    3d04:	000f883a 	mov	r7,zero
    3d08:	000d883a 	mov	r6,zero
    3d0c:	9809883a 	mov	r4,r19
    3d10:	900b883a 	mov	r5,r18
    3d14:	00089840 	call	8984 <__eqdf2>
    3d18:	100f003a 	cmpeq	r7,r2,zero
    3d1c:	00800084 	movi	r2,2
    3d20:	11cfc83a 	sub	r7,r2,r7
    3d24:	00800084 	movi	r2,2
    3d28:	d8800015 	stw	r2,0(sp)
    3d2c:	00800074 	movhi	r2,1
    3d30:	108bd004 	addi	r2,r2,12096
    3d34:	d8800115 	stw	r2,4(sp)
    3d38:	a00d883a 	mov	r6,r20
    3d3c:	800b883a 	mov	r5,r16
    3d40:	d9000204 	addi	r4,sp,8
    3d44:	00047500 	call	4750 <__kernel_rem_pio2>
    3d48:	88000d0e 	bge	r17,zero,3d80 <__ieee754_rem_pio2+0x240>
    3d4c:	81000117 	ldw	r4,4(r16)
    3d50:	80c00317 	ldw	r3,12(r16)
    3d54:	0085c83a 	sub	r2,zero,r2
    3d58:	2120003c 	xorhi	r4,r4,32768
    3d5c:	18e0003c 	xorhi	r3,r3,32768
    3d60:	81000115 	stw	r4,4(r16)
    3d64:	80c00315 	stw	r3,12(r16)
    3d68:	00000506 	br	3d80 <__ieee754_rem_pio2+0x240>
    3d6c:	31000015 	stw	r4,0(r6)
    3d70:	31400115 	stw	r5,4(r6)
    3d74:	30000215 	stw	zero,8(r6)
    3d78:	30000315 	stw	zero,12(r6)
    3d7c:	0005883a 	mov	r2,zero
    3d80:	dfc01517 	ldw	ra,84(sp)
    3d84:	df001417 	ldw	fp,80(sp)
    3d88:	ddc01317 	ldw	r23,76(sp)
    3d8c:	dd801217 	ldw	r22,72(sp)
    3d90:	dd401117 	ldw	r21,68(sp)
    3d94:	dd001017 	ldw	r20,64(sp)
    3d98:	dcc00f17 	ldw	r19,60(sp)
    3d9c:	dc800e17 	ldw	r18,56(sp)
    3da0:	dc400d17 	ldw	r17,52(sp)
    3da4:	dc000c17 	ldw	r16,48(sp)
    3da8:	dec01604 	addi	sp,sp,88
    3dac:	f800283a 	ret
    3db0:	200d883a 	mov	r6,r4
    3db4:	280f883a 	mov	r7,r5
    3db8:	00092000 	call	9200 <__subdf3>
    3dbc:	80800215 	stw	r2,8(r16)
    3dc0:	80800015 	stw	r2,0(r16)
    3dc4:	80c00315 	stw	r3,12(r16)
    3dc8:	80c00115 	stw	r3,4(r16)
    3dcc:	0005883a 	mov	r2,zero
    3dd0:	003feb06 	br	3d80 <__ram_exceptions_end+0xfb002738>
    3dd4:	01cf7474 	movhi	r7,15825
    3dd8:	9009883a 	mov	r4,r18
    3ddc:	39ed1844 	addi	r7,r7,-19359
    3de0:	01869834 	movhi	r6,6752
    3de4:	180b883a 	mov	r5,r3
    3de8:	00092000 	call	9200 <__subdf3>
    3dec:	018b80f4 	movhi	r6,11779
    3df0:	01cee8f4 	movhi	r7,15267
    3df4:	319c1cc4 	addi	r6,r6,28787
    3df8:	39c66284 	addi	r7,r7,6538
    3dfc:	1009883a 	mov	r4,r2
    3e00:	180b883a 	mov	r5,r3
    3e04:	1025883a 	mov	r18,r2
    3e08:	1823883a 	mov	r17,r3
    3e0c:	00092000 	call	9200 <__subdf3>
    3e10:	100d883a 	mov	r6,r2
    3e14:	180f883a 	mov	r7,r3
    3e18:	9009883a 	mov	r4,r18
    3e1c:	880b883a 	mov	r5,r17
    3e20:	80800015 	stw	r2,0(r16)
    3e24:	80c00115 	stw	r3,4(r16)
    3e28:	00092000 	call	9200 <__subdf3>
    3e2c:	018b80f4 	movhi	r6,11779
    3e30:	01cee8f4 	movhi	r7,15267
    3e34:	319c1cc4 	addi	r6,r6,28787
    3e38:	39c66284 	addi	r7,r7,6538
    3e3c:	003f7306 	br	3c0c <__ram_exceptions_end+0xfb0025c4>
    3e40:	0005e180 	call	5e18 <fabs>
    3e44:	019b72b4 	movhi	r6,28106
    3e48:	01cff934 	movhi	r7,16356
    3e4c:	31b220c4 	addi	r6,r6,-14205
    3e50:	39d7cc04 	addi	r7,r7,24368
    3e54:	1009883a 	mov	r4,r2
    3e58:	180b883a 	mov	r5,r3
    3e5c:	102d883a 	mov	r22,r2
    3e60:	182b883a 	mov	r21,r3
    3e64:	0008ae80 	call	8ae8 <__muldf3>
    3e68:	000d883a 	mov	r6,zero
    3e6c:	01cff834 	movhi	r7,16352
    3e70:	1009883a 	mov	r4,r2
    3e74:	180b883a 	mov	r5,r3
    3e78:	00077f00 	call	77f0 <__adddf3>
    3e7c:	180b883a 	mov	r5,r3
    3e80:	1009883a 	mov	r4,r2
    3e84:	0009afc0 	call	9afc <__fixdfsi>
    3e88:	1009883a 	mov	r4,r2
    3e8c:	1025883a 	mov	r18,r2
    3e90:	0009b7c0 	call	9b7c <__floatsidf>
    3e94:	01cffe74 	movhi	r7,16377
    3e98:	39c87ec4 	addi	r7,r7,8699
    3e9c:	01951034 	movhi	r6,21568
    3ea0:	1009883a 	mov	r4,r2
    3ea4:	180b883a 	mov	r5,r3
    3ea8:	1029883a 	mov	r20,r2
    3eac:	1827883a 	mov	r19,r3
    3eb0:	0008ae80 	call	8ae8 <__muldf3>
    3eb4:	b009883a 	mov	r4,r22
    3eb8:	a80b883a 	mov	r5,r21
    3ebc:	100d883a 	mov	r6,r2
    3ec0:	180f883a 	mov	r7,r3
    3ec4:	00092000 	call	9200 <__subdf3>
    3ec8:	018698b4 	movhi	r6,6754
    3ecc:	01cf7474 	movhi	r7,15825
    3ed0:	a009883a 	mov	r4,r20
    3ed4:	3198cc44 	addi	r6,r6,25393
    3ed8:	39ed1844 	addi	r7,r7,-19359
    3edc:	980b883a 	mov	r5,r19
    3ee0:	1039883a 	mov	fp,r2
    3ee4:	d8c00815 	stw	r3,32(sp)
    3ee8:	0008ae80 	call	8ae8 <__muldf3>
    3eec:	010007c4 	movi	r4,31
    3ef0:	e017883a 	mov	r11,fp
    3ef4:	da800817 	ldw	r10,32(sp)
    3ef8:	102d883a 	mov	r22,r2
    3efc:	182b883a 	mov	r21,r3
    3f00:	24802816 	blt	r4,r18,3fa4 <__ieee754_rem_pio2+0x464>
    3f04:	913fffc4 	addi	r4,r18,-1
    3f08:	2109883a 	add	r4,r4,r4
    3f0c:	01400074 	movhi	r5,1
    3f10:	2109883a 	add	r4,r4,r4
    3f14:	294bb004 	addi	r5,r5,11968
    3f18:	2909883a 	add	r4,r5,r4
    3f1c:	21000017 	ldw	r4,0(r4)
    3f20:	b9002026 	beq	r23,r4,3fa4 <__ieee754_rem_pio2+0x464>
    3f24:	100d883a 	mov	r6,r2
    3f28:	180f883a 	mov	r7,r3
    3f2c:	e009883a 	mov	r4,fp
    3f30:	500b883a 	mov	r5,r10
    3f34:	da800b15 	stw	r10,44(sp)
    3f38:	df000a15 	stw	fp,40(sp)
    3f3c:	00092000 	call	9200 <__subdf3>
    3f40:	da800b17 	ldw	r10,44(sp)
    3f44:	dac00a17 	ldw	r11,40(sp)
    3f48:	1019883a 	mov	r12,r2
    3f4c:	1813883a 	mov	r9,r3
    3f50:	80800015 	stw	r2,0(r16)
    3f54:	80c00115 	stw	r3,4(r16)
    3f58:	600d883a 	mov	r6,r12
    3f5c:	480f883a 	mov	r7,r9
    3f60:	5809883a 	mov	r4,r11
    3f64:	500b883a 	mov	r5,r10
    3f68:	da400b15 	stw	r9,44(sp)
    3f6c:	db000a15 	stw	r12,40(sp)
    3f70:	00092000 	call	9200 <__subdf3>
    3f74:	b00d883a 	mov	r6,r22
    3f78:	a80f883a 	mov	r7,r21
    3f7c:	1009883a 	mov	r4,r2
    3f80:	180b883a 	mov	r5,r3
    3f84:	00092000 	call	9200 <__subdf3>
    3f88:	80800215 	stw	r2,8(r16)
    3f8c:	80c00315 	stw	r3,12(r16)
    3f90:	da400b17 	ldw	r9,44(sp)
    3f94:	db000a17 	ldw	r12,40(sp)
    3f98:	88009f16 	blt	r17,zero,4218 <__ieee754_rem_pio2+0x6d8>
    3f9c:	9005883a 	mov	r2,r18
    3fa0:	003f7706 	br	3d80 <__ram_exceptions_end+0xfb002738>
    3fa4:	d9400817 	ldw	r5,32(sp)
    3fa8:	100d883a 	mov	r6,r2
    3fac:	180f883a 	mov	r7,r3
    3fb0:	e009883a 	mov	r4,fp
    3fb4:	da800b15 	stw	r10,44(sp)
    3fb8:	dac00a15 	stw	r11,40(sp)
    3fbc:	00092000 	call	9200 <__subdf3>
    3fc0:	1019883a 	mov	r12,r2
    3fc4:	1804d53a 	srli	r2,r3,20
    3fc8:	b811d53a 	srai	r8,r23,20
    3fcc:	1813883a 	mov	r9,r3
    3fd0:	1081ffcc 	andi	r2,r2,2047
    3fd4:	80c00115 	stw	r3,4(r16)
    3fd8:	83000015 	stw	r12,0(r16)
    3fdc:	4085c83a 	sub	r2,r8,r2
    3fe0:	00c00404 	movi	r3,16
    3fe4:	da800b17 	ldw	r10,44(sp)
    3fe8:	dac00a17 	ldw	r11,40(sp)
    3fec:	18bfda0e 	bge	r3,r2,3f58 <__ram_exceptions_end+0xfb002910>
    3ff0:	01cf7474 	movhi	r7,15825
    3ff4:	39ed1844 	addi	r7,r7,-19359
    3ff8:	01869834 	movhi	r6,6752
    3ffc:	a009883a 	mov	r4,r20
    4000:	980b883a 	mov	r5,r19
    4004:	da000a15 	stw	r8,40(sp)
    4008:	0008ae80 	call	8ae8 <__muldf3>
    400c:	d9400817 	ldw	r5,32(sp)
    4010:	100d883a 	mov	r6,r2
    4014:	180f883a 	mov	r7,r3
    4018:	e009883a 	mov	r4,fp
    401c:	102d883a 	mov	r22,r2
    4020:	182b883a 	mov	r21,r3
    4024:	00092000 	call	9200 <__subdf3>
    4028:	d9400817 	ldw	r5,32(sp)
    402c:	100d883a 	mov	r6,r2
    4030:	180f883a 	mov	r7,r3
    4034:	e009883a 	mov	r4,fp
    4038:	182f883a 	mov	r23,r3
    403c:	d8800915 	stw	r2,36(sp)
    4040:	00092000 	call	9200 <__subdf3>
    4044:	b00d883a 	mov	r6,r22
    4048:	a80f883a 	mov	r7,r21
    404c:	1009883a 	mov	r4,r2
    4050:	180b883a 	mov	r5,r3
    4054:	00092000 	call	9200 <__subdf3>
    4058:	018b80f4 	movhi	r6,11779
    405c:	01cee8f4 	movhi	r7,15267
    4060:	319c1cc4 	addi	r6,r6,28787
    4064:	39c66284 	addi	r7,r7,6538
    4068:	a009883a 	mov	r4,r20
    406c:	980b883a 	mov	r5,r19
    4070:	102d883a 	mov	r22,r2
    4074:	182b883a 	mov	r21,r3
    4078:	0008ae80 	call	8ae8 <__muldf3>
    407c:	b00d883a 	mov	r6,r22
    4080:	a80f883a 	mov	r7,r21
    4084:	1009883a 	mov	r4,r2
    4088:	180b883a 	mov	r5,r3
    408c:	00092000 	call	9200 <__subdf3>
    4090:	d9000917 	ldw	r4,36(sp)
    4094:	100d883a 	mov	r6,r2
    4098:	180f883a 	mov	r7,r3
    409c:	b80b883a 	mov	r5,r23
    40a0:	102d883a 	mov	r22,r2
    40a4:	182b883a 	mov	r21,r3
    40a8:	00092000 	call	9200 <__subdf3>
    40ac:	1019883a 	mov	r12,r2
    40b0:	1804d53a 	srli	r2,r3,20
    40b4:	da000a17 	ldw	r8,40(sp)
    40b8:	83000015 	stw	r12,0(r16)
    40bc:	1081ffcc 	andi	r2,r2,2047
    40c0:	4091c83a 	sub	r8,r8,r2
    40c4:	80c00115 	stw	r3,4(r16)
    40c8:	00800c44 	movi	r2,49
    40cc:	1813883a 	mov	r9,r3
    40d0:	1200730e 	bge	r2,r8,42a0 <__ieee754_rem_pio2+0x760>
    40d4:	01cee8f4 	movhi	r7,15267
    40d8:	39c66284 	addi	r7,r7,6538
    40dc:	018b8034 	movhi	r6,11776
    40e0:	a009883a 	mov	r4,r20
    40e4:	980b883a 	mov	r5,r19
    40e8:	0008ae80 	call	8ae8 <__muldf3>
    40ec:	d9000917 	ldw	r4,36(sp)
    40f0:	100d883a 	mov	r6,r2
    40f4:	180f883a 	mov	r7,r3
    40f8:	b80b883a 	mov	r5,r23
    40fc:	102d883a 	mov	r22,r2
    4100:	182b883a 	mov	r21,r3
    4104:	00092000 	call	9200 <__subdf3>
    4108:	d9000917 	ldw	r4,36(sp)
    410c:	100d883a 	mov	r6,r2
    4110:	180f883a 	mov	r7,r3
    4114:	b80b883a 	mov	r5,r23
    4118:	d8c00b15 	stw	r3,44(sp)
    411c:	d8800a15 	stw	r2,40(sp)
    4120:	00092000 	call	9200 <__subdf3>
    4124:	b00d883a 	mov	r6,r22
    4128:	a80f883a 	mov	r7,r21
    412c:	1009883a 	mov	r4,r2
    4130:	180b883a 	mov	r5,r3
    4134:	00092000 	call	9200 <__subdf3>
    4138:	01894834 	movhi	r6,9504
    413c:	01ce5f34 	movhi	r7,14716
    4140:	31927044 	addi	r6,r6,18881
    4144:	39e0e684 	addi	r7,r7,-31846
    4148:	a009883a 	mov	r4,r20
    414c:	980b883a 	mov	r5,r19
    4150:	102d883a 	mov	r22,r2
    4154:	182b883a 	mov	r21,r3
    4158:	0008ae80 	call	8ae8 <__muldf3>
    415c:	b00d883a 	mov	r6,r22
    4160:	a80f883a 	mov	r7,r21
    4164:	1009883a 	mov	r4,r2
    4168:	180b883a 	mov	r5,r3
    416c:	00092000 	call	9200 <__subdf3>
    4170:	dac00a17 	ldw	r11,40(sp)
    4174:	da800b17 	ldw	r10,44(sp)
    4178:	102d883a 	mov	r22,r2
    417c:	182b883a 	mov	r21,r3
    4180:	100d883a 	mov	r6,r2
    4184:	180f883a 	mov	r7,r3
    4188:	5809883a 	mov	r4,r11
    418c:	500b883a 	mov	r5,r10
    4190:	003f6a06 	br	3f3c <__ram_exceptions_end+0xfb0028f4>
    4194:	00077f00 	call	77f0 <__adddf3>
    4198:	1025883a 	mov	r18,r2
    419c:	008ffe74 	movhi	r2,16377
    41a0:	10887ec4 	addi	r2,r2,8699
    41a4:	1823883a 	mov	r17,r3
    41a8:	b8802226 	beq	r23,r2,4234 <__ieee754_rem_pio2+0x6f4>
    41ac:	018698b4 	movhi	r6,6754
    41b0:	01cf7474 	movhi	r7,15825
    41b4:	3198cc44 	addi	r6,r6,25393
    41b8:	39ed1844 	addi	r7,r7,-19359
    41bc:	9009883a 	mov	r4,r18
    41c0:	180b883a 	mov	r5,r3
    41c4:	00077f00 	call	77f0 <__adddf3>
    41c8:	100d883a 	mov	r6,r2
    41cc:	180f883a 	mov	r7,r3
    41d0:	9009883a 	mov	r4,r18
    41d4:	880b883a 	mov	r5,r17
    41d8:	80800015 	stw	r2,0(r16)
    41dc:	80c00115 	stw	r3,4(r16)
    41e0:	00092000 	call	9200 <__subdf3>
    41e4:	018698b4 	movhi	r6,6754
    41e8:	01cf7474 	movhi	r7,15825
    41ec:	3198cc44 	addi	r6,r6,25393
    41f0:	39ed1844 	addi	r7,r7,-19359
    41f4:	1009883a 	mov	r4,r2
    41f8:	180b883a 	mov	r5,r3
    41fc:	00077f00 	call	77f0 <__adddf3>
    4200:	80800215 	stw	r2,8(r16)
    4204:	80c00315 	stw	r3,12(r16)
    4208:	00bfffc4 	movi	r2,-1
    420c:	003edc06 	br	3d80 <__ram_exceptions_end+0xfb002738>
    4210:	01c000c4 	movi	r7,3
    4214:	003ec306 	br	3d24 <__ram_exceptions_end+0xfb0026dc>
    4218:	4a60003c 	xorhi	r9,r9,32768
    421c:	18e0003c 	xorhi	r3,r3,32768
    4220:	83000015 	stw	r12,0(r16)
    4224:	82400115 	stw	r9,4(r16)
    4228:	80c00315 	stw	r3,12(r16)
    422c:	0485c83a 	sub	r2,zero,r18
    4230:	003ed306 	br	3d80 <__ram_exceptions_end+0xfb002738>
    4234:	01cf7474 	movhi	r7,15825
    4238:	9009883a 	mov	r4,r18
    423c:	39ed1844 	addi	r7,r7,-19359
    4240:	01869834 	movhi	r6,6752
    4244:	180b883a 	mov	r5,r3
    4248:	00077f00 	call	77f0 <__adddf3>
    424c:	018b80f4 	movhi	r6,11779
    4250:	01cee8f4 	movhi	r7,15267
    4254:	319c1cc4 	addi	r6,r6,28787
    4258:	39c66284 	addi	r7,r7,6538
    425c:	1009883a 	mov	r4,r2
    4260:	180b883a 	mov	r5,r3
    4264:	1025883a 	mov	r18,r2
    4268:	1823883a 	mov	r17,r3
    426c:	00077f00 	call	77f0 <__adddf3>
    4270:	100d883a 	mov	r6,r2
    4274:	180f883a 	mov	r7,r3
    4278:	9009883a 	mov	r4,r18
    427c:	880b883a 	mov	r5,r17
    4280:	80800015 	stw	r2,0(r16)
    4284:	80c00115 	stw	r3,4(r16)
    4288:	00092000 	call	9200 <__subdf3>
    428c:	018b80f4 	movhi	r6,11779
    4290:	01cee8f4 	movhi	r7,15267
    4294:	319c1cc4 	addi	r6,r6,28787
    4298:	39c66284 	addi	r7,r7,6538
    429c:	003fd506 	br	41f4 <__ram_exceptions_end+0xfb002bac>
    42a0:	dac00917 	ldw	r11,36(sp)
    42a4:	b815883a 	mov	r10,r23
    42a8:	003f2b06 	br	3f58 <__ram_exceptions_end+0xfb002910>

000042ac <__kernel_cos>:
    42ac:	defff304 	addi	sp,sp,-52
    42b0:	dc000315 	stw	r16,12(sp)
    42b4:	04200034 	movhi	r16,32768
    42b8:	843fffc4 	addi	r16,r16,-1
    42bc:	008f9034 	movhi	r2,15936
    42c0:	df000b15 	stw	fp,44(sp)
    42c4:	ddc00a15 	stw	r23,40(sp)
    42c8:	dd800915 	stw	r22,36(sp)
    42cc:	dcc00615 	stw	r19,24(sp)
    42d0:	dfc00c15 	stw	ra,48(sp)
    42d4:	dd400815 	stw	r21,32(sp)
    42d8:	dd000715 	stw	r20,28(sp)
    42dc:	dc800515 	stw	r18,20(sp)
    42e0:	dc400415 	stw	r17,16(sp)
    42e4:	2c20703a 	and	r16,r5,r16
    42e8:	10bfffc4 	addi	r2,r2,-1
    42ec:	2827883a 	mov	r19,r5
    42f0:	202d883a 	mov	r22,r4
    42f4:	302f883a 	mov	r23,r6
    42f8:	3839883a 	mov	fp,r7
    42fc:	14007516 	blt	r2,r16,44d4 <__kernel_cos+0x228>
    4300:	0009afc0 	call	9afc <__fixdfsi>
    4304:	10010f26 	beq	r2,zero,4744 <__kernel_cos+0x498>
    4308:	b00d883a 	mov	r6,r22
    430c:	980f883a 	mov	r7,r19
    4310:	b009883a 	mov	r4,r22
    4314:	980b883a 	mov	r5,r19
    4318:	0008ae80 	call	8ae8 <__muldf3>
    431c:	01afa234 	movhi	r6,48776
    4320:	01ef6a74 	movhi	r7,48553
    4324:	318e3504 	addi	r6,r6,14548
    4328:	39feba44 	addi	r7,r7,-1303
    432c:	1009883a 	mov	r4,r2
    4330:	180b883a 	mov	r5,r3
    4334:	102b883a 	mov	r21,r2
    4338:	1829883a 	mov	r20,r3
    433c:	0008ae80 	call	8ae8 <__muldf3>
    4340:	01af6d74 	movhi	r6,48565
    4344:	01cf88b4 	movhi	r7,15906
    4348:	31ac7104 	addi	r6,r6,-20028
    434c:	39fba784 	addi	r7,r7,-4450
    4350:	1009883a 	mov	r4,r2
    4354:	180b883a 	mov	r5,r3
    4358:	00077f00 	call	77f0 <__adddf3>
    435c:	a80d883a 	mov	r6,r21
    4360:	a00f883a 	mov	r7,r20
    4364:	1009883a 	mov	r4,r2
    4368:	180b883a 	mov	r5,r3
    436c:	0008ae80 	call	8ae8 <__muldf3>
    4370:	01a02734 	movhi	r6,32924
    4374:	01cfa4b4 	movhi	r7,16018
    4378:	3194ab44 	addi	r6,r6,21165
    437c:	39df93c4 	addi	r7,r7,32335
    4380:	1009883a 	mov	r4,r2
    4384:	180b883a 	mov	r5,r3
    4388:	00092000 	call	9200 <__subdf3>
    438c:	a80d883a 	mov	r6,r21
    4390:	a00f883a 	mov	r7,r20
    4394:	1009883a 	mov	r4,r2
    4398:	180b883a 	mov	r5,r3
    439c:	0008ae80 	call	8ae8 <__muldf3>
    43a0:	018672f4 	movhi	r6,6603
    43a4:	01cfbeb4 	movhi	r7,16122
    43a8:	31856404 	addi	r6,r6,5520
    43ac:	39c06804 	addi	r7,r7,416
    43b0:	1009883a 	mov	r4,r2
    43b4:	180b883a 	mov	r5,r3
    43b8:	00077f00 	call	77f0 <__adddf3>
    43bc:	a80d883a 	mov	r6,r21
    43c0:	a00f883a 	mov	r7,r20
    43c4:	1009883a 	mov	r4,r2
    43c8:	180b883a 	mov	r5,r3
    43cc:	0008ae80 	call	8ae8 <__muldf3>
    43d0:	0185b074 	movhi	r6,5825
    43d4:	01cfd5f4 	movhi	r7,16215
    43d8:	31945dc4 	addi	r6,r6,20855
    43dc:	39f05b04 	addi	r7,r7,-16020
    43e0:	1009883a 	mov	r4,r2
    43e4:	180b883a 	mov	r5,r3
    43e8:	00092000 	call	9200 <__subdf3>
    43ec:	a80d883a 	mov	r6,r21
    43f0:	a00f883a 	mov	r7,r20
    43f4:	1009883a 	mov	r4,r2
    43f8:	180b883a 	mov	r5,r3
    43fc:	0008ae80 	call	8ae8 <__muldf3>
    4400:	01955574 	movhi	r6,21845
    4404:	01cfe974 	movhi	r7,16293
    4408:	31955304 	addi	r6,r6,21836
    440c:	39d55544 	addi	r7,r7,21845
    4410:	1009883a 	mov	r4,r2
    4414:	180b883a 	mov	r5,r3
    4418:	00077f00 	call	77f0 <__adddf3>
    441c:	a80d883a 	mov	r6,r21
    4420:	a00f883a 	mov	r7,r20
    4424:	1009883a 	mov	r4,r2
    4428:	180b883a 	mov	r5,r3
    442c:	0008ae80 	call	8ae8 <__muldf3>
    4430:	1017883a 	mov	r11,r2
    4434:	1815883a 	mov	r10,r3
    4438:	a809883a 	mov	r4,r21
    443c:	a00b883a 	mov	r5,r20
    4440:	000d883a 	mov	r6,zero
    4444:	01cff834 	movhi	r7,16352
    4448:	da800215 	stw	r10,8(sp)
    444c:	dac00115 	stw	r11,4(sp)
    4450:	0008ae80 	call	8ae8 <__muldf3>
    4454:	dac00117 	ldw	r11,4(sp)
    4458:	da800217 	ldw	r10,8(sp)
    445c:	a809883a 	mov	r4,r21
    4460:	580d883a 	mov	r6,r11
    4464:	500f883a 	mov	r7,r10
    4468:	a00b883a 	mov	r5,r20
    446c:	1023883a 	mov	r17,r2
    4470:	1821883a 	mov	r16,r3
    4474:	0008ae80 	call	8ae8 <__muldf3>
    4478:	b80d883a 	mov	r6,r23
    447c:	e00f883a 	mov	r7,fp
    4480:	b009883a 	mov	r4,r22
    4484:	980b883a 	mov	r5,r19
    4488:	1029883a 	mov	r20,r2
    448c:	1825883a 	mov	r18,r3
    4490:	0008ae80 	call	8ae8 <__muldf3>
    4494:	a009883a 	mov	r4,r20
    4498:	900b883a 	mov	r5,r18
    449c:	100d883a 	mov	r6,r2
    44a0:	180f883a 	mov	r7,r3
    44a4:	00092000 	call	9200 <__subdf3>
    44a8:	8809883a 	mov	r4,r17
    44ac:	800b883a 	mov	r5,r16
    44b0:	100d883a 	mov	r6,r2
    44b4:	180f883a 	mov	r7,r3
    44b8:	00092000 	call	9200 <__subdf3>
    44bc:	100d883a 	mov	r6,r2
    44c0:	180f883a 	mov	r7,r3
    44c4:	0009883a 	mov	r4,zero
    44c8:	014ffc34 	movhi	r5,16368
    44cc:	00092000 	call	9200 <__subdf3>
    44d0:	00008b06 	br	4700 <__kernel_cos+0x454>
    44d4:	200d883a 	mov	r6,r4
    44d8:	280f883a 	mov	r7,r5
    44dc:	0008ae80 	call	8ae8 <__muldf3>
    44e0:	01afa234 	movhi	r6,48776
    44e4:	01ef6a74 	movhi	r7,48553
    44e8:	318e3504 	addi	r6,r6,14548
    44ec:	39feba44 	addi	r7,r7,-1303
    44f0:	1009883a 	mov	r4,r2
    44f4:	180b883a 	mov	r5,r3
    44f8:	1025883a 	mov	r18,r2
    44fc:	1823883a 	mov	r17,r3
    4500:	0008ae80 	call	8ae8 <__muldf3>
    4504:	01af6d74 	movhi	r6,48565
    4508:	01cf88b4 	movhi	r7,15906
    450c:	31ac7104 	addi	r6,r6,-20028
    4510:	39fba784 	addi	r7,r7,-4450
    4514:	1009883a 	mov	r4,r2
    4518:	180b883a 	mov	r5,r3
    451c:	00077f00 	call	77f0 <__adddf3>
    4520:	900d883a 	mov	r6,r18
    4524:	880f883a 	mov	r7,r17
    4528:	1009883a 	mov	r4,r2
    452c:	180b883a 	mov	r5,r3
    4530:	0008ae80 	call	8ae8 <__muldf3>
    4534:	01a02734 	movhi	r6,32924
    4538:	01cfa4b4 	movhi	r7,16018
    453c:	3194ab44 	addi	r6,r6,21165
    4540:	39df93c4 	addi	r7,r7,32335
    4544:	1009883a 	mov	r4,r2
    4548:	180b883a 	mov	r5,r3
    454c:	00092000 	call	9200 <__subdf3>
    4550:	900d883a 	mov	r6,r18
    4554:	880f883a 	mov	r7,r17
    4558:	1009883a 	mov	r4,r2
    455c:	180b883a 	mov	r5,r3
    4560:	0008ae80 	call	8ae8 <__muldf3>
    4564:	018672f4 	movhi	r6,6603
    4568:	01cfbeb4 	movhi	r7,16122
    456c:	31856404 	addi	r6,r6,5520
    4570:	39c06804 	addi	r7,r7,416
    4574:	1009883a 	mov	r4,r2
    4578:	180b883a 	mov	r5,r3
    457c:	00077f00 	call	77f0 <__adddf3>
    4580:	900d883a 	mov	r6,r18
    4584:	880f883a 	mov	r7,r17
    4588:	1009883a 	mov	r4,r2
    458c:	180b883a 	mov	r5,r3
    4590:	0008ae80 	call	8ae8 <__muldf3>
    4594:	0185b074 	movhi	r6,5825
    4598:	01cfd5f4 	movhi	r7,16215
    459c:	31945dc4 	addi	r6,r6,20855
    45a0:	39f05b04 	addi	r7,r7,-16020
    45a4:	1009883a 	mov	r4,r2
    45a8:	180b883a 	mov	r5,r3
    45ac:	00092000 	call	9200 <__subdf3>
    45b0:	900d883a 	mov	r6,r18
    45b4:	880f883a 	mov	r7,r17
    45b8:	1009883a 	mov	r4,r2
    45bc:	180b883a 	mov	r5,r3
    45c0:	0008ae80 	call	8ae8 <__muldf3>
    45c4:	01955574 	movhi	r6,21845
    45c8:	01cfe974 	movhi	r7,16293
    45cc:	31955304 	addi	r6,r6,21836
    45d0:	39d55544 	addi	r7,r7,21845
    45d4:	1009883a 	mov	r4,r2
    45d8:	180b883a 	mov	r5,r3
    45dc:	00077f00 	call	77f0 <__adddf3>
    45e0:	900d883a 	mov	r6,r18
    45e4:	880f883a 	mov	r7,r17
    45e8:	1009883a 	mov	r4,r2
    45ec:	180b883a 	mov	r5,r3
    45f0:	0008ae80 	call	8ae8 <__muldf3>
    45f4:	1013883a 	mov	r9,r2
    45f8:	1017883a 	mov	r11,r2
    45fc:	008ff4f4 	movhi	r2,16339
    4600:	108ccc84 	addi	r2,r2,13106
    4604:	1811883a 	mov	r8,r3
    4608:	902b883a 	mov	r21,r18
    460c:	8829883a 	mov	r20,r17
    4610:	1815883a 	mov	r10,r3
    4614:	143f880e 	bge	r2,r16,4438 <__ram_exceptions_end+0xfb002df0>
    4618:	008ffa74 	movhi	r2,16361
    461c:	14004416 	blt	r2,r16,4730 <__kernel_cos+0x484>
    4620:	00bff834 	movhi	r2,65504
    4624:	80a1883a 	add	r16,r16,r2
    4628:	000d883a 	mov	r6,zero
    462c:	800f883a 	mov	r7,r16
    4630:	0009883a 	mov	r4,zero
    4634:	014ffc34 	movhi	r5,16368
    4638:	da400115 	stw	r9,4(sp)
    463c:	d8c00215 	stw	r3,8(sp)
    4640:	00092000 	call	9200 <__subdf3>
    4644:	da000217 	ldw	r8,8(sp)
    4648:	da400117 	ldw	r9,4(sp)
    464c:	102b883a 	mov	r21,r2
    4650:	d8c00015 	stw	r3,0(sp)
    4654:	9009883a 	mov	r4,r18
    4658:	880b883a 	mov	r5,r17
    465c:	000d883a 	mov	r6,zero
    4660:	01cff834 	movhi	r7,16352
    4664:	da000215 	stw	r8,8(sp)
    4668:	da400115 	stw	r9,4(sp)
    466c:	0008ae80 	call	8ae8 <__muldf3>
    4670:	800f883a 	mov	r7,r16
    4674:	000d883a 	mov	r6,zero
    4678:	1009883a 	mov	r4,r2
    467c:	180b883a 	mov	r5,r3
    4680:	00092000 	call	9200 <__subdf3>
    4684:	da400117 	ldw	r9,4(sp)
    4688:	da000217 	ldw	r8,8(sp)
    468c:	9009883a 	mov	r4,r18
    4690:	480d883a 	mov	r6,r9
    4694:	400f883a 	mov	r7,r8
    4698:	880b883a 	mov	r5,r17
    469c:	1029883a 	mov	r20,r2
    46a0:	1821883a 	mov	r16,r3
    46a4:	0008ae80 	call	8ae8 <__muldf3>
    46a8:	b80d883a 	mov	r6,r23
    46ac:	e00f883a 	mov	r7,fp
    46b0:	b009883a 	mov	r4,r22
    46b4:	980b883a 	mov	r5,r19
    46b8:	1025883a 	mov	r18,r2
    46bc:	1823883a 	mov	r17,r3
    46c0:	0008ae80 	call	8ae8 <__muldf3>
    46c4:	100d883a 	mov	r6,r2
    46c8:	180f883a 	mov	r7,r3
    46cc:	9009883a 	mov	r4,r18
    46d0:	880b883a 	mov	r5,r17
    46d4:	00092000 	call	9200 <__subdf3>
    46d8:	100d883a 	mov	r6,r2
    46dc:	180f883a 	mov	r7,r3
    46e0:	a009883a 	mov	r4,r20
    46e4:	800b883a 	mov	r5,r16
    46e8:	00092000 	call	9200 <__subdf3>
    46ec:	d9400017 	ldw	r5,0(sp)
    46f0:	100d883a 	mov	r6,r2
    46f4:	180f883a 	mov	r7,r3
    46f8:	a809883a 	mov	r4,r21
    46fc:	00092000 	call	9200 <__subdf3>
    4700:	dfc00c17 	ldw	ra,48(sp)
    4704:	df000b17 	ldw	fp,44(sp)
    4708:	ddc00a17 	ldw	r23,40(sp)
    470c:	dd800917 	ldw	r22,36(sp)
    4710:	dd400817 	ldw	r21,32(sp)
    4714:	dd000717 	ldw	r20,28(sp)
    4718:	dcc00617 	ldw	r19,24(sp)
    471c:	dc800517 	ldw	r18,20(sp)
    4720:	dc400417 	ldw	r17,16(sp)
    4724:	dc000317 	ldw	r16,12(sp)
    4728:	dec00d04 	addi	sp,sp,52
    472c:	f800283a 	ret
    4730:	008ff9f4 	movhi	r2,16359
    4734:	002b883a 	mov	r21,zero
    4738:	d8800015 	stw	r2,0(sp)
    473c:	040ff4b4 	movhi	r16,16338
    4740:	003fc406 	br	4654 <__ram_exceptions_end+0xfb00300c>
    4744:	0005883a 	mov	r2,zero
    4748:	00cffc34 	movhi	r3,16368
    474c:	003fec06 	br	4700 <__ram_exceptions_end+0xfb0030b8>

00004750 <__kernel_rem_pio2>:
    4750:	deff5a04 	addi	sp,sp,-664
    4754:	da00a617 	ldw	r8,664(sp)
    4758:	00c00074 	movhi	r3,1
    475c:	18cc2204 	addi	r3,r3,12424
    4760:	4205883a 	add	r2,r8,r8
    4764:	1085883a 	add	r2,r2,r2
    4768:	1885883a 	add	r2,r3,r2
    476c:	d9008e15 	stw	r4,568(sp)
    4770:	d9408f15 	stw	r5,572(sp)
    4774:	313fff44 	addi	r4,r6,-3
    4778:	01400604 	movi	r5,24
    477c:	dd80a215 	stw	r22,648(sp)
    4780:	dc009c15 	stw	r16,624(sp)
    4784:	dfc0a515 	stw	ra,660(sp)
    4788:	df00a415 	stw	fp,656(sp)
    478c:	ddc0a315 	stw	r23,652(sp)
    4790:	dd40a115 	stw	r21,644(sp)
    4794:	dd00a015 	stw	r20,640(sp)
    4798:	dcc09f15 	stw	r19,636(sp)
    479c:	dc809e15 	stw	r18,632(sp)
    47a0:	dc409d15 	stw	r17,628(sp)
    47a4:	3021883a 	mov	r16,r6
    47a8:	d9c09315 	stw	r7,588(sp)
    47ac:	15800017 	ldw	r22,0(r2)
    47b0:	00061d00 	call	61d0 <__divsi3>
    47b4:	da009317 	ldw	r8,588(sp)
    47b8:	d8809215 	stw	r2,584(sp)
    47bc:	423fffc4 	addi	r8,r8,-1
    47c0:	da008d15 	stw	r8,564(sp)
    47c4:	10033b16 	blt	r2,zero,54b4 <__kernel_rem_pio2+0xd64>
    47c8:	da009217 	ldw	r8,584(sp)
    47cc:	d9009217 	ldw	r4,584(sp)
    47d0:	42000044 	addi	r8,r8,1
    47d4:	40fffa24 	muli	r3,r8,-24
    47d8:	da009515 	stw	r8,596(sp)
    47dc:	da008d17 	ldw	r8,564(sp)
    47e0:	1c07883a 	add	r3,r3,r16
    47e4:	d8c09015 	stw	r3,576(sp)
    47e8:	b205883a 	add	r2,r22,r8
    47ec:	2223c83a 	sub	r17,r4,r8
    47f0:	10001016 	blt	r2,zero,4834 <__kernel_rem_pio2+0xe4>
    47f4:	da00a717 	ldw	r8,668(sp)
    47f8:	8c65883a 	add	r18,r17,r17
    47fc:	94a5883a 	add	r18,r18,r18
    4800:	1445883a 	add	r2,r2,r17
    4804:	dcc05004 	addi	r19,sp,320
    4808:	44a5883a 	add	r18,r8,r18
    480c:	14000044 	addi	r16,r2,1
    4810:	88015316 	blt	r17,zero,4d60 <__kernel_rem_pio2+0x610>
    4814:	91000017 	ldw	r4,0(r18)
    4818:	0009b7c0 	call	9b7c <__floatsidf>
    481c:	98800015 	stw	r2,0(r19)
    4820:	98c00115 	stw	r3,4(r19)
    4824:	8c400044 	addi	r17,r17,1
    4828:	9cc00204 	addi	r19,r19,8
    482c:	94800104 	addi	r18,r18,4
    4830:	8c3ff71e 	bne	r17,r16,4810 <__ram_exceptions_end+0xfb0031c8>
    4834:	b0002816 	blt	r22,zero,48d8 <__kernel_rem_pio2+0x188>
    4838:	da008d17 	ldw	r8,564(sp)
    483c:	b4c00044 	addi	r19,r22,1
    4840:	982690fa 	slli	r19,r19,3
    4844:	402490fa 	slli	r18,r8,3
    4848:	da008e17 	ldw	r8,568(sp)
    484c:	d8805004 	addi	r2,sp,320
    4850:	94000204 	addi	r16,r18,8
    4854:	d823883a 	mov	r17,sp
    4858:	14a5883a 	add	r18,r2,r18
    485c:	dcef883a 	add	r23,sp,r19
    4860:	4421883a 	add	r16,r8,r16
    4864:	dd809115 	stw	r22,580(sp)
    4868:	4039883a 	mov	fp,r8
    486c:	da008d17 	ldw	r8,564(sp)
    4870:	40016016 	blt	r8,zero,4df4 <__kernel_rem_pio2+0x6a4>
    4874:	e027883a 	mov	r19,fp
    4878:	9029883a 	mov	r20,r18
    487c:	002d883a 	mov	r22,zero
    4880:	002b883a 	mov	r21,zero
    4884:	a1800017 	ldw	r6,0(r20)
    4888:	a1c00117 	ldw	r7,4(r20)
    488c:	99000017 	ldw	r4,0(r19)
    4890:	99400117 	ldw	r5,4(r19)
    4894:	9cc00204 	addi	r19,r19,8
    4898:	a53ffe04 	addi	r20,r20,-8
    489c:	0008ae80 	call	8ae8 <__muldf3>
    48a0:	b009883a 	mov	r4,r22
    48a4:	a80b883a 	mov	r5,r21
    48a8:	100d883a 	mov	r6,r2
    48ac:	180f883a 	mov	r7,r3
    48b0:	00077f00 	call	77f0 <__adddf3>
    48b4:	102d883a 	mov	r22,r2
    48b8:	182b883a 	mov	r21,r3
    48bc:	9c3ff11e 	bne	r19,r16,4884 <__ram_exceptions_end+0xfb00323c>
    48c0:	8d800015 	stw	r22,0(r17)
    48c4:	8d400115 	stw	r21,4(r17)
    48c8:	8c400204 	addi	r17,r17,8
    48cc:	94800204 	addi	r18,r18,8
    48d0:	8dffe61e 	bne	r17,r23,486c <__ram_exceptions_end+0xfb003224>
    48d4:	dd809117 	ldw	r22,580(sp)
    48d8:	00d00034 	movhi	r3,16384
    48dc:	da009317 	ldw	r8,588(sp)
    48e0:	18ffff84 	addi	r3,r3,-2
    48e4:	b0c7883a 	add	r3,r22,r3
    48e8:	18c7883a 	add	r3,r3,r3
    48ec:	402090fa 	slli	r16,r8,3
    48f0:	18c7883a 	add	r3,r3,r3
    48f4:	da007804 	addi	r8,sp,480
    48f8:	40d1883a 	add	r8,r8,r3
    48fc:	b0bfffc4 	addi	r2,r22,-1
    4900:	da009615 	stw	r8,600(sp)
    4904:	da008e17 	ldw	r8,568(sp)
    4908:	1085883a 	add	r2,r2,r2
    490c:	1085883a 	add	r2,r2,r2
    4910:	19000104 	addi	r4,r3,4
    4914:	d885883a 	add	r2,sp,r2
    4918:	4421883a 	add	r16,r8,r16
    491c:	da007804 	addi	r8,sp,480
    4920:	4111883a 	add	r8,r8,r4
    4924:	10807804 	addi	r2,r2,480
    4928:	da009715 	stw	r8,604(sp)
    492c:	b025883a 	mov	r18,r22
    4930:	d8809815 	stw	r2,608(sp)
    4934:	dd809415 	stw	r22,592(sp)
    4938:	900490fa 	slli	r2,r18,3
    493c:	d885883a 	add	r2,sp,r2
    4940:	17000017 	ldw	fp,0(r2)
    4944:	15400117 	ldw	r21,4(r2)
    4948:	04802b0e 	bge	zero,r18,49f8 <__kernel_rem_pio2+0x2a8>
    494c:	00880034 	movhi	r2,8192
    4950:	10bfffc4 	addi	r2,r2,-1
    4954:	90a9883a 	add	r20,r18,r2
    4958:	a02890fa 	slli	r20,r20,3
    495c:	dc407804 	addi	r17,sp,480
    4960:	dcfffe04 	addi	r19,sp,-8
    4964:	dd29883a 	add	r20,sp,r20
    4968:	000d883a 	mov	r6,zero
    496c:	01cf9c34 	movhi	r7,15984
    4970:	e009883a 	mov	r4,fp
    4974:	a80b883a 	mov	r5,r21
    4978:	0008ae80 	call	8ae8 <__muldf3>
    497c:	180b883a 	mov	r5,r3
    4980:	1009883a 	mov	r4,r2
    4984:	0009afc0 	call	9afc <__fixdfsi>
    4988:	1009883a 	mov	r4,r2
    498c:	0009b7c0 	call	9b7c <__floatsidf>
    4990:	000d883a 	mov	r6,zero
    4994:	01d05c34 	movhi	r7,16752
    4998:	1009883a 	mov	r4,r2
    499c:	180b883a 	mov	r5,r3
    49a0:	102f883a 	mov	r23,r2
    49a4:	182d883a 	mov	r22,r3
    49a8:	0008ae80 	call	8ae8 <__muldf3>
    49ac:	100d883a 	mov	r6,r2
    49b0:	180f883a 	mov	r7,r3
    49b4:	e009883a 	mov	r4,fp
    49b8:	a80b883a 	mov	r5,r21
    49bc:	00092000 	call	9200 <__subdf3>
    49c0:	180b883a 	mov	r5,r3
    49c4:	1009883a 	mov	r4,r2
    49c8:	0009afc0 	call	9afc <__fixdfsi>
    49cc:	a1800017 	ldw	r6,0(r20)
    49d0:	a1c00117 	ldw	r7,4(r20)
    49d4:	88800015 	stw	r2,0(r17)
    49d8:	b809883a 	mov	r4,r23
    49dc:	b00b883a 	mov	r5,r22
    49e0:	00077f00 	call	77f0 <__adddf3>
    49e4:	a53ffe04 	addi	r20,r20,-8
    49e8:	1039883a 	mov	fp,r2
    49ec:	182b883a 	mov	r21,r3
    49f0:	8c400104 	addi	r17,r17,4
    49f4:	a4ffdc1e 	bne	r20,r19,4968 <__ram_exceptions_end+0xfb003320>
    49f8:	d9809017 	ldw	r6,576(sp)
    49fc:	a80b883a 	mov	r5,r21
    4a00:	e009883a 	mov	r4,fp
    4a04:	00060180 	call	6018 <scalbn>
    4a08:	000d883a 	mov	r6,zero
    4a0c:	01cff034 	movhi	r7,16320
    4a10:	1009883a 	mov	r4,r2
    4a14:	180b883a 	mov	r5,r3
    4a18:	1027883a 	mov	r19,r2
    4a1c:	1823883a 	mov	r17,r3
    4a20:	0008ae80 	call	8ae8 <__muldf3>
    4a24:	1009883a 	mov	r4,r2
    4a28:	180b883a 	mov	r5,r3
    4a2c:	0005e2c0 	call	5e2c <floor>
    4a30:	000d883a 	mov	r6,zero
    4a34:	01d00834 	movhi	r7,16416
    4a38:	1009883a 	mov	r4,r2
    4a3c:	180b883a 	mov	r5,r3
    4a40:	0008ae80 	call	8ae8 <__muldf3>
    4a44:	100d883a 	mov	r6,r2
    4a48:	180f883a 	mov	r7,r3
    4a4c:	9809883a 	mov	r4,r19
    4a50:	880b883a 	mov	r5,r17
    4a54:	00092000 	call	9200 <__subdf3>
    4a58:	180b883a 	mov	r5,r3
    4a5c:	1009883a 	mov	r4,r2
    4a60:	1827883a 	mov	r19,r3
    4a64:	1029883a 	mov	r20,r2
    4a68:	0009afc0 	call	9afc <__fixdfsi>
    4a6c:	1009883a 	mov	r4,r2
    4a70:	1023883a 	mov	r17,r2
    4a74:	0009b7c0 	call	9b7c <__floatsidf>
    4a78:	a009883a 	mov	r4,r20
    4a7c:	100d883a 	mov	r6,r2
    4a80:	180f883a 	mov	r7,r3
    4a84:	980b883a 	mov	r5,r19
    4a88:	00092000 	call	9200 <__subdf3>
    4a8c:	d9009017 	ldw	r4,576(sp)
    4a90:	1013883a 	mov	r9,r2
    4a94:	102b883a 	mov	r21,r2
    4a98:	1811883a 	mov	r8,r3
    4a9c:	0100b30e 	bge	zero,r4,4d6c <__kernel_rem_pio2+0x61c>
    4aa0:	90bfffc4 	addi	r2,r18,-1
    4aa4:	1085883a 	add	r2,r2,r2
    4aa8:	1085883a 	add	r2,r2,r2
    4aac:	d885883a 	add	r2,sp,r2
    4ab0:	10807804 	addi	r2,r2,480
    4ab4:	d9809017 	ldw	r6,576(sp)
    4ab8:	11400017 	ldw	r5,0(r2)
    4abc:	01000604 	movi	r4,24
    4ac0:	2189c83a 	sub	r4,r4,r6
    4ac4:	290dd83a 	sra	r6,r5,r4
    4ac8:	d9c09017 	ldw	r7,576(sp)
    4acc:	04c005c4 	movi	r19,23
    4ad0:	3108983a 	sll	r4,r6,r4
    4ad4:	99e7c83a 	sub	r19,r19,r7
    4ad8:	89a3883a 	add	r17,r17,r6
    4adc:	2909c83a 	sub	r4,r5,r4
    4ae0:	24e7d83a 	sra	r19,r4,r19
    4ae4:	11000015 	stw	r4,0(r2)
    4ae8:	04c02a0e 	bge	zero,r19,4b94 <__kernel_rem_pio2+0x444>
    4aec:	8c400044 	addi	r17,r17,1
    4af0:	0481570e 	bge	zero,r18,5050 <__kernel_rem_pio2+0x900>
    4af4:	02804034 	movhi	r10,256
    4af8:	52bfffc4 	addi	r10,r10,-1
    4afc:	d8807804 	addi	r2,sp,480
    4b00:	000b883a 	mov	r5,zero
    4b04:	0029883a 	mov	r20,zero
    4b08:	01c04034 	movhi	r7,256
    4b0c:	00000706 	br	4b2c <__kernel_rem_pio2+0x3dc>
    4b10:	390dc83a 	sub	r6,r7,r4
    4b14:	20000226 	beq	r4,zero,4b20 <__kernel_rem_pio2+0x3d0>
    4b18:	11800015 	stw	r6,0(r2)
    4b1c:	05000044 	movi	r20,1
    4b20:	29400044 	addi	r5,r5,1
    4b24:	10800104 	addi	r2,r2,4
    4b28:	2c80080e 	bge	r5,r18,4b4c <__kernel_rem_pio2+0x3fc>
    4b2c:	11000017 	ldw	r4,0(r2)
    4b30:	a03ff726 	beq	r20,zero,4b10 <__ram_exceptions_end+0xfb0034c8>
    4b34:	5109c83a 	sub	r4,r10,r4
    4b38:	11000015 	stw	r4,0(r2)
    4b3c:	29400044 	addi	r5,r5,1
    4b40:	05000044 	movi	r20,1
    4b44:	10800104 	addi	r2,r2,4
    4b48:	2cbff816 	blt	r5,r18,4b2c <__ram_exceptions_end+0xfb0034e4>
    4b4c:	d9009017 	ldw	r4,576(sp)
    4b50:	01000e0e 	bge	zero,r4,4b8c <__kernel_rem_pio2+0x43c>
    4b54:	00800044 	movi	r2,1
    4b58:	20808d26 	beq	r4,r2,4d90 <__kernel_rem_pio2+0x640>
    4b5c:	00800084 	movi	r2,2
    4b60:	20800a1e 	bne	r4,r2,4b8c <__kernel_rem_pio2+0x43c>
    4b64:	90bfffc4 	addi	r2,r18,-1
    4b68:	1085883a 	add	r2,r2,r2
    4b6c:	1085883a 	add	r2,r2,r2
    4b70:	d885883a 	add	r2,sp,r2
    4b74:	10807804 	addi	r2,r2,480
    4b78:	11400017 	ldw	r5,0(r2)
    4b7c:	01001034 	movhi	r4,64
    4b80:	213fffc4 	addi	r4,r4,-1
    4b84:	2908703a 	and	r4,r5,r4
    4b88:	11000015 	stw	r4,0(r2)
    4b8c:	00800084 	movi	r2,2
    4b90:	98805d26 	beq	r19,r2,4d08 <__kernel_rem_pio2+0x5b8>
    4b94:	400b883a 	mov	r5,r8
    4b98:	000d883a 	mov	r6,zero
    4b9c:	000f883a 	mov	r7,zero
    4ba0:	a809883a 	mov	r4,r21
    4ba4:	da009b15 	stw	r8,620(sp)
    4ba8:	00089840 	call	8984 <__eqdf2>
    4bac:	da009b17 	ldw	r8,620(sp)
    4bb0:	10012b1e 	bne	r2,zero,5060 <__kernel_rem_pio2+0x910>
    4bb4:	da009417 	ldw	r8,592(sp)
    4bb8:	917fffc4 	addi	r5,r18,-1
    4bbc:	2a000e16 	blt	r5,r8,4bf8 <__kernel_rem_pio2+0x4a8>
    4bc0:	00900034 	movhi	r2,16384
    4bc4:	10bfffc4 	addi	r2,r2,-1
    4bc8:	9085883a 	add	r2,r18,r2
    4bcc:	1085883a 	add	r2,r2,r2
    4bd0:	d9809717 	ldw	r6,604(sp)
    4bd4:	1085883a 	add	r2,r2,r2
    4bd8:	d9007804 	addi	r4,sp,480
    4bdc:	0007883a 	mov	r3,zero
    4be0:	2085883a 	add	r2,r4,r2
    4be4:	11000017 	ldw	r4,0(r2)
    4be8:	10bfff04 	addi	r2,r2,-4
    4bec:	1906b03a 	or	r3,r3,r4
    4bf0:	11bffc1e 	bne	r2,r6,4be4 <__ram_exceptions_end+0xfb00359c>
    4bf4:	1800821e 	bne	r3,zero,4e00 <__kernel_rem_pio2+0x6b0>
    4bf8:	da009817 	ldw	r8,608(sp)
    4bfc:	40800017 	ldw	r2,0(r8)
    4c00:	1001151e 	bne	r2,zero,5058 <__kernel_rem_pio2+0x908>
    4c04:	d8809617 	ldw	r2,600(sp)
    4c08:	05000044 	movi	r20,1
    4c0c:	10bfff04 	addi	r2,r2,-4
    4c10:	10c00117 	ldw	r3,4(r2)
    4c14:	a5000044 	addi	r20,r20,1
    4c18:	183ffc26 	beq	r3,zero,4c0c <__ram_exceptions_end+0xfb0035c4>
    4c1c:	9529883a 	add	r20,r18,r20
    4c20:	90800044 	addi	r2,r18,1
    4c24:	dd009115 	stw	r20,580(sp)
    4c28:	a0803216 	blt	r20,r2,4cf4 <__kernel_rem_pio2+0x5a4>
    4c2c:	da009317 	ldw	r8,588(sp)
    4c30:	d8c09117 	ldw	r3,580(sp)
    4c34:	44a3883a 	add	r17,r8,r18
    4c38:	da009217 	ldw	r8,584(sp)
    4c3c:	882290fa 	slli	r17,r17,3
    4c40:	40a5883a 	add	r18,r8,r2
    4c44:	da009517 	ldw	r8,596(sp)
    4c48:	100490fa 	slli	r2,r2,3
    4c4c:	94a5883a 	add	r18,r18,r18
    4c50:	40eb883a 	add	r21,r8,r3
    4c54:	da00a717 	ldw	r8,668(sp)
    4c58:	ad6b883a 	add	r21,r21,r21
    4c5c:	94a5883a 	add	r18,r18,r18
    4c60:	ad6b883a 	add	r21,r21,r21
    4c64:	d8c05004 	addi	r3,sp,320
    4c68:	44a5883a 	add	r18,r8,r18
    4c6c:	1c63883a 	add	r17,r3,r17
    4c70:	d8a7883a 	add	r19,sp,r2
    4c74:	456b883a 	add	r21,r8,r21
    4c78:	91000017 	ldw	r4,0(r18)
    4c7c:	0009b7c0 	call	9b7c <__floatsidf>
    4c80:	da008d17 	ldw	r8,564(sp)
    4c84:	88800015 	stw	r2,0(r17)
    4c88:	88c00115 	stw	r3,4(r17)
    4c8c:	40001b16 	blt	r8,zero,4cfc <__kernel_rem_pio2+0x5ac>
    4c90:	dd008e17 	ldw	r20,568(sp)
    4c94:	882d883a 	mov	r22,r17
    4c98:	002f883a 	mov	r23,zero
    4c9c:	0039883a 	mov	fp,zero
    4ca0:	b1800017 	ldw	r6,0(r22)
    4ca4:	b1c00117 	ldw	r7,4(r22)
    4ca8:	a1000017 	ldw	r4,0(r20)
    4cac:	a1400117 	ldw	r5,4(r20)
    4cb0:	a5000204 	addi	r20,r20,8
    4cb4:	b5bffe04 	addi	r22,r22,-8
    4cb8:	0008ae80 	call	8ae8 <__muldf3>
    4cbc:	b809883a 	mov	r4,r23
    4cc0:	e00b883a 	mov	r5,fp
    4cc4:	100d883a 	mov	r6,r2
    4cc8:	180f883a 	mov	r7,r3
    4ccc:	00077f00 	call	77f0 <__adddf3>
    4cd0:	102f883a 	mov	r23,r2
    4cd4:	1839883a 	mov	fp,r3
    4cd8:	a43ff11e 	bne	r20,r16,4ca0 <__ram_exceptions_end+0xfb003658>
    4cdc:	9dc00015 	stw	r23,0(r19)
    4ce0:	9f000115 	stw	fp,4(r19)
    4ce4:	94800104 	addi	r18,r18,4
    4ce8:	8c400204 	addi	r17,r17,8
    4cec:	9cc00204 	addi	r19,r19,8
    4cf0:	957fe11e 	bne	r18,r21,4c78 <__ram_exceptions_end+0xfb003630>
    4cf4:	dc809117 	ldw	r18,580(sp)
    4cf8:	003f0f06 	br	4938 <__ram_exceptions_end+0xfb0032f0>
    4cfc:	002f883a 	mov	r23,zero
    4d00:	0039883a 	mov	fp,zero
    4d04:	003ff506 	br	4cdc <__ram_exceptions_end+0xfb003694>
    4d08:	480d883a 	mov	r6,r9
    4d0c:	180f883a 	mov	r7,r3
    4d10:	0009883a 	mov	r4,zero
    4d14:	014ffc34 	movhi	r5,16368
    4d18:	00092000 	call	9200 <__subdf3>
    4d1c:	102b883a 	mov	r21,r2
    4d20:	1811883a 	mov	r8,r3
    4d24:	a03f9b26 	beq	r20,zero,4b94 <__ram_exceptions_end+0xfb00354c>
    4d28:	d9809017 	ldw	r6,576(sp)
    4d2c:	0009883a 	mov	r4,zero
    4d30:	014ffc34 	movhi	r5,16368
    4d34:	d8c09b15 	stw	r3,620(sp)
    4d38:	00060180 	call	6018 <scalbn>
    4d3c:	da009b17 	ldw	r8,620(sp)
    4d40:	a809883a 	mov	r4,r21
    4d44:	100d883a 	mov	r6,r2
    4d48:	400b883a 	mov	r5,r8
    4d4c:	180f883a 	mov	r7,r3
    4d50:	00092000 	call	9200 <__subdf3>
    4d54:	102b883a 	mov	r21,r2
    4d58:	1811883a 	mov	r8,r3
    4d5c:	003f8d06 	br	4b94 <__ram_exceptions_end+0xfb00354c>
    4d60:	0005883a 	mov	r2,zero
    4d64:	0007883a 	mov	r3,zero
    4d68:	003eac06 	br	481c <__ram_exceptions_end+0xfb0031d4>
    4d6c:	d8809017 	ldw	r2,576(sp)
    4d70:	1000121e 	bne	r2,zero,4dbc <__kernel_rem_pio2+0x66c>
    4d74:	90bfffc4 	addi	r2,r18,-1
    4d78:	1085883a 	add	r2,r2,r2
    4d7c:	1085883a 	add	r2,r2,r2
    4d80:	d885883a 	add	r2,sp,r2
    4d84:	14c07817 	ldw	r19,480(r2)
    4d88:	9827d5fa 	srai	r19,r19,23
    4d8c:	003f5606 	br	4ae8 <__ram_exceptions_end+0xfb0034a0>
    4d90:	90bfffc4 	addi	r2,r18,-1
    4d94:	1085883a 	add	r2,r2,r2
    4d98:	1085883a 	add	r2,r2,r2
    4d9c:	d885883a 	add	r2,sp,r2
    4da0:	10807804 	addi	r2,r2,480
    4da4:	11000017 	ldw	r4,0(r2)
    4da8:	01402034 	movhi	r5,128
    4dac:	297fffc4 	addi	r5,r5,-1
    4db0:	2148703a 	and	r4,r4,r5
    4db4:	11000015 	stw	r4,0(r2)
    4db8:	003f7406 	br	4b8c <__ram_exceptions_end+0xfb003544>
    4dbc:	4809883a 	mov	r4,r9
    4dc0:	180b883a 	mov	r5,r3
    4dc4:	000d883a 	mov	r6,zero
    4dc8:	01cff834 	movhi	r7,16352
    4dcc:	d8c09a15 	stw	r3,616(sp)
    4dd0:	d8c09b15 	stw	r3,620(sp)
    4dd4:	da409915 	stw	r9,612(sp)
    4dd8:	0008a0c0 	call	8a0c <__gedf2>
    4ddc:	d8c09a17 	ldw	r3,616(sp)
    4de0:	da009b17 	ldw	r8,620(sp)
    4de4:	da409917 	ldw	r9,612(sp)
    4de8:	1000920e 	bge	r2,zero,5034 <__kernel_rem_pio2+0x8e4>
    4dec:	0027883a 	mov	r19,zero
    4df0:	003f6806 	br	4b94 <__ram_exceptions_end+0xfb00354c>
    4df4:	002d883a 	mov	r22,zero
    4df8:	002b883a 	mov	r21,zero
    4dfc:	003eb006 	br	48c0 <__ram_exceptions_end+0xfb003278>
    4e00:	2945883a 	add	r2,r5,r5
    4e04:	da009017 	ldw	r8,576(sp)
    4e08:	1085883a 	add	r2,r2,r2
    4e0c:	d885883a 	add	r2,sp,r2
    4e10:	10807817 	ldw	r2,480(r2)
    4e14:	423ffa04 	addi	r8,r8,-24
    4e18:	dc409115 	stw	r17,580(sp)
    4e1c:	dcc08d15 	stw	r19,564(sp)
    4e20:	da009015 	stw	r8,576(sp)
    4e24:	dd809417 	ldw	r22,592(sp)
    4e28:	2823883a 	mov	r17,r5
    4e2c:	10000e1e 	bne	r2,zero,4e68 <__kernel_rem_pio2+0x718>
    4e30:	00900034 	movhi	r2,16384
    4e34:	10bfffc4 	addi	r2,r2,-1
    4e38:	2885883a 	add	r2,r5,r2
    4e3c:	1085883a 	add	r2,r2,r2
    4e40:	d8c07804 	addi	r3,sp,480
    4e44:	1085883a 	add	r2,r2,r2
    4e48:	1885883a 	add	r2,r3,r2
    4e4c:	4007883a 	mov	r3,r8
    4e50:	10bfff04 	addi	r2,r2,-4
    4e54:	11000117 	ldw	r4,4(r2)
    4e58:	8c7fffc4 	addi	r17,r17,-1
    4e5c:	18fffa04 	addi	r3,r3,-24
    4e60:	203ffb26 	beq	r4,zero,4e50 <__ram_exceptions_end+0xfb003808>
    4e64:	d8c09015 	stw	r3,576(sp)
    4e68:	d9809017 	ldw	r6,576(sp)
    4e6c:	0009883a 	mov	r4,zero
    4e70:	014ffc34 	movhi	r5,16368
    4e74:	00060180 	call	6018 <scalbn>
    4e78:	1029883a 	mov	r20,r2
    4e7c:	182b883a 	mov	r21,r3
    4e80:	88018416 	blt	r17,zero,5494 <__kernel_rem_pio2+0xd44>
    4e84:	881090fa 	slli	r8,r17,3
    4e88:	d8c07804 	addi	r3,sp,480
    4e8c:	da008e15 	stw	r8,568(sp)
    4e90:	d8808e17 	ldw	r2,568(sp)
    4e94:	8c51883a 	add	r8,r17,r17
    4e98:	4211883a 	add	r8,r8,r8
    4e9c:	d8a1883a 	add	r16,sp,r2
    4ea0:	1a25883a 	add	r18,r3,r8
    4ea4:	da3ffe04 	addi	r8,sp,-8
    4ea8:	da008c15 	stw	r8,560(sp)
    4eac:	8039883a 	mov	fp,r16
    4eb0:	91000017 	ldw	r4,0(r18)
    4eb4:	e73ffe04 	addi	fp,fp,-8
    4eb8:	94bfff04 	addi	r18,r18,-4
    4ebc:	0009b7c0 	call	9b7c <__floatsidf>
    4ec0:	a00d883a 	mov	r6,r20
    4ec4:	a80f883a 	mov	r7,r21
    4ec8:	1009883a 	mov	r4,r2
    4ecc:	180b883a 	mov	r5,r3
    4ed0:	0008ae80 	call	8ae8 <__muldf3>
    4ed4:	a009883a 	mov	r4,r20
    4ed8:	a80b883a 	mov	r5,r21
    4edc:	e0800215 	stw	r2,8(fp)
    4ee0:	e0c00315 	stw	r3,12(fp)
    4ee4:	000d883a 	mov	r6,zero
    4ee8:	01cf9c34 	movhi	r7,15984
    4eec:	0008ae80 	call	8ae8 <__muldf3>
    4ef0:	da008c17 	ldw	r8,560(sp)
    4ef4:	1029883a 	mov	r20,r2
    4ef8:	182b883a 	mov	r21,r3
    4efc:	e23fec1e 	bne	fp,r8,4eb0 <__ram_exceptions_end+0xfb003868>
    4f00:	0029883a 	mov	r20,zero
    4f04:	b0004f16 	blt	r22,zero,5044 <__kernel_rem_pio2+0x8f4>
    4f08:	05400074 	movhi	r21,1
    4f0c:	014ffe74 	movhi	r5,16377
    4f10:	ad4c1404 	addi	r21,r21,12368
    4f14:	8027883a 	mov	r19,r16
    4f18:	01100034 	movhi	r4,16384
    4f1c:	29487ec4 	addi	r5,r5,8699
    4f20:	0039883a 	mov	fp,zero
    4f24:	002f883a 	mov	r23,zero
    4f28:	0025883a 	mov	r18,zero
    4f2c:	00000506 	br	4f44 <__kernel_rem_pio2+0x7f4>
    4f30:	9cc00204 	addi	r19,r19,8
    4f34:	a4800f16 	blt	r20,r18,4f74 <__kernel_rem_pio2+0x824>
    4f38:	a9000017 	ldw	r4,0(r21)
    4f3c:	a9400117 	ldw	r5,4(r21)
    4f40:	ad400204 	addi	r21,r21,8
    4f44:	99800017 	ldw	r6,0(r19)
    4f48:	99c00117 	ldw	r7,4(r19)
    4f4c:	94800044 	addi	r18,r18,1
    4f50:	0008ae80 	call	8ae8 <__muldf3>
    4f54:	e009883a 	mov	r4,fp
    4f58:	b80b883a 	mov	r5,r23
    4f5c:	100d883a 	mov	r6,r2
    4f60:	180f883a 	mov	r7,r3
    4f64:	00077f00 	call	77f0 <__adddf3>
    4f68:	1039883a 	mov	fp,r2
    4f6c:	182f883a 	mov	r23,r3
    4f70:	b4bfef0e 	bge	r22,r18,4f30 <__ram_exceptions_end+0xfb0038e8>
    4f74:	a00490fa 	slli	r2,r20,3
    4f78:	da008c17 	ldw	r8,560(sp)
    4f7c:	843ffe04 	addi	r16,r16,-8
    4f80:	d885883a 	add	r2,sp,r2
    4f84:	10802804 	addi	r2,r2,160
    4f88:	17000015 	stw	fp,0(r2)
    4f8c:	15c00115 	stw	r23,4(r2)
    4f90:	a5000044 	addi	r20,r20,1
    4f94:	823fdb1e 	bne	r16,r8,4f04 <__ram_exceptions_end+0xfb0038bc>
    4f98:	da00a617 	ldw	r8,664(sp)
    4f9c:	00800084 	movi	r2,2
    4fa0:	12006616 	blt	r2,r8,513c <__kernel_rem_pio2+0x9ec>
    4fa4:	0200de16 	blt	zero,r8,5320 <__kernel_rem_pio2+0xbd0>
    4fa8:	4000141e 	bne	r8,zero,4ffc <__kernel_rem_pio2+0x8ac>
    4fac:	da008e17 	ldw	r8,568(sp)
    4fb0:	d8802804 	addi	r2,sp,160
    4fb4:	0007883a 	mov	r3,zero
    4fb8:	1225883a 	add	r18,r2,r8
    4fbc:	043fffc4 	movi	r16,-1
    4fc0:	0005883a 	mov	r2,zero
    4fc4:	91800017 	ldw	r6,0(r18)
    4fc8:	91c00117 	ldw	r7,4(r18)
    4fcc:	1009883a 	mov	r4,r2
    4fd0:	180b883a 	mov	r5,r3
    4fd4:	8c7fffc4 	addi	r17,r17,-1
    4fd8:	00077f00 	call	77f0 <__adddf3>
    4fdc:	94bffe04 	addi	r18,r18,-8
    4fe0:	8c3ff81e 	bne	r17,r16,4fc4 <__ram_exceptions_end+0xfb00397c>
    4fe4:	da008d17 	ldw	r8,564(sp)
    4fe8:	40000126 	beq	r8,zero,4ff0 <__kernel_rem_pio2+0x8a0>
    4fec:	18e0003c 	xorhi	r3,r3,32768
    4ff0:	da008f17 	ldw	r8,572(sp)
    4ff4:	40800015 	stw	r2,0(r8)
    4ff8:	40c00115 	stw	r3,4(r8)
    4ffc:	da009117 	ldw	r8,580(sp)
    5000:	408001cc 	andi	r2,r8,7
    5004:	dfc0a517 	ldw	ra,660(sp)
    5008:	df00a417 	ldw	fp,656(sp)
    500c:	ddc0a317 	ldw	r23,652(sp)
    5010:	dd80a217 	ldw	r22,648(sp)
    5014:	dd40a117 	ldw	r21,644(sp)
    5018:	dd00a017 	ldw	r20,640(sp)
    501c:	dcc09f17 	ldw	r19,636(sp)
    5020:	dc809e17 	ldw	r18,632(sp)
    5024:	dc409d17 	ldw	r17,628(sp)
    5028:	dc009c17 	ldw	r16,624(sp)
    502c:	dec0a604 	addi	sp,sp,664
    5030:	f800283a 	ret
    5034:	8c400044 	addi	r17,r17,1
    5038:	04810d0e 	bge	zero,r18,5470 <__kernel_rem_pio2+0xd20>
    503c:	04c00084 	movi	r19,2
    5040:	003eac06 	br	4af4 <__ram_exceptions_end+0xfb0034ac>
    5044:	0039883a 	mov	fp,zero
    5048:	002f883a 	mov	r23,zero
    504c:	003fc906 	br	4f74 <__ram_exceptions_end+0xfb00392c>
    5050:	0029883a 	mov	r20,zero
    5054:	003ebd06 	br	4b4c <__ram_exceptions_end+0xfb003504>
    5058:	05000044 	movi	r20,1
    505c:	003eef06 	br	4c1c <__ram_exceptions_end+0xfb0035d4>
    5060:	4029883a 	mov	r20,r8
    5064:	da009017 	ldw	r8,576(sp)
    5068:	a809883a 	mov	r4,r21
    506c:	a00b883a 	mov	r5,r20
    5070:	020dc83a 	sub	r6,zero,r8
    5074:	dc409115 	stw	r17,580(sp)
    5078:	dd809417 	ldw	r22,592(sp)
    507c:	dcc08d15 	stw	r19,564(sp)
    5080:	00060180 	call	6018 <scalbn>
    5084:	000d883a 	mov	r6,zero
    5088:	01d05c34 	movhi	r7,16752
    508c:	1009883a 	mov	r4,r2
    5090:	180b883a 	mov	r5,r3
    5094:	102b883a 	mov	r21,r2
    5098:	1823883a 	mov	r17,r3
    509c:	0008a0c0 	call	8a0c <__gedf2>
    50a0:	1000e916 	blt	r2,zero,5448 <__kernel_rem_pio2+0xcf8>
    50a4:	000d883a 	mov	r6,zero
    50a8:	01cf9c34 	movhi	r7,15984
    50ac:	880b883a 	mov	r5,r17
    50b0:	a809883a 	mov	r4,r21
    50b4:	0008ae80 	call	8ae8 <__muldf3>
    50b8:	180b883a 	mov	r5,r3
    50bc:	1009883a 	mov	r4,r2
    50c0:	0009afc0 	call	9afc <__fixdfsi>
    50c4:	1029883a 	mov	r20,r2
    50c8:	9485883a 	add	r2,r18,r18
    50cc:	1085883a 	add	r2,r2,r2
    50d0:	a009883a 	mov	r4,r20
    50d4:	d8a1883a 	add	r16,sp,r2
    50d8:	0009b7c0 	call	9b7c <__floatsidf>
    50dc:	000d883a 	mov	r6,zero
    50e0:	01d05c34 	movhi	r7,16752
    50e4:	1009883a 	mov	r4,r2
    50e8:	180b883a 	mov	r5,r3
    50ec:	0008ae80 	call	8ae8 <__muldf3>
    50f0:	880b883a 	mov	r5,r17
    50f4:	100d883a 	mov	r6,r2
    50f8:	180f883a 	mov	r7,r3
    50fc:	a809883a 	mov	r4,r21
    5100:	00092000 	call	9200 <__subdf3>
    5104:	180b883a 	mov	r5,r3
    5108:	1009883a 	mov	r4,r2
    510c:	0009afc0 	call	9afc <__fixdfsi>
    5110:	da009017 	ldw	r8,576(sp)
    5114:	94400044 	addi	r17,r18,1
    5118:	8c47883a 	add	r3,r17,r17
    511c:	84007804 	addi	r16,r16,480
    5120:	18c7883a 	add	r3,r3,r3
    5124:	80800015 	stw	r2,0(r16)
    5128:	d8c7883a 	add	r3,sp,r3
    512c:	42000604 	addi	r8,r8,24
    5130:	da009015 	stw	r8,576(sp)
    5134:	1d007815 	stw	r20,480(r3)
    5138:	003f4b06 	br	4e68 <__ram_exceptions_end+0xfb003820>
    513c:	da00a617 	ldw	r8,664(sp)
    5140:	008000c4 	movi	r2,3
    5144:	40bfad1e 	bne	r8,r2,4ffc <__ram_exceptions_end+0xfb0039b4>
    5148:	0440bc0e 	bge	zero,r17,543c <__kernel_rem_pio2+0xcec>
    514c:	da008e17 	ldw	r8,568(sp)
    5150:	882090fa 	slli	r16,r17,3
    5154:	dd402804 	addi	r21,sp,160
    5158:	da05883a 	add	r2,sp,r8
    515c:	10802804 	addi	r2,r2,160
    5160:	15c00017 	ldw	r23,0(r2)
    5164:	15800117 	ldw	r22,4(r2)
    5168:	8029883a 	mov	r20,r16
    516c:	843ffe04 	addi	r16,r16,-8
    5170:	ac21883a 	add	r16,r21,r16
    5174:	ad29883a 	add	r20,r21,r20
    5178:	dac02604 	addi	r11,sp,152
    517c:	8811883a 	mov	r8,r17
    5180:	84400017 	ldw	r17,0(r16)
    5184:	87000117 	ldw	fp,4(r16)
    5188:	b80d883a 	mov	r6,r23
    518c:	b00f883a 	mov	r7,r22
    5190:	8809883a 	mov	r4,r17
    5194:	e00b883a 	mov	r5,fp
    5198:	da009b15 	stw	r8,620(sp)
    519c:	dac09915 	stw	r11,612(sp)
    51a0:	00077f00 	call	77f0 <__adddf3>
    51a4:	100d883a 	mov	r6,r2
    51a8:	180f883a 	mov	r7,r3
    51ac:	8809883a 	mov	r4,r17
    51b0:	e00b883a 	mov	r5,fp
    51b4:	1027883a 	mov	r19,r2
    51b8:	1825883a 	mov	r18,r3
    51bc:	00092000 	call	9200 <__subdf3>
    51c0:	b80d883a 	mov	r6,r23
    51c4:	b00f883a 	mov	r7,r22
    51c8:	1009883a 	mov	r4,r2
    51cc:	180b883a 	mov	r5,r3
    51d0:	00077f00 	call	77f0 <__adddf3>
    51d4:	dac09917 	ldw	r11,612(sp)
    51d8:	a0800015 	stw	r2,0(r20)
    51dc:	a0c00115 	stw	r3,4(r20)
    51e0:	84c00015 	stw	r19,0(r16)
    51e4:	84800115 	stw	r18,4(r16)
    51e8:	843ffe04 	addi	r16,r16,-8
    51ec:	a53ffe04 	addi	r20,r20,-8
    51f0:	982f883a 	mov	r23,r19
    51f4:	902d883a 	mov	r22,r18
    51f8:	da009b17 	ldw	r8,620(sp)
    51fc:	5c3fe01e 	bne	r11,r16,5180 <__ram_exceptions_end+0xfb003b38>
    5200:	00800044 	movi	r2,1
    5204:	12008d0e 	bge	r2,r8,543c <__kernel_rem_pio2+0xcec>
    5208:	402090fa 	slli	r16,r8,3
    520c:	da008e17 	ldw	r8,568(sp)
    5210:	8023883a 	mov	r17,r16
    5214:	da05883a 	add	r2,sp,r8
    5218:	10802804 	addi	r2,r2,160
    521c:	15800017 	ldw	r22,0(r2)
    5220:	15000117 	ldw	r20,4(r2)
    5224:	ac63883a 	add	r17,r21,r17
    5228:	843ffe04 	addi	r16,r16,-8
    522c:	ac21883a 	add	r16,r21,r16
    5230:	8825883a 	mov	r18,r17
    5234:	8811883a 	mov	r8,r17
    5238:	84400017 	ldw	r17,0(r16)
    523c:	87000117 	ldw	fp,4(r16)
    5240:	b009883a 	mov	r4,r22
    5244:	a00b883a 	mov	r5,r20
    5248:	880d883a 	mov	r6,r17
    524c:	e00f883a 	mov	r7,fp
    5250:	da009b15 	stw	r8,620(sp)
    5254:	00077f00 	call	77f0 <__adddf3>
    5258:	100d883a 	mov	r6,r2
    525c:	180f883a 	mov	r7,r3
    5260:	8809883a 	mov	r4,r17
    5264:	e00b883a 	mov	r5,fp
    5268:	102f883a 	mov	r23,r2
    526c:	1827883a 	mov	r19,r3
    5270:	00092000 	call	9200 <__subdf3>
    5274:	b00d883a 	mov	r6,r22
    5278:	a00f883a 	mov	r7,r20
    527c:	1009883a 	mov	r4,r2
    5280:	180b883a 	mov	r5,r3
    5284:	00077f00 	call	77f0 <__adddf3>
    5288:	90800015 	stw	r2,0(r18)
    528c:	90c00115 	stw	r3,4(r18)
    5290:	85c00015 	stw	r23,0(r16)
    5294:	84c00115 	stw	r19,4(r16)
    5298:	843ffe04 	addi	r16,r16,-8
    529c:	94bffe04 	addi	r18,r18,-8
    52a0:	b82d883a 	mov	r22,r23
    52a4:	9829883a 	mov	r20,r19
    52a8:	da009b17 	ldw	r8,620(sp)
    52ac:	ac3fe21e 	bne	r21,r16,5238 <__ram_exceptions_end+0xfb003bf0>
    52b0:	4023883a 	mov	r17,r8
    52b4:	dc002a04 	addi	r16,sp,168
    52b8:	0005883a 	mov	r2,zero
    52bc:	0007883a 	mov	r3,zero
    52c0:	89800017 	ldw	r6,0(r17)
    52c4:	89c00117 	ldw	r7,4(r17)
    52c8:	1009883a 	mov	r4,r2
    52cc:	8c7ffe04 	addi	r17,r17,-8
    52d0:	180b883a 	mov	r5,r3
    52d4:	00077f00 	call	77f0 <__adddf3>
    52d8:	847ff91e 	bne	r16,r17,52c0 <__ram_exceptions_end+0xfb003c78>
    52dc:	da008d17 	ldw	r8,564(sp)
    52e0:	40004726 	beq	r8,zero,5400 <__kernel_rem_pio2+0xcb0>
    52e4:	d9002b17 	ldw	r4,172(sp)
    52e8:	d9402917 	ldw	r5,164(sp)
    52ec:	d9802a17 	ldw	r6,168(sp)
    52f0:	da008f17 	ldw	r8,572(sp)
    52f4:	d9c02817 	ldw	r7,160(sp)
    52f8:	2960003c 	xorhi	r5,r5,32768
    52fc:	2120003c 	xorhi	r4,r4,32768
    5300:	18e0003c 	xorhi	r3,r3,32768
    5304:	41c00015 	stw	r7,0(r8)
    5308:	41400115 	stw	r5,4(r8)
    530c:	41800215 	stw	r6,8(r8)
    5310:	41000315 	stw	r4,12(r8)
    5314:	40800415 	stw	r2,16(r8)
    5318:	40c00515 	stw	r3,20(r8)
    531c:	003f3706 	br	4ffc <__ram_exceptions_end+0xfb0039b4>
    5320:	da008e17 	ldw	r8,568(sp)
    5324:	d8802804 	addi	r2,sp,160
    5328:	dc002604 	addi	r16,sp,152
    532c:	1225883a 	add	r18,r2,r8
    5330:	0007883a 	mov	r3,zero
    5334:	0005883a 	mov	r2,zero
    5338:	91800017 	ldw	r6,0(r18)
    533c:	91c00117 	ldw	r7,4(r18)
    5340:	1009883a 	mov	r4,r2
    5344:	94bffe04 	addi	r18,r18,-8
    5348:	180b883a 	mov	r5,r3
    534c:	00077f00 	call	77f0 <__adddf3>
    5350:	943ff91e 	bne	r18,r16,5338 <__ram_exceptions_end+0xfb003cf0>
    5354:	da008d17 	ldw	r8,564(sp)
    5358:	d9002817 	ldw	r4,160(sp)
    535c:	d9402917 	ldw	r5,164(sp)
    5360:	40001a26 	beq	r8,zero,53cc <__kernel_rem_pio2+0xc7c>
    5364:	da008f17 	ldw	r8,572(sp)
    5368:	19a0003c 	xorhi	r6,r3,32768
    536c:	180f883a 	mov	r7,r3
    5370:	41800115 	stw	r6,4(r8)
    5374:	40800015 	stw	r2,0(r8)
    5378:	100d883a 	mov	r6,r2
    537c:	00092000 	call	9200 <__subdf3>
    5380:	04400c0e 	bge	zero,r17,53b4 <__kernel_rem_pio2+0xc64>
    5384:	dc002a04 	addi	r16,sp,168
    5388:	04800044 	movi	r18,1
    538c:	81800017 	ldw	r6,0(r16)
    5390:	81c00117 	ldw	r7,4(r16)
    5394:	1009883a 	mov	r4,r2
    5398:	180b883a 	mov	r5,r3
    539c:	94800044 	addi	r18,r18,1
    53a0:	00077f00 	call	77f0 <__adddf3>
    53a4:	84000204 	addi	r16,r16,8
    53a8:	8cbff80e 	bge	r17,r18,538c <__ram_exceptions_end+0xfb003d44>
    53ac:	da008d17 	ldw	r8,564(sp)
    53b0:	40004226 	beq	r8,zero,54bc <__kernel_rem_pio2+0xd6c>
    53b4:	da008f17 	ldw	r8,572(sp)
    53b8:	1009883a 	mov	r4,r2
    53bc:	18a0003c 	xorhi	r2,r3,32768
    53c0:	41000215 	stw	r4,8(r8)
    53c4:	40800315 	stw	r2,12(r8)
    53c8:	003f0c06 	br	4ffc <__ram_exceptions_end+0xfb0039b4>
    53cc:	da008f17 	ldw	r8,572(sp)
    53d0:	100d883a 	mov	r6,r2
    53d4:	180f883a 	mov	r7,r3
    53d8:	40800015 	stw	r2,0(r8)
    53dc:	40c00115 	stw	r3,4(r8)
    53e0:	00092000 	call	9200 <__subdf3>
    53e4:	047fe716 	blt	zero,r17,5384 <__ram_exceptions_end+0xfb003d3c>
    53e8:	da008f17 	ldw	r8,572(sp)
    53ec:	1009883a 	mov	r4,r2
    53f0:	1805883a 	mov	r2,r3
    53f4:	41000215 	stw	r4,8(r8)
    53f8:	40800315 	stw	r2,12(r8)
    53fc:	003eff06 	br	4ffc <__ram_exceptions_end+0xfb0039b4>
    5400:	da008f17 	ldw	r8,572(sp)
    5404:	d9802817 	ldw	r6,160(sp)
    5408:	d9402a17 	ldw	r5,168(sp)
    540c:	d9002b17 	ldw	r4,172(sp)
    5410:	41800015 	stw	r6,0(r8)
    5414:	d9802917 	ldw	r6,164(sp)
    5418:	41400215 	stw	r5,8(r8)
    541c:	41000315 	stw	r4,12(r8)
    5420:	41800115 	stw	r6,4(r8)
    5424:	40800415 	stw	r2,16(r8)
    5428:	40c00515 	stw	r3,20(r8)
    542c:	003ef306 	br	4ffc <__ram_exceptions_end+0xfb0039b4>
    5430:	da00a617 	ldw	r8,664(sp)
    5434:	008000c4 	movi	r2,3
    5438:	40bef01e 	bne	r8,r2,4ffc <__ram_exceptions_end+0xfb0039b4>
    543c:	0005883a 	mov	r2,zero
    5440:	0007883a 	mov	r3,zero
    5444:	003fa506 	br	52dc <__ram_exceptions_end+0xfb003c94>
    5448:	9485883a 	add	r2,r18,r18
    544c:	1085883a 	add	r2,r2,r2
    5450:	d8a1883a 	add	r16,sp,r2
    5454:	880b883a 	mov	r5,r17
    5458:	a809883a 	mov	r4,r21
    545c:	84007804 	addi	r16,r16,480
    5460:	0009afc0 	call	9afc <__fixdfsi>
    5464:	80800015 	stw	r2,0(r16)
    5468:	9023883a 	mov	r17,r18
    546c:	003e7e06 	br	4e68 <__ram_exceptions_end+0xfb003820>
    5470:	a80d883a 	mov	r6,r21
    5474:	400f883a 	mov	r7,r8
    5478:	0009883a 	mov	r4,zero
    547c:	014ffc34 	movhi	r5,16368
    5480:	00092000 	call	9200 <__subdf3>
    5484:	102b883a 	mov	r21,r2
    5488:	1811883a 	mov	r8,r3
    548c:	04c00084 	movi	r19,2
    5490:	003dc006 	br	4b94 <__ram_exceptions_end+0xfb00354c>
    5494:	da00a617 	ldw	r8,664(sp)
    5498:	00800084 	movi	r2,2
    549c:	123fe416 	blt	r2,r8,5430 <__ram_exceptions_end+0xfb003de8>
    54a0:	02000c16 	blt	zero,r8,54d4 <__kernel_rem_pio2+0xd84>
    54a4:	403ed51e 	bne	r8,zero,4ffc <__ram_exceptions_end+0xfb0039b4>
    54a8:	0005883a 	mov	r2,zero
    54ac:	0007883a 	mov	r3,zero
    54b0:	003ecc06 	br	4fe4 <__ram_exceptions_end+0xfb00399c>
    54b4:	d8009215 	stw	zero,584(sp)
    54b8:	003cc306 	br	47c8 <__ram_exceptions_end+0xfb003180>
    54bc:	da008f17 	ldw	r8,572(sp)
    54c0:	1009883a 	mov	r4,r2
    54c4:	1805883a 	mov	r2,r3
    54c8:	41000215 	stw	r4,8(r8)
    54cc:	40800315 	stw	r2,12(r8)
    54d0:	003eca06 	br	4ffc <__ram_exceptions_end+0xfb0039b4>
    54d4:	0005883a 	mov	r2,zero
    54d8:	0007883a 	mov	r3,zero
    54dc:	003f9d06 	br	5354 <__ram_exceptions_end+0xfb003d0c>

000054e0 <__kernel_sin>:
    54e0:	00a00034 	movhi	r2,32768
    54e4:	defff404 	addi	sp,sp,-48
    54e8:	10bfffc4 	addi	r2,r2,-1
    54ec:	00cf9034 	movhi	r3,15936
    54f0:	ddc00915 	stw	r23,36(sp)
    54f4:	dd800815 	stw	r22,32(sp)
    54f8:	dc400315 	stw	r17,12(sp)
    54fc:	dc000215 	stw	r16,8(sp)
    5500:	dfc00b15 	stw	ra,44(sp)
    5504:	df000a15 	stw	fp,40(sp)
    5508:	dd400715 	stw	r21,28(sp)
    550c:	dd000615 	stw	r20,24(sp)
    5510:	dcc00515 	stw	r19,20(sp)
    5514:	dc800415 	stw	r18,16(sp)
    5518:	2884703a 	and	r2,r5,r2
    551c:	18ffffc4 	addi	r3,r3,-1
    5520:	2821883a 	mov	r16,r5
    5524:	2023883a 	mov	r17,r4
    5528:	302f883a 	mov	r23,r6
    552c:	382d883a 	mov	r22,r7
    5530:	18800216 	blt	r3,r2,553c <__kernel_sin+0x5c>
    5534:	0009afc0 	call	9afc <__fixdfsi>
    5538:	10009926 	beq	r2,zero,57a0 <__kernel_sin+0x2c0>
    553c:	880d883a 	mov	r6,r17
    5540:	800f883a 	mov	r7,r16
    5544:	8809883a 	mov	r4,r17
    5548:	800b883a 	mov	r5,r16
    554c:	0008ae80 	call	8ae8 <__muldf3>
    5550:	100d883a 	mov	r6,r2
    5554:	180f883a 	mov	r7,r3
    5558:	8809883a 	mov	r4,r17
    555c:	800b883a 	mov	r5,r16
    5560:	1027883a 	mov	r19,r2
    5564:	1825883a 	mov	r18,r3
    5568:	0008ae80 	call	8ae8 <__muldf3>
    556c:	0196b434 	movhi	r6,23248
    5570:	01cf79b4 	movhi	r7,15846
    5574:	31b55f04 	addi	r6,r6,-10884
    5578:	39f64e84 	addi	r7,r7,-9926
    557c:	9809883a 	mov	r4,r19
    5580:	900b883a 	mov	r5,r18
    5584:	102b883a 	mov	r21,r2
    5588:	1829883a 	mov	r20,r3
    558c:	0008ae80 	call	8ae8 <__muldf3>
    5590:	01a28b34 	movhi	r6,35372
    5594:	01cf96f4 	movhi	r7,15963
    5598:	31a73ac4 	addi	r6,r6,-25365
    559c:	39f97984 	addi	r7,r7,-6682
    55a0:	1009883a 	mov	r4,r2
    55a4:	180b883a 	mov	r5,r3
    55a8:	00092000 	call	9200 <__subdf3>
    55ac:	980d883a 	mov	r6,r19
    55b0:	900f883a 	mov	r7,r18
    55b4:	1009883a 	mov	r4,r2
    55b8:	180b883a 	mov	r5,r3
    55bc:	0008ae80 	call	8ae8 <__muldf3>
    55c0:	0195ecb4 	movhi	r6,22450
    55c4:	01cfb1f4 	movhi	r7,16071
    55c8:	31bf9f44 	addi	r6,r6,-387
    55cc:	39c778c4 	addi	r7,r7,7651
    55d0:	1009883a 	mov	r4,r2
    55d4:	180b883a 	mov	r5,r3
    55d8:	00077f00 	call	77f0 <__adddf3>
    55dc:	980d883a 	mov	r6,r19
    55e0:	900f883a 	mov	r7,r18
    55e4:	1009883a 	mov	r4,r2
    55e8:	180b883a 	mov	r5,r3
    55ec:	0008ae80 	call	8ae8 <__muldf3>
    55f0:	01867074 	movhi	r6,6593
    55f4:	01cfcab4 	movhi	r7,16170
    55f8:	31987544 	addi	r6,r6,25045
    55fc:	39c06804 	addi	r7,r7,416
    5600:	1009883a 	mov	r4,r2
    5604:	180b883a 	mov	r5,r3
    5608:	00092000 	call	9200 <__subdf3>
    560c:	980d883a 	mov	r6,r19
    5610:	900f883a 	mov	r7,r18
    5614:	1009883a 	mov	r4,r2
    5618:	180b883a 	mov	r5,r3
    561c:	0008ae80 	call	8ae8 <__muldf3>
    5620:	01844474 	movhi	r6,4369
    5624:	01cfe074 	movhi	r7,16257
    5628:	31be2984 	addi	r6,r6,-1882
    562c:	39c44444 	addi	r7,r7,4369
    5630:	1009883a 	mov	r4,r2
    5634:	180b883a 	mov	r5,r3
    5638:	00077f00 	call	77f0 <__adddf3>
    563c:	1011883a 	mov	r8,r2
    5640:	d8800c17 	ldw	r2,48(sp)
    5644:	1839883a 	mov	fp,r3
    5648:	10003e26 	beq	r2,zero,5744 <__kernel_sin+0x264>
    564c:	000d883a 	mov	r6,zero
    5650:	01cff834 	movhi	r7,16352
    5654:	b809883a 	mov	r4,r23
    5658:	b00b883a 	mov	r5,r22
    565c:	da000015 	stw	r8,0(sp)
    5660:	0008ae80 	call	8ae8 <__muldf3>
    5664:	da000017 	ldw	r8,0(sp)
    5668:	e00f883a 	mov	r7,fp
    566c:	a809883a 	mov	r4,r21
    5670:	400d883a 	mov	r6,r8
    5674:	a00b883a 	mov	r5,r20
    5678:	d8c00115 	stw	r3,4(sp)
    567c:	d8800015 	stw	r2,0(sp)
    5680:	0008ae80 	call	8ae8 <__muldf3>
    5684:	da800017 	ldw	r10,0(sp)
    5688:	da400117 	ldw	r9,4(sp)
    568c:	100d883a 	mov	r6,r2
    5690:	5009883a 	mov	r4,r10
    5694:	480b883a 	mov	r5,r9
    5698:	180f883a 	mov	r7,r3
    569c:	00092000 	call	9200 <__subdf3>
    56a0:	980d883a 	mov	r6,r19
    56a4:	900f883a 	mov	r7,r18
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	0008ae80 	call	8ae8 <__muldf3>
    56b4:	b80d883a 	mov	r6,r23
    56b8:	b00f883a 	mov	r7,r22
    56bc:	1009883a 	mov	r4,r2
    56c0:	180b883a 	mov	r5,r3
    56c4:	00092000 	call	9200 <__subdf3>
    56c8:	01955574 	movhi	r6,21845
    56cc:	01cff174 	movhi	r7,16325
    56d0:	31955244 	addi	r6,r6,21833
    56d4:	39d55544 	addi	r7,r7,21845
    56d8:	a809883a 	mov	r4,r21
    56dc:	a00b883a 	mov	r5,r20
    56e0:	1027883a 	mov	r19,r2
    56e4:	1825883a 	mov	r18,r3
    56e8:	0008ae80 	call	8ae8 <__muldf3>
    56ec:	100d883a 	mov	r6,r2
    56f0:	180f883a 	mov	r7,r3
    56f4:	9809883a 	mov	r4,r19
    56f8:	900b883a 	mov	r5,r18
    56fc:	00077f00 	call	77f0 <__adddf3>
    5700:	100d883a 	mov	r6,r2
    5704:	180f883a 	mov	r7,r3
    5708:	8809883a 	mov	r4,r17
    570c:	800b883a 	mov	r5,r16
    5710:	00092000 	call	9200 <__subdf3>
    5714:	dfc00b17 	ldw	ra,44(sp)
    5718:	df000a17 	ldw	fp,40(sp)
    571c:	ddc00917 	ldw	r23,36(sp)
    5720:	dd800817 	ldw	r22,32(sp)
    5724:	dd400717 	ldw	r21,28(sp)
    5728:	dd000617 	ldw	r20,24(sp)
    572c:	dcc00517 	ldw	r19,20(sp)
    5730:	dc800417 	ldw	r18,16(sp)
    5734:	dc400317 	ldw	r17,12(sp)
    5738:	dc000217 	ldw	r16,8(sp)
    573c:	dec00c04 	addi	sp,sp,48
    5740:	f800283a 	ret
    5744:	400d883a 	mov	r6,r8
    5748:	9809883a 	mov	r4,r19
    574c:	900b883a 	mov	r5,r18
    5750:	180f883a 	mov	r7,r3
    5754:	0008ae80 	call	8ae8 <__muldf3>
    5758:	01955574 	movhi	r6,21845
    575c:	01cff174 	movhi	r7,16325
    5760:	31955244 	addi	r6,r6,21833
    5764:	39d55544 	addi	r7,r7,21845
    5768:	1009883a 	mov	r4,r2
    576c:	180b883a 	mov	r5,r3
    5770:	00092000 	call	9200 <__subdf3>
    5774:	a80d883a 	mov	r6,r21
    5778:	a00f883a 	mov	r7,r20
    577c:	1009883a 	mov	r4,r2
    5780:	180b883a 	mov	r5,r3
    5784:	0008ae80 	call	8ae8 <__muldf3>
    5788:	880d883a 	mov	r6,r17
    578c:	800f883a 	mov	r7,r16
    5790:	1009883a 	mov	r4,r2
    5794:	180b883a 	mov	r5,r3
    5798:	00077f00 	call	77f0 <__adddf3>
    579c:	003fdd06 	br	5714 <__ram_exceptions_end+0xfb0040cc>
    57a0:	8805883a 	mov	r2,r17
    57a4:	8007883a 	mov	r3,r16
    57a8:	003fda06 	br	5714 <__ram_exceptions_end+0xfb0040cc>

000057ac <__kernel_tan>:
    57ac:	02200034 	movhi	r8,32768
    57b0:	defff104 	addi	sp,sp,-60
    57b4:	423fffc4 	addi	r8,r8,-1
    57b8:	008f8c34 	movhi	r2,15920
    57bc:	dd800b15 	stw	r22,44(sp)
    57c0:	dd400a15 	stw	r21,40(sp)
    57c4:	dd000915 	stw	r20,36(sp)
    57c8:	dcc00815 	stw	r19,32(sp)
    57cc:	dc800715 	stw	r18,28(sp)
    57d0:	dfc00e15 	stw	ra,56(sp)
    57d4:	df000d15 	stw	fp,52(sp)
    57d8:	ddc00c15 	stw	r23,48(sp)
    57dc:	dc400615 	stw	r17,24(sp)
    57e0:	dc000515 	stw	r16,20(sp)
    57e4:	2a2c703a 	and	r22,r5,r8
    57e8:	d9400215 	stw	r5,8(sp)
    57ec:	10bfffc4 	addi	r2,r2,-1
    57f0:	2825883a 	mov	r18,r5
    57f4:	2027883a 	mov	r19,r4
    57f8:	302b883a 	mov	r21,r6
    57fc:	3829883a 	mov	r20,r7
    5800:	15801016 	blt	r2,r22,5844 <__kernel_tan+0x98>
    5804:	0009afc0 	call	9afc <__fixdfsi>
    5808:	10002b1e 	bne	r2,zero,58b8 <__kernel_tan+0x10c>
    580c:	d8c00f17 	ldw	r3,60(sp)
    5810:	b4d0b03a 	or	r8,r22,r19
    5814:	18800044 	addi	r2,r3,1
    5818:	4090b03a 	or	r8,r8,r2
    581c:	40016c26 	beq	r8,zero,5dd0 <__kernel_tan+0x624>
    5820:	d8c00f17 	ldw	r3,60(sp)
    5824:	00800044 	movi	r2,1
    5828:	18817826 	beq	r3,r2,5e0c <__kernel_tan+0x660>
    582c:	980d883a 	mov	r6,r19
    5830:	900f883a 	mov	r7,r18
    5834:	0009883a 	mov	r4,zero
    5838:	016ffc34 	movhi	r5,49136
    583c:	000809c0 	call	809c <__divdf3>
    5840:	00011e06 	br	5cbc <__kernel_tan+0x510>
    5844:	008ff9b4 	movhi	r2,16358
    5848:	10a509c4 	addi	r2,r2,-27609
    584c:	15801a0e 	bge	r2,r22,58b8 <__kernel_tan+0x10c>
    5850:	28016816 	blt	r5,zero,5df4 <__kernel_tan+0x648>
    5854:	01151134 	movhi	r4,21572
    5858:	014ffa74 	movhi	r5,16361
    585c:	980d883a 	mov	r6,r19
    5860:	900f883a 	mov	r7,r18
    5864:	210b4604 	addi	r4,r4,11544
    5868:	29487ec4 	addi	r5,r5,8699
    586c:	00092000 	call	9200 <__subdf3>
    5870:	010cc534 	movhi	r4,13076
    5874:	014f20b4 	movhi	r5,15490
    5878:	a80d883a 	mov	r6,r21
    587c:	a00f883a 	mov	r7,r20
    5880:	211701c4 	addi	r4,r4,23559
    5884:	29698984 	addi	r5,r5,-23002
    5888:	1023883a 	mov	r17,r2
    588c:	1821883a 	mov	r16,r3
    5890:	00092000 	call	9200 <__subdf3>
    5894:	880d883a 	mov	r6,r17
    5898:	800f883a 	mov	r7,r16
    589c:	1009883a 	mov	r4,r2
    58a0:	180b883a 	mov	r5,r3
    58a4:	00077f00 	call	77f0 <__adddf3>
    58a8:	002b883a 	mov	r21,zero
    58ac:	0029883a 	mov	r20,zero
    58b0:	1027883a 	mov	r19,r2
    58b4:	1825883a 	mov	r18,r3
    58b8:	980d883a 	mov	r6,r19
    58bc:	900f883a 	mov	r7,r18
    58c0:	9809883a 	mov	r4,r19
    58c4:	900b883a 	mov	r5,r18
    58c8:	0008ae80 	call	8ae8 <__muldf3>
    58cc:	100d883a 	mov	r6,r2
    58d0:	180f883a 	mov	r7,r3
    58d4:	1009883a 	mov	r4,r2
    58d8:	180b883a 	mov	r5,r3
    58dc:	1039883a 	mov	fp,r2
    58e0:	182f883a 	mov	r23,r3
    58e4:	0008ae80 	call	8ae8 <__muldf3>
    58e8:	e00d883a 	mov	r6,fp
    58ec:	b80f883a 	mov	r7,r23
    58f0:	9809883a 	mov	r4,r19
    58f4:	900b883a 	mov	r5,r18
    58f8:	1023883a 	mov	r17,r2
    58fc:	1821883a 	mov	r16,r3
    5900:	0008ae80 	call	8ae8 <__muldf3>
    5904:	019d2ff4 	movhi	r6,29887
    5908:	01cfbef4 	movhi	r7,16123
    590c:	8809883a 	mov	r4,r17
    5910:	800b883a 	mov	r5,r16
    5914:	319eb504 	addi	r6,r6,31444
    5918:	39ca9c04 	addi	r7,r7,10864
    591c:	d8800015 	stw	r2,0(sp)
    5920:	d8c00115 	stw	r3,4(sp)
    5924:	0008ae80 	call	8ae8 <__muldf3>
    5928:	018cbc74 	movhi	r6,13041
    592c:	01cfc4f4 	movhi	r7,16147
    5930:	31a9fa44 	addi	r6,r6,-22551
    5934:	39ee03c4 	addi	r7,r7,-18417
    5938:	1009883a 	mov	r4,r2
    593c:	180b883a 	mov	r5,r3
    5940:	00077f00 	call	77f0 <__adddf3>
    5944:	880d883a 	mov	r6,r17
    5948:	800f883a 	mov	r7,r16
    594c:	1009883a 	mov	r4,r2
    5950:	180b883a 	mov	r5,r3
    5954:	0008ae80 	call	8ae8 <__muldf3>
    5958:	0186a374 	movhi	r6,6797
    595c:	01cfcc34 	movhi	r7,16176
    5960:	31841a04 	addi	r6,r6,4200
    5964:	39c9bdc4 	addi	r7,r7,9975
    5968:	1009883a 	mov	r4,r2
    596c:	180b883a 	mov	r5,r3
    5970:	00077f00 	call	77f0 <__adddf3>
    5974:	880d883a 	mov	r6,r17
    5978:	800f883a 	mov	r7,r16
    597c:	1009883a 	mov	r4,r2
    5980:	180b883a 	mov	r5,r3
    5984:	0008ae80 	call	8ae8 <__muldf3>
    5988:	01bfb874 	movhi	r6,65249
    598c:	01cfd634 	movhi	r7,16216
    5990:	31a0c544 	addi	r6,r6,-31979
    5994:	39f6f204 	addi	r7,r7,-9272
    5998:	1009883a 	mov	r4,r2
    599c:	180b883a 	mov	r5,r3
    59a0:	00077f00 	call	77f0 <__adddf3>
    59a4:	880d883a 	mov	r6,r17
    59a8:	800f883a 	mov	r7,r16
    59ac:	1009883a 	mov	r4,r2
    59b0:	180b883a 	mov	r5,r3
    59b4:	0008ae80 	call	8ae8 <__muldf3>
    59b8:	01ba5bf4 	movhi	r6,59759
    59bc:	01cfe0b4 	movhi	r7,16258
    59c0:	31a124c4 	addi	r6,r6,-31597
    59c4:	39c9b8c4 	addi	r7,r7,9955
    59c8:	1009883a 	mov	r4,r2
    59cc:	180b883a 	mov	r5,r3
    59d0:	00077f00 	call	77f0 <__adddf3>
    59d4:	880d883a 	mov	r6,r17
    59d8:	800f883a 	mov	r7,r16
    59dc:	1009883a 	mov	r4,r2
    59e0:	180b883a 	mov	r5,r3
    59e4:	0008ae80 	call	8ae8 <__muldf3>
    59e8:	0186ecf4 	movhi	r6,7091
    59ec:	01cfeb34 	movhi	r7,16300
    59f0:	31907f84 	addi	r6,r6,16894
    59f4:	39e86e84 	addi	r7,r7,-24134
    59f8:	1009883a 	mov	r4,r2
    59fc:	180b883a 	mov	r5,r3
    5a00:	00077f00 	call	77f0 <__adddf3>
    5a04:	e00d883a 	mov	r6,fp
    5a08:	b80f883a 	mov	r7,r23
    5a0c:	1009883a 	mov	r4,r2
    5a10:	180b883a 	mov	r5,r3
    5a14:	0008ae80 	call	8ae8 <__muldf3>
    5a18:	01b6d834 	movhi	r6,56160
    5a1c:	01efbcf4 	movhi	r7,48883
    5a20:	8809883a 	mov	r4,r17
    5a24:	800b883a 	mov	r5,r16
    5a28:	3194dcc4 	addi	r6,r6,21363
    5a2c:	39dd72c4 	addi	r7,r7,30155
    5a30:	d8c00415 	stw	r3,16(sp)
    5a34:	d8800315 	stw	r2,12(sp)
    5a38:	0008ae80 	call	8ae8 <__muldf3>
    5a3c:	01a80e34 	movhi	r6,41016
    5a40:	01cfc534 	movhi	r7,16148
    5a44:	31a4a984 	addi	r6,r6,-27994
    5a48:	39dfa204 	addi	r7,r7,32392
    5a4c:	1009883a 	mov	r4,r2
    5a50:	180b883a 	mov	r5,r3
    5a54:	00077f00 	call	77f0 <__adddf3>
    5a58:	880d883a 	mov	r6,r17
    5a5c:	800f883a 	mov	r7,r16
    5a60:	1009883a 	mov	r4,r2
    5a64:	180b883a 	mov	r5,r3
    5a68:	0008ae80 	call	8ae8 <__muldf3>
    5a6c:	01bcbcb4 	movhi	r6,62194
    5a70:	01cfd0f4 	movhi	r7,16195
    5a74:	31994044 	addi	r6,r6,25857
    5a78:	39d13604 	addi	r7,r7,17624
    5a7c:	1009883a 	mov	r4,r2
    5a80:	180b883a 	mov	r5,r3
    5a84:	00077f00 	call	77f0 <__adddf3>
    5a88:	880d883a 	mov	r6,r17
    5a8c:	800f883a 	mov	r7,r16
    5a90:	1009883a 	mov	r4,r2
    5a94:	180b883a 	mov	r5,r3
    5a98:	0008ae80 	call	8ae8 <__muldf3>
    5a9c:	01b255b4 	movhi	r6,51542
    5aa0:	01cfdb74 	movhi	r7,16237
    5aa4:	3180ca04 	addi	r6,r6,808
    5aa8:	39db4884 	addi	r7,r7,27938
    5aac:	1009883a 	mov	r4,r2
    5ab0:	180b883a 	mov	r5,r3
    5ab4:	00077f00 	call	77f0 <__adddf3>
    5ab8:	880d883a 	mov	r6,r17
    5abc:	800f883a 	mov	r7,r16
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	180b883a 	mov	r5,r3
    5ac8:	0008ae80 	call	8ae8 <__muldf3>
    5acc:	01a101f4 	movhi	r6,33799
    5ad0:	01cfe5b4 	movhi	r7,16278
    5ad4:	31b58dc4 	addi	r6,r6,-10697
    5ad8:	39d93d04 	addi	r7,r7,25844
    5adc:	1009883a 	mov	r4,r2
    5ae0:	180b883a 	mov	r5,r3
    5ae4:	00077f00 	call	77f0 <__adddf3>
    5ae8:	880d883a 	mov	r6,r17
    5aec:	800f883a 	mov	r7,r16
    5af0:	1009883a 	mov	r4,r2
    5af4:	180b883a 	mov	r5,r3
    5af8:	0008ae80 	call	8ae8 <__muldf3>
    5afc:	01844474 	movhi	r6,4369
    5b00:	01cff074 	movhi	r7,16321
    5b04:	31bf9e84 	addi	r6,r6,-390
    5b08:	39c44444 	addi	r7,r7,4369
    5b0c:	1009883a 	mov	r4,r2
    5b10:	180b883a 	mov	r5,r3
    5b14:	00077f00 	call	77f0 <__adddf3>
    5b18:	db000317 	ldw	r12,12(sp)
    5b1c:	dac00417 	ldw	r11,16(sp)
    5b20:	100d883a 	mov	r6,r2
    5b24:	6009883a 	mov	r4,r12
    5b28:	580b883a 	mov	r5,r11
    5b2c:	180f883a 	mov	r7,r3
    5b30:	00077f00 	call	77f0 <__adddf3>
    5b34:	d9800017 	ldw	r6,0(sp)
    5b38:	d9c00117 	ldw	r7,4(sp)
    5b3c:	1009883a 	mov	r4,r2
    5b40:	180b883a 	mov	r5,r3
    5b44:	0008ae80 	call	8ae8 <__muldf3>
    5b48:	a80d883a 	mov	r6,r21
    5b4c:	a00f883a 	mov	r7,r20
    5b50:	1009883a 	mov	r4,r2
    5b54:	180b883a 	mov	r5,r3
    5b58:	00077f00 	call	77f0 <__adddf3>
    5b5c:	e00d883a 	mov	r6,fp
    5b60:	b80f883a 	mov	r7,r23
    5b64:	1009883a 	mov	r4,r2
    5b68:	180b883a 	mov	r5,r3
    5b6c:	0008ae80 	call	8ae8 <__muldf3>
    5b70:	a809883a 	mov	r4,r21
    5b74:	a00b883a 	mov	r5,r20
    5b78:	100d883a 	mov	r6,r2
    5b7c:	180f883a 	mov	r7,r3
    5b80:	00077f00 	call	77f0 <__adddf3>
    5b84:	d9000017 	ldw	r4,0(sp)
    5b88:	d9400117 	ldw	r5,4(sp)
    5b8c:	01955574 	movhi	r6,21845
    5b90:	01cff574 	movhi	r7,16341
    5b94:	319558c4 	addi	r6,r6,21859
    5b98:	39d55544 	addi	r7,r7,21845
    5b9c:	1023883a 	mov	r17,r2
    5ba0:	1821883a 	mov	r16,r3
    5ba4:	0008ae80 	call	8ae8 <__muldf3>
    5ba8:	880d883a 	mov	r6,r17
    5bac:	800f883a 	mov	r7,r16
    5bb0:	1009883a 	mov	r4,r2
    5bb4:	180b883a 	mov	r5,r3
    5bb8:	00077f00 	call	77f0 <__adddf3>
    5bbc:	100d883a 	mov	r6,r2
    5bc0:	180f883a 	mov	r7,r3
    5bc4:	9809883a 	mov	r4,r19
    5bc8:	900b883a 	mov	r5,r18
    5bcc:	102b883a 	mov	r21,r2
    5bd0:	1829883a 	mov	r20,r3
    5bd4:	00077f00 	call	77f0 <__adddf3>
    5bd8:	1023883a 	mov	r17,r2
    5bdc:	008ff9b4 	movhi	r2,16358
    5be0:	10a509c4 	addi	r2,r2,-27609
    5be4:	1821883a 	mov	r16,r3
    5be8:	15804016 	blt	r2,r22,5cec <__kernel_tan+0x540>
    5bec:	d8c00f17 	ldw	r3,60(sp)
    5bf0:	00800044 	movi	r2,1
    5bf4:	18808226 	beq	r3,r2,5e00 <__kernel_tan+0x654>
    5bf8:	880d883a 	mov	r6,r17
    5bfc:	0009883a 	mov	r4,zero
    5c00:	016ffc34 	movhi	r5,49136
    5c04:	800f883a 	mov	r7,r16
    5c08:	000809c0 	call	809c <__divdf3>
    5c0c:	980d883a 	mov	r6,r19
    5c10:	900f883a 	mov	r7,r18
    5c14:	0009883a 	mov	r4,zero
    5c18:	800b883a 	mov	r5,r16
    5c1c:	1823883a 	mov	r17,r3
    5c20:	102d883a 	mov	r22,r2
    5c24:	00092000 	call	9200 <__subdf3>
    5c28:	100d883a 	mov	r6,r2
    5c2c:	180f883a 	mov	r7,r3
    5c30:	a809883a 	mov	r4,r21
    5c34:	a00b883a 	mov	r5,r20
    5c38:	00092000 	call	9200 <__subdf3>
    5c3c:	000d883a 	mov	r6,zero
    5c40:	880f883a 	mov	r7,r17
    5c44:	1009883a 	mov	r4,r2
    5c48:	180b883a 	mov	r5,r3
    5c4c:	0008ae80 	call	8ae8 <__muldf3>
    5c50:	000d883a 	mov	r6,zero
    5c54:	880f883a 	mov	r7,r17
    5c58:	0009883a 	mov	r4,zero
    5c5c:	800b883a 	mov	r5,r16
    5c60:	1027883a 	mov	r19,r2
    5c64:	1825883a 	mov	r18,r3
    5c68:	0008ae80 	call	8ae8 <__muldf3>
    5c6c:	000d883a 	mov	r6,zero
    5c70:	01cffc34 	movhi	r7,16368
    5c74:	1009883a 	mov	r4,r2
    5c78:	180b883a 	mov	r5,r3
    5c7c:	00077f00 	call	77f0 <__adddf3>
    5c80:	100d883a 	mov	r6,r2
    5c84:	180f883a 	mov	r7,r3
    5c88:	9809883a 	mov	r4,r19
    5c8c:	900b883a 	mov	r5,r18
    5c90:	00077f00 	call	77f0 <__adddf3>
    5c94:	b00d883a 	mov	r6,r22
    5c98:	880f883a 	mov	r7,r17
    5c9c:	1009883a 	mov	r4,r2
    5ca0:	180b883a 	mov	r5,r3
    5ca4:	0008ae80 	call	8ae8 <__muldf3>
    5ca8:	000d883a 	mov	r6,zero
    5cac:	880f883a 	mov	r7,r17
    5cb0:	1009883a 	mov	r4,r2
    5cb4:	180b883a 	mov	r5,r3
    5cb8:	00077f00 	call	77f0 <__adddf3>
    5cbc:	dfc00e17 	ldw	ra,56(sp)
    5cc0:	df000d17 	ldw	fp,52(sp)
    5cc4:	ddc00c17 	ldw	r23,48(sp)
    5cc8:	dd800b17 	ldw	r22,44(sp)
    5ccc:	dd400a17 	ldw	r21,40(sp)
    5cd0:	dd000917 	ldw	r20,36(sp)
    5cd4:	dcc00817 	ldw	r19,32(sp)
    5cd8:	dc800717 	ldw	r18,28(sp)
    5cdc:	dc400617 	ldw	r17,24(sp)
    5ce0:	dc000517 	ldw	r16,20(sp)
    5ce4:	dec00f04 	addi	sp,sp,60
    5ce8:	f800283a 	ret
    5cec:	d9000f17 	ldw	r4,60(sp)
    5cf0:	0009b7c0 	call	9b7c <__floatsidf>
    5cf4:	880d883a 	mov	r6,r17
    5cf8:	800f883a 	mov	r7,r16
    5cfc:	8809883a 	mov	r4,r17
    5d00:	800b883a 	mov	r5,r16
    5d04:	1039883a 	mov	fp,r2
    5d08:	182f883a 	mov	r23,r3
    5d0c:	0008ae80 	call	8ae8 <__muldf3>
    5d10:	e00d883a 	mov	r6,fp
    5d14:	b80f883a 	mov	r7,r23
    5d18:	8809883a 	mov	r4,r17
    5d1c:	800b883a 	mov	r5,r16
    5d20:	d8c00415 	stw	r3,16(sp)
    5d24:	d8800315 	stw	r2,12(sp)
    5d28:	00077f00 	call	77f0 <__adddf3>
    5d2c:	da400317 	ldw	r9,12(sp)
    5d30:	da000417 	ldw	r8,16(sp)
    5d34:	100d883a 	mov	r6,r2
    5d38:	4809883a 	mov	r4,r9
    5d3c:	400b883a 	mov	r5,r8
    5d40:	180f883a 	mov	r7,r3
    5d44:	000809c0 	call	809c <__divdf3>
    5d48:	a80d883a 	mov	r6,r21
    5d4c:	a00f883a 	mov	r7,r20
    5d50:	1009883a 	mov	r4,r2
    5d54:	180b883a 	mov	r5,r3
    5d58:	00092000 	call	9200 <__subdf3>
    5d5c:	9809883a 	mov	r4,r19
    5d60:	900b883a 	mov	r5,r18
    5d64:	100d883a 	mov	r6,r2
    5d68:	180f883a 	mov	r7,r3
    5d6c:	00092000 	call	9200 <__subdf3>
    5d70:	100d883a 	mov	r6,r2
    5d74:	180f883a 	mov	r7,r3
    5d78:	1009883a 	mov	r4,r2
    5d7c:	180b883a 	mov	r5,r3
    5d80:	00077f00 	call	77f0 <__adddf3>
    5d84:	b80b883a 	mov	r5,r23
    5d88:	100d883a 	mov	r6,r2
    5d8c:	180f883a 	mov	r7,r3
    5d90:	e009883a 	mov	r4,fp
    5d94:	00092000 	call	9200 <__subdf3>
    5d98:	1023883a 	mov	r17,r2
    5d9c:	d8800217 	ldw	r2,8(sp)
    5da0:	01000044 	movi	r4,1
    5da4:	1821883a 	mov	r16,r3
    5da8:	102dd7ba 	srai	r22,r2,30
    5dac:	b580008c 	andi	r22,r22,2
    5db0:	2589c83a 	sub	r4,r4,r22
    5db4:	0009b7c0 	call	9b7c <__floatsidf>
    5db8:	100d883a 	mov	r6,r2
    5dbc:	180f883a 	mov	r7,r3
    5dc0:	8809883a 	mov	r4,r17
    5dc4:	800b883a 	mov	r5,r16
    5dc8:	0008ae80 	call	8ae8 <__muldf3>
    5dcc:	003fbb06 	br	5cbc <__ram_exceptions_end+0xfb004674>
    5dd0:	9809883a 	mov	r4,r19
    5dd4:	900b883a 	mov	r5,r18
    5dd8:	0005e180 	call	5e18 <fabs>
    5ddc:	100d883a 	mov	r6,r2
    5de0:	180f883a 	mov	r7,r3
    5de4:	0009883a 	mov	r4,zero
    5de8:	014ffc34 	movhi	r5,16368
    5dec:	000809c0 	call	809c <__divdf3>
    5df0:	003fb206 	br	5cbc <__ram_exceptions_end+0xfb004674>
    5df4:	2ca0003c 	xorhi	r18,r5,32768
    5df8:	3d20003c 	xorhi	r20,r7,32768
    5dfc:	003e9506 	br	5854 <__ram_exceptions_end+0xfb00420c>
    5e00:	8805883a 	mov	r2,r17
    5e04:	8007883a 	mov	r3,r16
    5e08:	003fac06 	br	5cbc <__ram_exceptions_end+0xfb004674>
    5e0c:	9805883a 	mov	r2,r19
    5e10:	9007883a 	mov	r3,r18
    5e14:	003fa906 	br	5cbc <__ram_exceptions_end+0xfb004674>

00005e18 <fabs>:
    5e18:	00e00034 	movhi	r3,32768
    5e1c:	18ffffc4 	addi	r3,r3,-1
    5e20:	2005883a 	mov	r2,r4
    5e24:	28c6703a 	and	r3,r5,r3
    5e28:	f800283a 	ret

00005e2c <floor>:
    5e2c:	2811d53a 	srai	r8,r5,20
    5e30:	defffa04 	addi	sp,sp,-24
    5e34:	dcc00315 	stw	r19,12(sp)
    5e38:	4201ffcc 	andi	r8,r8,2047
    5e3c:	dc800215 	stw	r18,8(sp)
    5e40:	dc400115 	stw	r17,4(sp)
    5e44:	dc000015 	stw	r16,0(sp)
    5e48:	dfc00515 	stw	ra,20(sp)
    5e4c:	dd000415 	stw	r20,16(sp)
    5e50:	44bf0044 	addi	r18,r8,-1023
    5e54:	018004c4 	movi	r6,19
    5e58:	2821883a 	mov	r16,r5
    5e5c:	2005883a 	mov	r2,r4
    5e60:	280f883a 	mov	r7,r5
    5e64:	2827883a 	mov	r19,r5
    5e68:	2023883a 	mov	r17,r4
    5e6c:	34801916 	blt	r6,r18,5ed4 <floor+0xa8>
    5e70:	90003c16 	blt	r18,zero,5f64 <floor+0x138>
    5e74:	05000434 	movhi	r20,16
    5e78:	a53fffc4 	addi	r20,r20,-1
    5e7c:	a4a9d83a 	sra	r20,r20,r18
    5e80:	2d0c703a 	and	r6,r5,r20
    5e84:	310cb03a 	or	r6,r6,r4
    5e88:	30001626 	beq	r6,zero,5ee4 <floor+0xb8>
    5e8c:	01a20034 	movhi	r6,34816
    5e90:	01df8e34 	movhi	r7,32312
    5e94:	319d6704 	addi	r6,r6,30108
    5e98:	39f90f04 	addi	r7,r7,-7108
    5e9c:	00077f00 	call	77f0 <__adddf3>
    5ea0:	000d883a 	mov	r6,zero
    5ea4:	000f883a 	mov	r7,zero
    5ea8:	1009883a 	mov	r4,r2
    5eac:	180b883a 	mov	r5,r3
    5eb0:	0008a0c0 	call	8a0c <__gedf2>
    5eb4:	0080040e 	bge	zero,r2,5ec8 <floor+0x9c>
    5eb8:	80003c16 	blt	r16,zero,5fac <floor+0x180>
    5ebc:	0520303a 	nor	r16,zero,r20
    5ec0:	84e0703a 	and	r16,r16,r19
    5ec4:	0023883a 	mov	r17,zero
    5ec8:	8805883a 	mov	r2,r17
    5ecc:	8007883a 	mov	r3,r16
    5ed0:	00000506 	br	5ee8 <floor+0xbc>
    5ed4:	01800cc4 	movi	r6,51
    5ed8:	34800b0e 	bge	r6,r18,5f08 <floor+0xdc>
    5edc:	01810004 	movi	r6,1024
    5ee0:	91802f26 	beq	r18,r6,5fa0 <floor+0x174>
    5ee4:	3807883a 	mov	r3,r7
    5ee8:	dfc00517 	ldw	ra,20(sp)
    5eec:	dd000417 	ldw	r20,16(sp)
    5ef0:	dcc00317 	ldw	r19,12(sp)
    5ef4:	dc800217 	ldw	r18,8(sp)
    5ef8:	dc400117 	ldw	r17,4(sp)
    5efc:	dc000017 	ldw	r16,0(sp)
    5f00:	dec00604 	addi	sp,sp,24
    5f04:	f800283a 	ret
    5f08:	423efb44 	addi	r8,r8,-1043
    5f0c:	053fffc4 	movi	r20,-1
    5f10:	a228d83a 	srl	r20,r20,r8
    5f14:	250c703a 	and	r6,r4,r20
    5f18:	303ff226 	beq	r6,zero,5ee4 <__ram_exceptions_end+0xfb00489c>
    5f1c:	01a20034 	movhi	r6,34816
    5f20:	01df8e34 	movhi	r7,32312
    5f24:	319d6704 	addi	r6,r6,30108
    5f28:	39f90f04 	addi	r7,r7,-7108
    5f2c:	00077f00 	call	77f0 <__adddf3>
    5f30:	000d883a 	mov	r6,zero
    5f34:	000f883a 	mov	r7,zero
    5f38:	1009883a 	mov	r4,r2
    5f3c:	180b883a 	mov	r5,r3
    5f40:	0008a0c0 	call	8a0c <__gedf2>
    5f44:	00bfe00e 	bge	zero,r2,5ec8 <__ram_exceptions_end+0xfb004880>
    5f48:	80001c16 	blt	r16,zero,5fbc <floor+0x190>
    5f4c:	0510303a 	nor	r8,zero,r20
    5f50:	9821883a 	mov	r16,r19
    5f54:	8a22703a 	and	r17,r17,r8
    5f58:	8805883a 	mov	r2,r17
    5f5c:	8007883a 	mov	r3,r16
    5f60:	003fe106 	br	5ee8 <__ram_exceptions_end+0xfb0048a0>
    5f64:	01a20034 	movhi	r6,34816
    5f68:	01df8e34 	movhi	r7,32312
    5f6c:	319d6704 	addi	r6,r6,30108
    5f70:	39f90f04 	addi	r7,r7,-7108
    5f74:	00077f00 	call	77f0 <__adddf3>
    5f78:	000d883a 	mov	r6,zero
    5f7c:	000f883a 	mov	r7,zero
    5f80:	1009883a 	mov	r4,r2
    5f84:	180b883a 	mov	r5,r3
    5f88:	0008a0c0 	call	8a0c <__gedf2>
    5f8c:	00bfce0e 	bge	zero,r2,5ec8 <__ram_exceptions_end+0xfb004880>
    5f90:	80001516 	blt	r16,zero,5fe8 <floor+0x1bc>
    5f94:	0023883a 	mov	r17,zero
    5f98:	0021883a 	mov	r16,zero
    5f9c:	003fca06 	br	5ec8 <__ram_exceptions_end+0xfb004880>
    5fa0:	200d883a 	mov	r6,r4
    5fa4:	00077f00 	call	77f0 <__adddf3>
    5fa8:	003fcf06 	br	5ee8 <__ram_exceptions_end+0xfb0048a0>
    5fac:	00800434 	movhi	r2,16
    5fb0:	14a5d83a 	sra	r18,r2,r18
    5fb4:	84a7883a 	add	r19,r16,r18
    5fb8:	003fc006 	br	5ebc <__ram_exceptions_end+0xfb004874>
    5fbc:	00800504 	movi	r2,20
    5fc0:	90801326 	beq	r18,r2,6010 <floor+0x1e4>
    5fc4:	00800d04 	movi	r2,52
    5fc8:	14a5c83a 	sub	r18,r2,r18
    5fcc:	00800044 	movi	r2,1
    5fd0:	1484983a 	sll	r2,r2,r18
    5fd4:	1445883a 	add	r2,r2,r17
    5fd8:	14400b2e 	bgeu	r2,r17,6008 <floor+0x1dc>
    5fdc:	84c00044 	addi	r19,r16,1
    5fe0:	1023883a 	mov	r17,r2
    5fe4:	003fd906 	br	5f4c <__ram_exceptions_end+0xfb004904>
    5fe8:	00a00034 	movhi	r2,32768
    5fec:	10bfffc4 	addi	r2,r2,-1
    5ff0:	8084703a 	and	r2,r16,r2
    5ff4:	1462b03a 	or	r17,r2,r17
    5ff8:	883fb326 	beq	r17,zero,5ec8 <__ram_exceptions_end+0xfb004880>
    5ffc:	0023883a 	mov	r17,zero
    6000:	042ffc34 	movhi	r16,49136
    6004:	003fb006 	br	5ec8 <__ram_exceptions_end+0xfb004880>
    6008:	1023883a 	mov	r17,r2
    600c:	003fcf06 	br	5f4c <__ram_exceptions_end+0xfb004904>
    6010:	84c00044 	addi	r19,r16,1
    6014:	003fcd06 	br	5f4c <__ram_exceptions_end+0xfb004904>

00006018 <scalbn>:
    6018:	2a1ffc2c 	andhi	r8,r5,32752
    601c:	4011d53a 	srai	r8,r8,20
    6020:	defffe04 	addi	sp,sp,-8
    6024:	dc000015 	stw	r16,0(sp)
    6028:	dfc00115 	stw	ra,4(sp)
    602c:	280f883a 	mov	r7,r5
    6030:	2015883a 	mov	r10,r4
    6034:	3021883a 	mov	r16,r6
    6038:	40001e1e 	bne	r8,zero,60b4 <scalbn+0x9c>
    603c:	00a00034 	movhi	r2,32768
    6040:	10bfffc4 	addi	r2,r2,-1
    6044:	2884703a 	and	r2,r5,r2
    6048:	1104b03a 	or	r2,r2,r4
    604c:	10002226 	beq	r2,zero,60d8 <scalbn+0xc0>
    6050:	01d0d434 	movhi	r7,17232
    6054:	000d883a 	mov	r6,zero
    6058:	0008ae80 	call	8ae8 <__muldf3>
    605c:	013ffff4 	movhi	r4,65535
    6060:	210f2c04 	addi	r4,r4,15536
    6064:	1015883a 	mov	r10,r2
    6068:	180f883a 	mov	r7,r3
    606c:	81002a16 	blt	r16,r4,6118 <scalbn+0x100>
    6070:	191ffc2c 	andhi	r4,r3,32752
    6074:	2009d53a 	srai	r4,r4,20
    6078:	223ff284 	addi	r8,r4,-54
    607c:	8211883a 	add	r8,r16,r8
    6080:	0081ff84 	movi	r2,2046
    6084:	12002f16 	blt	r2,r8,6144 <scalbn+0x12c>
    6088:	0200190e 	bge	zero,r8,60f0 <scalbn+0xd8>
    608c:	4010953a 	slli	r8,r8,20
    6090:	01600434 	movhi	r5,32784
    6094:	297fffc4 	addi	r5,r5,-1
    6098:	194e703a 	and	r7,r3,r5
    609c:	5005883a 	mov	r2,r10
    60a0:	3a06b03a 	or	r3,r7,r8
    60a4:	dfc00117 	ldw	ra,4(sp)
    60a8:	dc000017 	ldw	r16,0(sp)
    60ac:	dec00204 	addi	sp,sp,8
    60b0:	f800283a 	ret
    60b4:	0081ffc4 	movi	r2,2047
    60b8:	2807883a 	mov	r3,r5
    60bc:	40bfef1e 	bne	r8,r2,607c <__ram_exceptions_end+0xfb004a34>
    60c0:	200d883a 	mov	r6,r4
    60c4:	00077f00 	call	77f0 <__adddf3>
    60c8:	dfc00117 	ldw	ra,4(sp)
    60cc:	dc000017 	ldw	r16,0(sp)
    60d0:	dec00204 	addi	sp,sp,8
    60d4:	f800283a 	ret
    60d8:	2005883a 	mov	r2,r4
    60dc:	2807883a 	mov	r3,r5
    60e0:	dfc00117 	ldw	ra,4(sp)
    60e4:	dc000017 	ldw	r16,0(sp)
    60e8:	dec00204 	addi	sp,sp,8
    60ec:	f800283a 	ret
    60f0:	00bff2c4 	movi	r2,-53
    60f4:	4080240e 	bge	r8,r2,6188 <scalbn+0x170>
    60f8:	00b0d414 	movui	r2,50000
    60fc:	14001116 	blt	r2,r16,6144 <scalbn+0x12c>
    6100:	0130be74 	movhi	r4,49913
    6104:	01406974 	movhi	r5,421
    6108:	213cd644 	addi	r4,r4,-3239
    610c:	295b87c4 	addi	r5,r5,28191
    6110:	500d883a 	mov	r6,r10
    6114:	00061b40 	call	61b4 <copysign>
    6118:	01b0be74 	movhi	r6,49913
    611c:	01c06974 	movhi	r7,421
    6120:	31bcd644 	addi	r6,r6,-3239
    6124:	39db87c4 	addi	r7,r7,28191
    6128:	1009883a 	mov	r4,r2
    612c:	180b883a 	mov	r5,r3
    6130:	0008ae80 	call	8ae8 <__muldf3>
    6134:	dfc00117 	ldw	ra,4(sp)
    6138:	dc000017 	ldw	r16,0(sp)
    613c:	dec00204 	addi	sp,sp,8
    6140:	f800283a 	ret
    6144:	01220034 	movhi	r4,34816
    6148:	015f8e34 	movhi	r5,32312
    614c:	500d883a 	mov	r6,r10
    6150:	211d6704 	addi	r4,r4,30108
    6154:	29790f04 	addi	r5,r5,-7108
    6158:	00061b40 	call	61b4 <copysign>
    615c:	01a20034 	movhi	r6,34816
    6160:	01df8e34 	movhi	r7,32312
    6164:	319d6704 	addi	r6,r6,30108
    6168:	39f90f04 	addi	r7,r7,-7108
    616c:	1009883a 	mov	r4,r2
    6170:	180b883a 	mov	r5,r3
    6174:	0008ae80 	call	8ae8 <__muldf3>
    6178:	dfc00117 	ldw	ra,4(sp)
    617c:	dc000017 	ldw	r16,0(sp)
    6180:	dec00204 	addi	sp,sp,8
    6184:	f800283a 	ret
    6188:	42000d84 	addi	r8,r8,54
    618c:	4012953a 	slli	r9,r8,20
    6190:	01e00434 	movhi	r7,32784
    6194:	39ffffc4 	addi	r7,r7,-1
    6198:	19ca703a 	and	r5,r3,r7
    619c:	000d883a 	mov	r6,zero
    61a0:	01cf2434 	movhi	r7,15504
    61a4:	5009883a 	mov	r4,r10
    61a8:	494ab03a 	or	r5,r9,r5
    61ac:	0008ae80 	call	8ae8 <__muldf3>
    61b0:	003fbc06 	br	60a4 <__ram_exceptions_end+0xfb004a5c>

000061b4 <copysign>:
    61b4:	2005883a 	mov	r2,r4
    61b8:	01200034 	movhi	r4,32768
    61bc:	213fffc4 	addi	r4,r4,-1
    61c0:	38e0002c 	andhi	r3,r7,32768
    61c4:	290a703a 	and	r5,r5,r4
    61c8:	28c6b03a 	or	r3,r5,r3
    61cc:	f800283a 	ret

000061d0 <__divsi3>:
    61d0:	20001b16 	blt	r4,zero,6240 <__divsi3+0x70>
    61d4:	000f883a 	mov	r7,zero
    61d8:	28001616 	blt	r5,zero,6234 <__divsi3+0x64>
    61dc:	200d883a 	mov	r6,r4
    61e0:	29001a2e 	bgeu	r5,r4,624c <__divsi3+0x7c>
    61e4:	00800804 	movi	r2,32
    61e8:	00c00044 	movi	r3,1
    61ec:	00000106 	br	61f4 <__divsi3+0x24>
    61f0:	10000d26 	beq	r2,zero,6228 <__divsi3+0x58>
    61f4:	294b883a 	add	r5,r5,r5
    61f8:	10bfffc4 	addi	r2,r2,-1
    61fc:	18c7883a 	add	r3,r3,r3
    6200:	293ffb36 	bltu	r5,r4,61f0 <__ram_exceptions_end+0xfb004ba8>
    6204:	0005883a 	mov	r2,zero
    6208:	18000726 	beq	r3,zero,6228 <__divsi3+0x58>
    620c:	0005883a 	mov	r2,zero
    6210:	31400236 	bltu	r6,r5,621c <__divsi3+0x4c>
    6214:	314dc83a 	sub	r6,r6,r5
    6218:	10c4b03a 	or	r2,r2,r3
    621c:	1806d07a 	srli	r3,r3,1
    6220:	280ad07a 	srli	r5,r5,1
    6224:	183ffa1e 	bne	r3,zero,6210 <__ram_exceptions_end+0xfb004bc8>
    6228:	38000126 	beq	r7,zero,6230 <__divsi3+0x60>
    622c:	0085c83a 	sub	r2,zero,r2
    6230:	f800283a 	ret
    6234:	014bc83a 	sub	r5,zero,r5
    6238:	39c0005c 	xori	r7,r7,1
    623c:	003fe706 	br	61dc <__ram_exceptions_end+0xfb004b94>
    6240:	0109c83a 	sub	r4,zero,r4
    6244:	01c00044 	movi	r7,1
    6248:	003fe306 	br	61d8 <__ram_exceptions_end+0xfb004b90>
    624c:	00c00044 	movi	r3,1
    6250:	003fee06 	br	620c <__ram_exceptions_end+0xfb004bc4>

00006254 <__modsi3>:
    6254:	20001716 	blt	r4,zero,62b4 <__modsi3+0x60>
    6258:	000f883a 	mov	r7,zero
    625c:	2005883a 	mov	r2,r4
    6260:	28001216 	blt	r5,zero,62ac <__modsi3+0x58>
    6264:	2900162e 	bgeu	r5,r4,62c0 <__modsi3+0x6c>
    6268:	01800804 	movi	r6,32
    626c:	00c00044 	movi	r3,1
    6270:	00000106 	br	6278 <__modsi3+0x24>
    6274:	30000a26 	beq	r6,zero,62a0 <__modsi3+0x4c>
    6278:	294b883a 	add	r5,r5,r5
    627c:	31bfffc4 	addi	r6,r6,-1
    6280:	18c7883a 	add	r3,r3,r3
    6284:	293ffb36 	bltu	r5,r4,6274 <__ram_exceptions_end+0xfb004c2c>
    6288:	18000526 	beq	r3,zero,62a0 <__modsi3+0x4c>
    628c:	1806d07a 	srli	r3,r3,1
    6290:	11400136 	bltu	r2,r5,6298 <__modsi3+0x44>
    6294:	1145c83a 	sub	r2,r2,r5
    6298:	280ad07a 	srli	r5,r5,1
    629c:	183ffb1e 	bne	r3,zero,628c <__ram_exceptions_end+0xfb004c44>
    62a0:	38000126 	beq	r7,zero,62a8 <__modsi3+0x54>
    62a4:	0085c83a 	sub	r2,zero,r2
    62a8:	f800283a 	ret
    62ac:	014bc83a 	sub	r5,zero,r5
    62b0:	003fec06 	br	6264 <__ram_exceptions_end+0xfb004c1c>
    62b4:	0109c83a 	sub	r4,zero,r4
    62b8:	01c00044 	movi	r7,1
    62bc:	003fe706 	br	625c <__ram_exceptions_end+0xfb004c14>
    62c0:	00c00044 	movi	r3,1
    62c4:	003ff106 	br	628c <__ram_exceptions_end+0xfb004c44>

000062c8 <__udivsi3>:
    62c8:	200d883a 	mov	r6,r4
    62cc:	2900152e 	bgeu	r5,r4,6324 <__udivsi3+0x5c>
    62d0:	28001416 	blt	r5,zero,6324 <__udivsi3+0x5c>
    62d4:	00800804 	movi	r2,32
    62d8:	00c00044 	movi	r3,1
    62dc:	00000206 	br	62e8 <__udivsi3+0x20>
    62e0:	10000e26 	beq	r2,zero,631c <__udivsi3+0x54>
    62e4:	28000516 	blt	r5,zero,62fc <__udivsi3+0x34>
    62e8:	294b883a 	add	r5,r5,r5
    62ec:	10bfffc4 	addi	r2,r2,-1
    62f0:	18c7883a 	add	r3,r3,r3
    62f4:	293ffa36 	bltu	r5,r4,62e0 <__ram_exceptions_end+0xfb004c98>
    62f8:	18000826 	beq	r3,zero,631c <__udivsi3+0x54>
    62fc:	0005883a 	mov	r2,zero
    6300:	31400236 	bltu	r6,r5,630c <__udivsi3+0x44>
    6304:	314dc83a 	sub	r6,r6,r5
    6308:	10c4b03a 	or	r2,r2,r3
    630c:	1806d07a 	srli	r3,r3,1
    6310:	280ad07a 	srli	r5,r5,1
    6314:	183ffa1e 	bne	r3,zero,6300 <__ram_exceptions_end+0xfb004cb8>
    6318:	f800283a 	ret
    631c:	0005883a 	mov	r2,zero
    6320:	f800283a 	ret
    6324:	00c00044 	movi	r3,1
    6328:	003ff406 	br	62fc <__ram_exceptions_end+0xfb004cb4>

0000632c <__umodsi3>:
    632c:	2005883a 	mov	r2,r4
    6330:	2900122e 	bgeu	r5,r4,637c <__umodsi3+0x50>
    6334:	28001116 	blt	r5,zero,637c <__umodsi3+0x50>
    6338:	01800804 	movi	r6,32
    633c:	00c00044 	movi	r3,1
    6340:	00000206 	br	634c <__umodsi3+0x20>
    6344:	30000c26 	beq	r6,zero,6378 <__umodsi3+0x4c>
    6348:	28000516 	blt	r5,zero,6360 <__umodsi3+0x34>
    634c:	294b883a 	add	r5,r5,r5
    6350:	31bfffc4 	addi	r6,r6,-1
    6354:	18c7883a 	add	r3,r3,r3
    6358:	293ffa36 	bltu	r5,r4,6344 <__ram_exceptions_end+0xfb004cfc>
    635c:	18000626 	beq	r3,zero,6378 <__umodsi3+0x4c>
    6360:	1806d07a 	srli	r3,r3,1
    6364:	11400136 	bltu	r2,r5,636c <__umodsi3+0x40>
    6368:	1145c83a 	sub	r2,r2,r5
    636c:	280ad07a 	srli	r5,r5,1
    6370:	183ffb1e 	bne	r3,zero,6360 <__ram_exceptions_end+0xfb004d18>
    6374:	f800283a 	ret
    6378:	f800283a 	ret
    637c:	00c00044 	movi	r3,1
    6380:	003ff706 	br	6360 <__ram_exceptions_end+0xfb004d18>

00006384 <__addsf3>:
    6384:	defffc04 	addi	sp,sp,-16
    6388:	2004d7fa 	srli	r2,r4,31
    638c:	280cd5fa 	srli	r6,r5,23
    6390:	dc000015 	stw	r16,0(sp)
    6394:	00c02034 	movhi	r3,128
    6398:	2020d5fa 	srli	r16,r4,23
    639c:	280ed7fa 	srli	r7,r5,31
    63a0:	18ffffc4 	addi	r3,r3,-1
    63a4:	dc400115 	stw	r17,4(sp)
    63a8:	1908703a 	and	r4,r3,r4
    63ac:	194a703a 	and	r5,r3,r5
    63b0:	dfc00315 	stw	ra,12(sp)
    63b4:	dc800215 	stw	r18,8(sp)
    63b8:	14403fcc 	andi	r17,r2,255
    63bc:	84003fcc 	andi	r16,r16,255
    63c0:	200890fa 	slli	r4,r4,3
    63c4:	31803fcc 	andi	r6,r6,255
    63c8:	280a90fa 	slli	r5,r5,3
    63cc:	89c05026 	beq	r17,r7,6510 <__addsf3+0x18c>
    63d0:	8185c83a 	sub	r2,r16,r6
    63d4:	00807a0e 	bge	zero,r2,65c0 <__addsf3+0x23c>
    63d8:	30001e1e 	bne	r6,zero,6454 <__addsf3+0xd0>
    63dc:	28006d1e 	bne	r5,zero,6594 <__addsf3+0x210>
    63e0:	208001cc 	andi	r2,r4,7
    63e4:	10000426 	beq	r2,zero,63f8 <__addsf3+0x74>
    63e8:	208003cc 	andi	r2,r4,15
    63ec:	00c00104 	movi	r3,4
    63f0:	10c00126 	beq	r2,r3,63f8 <__addsf3+0x74>
    63f4:	20c9883a 	add	r4,r4,r3
    63f8:	2081002c 	andhi	r2,r4,1024
    63fc:	10003926 	beq	r2,zero,64e4 <__addsf3+0x160>
    6400:	84000044 	addi	r16,r16,1
    6404:	00803fc4 	movi	r2,255
    6408:	80807826 	beq	r16,r2,65ec <__addsf3+0x268>
    640c:	200891ba 	slli	r4,r4,6
    6410:	8805883a 	mov	r2,r17
    6414:	2008d27a 	srli	r4,r4,9
    6418:	84003fcc 	andi	r16,r16,255
    641c:	800695fa 	slli	r3,r16,23
    6420:	10803fcc 	andi	r2,r2,255
    6424:	04002034 	movhi	r16,128
    6428:	843fffc4 	addi	r16,r16,-1
    642c:	100497fa 	slli	r2,r2,31
    6430:	2408703a 	and	r4,r4,r16
    6434:	20e0b03a 	or	r16,r4,r3
    6438:	8084b03a 	or	r2,r16,r2
    643c:	dfc00317 	ldw	ra,12(sp)
    6440:	dc800217 	ldw	r18,8(sp)
    6444:	dc400117 	ldw	r17,4(sp)
    6448:	dc000017 	ldw	r16,0(sp)
    644c:	dec00404 	addi	sp,sp,16
    6450:	f800283a 	ret
    6454:	00c03fc4 	movi	r3,255
    6458:	80ffe126 	beq	r16,r3,63e0 <__ram_exceptions_end+0xfb004d98>
    645c:	29410034 	orhi	r5,r5,1024
    6460:	00c006c4 	movi	r3,27
    6464:	18807516 	blt	r3,r2,663c <__addsf3+0x2b8>
    6468:	00c00804 	movi	r3,32
    646c:	1887c83a 	sub	r3,r3,r2
    6470:	28c6983a 	sll	r3,r5,r3
    6474:	288ad83a 	srl	r5,r5,r2
    6478:	1804c03a 	cmpne	r2,r3,zero
    647c:	288ab03a 	or	r5,r5,r2
    6480:	2149c83a 	sub	r4,r4,r5
    6484:	2081002c 	andhi	r2,r4,1024
    6488:	10001426 	beq	r2,zero,64dc <__addsf3+0x158>
    648c:	04810034 	movhi	r18,1024
    6490:	94bfffc4 	addi	r18,r18,-1
    6494:	24a4703a 	and	r18,r4,r18
    6498:	9009883a 	mov	r4,r18
    649c:	0009f100 	call	9f10 <__clzsi2>
    64a0:	10bffec4 	addi	r2,r2,-5
    64a4:	90a4983a 	sll	r18,r18,r2
    64a8:	14005416 	blt	r2,r16,65fc <__addsf3+0x278>
    64ac:	1405c83a 	sub	r2,r2,r16
    64b0:	11000044 	addi	r4,r2,1
    64b4:	00800804 	movi	r2,32
    64b8:	1105c83a 	sub	r2,r2,r4
    64bc:	9084983a 	sll	r2,r18,r2
    64c0:	9124d83a 	srl	r18,r18,r4
    64c4:	0021883a 	mov	r16,zero
    64c8:	1008c03a 	cmpne	r4,r2,zero
    64cc:	9108b03a 	or	r4,r18,r4
    64d0:	003fc306 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    64d4:	1000db26 	beq	r2,zero,6844 <__addsf3+0x4c0>
    64d8:	1009883a 	mov	r4,r2
    64dc:	208001cc 	andi	r2,r4,7
    64e0:	103fc11e 	bne	r2,zero,63e8 <__ram_exceptions_end+0xfb004da0>
    64e4:	2006d0fa 	srli	r3,r4,3
    64e8:	01003fc4 	movi	r4,255
    64ec:	8805883a 	mov	r2,r17
    64f0:	8100241e 	bne	r16,r4,6584 <__addsf3+0x200>
    64f4:	18006e26 	beq	r3,zero,66b0 <__addsf3+0x32c>
    64f8:	19001034 	orhi	r4,r3,64
    64fc:	00c02034 	movhi	r3,128
    6500:	18ffffc4 	addi	r3,r3,-1
    6504:	043fffc4 	movi	r16,-1
    6508:	20c8703a 	and	r4,r4,r3
    650c:	003fc206 	br	6418 <__ram_exceptions_end+0xfb004dd0>
    6510:	8187c83a 	sub	r3,r16,r6
    6514:	00c03e0e 	bge	zero,r3,6610 <__addsf3+0x28c>
    6518:	30002326 	beq	r6,zero,65a8 <__addsf3+0x224>
    651c:	01803fc4 	movi	r6,255
    6520:	81bfaf26 	beq	r16,r6,63e0 <__ram_exceptions_end+0xfb004d98>
    6524:	29410034 	orhi	r5,r5,1024
    6528:	018006c4 	movi	r6,27
    652c:	30c07416 	blt	r6,r3,6700 <__addsf3+0x37c>
    6530:	01800804 	movi	r6,32
    6534:	30cdc83a 	sub	r6,r6,r3
    6538:	298c983a 	sll	r6,r5,r6
    653c:	28cad83a 	srl	r5,r5,r3
    6540:	3006c03a 	cmpne	r3,r6,zero
    6544:	28cab03a 	or	r5,r5,r3
    6548:	2149883a 	add	r4,r4,r5
    654c:	20c1002c 	andhi	r3,r4,1024
    6550:	183fe226 	beq	r3,zero,64dc <__ram_exceptions_end+0xfb004e94>
    6554:	84000044 	addi	r16,r16,1
    6558:	00c03fc4 	movi	r3,255
    655c:	80c05426 	beq	r16,r3,66b0 <__addsf3+0x32c>
    6560:	00bf0034 	movhi	r2,64512
    6564:	10bfffc4 	addi	r2,r2,-1
    6568:	20c0004c 	andi	r3,r4,1
    656c:	2088703a 	and	r4,r4,r2
    6570:	2008d07a 	srli	r4,r4,1
    6574:	20c8b03a 	or	r4,r4,r3
    6578:	003f9906 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    657c:	0007883a 	mov	r3,zero
    6580:	0005883a 	mov	r2,zero
    6584:	01002034 	movhi	r4,128
    6588:	213fffc4 	addi	r4,r4,-1
    658c:	1908703a 	and	r4,r3,r4
    6590:	003fa106 	br	6418 <__ram_exceptions_end+0xfb004dd0>
    6594:	10bfffc4 	addi	r2,r2,-1
    6598:	103fb926 	beq	r2,zero,6480 <__ram_exceptions_end+0xfb004e38>
    659c:	00c03fc4 	movi	r3,255
    65a0:	80ffaf1e 	bne	r16,r3,6460 <__ram_exceptions_end+0xfb004e18>
    65a4:	003f8e06 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    65a8:	283f8d26 	beq	r5,zero,63e0 <__ram_exceptions_end+0xfb004d98>
    65ac:	18ffffc4 	addi	r3,r3,-1
    65b0:	183fe526 	beq	r3,zero,6548 <__ram_exceptions_end+0xfb004f00>
    65b4:	01803fc4 	movi	r6,255
    65b8:	81bfdb1e 	bne	r16,r6,6528 <__ram_exceptions_end+0xfb004ee0>
    65bc:	003f8806 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    65c0:	1000201e 	bne	r2,zero,6644 <__addsf3+0x2c0>
    65c4:	80800044 	addi	r2,r16,1
    65c8:	10803fcc 	andi	r2,r2,255
    65cc:	01800044 	movi	r6,1
    65d0:	3080450e 	bge	r6,r2,66e8 <__addsf3+0x364>
    65d4:	2165c83a 	sub	r18,r4,r5
    65d8:	90c1002c 	andhi	r3,r18,1024
    65dc:	18002b26 	beq	r3,zero,668c <__addsf3+0x308>
    65e0:	2925c83a 	sub	r18,r5,r4
    65e4:	3823883a 	mov	r17,r7
    65e8:	003fab06 	br	6498 <__ram_exceptions_end+0xfb004e50>
    65ec:	8805883a 	mov	r2,r17
    65f0:	043fffc4 	movi	r16,-1
    65f4:	0009883a 	mov	r4,zero
    65f8:	003f8706 	br	6418 <__ram_exceptions_end+0xfb004dd0>
    65fc:	013f0034 	movhi	r4,64512
    6600:	213fffc4 	addi	r4,r4,-1
    6604:	80a1c83a 	sub	r16,r16,r2
    6608:	9108703a 	and	r4,r18,r4
    660c:	003f7406 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    6610:	1800411e 	bne	r3,zero,6718 <__addsf3+0x394>
    6614:	80c00044 	addi	r3,r16,1
    6618:	19c03fcc 	andi	r7,r3,255
    661c:	01800044 	movi	r6,1
    6620:	31c0260e 	bge	r6,r7,66bc <__addsf3+0x338>
    6624:	01803fc4 	movi	r6,255
    6628:	19802126 	beq	r3,r6,66b0 <__addsf3+0x32c>
    662c:	2149883a 	add	r4,r4,r5
    6630:	2008d07a 	srli	r4,r4,1
    6634:	1821883a 	mov	r16,r3
    6638:	003f6906 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    663c:	01400044 	movi	r5,1
    6640:	003f8f06 	br	6480 <__ram_exceptions_end+0xfb004e38>
    6644:	8000151e 	bne	r16,zero,669c <__addsf3+0x318>
    6648:	20002f26 	beq	r4,zero,6708 <__addsf3+0x384>
    664c:	0084303a 	nor	r2,zero,r2
    6650:	10000a26 	beq	r2,zero,667c <__addsf3+0x2f8>
    6654:	00c03fc4 	movi	r3,255
    6658:	30c02b26 	beq	r6,r3,6708 <__addsf3+0x384>
    665c:	00c006c4 	movi	r3,27
    6660:	18806d16 	blt	r3,r2,6818 <__addsf3+0x494>
    6664:	00c00804 	movi	r3,32
    6668:	1887c83a 	sub	r3,r3,r2
    666c:	20c6983a 	sll	r3,r4,r3
    6670:	2084d83a 	srl	r2,r4,r2
    6674:	1808c03a 	cmpne	r4,r3,zero
    6678:	1108b03a 	or	r4,r2,r4
    667c:	2909c83a 	sub	r4,r5,r4
    6680:	3021883a 	mov	r16,r6
    6684:	3823883a 	mov	r17,r7
    6688:	003f7e06 	br	6484 <__ram_exceptions_end+0xfb004e3c>
    668c:	903f821e 	bne	r18,zero,6498 <__ram_exceptions_end+0xfb004e50>
    6690:	0005883a 	mov	r2,zero
    6694:	0021883a 	mov	r16,zero
    6698:	003fba06 	br	6584 <__ram_exceptions_end+0xfb004f3c>
    669c:	00c03fc4 	movi	r3,255
    66a0:	30c01926 	beq	r6,r3,6708 <__addsf3+0x384>
    66a4:	0085c83a 	sub	r2,zero,r2
    66a8:	21010034 	orhi	r4,r4,1024
    66ac:	003feb06 	br	665c <__ram_exceptions_end+0xfb005014>
    66b0:	043fffc4 	movi	r16,-1
    66b4:	0009883a 	mov	r4,zero
    66b8:	003f5706 	br	6418 <__ram_exceptions_end+0xfb004dd0>
    66bc:	80004a1e 	bne	r16,zero,67e8 <__addsf3+0x464>
    66c0:	20005926 	beq	r4,zero,6828 <__addsf3+0x4a4>
    66c4:	283f4626 	beq	r5,zero,63e0 <__ram_exceptions_end+0xfb004d98>
    66c8:	2149883a 	add	r4,r4,r5
    66cc:	2081002c 	andhi	r2,r4,1024
    66d0:	103f8226 	beq	r2,zero,64dc <__ram_exceptions_end+0xfb004e94>
    66d4:	00bf0034 	movhi	r2,64512
    66d8:	10bfffc4 	addi	r2,r2,-1
    66dc:	3021883a 	mov	r16,r6
    66e0:	2088703a 	and	r4,r4,r2
    66e4:	003f3e06 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    66e8:	8000121e 	bne	r16,zero,6734 <__addsf3+0x3b0>
    66ec:	2000261e 	bne	r4,zero,6788 <__addsf3+0x404>
    66f0:	283fa226 	beq	r5,zero,657c <__ram_exceptions_end+0xfb004f34>
    66f4:	2809883a 	mov	r4,r5
    66f8:	3823883a 	mov	r17,r7
    66fc:	003f3806 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    6700:	01400044 	movi	r5,1
    6704:	003f9006 	br	6548 <__ram_exceptions_end+0xfb004f00>
    6708:	2809883a 	mov	r4,r5
    670c:	3021883a 	mov	r16,r6
    6710:	3823883a 	mov	r17,r7
    6714:	003f3206 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    6718:	80000c1e 	bne	r16,zero,674c <__addsf3+0x3c8>
    671c:	20002f26 	beq	r4,zero,67dc <__addsf3+0x458>
    6720:	00c6303a 	nor	r3,zero,r3
    6724:	18002b1e 	bne	r3,zero,67d4 <__addsf3+0x450>
    6728:	2149883a 	add	r4,r4,r5
    672c:	3021883a 	mov	r16,r6
    6730:	003f8606 	br	654c <__ram_exceptions_end+0xfb004f04>
    6734:	20001b1e 	bne	r4,zero,67a4 <__addsf3+0x420>
    6738:	28003926 	beq	r5,zero,6820 <__addsf3+0x49c>
    673c:	2809883a 	mov	r4,r5
    6740:	3823883a 	mov	r17,r7
    6744:	04003fc4 	movi	r16,255
    6748:	003f2506 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    674c:	01c03fc4 	movi	r7,255
    6750:	31c02226 	beq	r6,r7,67dc <__addsf3+0x458>
    6754:	00c7c83a 	sub	r3,zero,r3
    6758:	21010034 	orhi	r4,r4,1024
    675c:	01c006c4 	movi	r7,27
    6760:	38c03616 	blt	r7,r3,683c <__addsf3+0x4b8>
    6764:	01c00804 	movi	r7,32
    6768:	38cfc83a 	sub	r7,r7,r3
    676c:	21ce983a 	sll	r7,r4,r7
    6770:	20c6d83a 	srl	r3,r4,r3
    6774:	3808c03a 	cmpne	r4,r7,zero
    6778:	1906b03a 	or	r3,r3,r4
    677c:	1949883a 	add	r4,r3,r5
    6780:	3021883a 	mov	r16,r6
    6784:	003f7106 	br	654c <__ram_exceptions_end+0xfb004f04>
    6788:	283f1526 	beq	r5,zero,63e0 <__ram_exceptions_end+0xfb004d98>
    678c:	2145c83a 	sub	r2,r4,r5
    6790:	10c1002c 	andhi	r3,r2,1024
    6794:	183f4f26 	beq	r3,zero,64d4 <__ram_exceptions_end+0xfb004e8c>
    6798:	2909c83a 	sub	r4,r5,r4
    679c:	3823883a 	mov	r17,r7
    67a0:	003f0f06 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    67a4:	28001a26 	beq	r5,zero,6810 <__addsf3+0x48c>
    67a8:	2008d0fa 	srli	r4,r4,3
    67ac:	2080102c 	andhi	r2,r4,64
    67b0:	10000526 	beq	r2,zero,67c8 <__addsf3+0x444>
    67b4:	280ad0fa 	srli	r5,r5,3
    67b8:	2880102c 	andhi	r2,r5,64
    67bc:	1000021e 	bne	r2,zero,67c8 <__addsf3+0x444>
    67c0:	2809883a 	mov	r4,r5
    67c4:	3823883a 	mov	r17,r7
    67c8:	200890fa 	slli	r4,r4,3
    67cc:	04003fc4 	movi	r16,255
    67d0:	003f0306 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    67d4:	01c03fc4 	movi	r7,255
    67d8:	31ffe01e 	bne	r6,r7,675c <__ram_exceptions_end+0xfb005114>
    67dc:	2809883a 	mov	r4,r5
    67e0:	3021883a 	mov	r16,r6
    67e4:	003efe06 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    67e8:	20001126 	beq	r4,zero,6830 <__addsf3+0x4ac>
    67ec:	28000826 	beq	r5,zero,6810 <__addsf3+0x48c>
    67f0:	2008d0fa 	srli	r4,r4,3
    67f4:	2080102c 	andhi	r2,r4,64
    67f8:	103ff326 	beq	r2,zero,67c8 <__ram_exceptions_end+0xfb005180>
    67fc:	280ad0fa 	srli	r5,r5,3
    6800:	2880102c 	andhi	r2,r5,64
    6804:	103ff01e 	bne	r2,zero,67c8 <__ram_exceptions_end+0xfb005180>
    6808:	2809883a 	mov	r4,r5
    680c:	003fee06 	br	67c8 <__ram_exceptions_end+0xfb005180>
    6810:	04003fc4 	movi	r16,255
    6814:	003ef206 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    6818:	01000044 	movi	r4,1
    681c:	003f9706 	br	667c <__ram_exceptions_end+0xfb005034>
    6820:	0005883a 	mov	r2,zero
    6824:	003f3406 	br	64f8 <__ram_exceptions_end+0xfb004eb0>
    6828:	2809883a 	mov	r4,r5
    682c:	003eec06 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    6830:	2809883a 	mov	r4,r5
    6834:	04003fc4 	movi	r16,255
    6838:	003ee906 	br	63e0 <__ram_exceptions_end+0xfb004d98>
    683c:	00c00044 	movi	r3,1
    6840:	003fce06 	br	677c <__ram_exceptions_end+0xfb005134>
    6844:	0005883a 	mov	r2,zero
    6848:	003f4e06 	br	6584 <__ram_exceptions_end+0xfb004f3c>

0000684c <__divsf3>:
    684c:	defff504 	addi	sp,sp,-44
    6850:	200cd5fa 	srli	r6,r4,23
    6854:	dcc00415 	stw	r19,16(sp)
    6858:	2026d7fa 	srli	r19,r4,31
    685c:	00c02034 	movhi	r3,128
    6860:	dd800715 	stw	r22,28(sp)
    6864:	dd000515 	stw	r20,20(sp)
    6868:	dc800315 	stw	r18,12(sp)
    686c:	18ffffc4 	addi	r3,r3,-1
    6870:	dfc00a15 	stw	ra,40(sp)
    6874:	df000915 	stw	fp,36(sp)
    6878:	ddc00815 	stw	r23,32(sp)
    687c:	dd400615 	stw	r21,24(sp)
    6880:	dc400215 	stw	r17,8(sp)
    6884:	dc000115 	stw	r16,4(sp)
    6888:	35003fcc 	andi	r20,r6,255
    688c:	1924703a 	and	r18,r3,r4
    6890:	9d803fcc 	andi	r22,r19,255
    6894:	a0005226 	beq	r20,zero,69e0 <__divsf3+0x194>
    6898:	00803fc4 	movi	r2,255
    689c:	a0802e26 	beq	r20,r2,6958 <__divsf3+0x10c>
    68a0:	91002034 	orhi	r4,r18,128
    68a4:	202490fa 	slli	r18,r4,3
    68a8:	a53fe044 	addi	r20,r20,-127
    68ac:	0021883a 	mov	r16,zero
    68b0:	002f883a 	mov	r23,zero
    68b4:	280cd5fa 	srli	r6,r5,23
    68b8:	282ad7fa 	srli	r21,r5,31
    68bc:	00c02034 	movhi	r3,128
    68c0:	18ffffc4 	addi	r3,r3,-1
    68c4:	31803fcc 	andi	r6,r6,255
    68c8:	1962703a 	and	r17,r3,r5
    68cc:	af003fcc 	andi	fp,r21,255
    68d0:	30004a26 	beq	r6,zero,69fc <__divsf3+0x1b0>
    68d4:	00803fc4 	movi	r2,255
    68d8:	30804526 	beq	r6,r2,69f0 <__divsf3+0x1a4>
    68dc:	89402034 	orhi	r5,r17,128
    68e0:	282290fa 	slli	r17,r5,3
    68e4:	31bfe044 	addi	r6,r6,-127
    68e8:	000b883a 	mov	r5,zero
    68ec:	2c20b03a 	or	r16,r5,r16
    68f0:	802090ba 	slli	r16,r16,2
    68f4:	00800034 	movhi	r2,0
    68f8:	109a4604 	addi	r2,r2,26904
    68fc:	80a1883a 	add	r16,r16,r2
    6900:	81000017 	ldw	r4,0(r16)
    6904:	9d46f03a 	xor	r3,r19,r21
    6908:	180f883a 	mov	r7,r3
    690c:	18803fcc 	andi	r2,r3,255
    6910:	a18dc83a 	sub	r6,r20,r6
    6914:	2000683a 	jmp	r4
    6918:	00006afc 	xorhi	zero,zero,427
    691c:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6920:	00006af0 	cmpltui	zero,zero,427
    6924:	0000696c 	andhi	zero,zero,421
    6928:	00006af0 	cmpltui	zero,zero,427
    692c:	00006ac8 	cmpgei	zero,zero,427
    6930:	00006af0 	cmpltui	zero,zero,427
    6934:	0000696c 	andhi	zero,zero,421
    6938:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    693c:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6940:	00006ac8 	cmpgei	zero,zero,427
    6944:	0000696c 	andhi	zero,zero,421
    6948:	00006bdc 	xori	zero,zero,431
    694c:	00006bdc 	xori	zero,zero,431
    6950:	00006bdc 	xori	zero,zero,431
    6954:	00006b90 	cmplti	zero,zero,430
    6958:	9000581e 	bne	r18,zero,6abc <__divsf3+0x270>
    695c:	04000204 	movi	r16,8
    6960:	05c00084 	movi	r23,2
    6964:	003fd306 	br	68b4 <__ram_exceptions_end+0xfb00526c>
    6968:	0023883a 	mov	r17,zero
    696c:	e02d883a 	mov	r22,fp
    6970:	282f883a 	mov	r23,r5
    6974:	00800084 	movi	r2,2
    6978:	b8808f1e 	bne	r23,r2,6bb8 <__divsf3+0x36c>
    697c:	b005883a 	mov	r2,r22
    6980:	11c0004c 	andi	r7,r2,1
    6984:	013fffc4 	movi	r4,-1
    6988:	000d883a 	mov	r6,zero
    698c:	21003fcc 	andi	r4,r4,255
    6990:	200895fa 	slli	r4,r4,23
    6994:	38803fcc 	andi	r2,r7,255
    6998:	00c02034 	movhi	r3,128
    699c:	100497fa 	slli	r2,r2,31
    69a0:	18ffffc4 	addi	r3,r3,-1
    69a4:	30c6703a 	and	r3,r6,r3
    69a8:	1906b03a 	or	r3,r3,r4
    69ac:	1884b03a 	or	r2,r3,r2
    69b0:	dfc00a17 	ldw	ra,40(sp)
    69b4:	df000917 	ldw	fp,36(sp)
    69b8:	ddc00817 	ldw	r23,32(sp)
    69bc:	dd800717 	ldw	r22,28(sp)
    69c0:	dd400617 	ldw	r21,24(sp)
    69c4:	dd000517 	ldw	r20,20(sp)
    69c8:	dcc00417 	ldw	r19,16(sp)
    69cc:	dc800317 	ldw	r18,12(sp)
    69d0:	dc400217 	ldw	r17,8(sp)
    69d4:	dc000117 	ldw	r16,4(sp)
    69d8:	dec00b04 	addi	sp,sp,44
    69dc:	f800283a 	ret
    69e0:	90002b1e 	bne	r18,zero,6a90 <__divsf3+0x244>
    69e4:	04000104 	movi	r16,4
    69e8:	05c00044 	movi	r23,1
    69ec:	003fb106 	br	68b4 <__ram_exceptions_end+0xfb00526c>
    69f0:	8800251e 	bne	r17,zero,6a88 <__divsf3+0x23c>
    69f4:	01400084 	movi	r5,2
    69f8:	00000206 	br	6a04 <__divsf3+0x1b8>
    69fc:	88001a1e 	bne	r17,zero,6a68 <__divsf3+0x21c>
    6a00:	01400044 	movi	r5,1
    6a04:	8160b03a 	or	r16,r16,r5
    6a08:	802090ba 	slli	r16,r16,2
    6a0c:	00c00034 	movhi	r3,0
    6a10:	18da8a04 	addi	r3,r3,27176
    6a14:	80e1883a 	add	r16,r16,r3
    6a18:	80c00017 	ldw	r3,0(r16)
    6a1c:	9d44f03a 	xor	r2,r19,r21
    6a20:	a18dc83a 	sub	r6,r20,r6
    6a24:	1800683a 	jmp	r3
    6a28:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6a2c:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6a30:	00006bcc 	andi	zero,zero,431
    6a34:	00006968 	cmpgeui	zero,zero,421
    6a38:	00006bcc 	andi	zero,zero,431
    6a3c:	00006ac8 	cmpgei	zero,zero,427
    6a40:	00006bcc 	andi	zero,zero,431
    6a44:	00006968 	cmpgeui	zero,zero,421
    6a48:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6a4c:	00006980 	call	698 <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0x68>
    6a50:	00006ac8 	cmpgei	zero,zero,427
    6a54:	00006968 	cmpgeui	zero,zero,421
    6a58:	00006bdc 	xori	zero,zero,431
    6a5c:	00006bdc 	xori	zero,zero,431
    6a60:	00006bdc 	xori	zero,zero,431
    6a64:	00006bf4 	movhi	zero,431
    6a68:	8809883a 	mov	r4,r17
    6a6c:	0009f100 	call	9f10 <__clzsi2>
    6a70:	10fffec4 	addi	r3,r2,-5
    6a74:	10801d84 	addi	r2,r2,118
    6a78:	88e2983a 	sll	r17,r17,r3
    6a7c:	008dc83a 	sub	r6,zero,r2
    6a80:	000b883a 	mov	r5,zero
    6a84:	003f9906 	br	68ec <__ram_exceptions_end+0xfb0052a4>
    6a88:	014000c4 	movi	r5,3
    6a8c:	003f9706 	br	68ec <__ram_exceptions_end+0xfb0052a4>
    6a90:	9009883a 	mov	r4,r18
    6a94:	d9400015 	stw	r5,0(sp)
    6a98:	0009f100 	call	9f10 <__clzsi2>
    6a9c:	10fffec4 	addi	r3,r2,-5
    6aa0:	11801d84 	addi	r6,r2,118
    6aa4:	90e4983a 	sll	r18,r18,r3
    6aa8:	01a9c83a 	sub	r20,zero,r6
    6aac:	0021883a 	mov	r16,zero
    6ab0:	002f883a 	mov	r23,zero
    6ab4:	d9400017 	ldw	r5,0(sp)
    6ab8:	003f7e06 	br	68b4 <__ram_exceptions_end+0xfb00526c>
    6abc:	04000304 	movi	r16,12
    6ac0:	05c000c4 	movi	r23,3
    6ac4:	003f7b06 	br	68b4 <__ram_exceptions_end+0xfb00526c>
    6ac8:	01802034 	movhi	r6,128
    6acc:	000f883a 	mov	r7,zero
    6ad0:	31bfffc4 	addi	r6,r6,-1
    6ad4:	013fffc4 	movi	r4,-1
    6ad8:	003fac06 	br	698c <__ram_exceptions_end+0xfb005344>
    6adc:	01400044 	movi	r5,1
    6ae0:	2909c83a 	sub	r4,r5,r4
    6ae4:	00c006c4 	movi	r3,27
    6ae8:	19004b0e 	bge	r3,r4,6c18 <__divsf3+0x3cc>
    6aec:	114e703a 	and	r7,r2,r5
    6af0:	0009883a 	mov	r4,zero
    6af4:	000d883a 	mov	r6,zero
    6af8:	003fa406 	br	698c <__ram_exceptions_end+0xfb005344>
    6afc:	9006917a 	slli	r3,r18,5
    6b00:	8822917a 	slli	r17,r17,5
    6b04:	1c40372e 	bgeu	r3,r17,6be4 <__divsf3+0x398>
    6b08:	31bfffc4 	addi	r6,r6,-1
    6b0c:	010006c4 	movi	r4,27
    6b10:	000b883a 	mov	r5,zero
    6b14:	180f883a 	mov	r7,r3
    6b18:	294b883a 	add	r5,r5,r5
    6b1c:	18c7883a 	add	r3,r3,r3
    6b20:	38000116 	blt	r7,zero,6b28 <__divsf3+0x2dc>
    6b24:	1c400236 	bltu	r3,r17,6b30 <__divsf3+0x2e4>
    6b28:	1c47c83a 	sub	r3,r3,r17
    6b2c:	29400054 	ori	r5,r5,1
    6b30:	213fffc4 	addi	r4,r4,-1
    6b34:	203ff71e 	bne	r4,zero,6b14 <__ram_exceptions_end+0xfb0054cc>
    6b38:	1806c03a 	cmpne	r3,r3,zero
    6b3c:	1962b03a 	or	r17,r3,r5
    6b40:	31001fc4 	addi	r4,r6,127
    6b44:	013fe50e 	bge	zero,r4,6adc <__ram_exceptions_end+0xfb005494>
    6b48:	88c001cc 	andi	r3,r17,7
    6b4c:	18000426 	beq	r3,zero,6b60 <__divsf3+0x314>
    6b50:	88c003cc 	andi	r3,r17,15
    6b54:	01400104 	movi	r5,4
    6b58:	19400126 	beq	r3,r5,6b60 <__divsf3+0x314>
    6b5c:	8963883a 	add	r17,r17,r5
    6b60:	88c2002c 	andhi	r3,r17,2048
    6b64:	18000426 	beq	r3,zero,6b78 <__divsf3+0x32c>
    6b68:	00fe0034 	movhi	r3,63488
    6b6c:	18ffffc4 	addi	r3,r3,-1
    6b70:	31002004 	addi	r4,r6,128
    6b74:	88e2703a 	and	r17,r17,r3
    6b78:	00c03f84 	movi	r3,254
    6b7c:	193f8016 	blt	r3,r4,6980 <__ram_exceptions_end+0xfb005338>
    6b80:	880c91ba 	slli	r6,r17,6
    6b84:	11c0004c 	andi	r7,r2,1
    6b88:	300cd27a 	srli	r6,r6,9
    6b8c:	003f7f06 	br	698c <__ram_exceptions_end+0xfb005344>
    6b90:	9080102c 	andhi	r2,r18,64
    6b94:	10000226 	beq	r2,zero,6ba0 <__divsf3+0x354>
    6b98:	8880102c 	andhi	r2,r17,64
    6b9c:	10001826 	beq	r2,zero,6c00 <__divsf3+0x3b4>
    6ba0:	00802034 	movhi	r2,128
    6ba4:	91801034 	orhi	r6,r18,64
    6ba8:	10bfffc4 	addi	r2,r2,-1
    6bac:	980f883a 	mov	r7,r19
    6bb0:	308c703a 	and	r6,r6,r2
    6bb4:	003fc706 	br	6ad4 <__ram_exceptions_end+0xfb00548c>
    6bb8:	008000c4 	movi	r2,3
    6bbc:	b8802d26 	beq	r23,r2,6c74 <__divsf3+0x428>
    6bc0:	00c00044 	movi	r3,1
    6bc4:	b005883a 	mov	r2,r22
    6bc8:	b8ffdd1e 	bne	r23,r3,6b40 <__ram_exceptions_end+0xfb0054f8>
    6bcc:	11c0004c 	andi	r7,r2,1
    6bd0:	0009883a 	mov	r4,zero
    6bd4:	000d883a 	mov	r6,zero
    6bd8:	003f6c06 	br	698c <__ram_exceptions_end+0xfb005344>
    6bdc:	9023883a 	mov	r17,r18
    6be0:	003f6406 	br	6974 <__ram_exceptions_end+0xfb00532c>
    6be4:	1c47c83a 	sub	r3,r3,r17
    6be8:	01000684 	movi	r4,26
    6bec:	01400044 	movi	r5,1
    6bf0:	003fc806 	br	6b14 <__ram_exceptions_end+0xfb0054cc>
    6bf4:	9080102c 	andhi	r2,r18,64
    6bf8:	103fe926 	beq	r2,zero,6ba0 <__ram_exceptions_end+0xfb005558>
    6bfc:	0023883a 	mov	r17,zero
    6c00:	00802034 	movhi	r2,128
    6c04:	89801034 	orhi	r6,r17,64
    6c08:	10bfffc4 	addi	r2,r2,-1
    6c0c:	a80f883a 	mov	r7,r21
    6c10:	308c703a 	and	r6,r6,r2
    6c14:	003faf06 	br	6ad4 <__ram_exceptions_end+0xfb00548c>
    6c18:	01c00804 	movi	r7,32
    6c1c:	390fc83a 	sub	r7,r7,r4
    6c20:	89ce983a 	sll	r7,r17,r7
    6c24:	890ad83a 	srl	r5,r17,r4
    6c28:	380ec03a 	cmpne	r7,r7,zero
    6c2c:	29cab03a 	or	r5,r5,r7
    6c30:	28c001cc 	andi	r3,r5,7
    6c34:	18000426 	beq	r3,zero,6c48 <__divsf3+0x3fc>
    6c38:	28c003cc 	andi	r3,r5,15
    6c3c:	01000104 	movi	r4,4
    6c40:	19000126 	beq	r3,r4,6c48 <__divsf3+0x3fc>
    6c44:	290b883a 	add	r5,r5,r4
    6c48:	28c1002c 	andhi	r3,r5,1024
    6c4c:	18000426 	beq	r3,zero,6c60 <__divsf3+0x414>
    6c50:	11c0004c 	andi	r7,r2,1
    6c54:	01000044 	movi	r4,1
    6c58:	000d883a 	mov	r6,zero
    6c5c:	003f4b06 	br	698c <__ram_exceptions_end+0xfb005344>
    6c60:	280a91ba 	slli	r5,r5,6
    6c64:	11c0004c 	andi	r7,r2,1
    6c68:	0009883a 	mov	r4,zero
    6c6c:	280cd27a 	srli	r6,r5,9
    6c70:	003f4606 	br	698c <__ram_exceptions_end+0xfb005344>
    6c74:	00802034 	movhi	r2,128
    6c78:	89801034 	orhi	r6,r17,64
    6c7c:	10bfffc4 	addi	r2,r2,-1
    6c80:	b00f883a 	mov	r7,r22
    6c84:	308c703a 	and	r6,r6,r2
    6c88:	003f9206 	br	6ad4 <__ram_exceptions_end+0xfb00548c>

00006c8c <__mulsf3>:
    6c8c:	defff504 	addi	sp,sp,-44
    6c90:	dc000115 	stw	r16,4(sp)
    6c94:	2020d5fa 	srli	r16,r4,23
    6c98:	dd400615 	stw	r21,24(sp)
    6c9c:	202ad7fa 	srli	r21,r4,31
    6ca0:	dc800315 	stw	r18,12(sp)
    6ca4:	04802034 	movhi	r18,128
    6ca8:	df000915 	stw	fp,36(sp)
    6cac:	dd000515 	stw	r20,20(sp)
    6cb0:	94bfffc4 	addi	r18,r18,-1
    6cb4:	dfc00a15 	stw	ra,40(sp)
    6cb8:	ddc00815 	stw	r23,32(sp)
    6cbc:	dd800715 	stw	r22,28(sp)
    6cc0:	dcc00415 	stw	r19,16(sp)
    6cc4:	dc400215 	stw	r17,8(sp)
    6cc8:	84003fcc 	andi	r16,r16,255
    6ccc:	9124703a 	and	r18,r18,r4
    6cd0:	a829883a 	mov	r20,r21
    6cd4:	af003fcc 	andi	fp,r21,255
    6cd8:	80005426 	beq	r16,zero,6e2c <__mulsf3+0x1a0>
    6cdc:	00803fc4 	movi	r2,255
    6ce0:	80802f26 	beq	r16,r2,6da0 <__mulsf3+0x114>
    6ce4:	91002034 	orhi	r4,r18,128
    6ce8:	202490fa 	slli	r18,r4,3
    6cec:	843fe044 	addi	r16,r16,-127
    6cf0:	0023883a 	mov	r17,zero
    6cf4:	002f883a 	mov	r23,zero
    6cf8:	2804d5fa 	srli	r2,r5,23
    6cfc:	282cd7fa 	srli	r22,r5,31
    6d00:	01002034 	movhi	r4,128
    6d04:	213fffc4 	addi	r4,r4,-1
    6d08:	10803fcc 	andi	r2,r2,255
    6d0c:	2166703a 	and	r19,r4,r5
    6d10:	b1803fcc 	andi	r6,r22,255
    6d14:	10004c26 	beq	r2,zero,6e48 <__mulsf3+0x1bc>
    6d18:	00c03fc4 	movi	r3,255
    6d1c:	10c04726 	beq	r2,r3,6e3c <__mulsf3+0x1b0>
    6d20:	99002034 	orhi	r4,r19,128
    6d24:	202690fa 	slli	r19,r4,3
    6d28:	10bfe044 	addi	r2,r2,-127
    6d2c:	0007883a 	mov	r3,zero
    6d30:	80a1883a 	add	r16,r16,r2
    6d34:	010003c4 	movi	r4,15
    6d38:	1c44b03a 	or	r2,r3,r17
    6d3c:	b56af03a 	xor	r21,r22,r21
    6d40:	81c00044 	addi	r7,r16,1
    6d44:	20806b36 	bltu	r4,r2,6ef4 <__mulsf3+0x268>
    6d48:	100490ba 	slli	r2,r2,2
    6d4c:	01000034 	movhi	r4,0
    6d50:	211b5804 	addi	r4,r4,28000
    6d54:	1105883a 	add	r2,r2,r4
    6d58:	10800017 	ldw	r2,0(r2)
    6d5c:	1000683a 	jmp	r2
    6d60:	00006ef4 	movhi	zero,443
    6d64:	00006db4 	movhi	zero,438
    6d68:	00006db4 	movhi	zero,438
    6d6c:	00006db0 	cmpltui	zero,zero,438
    6d70:	00006ed8 	cmpnei	zero,zero,443
    6d74:	00006ed8 	cmpnei	zero,zero,443
    6d78:	00006ec4 	movi	zero,443
    6d7c:	00006db0 	cmpltui	zero,zero,438
    6d80:	00006ed8 	cmpnei	zero,zero,443
    6d84:	00006ec4 	movi	zero,443
    6d88:	00006ed8 	cmpnei	zero,zero,443
    6d8c:	00006db0 	cmpltui	zero,zero,438
    6d90:	00006ee4 	muli	zero,zero,443
    6d94:	00006ee4 	muli	zero,zero,443
    6d98:	00006ee4 	muli	zero,zero,443
    6d9c:	00006fc0 	call	6fc <_Z44alt_up_pixel_buffer_dma_clear_screen_delayedP27alt_up_pixel_buffer_dma_devi+0xcc>
    6da0:	90003b1e 	bne	r18,zero,6e90 <__mulsf3+0x204>
    6da4:	04400204 	movi	r17,8
    6da8:	05c00084 	movi	r23,2
    6dac:	003fd206 	br	6cf8 <__ram_exceptions_end+0xfb0056b0>
    6db0:	302b883a 	mov	r21,r6
    6db4:	00800084 	movi	r2,2
    6db8:	18802626 	beq	r3,r2,6e54 <__mulsf3+0x1c8>
    6dbc:	008000c4 	movi	r2,3
    6dc0:	1880ab26 	beq	r3,r2,7070 <__mulsf3+0x3e4>
    6dc4:	00800044 	movi	r2,1
    6dc8:	1880a21e 	bne	r3,r2,7054 <__mulsf3+0x3c8>
    6dcc:	a829883a 	mov	r20,r21
    6dd0:	0007883a 	mov	r3,zero
    6dd4:	0009883a 	mov	r4,zero
    6dd8:	18803fcc 	andi	r2,r3,255
    6ddc:	100695fa 	slli	r3,r2,23
    6de0:	a0803fcc 	andi	r2,r20,255
    6de4:	100a97fa 	slli	r5,r2,31
    6de8:	00802034 	movhi	r2,128
    6dec:	10bfffc4 	addi	r2,r2,-1
    6df0:	2084703a 	and	r2,r4,r2
    6df4:	10c4b03a 	or	r2,r2,r3
    6df8:	1144b03a 	or	r2,r2,r5
    6dfc:	dfc00a17 	ldw	ra,40(sp)
    6e00:	df000917 	ldw	fp,36(sp)
    6e04:	ddc00817 	ldw	r23,32(sp)
    6e08:	dd800717 	ldw	r22,28(sp)
    6e0c:	dd400617 	ldw	r21,24(sp)
    6e10:	dd000517 	ldw	r20,20(sp)
    6e14:	dcc00417 	ldw	r19,16(sp)
    6e18:	dc800317 	ldw	r18,12(sp)
    6e1c:	dc400217 	ldw	r17,8(sp)
    6e20:	dc000117 	ldw	r16,4(sp)
    6e24:	dec00b04 	addi	sp,sp,44
    6e28:	f800283a 	ret
    6e2c:	90000d1e 	bne	r18,zero,6e64 <__mulsf3+0x1d8>
    6e30:	04400104 	movi	r17,4
    6e34:	05c00044 	movi	r23,1
    6e38:	003faf06 	br	6cf8 <__ram_exceptions_end+0xfb0056b0>
    6e3c:	9806c03a 	cmpne	r3,r19,zero
    6e40:	18c00084 	addi	r3,r3,2
    6e44:	003fba06 	br	6d30 <__ram_exceptions_end+0xfb0056e8>
    6e48:	9800141e 	bne	r19,zero,6e9c <__mulsf3+0x210>
    6e4c:	00c00044 	movi	r3,1
    6e50:	003fb706 	br	6d30 <__ram_exceptions_end+0xfb0056e8>
    6e54:	a829883a 	mov	r20,r21
    6e58:	00ffffc4 	movi	r3,-1
    6e5c:	0009883a 	mov	r4,zero
    6e60:	003fdd06 	br	6dd8 <__ram_exceptions_end+0xfb005790>
    6e64:	9009883a 	mov	r4,r18
    6e68:	d9400015 	stw	r5,0(sp)
    6e6c:	0009f100 	call	9f10 <__clzsi2>
    6e70:	10fffec4 	addi	r3,r2,-5
    6e74:	10801d84 	addi	r2,r2,118
    6e78:	90e4983a 	sll	r18,r18,r3
    6e7c:	00a1c83a 	sub	r16,zero,r2
    6e80:	0023883a 	mov	r17,zero
    6e84:	002f883a 	mov	r23,zero
    6e88:	d9400017 	ldw	r5,0(sp)
    6e8c:	003f9a06 	br	6cf8 <__ram_exceptions_end+0xfb0056b0>
    6e90:	04400304 	movi	r17,12
    6e94:	05c000c4 	movi	r23,3
    6e98:	003f9706 	br	6cf8 <__ram_exceptions_end+0xfb0056b0>
    6e9c:	9809883a 	mov	r4,r19
    6ea0:	d9800015 	stw	r6,0(sp)
    6ea4:	0009f100 	call	9f10 <__clzsi2>
    6ea8:	10fffec4 	addi	r3,r2,-5
    6eac:	10801d84 	addi	r2,r2,118
    6eb0:	98e6983a 	sll	r19,r19,r3
    6eb4:	0085c83a 	sub	r2,zero,r2
    6eb8:	0007883a 	mov	r3,zero
    6ebc:	d9800017 	ldw	r6,0(sp)
    6ec0:	003f9b06 	br	6d30 <__ram_exceptions_end+0xfb0056e8>
    6ec4:	01002034 	movhi	r4,128
    6ec8:	0029883a 	mov	r20,zero
    6ecc:	213fffc4 	addi	r4,r4,-1
    6ed0:	00ffffc4 	movi	r3,-1
    6ed4:	003fc006 	br	6dd8 <__ram_exceptions_end+0xfb005790>
    6ed8:	9027883a 	mov	r19,r18
    6edc:	b807883a 	mov	r3,r23
    6ee0:	003fb406 	br	6db4 <__ram_exceptions_end+0xfb00576c>
    6ee4:	9027883a 	mov	r19,r18
    6ee8:	e02b883a 	mov	r21,fp
    6eec:	b807883a 	mov	r3,r23
    6ef0:	003fb006 	br	6db4 <__ram_exceptions_end+0xfb00576c>
    6ef4:	9004d43a 	srli	r2,r18,16
    6ef8:	9810d43a 	srli	r8,r19,16
    6efc:	94bfffcc 	andi	r18,r18,65535
    6f00:	993fffcc 	andi	r4,r19,65535
    6f04:	910d383a 	mul	r6,r18,r4
    6f08:	20a7383a 	mul	r19,r4,r2
    6f0c:	9225383a 	mul	r18,r18,r8
    6f10:	3006d43a 	srli	r3,r6,16
    6f14:	1211383a 	mul	r8,r2,r8
    6f18:	94e5883a 	add	r18,r18,r19
    6f1c:	1c87883a 	add	r3,r3,r18
    6f20:	1cc0022e 	bgeu	r3,r19,6f2c <__mulsf3+0x2a0>
    6f24:	00800074 	movhi	r2,1
    6f28:	4091883a 	add	r8,r8,r2
    6f2c:	1804943a 	slli	r2,r3,16
    6f30:	31bfffcc 	andi	r6,r6,65535
    6f34:	1806d43a 	srli	r3,r3,16
    6f38:	1185883a 	add	r2,r2,r6
    6f3c:	102691ba 	slli	r19,r2,6
    6f40:	1a07883a 	add	r3,r3,r8
    6f44:	1004d6ba 	srli	r2,r2,26
    6f48:	180891ba 	slli	r4,r3,6
    6f4c:	9826c03a 	cmpne	r19,r19,zero
    6f50:	9884b03a 	or	r2,r19,r2
    6f54:	1126b03a 	or	r19,r2,r4
    6f58:	9882002c 	andhi	r2,r19,2048
    6f5c:	10000426 	beq	r2,zero,6f70 <__mulsf3+0x2e4>
    6f60:	9804d07a 	srli	r2,r19,1
    6f64:	9900004c 	andi	r4,r19,1
    6f68:	3821883a 	mov	r16,r7
    6f6c:	1126b03a 	or	r19,r2,r4
    6f70:	80c01fc4 	addi	r3,r16,127
    6f74:	00c0210e 	bge	zero,r3,6ffc <__mulsf3+0x370>
    6f78:	988001cc 	andi	r2,r19,7
    6f7c:	10000426 	beq	r2,zero,6f90 <__mulsf3+0x304>
    6f80:	988003cc 	andi	r2,r19,15
    6f84:	01000104 	movi	r4,4
    6f88:	11000126 	beq	r2,r4,6f90 <__mulsf3+0x304>
    6f8c:	9927883a 	add	r19,r19,r4
    6f90:	9882002c 	andhi	r2,r19,2048
    6f94:	10000426 	beq	r2,zero,6fa8 <__mulsf3+0x31c>
    6f98:	00be0034 	movhi	r2,63488
    6f9c:	10bfffc4 	addi	r2,r2,-1
    6fa0:	80c02004 	addi	r3,r16,128
    6fa4:	98a6703a 	and	r19,r19,r2
    6fa8:	00803f84 	movi	r2,254
    6fac:	10ffa916 	blt	r2,r3,6e54 <__ram_exceptions_end+0xfb00580c>
    6fb0:	980891ba 	slli	r4,r19,6
    6fb4:	a829883a 	mov	r20,r21
    6fb8:	2008d27a 	srli	r4,r4,9
    6fbc:	003f8606 	br	6dd8 <__ram_exceptions_end+0xfb005790>
    6fc0:	9080102c 	andhi	r2,r18,64
    6fc4:	10000826 	beq	r2,zero,6fe8 <__mulsf3+0x35c>
    6fc8:	9880102c 	andhi	r2,r19,64
    6fcc:	1000061e 	bne	r2,zero,6fe8 <__mulsf3+0x35c>
    6fd0:	00802034 	movhi	r2,128
    6fd4:	99001034 	orhi	r4,r19,64
    6fd8:	10bfffc4 	addi	r2,r2,-1
    6fdc:	b029883a 	mov	r20,r22
    6fe0:	2088703a 	and	r4,r4,r2
    6fe4:	003fba06 	br	6ed0 <__ram_exceptions_end+0xfb005888>
    6fe8:	00802034 	movhi	r2,128
    6fec:	91001034 	orhi	r4,r18,64
    6ff0:	10bfffc4 	addi	r2,r2,-1
    6ff4:	2088703a 	and	r4,r4,r2
    6ff8:	003fb506 	br	6ed0 <__ram_exceptions_end+0xfb005888>
    6ffc:	00800044 	movi	r2,1
    7000:	10c7c83a 	sub	r3,r2,r3
    7004:	008006c4 	movi	r2,27
    7008:	10ff7016 	blt	r2,r3,6dcc <__ram_exceptions_end+0xfb005784>
    700c:	00800804 	movi	r2,32
    7010:	10c5c83a 	sub	r2,r2,r3
    7014:	9884983a 	sll	r2,r19,r2
    7018:	98c6d83a 	srl	r3,r19,r3
    701c:	1004c03a 	cmpne	r2,r2,zero
    7020:	1884b03a 	or	r2,r3,r2
    7024:	10c001cc 	andi	r3,r2,7
    7028:	18000426 	beq	r3,zero,703c <__mulsf3+0x3b0>
    702c:	10c003cc 	andi	r3,r2,15
    7030:	01000104 	movi	r4,4
    7034:	19000126 	beq	r3,r4,703c <__mulsf3+0x3b0>
    7038:	1105883a 	add	r2,r2,r4
    703c:	10c1002c 	andhi	r3,r2,1024
    7040:	18000626 	beq	r3,zero,705c <__mulsf3+0x3d0>
    7044:	a829883a 	mov	r20,r21
    7048:	00c00044 	movi	r3,1
    704c:	0009883a 	mov	r4,zero
    7050:	003f6106 	br	6dd8 <__ram_exceptions_end+0xfb005790>
    7054:	3821883a 	mov	r16,r7
    7058:	003fc506 	br	6f70 <__ram_exceptions_end+0xfb005928>
    705c:	100491ba 	slli	r2,r2,6
    7060:	a829883a 	mov	r20,r21
    7064:	0007883a 	mov	r3,zero
    7068:	1008d27a 	srli	r4,r2,9
    706c:	003f5a06 	br	6dd8 <__ram_exceptions_end+0xfb005790>
    7070:	00802034 	movhi	r2,128
    7074:	99001034 	orhi	r4,r19,64
    7078:	10bfffc4 	addi	r2,r2,-1
    707c:	a829883a 	mov	r20,r21
    7080:	2088703a 	and	r4,r4,r2
    7084:	003f9206 	br	6ed0 <__ram_exceptions_end+0xfb005888>

00007088 <__subsf3>:
    7088:	defffc04 	addi	sp,sp,-16
    708c:	280cd5fa 	srli	r6,r5,23
    7090:	dc000015 	stw	r16,0(sp)
    7094:	01c02034 	movhi	r7,128
    7098:	2020d5fa 	srli	r16,r4,23
    709c:	39ffffc4 	addi	r7,r7,-1
    70a0:	3906703a 	and	r3,r7,r4
    70a4:	dc400115 	stw	r17,4(sp)
    70a8:	394e703a 	and	r7,r7,r5
    70ac:	2022d7fa 	srli	r17,r4,31
    70b0:	dfc00315 	stw	ra,12(sp)
    70b4:	dc800215 	stw	r18,8(sp)
    70b8:	31803fcc 	andi	r6,r6,255
    70bc:	01003fc4 	movi	r4,255
    70c0:	84003fcc 	andi	r16,r16,255
    70c4:	180690fa 	slli	r3,r3,3
    70c8:	2804d7fa 	srli	r2,r5,31
    70cc:	380e90fa 	slli	r7,r7,3
    70d0:	31006d26 	beq	r6,r4,7288 <__subsf3+0x200>
    70d4:	1080005c 	xori	r2,r2,1
    70d8:	8189c83a 	sub	r4,r16,r6
    70dc:	14404f26 	beq	r2,r17,721c <__subsf3+0x194>
    70e0:	0100770e 	bge	zero,r4,72c0 <__subsf3+0x238>
    70e4:	30001e1e 	bne	r6,zero,7160 <__subsf3+0xd8>
    70e8:	38006a1e 	bne	r7,zero,7294 <__subsf3+0x20c>
    70ec:	188001cc 	andi	r2,r3,7
    70f0:	10000426 	beq	r2,zero,7104 <__subsf3+0x7c>
    70f4:	188003cc 	andi	r2,r3,15
    70f8:	01000104 	movi	r4,4
    70fc:	11000126 	beq	r2,r4,7104 <__subsf3+0x7c>
    7100:	1907883a 	add	r3,r3,r4
    7104:	1881002c 	andhi	r2,r3,1024
    7108:	10003926 	beq	r2,zero,71f0 <__subsf3+0x168>
    710c:	84000044 	addi	r16,r16,1
    7110:	00803fc4 	movi	r2,255
    7114:	80807526 	beq	r16,r2,72ec <__subsf3+0x264>
    7118:	180691ba 	slli	r3,r3,6
    711c:	8880004c 	andi	r2,r17,1
    7120:	180ad27a 	srli	r5,r3,9
    7124:	84003fcc 	andi	r16,r16,255
    7128:	800695fa 	slli	r3,r16,23
    712c:	10803fcc 	andi	r2,r2,255
    7130:	01002034 	movhi	r4,128
    7134:	213fffc4 	addi	r4,r4,-1
    7138:	100497fa 	slli	r2,r2,31
    713c:	2920703a 	and	r16,r5,r4
    7140:	80e0b03a 	or	r16,r16,r3
    7144:	8084b03a 	or	r2,r16,r2
    7148:	dfc00317 	ldw	ra,12(sp)
    714c:	dc800217 	ldw	r18,8(sp)
    7150:	dc400117 	ldw	r17,4(sp)
    7154:	dc000017 	ldw	r16,0(sp)
    7158:	dec00404 	addi	sp,sp,16
    715c:	f800283a 	ret
    7160:	00803fc4 	movi	r2,255
    7164:	80bfe126 	beq	r16,r2,70ec <__ram_exceptions_end+0xfb005aa4>
    7168:	39c10034 	orhi	r7,r7,1024
    716c:	008006c4 	movi	r2,27
    7170:	11007416 	blt	r2,r4,7344 <__subsf3+0x2bc>
    7174:	00800804 	movi	r2,32
    7178:	1105c83a 	sub	r2,r2,r4
    717c:	3884983a 	sll	r2,r7,r2
    7180:	390ed83a 	srl	r7,r7,r4
    7184:	1008c03a 	cmpne	r4,r2,zero
    7188:	390eb03a 	or	r7,r7,r4
    718c:	19c7c83a 	sub	r3,r3,r7
    7190:	1881002c 	andhi	r2,r3,1024
    7194:	10001426 	beq	r2,zero,71e8 <__subsf3+0x160>
    7198:	04810034 	movhi	r18,1024
    719c:	94bfffc4 	addi	r18,r18,-1
    71a0:	1ca4703a 	and	r18,r3,r18
    71a4:	9009883a 	mov	r4,r18
    71a8:	0009f100 	call	9f10 <__clzsi2>
    71ac:	10bffec4 	addi	r2,r2,-5
    71b0:	90a4983a 	sll	r18,r18,r2
    71b4:	14005116 	blt	r2,r16,72fc <__subsf3+0x274>
    71b8:	1405c83a 	sub	r2,r2,r16
    71bc:	10c00044 	addi	r3,r2,1
    71c0:	00800804 	movi	r2,32
    71c4:	10c5c83a 	sub	r2,r2,r3
    71c8:	9084983a 	sll	r2,r18,r2
    71cc:	90e4d83a 	srl	r18,r18,r3
    71d0:	0021883a 	mov	r16,zero
    71d4:	1006c03a 	cmpne	r3,r2,zero
    71d8:	90c6b03a 	or	r3,r18,r3
    71dc:	003fc306 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    71e0:	2000e026 	beq	r4,zero,7564 <__subsf3+0x4dc>
    71e4:	2007883a 	mov	r3,r4
    71e8:	188001cc 	andi	r2,r3,7
    71ec:	103fc11e 	bne	r2,zero,70f4 <__ram_exceptions_end+0xfb005aac>
    71f0:	180ad0fa 	srli	r5,r3,3
    71f4:	00c03fc4 	movi	r3,255
    71f8:	8880004c 	andi	r2,r17,1
    71fc:	80c0031e 	bne	r16,r3,720c <__subsf3+0x184>
    7200:	28006d26 	beq	r5,zero,73b8 <__subsf3+0x330>
    7204:	29401034 	orhi	r5,r5,64
    7208:	043fffc4 	movi	r16,-1
    720c:	00c02034 	movhi	r3,128
    7210:	18ffffc4 	addi	r3,r3,-1
    7214:	28ca703a 	and	r5,r5,r3
    7218:	003fc206 	br	7124 <__ram_exceptions_end+0xfb005adc>
    721c:	01003c0e 	bge	zero,r4,7310 <__subsf3+0x288>
    7220:	30002126 	beq	r6,zero,72a8 <__subsf3+0x220>
    7224:	01403fc4 	movi	r5,255
    7228:	817fb026 	beq	r16,r5,70ec <__ram_exceptions_end+0xfb005aa4>
    722c:	39c10034 	orhi	r7,r7,1024
    7230:	014006c4 	movi	r5,27
    7234:	29007416 	blt	r5,r4,7408 <__subsf3+0x380>
    7238:	01400804 	movi	r5,32
    723c:	290bc83a 	sub	r5,r5,r4
    7240:	394a983a 	sll	r5,r7,r5
    7244:	390ed83a 	srl	r7,r7,r4
    7248:	2808c03a 	cmpne	r4,r5,zero
    724c:	390eb03a 	or	r7,r7,r4
    7250:	19c7883a 	add	r3,r3,r7
    7254:	1901002c 	andhi	r4,r3,1024
    7258:	20003826 	beq	r4,zero,733c <__subsf3+0x2b4>
    725c:	84000044 	addi	r16,r16,1
    7260:	01003fc4 	movi	r4,255
    7264:	81005426 	beq	r16,r4,73b8 <__subsf3+0x330>
    7268:	1023883a 	mov	r17,r2
    726c:	00bf0034 	movhi	r2,64512
    7270:	10bfffc4 	addi	r2,r2,-1
    7274:	1900004c 	andi	r4,r3,1
    7278:	1886703a 	and	r3,r3,r2
    727c:	1806d07a 	srli	r3,r3,1
    7280:	1906b03a 	or	r3,r3,r4
    7284:	003f9906 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7288:	383f9226 	beq	r7,zero,70d4 <__ram_exceptions_end+0xfb005a8c>
    728c:	10803fcc 	andi	r2,r2,255
    7290:	003f9106 	br	70d8 <__ram_exceptions_end+0xfb005a90>
    7294:	213fffc4 	addi	r4,r4,-1
    7298:	203fbc26 	beq	r4,zero,718c <__ram_exceptions_end+0xfb005b44>
    729c:	00803fc4 	movi	r2,255
    72a0:	80bfb21e 	bne	r16,r2,716c <__ram_exceptions_end+0xfb005b24>
    72a4:	003f9106 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    72a8:	383f9026 	beq	r7,zero,70ec <__ram_exceptions_end+0xfb005aa4>
    72ac:	213fffc4 	addi	r4,r4,-1
    72b0:	203fe726 	beq	r4,zero,7250 <__ram_exceptions_end+0xfb005c08>
    72b4:	01403fc4 	movi	r5,255
    72b8:	817fdd1e 	bne	r16,r5,7230 <__ram_exceptions_end+0xfb005be8>
    72bc:	003f8b06 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    72c0:	2000221e 	bne	r4,zero,734c <__subsf3+0x2c4>
    72c4:	81000044 	addi	r4,r16,1
    72c8:	21003fcc 	andi	r4,r4,255
    72cc:	01400044 	movi	r5,1
    72d0:	2900470e 	bge	r5,r4,73f0 <__subsf3+0x368>
    72d4:	19e5c83a 	sub	r18,r3,r7
    72d8:	9141002c 	andhi	r5,r18,1024
    72dc:	28002d26 	beq	r5,zero,7394 <__subsf3+0x30c>
    72e0:	38e5c83a 	sub	r18,r7,r3
    72e4:	1023883a 	mov	r17,r2
    72e8:	003fae06 	br	71a4 <__ram_exceptions_end+0xfb005b5c>
    72ec:	8880004c 	andi	r2,r17,1
    72f0:	043fffc4 	movi	r16,-1
    72f4:	000b883a 	mov	r5,zero
    72f8:	003f8a06 	br	7124 <__ram_exceptions_end+0xfb005adc>
    72fc:	00ff0034 	movhi	r3,64512
    7300:	18ffffc4 	addi	r3,r3,-1
    7304:	80a1c83a 	sub	r16,r16,r2
    7308:	90c6703a 	and	r3,r18,r3
    730c:	003f7706 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7310:	2000431e 	bne	r4,zero,7420 <__subsf3+0x398>
    7314:	81000044 	addi	r4,r16,1
    7318:	21803fcc 	andi	r6,r4,255
    731c:	01400044 	movi	r5,1
    7320:	2980280e 	bge	r5,r6,73c4 <__subsf3+0x33c>
    7324:	01403fc4 	movi	r5,255
    7328:	21402326 	beq	r4,r5,73b8 <__subsf3+0x330>
    732c:	19c7883a 	add	r3,r3,r7
    7330:	1806d07a 	srli	r3,r3,1
    7334:	2021883a 	mov	r16,r4
    7338:	003f6c06 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    733c:	1023883a 	mov	r17,r2
    7340:	003fa906 	br	71e8 <__ram_exceptions_end+0xfb005ba0>
    7344:	01c00044 	movi	r7,1
    7348:	003f9006 	br	718c <__ram_exceptions_end+0xfb005b44>
    734c:	8000151e 	bne	r16,zero,73a4 <__subsf3+0x31c>
    7350:	18002f26 	beq	r3,zero,7410 <__subsf3+0x388>
    7354:	0108303a 	nor	r4,zero,r4
    7358:	20000a26 	beq	r4,zero,7384 <__subsf3+0x2fc>
    735c:	01403fc4 	movi	r5,255
    7360:	31402b26 	beq	r6,r5,7410 <__subsf3+0x388>
    7364:	014006c4 	movi	r5,27
    7368:	29006e16 	blt	r5,r4,7524 <__subsf3+0x49c>
    736c:	01400804 	movi	r5,32
    7370:	290bc83a 	sub	r5,r5,r4
    7374:	194a983a 	sll	r5,r3,r5
    7378:	1908d83a 	srl	r4,r3,r4
    737c:	2806c03a 	cmpne	r3,r5,zero
    7380:	20c6b03a 	or	r3,r4,r3
    7384:	38c7c83a 	sub	r3,r7,r3
    7388:	3021883a 	mov	r16,r6
    738c:	1023883a 	mov	r17,r2
    7390:	003f7f06 	br	7190 <__ram_exceptions_end+0xfb005b48>
    7394:	903f831e 	bne	r18,zero,71a4 <__ram_exceptions_end+0xfb005b5c>
    7398:	0005883a 	mov	r2,zero
    739c:	0021883a 	mov	r16,zero
    73a0:	003f9a06 	br	720c <__ram_exceptions_end+0xfb005bc4>
    73a4:	01403fc4 	movi	r5,255
    73a8:	31401926 	beq	r6,r5,7410 <__subsf3+0x388>
    73ac:	0109c83a 	sub	r4,zero,r4
    73b0:	18c10034 	orhi	r3,r3,1024
    73b4:	003feb06 	br	7364 <__ram_exceptions_end+0xfb005d1c>
    73b8:	043fffc4 	movi	r16,-1
    73bc:	000b883a 	mov	r5,zero
    73c0:	003f5806 	br	7124 <__ram_exceptions_end+0xfb005adc>
    73c4:	8000481e 	bne	r16,zero,74e8 <__subsf3+0x460>
    73c8:	18006226 	beq	r3,zero,7554 <__subsf3+0x4cc>
    73cc:	383f4726 	beq	r7,zero,70ec <__ram_exceptions_end+0xfb005aa4>
    73d0:	19c7883a 	add	r3,r3,r7
    73d4:	1881002c 	andhi	r2,r3,1024
    73d8:	103f8326 	beq	r2,zero,71e8 <__ram_exceptions_end+0xfb005ba0>
    73dc:	00bf0034 	movhi	r2,64512
    73e0:	10bfffc4 	addi	r2,r2,-1
    73e4:	2821883a 	mov	r16,r5
    73e8:	1886703a 	and	r3,r3,r2
    73ec:	003f3f06 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    73f0:	80001c1e 	bne	r16,zero,7464 <__subsf3+0x3dc>
    73f4:	1800261e 	bne	r3,zero,7490 <__subsf3+0x408>
    73f8:	38004c26 	beq	r7,zero,752c <__subsf3+0x4a4>
    73fc:	3807883a 	mov	r3,r7
    7400:	1023883a 	mov	r17,r2
    7404:	003f3906 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7408:	01c00044 	movi	r7,1
    740c:	003f9006 	br	7250 <__ram_exceptions_end+0xfb005c08>
    7410:	3807883a 	mov	r3,r7
    7414:	3021883a 	mov	r16,r6
    7418:	1023883a 	mov	r17,r2
    741c:	003f3306 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7420:	8000161e 	bne	r16,zero,747c <__subsf3+0x3f4>
    7424:	18002d26 	beq	r3,zero,74dc <__subsf3+0x454>
    7428:	0108303a 	nor	r4,zero,r4
    742c:	20000a26 	beq	r4,zero,7458 <__subsf3+0x3d0>
    7430:	01403fc4 	movi	r5,255
    7434:	31402926 	beq	r6,r5,74dc <__subsf3+0x454>
    7438:	014006c4 	movi	r5,27
    743c:	29004716 	blt	r5,r4,755c <__subsf3+0x4d4>
    7440:	01400804 	movi	r5,32
    7444:	290bc83a 	sub	r5,r5,r4
    7448:	194a983a 	sll	r5,r3,r5
    744c:	1908d83a 	srl	r4,r3,r4
    7450:	2806c03a 	cmpne	r3,r5,zero
    7454:	20c6b03a 	or	r3,r4,r3
    7458:	19c7883a 	add	r3,r3,r7
    745c:	3021883a 	mov	r16,r6
    7460:	003f7c06 	br	7254 <__ram_exceptions_end+0xfb005c0c>
    7464:	1800111e 	bne	r3,zero,74ac <__subsf3+0x424>
    7468:	38003326 	beq	r7,zero,7538 <__subsf3+0x4b0>
    746c:	3807883a 	mov	r3,r7
    7470:	1023883a 	mov	r17,r2
    7474:	04003fc4 	movi	r16,255
    7478:	003f1c06 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    747c:	01403fc4 	movi	r5,255
    7480:	31401626 	beq	r6,r5,74dc <__subsf3+0x454>
    7484:	0109c83a 	sub	r4,zero,r4
    7488:	18c10034 	orhi	r3,r3,1024
    748c:	003fea06 	br	7438 <__ram_exceptions_end+0xfb005df0>
    7490:	383f1626 	beq	r7,zero,70ec <__ram_exceptions_end+0xfb005aa4>
    7494:	19c9c83a 	sub	r4,r3,r7
    7498:	2141002c 	andhi	r5,r4,1024
    749c:	283f5026 	beq	r5,zero,71e0 <__ram_exceptions_end+0xfb005b98>
    74a0:	38c7c83a 	sub	r3,r7,r3
    74a4:	1023883a 	mov	r17,r2
    74a8:	003f1006 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    74ac:	38001b26 	beq	r7,zero,751c <__subsf3+0x494>
    74b0:	1806d0fa 	srli	r3,r3,3
    74b4:	1900102c 	andhi	r4,r3,64
    74b8:	20000526 	beq	r4,zero,74d0 <__subsf3+0x448>
    74bc:	380ed0fa 	srli	r7,r7,3
    74c0:	3900102c 	andhi	r4,r7,64
    74c4:	2000021e 	bne	r4,zero,74d0 <__subsf3+0x448>
    74c8:	3807883a 	mov	r3,r7
    74cc:	1023883a 	mov	r17,r2
    74d0:	180690fa 	slli	r3,r3,3
    74d4:	04003fc4 	movi	r16,255
    74d8:	003f0406 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    74dc:	3807883a 	mov	r3,r7
    74e0:	3021883a 	mov	r16,r6
    74e4:	003f0106 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    74e8:	18001726 	beq	r3,zero,7548 <__subsf3+0x4c0>
    74ec:	38000b26 	beq	r7,zero,751c <__subsf3+0x494>
    74f0:	1806d0fa 	srli	r3,r3,3
    74f4:	1900102c 	andhi	r4,r3,64
    74f8:	20000426 	beq	r4,zero,750c <__subsf3+0x484>
    74fc:	380ed0fa 	srli	r7,r7,3
    7500:	3900102c 	andhi	r4,r7,64
    7504:	2000011e 	bne	r4,zero,750c <__subsf3+0x484>
    7508:	3807883a 	mov	r3,r7
    750c:	180690fa 	slli	r3,r3,3
    7510:	1023883a 	mov	r17,r2
    7514:	04003fc4 	movi	r16,255
    7518:	003ef406 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    751c:	04003fc4 	movi	r16,255
    7520:	003ef206 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7524:	00c00044 	movi	r3,1
    7528:	003f9606 	br	7384 <__ram_exceptions_end+0xfb005d3c>
    752c:	000b883a 	mov	r5,zero
    7530:	0005883a 	mov	r2,zero
    7534:	003f3506 	br	720c <__ram_exceptions_end+0xfb005bc4>
    7538:	01402034 	movhi	r5,128
    753c:	297fffc4 	addi	r5,r5,-1
    7540:	0005883a 	mov	r2,zero
    7544:	003f2f06 	br	7204 <__ram_exceptions_end+0xfb005bbc>
    7548:	3807883a 	mov	r3,r7
    754c:	04003fc4 	movi	r16,255
    7550:	003ee606 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    7554:	3807883a 	mov	r3,r7
    7558:	003ee406 	br	70ec <__ram_exceptions_end+0xfb005aa4>
    755c:	00c00044 	movi	r3,1
    7560:	003fbd06 	br	7458 <__ram_exceptions_end+0xfb005e10>
    7564:	0005883a 	mov	r2,zero
    7568:	003f2806 	br	720c <__ram_exceptions_end+0xfb005bc4>

0000756c <__fixsfsi>:
    756c:	200ad5fa 	srli	r5,r4,23
    7570:	00c02034 	movhi	r3,128
    7574:	18ffffc4 	addi	r3,r3,-1
    7578:	29403fcc 	andi	r5,r5,255
    757c:	00801f84 	movi	r2,126
    7580:	1906703a 	and	r3,r3,r4
    7584:	2008d7fa 	srli	r4,r4,31
    7588:	11400e0e 	bge	r2,r5,75c4 <__fixsfsi+0x58>
    758c:	00802744 	movi	r2,157
    7590:	11400816 	blt	r2,r5,75b4 <__fixsfsi+0x48>
    7594:	00802544 	movi	r2,149
    7598:	18c02034 	orhi	r3,r3,128
    759c:	11400b0e 	bge	r2,r5,75cc <__fixsfsi+0x60>
    75a0:	28bfda84 	addi	r2,r5,-150
    75a4:	1884983a 	sll	r2,r3,r2
    75a8:	20000726 	beq	r4,zero,75c8 <__fixsfsi+0x5c>
    75ac:	0085c83a 	sub	r2,zero,r2
    75b0:	f800283a 	ret
    75b4:	00a00034 	movhi	r2,32768
    75b8:	10bfffc4 	addi	r2,r2,-1
    75bc:	2085883a 	add	r2,r4,r2
    75c0:	f800283a 	ret
    75c4:	0005883a 	mov	r2,zero
    75c8:	f800283a 	ret
    75cc:	00802584 	movi	r2,150
    75d0:	1145c83a 	sub	r2,r2,r5
    75d4:	1884d83a 	srl	r2,r3,r2
    75d8:	003ff306 	br	75a8 <__ram_exceptions_end+0xfb005f60>

000075dc <__floatsisf>:
    75dc:	defffd04 	addi	sp,sp,-12
    75e0:	dfc00215 	stw	ra,8(sp)
    75e4:	dc400115 	stw	r17,4(sp)
    75e8:	dc000015 	stw	r16,0(sp)
    75ec:	20003526 	beq	r4,zero,76c4 <__floatsisf+0xe8>
    75f0:	2021883a 	mov	r16,r4
    75f4:	2022d7fa 	srli	r17,r4,31
    75f8:	20003616 	blt	r4,zero,76d4 <__floatsisf+0xf8>
    75fc:	8009883a 	mov	r4,r16
    7600:	0009f100 	call	9f10 <__clzsi2>
    7604:	00c02784 	movi	r3,158
    7608:	1887c83a 	sub	r3,r3,r2
    760c:	01002584 	movi	r4,150
    7610:	20c01416 	blt	r4,r3,7664 <__floatsisf+0x88>
    7614:	20c9c83a 	sub	r4,r4,r3
    7618:	8120983a 	sll	r16,r16,r4
    761c:	00802034 	movhi	r2,128
    7620:	10bfffc4 	addi	r2,r2,-1
    7624:	8809883a 	mov	r4,r17
    7628:	80a0703a 	and	r16,r16,r2
    762c:	18803fcc 	andi	r2,r3,255
    7630:	100695fa 	slli	r3,r2,23
    7634:	20803fcc 	andi	r2,r4,255
    7638:	100897fa 	slli	r4,r2,31
    763c:	00802034 	movhi	r2,128
    7640:	10bfffc4 	addi	r2,r2,-1
    7644:	8084703a 	and	r2,r16,r2
    7648:	10c4b03a 	or	r2,r2,r3
    764c:	1104b03a 	or	r2,r2,r4
    7650:	dfc00217 	ldw	ra,8(sp)
    7654:	dc400117 	ldw	r17,4(sp)
    7658:	dc000017 	ldw	r16,0(sp)
    765c:	dec00304 	addi	sp,sp,12
    7660:	f800283a 	ret
    7664:	01002644 	movi	r4,153
    7668:	20c01c16 	blt	r4,r3,76dc <__floatsisf+0x100>
    766c:	20c9c83a 	sub	r4,r4,r3
    7670:	8120983a 	sll	r16,r16,r4
    7674:	013f0034 	movhi	r4,64512
    7678:	213fffc4 	addi	r4,r4,-1
    767c:	814001cc 	andi	r5,r16,7
    7680:	8108703a 	and	r4,r16,r4
    7684:	28000426 	beq	r5,zero,7698 <__floatsisf+0xbc>
    7688:	840003cc 	andi	r16,r16,15
    768c:	01400104 	movi	r5,4
    7690:	81400126 	beq	r16,r5,7698 <__floatsisf+0xbc>
    7694:	2149883a 	add	r4,r4,r5
    7698:	2141002c 	andhi	r5,r4,1024
    769c:	28000526 	beq	r5,zero,76b4 <__floatsisf+0xd8>
    76a0:	00c027c4 	movi	r3,159
    76a4:	1887c83a 	sub	r3,r3,r2
    76a8:	00bf0034 	movhi	r2,64512
    76ac:	10bfffc4 	addi	r2,r2,-1
    76b0:	2088703a 	and	r4,r4,r2
    76b4:	202091ba 	slli	r16,r4,6
    76b8:	8809883a 	mov	r4,r17
    76bc:	8020d27a 	srli	r16,r16,9
    76c0:	003fda06 	br	762c <__ram_exceptions_end+0xfb005fe4>
    76c4:	0009883a 	mov	r4,zero
    76c8:	0007883a 	mov	r3,zero
    76cc:	0021883a 	mov	r16,zero
    76d0:	003fd606 	br	762c <__ram_exceptions_end+0xfb005fe4>
    76d4:	0121c83a 	sub	r16,zero,r4
    76d8:	003fc806 	br	75fc <__ram_exceptions_end+0xfb005fb4>
    76dc:	01002e44 	movi	r4,185
    76e0:	20c9c83a 	sub	r4,r4,r3
    76e4:	01400144 	movi	r5,5
    76e8:	8108983a 	sll	r4,r16,r4
    76ec:	288bc83a 	sub	r5,r5,r2
    76f0:	8160d83a 	srl	r16,r16,r5
    76f4:	2008c03a 	cmpne	r4,r4,zero
    76f8:	8120b03a 	or	r16,r16,r4
    76fc:	003fdd06 	br	7674 <__ram_exceptions_end+0xfb00602c>

00007700 <__floatunsisf>:
    7700:	defffe04 	addi	sp,sp,-8
    7704:	dfc00115 	stw	ra,4(sp)
    7708:	dc000015 	stw	r16,0(sp)
    770c:	20002c26 	beq	r4,zero,77c0 <__floatunsisf+0xc0>
    7710:	2021883a 	mov	r16,r4
    7714:	0009f100 	call	9f10 <__clzsi2>
    7718:	00c02784 	movi	r3,158
    771c:	1887c83a 	sub	r3,r3,r2
    7720:	01002584 	movi	r4,150
    7724:	20c00f16 	blt	r4,r3,7764 <__floatunsisf+0x64>
    7728:	20c9c83a 	sub	r4,r4,r3
    772c:	8108983a 	sll	r4,r16,r4
    7730:	00802034 	movhi	r2,128
    7734:	10bfffc4 	addi	r2,r2,-1
    7738:	2088703a 	and	r4,r4,r2
    773c:	18803fcc 	andi	r2,r3,255
    7740:	100695fa 	slli	r3,r2,23
    7744:	00802034 	movhi	r2,128
    7748:	10bfffc4 	addi	r2,r2,-1
    774c:	2084703a 	and	r2,r4,r2
    7750:	10c4b03a 	or	r2,r2,r3
    7754:	dfc00117 	ldw	ra,4(sp)
    7758:	dc000017 	ldw	r16,0(sp)
    775c:	dec00204 	addi	sp,sp,8
    7760:	f800283a 	ret
    7764:	01002644 	movi	r4,153
    7768:	20c01816 	blt	r4,r3,77cc <__floatunsisf+0xcc>
    776c:	20c9c83a 	sub	r4,r4,r3
    7770:	8108983a 	sll	r4,r16,r4
    7774:	017f0034 	movhi	r5,64512
    7778:	297fffc4 	addi	r5,r5,-1
    777c:	218001cc 	andi	r6,r4,7
    7780:	214a703a 	and	r5,r4,r5
    7784:	30000426 	beq	r6,zero,7798 <__floatunsisf+0x98>
    7788:	210003cc 	andi	r4,r4,15
    778c:	01800104 	movi	r6,4
    7790:	21800126 	beq	r4,r6,7798 <__floatunsisf+0x98>
    7794:	298b883a 	add	r5,r5,r6
    7798:	2901002c 	andhi	r4,r5,1024
    779c:	20000526 	beq	r4,zero,77b4 <__floatunsisf+0xb4>
    77a0:	00c027c4 	movi	r3,159
    77a4:	1887c83a 	sub	r3,r3,r2
    77a8:	00bf0034 	movhi	r2,64512
    77ac:	10bfffc4 	addi	r2,r2,-1
    77b0:	288a703a 	and	r5,r5,r2
    77b4:	280891ba 	slli	r4,r5,6
    77b8:	2008d27a 	srli	r4,r4,9
    77bc:	003fdf06 	br	773c <__ram_exceptions_end+0xfb0060f4>
    77c0:	0007883a 	mov	r3,zero
    77c4:	0009883a 	mov	r4,zero
    77c8:	003fdc06 	br	773c <__ram_exceptions_end+0xfb0060f4>
    77cc:	01402e44 	movi	r5,185
    77d0:	28cbc83a 	sub	r5,r5,r3
    77d4:	01000144 	movi	r4,5
    77d8:	2089c83a 	sub	r4,r4,r2
    77dc:	814a983a 	sll	r5,r16,r5
    77e0:	8108d83a 	srl	r4,r16,r4
    77e4:	2820c03a 	cmpne	r16,r5,zero
    77e8:	2408b03a 	or	r4,r4,r16
    77ec:	003fe106 	br	7774 <__ram_exceptions_end+0xfb00612c>

000077f0 <__adddf3>:
    77f0:	02c00434 	movhi	r11,16
    77f4:	5affffc4 	addi	r11,r11,-1
    77f8:	2806d7fa 	srli	r3,r5,31
    77fc:	2ad4703a 	and	r10,r5,r11
    7800:	3ad2703a 	and	r9,r7,r11
    7804:	3804d53a 	srli	r2,r7,20
    7808:	3018d77a 	srli	r12,r6,29
    780c:	280ad53a 	srli	r5,r5,20
    7810:	501490fa 	slli	r10,r10,3
    7814:	2010d77a 	srli	r8,r4,29
    7818:	481290fa 	slli	r9,r9,3
    781c:	380ed7fa 	srli	r7,r7,31
    7820:	defffb04 	addi	sp,sp,-20
    7824:	dc800215 	stw	r18,8(sp)
    7828:	dc400115 	stw	r17,4(sp)
    782c:	dc000015 	stw	r16,0(sp)
    7830:	dfc00415 	stw	ra,16(sp)
    7834:	dcc00315 	stw	r19,12(sp)
    7838:	1c803fcc 	andi	r18,r3,255
    783c:	2c01ffcc 	andi	r16,r5,2047
    7840:	5210b03a 	or	r8,r10,r8
    7844:	202290fa 	slli	r17,r4,3
    7848:	1081ffcc 	andi	r2,r2,2047
    784c:	4b12b03a 	or	r9,r9,r12
    7850:	300c90fa 	slli	r6,r6,3
    7854:	91c07526 	beq	r18,r7,7a2c <__adddf3+0x23c>
    7858:	8087c83a 	sub	r3,r16,r2
    785c:	00c0ab0e 	bge	zero,r3,7b0c <__adddf3+0x31c>
    7860:	10002a1e 	bne	r2,zero,790c <__adddf3+0x11c>
    7864:	4984b03a 	or	r2,r9,r6
    7868:	1000961e 	bne	r2,zero,7ac4 <__adddf3+0x2d4>
    786c:	888001cc 	andi	r2,r17,7
    7870:	10000726 	beq	r2,zero,7890 <__adddf3+0xa0>
    7874:	888003cc 	andi	r2,r17,15
    7878:	00c00104 	movi	r3,4
    787c:	10c00426 	beq	r2,r3,7890 <__adddf3+0xa0>
    7880:	88c7883a 	add	r3,r17,r3
    7884:	1c63803a 	cmpltu	r17,r3,r17
    7888:	4451883a 	add	r8,r8,r17
    788c:	1823883a 	mov	r17,r3
    7890:	4080202c 	andhi	r2,r8,128
    7894:	10005926 	beq	r2,zero,79fc <__adddf3+0x20c>
    7898:	84000044 	addi	r16,r16,1
    789c:	0081ffc4 	movi	r2,2047
    78a0:	8080ba26 	beq	r16,r2,7b8c <__adddf3+0x39c>
    78a4:	00bfe034 	movhi	r2,65408
    78a8:	10bfffc4 	addi	r2,r2,-1
    78ac:	4090703a 	and	r8,r8,r2
    78b0:	4004977a 	slli	r2,r8,29
    78b4:	4010927a 	slli	r8,r8,9
    78b8:	8822d0fa 	srli	r17,r17,3
    78bc:	8401ffcc 	andi	r16,r16,2047
    78c0:	4010d33a 	srli	r8,r8,12
    78c4:	9007883a 	mov	r3,r18
    78c8:	1444b03a 	or	r2,r2,r17
    78cc:	8401ffcc 	andi	r16,r16,2047
    78d0:	8020953a 	slli	r16,r16,20
    78d4:	18c03fcc 	andi	r3,r3,255
    78d8:	01000434 	movhi	r4,16
    78dc:	213fffc4 	addi	r4,r4,-1
    78e0:	180697fa 	slli	r3,r3,31
    78e4:	4110703a 	and	r8,r8,r4
    78e8:	4410b03a 	or	r8,r8,r16
    78ec:	40c6b03a 	or	r3,r8,r3
    78f0:	dfc00417 	ldw	ra,16(sp)
    78f4:	dcc00317 	ldw	r19,12(sp)
    78f8:	dc800217 	ldw	r18,8(sp)
    78fc:	dc400117 	ldw	r17,4(sp)
    7900:	dc000017 	ldw	r16,0(sp)
    7904:	dec00504 	addi	sp,sp,20
    7908:	f800283a 	ret
    790c:	0081ffc4 	movi	r2,2047
    7910:	80bfd626 	beq	r16,r2,786c <__ram_exceptions_end+0xfb006224>
    7914:	4a402034 	orhi	r9,r9,128
    7918:	00800e04 	movi	r2,56
    791c:	10c09f16 	blt	r2,r3,7b9c <__adddf3+0x3ac>
    7920:	008007c4 	movi	r2,31
    7924:	10c0c216 	blt	r2,r3,7c30 <__adddf3+0x440>
    7928:	00800804 	movi	r2,32
    792c:	10c5c83a 	sub	r2,r2,r3
    7930:	488a983a 	sll	r5,r9,r2
    7934:	30c8d83a 	srl	r4,r6,r3
    7938:	3084983a 	sll	r2,r6,r2
    793c:	48c6d83a 	srl	r3,r9,r3
    7940:	290cb03a 	or	r6,r5,r4
    7944:	1004c03a 	cmpne	r2,r2,zero
    7948:	308cb03a 	or	r6,r6,r2
    794c:	898dc83a 	sub	r6,r17,r6
    7950:	89a3803a 	cmpltu	r17,r17,r6
    7954:	40d1c83a 	sub	r8,r8,r3
    7958:	4451c83a 	sub	r8,r8,r17
    795c:	3023883a 	mov	r17,r6
    7960:	4080202c 	andhi	r2,r8,128
    7964:	10002326 	beq	r2,zero,79f4 <__adddf3+0x204>
    7968:	04c02034 	movhi	r19,128
    796c:	9cffffc4 	addi	r19,r19,-1
    7970:	44e6703a 	and	r19,r8,r19
    7974:	98007626 	beq	r19,zero,7b50 <__adddf3+0x360>
    7978:	9809883a 	mov	r4,r19
    797c:	0009f100 	call	9f10 <__clzsi2>
    7980:	10fffe04 	addi	r3,r2,-8
    7984:	010007c4 	movi	r4,31
    7988:	20c07716 	blt	r4,r3,7b68 <__adddf3+0x378>
    798c:	00800804 	movi	r2,32
    7990:	10c5c83a 	sub	r2,r2,r3
    7994:	8884d83a 	srl	r2,r17,r2
    7998:	98d0983a 	sll	r8,r19,r3
    799c:	88e2983a 	sll	r17,r17,r3
    79a0:	1204b03a 	or	r2,r2,r8
    79a4:	1c007416 	blt	r3,r16,7b78 <__adddf3+0x388>
    79a8:	1c21c83a 	sub	r16,r3,r16
    79ac:	82000044 	addi	r8,r16,1
    79b0:	00c007c4 	movi	r3,31
    79b4:	1a009116 	blt	r3,r8,7bfc <__adddf3+0x40c>
    79b8:	00c00804 	movi	r3,32
    79bc:	1a07c83a 	sub	r3,r3,r8
    79c0:	8a08d83a 	srl	r4,r17,r8
    79c4:	88e2983a 	sll	r17,r17,r3
    79c8:	10c6983a 	sll	r3,r2,r3
    79cc:	1210d83a 	srl	r8,r2,r8
    79d0:	8804c03a 	cmpne	r2,r17,zero
    79d4:	1906b03a 	or	r3,r3,r4
    79d8:	18a2b03a 	or	r17,r3,r2
    79dc:	0021883a 	mov	r16,zero
    79e0:	003fa206 	br	786c <__ram_exceptions_end+0xfb006224>
    79e4:	1890b03a 	or	r8,r3,r2
    79e8:	40017d26 	beq	r8,zero,7fe0 <__adddf3+0x7f0>
    79ec:	1011883a 	mov	r8,r2
    79f0:	1823883a 	mov	r17,r3
    79f4:	888001cc 	andi	r2,r17,7
    79f8:	103f9e1e 	bne	r2,zero,7874 <__ram_exceptions_end+0xfb00622c>
    79fc:	4004977a 	slli	r2,r8,29
    7a00:	8822d0fa 	srli	r17,r17,3
    7a04:	4010d0fa 	srli	r8,r8,3
    7a08:	9007883a 	mov	r3,r18
    7a0c:	1444b03a 	or	r2,r2,r17
    7a10:	0101ffc4 	movi	r4,2047
    7a14:	81002426 	beq	r16,r4,7aa8 <__adddf3+0x2b8>
    7a18:	8120703a 	and	r16,r16,r4
    7a1c:	01000434 	movhi	r4,16
    7a20:	213fffc4 	addi	r4,r4,-1
    7a24:	4110703a 	and	r8,r8,r4
    7a28:	003fa806 	br	78cc <__ram_exceptions_end+0xfb006284>
    7a2c:	8089c83a 	sub	r4,r16,r2
    7a30:	01005e0e 	bge	zero,r4,7bac <__adddf3+0x3bc>
    7a34:	10002b26 	beq	r2,zero,7ae4 <__adddf3+0x2f4>
    7a38:	0081ffc4 	movi	r2,2047
    7a3c:	80bf8b26 	beq	r16,r2,786c <__ram_exceptions_end+0xfb006224>
    7a40:	4a402034 	orhi	r9,r9,128
    7a44:	00800e04 	movi	r2,56
    7a48:	1100a40e 	bge	r2,r4,7cdc <__adddf3+0x4ec>
    7a4c:	498cb03a 	or	r6,r9,r6
    7a50:	300ac03a 	cmpne	r5,r6,zero
    7a54:	0013883a 	mov	r9,zero
    7a58:	2c4b883a 	add	r5,r5,r17
    7a5c:	2c63803a 	cmpltu	r17,r5,r17
    7a60:	4a11883a 	add	r8,r9,r8
    7a64:	8a11883a 	add	r8,r17,r8
    7a68:	2823883a 	mov	r17,r5
    7a6c:	4080202c 	andhi	r2,r8,128
    7a70:	103fe026 	beq	r2,zero,79f4 <__ram_exceptions_end+0xfb0063ac>
    7a74:	84000044 	addi	r16,r16,1
    7a78:	0081ffc4 	movi	r2,2047
    7a7c:	8080d226 	beq	r16,r2,7dc8 <__adddf3+0x5d8>
    7a80:	00bfe034 	movhi	r2,65408
    7a84:	10bfffc4 	addi	r2,r2,-1
    7a88:	4090703a 	and	r8,r8,r2
    7a8c:	880ad07a 	srli	r5,r17,1
    7a90:	400897fa 	slli	r4,r8,31
    7a94:	88c0004c 	andi	r3,r17,1
    7a98:	28e2b03a 	or	r17,r5,r3
    7a9c:	4010d07a 	srli	r8,r8,1
    7aa0:	2462b03a 	or	r17,r4,r17
    7aa4:	003f7106 	br	786c <__ram_exceptions_end+0xfb006224>
    7aa8:	4088b03a 	or	r4,r8,r2
    7aac:	20014526 	beq	r4,zero,7fc4 <__adddf3+0x7d4>
    7ab0:	01000434 	movhi	r4,16
    7ab4:	42000234 	orhi	r8,r8,8
    7ab8:	213fffc4 	addi	r4,r4,-1
    7abc:	4110703a 	and	r8,r8,r4
    7ac0:	003f8206 	br	78cc <__ram_exceptions_end+0xfb006284>
    7ac4:	18ffffc4 	addi	r3,r3,-1
    7ac8:	1800491e 	bne	r3,zero,7bf0 <__adddf3+0x400>
    7acc:	898bc83a 	sub	r5,r17,r6
    7ad0:	8963803a 	cmpltu	r17,r17,r5
    7ad4:	4251c83a 	sub	r8,r8,r9
    7ad8:	4451c83a 	sub	r8,r8,r17
    7adc:	2823883a 	mov	r17,r5
    7ae0:	003f9f06 	br	7960 <__ram_exceptions_end+0xfb006318>
    7ae4:	4984b03a 	or	r2,r9,r6
    7ae8:	103f6026 	beq	r2,zero,786c <__ram_exceptions_end+0xfb006224>
    7aec:	213fffc4 	addi	r4,r4,-1
    7af0:	2000931e 	bne	r4,zero,7d40 <__adddf3+0x550>
    7af4:	898d883a 	add	r6,r17,r6
    7af8:	3463803a 	cmpltu	r17,r6,r17
    7afc:	4251883a 	add	r8,r8,r9
    7b00:	8a11883a 	add	r8,r17,r8
    7b04:	3023883a 	mov	r17,r6
    7b08:	003fd806 	br	7a6c <__ram_exceptions_end+0xfb006424>
    7b0c:	1800541e 	bne	r3,zero,7c60 <__adddf3+0x470>
    7b10:	80800044 	addi	r2,r16,1
    7b14:	1081ffcc 	andi	r2,r2,2047
    7b18:	00c00044 	movi	r3,1
    7b1c:	1880a00e 	bge	r3,r2,7da0 <__adddf3+0x5b0>
    7b20:	8989c83a 	sub	r4,r17,r6
    7b24:	8905803a 	cmpltu	r2,r17,r4
    7b28:	4267c83a 	sub	r19,r8,r9
    7b2c:	98a7c83a 	sub	r19,r19,r2
    7b30:	9880202c 	andhi	r2,r19,128
    7b34:	10006326 	beq	r2,zero,7cc4 <__adddf3+0x4d4>
    7b38:	3463c83a 	sub	r17,r6,r17
    7b3c:	4a07c83a 	sub	r3,r9,r8
    7b40:	344d803a 	cmpltu	r6,r6,r17
    7b44:	19a7c83a 	sub	r19,r3,r6
    7b48:	3825883a 	mov	r18,r7
    7b4c:	983f8a1e 	bne	r19,zero,7978 <__ram_exceptions_end+0xfb006330>
    7b50:	8809883a 	mov	r4,r17
    7b54:	0009f100 	call	9f10 <__clzsi2>
    7b58:	10800804 	addi	r2,r2,32
    7b5c:	10fffe04 	addi	r3,r2,-8
    7b60:	010007c4 	movi	r4,31
    7b64:	20ff890e 	bge	r4,r3,798c <__ram_exceptions_end+0xfb006344>
    7b68:	10bff604 	addi	r2,r2,-40
    7b6c:	8884983a 	sll	r2,r17,r2
    7b70:	0023883a 	mov	r17,zero
    7b74:	1c3f8c0e 	bge	r3,r16,79a8 <__ram_exceptions_end+0xfb006360>
    7b78:	023fe034 	movhi	r8,65408
    7b7c:	423fffc4 	addi	r8,r8,-1
    7b80:	80e1c83a 	sub	r16,r16,r3
    7b84:	1210703a 	and	r8,r2,r8
    7b88:	003f3806 	br	786c <__ram_exceptions_end+0xfb006224>
    7b8c:	9007883a 	mov	r3,r18
    7b90:	0011883a 	mov	r8,zero
    7b94:	0005883a 	mov	r2,zero
    7b98:	003f4c06 	br	78cc <__ram_exceptions_end+0xfb006284>
    7b9c:	498cb03a 	or	r6,r9,r6
    7ba0:	300cc03a 	cmpne	r6,r6,zero
    7ba4:	0007883a 	mov	r3,zero
    7ba8:	003f6806 	br	794c <__ram_exceptions_end+0xfb006304>
    7bac:	20009c1e 	bne	r4,zero,7e20 <__adddf3+0x630>
    7bb0:	80800044 	addi	r2,r16,1
    7bb4:	1141ffcc 	andi	r5,r2,2047
    7bb8:	01000044 	movi	r4,1
    7bbc:	2140670e 	bge	r4,r5,7d5c <__adddf3+0x56c>
    7bc0:	0101ffc4 	movi	r4,2047
    7bc4:	11007f26 	beq	r2,r4,7dc4 <__adddf3+0x5d4>
    7bc8:	898d883a 	add	r6,r17,r6
    7bcc:	4247883a 	add	r3,r8,r9
    7bd0:	3451803a 	cmpltu	r8,r6,r17
    7bd4:	40d1883a 	add	r8,r8,r3
    7bd8:	402297fa 	slli	r17,r8,31
    7bdc:	300cd07a 	srli	r6,r6,1
    7be0:	4010d07a 	srli	r8,r8,1
    7be4:	1021883a 	mov	r16,r2
    7be8:	89a2b03a 	or	r17,r17,r6
    7bec:	003f1f06 	br	786c <__ram_exceptions_end+0xfb006224>
    7bf0:	0081ffc4 	movi	r2,2047
    7bf4:	80bf481e 	bne	r16,r2,7918 <__ram_exceptions_end+0xfb0062d0>
    7bf8:	003f1c06 	br	786c <__ram_exceptions_end+0xfb006224>
    7bfc:	843ff844 	addi	r16,r16,-31
    7c00:	01000804 	movi	r4,32
    7c04:	1406d83a 	srl	r3,r2,r16
    7c08:	41005026 	beq	r8,r4,7d4c <__adddf3+0x55c>
    7c0c:	01001004 	movi	r4,64
    7c10:	2211c83a 	sub	r8,r4,r8
    7c14:	1204983a 	sll	r2,r2,r8
    7c18:	88a2b03a 	or	r17,r17,r2
    7c1c:	8822c03a 	cmpne	r17,r17,zero
    7c20:	1c62b03a 	or	r17,r3,r17
    7c24:	0011883a 	mov	r8,zero
    7c28:	0021883a 	mov	r16,zero
    7c2c:	003f7106 	br	79f4 <__ram_exceptions_end+0xfb0063ac>
    7c30:	193ff804 	addi	r4,r3,-32
    7c34:	00800804 	movi	r2,32
    7c38:	4908d83a 	srl	r4,r9,r4
    7c3c:	18804526 	beq	r3,r2,7d54 <__adddf3+0x564>
    7c40:	00801004 	movi	r2,64
    7c44:	10c5c83a 	sub	r2,r2,r3
    7c48:	4886983a 	sll	r3,r9,r2
    7c4c:	198cb03a 	or	r6,r3,r6
    7c50:	300cc03a 	cmpne	r6,r6,zero
    7c54:	218cb03a 	or	r6,r4,r6
    7c58:	0007883a 	mov	r3,zero
    7c5c:	003f3b06 	br	794c <__ram_exceptions_end+0xfb006304>
    7c60:	80002a26 	beq	r16,zero,7d0c <__adddf3+0x51c>
    7c64:	0101ffc4 	movi	r4,2047
    7c68:	11006826 	beq	r2,r4,7e0c <__adddf3+0x61c>
    7c6c:	00c7c83a 	sub	r3,zero,r3
    7c70:	42002034 	orhi	r8,r8,128
    7c74:	01000e04 	movi	r4,56
    7c78:	20c07c16 	blt	r4,r3,7e6c <__adddf3+0x67c>
    7c7c:	010007c4 	movi	r4,31
    7c80:	20c0da16 	blt	r4,r3,7fec <__adddf3+0x7fc>
    7c84:	01000804 	movi	r4,32
    7c88:	20c9c83a 	sub	r4,r4,r3
    7c8c:	4114983a 	sll	r10,r8,r4
    7c90:	88cad83a 	srl	r5,r17,r3
    7c94:	8908983a 	sll	r4,r17,r4
    7c98:	40c6d83a 	srl	r3,r8,r3
    7c9c:	5162b03a 	or	r17,r10,r5
    7ca0:	2008c03a 	cmpne	r4,r4,zero
    7ca4:	8922b03a 	or	r17,r17,r4
    7ca8:	3463c83a 	sub	r17,r6,r17
    7cac:	48c7c83a 	sub	r3,r9,r3
    7cb0:	344d803a 	cmpltu	r6,r6,r17
    7cb4:	1991c83a 	sub	r8,r3,r6
    7cb8:	1021883a 	mov	r16,r2
    7cbc:	3825883a 	mov	r18,r7
    7cc0:	003f2706 	br	7960 <__ram_exceptions_end+0xfb006318>
    7cc4:	24d0b03a 	or	r8,r4,r19
    7cc8:	40001b1e 	bne	r8,zero,7d38 <__adddf3+0x548>
    7ccc:	0005883a 	mov	r2,zero
    7cd0:	0007883a 	mov	r3,zero
    7cd4:	0021883a 	mov	r16,zero
    7cd8:	003f4d06 	br	7a10 <__ram_exceptions_end+0xfb0063c8>
    7cdc:	008007c4 	movi	r2,31
    7ce0:	11003c16 	blt	r2,r4,7dd4 <__adddf3+0x5e4>
    7ce4:	00800804 	movi	r2,32
    7ce8:	1105c83a 	sub	r2,r2,r4
    7cec:	488e983a 	sll	r7,r9,r2
    7cf0:	310ad83a 	srl	r5,r6,r4
    7cf4:	3084983a 	sll	r2,r6,r2
    7cf8:	4912d83a 	srl	r9,r9,r4
    7cfc:	394ab03a 	or	r5,r7,r5
    7d00:	1004c03a 	cmpne	r2,r2,zero
    7d04:	288ab03a 	or	r5,r5,r2
    7d08:	003f5306 	br	7a58 <__ram_exceptions_end+0xfb006410>
    7d0c:	4448b03a 	or	r4,r8,r17
    7d10:	20003e26 	beq	r4,zero,7e0c <__adddf3+0x61c>
    7d14:	00c6303a 	nor	r3,zero,r3
    7d18:	18003a1e 	bne	r3,zero,7e04 <__adddf3+0x614>
    7d1c:	3463c83a 	sub	r17,r6,r17
    7d20:	4a07c83a 	sub	r3,r9,r8
    7d24:	344d803a 	cmpltu	r6,r6,r17
    7d28:	1991c83a 	sub	r8,r3,r6
    7d2c:	1021883a 	mov	r16,r2
    7d30:	3825883a 	mov	r18,r7
    7d34:	003f0a06 	br	7960 <__ram_exceptions_end+0xfb006318>
    7d38:	2023883a 	mov	r17,r4
    7d3c:	003f0d06 	br	7974 <__ram_exceptions_end+0xfb00632c>
    7d40:	0081ffc4 	movi	r2,2047
    7d44:	80bf3f1e 	bne	r16,r2,7a44 <__ram_exceptions_end+0xfb0063fc>
    7d48:	003ec806 	br	786c <__ram_exceptions_end+0xfb006224>
    7d4c:	0005883a 	mov	r2,zero
    7d50:	003fb106 	br	7c18 <__ram_exceptions_end+0xfb0065d0>
    7d54:	0007883a 	mov	r3,zero
    7d58:	003fbc06 	br	7c4c <__ram_exceptions_end+0xfb006604>
    7d5c:	4444b03a 	or	r2,r8,r17
    7d60:	8000871e 	bne	r16,zero,7f80 <__adddf3+0x790>
    7d64:	1000ba26 	beq	r2,zero,8050 <__adddf3+0x860>
    7d68:	4984b03a 	or	r2,r9,r6
    7d6c:	103ebf26 	beq	r2,zero,786c <__ram_exceptions_end+0xfb006224>
    7d70:	8985883a 	add	r2,r17,r6
    7d74:	4247883a 	add	r3,r8,r9
    7d78:	1451803a 	cmpltu	r8,r2,r17
    7d7c:	40d1883a 	add	r8,r8,r3
    7d80:	40c0202c 	andhi	r3,r8,128
    7d84:	1023883a 	mov	r17,r2
    7d88:	183f1a26 	beq	r3,zero,79f4 <__ram_exceptions_end+0xfb0063ac>
    7d8c:	00bfe034 	movhi	r2,65408
    7d90:	10bfffc4 	addi	r2,r2,-1
    7d94:	2021883a 	mov	r16,r4
    7d98:	4090703a 	and	r8,r8,r2
    7d9c:	003eb306 	br	786c <__ram_exceptions_end+0xfb006224>
    7da0:	4444b03a 	or	r2,r8,r17
    7da4:	8000291e 	bne	r16,zero,7e4c <__adddf3+0x65c>
    7da8:	10004b1e 	bne	r2,zero,7ed8 <__adddf3+0x6e8>
    7dac:	4990b03a 	or	r8,r9,r6
    7db0:	40008b26 	beq	r8,zero,7fe0 <__adddf3+0x7f0>
    7db4:	4811883a 	mov	r8,r9
    7db8:	3023883a 	mov	r17,r6
    7dbc:	3825883a 	mov	r18,r7
    7dc0:	003eaa06 	br	786c <__ram_exceptions_end+0xfb006224>
    7dc4:	1021883a 	mov	r16,r2
    7dc8:	0011883a 	mov	r8,zero
    7dcc:	0005883a 	mov	r2,zero
    7dd0:	003f0f06 	br	7a10 <__ram_exceptions_end+0xfb0063c8>
    7dd4:	217ff804 	addi	r5,r4,-32
    7dd8:	00800804 	movi	r2,32
    7ddc:	494ad83a 	srl	r5,r9,r5
    7de0:	20807d26 	beq	r4,r2,7fd8 <__adddf3+0x7e8>
    7de4:	00801004 	movi	r2,64
    7de8:	1109c83a 	sub	r4,r2,r4
    7dec:	4912983a 	sll	r9,r9,r4
    7df0:	498cb03a 	or	r6,r9,r6
    7df4:	300cc03a 	cmpne	r6,r6,zero
    7df8:	298ab03a 	or	r5,r5,r6
    7dfc:	0013883a 	mov	r9,zero
    7e00:	003f1506 	br	7a58 <__ram_exceptions_end+0xfb006410>
    7e04:	0101ffc4 	movi	r4,2047
    7e08:	113f9a1e 	bne	r2,r4,7c74 <__ram_exceptions_end+0xfb00662c>
    7e0c:	4811883a 	mov	r8,r9
    7e10:	3023883a 	mov	r17,r6
    7e14:	1021883a 	mov	r16,r2
    7e18:	3825883a 	mov	r18,r7
    7e1c:	003e9306 	br	786c <__ram_exceptions_end+0xfb006224>
    7e20:	8000161e 	bne	r16,zero,7e7c <__adddf3+0x68c>
    7e24:	444ab03a 	or	r5,r8,r17
    7e28:	28005126 	beq	r5,zero,7f70 <__adddf3+0x780>
    7e2c:	0108303a 	nor	r4,zero,r4
    7e30:	20004d1e 	bne	r4,zero,7f68 <__adddf3+0x778>
    7e34:	89a3883a 	add	r17,r17,r6
    7e38:	4253883a 	add	r9,r8,r9
    7e3c:	898d803a 	cmpltu	r6,r17,r6
    7e40:	3251883a 	add	r8,r6,r9
    7e44:	1021883a 	mov	r16,r2
    7e48:	003f0806 	br	7a6c <__ram_exceptions_end+0xfb006424>
    7e4c:	1000301e 	bne	r2,zero,7f10 <__adddf3+0x720>
    7e50:	4984b03a 	or	r2,r9,r6
    7e54:	10007126 	beq	r2,zero,801c <__adddf3+0x82c>
    7e58:	4811883a 	mov	r8,r9
    7e5c:	3023883a 	mov	r17,r6
    7e60:	3825883a 	mov	r18,r7
    7e64:	0401ffc4 	movi	r16,2047
    7e68:	003e8006 	br	786c <__ram_exceptions_end+0xfb006224>
    7e6c:	4462b03a 	or	r17,r8,r17
    7e70:	8822c03a 	cmpne	r17,r17,zero
    7e74:	0007883a 	mov	r3,zero
    7e78:	003f8b06 	br	7ca8 <__ram_exceptions_end+0xfb006660>
    7e7c:	0141ffc4 	movi	r5,2047
    7e80:	11403b26 	beq	r2,r5,7f70 <__adddf3+0x780>
    7e84:	0109c83a 	sub	r4,zero,r4
    7e88:	42002034 	orhi	r8,r8,128
    7e8c:	01400e04 	movi	r5,56
    7e90:	29006716 	blt	r5,r4,8030 <__adddf3+0x840>
    7e94:	014007c4 	movi	r5,31
    7e98:	29007016 	blt	r5,r4,805c <__adddf3+0x86c>
    7e9c:	01400804 	movi	r5,32
    7ea0:	290bc83a 	sub	r5,r5,r4
    7ea4:	4154983a 	sll	r10,r8,r5
    7ea8:	890ed83a 	srl	r7,r17,r4
    7eac:	894a983a 	sll	r5,r17,r5
    7eb0:	4108d83a 	srl	r4,r8,r4
    7eb4:	51e2b03a 	or	r17,r10,r7
    7eb8:	280ac03a 	cmpne	r5,r5,zero
    7ebc:	8962b03a 	or	r17,r17,r5
    7ec0:	89a3883a 	add	r17,r17,r6
    7ec4:	2253883a 	add	r9,r4,r9
    7ec8:	898d803a 	cmpltu	r6,r17,r6
    7ecc:	3251883a 	add	r8,r6,r9
    7ed0:	1021883a 	mov	r16,r2
    7ed4:	003ee506 	br	7a6c <__ram_exceptions_end+0xfb006424>
    7ed8:	4984b03a 	or	r2,r9,r6
    7edc:	103e6326 	beq	r2,zero,786c <__ram_exceptions_end+0xfb006224>
    7ee0:	8987c83a 	sub	r3,r17,r6
    7ee4:	88c9803a 	cmpltu	r4,r17,r3
    7ee8:	4245c83a 	sub	r2,r8,r9
    7eec:	1105c83a 	sub	r2,r2,r4
    7ef0:	1100202c 	andhi	r4,r2,128
    7ef4:	203ebb26 	beq	r4,zero,79e4 <__ram_exceptions_end+0xfb00639c>
    7ef8:	3463c83a 	sub	r17,r6,r17
    7efc:	4a07c83a 	sub	r3,r9,r8
    7f00:	344d803a 	cmpltu	r6,r6,r17
    7f04:	1991c83a 	sub	r8,r3,r6
    7f08:	3825883a 	mov	r18,r7
    7f0c:	003e5706 	br	786c <__ram_exceptions_end+0xfb006224>
    7f10:	4984b03a 	or	r2,r9,r6
    7f14:	10002e26 	beq	r2,zero,7fd0 <__adddf3+0x7e0>
    7f18:	4004d0fa 	srli	r2,r8,3
    7f1c:	8822d0fa 	srli	r17,r17,3
    7f20:	4010977a 	slli	r8,r8,29
    7f24:	10c0022c 	andhi	r3,r2,8
    7f28:	4462b03a 	or	r17,r8,r17
    7f2c:	18000826 	beq	r3,zero,7f50 <__adddf3+0x760>
    7f30:	4808d0fa 	srli	r4,r9,3
    7f34:	20c0022c 	andhi	r3,r4,8
    7f38:	1800051e 	bne	r3,zero,7f50 <__adddf3+0x760>
    7f3c:	300cd0fa 	srli	r6,r6,3
    7f40:	4806977a 	slli	r3,r9,29
    7f44:	2005883a 	mov	r2,r4
    7f48:	3825883a 	mov	r18,r7
    7f4c:	19a2b03a 	or	r17,r3,r6
    7f50:	8810d77a 	srli	r8,r17,29
    7f54:	100490fa 	slli	r2,r2,3
    7f58:	882290fa 	slli	r17,r17,3
    7f5c:	0401ffc4 	movi	r16,2047
    7f60:	4090b03a 	or	r8,r8,r2
    7f64:	003e4106 	br	786c <__ram_exceptions_end+0xfb006224>
    7f68:	0141ffc4 	movi	r5,2047
    7f6c:	117fc71e 	bne	r2,r5,7e8c <__ram_exceptions_end+0xfb006844>
    7f70:	4811883a 	mov	r8,r9
    7f74:	3023883a 	mov	r17,r6
    7f78:	1021883a 	mov	r16,r2
    7f7c:	003e3b06 	br	786c <__ram_exceptions_end+0xfb006224>
    7f80:	10002f26 	beq	r2,zero,8040 <__adddf3+0x850>
    7f84:	4984b03a 	or	r2,r9,r6
    7f88:	10001126 	beq	r2,zero,7fd0 <__adddf3+0x7e0>
    7f8c:	4004d0fa 	srli	r2,r8,3
    7f90:	8822d0fa 	srli	r17,r17,3
    7f94:	4010977a 	slli	r8,r8,29
    7f98:	10c0022c 	andhi	r3,r2,8
    7f9c:	4462b03a 	or	r17,r8,r17
    7fa0:	183feb26 	beq	r3,zero,7f50 <__ram_exceptions_end+0xfb006908>
    7fa4:	4808d0fa 	srli	r4,r9,3
    7fa8:	20c0022c 	andhi	r3,r4,8
    7fac:	183fe81e 	bne	r3,zero,7f50 <__ram_exceptions_end+0xfb006908>
    7fb0:	300cd0fa 	srli	r6,r6,3
    7fb4:	4806977a 	slli	r3,r9,29
    7fb8:	2005883a 	mov	r2,r4
    7fbc:	19a2b03a 	or	r17,r3,r6
    7fc0:	003fe306 	br	7f50 <__ram_exceptions_end+0xfb006908>
    7fc4:	0011883a 	mov	r8,zero
    7fc8:	0005883a 	mov	r2,zero
    7fcc:	003e3f06 	br	78cc <__ram_exceptions_end+0xfb006284>
    7fd0:	0401ffc4 	movi	r16,2047
    7fd4:	003e2506 	br	786c <__ram_exceptions_end+0xfb006224>
    7fd8:	0013883a 	mov	r9,zero
    7fdc:	003f8406 	br	7df0 <__ram_exceptions_end+0xfb0067a8>
    7fe0:	0005883a 	mov	r2,zero
    7fe4:	0007883a 	mov	r3,zero
    7fe8:	003e8906 	br	7a10 <__ram_exceptions_end+0xfb0063c8>
    7fec:	197ff804 	addi	r5,r3,-32
    7ff0:	01000804 	movi	r4,32
    7ff4:	414ad83a 	srl	r5,r8,r5
    7ff8:	19002426 	beq	r3,r4,808c <__adddf3+0x89c>
    7ffc:	01001004 	movi	r4,64
    8000:	20c7c83a 	sub	r3,r4,r3
    8004:	40c6983a 	sll	r3,r8,r3
    8008:	1c46b03a 	or	r3,r3,r17
    800c:	1806c03a 	cmpne	r3,r3,zero
    8010:	28e2b03a 	or	r17,r5,r3
    8014:	0007883a 	mov	r3,zero
    8018:	003f2306 	br	7ca8 <__ram_exceptions_end+0xfb006660>
    801c:	0007883a 	mov	r3,zero
    8020:	5811883a 	mov	r8,r11
    8024:	00bfffc4 	movi	r2,-1
    8028:	0401ffc4 	movi	r16,2047
    802c:	003e7806 	br	7a10 <__ram_exceptions_end+0xfb0063c8>
    8030:	4462b03a 	or	r17,r8,r17
    8034:	8822c03a 	cmpne	r17,r17,zero
    8038:	0009883a 	mov	r4,zero
    803c:	003fa006 	br	7ec0 <__ram_exceptions_end+0xfb006878>
    8040:	4811883a 	mov	r8,r9
    8044:	3023883a 	mov	r17,r6
    8048:	0401ffc4 	movi	r16,2047
    804c:	003e0706 	br	786c <__ram_exceptions_end+0xfb006224>
    8050:	4811883a 	mov	r8,r9
    8054:	3023883a 	mov	r17,r6
    8058:	003e0406 	br	786c <__ram_exceptions_end+0xfb006224>
    805c:	21fff804 	addi	r7,r4,-32
    8060:	01400804 	movi	r5,32
    8064:	41ced83a 	srl	r7,r8,r7
    8068:	21400a26 	beq	r4,r5,8094 <__adddf3+0x8a4>
    806c:	01401004 	movi	r5,64
    8070:	2909c83a 	sub	r4,r5,r4
    8074:	4108983a 	sll	r4,r8,r4
    8078:	2448b03a 	or	r4,r4,r17
    807c:	2008c03a 	cmpne	r4,r4,zero
    8080:	3922b03a 	or	r17,r7,r4
    8084:	0009883a 	mov	r4,zero
    8088:	003f8d06 	br	7ec0 <__ram_exceptions_end+0xfb006878>
    808c:	0007883a 	mov	r3,zero
    8090:	003fdd06 	br	8008 <__ram_exceptions_end+0xfb0069c0>
    8094:	0009883a 	mov	r4,zero
    8098:	003ff706 	br	8078 <__ram_exceptions_end+0xfb006a30>

0000809c <__divdf3>:
    809c:	defff204 	addi	sp,sp,-56
    80a0:	dd400915 	stw	r21,36(sp)
    80a4:	282ad53a 	srli	r21,r5,20
    80a8:	dd000815 	stw	r20,32(sp)
    80ac:	2828d7fa 	srli	r20,r5,31
    80b0:	dc000415 	stw	r16,16(sp)
    80b4:	04000434 	movhi	r16,16
    80b8:	df000c15 	stw	fp,48(sp)
    80bc:	843fffc4 	addi	r16,r16,-1
    80c0:	dfc00d15 	stw	ra,52(sp)
    80c4:	ddc00b15 	stw	r23,44(sp)
    80c8:	dd800a15 	stw	r22,40(sp)
    80cc:	dcc00715 	stw	r19,28(sp)
    80d0:	dc800615 	stw	r18,24(sp)
    80d4:	dc400515 	stw	r17,20(sp)
    80d8:	ad41ffcc 	andi	r21,r21,2047
    80dc:	2c20703a 	and	r16,r5,r16
    80e0:	a7003fcc 	andi	fp,r20,255
    80e4:	a8006126 	beq	r21,zero,826c <__divdf3+0x1d0>
    80e8:	0081ffc4 	movi	r2,2047
    80ec:	2025883a 	mov	r18,r4
    80f0:	a8803726 	beq	r21,r2,81d0 <__divdf3+0x134>
    80f4:	80800434 	orhi	r2,r16,16
    80f8:	100490fa 	slli	r2,r2,3
    80fc:	2020d77a 	srli	r16,r4,29
    8100:	202490fa 	slli	r18,r4,3
    8104:	ad7f0044 	addi	r21,r21,-1023
    8108:	80a0b03a 	or	r16,r16,r2
    810c:	0027883a 	mov	r19,zero
    8110:	0013883a 	mov	r9,zero
    8114:	3804d53a 	srli	r2,r7,20
    8118:	382cd7fa 	srli	r22,r7,31
    811c:	04400434 	movhi	r17,16
    8120:	8c7fffc4 	addi	r17,r17,-1
    8124:	1081ffcc 	andi	r2,r2,2047
    8128:	3011883a 	mov	r8,r6
    812c:	3c62703a 	and	r17,r7,r17
    8130:	b5c03fcc 	andi	r23,r22,255
    8134:	10006c26 	beq	r2,zero,82e8 <__divdf3+0x24c>
    8138:	00c1ffc4 	movi	r3,2047
    813c:	10c06426 	beq	r2,r3,82d0 <__divdf3+0x234>
    8140:	88c00434 	orhi	r3,r17,16
    8144:	180690fa 	slli	r3,r3,3
    8148:	3022d77a 	srli	r17,r6,29
    814c:	301090fa 	slli	r8,r6,3
    8150:	10bf0044 	addi	r2,r2,-1023
    8154:	88e2b03a 	or	r17,r17,r3
    8158:	000f883a 	mov	r7,zero
    815c:	a58cf03a 	xor	r6,r20,r22
    8160:	3cc8b03a 	or	r4,r7,r19
    8164:	a8abc83a 	sub	r21,r21,r2
    8168:	008003c4 	movi	r2,15
    816c:	3007883a 	mov	r3,r6
    8170:	34c03fcc 	andi	r19,r6,255
    8174:	11009036 	bltu	r2,r4,83b8 <__divdf3+0x31c>
    8178:	200890ba 	slli	r4,r4,2
    817c:	00800074 	movhi	r2,1
    8180:	10a06404 	addi	r2,r2,-32368
    8184:	2089883a 	add	r4,r4,r2
    8188:	20800017 	ldw	r2,0(r4)
    818c:	1000683a 	jmp	r2
    8190:	000083b8 	rdprs	zero,zero,526
    8194:	00008208 	cmpgei	zero,zero,520
    8198:	000083a8 	cmpgeui	zero,zero,526
    819c:	000081fc 	xorhi	zero,zero,519
    81a0:	000083a8 	cmpgeui	zero,zero,526
    81a4:	0000837c 	xorhi	zero,zero,525
    81a8:	000083a8 	cmpgeui	zero,zero,526
    81ac:	000081fc 	xorhi	zero,zero,519
    81b0:	00008208 	cmpgei	zero,zero,520
    81b4:	00008208 	cmpgei	zero,zero,520
    81b8:	0000837c 	xorhi	zero,zero,525
    81bc:	000081fc 	xorhi	zero,zero,519
    81c0:	000081ec 	andhi	zero,zero,519
    81c4:	000081ec 	andhi	zero,zero,519
    81c8:	000081ec 	andhi	zero,zero,519
    81cc:	0000869c 	xori	zero,zero,538
    81d0:	2404b03a 	or	r2,r4,r16
    81d4:	1000661e 	bne	r2,zero,8370 <__divdf3+0x2d4>
    81d8:	04c00204 	movi	r19,8
    81dc:	0021883a 	mov	r16,zero
    81e0:	0025883a 	mov	r18,zero
    81e4:	02400084 	movi	r9,2
    81e8:	003fca06 	br	8114 <__ram_exceptions_end+0xfb006acc>
    81ec:	8023883a 	mov	r17,r16
    81f0:	9011883a 	mov	r8,r18
    81f4:	e02f883a 	mov	r23,fp
    81f8:	480f883a 	mov	r7,r9
    81fc:	00800084 	movi	r2,2
    8200:	3881311e 	bne	r7,r2,86c8 <__divdf3+0x62c>
    8204:	b827883a 	mov	r19,r23
    8208:	98c0004c 	andi	r3,r19,1
    820c:	0081ffc4 	movi	r2,2047
    8210:	000b883a 	mov	r5,zero
    8214:	0025883a 	mov	r18,zero
    8218:	1004953a 	slli	r2,r2,20
    821c:	18c03fcc 	andi	r3,r3,255
    8220:	04400434 	movhi	r17,16
    8224:	8c7fffc4 	addi	r17,r17,-1
    8228:	180697fa 	slli	r3,r3,31
    822c:	2c4a703a 	and	r5,r5,r17
    8230:	288ab03a 	or	r5,r5,r2
    8234:	28c6b03a 	or	r3,r5,r3
    8238:	9005883a 	mov	r2,r18
    823c:	dfc00d17 	ldw	ra,52(sp)
    8240:	df000c17 	ldw	fp,48(sp)
    8244:	ddc00b17 	ldw	r23,44(sp)
    8248:	dd800a17 	ldw	r22,40(sp)
    824c:	dd400917 	ldw	r21,36(sp)
    8250:	dd000817 	ldw	r20,32(sp)
    8254:	dcc00717 	ldw	r19,28(sp)
    8258:	dc800617 	ldw	r18,24(sp)
    825c:	dc400517 	ldw	r17,20(sp)
    8260:	dc000417 	ldw	r16,16(sp)
    8264:	dec00e04 	addi	sp,sp,56
    8268:	f800283a 	ret
    826c:	2404b03a 	or	r2,r4,r16
    8270:	2027883a 	mov	r19,r4
    8274:	10003926 	beq	r2,zero,835c <__divdf3+0x2c0>
    8278:	80012e26 	beq	r16,zero,8734 <__divdf3+0x698>
    827c:	8009883a 	mov	r4,r16
    8280:	d9800315 	stw	r6,12(sp)
    8284:	d9c00215 	stw	r7,8(sp)
    8288:	0009f100 	call	9f10 <__clzsi2>
    828c:	d9800317 	ldw	r6,12(sp)
    8290:	d9c00217 	ldw	r7,8(sp)
    8294:	113ffd44 	addi	r4,r2,-11
    8298:	00c00704 	movi	r3,28
    829c:	19012116 	blt	r3,r4,8724 <__divdf3+0x688>
    82a0:	00c00744 	movi	r3,29
    82a4:	147ffe04 	addi	r17,r2,-8
    82a8:	1907c83a 	sub	r3,r3,r4
    82ac:	8460983a 	sll	r16,r16,r17
    82b0:	98c6d83a 	srl	r3,r19,r3
    82b4:	9c64983a 	sll	r18,r19,r17
    82b8:	1c20b03a 	or	r16,r3,r16
    82bc:	1080fcc4 	addi	r2,r2,1011
    82c0:	00abc83a 	sub	r21,zero,r2
    82c4:	0027883a 	mov	r19,zero
    82c8:	0013883a 	mov	r9,zero
    82cc:	003f9106 	br	8114 <__ram_exceptions_end+0xfb006acc>
    82d0:	3446b03a 	or	r3,r6,r17
    82d4:	18001f1e 	bne	r3,zero,8354 <__divdf3+0x2b8>
    82d8:	0023883a 	mov	r17,zero
    82dc:	0011883a 	mov	r8,zero
    82e0:	01c00084 	movi	r7,2
    82e4:	003f9d06 	br	815c <__ram_exceptions_end+0xfb006b14>
    82e8:	3446b03a 	or	r3,r6,r17
    82ec:	18001526 	beq	r3,zero,8344 <__divdf3+0x2a8>
    82f0:	88011b26 	beq	r17,zero,8760 <__divdf3+0x6c4>
    82f4:	8809883a 	mov	r4,r17
    82f8:	d9800315 	stw	r6,12(sp)
    82fc:	da400115 	stw	r9,4(sp)
    8300:	0009f100 	call	9f10 <__clzsi2>
    8304:	d9800317 	ldw	r6,12(sp)
    8308:	da400117 	ldw	r9,4(sp)
    830c:	113ffd44 	addi	r4,r2,-11
    8310:	00c00704 	movi	r3,28
    8314:	19010e16 	blt	r3,r4,8750 <__divdf3+0x6b4>
    8318:	00c00744 	movi	r3,29
    831c:	123ffe04 	addi	r8,r2,-8
    8320:	1907c83a 	sub	r3,r3,r4
    8324:	8a22983a 	sll	r17,r17,r8
    8328:	30c6d83a 	srl	r3,r6,r3
    832c:	3210983a 	sll	r8,r6,r8
    8330:	1c62b03a 	or	r17,r3,r17
    8334:	1080fcc4 	addi	r2,r2,1011
    8338:	0085c83a 	sub	r2,zero,r2
    833c:	000f883a 	mov	r7,zero
    8340:	003f8606 	br	815c <__ram_exceptions_end+0xfb006b14>
    8344:	0023883a 	mov	r17,zero
    8348:	0011883a 	mov	r8,zero
    834c:	01c00044 	movi	r7,1
    8350:	003f8206 	br	815c <__ram_exceptions_end+0xfb006b14>
    8354:	01c000c4 	movi	r7,3
    8358:	003f8006 	br	815c <__ram_exceptions_end+0xfb006b14>
    835c:	04c00104 	movi	r19,4
    8360:	0021883a 	mov	r16,zero
    8364:	0025883a 	mov	r18,zero
    8368:	02400044 	movi	r9,1
    836c:	003f6906 	br	8114 <__ram_exceptions_end+0xfb006acc>
    8370:	04c00304 	movi	r19,12
    8374:	024000c4 	movi	r9,3
    8378:	003f6606 	br	8114 <__ram_exceptions_end+0xfb006acc>
    837c:	01400434 	movhi	r5,16
    8380:	0007883a 	mov	r3,zero
    8384:	297fffc4 	addi	r5,r5,-1
    8388:	04bfffc4 	movi	r18,-1
    838c:	0081ffc4 	movi	r2,2047
    8390:	003fa106 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    8394:	00c00044 	movi	r3,1
    8398:	1887c83a 	sub	r3,r3,r2
    839c:	01000e04 	movi	r4,56
    83a0:	20c1210e 	bge	r4,r3,8828 <__divdf3+0x78c>
    83a4:	98c0004c 	andi	r3,r19,1
    83a8:	0005883a 	mov	r2,zero
    83ac:	000b883a 	mov	r5,zero
    83b0:	0025883a 	mov	r18,zero
    83b4:	003f9806 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    83b8:	8c00fd36 	bltu	r17,r16,87b0 <__divdf3+0x714>
    83bc:	8440fb26 	beq	r16,r17,87ac <__divdf3+0x710>
    83c0:	8007883a 	mov	r3,r16
    83c4:	ad7fffc4 	addi	r21,r21,-1
    83c8:	0021883a 	mov	r16,zero
    83cc:	4004d63a 	srli	r2,r8,24
    83d0:	8822923a 	slli	r17,r17,8
    83d4:	1809883a 	mov	r4,r3
    83d8:	402c923a 	slli	r22,r8,8
    83dc:	88b8b03a 	or	fp,r17,r2
    83e0:	e028d43a 	srli	r20,fp,16
    83e4:	d8c00015 	stw	r3,0(sp)
    83e8:	e5ffffcc 	andi	r23,fp,65535
    83ec:	a00b883a 	mov	r5,r20
    83f0:	00062c80 	call	62c8 <__udivsi3>
    83f4:	d8c00017 	ldw	r3,0(sp)
    83f8:	a00b883a 	mov	r5,r20
    83fc:	d8800315 	stw	r2,12(sp)
    8400:	1809883a 	mov	r4,r3
    8404:	000632c0 	call	632c <__umodsi3>
    8408:	d9800317 	ldw	r6,12(sp)
    840c:	1006943a 	slli	r3,r2,16
    8410:	9004d43a 	srli	r2,r18,16
    8414:	b9a3383a 	mul	r17,r23,r6
    8418:	10c4b03a 	or	r2,r2,r3
    841c:	1440062e 	bgeu	r2,r17,8438 <__divdf3+0x39c>
    8420:	1705883a 	add	r2,r2,fp
    8424:	30ffffc4 	addi	r3,r6,-1
    8428:	1700ee36 	bltu	r2,fp,87e4 <__divdf3+0x748>
    842c:	1440ed2e 	bgeu	r2,r17,87e4 <__divdf3+0x748>
    8430:	31bfff84 	addi	r6,r6,-2
    8434:	1705883a 	add	r2,r2,fp
    8438:	1463c83a 	sub	r17,r2,r17
    843c:	a00b883a 	mov	r5,r20
    8440:	8809883a 	mov	r4,r17
    8444:	d9800315 	stw	r6,12(sp)
    8448:	00062c80 	call	62c8 <__udivsi3>
    844c:	a00b883a 	mov	r5,r20
    8450:	8809883a 	mov	r4,r17
    8454:	d8800215 	stw	r2,8(sp)
    8458:	000632c0 	call	632c <__umodsi3>
    845c:	d9c00217 	ldw	r7,8(sp)
    8460:	1004943a 	slli	r2,r2,16
    8464:	94bfffcc 	andi	r18,r18,65535
    8468:	b9d1383a 	mul	r8,r23,r7
    846c:	90a4b03a 	or	r18,r18,r2
    8470:	d9800317 	ldw	r6,12(sp)
    8474:	9200062e 	bgeu	r18,r8,8490 <__divdf3+0x3f4>
    8478:	9725883a 	add	r18,r18,fp
    847c:	38bfffc4 	addi	r2,r7,-1
    8480:	9700d636 	bltu	r18,fp,87dc <__divdf3+0x740>
    8484:	9200d52e 	bgeu	r18,r8,87dc <__divdf3+0x740>
    8488:	39ffff84 	addi	r7,r7,-2
    848c:	9725883a 	add	r18,r18,fp
    8490:	3004943a 	slli	r2,r6,16
    8494:	b012d43a 	srli	r9,r22,16
    8498:	b1bfffcc 	andi	r6,r22,65535
    849c:	11e2b03a 	or	r17,r2,r7
    84a0:	8806d43a 	srli	r3,r17,16
    84a4:	893fffcc 	andi	r4,r17,65535
    84a8:	218b383a 	mul	r5,r4,r6
    84ac:	30c5383a 	mul	r2,r6,r3
    84b0:	2249383a 	mul	r4,r4,r9
    84b4:	280ed43a 	srli	r7,r5,16
    84b8:	9225c83a 	sub	r18,r18,r8
    84bc:	2089883a 	add	r4,r4,r2
    84c0:	3909883a 	add	r4,r7,r4
    84c4:	1a47383a 	mul	r3,r3,r9
    84c8:	2080022e 	bgeu	r4,r2,84d4 <__divdf3+0x438>
    84cc:	00800074 	movhi	r2,1
    84d0:	1887883a 	add	r3,r3,r2
    84d4:	2004d43a 	srli	r2,r4,16
    84d8:	2008943a 	slli	r4,r4,16
    84dc:	297fffcc 	andi	r5,r5,65535
    84e0:	10c7883a 	add	r3,r2,r3
    84e4:	2149883a 	add	r4,r4,r5
    84e8:	90c0a536 	bltu	r18,r3,8780 <__divdf3+0x6e4>
    84ec:	90c0bf26 	beq	r18,r3,87ec <__divdf3+0x750>
    84f0:	90c7c83a 	sub	r3,r18,r3
    84f4:	810fc83a 	sub	r7,r16,r4
    84f8:	81e5803a 	cmpltu	r18,r16,r7
    84fc:	1ca5c83a 	sub	r18,r3,r18
    8500:	e480c126 	beq	fp,r18,8808 <__divdf3+0x76c>
    8504:	a00b883a 	mov	r5,r20
    8508:	9009883a 	mov	r4,r18
    850c:	d9800315 	stw	r6,12(sp)
    8510:	d9c00215 	stw	r7,8(sp)
    8514:	da400115 	stw	r9,4(sp)
    8518:	00062c80 	call	62c8 <__udivsi3>
    851c:	a00b883a 	mov	r5,r20
    8520:	9009883a 	mov	r4,r18
    8524:	d8800015 	stw	r2,0(sp)
    8528:	000632c0 	call	632c <__umodsi3>
    852c:	d9c00217 	ldw	r7,8(sp)
    8530:	da000017 	ldw	r8,0(sp)
    8534:	1006943a 	slli	r3,r2,16
    8538:	3804d43a 	srli	r2,r7,16
    853c:	ba21383a 	mul	r16,r23,r8
    8540:	d9800317 	ldw	r6,12(sp)
    8544:	10c4b03a 	or	r2,r2,r3
    8548:	da400117 	ldw	r9,4(sp)
    854c:	1400062e 	bgeu	r2,r16,8568 <__divdf3+0x4cc>
    8550:	1705883a 	add	r2,r2,fp
    8554:	40ffffc4 	addi	r3,r8,-1
    8558:	1700ad36 	bltu	r2,fp,8810 <__divdf3+0x774>
    855c:	1400ac2e 	bgeu	r2,r16,8810 <__divdf3+0x774>
    8560:	423fff84 	addi	r8,r8,-2
    8564:	1705883a 	add	r2,r2,fp
    8568:	1421c83a 	sub	r16,r2,r16
    856c:	a00b883a 	mov	r5,r20
    8570:	8009883a 	mov	r4,r16
    8574:	d9800315 	stw	r6,12(sp)
    8578:	d9c00215 	stw	r7,8(sp)
    857c:	da000015 	stw	r8,0(sp)
    8580:	da400115 	stw	r9,4(sp)
    8584:	00062c80 	call	62c8 <__udivsi3>
    8588:	8009883a 	mov	r4,r16
    858c:	a00b883a 	mov	r5,r20
    8590:	1025883a 	mov	r18,r2
    8594:	000632c0 	call	632c <__umodsi3>
    8598:	d9c00217 	ldw	r7,8(sp)
    859c:	1004943a 	slli	r2,r2,16
    85a0:	bcaf383a 	mul	r23,r23,r18
    85a4:	393fffcc 	andi	r4,r7,65535
    85a8:	2088b03a 	or	r4,r4,r2
    85ac:	d9800317 	ldw	r6,12(sp)
    85b0:	da000017 	ldw	r8,0(sp)
    85b4:	da400117 	ldw	r9,4(sp)
    85b8:	25c0062e 	bgeu	r4,r23,85d4 <__divdf3+0x538>
    85bc:	2709883a 	add	r4,r4,fp
    85c0:	90bfffc4 	addi	r2,r18,-1
    85c4:	27009436 	bltu	r4,fp,8818 <__divdf3+0x77c>
    85c8:	25c0932e 	bgeu	r4,r23,8818 <__divdf3+0x77c>
    85cc:	94bfff84 	addi	r18,r18,-2
    85d0:	2709883a 	add	r4,r4,fp
    85d4:	4004943a 	slli	r2,r8,16
    85d8:	25efc83a 	sub	r23,r4,r23
    85dc:	1490b03a 	or	r8,r2,r18
    85e0:	4008d43a 	srli	r4,r8,16
    85e4:	40ffffcc 	andi	r3,r8,65535
    85e8:	30c5383a 	mul	r2,r6,r3
    85ec:	1a47383a 	mul	r3,r3,r9
    85f0:	310d383a 	mul	r6,r6,r4
    85f4:	100ad43a 	srli	r5,r2,16
    85f8:	4913383a 	mul	r9,r9,r4
    85fc:	1987883a 	add	r3,r3,r6
    8600:	28c7883a 	add	r3,r5,r3
    8604:	1980022e 	bgeu	r3,r6,8610 <__divdf3+0x574>
    8608:	01000074 	movhi	r4,1
    860c:	4913883a 	add	r9,r9,r4
    8610:	1808d43a 	srli	r4,r3,16
    8614:	1806943a 	slli	r3,r3,16
    8618:	10bfffcc 	andi	r2,r2,65535
    861c:	2253883a 	add	r9,r4,r9
    8620:	1887883a 	add	r3,r3,r2
    8624:	ba403836 	bltu	r23,r9,8708 <__divdf3+0x66c>
    8628:	ba403626 	beq	r23,r9,8704 <__divdf3+0x668>
    862c:	42000054 	ori	r8,r8,1
    8630:	a880ffc4 	addi	r2,r21,1023
    8634:	00bf570e 	bge	zero,r2,8394 <__ram_exceptions_end+0xfb006d4c>
    8638:	40c001cc 	andi	r3,r8,7
    863c:	18000726 	beq	r3,zero,865c <__divdf3+0x5c0>
    8640:	40c003cc 	andi	r3,r8,15
    8644:	01000104 	movi	r4,4
    8648:	19000426 	beq	r3,r4,865c <__divdf3+0x5c0>
    864c:	4107883a 	add	r3,r8,r4
    8650:	1a11803a 	cmpltu	r8,r3,r8
    8654:	8a23883a 	add	r17,r17,r8
    8658:	1811883a 	mov	r8,r3
    865c:	88c0402c 	andhi	r3,r17,256
    8660:	18000426 	beq	r3,zero,8674 <__divdf3+0x5d8>
    8664:	00ffc034 	movhi	r3,65280
    8668:	18ffffc4 	addi	r3,r3,-1
    866c:	a8810004 	addi	r2,r21,1024
    8670:	88e2703a 	and	r17,r17,r3
    8674:	00c1ff84 	movi	r3,2046
    8678:	18bee316 	blt	r3,r2,8208 <__ram_exceptions_end+0xfb006bc0>
    867c:	8824977a 	slli	r18,r17,29
    8680:	4010d0fa 	srli	r8,r8,3
    8684:	8822927a 	slli	r17,r17,9
    8688:	1081ffcc 	andi	r2,r2,2047
    868c:	9224b03a 	or	r18,r18,r8
    8690:	880ad33a 	srli	r5,r17,12
    8694:	98c0004c 	andi	r3,r19,1
    8698:	003edf06 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    869c:	8080022c 	andhi	r2,r16,8
    86a0:	10001226 	beq	r2,zero,86ec <__divdf3+0x650>
    86a4:	8880022c 	andhi	r2,r17,8
    86a8:	1000101e 	bne	r2,zero,86ec <__divdf3+0x650>
    86ac:	00800434 	movhi	r2,16
    86b0:	89400234 	orhi	r5,r17,8
    86b4:	10bfffc4 	addi	r2,r2,-1
    86b8:	b007883a 	mov	r3,r22
    86bc:	288a703a 	and	r5,r5,r2
    86c0:	4025883a 	mov	r18,r8
    86c4:	003f3106 	br	838c <__ram_exceptions_end+0xfb006d44>
    86c8:	008000c4 	movi	r2,3
    86cc:	3880a626 	beq	r7,r2,8968 <__divdf3+0x8cc>
    86d0:	00800044 	movi	r2,1
    86d4:	3880521e 	bne	r7,r2,8820 <__divdf3+0x784>
    86d8:	b807883a 	mov	r3,r23
    86dc:	0005883a 	mov	r2,zero
    86e0:	000b883a 	mov	r5,zero
    86e4:	0025883a 	mov	r18,zero
    86e8:	003ecb06 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    86ec:	00800434 	movhi	r2,16
    86f0:	81400234 	orhi	r5,r16,8
    86f4:	10bfffc4 	addi	r2,r2,-1
    86f8:	a007883a 	mov	r3,r20
    86fc:	288a703a 	and	r5,r5,r2
    8700:	003f2206 	br	838c <__ram_exceptions_end+0xfb006d44>
    8704:	183fca26 	beq	r3,zero,8630 <__ram_exceptions_end+0xfb006fe8>
    8708:	e5ef883a 	add	r23,fp,r23
    870c:	40bfffc4 	addi	r2,r8,-1
    8710:	bf00392e 	bgeu	r23,fp,87f8 <__divdf3+0x75c>
    8714:	1011883a 	mov	r8,r2
    8718:	ba7fc41e 	bne	r23,r9,862c <__ram_exceptions_end+0xfb006fe4>
    871c:	b0ffc31e 	bne	r22,r3,862c <__ram_exceptions_end+0xfb006fe4>
    8720:	003fc306 	br	8630 <__ram_exceptions_end+0xfb006fe8>
    8724:	143ff604 	addi	r16,r2,-40
    8728:	9c20983a 	sll	r16,r19,r16
    872c:	0025883a 	mov	r18,zero
    8730:	003ee206 	br	82bc <__ram_exceptions_end+0xfb006c74>
    8734:	d9800315 	stw	r6,12(sp)
    8738:	d9c00215 	stw	r7,8(sp)
    873c:	0009f100 	call	9f10 <__clzsi2>
    8740:	10800804 	addi	r2,r2,32
    8744:	d9c00217 	ldw	r7,8(sp)
    8748:	d9800317 	ldw	r6,12(sp)
    874c:	003ed106 	br	8294 <__ram_exceptions_end+0xfb006c4c>
    8750:	147ff604 	addi	r17,r2,-40
    8754:	3462983a 	sll	r17,r6,r17
    8758:	0011883a 	mov	r8,zero
    875c:	003ef506 	br	8334 <__ram_exceptions_end+0xfb006cec>
    8760:	3009883a 	mov	r4,r6
    8764:	d9800315 	stw	r6,12(sp)
    8768:	da400115 	stw	r9,4(sp)
    876c:	0009f100 	call	9f10 <__clzsi2>
    8770:	10800804 	addi	r2,r2,32
    8774:	da400117 	ldw	r9,4(sp)
    8778:	d9800317 	ldw	r6,12(sp)
    877c:	003ee306 	br	830c <__ram_exceptions_end+0xfb006cc4>
    8780:	85a1883a 	add	r16,r16,r22
    8784:	8585803a 	cmpltu	r2,r16,r22
    8788:	1705883a 	add	r2,r2,fp
    878c:	14a5883a 	add	r18,r2,r18
    8790:	88bfffc4 	addi	r2,r17,-1
    8794:	e4800c2e 	bgeu	fp,r18,87c8 <__divdf3+0x72c>
    8798:	90c03e36 	bltu	r18,r3,8894 <__divdf3+0x7f8>
    879c:	1c806926 	beq	r3,r18,8944 <__divdf3+0x8a8>
    87a0:	90c7c83a 	sub	r3,r18,r3
    87a4:	1023883a 	mov	r17,r2
    87a8:	003f5206 	br	84f4 <__ram_exceptions_end+0xfb006eac>
    87ac:	923f0436 	bltu	r18,r8,83c0 <__ram_exceptions_end+0xfb006d78>
    87b0:	800897fa 	slli	r4,r16,31
    87b4:	9004d07a 	srli	r2,r18,1
    87b8:	8006d07a 	srli	r3,r16,1
    87bc:	902097fa 	slli	r16,r18,31
    87c0:	20a4b03a 	or	r18,r4,r2
    87c4:	003f0106 	br	83cc <__ram_exceptions_end+0xfb006d84>
    87c8:	e4bff51e 	bne	fp,r18,87a0 <__ram_exceptions_end+0xfb007158>
    87cc:	85bff22e 	bgeu	r16,r22,8798 <__ram_exceptions_end+0xfb007150>
    87d0:	e0c7c83a 	sub	r3,fp,r3
    87d4:	1023883a 	mov	r17,r2
    87d8:	003f4606 	br	84f4 <__ram_exceptions_end+0xfb006eac>
    87dc:	100f883a 	mov	r7,r2
    87e0:	003f2b06 	br	8490 <__ram_exceptions_end+0xfb006e48>
    87e4:	180d883a 	mov	r6,r3
    87e8:	003f1306 	br	8438 <__ram_exceptions_end+0xfb006df0>
    87ec:	813fe436 	bltu	r16,r4,8780 <__ram_exceptions_end+0xfb007138>
    87f0:	0007883a 	mov	r3,zero
    87f4:	003f3f06 	br	84f4 <__ram_exceptions_end+0xfb006eac>
    87f8:	ba402c36 	bltu	r23,r9,88ac <__divdf3+0x810>
    87fc:	4dc05426 	beq	r9,r23,8950 <__divdf3+0x8b4>
    8800:	1011883a 	mov	r8,r2
    8804:	003f8906 	br	862c <__ram_exceptions_end+0xfb006fe4>
    8808:	023fffc4 	movi	r8,-1
    880c:	003f8806 	br	8630 <__ram_exceptions_end+0xfb006fe8>
    8810:	1811883a 	mov	r8,r3
    8814:	003f5406 	br	8568 <__ram_exceptions_end+0xfb006f20>
    8818:	1025883a 	mov	r18,r2
    881c:	003f6d06 	br	85d4 <__ram_exceptions_end+0xfb006f8c>
    8820:	b827883a 	mov	r19,r23
    8824:	003f8206 	br	8630 <__ram_exceptions_end+0xfb006fe8>
    8828:	010007c4 	movi	r4,31
    882c:	20c02616 	blt	r4,r3,88c8 <__divdf3+0x82c>
    8830:	00800804 	movi	r2,32
    8834:	10c5c83a 	sub	r2,r2,r3
    8838:	888a983a 	sll	r5,r17,r2
    883c:	40c8d83a 	srl	r4,r8,r3
    8840:	4084983a 	sll	r2,r8,r2
    8844:	88e2d83a 	srl	r17,r17,r3
    8848:	2906b03a 	or	r3,r5,r4
    884c:	1004c03a 	cmpne	r2,r2,zero
    8850:	1886b03a 	or	r3,r3,r2
    8854:	188001cc 	andi	r2,r3,7
    8858:	10000726 	beq	r2,zero,8878 <__divdf3+0x7dc>
    885c:	188003cc 	andi	r2,r3,15
    8860:	01000104 	movi	r4,4
    8864:	11000426 	beq	r2,r4,8878 <__divdf3+0x7dc>
    8868:	1805883a 	mov	r2,r3
    886c:	10c00104 	addi	r3,r2,4
    8870:	1885803a 	cmpltu	r2,r3,r2
    8874:	88a3883a 	add	r17,r17,r2
    8878:	8880202c 	andhi	r2,r17,128
    887c:	10002726 	beq	r2,zero,891c <__divdf3+0x880>
    8880:	98c0004c 	andi	r3,r19,1
    8884:	00800044 	movi	r2,1
    8888:	000b883a 	mov	r5,zero
    888c:	0025883a 	mov	r18,zero
    8890:	003e6106 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    8894:	85a1883a 	add	r16,r16,r22
    8898:	8585803a 	cmpltu	r2,r16,r22
    889c:	1705883a 	add	r2,r2,fp
    88a0:	14a5883a 	add	r18,r2,r18
    88a4:	8c7fff84 	addi	r17,r17,-2
    88a8:	003f1106 	br	84f0 <__ram_exceptions_end+0xfb006ea8>
    88ac:	b589883a 	add	r4,r22,r22
    88b0:	25ad803a 	cmpltu	r22,r4,r22
    88b4:	b739883a 	add	fp,r22,fp
    88b8:	40bfff84 	addi	r2,r8,-2
    88bc:	bf2f883a 	add	r23,r23,fp
    88c0:	202d883a 	mov	r22,r4
    88c4:	003f9306 	br	8714 <__ram_exceptions_end+0xfb0070cc>
    88c8:	013ff844 	movi	r4,-31
    88cc:	2085c83a 	sub	r2,r4,r2
    88d0:	8888d83a 	srl	r4,r17,r2
    88d4:	00800804 	movi	r2,32
    88d8:	18802126 	beq	r3,r2,8960 <__divdf3+0x8c4>
    88dc:	00801004 	movi	r2,64
    88e0:	10c5c83a 	sub	r2,r2,r3
    88e4:	8884983a 	sll	r2,r17,r2
    88e8:	1204b03a 	or	r2,r2,r8
    88ec:	1004c03a 	cmpne	r2,r2,zero
    88f0:	2084b03a 	or	r2,r4,r2
    88f4:	144001cc 	andi	r17,r2,7
    88f8:	88000d1e 	bne	r17,zero,8930 <__divdf3+0x894>
    88fc:	000b883a 	mov	r5,zero
    8900:	1024d0fa 	srli	r18,r2,3
    8904:	98c0004c 	andi	r3,r19,1
    8908:	0005883a 	mov	r2,zero
    890c:	9464b03a 	or	r18,r18,r17
    8910:	003e4106 	br	8218 <__ram_exceptions_end+0xfb006bd0>
    8914:	1007883a 	mov	r3,r2
    8918:	0023883a 	mov	r17,zero
    891c:	880a927a 	slli	r5,r17,9
    8920:	1805883a 	mov	r2,r3
    8924:	8822977a 	slli	r17,r17,29
    8928:	280ad33a 	srli	r5,r5,12
    892c:	003ff406 	br	8900 <__ram_exceptions_end+0xfb0072b8>
    8930:	10c003cc 	andi	r3,r2,15
    8934:	01000104 	movi	r4,4
    8938:	193ff626 	beq	r3,r4,8914 <__ram_exceptions_end+0xfb0072cc>
    893c:	0023883a 	mov	r17,zero
    8940:	003fca06 	br	886c <__ram_exceptions_end+0xfb007224>
    8944:	813fd336 	bltu	r16,r4,8894 <__ram_exceptions_end+0xfb00724c>
    8948:	1023883a 	mov	r17,r2
    894c:	003fa806 	br	87f0 <__ram_exceptions_end+0xfb0071a8>
    8950:	b0ffd636 	bltu	r22,r3,88ac <__ram_exceptions_end+0xfb007264>
    8954:	1011883a 	mov	r8,r2
    8958:	b0ff341e 	bne	r22,r3,862c <__ram_exceptions_end+0xfb006fe4>
    895c:	003f3406 	br	8630 <__ram_exceptions_end+0xfb006fe8>
    8960:	0005883a 	mov	r2,zero
    8964:	003fe006 	br	88e8 <__ram_exceptions_end+0xfb0072a0>
    8968:	00800434 	movhi	r2,16
    896c:	89400234 	orhi	r5,r17,8
    8970:	10bfffc4 	addi	r2,r2,-1
    8974:	b807883a 	mov	r3,r23
    8978:	288a703a 	and	r5,r5,r2
    897c:	4025883a 	mov	r18,r8
    8980:	003e8206 	br	838c <__ram_exceptions_end+0xfb006d44>

00008984 <__eqdf2>:
    8984:	2804d53a 	srli	r2,r5,20
    8988:	3806d53a 	srli	r3,r7,20
    898c:	02000434 	movhi	r8,16
    8990:	423fffc4 	addi	r8,r8,-1
    8994:	1081ffcc 	andi	r2,r2,2047
    8998:	0281ffc4 	movi	r10,2047
    899c:	2a12703a 	and	r9,r5,r8
    89a0:	18c1ffcc 	andi	r3,r3,2047
    89a4:	3a10703a 	and	r8,r7,r8
    89a8:	280ad7fa 	srli	r5,r5,31
    89ac:	380ed7fa 	srli	r7,r7,31
    89b0:	12801026 	beq	r2,r10,89f4 <__eqdf2+0x70>
    89b4:	0281ffc4 	movi	r10,2047
    89b8:	1a800a26 	beq	r3,r10,89e4 <__eqdf2+0x60>
    89bc:	10c00226 	beq	r2,r3,89c8 <__eqdf2+0x44>
    89c0:	00800044 	movi	r2,1
    89c4:	f800283a 	ret
    89c8:	4a3ffd1e 	bne	r9,r8,89c0 <__ram_exceptions_end+0xfb007378>
    89cc:	21bffc1e 	bne	r4,r6,89c0 <__ram_exceptions_end+0xfb007378>
    89d0:	29c00c26 	beq	r5,r7,8a04 <__eqdf2+0x80>
    89d4:	103ffa1e 	bne	r2,zero,89c0 <__ram_exceptions_end+0xfb007378>
    89d8:	2244b03a 	or	r2,r4,r9
    89dc:	1004c03a 	cmpne	r2,r2,zero
    89e0:	f800283a 	ret
    89e4:	3214b03a 	or	r10,r6,r8
    89e8:	503ff426 	beq	r10,zero,89bc <__ram_exceptions_end+0xfb007374>
    89ec:	00800044 	movi	r2,1
    89f0:	f800283a 	ret
    89f4:	2254b03a 	or	r10,r4,r9
    89f8:	503fee26 	beq	r10,zero,89b4 <__ram_exceptions_end+0xfb00736c>
    89fc:	00800044 	movi	r2,1
    8a00:	f800283a 	ret
    8a04:	0005883a 	mov	r2,zero
    8a08:	f800283a 	ret

00008a0c <__gedf2>:
    8a0c:	2804d53a 	srli	r2,r5,20
    8a10:	3806d53a 	srli	r3,r7,20
    8a14:	02000434 	movhi	r8,16
    8a18:	423fffc4 	addi	r8,r8,-1
    8a1c:	1081ffcc 	andi	r2,r2,2047
    8a20:	0241ffc4 	movi	r9,2047
    8a24:	2a14703a 	and	r10,r5,r8
    8a28:	18c1ffcc 	andi	r3,r3,2047
    8a2c:	3a10703a 	and	r8,r7,r8
    8a30:	280ad7fa 	srli	r5,r5,31
    8a34:	380ed7fa 	srli	r7,r7,31
    8a38:	12401d26 	beq	r2,r9,8ab0 <__gedf2+0xa4>
    8a3c:	0241ffc4 	movi	r9,2047
    8a40:	1a401226 	beq	r3,r9,8a8c <__gedf2+0x80>
    8a44:	1000081e 	bne	r2,zero,8a68 <__gedf2+0x5c>
    8a48:	2296b03a 	or	r11,r4,r10
    8a4c:	5813003a 	cmpeq	r9,r11,zero
    8a50:	1800091e 	bne	r3,zero,8a78 <__gedf2+0x6c>
    8a54:	3218b03a 	or	r12,r6,r8
    8a58:	6000071e 	bne	r12,zero,8a78 <__gedf2+0x6c>
    8a5c:	0005883a 	mov	r2,zero
    8a60:	5800101e 	bne	r11,zero,8aa4 <__gedf2+0x98>
    8a64:	f800283a 	ret
    8a68:	18000c1e 	bne	r3,zero,8a9c <__gedf2+0x90>
    8a6c:	3212b03a 	or	r9,r6,r8
    8a70:	48000c26 	beq	r9,zero,8aa4 <__gedf2+0x98>
    8a74:	0013883a 	mov	r9,zero
    8a78:	39c03fcc 	andi	r7,r7,255
    8a7c:	48000826 	beq	r9,zero,8aa0 <__gedf2+0x94>
    8a80:	38000926 	beq	r7,zero,8aa8 <__gedf2+0x9c>
    8a84:	00800044 	movi	r2,1
    8a88:	f800283a 	ret
    8a8c:	3212b03a 	or	r9,r6,r8
    8a90:	483fec26 	beq	r9,zero,8a44 <__ram_exceptions_end+0xfb0073fc>
    8a94:	00bfff84 	movi	r2,-2
    8a98:	f800283a 	ret
    8a9c:	39c03fcc 	andi	r7,r7,255
    8aa0:	29c00626 	beq	r5,r7,8abc <__gedf2+0xb0>
    8aa4:	283ff726 	beq	r5,zero,8a84 <__ram_exceptions_end+0xfb00743c>
    8aa8:	00bfffc4 	movi	r2,-1
    8aac:	f800283a 	ret
    8ab0:	2292b03a 	or	r9,r4,r10
    8ab4:	483fe126 	beq	r9,zero,8a3c <__ram_exceptions_end+0xfb0073f4>
    8ab8:	003ff606 	br	8a94 <__ram_exceptions_end+0xfb00744c>
    8abc:	18bff916 	blt	r3,r2,8aa4 <__ram_exceptions_end+0xfb00745c>
    8ac0:	10c00316 	blt	r2,r3,8ad0 <__gedf2+0xc4>
    8ac4:	42bff736 	bltu	r8,r10,8aa4 <__ram_exceptions_end+0xfb00745c>
    8ac8:	52000326 	beq	r10,r8,8ad8 <__gedf2+0xcc>
    8acc:	5200042e 	bgeu	r10,r8,8ae0 <__gedf2+0xd4>
    8ad0:	283fec1e 	bne	r5,zero,8a84 <__ram_exceptions_end+0xfb00743c>
    8ad4:	003ff406 	br	8aa8 <__ram_exceptions_end+0xfb007460>
    8ad8:	313ff236 	bltu	r6,r4,8aa4 <__ram_exceptions_end+0xfb00745c>
    8adc:	21bffc36 	bltu	r4,r6,8ad0 <__ram_exceptions_end+0xfb007488>
    8ae0:	0005883a 	mov	r2,zero
    8ae4:	f800283a 	ret

00008ae8 <__muldf3>:
    8ae8:	defff304 	addi	sp,sp,-52
    8aec:	2804d53a 	srli	r2,r5,20
    8af0:	dd800915 	stw	r22,36(sp)
    8af4:	282cd7fa 	srli	r22,r5,31
    8af8:	dc000315 	stw	r16,12(sp)
    8afc:	04000434 	movhi	r16,16
    8b00:	dd400815 	stw	r21,32(sp)
    8b04:	dc800515 	stw	r18,20(sp)
    8b08:	843fffc4 	addi	r16,r16,-1
    8b0c:	dfc00c15 	stw	ra,48(sp)
    8b10:	df000b15 	stw	fp,44(sp)
    8b14:	ddc00a15 	stw	r23,40(sp)
    8b18:	dd000715 	stw	r20,28(sp)
    8b1c:	dcc00615 	stw	r19,24(sp)
    8b20:	dc400415 	stw	r17,16(sp)
    8b24:	1481ffcc 	andi	r18,r2,2047
    8b28:	2c20703a 	and	r16,r5,r16
    8b2c:	b02b883a 	mov	r21,r22
    8b30:	b2403fcc 	andi	r9,r22,255
    8b34:	90006026 	beq	r18,zero,8cb8 <__muldf3+0x1d0>
    8b38:	0081ffc4 	movi	r2,2047
    8b3c:	2029883a 	mov	r20,r4
    8b40:	90803626 	beq	r18,r2,8c1c <__muldf3+0x134>
    8b44:	80800434 	orhi	r2,r16,16
    8b48:	100490fa 	slli	r2,r2,3
    8b4c:	2020d77a 	srli	r16,r4,29
    8b50:	202890fa 	slli	r20,r4,3
    8b54:	94bf0044 	addi	r18,r18,-1023
    8b58:	80a0b03a 	or	r16,r16,r2
    8b5c:	0027883a 	mov	r19,zero
    8b60:	0039883a 	mov	fp,zero
    8b64:	3804d53a 	srli	r2,r7,20
    8b68:	382ed7fa 	srli	r23,r7,31
    8b6c:	04400434 	movhi	r17,16
    8b70:	8c7fffc4 	addi	r17,r17,-1
    8b74:	1081ffcc 	andi	r2,r2,2047
    8b78:	3011883a 	mov	r8,r6
    8b7c:	3c62703a 	and	r17,r7,r17
    8b80:	ba803fcc 	andi	r10,r23,255
    8b84:	10006d26 	beq	r2,zero,8d3c <__muldf3+0x254>
    8b88:	00c1ffc4 	movi	r3,2047
    8b8c:	10c06526 	beq	r2,r3,8d24 <__muldf3+0x23c>
    8b90:	88c00434 	orhi	r3,r17,16
    8b94:	180690fa 	slli	r3,r3,3
    8b98:	3022d77a 	srli	r17,r6,29
    8b9c:	301090fa 	slli	r8,r6,3
    8ba0:	10bf0044 	addi	r2,r2,-1023
    8ba4:	88e2b03a 	or	r17,r17,r3
    8ba8:	000b883a 	mov	r5,zero
    8bac:	9085883a 	add	r2,r18,r2
    8bb0:	2cc8b03a 	or	r4,r5,r19
    8bb4:	00c003c4 	movi	r3,15
    8bb8:	bdacf03a 	xor	r22,r23,r22
    8bbc:	12c00044 	addi	r11,r2,1
    8bc0:	19009936 	bltu	r3,r4,8e28 <__muldf3+0x340>
    8bc4:	200890ba 	slli	r4,r4,2
    8bc8:	00c00074 	movhi	r3,1
    8bcc:	18e2f704 	addi	r3,r3,-29732
    8bd0:	20c9883a 	add	r4,r4,r3
    8bd4:	20c00017 	ldw	r3,0(r4)
    8bd8:	1800683a 	jmp	r3
    8bdc:	00008e28 	cmpgeui	zero,zero,568
    8be0:	00008c3c 	xorhi	zero,zero,560
    8be4:	00008c3c 	xorhi	zero,zero,560
    8be8:	00008c38 	rdprs	zero,zero,560
    8bec:	00008e04 	movi	zero,568
    8bf0:	00008e04 	movi	zero,568
    8bf4:	00008dec 	andhi	zero,zero,567
    8bf8:	00008c38 	rdprs	zero,zero,560
    8bfc:	00008e04 	movi	zero,568
    8c00:	00008dec 	andhi	zero,zero,567
    8c04:	00008e04 	movi	zero,568
    8c08:	00008c38 	rdprs	zero,zero,560
    8c0c:	00008e14 	movui	zero,568
    8c10:	00008e14 	movui	zero,568
    8c14:	00008e14 	movui	zero,568
    8c18:	00009030 	cmpltui	zero,zero,576
    8c1c:	2404b03a 	or	r2,r4,r16
    8c20:	10006f1e 	bne	r2,zero,8de0 <__muldf3+0x2f8>
    8c24:	04c00204 	movi	r19,8
    8c28:	0021883a 	mov	r16,zero
    8c2c:	0029883a 	mov	r20,zero
    8c30:	07000084 	movi	fp,2
    8c34:	003fcb06 	br	8b64 <__ram_exceptions_end+0xfb00751c>
    8c38:	502d883a 	mov	r22,r10
    8c3c:	00800084 	movi	r2,2
    8c40:	28805726 	beq	r5,r2,8da0 <__muldf3+0x2b8>
    8c44:	008000c4 	movi	r2,3
    8c48:	28816626 	beq	r5,r2,91e4 <__muldf3+0x6fc>
    8c4c:	00800044 	movi	r2,1
    8c50:	2881411e 	bne	r5,r2,9158 <__muldf3+0x670>
    8c54:	b02b883a 	mov	r21,r22
    8c58:	0005883a 	mov	r2,zero
    8c5c:	000b883a 	mov	r5,zero
    8c60:	0029883a 	mov	r20,zero
    8c64:	1004953a 	slli	r2,r2,20
    8c68:	a8c03fcc 	andi	r3,r21,255
    8c6c:	04400434 	movhi	r17,16
    8c70:	8c7fffc4 	addi	r17,r17,-1
    8c74:	180697fa 	slli	r3,r3,31
    8c78:	2c4a703a 	and	r5,r5,r17
    8c7c:	288ab03a 	or	r5,r5,r2
    8c80:	28c6b03a 	or	r3,r5,r3
    8c84:	a005883a 	mov	r2,r20
    8c88:	dfc00c17 	ldw	ra,48(sp)
    8c8c:	df000b17 	ldw	fp,44(sp)
    8c90:	ddc00a17 	ldw	r23,40(sp)
    8c94:	dd800917 	ldw	r22,36(sp)
    8c98:	dd400817 	ldw	r21,32(sp)
    8c9c:	dd000717 	ldw	r20,28(sp)
    8ca0:	dcc00617 	ldw	r19,24(sp)
    8ca4:	dc800517 	ldw	r18,20(sp)
    8ca8:	dc400417 	ldw	r17,16(sp)
    8cac:	dc000317 	ldw	r16,12(sp)
    8cb0:	dec00d04 	addi	sp,sp,52
    8cb4:	f800283a 	ret
    8cb8:	2404b03a 	or	r2,r4,r16
    8cbc:	2027883a 	mov	r19,r4
    8cc0:	10004226 	beq	r2,zero,8dcc <__muldf3+0x2e4>
    8cc4:	8000fc26 	beq	r16,zero,90b8 <__muldf3+0x5d0>
    8cc8:	8009883a 	mov	r4,r16
    8ccc:	d9800215 	stw	r6,8(sp)
    8cd0:	d9c00015 	stw	r7,0(sp)
    8cd4:	da400115 	stw	r9,4(sp)
    8cd8:	0009f100 	call	9f10 <__clzsi2>
    8cdc:	d9800217 	ldw	r6,8(sp)
    8ce0:	d9c00017 	ldw	r7,0(sp)
    8ce4:	da400117 	ldw	r9,4(sp)
    8ce8:	113ffd44 	addi	r4,r2,-11
    8cec:	00c00704 	movi	r3,28
    8cf0:	1900ed16 	blt	r3,r4,90a8 <__muldf3+0x5c0>
    8cf4:	00c00744 	movi	r3,29
    8cf8:	147ffe04 	addi	r17,r2,-8
    8cfc:	1907c83a 	sub	r3,r3,r4
    8d00:	8460983a 	sll	r16,r16,r17
    8d04:	98c6d83a 	srl	r3,r19,r3
    8d08:	9c68983a 	sll	r20,r19,r17
    8d0c:	1c20b03a 	or	r16,r3,r16
    8d10:	1080fcc4 	addi	r2,r2,1011
    8d14:	00a5c83a 	sub	r18,zero,r2
    8d18:	0027883a 	mov	r19,zero
    8d1c:	0039883a 	mov	fp,zero
    8d20:	003f9006 	br	8b64 <__ram_exceptions_end+0xfb00751c>
    8d24:	3446b03a 	or	r3,r6,r17
    8d28:	1800261e 	bne	r3,zero,8dc4 <__muldf3+0x2dc>
    8d2c:	0023883a 	mov	r17,zero
    8d30:	0011883a 	mov	r8,zero
    8d34:	01400084 	movi	r5,2
    8d38:	003f9c06 	br	8bac <__ram_exceptions_end+0xfb007564>
    8d3c:	3446b03a 	or	r3,r6,r17
    8d40:	18001c26 	beq	r3,zero,8db4 <__muldf3+0x2cc>
    8d44:	8800ce26 	beq	r17,zero,9080 <__muldf3+0x598>
    8d48:	8809883a 	mov	r4,r17
    8d4c:	d9800215 	stw	r6,8(sp)
    8d50:	da400115 	stw	r9,4(sp)
    8d54:	da800015 	stw	r10,0(sp)
    8d58:	0009f100 	call	9f10 <__clzsi2>
    8d5c:	d9800217 	ldw	r6,8(sp)
    8d60:	da400117 	ldw	r9,4(sp)
    8d64:	da800017 	ldw	r10,0(sp)
    8d68:	113ffd44 	addi	r4,r2,-11
    8d6c:	00c00704 	movi	r3,28
    8d70:	1900bf16 	blt	r3,r4,9070 <__muldf3+0x588>
    8d74:	00c00744 	movi	r3,29
    8d78:	123ffe04 	addi	r8,r2,-8
    8d7c:	1907c83a 	sub	r3,r3,r4
    8d80:	8a22983a 	sll	r17,r17,r8
    8d84:	30c6d83a 	srl	r3,r6,r3
    8d88:	3210983a 	sll	r8,r6,r8
    8d8c:	1c62b03a 	or	r17,r3,r17
    8d90:	1080fcc4 	addi	r2,r2,1011
    8d94:	0085c83a 	sub	r2,zero,r2
    8d98:	000b883a 	mov	r5,zero
    8d9c:	003f8306 	br	8bac <__ram_exceptions_end+0xfb007564>
    8da0:	b02b883a 	mov	r21,r22
    8da4:	0081ffc4 	movi	r2,2047
    8da8:	000b883a 	mov	r5,zero
    8dac:	0029883a 	mov	r20,zero
    8db0:	003fac06 	br	8c64 <__ram_exceptions_end+0xfb00761c>
    8db4:	0023883a 	mov	r17,zero
    8db8:	0011883a 	mov	r8,zero
    8dbc:	01400044 	movi	r5,1
    8dc0:	003f7a06 	br	8bac <__ram_exceptions_end+0xfb007564>
    8dc4:	014000c4 	movi	r5,3
    8dc8:	003f7806 	br	8bac <__ram_exceptions_end+0xfb007564>
    8dcc:	04c00104 	movi	r19,4
    8dd0:	0021883a 	mov	r16,zero
    8dd4:	0029883a 	mov	r20,zero
    8dd8:	07000044 	movi	fp,1
    8ddc:	003f6106 	br	8b64 <__ram_exceptions_end+0xfb00751c>
    8de0:	04c00304 	movi	r19,12
    8de4:	070000c4 	movi	fp,3
    8de8:	003f5e06 	br	8b64 <__ram_exceptions_end+0xfb00751c>
    8dec:	01400434 	movhi	r5,16
    8df0:	002b883a 	mov	r21,zero
    8df4:	297fffc4 	addi	r5,r5,-1
    8df8:	053fffc4 	movi	r20,-1
    8dfc:	0081ffc4 	movi	r2,2047
    8e00:	003f9806 	br	8c64 <__ram_exceptions_end+0xfb00761c>
    8e04:	8023883a 	mov	r17,r16
    8e08:	a011883a 	mov	r8,r20
    8e0c:	e00b883a 	mov	r5,fp
    8e10:	003f8a06 	br	8c3c <__ram_exceptions_end+0xfb0075f4>
    8e14:	8023883a 	mov	r17,r16
    8e18:	a011883a 	mov	r8,r20
    8e1c:	482d883a 	mov	r22,r9
    8e20:	e00b883a 	mov	r5,fp
    8e24:	003f8506 	br	8c3c <__ram_exceptions_end+0xfb0075f4>
    8e28:	a00ad43a 	srli	r5,r20,16
    8e2c:	401ad43a 	srli	r13,r8,16
    8e30:	a53fffcc 	andi	r20,r20,65535
    8e34:	423fffcc 	andi	r8,r8,65535
    8e38:	4519383a 	mul	r12,r8,r20
    8e3c:	4147383a 	mul	r3,r8,r5
    8e40:	6d09383a 	mul	r4,r13,r20
    8e44:	600cd43a 	srli	r6,r12,16
    8e48:	2b5d383a 	mul	r14,r5,r13
    8e4c:	20c9883a 	add	r4,r4,r3
    8e50:	310d883a 	add	r6,r6,r4
    8e54:	30c0022e 	bgeu	r6,r3,8e60 <__muldf3+0x378>
    8e58:	00c00074 	movhi	r3,1
    8e5c:	70dd883a 	add	r14,r14,r3
    8e60:	8826d43a 	srli	r19,r17,16
    8e64:	8bffffcc 	andi	r15,r17,65535
    8e68:	7d23383a 	mul	r17,r15,r20
    8e6c:	7949383a 	mul	r4,r15,r5
    8e70:	9d29383a 	mul	r20,r19,r20
    8e74:	8814d43a 	srli	r10,r17,16
    8e78:	3012943a 	slli	r9,r6,16
    8e7c:	a129883a 	add	r20,r20,r4
    8e80:	633fffcc 	andi	r12,r12,65535
    8e84:	5515883a 	add	r10,r10,r20
    8e88:	3006d43a 	srli	r3,r6,16
    8e8c:	4b13883a 	add	r9,r9,r12
    8e90:	2ccb383a 	mul	r5,r5,r19
    8e94:	5100022e 	bgeu	r10,r4,8ea0 <__muldf3+0x3b8>
    8e98:	01000074 	movhi	r4,1
    8e9c:	290b883a 	add	r5,r5,r4
    8ea0:	802ad43a 	srli	r21,r16,16
    8ea4:	843fffcc 	andi	r16,r16,65535
    8ea8:	440d383a 	mul	r6,r8,r16
    8eac:	4565383a 	mul	r18,r8,r21
    8eb0:	8349383a 	mul	r4,r16,r13
    8eb4:	500e943a 	slli	r7,r10,16
    8eb8:	3010d43a 	srli	r8,r6,16
    8ebc:	5028d43a 	srli	r20,r10,16
    8ec0:	2489883a 	add	r4,r4,r18
    8ec4:	8abfffcc 	andi	r10,r17,65535
    8ec8:	3a95883a 	add	r10,r7,r10
    8ecc:	4119883a 	add	r12,r8,r4
    8ed0:	a169883a 	add	r20,r20,r5
    8ed4:	1a87883a 	add	r3,r3,r10
    8ed8:	6d5b383a 	mul	r13,r13,r21
    8edc:	6480022e 	bgeu	r12,r18,8ee8 <__muldf3+0x400>
    8ee0:	01000074 	movhi	r4,1
    8ee4:	691b883a 	add	r13,r13,r4
    8ee8:	7c25383a 	mul	r18,r15,r16
    8eec:	7d4b383a 	mul	r5,r15,r21
    8ef0:	84cf383a 	mul	r7,r16,r19
    8ef4:	901ed43a 	srli	r15,r18,16
    8ef8:	6008d43a 	srli	r4,r12,16
    8efc:	6010943a 	slli	r8,r12,16
    8f00:	394f883a 	add	r7,r7,r5
    8f04:	333fffcc 	andi	r12,r6,65535
    8f08:	79df883a 	add	r15,r15,r7
    8f0c:	235b883a 	add	r13,r4,r13
    8f10:	9d63383a 	mul	r17,r19,r21
    8f14:	4309883a 	add	r4,r8,r12
    8f18:	7940022e 	bgeu	r15,r5,8f24 <__muldf3+0x43c>
    8f1c:	01400074 	movhi	r5,1
    8f20:	8963883a 	add	r17,r17,r5
    8f24:	780a943a 	slli	r5,r15,16
    8f28:	91bfffcc 	andi	r6,r18,65535
    8f2c:	70c7883a 	add	r3,r14,r3
    8f30:	298d883a 	add	r6,r5,r6
    8f34:	1a8f803a 	cmpltu	r7,r3,r10
    8f38:	350b883a 	add	r5,r6,r20
    8f3c:	20c7883a 	add	r3,r4,r3
    8f40:	3955883a 	add	r10,r7,r5
    8f44:	1909803a 	cmpltu	r4,r3,r4
    8f48:	6a91883a 	add	r8,r13,r10
    8f4c:	780cd43a 	srli	r6,r15,16
    8f50:	2219883a 	add	r12,r4,r8
    8f54:	2d0b803a 	cmpltu	r5,r5,r20
    8f58:	51cf803a 	cmpltu	r7,r10,r7
    8f5c:	29ceb03a 	or	r7,r5,r7
    8f60:	4351803a 	cmpltu	r8,r8,r13
    8f64:	610b803a 	cmpltu	r5,r12,r4
    8f68:	4148b03a 	or	r4,r8,r5
    8f6c:	398f883a 	add	r7,r7,r6
    8f70:	3909883a 	add	r4,r7,r4
    8f74:	1810927a 	slli	r8,r3,9
    8f78:	2449883a 	add	r4,r4,r17
    8f7c:	2008927a 	slli	r4,r4,9
    8f80:	6022d5fa 	srli	r17,r12,23
    8f84:	1806d5fa 	srli	r3,r3,23
    8f88:	4252b03a 	or	r9,r8,r9
    8f8c:	600a927a 	slli	r5,r12,9
    8f90:	4810c03a 	cmpne	r8,r9,zero
    8f94:	2462b03a 	or	r17,r4,r17
    8f98:	40c6b03a 	or	r3,r8,r3
    8f9c:	8900402c 	andhi	r4,r17,256
    8fa0:	1950b03a 	or	r8,r3,r5
    8fa4:	20000726 	beq	r4,zero,8fc4 <__muldf3+0x4dc>
    8fa8:	4006d07a 	srli	r3,r8,1
    8fac:	880497fa 	slli	r2,r17,31
    8fb0:	4200004c 	andi	r8,r8,1
    8fb4:	8822d07a 	srli	r17,r17,1
    8fb8:	1a10b03a 	or	r8,r3,r8
    8fbc:	1210b03a 	or	r8,r2,r8
    8fc0:	5805883a 	mov	r2,r11
    8fc4:	1140ffc4 	addi	r5,r2,1023
    8fc8:	0140440e 	bge	zero,r5,90dc <__muldf3+0x5f4>
    8fcc:	40c001cc 	andi	r3,r8,7
    8fd0:	18000726 	beq	r3,zero,8ff0 <__muldf3+0x508>
    8fd4:	40c003cc 	andi	r3,r8,15
    8fd8:	01000104 	movi	r4,4
    8fdc:	19000426 	beq	r3,r4,8ff0 <__muldf3+0x508>
    8fe0:	4107883a 	add	r3,r8,r4
    8fe4:	1a11803a 	cmpltu	r8,r3,r8
    8fe8:	8a23883a 	add	r17,r17,r8
    8fec:	1811883a 	mov	r8,r3
    8ff0:	88c0402c 	andhi	r3,r17,256
    8ff4:	18000426 	beq	r3,zero,9008 <__muldf3+0x520>
    8ff8:	11410004 	addi	r5,r2,1024
    8ffc:	00bfc034 	movhi	r2,65280
    9000:	10bfffc4 	addi	r2,r2,-1
    9004:	88a2703a 	and	r17,r17,r2
    9008:	0081ff84 	movi	r2,2046
    900c:	117f6416 	blt	r2,r5,8da0 <__ram_exceptions_end+0xfb007758>
    9010:	8828977a 	slli	r20,r17,29
    9014:	4010d0fa 	srli	r8,r8,3
    9018:	8822927a 	slli	r17,r17,9
    901c:	2881ffcc 	andi	r2,r5,2047
    9020:	a228b03a 	or	r20,r20,r8
    9024:	880ad33a 	srli	r5,r17,12
    9028:	b02b883a 	mov	r21,r22
    902c:	003f0d06 	br	8c64 <__ram_exceptions_end+0xfb00761c>
    9030:	8080022c 	andhi	r2,r16,8
    9034:	10000926 	beq	r2,zero,905c <__muldf3+0x574>
    9038:	8880022c 	andhi	r2,r17,8
    903c:	1000071e 	bne	r2,zero,905c <__muldf3+0x574>
    9040:	00800434 	movhi	r2,16
    9044:	89400234 	orhi	r5,r17,8
    9048:	10bfffc4 	addi	r2,r2,-1
    904c:	b82b883a 	mov	r21,r23
    9050:	288a703a 	and	r5,r5,r2
    9054:	4029883a 	mov	r20,r8
    9058:	003f6806 	br	8dfc <__ram_exceptions_end+0xfb0077b4>
    905c:	00800434 	movhi	r2,16
    9060:	81400234 	orhi	r5,r16,8
    9064:	10bfffc4 	addi	r2,r2,-1
    9068:	288a703a 	and	r5,r5,r2
    906c:	003f6306 	br	8dfc <__ram_exceptions_end+0xfb0077b4>
    9070:	147ff604 	addi	r17,r2,-40
    9074:	3462983a 	sll	r17,r6,r17
    9078:	0011883a 	mov	r8,zero
    907c:	003f4406 	br	8d90 <__ram_exceptions_end+0xfb007748>
    9080:	3009883a 	mov	r4,r6
    9084:	d9800215 	stw	r6,8(sp)
    9088:	da400115 	stw	r9,4(sp)
    908c:	da800015 	stw	r10,0(sp)
    9090:	0009f100 	call	9f10 <__clzsi2>
    9094:	10800804 	addi	r2,r2,32
    9098:	da800017 	ldw	r10,0(sp)
    909c:	da400117 	ldw	r9,4(sp)
    90a0:	d9800217 	ldw	r6,8(sp)
    90a4:	003f3006 	br	8d68 <__ram_exceptions_end+0xfb007720>
    90a8:	143ff604 	addi	r16,r2,-40
    90ac:	9c20983a 	sll	r16,r19,r16
    90b0:	0029883a 	mov	r20,zero
    90b4:	003f1606 	br	8d10 <__ram_exceptions_end+0xfb0076c8>
    90b8:	d9800215 	stw	r6,8(sp)
    90bc:	d9c00015 	stw	r7,0(sp)
    90c0:	da400115 	stw	r9,4(sp)
    90c4:	0009f100 	call	9f10 <__clzsi2>
    90c8:	10800804 	addi	r2,r2,32
    90cc:	da400117 	ldw	r9,4(sp)
    90d0:	d9c00017 	ldw	r7,0(sp)
    90d4:	d9800217 	ldw	r6,8(sp)
    90d8:	003f0306 	br	8ce8 <__ram_exceptions_end+0xfb0076a0>
    90dc:	00c00044 	movi	r3,1
    90e0:	1947c83a 	sub	r3,r3,r5
    90e4:	00800e04 	movi	r2,56
    90e8:	10feda16 	blt	r2,r3,8c54 <__ram_exceptions_end+0xfb00760c>
    90ec:	008007c4 	movi	r2,31
    90f0:	10c01b16 	blt	r2,r3,9160 <__muldf3+0x678>
    90f4:	00800804 	movi	r2,32
    90f8:	10c5c83a 	sub	r2,r2,r3
    90fc:	888a983a 	sll	r5,r17,r2
    9100:	40c8d83a 	srl	r4,r8,r3
    9104:	4084983a 	sll	r2,r8,r2
    9108:	88e2d83a 	srl	r17,r17,r3
    910c:	2906b03a 	or	r3,r5,r4
    9110:	1004c03a 	cmpne	r2,r2,zero
    9114:	1886b03a 	or	r3,r3,r2
    9118:	188001cc 	andi	r2,r3,7
    911c:	10000726 	beq	r2,zero,913c <__muldf3+0x654>
    9120:	188003cc 	andi	r2,r3,15
    9124:	01000104 	movi	r4,4
    9128:	11000426 	beq	r2,r4,913c <__muldf3+0x654>
    912c:	1805883a 	mov	r2,r3
    9130:	10c00104 	addi	r3,r2,4
    9134:	1885803a 	cmpltu	r2,r3,r2
    9138:	88a3883a 	add	r17,r17,r2
    913c:	8880202c 	andhi	r2,r17,128
    9140:	10001c26 	beq	r2,zero,91b4 <__muldf3+0x6cc>
    9144:	b02b883a 	mov	r21,r22
    9148:	00800044 	movi	r2,1
    914c:	000b883a 	mov	r5,zero
    9150:	0029883a 	mov	r20,zero
    9154:	003ec306 	br	8c64 <__ram_exceptions_end+0xfb00761c>
    9158:	5805883a 	mov	r2,r11
    915c:	003f9906 	br	8fc4 <__ram_exceptions_end+0xfb00797c>
    9160:	00bff844 	movi	r2,-31
    9164:	1145c83a 	sub	r2,r2,r5
    9168:	8888d83a 	srl	r4,r17,r2
    916c:	00800804 	movi	r2,32
    9170:	18801a26 	beq	r3,r2,91dc <__muldf3+0x6f4>
    9174:	00801004 	movi	r2,64
    9178:	10c5c83a 	sub	r2,r2,r3
    917c:	8884983a 	sll	r2,r17,r2
    9180:	1204b03a 	or	r2,r2,r8
    9184:	1004c03a 	cmpne	r2,r2,zero
    9188:	2084b03a 	or	r2,r4,r2
    918c:	144001cc 	andi	r17,r2,7
    9190:	88000d1e 	bne	r17,zero,91c8 <__muldf3+0x6e0>
    9194:	000b883a 	mov	r5,zero
    9198:	1028d0fa 	srli	r20,r2,3
    919c:	b02b883a 	mov	r21,r22
    91a0:	0005883a 	mov	r2,zero
    91a4:	a468b03a 	or	r20,r20,r17
    91a8:	003eae06 	br	8c64 <__ram_exceptions_end+0xfb00761c>
    91ac:	1007883a 	mov	r3,r2
    91b0:	0023883a 	mov	r17,zero
    91b4:	880a927a 	slli	r5,r17,9
    91b8:	1805883a 	mov	r2,r3
    91bc:	8822977a 	slli	r17,r17,29
    91c0:	280ad33a 	srli	r5,r5,12
    91c4:	003ff406 	br	9198 <__ram_exceptions_end+0xfb007b50>
    91c8:	10c003cc 	andi	r3,r2,15
    91cc:	01000104 	movi	r4,4
    91d0:	193ff626 	beq	r3,r4,91ac <__ram_exceptions_end+0xfb007b64>
    91d4:	0023883a 	mov	r17,zero
    91d8:	003fd506 	br	9130 <__ram_exceptions_end+0xfb007ae8>
    91dc:	0005883a 	mov	r2,zero
    91e0:	003fe706 	br	9180 <__ram_exceptions_end+0xfb007b38>
    91e4:	00800434 	movhi	r2,16
    91e8:	89400234 	orhi	r5,r17,8
    91ec:	10bfffc4 	addi	r2,r2,-1
    91f0:	b02b883a 	mov	r21,r22
    91f4:	288a703a 	and	r5,r5,r2
    91f8:	4029883a 	mov	r20,r8
    91fc:	003eff06 	br	8dfc <__ram_exceptions_end+0xfb0077b4>

00009200 <__subdf3>:
    9200:	02000434 	movhi	r8,16
    9204:	423fffc4 	addi	r8,r8,-1
    9208:	defffb04 	addi	sp,sp,-20
    920c:	2a14703a 	and	r10,r5,r8
    9210:	3812d53a 	srli	r9,r7,20
    9214:	3a10703a 	and	r8,r7,r8
    9218:	2006d77a 	srli	r3,r4,29
    921c:	3004d77a 	srli	r2,r6,29
    9220:	dc000015 	stw	r16,0(sp)
    9224:	501490fa 	slli	r10,r10,3
    9228:	2820d53a 	srli	r16,r5,20
    922c:	401090fa 	slli	r8,r8,3
    9230:	dc800215 	stw	r18,8(sp)
    9234:	dc400115 	stw	r17,4(sp)
    9238:	dfc00415 	stw	ra,16(sp)
    923c:	202290fa 	slli	r17,r4,3
    9240:	dcc00315 	stw	r19,12(sp)
    9244:	4a41ffcc 	andi	r9,r9,2047
    9248:	0101ffc4 	movi	r4,2047
    924c:	2824d7fa 	srli	r18,r5,31
    9250:	8401ffcc 	andi	r16,r16,2047
    9254:	50c6b03a 	or	r3,r10,r3
    9258:	380ed7fa 	srli	r7,r7,31
    925c:	408ab03a 	or	r5,r8,r2
    9260:	300c90fa 	slli	r6,r6,3
    9264:	49009626 	beq	r9,r4,94c0 <__subdf3+0x2c0>
    9268:	39c0005c 	xori	r7,r7,1
    926c:	8245c83a 	sub	r2,r16,r9
    9270:	3c807426 	beq	r7,r18,9444 <__subdf3+0x244>
    9274:	0080af0e 	bge	zero,r2,9534 <__subdf3+0x334>
    9278:	48002a1e 	bne	r9,zero,9324 <__subdf3+0x124>
    927c:	2988b03a 	or	r4,r5,r6
    9280:	20009a1e 	bne	r4,zero,94ec <__subdf3+0x2ec>
    9284:	888001cc 	andi	r2,r17,7
    9288:	10000726 	beq	r2,zero,92a8 <__subdf3+0xa8>
    928c:	888003cc 	andi	r2,r17,15
    9290:	01000104 	movi	r4,4
    9294:	11000426 	beq	r2,r4,92a8 <__subdf3+0xa8>
    9298:	890b883a 	add	r5,r17,r4
    929c:	2c63803a 	cmpltu	r17,r5,r17
    92a0:	1c47883a 	add	r3,r3,r17
    92a4:	2823883a 	mov	r17,r5
    92a8:	1880202c 	andhi	r2,r3,128
    92ac:	10005926 	beq	r2,zero,9414 <__subdf3+0x214>
    92b0:	84000044 	addi	r16,r16,1
    92b4:	0081ffc4 	movi	r2,2047
    92b8:	8080be26 	beq	r16,r2,95b4 <__subdf3+0x3b4>
    92bc:	017fe034 	movhi	r5,65408
    92c0:	297fffc4 	addi	r5,r5,-1
    92c4:	1946703a 	and	r3,r3,r5
    92c8:	1804977a 	slli	r2,r3,29
    92cc:	1806927a 	slli	r3,r3,9
    92d0:	8822d0fa 	srli	r17,r17,3
    92d4:	8401ffcc 	andi	r16,r16,2047
    92d8:	180ad33a 	srli	r5,r3,12
    92dc:	9100004c 	andi	r4,r18,1
    92e0:	1444b03a 	or	r2,r2,r17
    92e4:	80c1ffcc 	andi	r3,r16,2047
    92e8:	1820953a 	slli	r16,r3,20
    92ec:	20c03fcc 	andi	r3,r4,255
    92f0:	180897fa 	slli	r4,r3,31
    92f4:	00c00434 	movhi	r3,16
    92f8:	18ffffc4 	addi	r3,r3,-1
    92fc:	28c6703a 	and	r3,r5,r3
    9300:	1c06b03a 	or	r3,r3,r16
    9304:	1906b03a 	or	r3,r3,r4
    9308:	dfc00417 	ldw	ra,16(sp)
    930c:	dcc00317 	ldw	r19,12(sp)
    9310:	dc800217 	ldw	r18,8(sp)
    9314:	dc400117 	ldw	r17,4(sp)
    9318:	dc000017 	ldw	r16,0(sp)
    931c:	dec00504 	addi	sp,sp,20
    9320:	f800283a 	ret
    9324:	0101ffc4 	movi	r4,2047
    9328:	813fd626 	beq	r16,r4,9284 <__ram_exceptions_end+0xfb007c3c>
    932c:	29402034 	orhi	r5,r5,128
    9330:	01000e04 	movi	r4,56
    9334:	2080a316 	blt	r4,r2,95c4 <__subdf3+0x3c4>
    9338:	010007c4 	movi	r4,31
    933c:	2080c616 	blt	r4,r2,9658 <__subdf3+0x458>
    9340:	01000804 	movi	r4,32
    9344:	2089c83a 	sub	r4,r4,r2
    9348:	2910983a 	sll	r8,r5,r4
    934c:	308ed83a 	srl	r7,r6,r2
    9350:	3108983a 	sll	r4,r6,r4
    9354:	2884d83a 	srl	r2,r5,r2
    9358:	41ccb03a 	or	r6,r8,r7
    935c:	2008c03a 	cmpne	r4,r4,zero
    9360:	310cb03a 	or	r6,r6,r4
    9364:	898dc83a 	sub	r6,r17,r6
    9368:	89a3803a 	cmpltu	r17,r17,r6
    936c:	1887c83a 	sub	r3,r3,r2
    9370:	1c47c83a 	sub	r3,r3,r17
    9374:	3023883a 	mov	r17,r6
    9378:	1880202c 	andhi	r2,r3,128
    937c:	10002326 	beq	r2,zero,940c <__subdf3+0x20c>
    9380:	04c02034 	movhi	r19,128
    9384:	9cffffc4 	addi	r19,r19,-1
    9388:	1ce6703a 	and	r19,r3,r19
    938c:	98007a26 	beq	r19,zero,9578 <__subdf3+0x378>
    9390:	9809883a 	mov	r4,r19
    9394:	0009f100 	call	9f10 <__clzsi2>
    9398:	113ffe04 	addi	r4,r2,-8
    939c:	00c007c4 	movi	r3,31
    93a0:	19007b16 	blt	r3,r4,9590 <__subdf3+0x390>
    93a4:	00800804 	movi	r2,32
    93a8:	1105c83a 	sub	r2,r2,r4
    93ac:	8884d83a 	srl	r2,r17,r2
    93b0:	9906983a 	sll	r3,r19,r4
    93b4:	8922983a 	sll	r17,r17,r4
    93b8:	10c4b03a 	or	r2,r2,r3
    93bc:	24007816 	blt	r4,r16,95a0 <__subdf3+0x3a0>
    93c0:	2421c83a 	sub	r16,r4,r16
    93c4:	80c00044 	addi	r3,r16,1
    93c8:	010007c4 	movi	r4,31
    93cc:	20c09516 	blt	r4,r3,9624 <__subdf3+0x424>
    93d0:	01400804 	movi	r5,32
    93d4:	28cbc83a 	sub	r5,r5,r3
    93d8:	88c8d83a 	srl	r4,r17,r3
    93dc:	8962983a 	sll	r17,r17,r5
    93e0:	114a983a 	sll	r5,r2,r5
    93e4:	10c6d83a 	srl	r3,r2,r3
    93e8:	8804c03a 	cmpne	r2,r17,zero
    93ec:	290ab03a 	or	r5,r5,r4
    93f0:	28a2b03a 	or	r17,r5,r2
    93f4:	0021883a 	mov	r16,zero
    93f8:	003fa206 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    93fc:	2090b03a 	or	r8,r4,r2
    9400:	40018e26 	beq	r8,zero,9a3c <__subdf3+0x83c>
    9404:	1007883a 	mov	r3,r2
    9408:	2023883a 	mov	r17,r4
    940c:	888001cc 	andi	r2,r17,7
    9410:	103f9e1e 	bne	r2,zero,928c <__ram_exceptions_end+0xfb007c44>
    9414:	1804977a 	slli	r2,r3,29
    9418:	8822d0fa 	srli	r17,r17,3
    941c:	1810d0fa 	srli	r8,r3,3
    9420:	9100004c 	andi	r4,r18,1
    9424:	1444b03a 	or	r2,r2,r17
    9428:	00c1ffc4 	movi	r3,2047
    942c:	80c02826 	beq	r16,r3,94d0 <__subdf3+0x2d0>
    9430:	01400434 	movhi	r5,16
    9434:	297fffc4 	addi	r5,r5,-1
    9438:	80e0703a 	and	r16,r16,r3
    943c:	414a703a 	and	r5,r8,r5
    9440:	003fa806 	br	92e4 <__ram_exceptions_end+0xfb007c9c>
    9444:	0080630e 	bge	zero,r2,95d4 <__subdf3+0x3d4>
    9448:	48003026 	beq	r9,zero,950c <__subdf3+0x30c>
    944c:	0101ffc4 	movi	r4,2047
    9450:	813f8c26 	beq	r16,r4,9284 <__ram_exceptions_end+0xfb007c3c>
    9454:	29402034 	orhi	r5,r5,128
    9458:	01000e04 	movi	r4,56
    945c:	2080a90e 	bge	r4,r2,9704 <__subdf3+0x504>
    9460:	298cb03a 	or	r6,r5,r6
    9464:	3012c03a 	cmpne	r9,r6,zero
    9468:	0005883a 	mov	r2,zero
    946c:	4c53883a 	add	r9,r9,r17
    9470:	4c63803a 	cmpltu	r17,r9,r17
    9474:	10c7883a 	add	r3,r2,r3
    9478:	88c7883a 	add	r3,r17,r3
    947c:	4823883a 	mov	r17,r9
    9480:	1880202c 	andhi	r2,r3,128
    9484:	1000d026 	beq	r2,zero,97c8 <__subdf3+0x5c8>
    9488:	84000044 	addi	r16,r16,1
    948c:	0081ffc4 	movi	r2,2047
    9490:	8080fe26 	beq	r16,r2,988c <__subdf3+0x68c>
    9494:	00bfe034 	movhi	r2,65408
    9498:	10bfffc4 	addi	r2,r2,-1
    949c:	1886703a 	and	r3,r3,r2
    94a0:	880ad07a 	srli	r5,r17,1
    94a4:	180497fa 	slli	r2,r3,31
    94a8:	8900004c 	andi	r4,r17,1
    94ac:	2922b03a 	or	r17,r5,r4
    94b0:	1806d07a 	srli	r3,r3,1
    94b4:	1462b03a 	or	r17,r2,r17
    94b8:	3825883a 	mov	r18,r7
    94bc:	003f7106 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    94c0:	2984b03a 	or	r2,r5,r6
    94c4:	103f6826 	beq	r2,zero,9268 <__ram_exceptions_end+0xfb007c20>
    94c8:	39c03fcc 	andi	r7,r7,255
    94cc:	003f6706 	br	926c <__ram_exceptions_end+0xfb007c24>
    94d0:	4086b03a 	or	r3,r8,r2
    94d4:	18015226 	beq	r3,zero,9a20 <__subdf3+0x820>
    94d8:	00c00434 	movhi	r3,16
    94dc:	41400234 	orhi	r5,r8,8
    94e0:	18ffffc4 	addi	r3,r3,-1
    94e4:	28ca703a 	and	r5,r5,r3
    94e8:	003f7e06 	br	92e4 <__ram_exceptions_end+0xfb007c9c>
    94ec:	10bfffc4 	addi	r2,r2,-1
    94f0:	1000491e 	bne	r2,zero,9618 <__subdf3+0x418>
    94f4:	898fc83a 	sub	r7,r17,r6
    94f8:	89e3803a 	cmpltu	r17,r17,r7
    94fc:	1947c83a 	sub	r3,r3,r5
    9500:	1c47c83a 	sub	r3,r3,r17
    9504:	3823883a 	mov	r17,r7
    9508:	003f9b06 	br	9378 <__ram_exceptions_end+0xfb007d30>
    950c:	2988b03a 	or	r4,r5,r6
    9510:	203f5c26 	beq	r4,zero,9284 <__ram_exceptions_end+0xfb007c3c>
    9514:	10bfffc4 	addi	r2,r2,-1
    9518:	1000931e 	bne	r2,zero,9768 <__subdf3+0x568>
    951c:	898d883a 	add	r6,r17,r6
    9520:	3463803a 	cmpltu	r17,r6,r17
    9524:	1947883a 	add	r3,r3,r5
    9528:	88c7883a 	add	r3,r17,r3
    952c:	3023883a 	mov	r17,r6
    9530:	003fd306 	br	9480 <__ram_exceptions_end+0xfb007e38>
    9534:	1000541e 	bne	r2,zero,9688 <__subdf3+0x488>
    9538:	80800044 	addi	r2,r16,1
    953c:	1081ffcc 	andi	r2,r2,2047
    9540:	01000044 	movi	r4,1
    9544:	2080a20e 	bge	r4,r2,97d0 <__subdf3+0x5d0>
    9548:	8989c83a 	sub	r4,r17,r6
    954c:	8905803a 	cmpltu	r2,r17,r4
    9550:	1967c83a 	sub	r19,r3,r5
    9554:	98a7c83a 	sub	r19,r19,r2
    9558:	9880202c 	andhi	r2,r19,128
    955c:	10006326 	beq	r2,zero,96ec <__subdf3+0x4ec>
    9560:	3463c83a 	sub	r17,r6,r17
    9564:	28c7c83a 	sub	r3,r5,r3
    9568:	344d803a 	cmpltu	r6,r6,r17
    956c:	19a7c83a 	sub	r19,r3,r6
    9570:	3825883a 	mov	r18,r7
    9574:	983f861e 	bne	r19,zero,9390 <__ram_exceptions_end+0xfb007d48>
    9578:	8809883a 	mov	r4,r17
    957c:	0009f100 	call	9f10 <__clzsi2>
    9580:	10800804 	addi	r2,r2,32
    9584:	113ffe04 	addi	r4,r2,-8
    9588:	00c007c4 	movi	r3,31
    958c:	193f850e 	bge	r3,r4,93a4 <__ram_exceptions_end+0xfb007d5c>
    9590:	10bff604 	addi	r2,r2,-40
    9594:	8884983a 	sll	r2,r17,r2
    9598:	0023883a 	mov	r17,zero
    959c:	243f880e 	bge	r4,r16,93c0 <__ram_exceptions_end+0xfb007d78>
    95a0:	00ffe034 	movhi	r3,65408
    95a4:	18ffffc4 	addi	r3,r3,-1
    95a8:	8121c83a 	sub	r16,r16,r4
    95ac:	10c6703a 	and	r3,r2,r3
    95b0:	003f3406 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    95b4:	9100004c 	andi	r4,r18,1
    95b8:	000b883a 	mov	r5,zero
    95bc:	0005883a 	mov	r2,zero
    95c0:	003f4806 	br	92e4 <__ram_exceptions_end+0xfb007c9c>
    95c4:	298cb03a 	or	r6,r5,r6
    95c8:	300cc03a 	cmpne	r6,r6,zero
    95cc:	0005883a 	mov	r2,zero
    95d0:	003f6406 	br	9364 <__ram_exceptions_end+0xfb007d1c>
    95d4:	10009a1e 	bne	r2,zero,9840 <__subdf3+0x640>
    95d8:	82400044 	addi	r9,r16,1
    95dc:	4881ffcc 	andi	r2,r9,2047
    95e0:	02800044 	movi	r10,1
    95e4:	5080670e 	bge	r10,r2,9784 <__subdf3+0x584>
    95e8:	0081ffc4 	movi	r2,2047
    95ec:	4880af26 	beq	r9,r2,98ac <__subdf3+0x6ac>
    95f0:	898d883a 	add	r6,r17,r6
    95f4:	1945883a 	add	r2,r3,r5
    95f8:	3447803a 	cmpltu	r3,r6,r17
    95fc:	1887883a 	add	r3,r3,r2
    9600:	182297fa 	slli	r17,r3,31
    9604:	300cd07a 	srli	r6,r6,1
    9608:	1806d07a 	srli	r3,r3,1
    960c:	4821883a 	mov	r16,r9
    9610:	89a2b03a 	or	r17,r17,r6
    9614:	003f1b06 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9618:	0101ffc4 	movi	r4,2047
    961c:	813f441e 	bne	r16,r4,9330 <__ram_exceptions_end+0xfb007ce8>
    9620:	003f1806 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9624:	843ff844 	addi	r16,r16,-31
    9628:	01400804 	movi	r5,32
    962c:	1408d83a 	srl	r4,r2,r16
    9630:	19405026 	beq	r3,r5,9774 <__subdf3+0x574>
    9634:	01401004 	movi	r5,64
    9638:	28c7c83a 	sub	r3,r5,r3
    963c:	10c4983a 	sll	r2,r2,r3
    9640:	88a2b03a 	or	r17,r17,r2
    9644:	8822c03a 	cmpne	r17,r17,zero
    9648:	2462b03a 	or	r17,r4,r17
    964c:	0007883a 	mov	r3,zero
    9650:	0021883a 	mov	r16,zero
    9654:	003f6d06 	br	940c <__ram_exceptions_end+0xfb007dc4>
    9658:	11fff804 	addi	r7,r2,-32
    965c:	01000804 	movi	r4,32
    9660:	29ced83a 	srl	r7,r5,r7
    9664:	11004526 	beq	r2,r4,977c <__subdf3+0x57c>
    9668:	01001004 	movi	r4,64
    966c:	2089c83a 	sub	r4,r4,r2
    9670:	2904983a 	sll	r2,r5,r4
    9674:	118cb03a 	or	r6,r2,r6
    9678:	300cc03a 	cmpne	r6,r6,zero
    967c:	398cb03a 	or	r6,r7,r6
    9680:	0005883a 	mov	r2,zero
    9684:	003f3706 	br	9364 <__ram_exceptions_end+0xfb007d1c>
    9688:	80002a26 	beq	r16,zero,9734 <__subdf3+0x534>
    968c:	0101ffc4 	movi	r4,2047
    9690:	49006626 	beq	r9,r4,982c <__subdf3+0x62c>
    9694:	0085c83a 	sub	r2,zero,r2
    9698:	18c02034 	orhi	r3,r3,128
    969c:	01000e04 	movi	r4,56
    96a0:	20807e16 	blt	r4,r2,989c <__subdf3+0x69c>
    96a4:	010007c4 	movi	r4,31
    96a8:	2080e716 	blt	r4,r2,9a48 <__subdf3+0x848>
    96ac:	01000804 	movi	r4,32
    96b0:	2089c83a 	sub	r4,r4,r2
    96b4:	1914983a 	sll	r10,r3,r4
    96b8:	8890d83a 	srl	r8,r17,r2
    96bc:	8908983a 	sll	r4,r17,r4
    96c0:	1884d83a 	srl	r2,r3,r2
    96c4:	5222b03a 	or	r17,r10,r8
    96c8:	2006c03a 	cmpne	r3,r4,zero
    96cc:	88e2b03a 	or	r17,r17,r3
    96d0:	3463c83a 	sub	r17,r6,r17
    96d4:	2885c83a 	sub	r2,r5,r2
    96d8:	344d803a 	cmpltu	r6,r6,r17
    96dc:	1187c83a 	sub	r3,r2,r6
    96e0:	4821883a 	mov	r16,r9
    96e4:	3825883a 	mov	r18,r7
    96e8:	003f2306 	br	9378 <__ram_exceptions_end+0xfb007d30>
    96ec:	24d0b03a 	or	r8,r4,r19
    96f0:	40001b1e 	bne	r8,zero,9760 <__subdf3+0x560>
    96f4:	0005883a 	mov	r2,zero
    96f8:	0009883a 	mov	r4,zero
    96fc:	0021883a 	mov	r16,zero
    9700:	003f4906 	br	9428 <__ram_exceptions_end+0xfb007de0>
    9704:	010007c4 	movi	r4,31
    9708:	20803a16 	blt	r4,r2,97f4 <__subdf3+0x5f4>
    970c:	01000804 	movi	r4,32
    9710:	2089c83a 	sub	r4,r4,r2
    9714:	2912983a 	sll	r9,r5,r4
    9718:	3090d83a 	srl	r8,r6,r2
    971c:	3108983a 	sll	r4,r6,r4
    9720:	2884d83a 	srl	r2,r5,r2
    9724:	4a12b03a 	or	r9,r9,r8
    9728:	2008c03a 	cmpne	r4,r4,zero
    972c:	4912b03a 	or	r9,r9,r4
    9730:	003f4e06 	br	946c <__ram_exceptions_end+0xfb007e24>
    9734:	1c48b03a 	or	r4,r3,r17
    9738:	20003c26 	beq	r4,zero,982c <__subdf3+0x62c>
    973c:	0084303a 	nor	r2,zero,r2
    9740:	1000381e 	bne	r2,zero,9824 <__subdf3+0x624>
    9744:	3463c83a 	sub	r17,r6,r17
    9748:	28c5c83a 	sub	r2,r5,r3
    974c:	344d803a 	cmpltu	r6,r6,r17
    9750:	1187c83a 	sub	r3,r2,r6
    9754:	4821883a 	mov	r16,r9
    9758:	3825883a 	mov	r18,r7
    975c:	003f0606 	br	9378 <__ram_exceptions_end+0xfb007d30>
    9760:	2023883a 	mov	r17,r4
    9764:	003f0906 	br	938c <__ram_exceptions_end+0xfb007d44>
    9768:	0101ffc4 	movi	r4,2047
    976c:	813f3a1e 	bne	r16,r4,9458 <__ram_exceptions_end+0xfb007e10>
    9770:	003ec406 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9774:	0005883a 	mov	r2,zero
    9778:	003fb106 	br	9640 <__ram_exceptions_end+0xfb007ff8>
    977c:	0005883a 	mov	r2,zero
    9780:	003fbc06 	br	9674 <__ram_exceptions_end+0xfb00802c>
    9784:	1c44b03a 	or	r2,r3,r17
    9788:	80008e1e 	bne	r16,zero,99c4 <__subdf3+0x7c4>
    978c:	1000c826 	beq	r2,zero,9ab0 <__subdf3+0x8b0>
    9790:	2984b03a 	or	r2,r5,r6
    9794:	103ebb26 	beq	r2,zero,9284 <__ram_exceptions_end+0xfb007c3c>
    9798:	8989883a 	add	r4,r17,r6
    979c:	1945883a 	add	r2,r3,r5
    97a0:	2447803a 	cmpltu	r3,r4,r17
    97a4:	1887883a 	add	r3,r3,r2
    97a8:	1880202c 	andhi	r2,r3,128
    97ac:	2023883a 	mov	r17,r4
    97b0:	103f1626 	beq	r2,zero,940c <__ram_exceptions_end+0xfb007dc4>
    97b4:	00bfe034 	movhi	r2,65408
    97b8:	10bfffc4 	addi	r2,r2,-1
    97bc:	5021883a 	mov	r16,r10
    97c0:	1886703a 	and	r3,r3,r2
    97c4:	003eaf06 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    97c8:	3825883a 	mov	r18,r7
    97cc:	003f0f06 	br	940c <__ram_exceptions_end+0xfb007dc4>
    97d0:	1c44b03a 	or	r2,r3,r17
    97d4:	8000251e 	bne	r16,zero,986c <__subdf3+0x66c>
    97d8:	1000661e 	bne	r2,zero,9974 <__subdf3+0x774>
    97dc:	2990b03a 	or	r8,r5,r6
    97e0:	40009626 	beq	r8,zero,9a3c <__subdf3+0x83c>
    97e4:	2807883a 	mov	r3,r5
    97e8:	3023883a 	mov	r17,r6
    97ec:	3825883a 	mov	r18,r7
    97f0:	003ea406 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    97f4:	127ff804 	addi	r9,r2,-32
    97f8:	01000804 	movi	r4,32
    97fc:	2a52d83a 	srl	r9,r5,r9
    9800:	11008c26 	beq	r2,r4,9a34 <__subdf3+0x834>
    9804:	01001004 	movi	r4,64
    9808:	2085c83a 	sub	r2,r4,r2
    980c:	2884983a 	sll	r2,r5,r2
    9810:	118cb03a 	or	r6,r2,r6
    9814:	300cc03a 	cmpne	r6,r6,zero
    9818:	4992b03a 	or	r9,r9,r6
    981c:	0005883a 	mov	r2,zero
    9820:	003f1206 	br	946c <__ram_exceptions_end+0xfb007e24>
    9824:	0101ffc4 	movi	r4,2047
    9828:	493f9c1e 	bne	r9,r4,969c <__ram_exceptions_end+0xfb008054>
    982c:	2807883a 	mov	r3,r5
    9830:	3023883a 	mov	r17,r6
    9834:	4821883a 	mov	r16,r9
    9838:	3825883a 	mov	r18,r7
    983c:	003e9106 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9840:	80001f1e 	bne	r16,zero,98c0 <__subdf3+0x6c0>
    9844:	1c48b03a 	or	r4,r3,r17
    9848:	20005a26 	beq	r4,zero,99b4 <__subdf3+0x7b4>
    984c:	0084303a 	nor	r2,zero,r2
    9850:	1000561e 	bne	r2,zero,99ac <__subdf3+0x7ac>
    9854:	89a3883a 	add	r17,r17,r6
    9858:	1945883a 	add	r2,r3,r5
    985c:	898d803a 	cmpltu	r6,r17,r6
    9860:	3087883a 	add	r3,r6,r2
    9864:	4821883a 	mov	r16,r9
    9868:	003f0506 	br	9480 <__ram_exceptions_end+0xfb007e38>
    986c:	10002b1e 	bne	r2,zero,991c <__subdf3+0x71c>
    9870:	2984b03a 	or	r2,r5,r6
    9874:	10008026 	beq	r2,zero,9a78 <__subdf3+0x878>
    9878:	2807883a 	mov	r3,r5
    987c:	3023883a 	mov	r17,r6
    9880:	3825883a 	mov	r18,r7
    9884:	0401ffc4 	movi	r16,2047
    9888:	003e7e06 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    988c:	3809883a 	mov	r4,r7
    9890:	0011883a 	mov	r8,zero
    9894:	0005883a 	mov	r2,zero
    9898:	003ee306 	br	9428 <__ram_exceptions_end+0xfb007de0>
    989c:	1c62b03a 	or	r17,r3,r17
    98a0:	8822c03a 	cmpne	r17,r17,zero
    98a4:	0005883a 	mov	r2,zero
    98a8:	003f8906 	br	96d0 <__ram_exceptions_end+0xfb008088>
    98ac:	3809883a 	mov	r4,r7
    98b0:	4821883a 	mov	r16,r9
    98b4:	0011883a 	mov	r8,zero
    98b8:	0005883a 	mov	r2,zero
    98bc:	003eda06 	br	9428 <__ram_exceptions_end+0xfb007de0>
    98c0:	0101ffc4 	movi	r4,2047
    98c4:	49003b26 	beq	r9,r4,99b4 <__subdf3+0x7b4>
    98c8:	0085c83a 	sub	r2,zero,r2
    98cc:	18c02034 	orhi	r3,r3,128
    98d0:	01000e04 	movi	r4,56
    98d4:	20806e16 	blt	r4,r2,9a90 <__subdf3+0x890>
    98d8:	010007c4 	movi	r4,31
    98dc:	20807716 	blt	r4,r2,9abc <__subdf3+0x8bc>
    98e0:	01000804 	movi	r4,32
    98e4:	2089c83a 	sub	r4,r4,r2
    98e8:	1914983a 	sll	r10,r3,r4
    98ec:	8890d83a 	srl	r8,r17,r2
    98f0:	8908983a 	sll	r4,r17,r4
    98f4:	1884d83a 	srl	r2,r3,r2
    98f8:	5222b03a 	or	r17,r10,r8
    98fc:	2006c03a 	cmpne	r3,r4,zero
    9900:	88e2b03a 	or	r17,r17,r3
    9904:	89a3883a 	add	r17,r17,r6
    9908:	1145883a 	add	r2,r2,r5
    990c:	898d803a 	cmpltu	r6,r17,r6
    9910:	3087883a 	add	r3,r6,r2
    9914:	4821883a 	mov	r16,r9
    9918:	003ed906 	br	9480 <__ram_exceptions_end+0xfb007e38>
    991c:	2984b03a 	or	r2,r5,r6
    9920:	10004226 	beq	r2,zero,9a2c <__subdf3+0x82c>
    9924:	1808d0fa 	srli	r4,r3,3
    9928:	8822d0fa 	srli	r17,r17,3
    992c:	1806977a 	slli	r3,r3,29
    9930:	2080022c 	andhi	r2,r4,8
    9934:	1c62b03a 	or	r17,r3,r17
    9938:	10000826 	beq	r2,zero,995c <__subdf3+0x75c>
    993c:	2812d0fa 	srli	r9,r5,3
    9940:	4880022c 	andhi	r2,r9,8
    9944:	1000051e 	bne	r2,zero,995c <__subdf3+0x75c>
    9948:	300cd0fa 	srli	r6,r6,3
    994c:	2804977a 	slli	r2,r5,29
    9950:	4809883a 	mov	r4,r9
    9954:	3825883a 	mov	r18,r7
    9958:	11a2b03a 	or	r17,r2,r6
    995c:	8806d77a 	srli	r3,r17,29
    9960:	200890fa 	slli	r4,r4,3
    9964:	882290fa 	slli	r17,r17,3
    9968:	0401ffc4 	movi	r16,2047
    996c:	1906b03a 	or	r3,r3,r4
    9970:	003e4406 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9974:	2984b03a 	or	r2,r5,r6
    9978:	103e4226 	beq	r2,zero,9284 <__ram_exceptions_end+0xfb007c3c>
    997c:	8989c83a 	sub	r4,r17,r6
    9980:	8911803a 	cmpltu	r8,r17,r4
    9984:	1945c83a 	sub	r2,r3,r5
    9988:	1205c83a 	sub	r2,r2,r8
    998c:	1200202c 	andhi	r8,r2,128
    9990:	403e9a26 	beq	r8,zero,93fc <__ram_exceptions_end+0xfb007db4>
    9994:	3463c83a 	sub	r17,r6,r17
    9998:	28c5c83a 	sub	r2,r5,r3
    999c:	344d803a 	cmpltu	r6,r6,r17
    99a0:	1187c83a 	sub	r3,r2,r6
    99a4:	3825883a 	mov	r18,r7
    99a8:	003e3606 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    99ac:	0101ffc4 	movi	r4,2047
    99b0:	493fc71e 	bne	r9,r4,98d0 <__ram_exceptions_end+0xfb008288>
    99b4:	2807883a 	mov	r3,r5
    99b8:	3023883a 	mov	r17,r6
    99bc:	4821883a 	mov	r16,r9
    99c0:	003e3006 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    99c4:	10003626 	beq	r2,zero,9aa0 <__subdf3+0x8a0>
    99c8:	2984b03a 	or	r2,r5,r6
    99cc:	10001726 	beq	r2,zero,9a2c <__subdf3+0x82c>
    99d0:	1808d0fa 	srli	r4,r3,3
    99d4:	8822d0fa 	srli	r17,r17,3
    99d8:	1806977a 	slli	r3,r3,29
    99dc:	2080022c 	andhi	r2,r4,8
    99e0:	1c62b03a 	or	r17,r3,r17
    99e4:	10000726 	beq	r2,zero,9a04 <__subdf3+0x804>
    99e8:	2812d0fa 	srli	r9,r5,3
    99ec:	4880022c 	andhi	r2,r9,8
    99f0:	1000041e 	bne	r2,zero,9a04 <__subdf3+0x804>
    99f4:	300cd0fa 	srli	r6,r6,3
    99f8:	2804977a 	slli	r2,r5,29
    99fc:	4809883a 	mov	r4,r9
    9a00:	11a2b03a 	or	r17,r2,r6
    9a04:	8806d77a 	srli	r3,r17,29
    9a08:	200890fa 	slli	r4,r4,3
    9a0c:	882290fa 	slli	r17,r17,3
    9a10:	3825883a 	mov	r18,r7
    9a14:	1906b03a 	or	r3,r3,r4
    9a18:	0401ffc4 	movi	r16,2047
    9a1c:	003e1906 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9a20:	000b883a 	mov	r5,zero
    9a24:	0005883a 	mov	r2,zero
    9a28:	003e2e06 	br	92e4 <__ram_exceptions_end+0xfb007c9c>
    9a2c:	0401ffc4 	movi	r16,2047
    9a30:	003e1406 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9a34:	0005883a 	mov	r2,zero
    9a38:	003f7506 	br	9810 <__ram_exceptions_end+0xfb0081c8>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	0009883a 	mov	r4,zero
    9a44:	003e7806 	br	9428 <__ram_exceptions_end+0xfb007de0>
    9a48:	123ff804 	addi	r8,r2,-32
    9a4c:	01000804 	movi	r4,32
    9a50:	1a10d83a 	srl	r8,r3,r8
    9a54:	11002526 	beq	r2,r4,9aec <__subdf3+0x8ec>
    9a58:	01001004 	movi	r4,64
    9a5c:	2085c83a 	sub	r2,r4,r2
    9a60:	1884983a 	sll	r2,r3,r2
    9a64:	1444b03a 	or	r2,r2,r17
    9a68:	1004c03a 	cmpne	r2,r2,zero
    9a6c:	40a2b03a 	or	r17,r8,r2
    9a70:	0005883a 	mov	r2,zero
    9a74:	003f1606 	br	96d0 <__ram_exceptions_end+0xfb008088>
    9a78:	02000434 	movhi	r8,16
    9a7c:	0009883a 	mov	r4,zero
    9a80:	423fffc4 	addi	r8,r8,-1
    9a84:	00bfffc4 	movi	r2,-1
    9a88:	0401ffc4 	movi	r16,2047
    9a8c:	003e6606 	br	9428 <__ram_exceptions_end+0xfb007de0>
    9a90:	1c62b03a 	or	r17,r3,r17
    9a94:	8822c03a 	cmpne	r17,r17,zero
    9a98:	0005883a 	mov	r2,zero
    9a9c:	003f9906 	br	9904 <__ram_exceptions_end+0xfb0082bc>
    9aa0:	2807883a 	mov	r3,r5
    9aa4:	3023883a 	mov	r17,r6
    9aa8:	0401ffc4 	movi	r16,2047
    9aac:	003df506 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9ab0:	2807883a 	mov	r3,r5
    9ab4:	3023883a 	mov	r17,r6
    9ab8:	003df206 	br	9284 <__ram_exceptions_end+0xfb007c3c>
    9abc:	123ff804 	addi	r8,r2,-32
    9ac0:	01000804 	movi	r4,32
    9ac4:	1a10d83a 	srl	r8,r3,r8
    9ac8:	11000a26 	beq	r2,r4,9af4 <__subdf3+0x8f4>
    9acc:	01001004 	movi	r4,64
    9ad0:	2085c83a 	sub	r2,r4,r2
    9ad4:	1884983a 	sll	r2,r3,r2
    9ad8:	1444b03a 	or	r2,r2,r17
    9adc:	1004c03a 	cmpne	r2,r2,zero
    9ae0:	40a2b03a 	or	r17,r8,r2
    9ae4:	0005883a 	mov	r2,zero
    9ae8:	003f8606 	br	9904 <__ram_exceptions_end+0xfb0082bc>
    9aec:	0005883a 	mov	r2,zero
    9af0:	003fdc06 	br	9a64 <__ram_exceptions_end+0xfb00841c>
    9af4:	0005883a 	mov	r2,zero
    9af8:	003ff706 	br	9ad8 <__ram_exceptions_end+0xfb008490>

00009afc <__fixdfsi>:
    9afc:	280cd53a 	srli	r6,r5,20
    9b00:	00c00434 	movhi	r3,16
    9b04:	18ffffc4 	addi	r3,r3,-1
    9b08:	3181ffcc 	andi	r6,r6,2047
    9b0c:	01c0ff84 	movi	r7,1022
    9b10:	28c6703a 	and	r3,r5,r3
    9b14:	280ad7fa 	srli	r5,r5,31
    9b18:	3980120e 	bge	r7,r6,9b64 <__fixdfsi+0x68>
    9b1c:	00810744 	movi	r2,1053
    9b20:	11800c16 	blt	r2,r6,9b54 <__fixdfsi+0x58>
    9b24:	00810cc4 	movi	r2,1075
    9b28:	1185c83a 	sub	r2,r2,r6
    9b2c:	01c007c4 	movi	r7,31
    9b30:	18c00434 	orhi	r3,r3,16
    9b34:	38800d16 	blt	r7,r2,9b6c <__fixdfsi+0x70>
    9b38:	31befb44 	addi	r6,r6,-1043
    9b3c:	2084d83a 	srl	r2,r4,r2
    9b40:	1986983a 	sll	r3,r3,r6
    9b44:	1884b03a 	or	r2,r3,r2
    9b48:	28000726 	beq	r5,zero,9b68 <__fixdfsi+0x6c>
    9b4c:	0085c83a 	sub	r2,zero,r2
    9b50:	f800283a 	ret
    9b54:	00a00034 	movhi	r2,32768
    9b58:	10bfffc4 	addi	r2,r2,-1
    9b5c:	2885883a 	add	r2,r5,r2
    9b60:	f800283a 	ret
    9b64:	0005883a 	mov	r2,zero
    9b68:	f800283a 	ret
    9b6c:	008104c4 	movi	r2,1043
    9b70:	1185c83a 	sub	r2,r2,r6
    9b74:	1884d83a 	srl	r2,r3,r2
    9b78:	003ff306 	br	9b48 <__ram_exceptions_end+0xfb008500>

00009b7c <__floatsidf>:
    9b7c:	defffd04 	addi	sp,sp,-12
    9b80:	dfc00215 	stw	ra,8(sp)
    9b84:	dc400115 	stw	r17,4(sp)
    9b88:	dc000015 	stw	r16,0(sp)
    9b8c:	20002b26 	beq	r4,zero,9c3c <__floatsidf+0xc0>
    9b90:	2023883a 	mov	r17,r4
    9b94:	2020d7fa 	srli	r16,r4,31
    9b98:	20002d16 	blt	r4,zero,9c50 <__floatsidf+0xd4>
    9b9c:	8809883a 	mov	r4,r17
    9ba0:	0009f100 	call	9f10 <__clzsi2>
    9ba4:	01410784 	movi	r5,1054
    9ba8:	288bc83a 	sub	r5,r5,r2
    9bac:	01010cc4 	movi	r4,1075
    9bb0:	2149c83a 	sub	r4,r4,r5
    9bb4:	00c007c4 	movi	r3,31
    9bb8:	1900160e 	bge	r3,r4,9c14 <__floatsidf+0x98>
    9bbc:	00c104c4 	movi	r3,1043
    9bc0:	1947c83a 	sub	r3,r3,r5
    9bc4:	88c6983a 	sll	r3,r17,r3
    9bc8:	00800434 	movhi	r2,16
    9bcc:	10bfffc4 	addi	r2,r2,-1
    9bd0:	1886703a 	and	r3,r3,r2
    9bd4:	2941ffcc 	andi	r5,r5,2047
    9bd8:	800d883a 	mov	r6,r16
    9bdc:	0005883a 	mov	r2,zero
    9be0:	280a953a 	slli	r5,r5,20
    9be4:	31803fcc 	andi	r6,r6,255
    9be8:	01000434 	movhi	r4,16
    9bec:	300c97fa 	slli	r6,r6,31
    9bf0:	213fffc4 	addi	r4,r4,-1
    9bf4:	1906703a 	and	r3,r3,r4
    9bf8:	1946b03a 	or	r3,r3,r5
    9bfc:	1986b03a 	or	r3,r3,r6
    9c00:	dfc00217 	ldw	ra,8(sp)
    9c04:	dc400117 	ldw	r17,4(sp)
    9c08:	dc000017 	ldw	r16,0(sp)
    9c0c:	dec00304 	addi	sp,sp,12
    9c10:	f800283a 	ret
    9c14:	00c002c4 	movi	r3,11
    9c18:	1887c83a 	sub	r3,r3,r2
    9c1c:	88c6d83a 	srl	r3,r17,r3
    9c20:	8904983a 	sll	r2,r17,r4
    9c24:	01000434 	movhi	r4,16
    9c28:	213fffc4 	addi	r4,r4,-1
    9c2c:	2941ffcc 	andi	r5,r5,2047
    9c30:	1906703a 	and	r3,r3,r4
    9c34:	800d883a 	mov	r6,r16
    9c38:	003fe906 	br	9be0 <__ram_exceptions_end+0xfb008598>
    9c3c:	000d883a 	mov	r6,zero
    9c40:	000b883a 	mov	r5,zero
    9c44:	0007883a 	mov	r3,zero
    9c48:	0005883a 	mov	r2,zero
    9c4c:	003fe406 	br	9be0 <__ram_exceptions_end+0xfb008598>
    9c50:	0123c83a 	sub	r17,zero,r4
    9c54:	003fd106 	br	9b9c <__ram_exceptions_end+0xfb008554>

00009c58 <__extendsfdf2>:
    9c58:	200ad5fa 	srli	r5,r4,23
    9c5c:	defffd04 	addi	sp,sp,-12
    9c60:	dc400115 	stw	r17,4(sp)
    9c64:	29403fcc 	andi	r5,r5,255
    9c68:	29800044 	addi	r6,r5,1
    9c6c:	04402034 	movhi	r17,128
    9c70:	dc000015 	stw	r16,0(sp)
    9c74:	8c7fffc4 	addi	r17,r17,-1
    9c78:	dfc00215 	stw	ra,8(sp)
    9c7c:	31803fcc 	andi	r6,r6,255
    9c80:	00800044 	movi	r2,1
    9c84:	8922703a 	and	r17,r17,r4
    9c88:	2020d7fa 	srli	r16,r4,31
    9c8c:	1180110e 	bge	r2,r6,9cd4 <__extendsfdf2+0x7c>
    9c90:	880cd0fa 	srli	r6,r17,3
    9c94:	8822977a 	slli	r17,r17,29
    9c98:	2940e004 	addi	r5,r5,896
    9c9c:	2941ffcc 	andi	r5,r5,2047
    9ca0:	2804953a 	slli	r2,r5,20
    9ca4:	01400434 	movhi	r5,16
    9ca8:	800697fa 	slli	r3,r16,31
    9cac:	297fffc4 	addi	r5,r5,-1
    9cb0:	314a703a 	and	r5,r6,r5
    9cb4:	288ab03a 	or	r5,r5,r2
    9cb8:	28c6b03a 	or	r3,r5,r3
    9cbc:	8805883a 	mov	r2,r17
    9cc0:	dfc00217 	ldw	ra,8(sp)
    9cc4:	dc400117 	ldw	r17,4(sp)
    9cc8:	dc000017 	ldw	r16,0(sp)
    9ccc:	dec00304 	addi	sp,sp,12
    9cd0:	f800283a 	ret
    9cd4:	2800111e 	bne	r5,zero,9d1c <__extendsfdf2+0xc4>
    9cd8:	88001c26 	beq	r17,zero,9d4c <__extendsfdf2+0xf4>
    9cdc:	8809883a 	mov	r4,r17
    9ce0:	0009f100 	call	9f10 <__clzsi2>
    9ce4:	00c00284 	movi	r3,10
    9ce8:	18801b16 	blt	r3,r2,9d58 <__extendsfdf2+0x100>
    9cec:	018002c4 	movi	r6,11
    9cf0:	308dc83a 	sub	r6,r6,r2
    9cf4:	11000544 	addi	r4,r2,21
    9cf8:	8986d83a 	srl	r3,r17,r6
    9cfc:	8922983a 	sll	r17,r17,r4
    9d00:	0180e244 	movi	r6,905
    9d04:	01400434 	movhi	r5,16
    9d08:	3085c83a 	sub	r2,r6,r2
    9d0c:	297fffc4 	addi	r5,r5,-1
    9d10:	194c703a 	and	r6,r3,r5
    9d14:	1141ffcc 	andi	r5,r2,2047
    9d18:	003fe006 	br	9c9c <__ram_exceptions_end+0xfb008654>
    9d1c:	88000826 	beq	r17,zero,9d40 <__extendsfdf2+0xe8>
    9d20:	880cd0fa 	srli	r6,r17,3
    9d24:	00800434 	movhi	r2,16
    9d28:	10bfffc4 	addi	r2,r2,-1
    9d2c:	31800234 	orhi	r6,r6,8
    9d30:	8822977a 	slli	r17,r17,29
    9d34:	308c703a 	and	r6,r6,r2
    9d38:	0141ffc4 	movi	r5,2047
    9d3c:	003fd706 	br	9c9c <__ram_exceptions_end+0xfb008654>
    9d40:	0141ffc4 	movi	r5,2047
    9d44:	000d883a 	mov	r6,zero
    9d48:	003fd406 	br	9c9c <__ram_exceptions_end+0xfb008654>
    9d4c:	000b883a 	mov	r5,zero
    9d50:	000d883a 	mov	r6,zero
    9d54:	003fd106 	br	9c9c <__ram_exceptions_end+0xfb008654>
    9d58:	11bffd44 	addi	r6,r2,-11
    9d5c:	8986983a 	sll	r3,r17,r6
    9d60:	0023883a 	mov	r17,zero
    9d64:	003fe606 	br	9d00 <__ram_exceptions_end+0xfb0086b8>

00009d68 <__truncdfsf2>:
    9d68:	2810d53a 	srli	r8,r5,20
    9d6c:	01c00434 	movhi	r7,16
    9d70:	39ffffc4 	addi	r7,r7,-1
    9d74:	29ce703a 	and	r7,r5,r7
    9d78:	4201ffcc 	andi	r8,r8,2047
    9d7c:	380e90fa 	slli	r7,r7,3
    9d80:	200cd77a 	srli	r6,r4,29
    9d84:	42400044 	addi	r9,r8,1
    9d88:	4a41ffcc 	andi	r9,r9,2047
    9d8c:	00c00044 	movi	r3,1
    9d90:	280ad7fa 	srli	r5,r5,31
    9d94:	31ceb03a 	or	r7,r6,r7
    9d98:	200490fa 	slli	r2,r4,3
    9d9c:	1a40230e 	bge	r3,r9,9e2c <__truncdfsf2+0xc4>
    9da0:	40ff2004 	addi	r3,r8,-896
    9da4:	01803f84 	movi	r6,254
    9da8:	30c01516 	blt	r6,r3,9e00 <__truncdfsf2+0x98>
    9dac:	00c0380e 	bge	zero,r3,9e90 <__truncdfsf2+0x128>
    9db0:	200c91ba 	slli	r6,r4,6
    9db4:	380e90fa 	slli	r7,r7,3
    9db8:	1004d77a 	srli	r2,r2,29
    9dbc:	300cc03a 	cmpne	r6,r6,zero
    9dc0:	31ccb03a 	or	r6,r6,r7
    9dc4:	308cb03a 	or	r6,r6,r2
    9dc8:	308001cc 	andi	r2,r6,7
    9dcc:	10000426 	beq	r2,zero,9de0 <__truncdfsf2+0x78>
    9dd0:	308003cc 	andi	r2,r6,15
    9dd4:	01000104 	movi	r4,4
    9dd8:	11000126 	beq	r2,r4,9de0 <__truncdfsf2+0x78>
    9ddc:	31800104 	addi	r6,r6,4
    9de0:	3081002c 	andhi	r2,r6,1024
    9de4:	10001626 	beq	r2,zero,9e40 <__truncdfsf2+0xd8>
    9de8:	18c00044 	addi	r3,r3,1
    9dec:	00803fc4 	movi	r2,255
    9df0:	18800326 	beq	r3,r2,9e00 <__truncdfsf2+0x98>
    9df4:	300c91ba 	slli	r6,r6,6
    9df8:	300cd27a 	srli	r6,r6,9
    9dfc:	00000206 	br	9e08 <__truncdfsf2+0xa0>
    9e00:	00ffffc4 	movi	r3,-1
    9e04:	000d883a 	mov	r6,zero
    9e08:	18c03fcc 	andi	r3,r3,255
    9e0c:	180895fa 	slli	r4,r3,23
    9e10:	00c02034 	movhi	r3,128
    9e14:	280a97fa 	slli	r5,r5,31
    9e18:	18ffffc4 	addi	r3,r3,-1
    9e1c:	30c6703a 	and	r3,r6,r3
    9e20:	1906b03a 	or	r3,r3,r4
    9e24:	1944b03a 	or	r2,r3,r5
    9e28:	f800283a 	ret
    9e2c:	40000b1e 	bne	r8,zero,9e5c <__truncdfsf2+0xf4>
    9e30:	388cb03a 	or	r6,r7,r2
    9e34:	0007883a 	mov	r3,zero
    9e38:	30000426 	beq	r6,zero,9e4c <__truncdfsf2+0xe4>
    9e3c:	01800144 	movi	r6,5
    9e40:	00803fc4 	movi	r2,255
    9e44:	300cd0fa 	srli	r6,r6,3
    9e48:	18800a26 	beq	r3,r2,9e74 <__truncdfsf2+0x10c>
    9e4c:	00802034 	movhi	r2,128
    9e50:	10bfffc4 	addi	r2,r2,-1
    9e54:	308c703a 	and	r6,r6,r2
    9e58:	003feb06 	br	9e08 <__ram_exceptions_end+0xfb0087c0>
    9e5c:	3888b03a 	or	r4,r7,r2
    9e60:	203fe726 	beq	r4,zero,9e00 <__ram_exceptions_end+0xfb0087b8>
    9e64:	380c90fa 	slli	r6,r7,3
    9e68:	00c03fc4 	movi	r3,255
    9e6c:	31808034 	orhi	r6,r6,512
    9e70:	003fd506 	br	9dc8 <__ram_exceptions_end+0xfb008780>
    9e74:	303fe226 	beq	r6,zero,9e00 <__ram_exceptions_end+0xfb0087b8>
    9e78:	00802034 	movhi	r2,128
    9e7c:	31801034 	orhi	r6,r6,64
    9e80:	10bfffc4 	addi	r2,r2,-1
    9e84:	00ffffc4 	movi	r3,-1
    9e88:	308c703a 	and	r6,r6,r2
    9e8c:	003fde06 	br	9e08 <__ram_exceptions_end+0xfb0087c0>
    9e90:	013ffa44 	movi	r4,-23
    9e94:	19000e16 	blt	r3,r4,9ed0 <__truncdfsf2+0x168>
    9e98:	01000784 	movi	r4,30
    9e9c:	20c9c83a 	sub	r4,r4,r3
    9ea0:	018007c4 	movi	r6,31
    9ea4:	39c02034 	orhi	r7,r7,128
    9ea8:	31000b16 	blt	r6,r4,9ed8 <__truncdfsf2+0x170>
    9eac:	423f2084 	addi	r8,r8,-894
    9eb0:	120c983a 	sll	r6,r2,r8
    9eb4:	3a0e983a 	sll	r7,r7,r8
    9eb8:	1104d83a 	srl	r2,r2,r4
    9ebc:	300cc03a 	cmpne	r6,r6,zero
    9ec0:	31ceb03a 	or	r7,r6,r7
    9ec4:	388cb03a 	or	r6,r7,r2
    9ec8:	0007883a 	mov	r3,zero
    9ecc:	003fbe06 	br	9dc8 <__ram_exceptions_end+0xfb008780>
    9ed0:	0007883a 	mov	r3,zero
    9ed4:	003fd906 	br	9e3c <__ram_exceptions_end+0xfb0087f4>
    9ed8:	01bfff84 	movi	r6,-2
    9edc:	30cdc83a 	sub	r6,r6,r3
    9ee0:	00c00804 	movi	r3,32
    9ee4:	398cd83a 	srl	r6,r7,r6
    9ee8:	20c00726 	beq	r4,r3,9f08 <__truncdfsf2+0x1a0>
    9eec:	423f2884 	addi	r8,r8,-862
    9ef0:	3a0e983a 	sll	r7,r7,r8
    9ef4:	3884b03a 	or	r2,r7,r2
    9ef8:	1004c03a 	cmpne	r2,r2,zero
    9efc:	118cb03a 	or	r6,r2,r6
    9f00:	0007883a 	mov	r3,zero
    9f04:	003fb006 	br	9dc8 <__ram_exceptions_end+0xfb008780>
    9f08:	000f883a 	mov	r7,zero
    9f0c:	003ff906 	br	9ef4 <__ram_exceptions_end+0xfb0088ac>

00009f10 <__clzsi2>:
    9f10:	00bfffd4 	movui	r2,65535
    9f14:	11000536 	bltu	r2,r4,9f2c <__clzsi2+0x1c>
    9f18:	00803fc4 	movi	r2,255
    9f1c:	11000f36 	bltu	r2,r4,9f5c <__clzsi2+0x4c>
    9f20:	00800804 	movi	r2,32
    9f24:	0007883a 	mov	r3,zero
    9f28:	00000506 	br	9f40 <__clzsi2+0x30>
    9f2c:	00804034 	movhi	r2,256
    9f30:	10bfffc4 	addi	r2,r2,-1
    9f34:	11000c2e 	bgeu	r2,r4,9f68 <__clzsi2+0x58>
    9f38:	00800204 	movi	r2,8
    9f3c:	00c00604 	movi	r3,24
    9f40:	20c8d83a 	srl	r4,r4,r3
    9f44:	00c00074 	movhi	r3,1
    9f48:	18cc2604 	addi	r3,r3,12440
    9f4c:	1909883a 	add	r4,r3,r4
    9f50:	20c00003 	ldbu	r3,0(r4)
    9f54:	10c5c83a 	sub	r2,r2,r3
    9f58:	f800283a 	ret
    9f5c:	00800604 	movi	r2,24
    9f60:	00c00204 	movi	r3,8
    9f64:	003ff606 	br	9f40 <__ram_exceptions_end+0xfb0088f8>
    9f68:	00800404 	movi	r2,16
    9f6c:	1007883a 	mov	r3,r2
    9f70:	003ff306 	br	9f40 <__ram_exceptions_end+0xfb0088f8>

00009f74 <memcpy>:
    9f74:	defffd04 	addi	sp,sp,-12
    9f78:	dfc00215 	stw	ra,8(sp)
    9f7c:	dc400115 	stw	r17,4(sp)
    9f80:	dc000015 	stw	r16,0(sp)
    9f84:	00c003c4 	movi	r3,15
    9f88:	2005883a 	mov	r2,r4
    9f8c:	1980452e 	bgeu	r3,r6,a0a4 <memcpy+0x130>
    9f90:	2906b03a 	or	r3,r5,r4
    9f94:	18c000cc 	andi	r3,r3,3
    9f98:	1800441e 	bne	r3,zero,a0ac <memcpy+0x138>
    9f9c:	347ffc04 	addi	r17,r6,-16
    9fa0:	8822d13a 	srli	r17,r17,4
    9fa4:	28c00104 	addi	r3,r5,4
    9fa8:	23400104 	addi	r13,r4,4
    9fac:	8820913a 	slli	r16,r17,4
    9fb0:	2b000204 	addi	r12,r5,8
    9fb4:	22c00204 	addi	r11,r4,8
    9fb8:	84000504 	addi	r16,r16,20
    9fbc:	2a800304 	addi	r10,r5,12
    9fc0:	22400304 	addi	r9,r4,12
    9fc4:	2c21883a 	add	r16,r5,r16
    9fc8:	2811883a 	mov	r8,r5
    9fcc:	200f883a 	mov	r7,r4
    9fd0:	41000017 	ldw	r4,0(r8)
    9fd4:	1fc00017 	ldw	ra,0(r3)
    9fd8:	63c00017 	ldw	r15,0(r12)
    9fdc:	39000015 	stw	r4,0(r7)
    9fe0:	53800017 	ldw	r14,0(r10)
    9fe4:	6fc00015 	stw	ra,0(r13)
    9fe8:	5bc00015 	stw	r15,0(r11)
    9fec:	4b800015 	stw	r14,0(r9)
    9ff0:	18c00404 	addi	r3,r3,16
    9ff4:	39c00404 	addi	r7,r7,16
    9ff8:	42000404 	addi	r8,r8,16
    9ffc:	6b400404 	addi	r13,r13,16
    a000:	63000404 	addi	r12,r12,16
    a004:	5ac00404 	addi	r11,r11,16
    a008:	52800404 	addi	r10,r10,16
    a00c:	4a400404 	addi	r9,r9,16
    a010:	1c3fef1e 	bne	r3,r16,9fd0 <__ram_exceptions_end+0xfb008988>
    a014:	89c00044 	addi	r7,r17,1
    a018:	380e913a 	slli	r7,r7,4
    a01c:	310003cc 	andi	r4,r6,15
    a020:	02c000c4 	movi	r11,3
    a024:	11c7883a 	add	r3,r2,r7
    a028:	29cb883a 	add	r5,r5,r7
    a02c:	5900212e 	bgeu	r11,r4,a0b4 <memcpy+0x140>
    a030:	1813883a 	mov	r9,r3
    a034:	2811883a 	mov	r8,r5
    a038:	200f883a 	mov	r7,r4
    a03c:	42800017 	ldw	r10,0(r8)
    a040:	4a400104 	addi	r9,r9,4
    a044:	39ffff04 	addi	r7,r7,-4
    a048:	4abfff15 	stw	r10,-4(r9)
    a04c:	42000104 	addi	r8,r8,4
    a050:	59fffa36 	bltu	r11,r7,a03c <__ram_exceptions_end+0xfb0089f4>
    a054:	213fff04 	addi	r4,r4,-4
    a058:	2008d0ba 	srli	r4,r4,2
    a05c:	318000cc 	andi	r6,r6,3
    a060:	21000044 	addi	r4,r4,1
    a064:	2109883a 	add	r4,r4,r4
    a068:	2109883a 	add	r4,r4,r4
    a06c:	1907883a 	add	r3,r3,r4
    a070:	290b883a 	add	r5,r5,r4
    a074:	30000626 	beq	r6,zero,a090 <memcpy+0x11c>
    a078:	198d883a 	add	r6,r3,r6
    a07c:	29c00003 	ldbu	r7,0(r5)
    a080:	18c00044 	addi	r3,r3,1
    a084:	29400044 	addi	r5,r5,1
    a088:	19ffffc5 	stb	r7,-1(r3)
    a08c:	19bffb1e 	bne	r3,r6,a07c <__ram_exceptions_end+0xfb008a34>
    a090:	dfc00217 	ldw	ra,8(sp)
    a094:	dc400117 	ldw	r17,4(sp)
    a098:	dc000017 	ldw	r16,0(sp)
    a09c:	dec00304 	addi	sp,sp,12
    a0a0:	f800283a 	ret
    a0a4:	2007883a 	mov	r3,r4
    a0a8:	003ff206 	br	a074 <__ram_exceptions_end+0xfb008a2c>
    a0ac:	2007883a 	mov	r3,r4
    a0b0:	003ff106 	br	a078 <__ram_exceptions_end+0xfb008a30>
    a0b4:	200d883a 	mov	r6,r4
    a0b8:	003fee06 	br	a074 <__ram_exceptions_end+0xfb008a2c>

0000a0bc <memset>:
    a0bc:	20c000cc 	andi	r3,r4,3
    a0c0:	2005883a 	mov	r2,r4
    a0c4:	18004426 	beq	r3,zero,a1d8 <memset+0x11c>
    a0c8:	31ffffc4 	addi	r7,r6,-1
    a0cc:	30004026 	beq	r6,zero,a1d0 <memset+0x114>
    a0d0:	2813883a 	mov	r9,r5
    a0d4:	200d883a 	mov	r6,r4
    a0d8:	2007883a 	mov	r3,r4
    a0dc:	00000406 	br	a0f0 <memset+0x34>
    a0e0:	3a3fffc4 	addi	r8,r7,-1
    a0e4:	31800044 	addi	r6,r6,1
    a0e8:	38003926 	beq	r7,zero,a1d0 <memset+0x114>
    a0ec:	400f883a 	mov	r7,r8
    a0f0:	18c00044 	addi	r3,r3,1
    a0f4:	32400005 	stb	r9,0(r6)
    a0f8:	1a0000cc 	andi	r8,r3,3
    a0fc:	403ff81e 	bne	r8,zero,a0e0 <__ram_exceptions_end+0xfb008a98>
    a100:	010000c4 	movi	r4,3
    a104:	21c02d2e 	bgeu	r4,r7,a1bc <memset+0x100>
    a108:	29003fcc 	andi	r4,r5,255
    a10c:	200c923a 	slli	r6,r4,8
    a110:	3108b03a 	or	r4,r6,r4
    a114:	200c943a 	slli	r6,r4,16
    a118:	218cb03a 	or	r6,r4,r6
    a11c:	010003c4 	movi	r4,15
    a120:	21c0182e 	bgeu	r4,r7,a184 <memset+0xc8>
    a124:	3b3ffc04 	addi	r12,r7,-16
    a128:	6018d13a 	srli	r12,r12,4
    a12c:	1a000104 	addi	r8,r3,4
    a130:	1ac00204 	addi	r11,r3,8
    a134:	6008913a 	slli	r4,r12,4
    a138:	1a800304 	addi	r10,r3,12
    a13c:	1813883a 	mov	r9,r3
    a140:	21000504 	addi	r4,r4,20
    a144:	1909883a 	add	r4,r3,r4
    a148:	49800015 	stw	r6,0(r9)
    a14c:	41800015 	stw	r6,0(r8)
    a150:	59800015 	stw	r6,0(r11)
    a154:	51800015 	stw	r6,0(r10)
    a158:	42000404 	addi	r8,r8,16
    a15c:	4a400404 	addi	r9,r9,16
    a160:	5ac00404 	addi	r11,r11,16
    a164:	52800404 	addi	r10,r10,16
    a168:	413ff71e 	bne	r8,r4,a148 <__ram_exceptions_end+0xfb008b00>
    a16c:	63000044 	addi	r12,r12,1
    a170:	6018913a 	slli	r12,r12,4
    a174:	39c003cc 	andi	r7,r7,15
    a178:	010000c4 	movi	r4,3
    a17c:	1b07883a 	add	r3,r3,r12
    a180:	21c00e2e 	bgeu	r4,r7,a1bc <memset+0x100>
    a184:	1813883a 	mov	r9,r3
    a188:	3811883a 	mov	r8,r7
    a18c:	010000c4 	movi	r4,3
    a190:	49800015 	stw	r6,0(r9)
    a194:	423fff04 	addi	r8,r8,-4
    a198:	4a400104 	addi	r9,r9,4
    a19c:	223ffc36 	bltu	r4,r8,a190 <__ram_exceptions_end+0xfb008b48>
    a1a0:	393fff04 	addi	r4,r7,-4
    a1a4:	2008d0ba 	srli	r4,r4,2
    a1a8:	39c000cc 	andi	r7,r7,3
    a1ac:	21000044 	addi	r4,r4,1
    a1b0:	2109883a 	add	r4,r4,r4
    a1b4:	2109883a 	add	r4,r4,r4
    a1b8:	1907883a 	add	r3,r3,r4
    a1bc:	38000526 	beq	r7,zero,a1d4 <memset+0x118>
    a1c0:	19cf883a 	add	r7,r3,r7
    a1c4:	19400005 	stb	r5,0(r3)
    a1c8:	18c00044 	addi	r3,r3,1
    a1cc:	38fffd1e 	bne	r7,r3,a1c4 <__ram_exceptions_end+0xfb008b7c>
    a1d0:	f800283a 	ret
    a1d4:	f800283a 	ret
    a1d8:	2007883a 	mov	r3,r4
    a1dc:	300f883a 	mov	r7,r6
    a1e0:	003fc706 	br	a100 <__ram_exceptions_end+0xfb008ab8>

0000a1e4 <_puts_r>:
    a1e4:	defff604 	addi	sp,sp,-40
    a1e8:	dc000715 	stw	r16,28(sp)
    a1ec:	2021883a 	mov	r16,r4
    a1f0:	2809883a 	mov	r4,r5
    a1f4:	dc400815 	stw	r17,32(sp)
    a1f8:	dfc00915 	stw	ra,36(sp)
    a1fc:	2823883a 	mov	r17,r5
    a200:	000a2b80 	call	a2b8 <strlen>
    a204:	10c00044 	addi	r3,r2,1
    a208:	d8800115 	stw	r2,4(sp)
    a20c:	00800074 	movhi	r2,1
    a210:	108c6604 	addi	r2,r2,12696
    a214:	d8800215 	stw	r2,8(sp)
    a218:	00800044 	movi	r2,1
    a21c:	d8800315 	stw	r2,12(sp)
    a220:	00800084 	movi	r2,2
    a224:	dc400015 	stw	r17,0(sp)
    a228:	d8c00615 	stw	r3,24(sp)
    a22c:	dec00415 	stw	sp,16(sp)
    a230:	d8800515 	stw	r2,20(sp)
    a234:	80000226 	beq	r16,zero,a240 <_puts_r+0x5c>
    a238:	80800e17 	ldw	r2,56(r16)
    a23c:	10001426 	beq	r2,zero,a290 <_puts_r+0xac>
    a240:	81400217 	ldw	r5,8(r16)
    a244:	2880030b 	ldhu	r2,12(r5)
    a248:	10c8000c 	andi	r3,r2,8192
    a24c:	1800061e 	bne	r3,zero,a268 <_puts_r+0x84>
    a250:	29001917 	ldw	r4,100(r5)
    a254:	00f7ffc4 	movi	r3,-8193
    a258:	10880014 	ori	r2,r2,8192
    a25c:	20c6703a 	and	r3,r4,r3
    a260:	2880030d 	sth	r2,12(r5)
    a264:	28c01915 	stw	r3,100(r5)
    a268:	d9800404 	addi	r6,sp,16
    a26c:	8009883a 	mov	r4,r16
    a270:	000a6f00 	call	a6f0 <__sfvwrite_r>
    a274:	1000091e 	bne	r2,zero,a29c <_puts_r+0xb8>
    a278:	00800284 	movi	r2,10
    a27c:	dfc00917 	ldw	ra,36(sp)
    a280:	dc400817 	ldw	r17,32(sp)
    a284:	dc000717 	ldw	r16,28(sp)
    a288:	dec00a04 	addi	sp,sp,40
    a28c:	f800283a 	ret
    a290:	8009883a 	mov	r4,r16
    a294:	000a6a00 	call	a6a0 <__sinit>
    a298:	003fe906 	br	a240 <__ram_exceptions_end+0xfb008bf8>
    a29c:	00bfffc4 	movi	r2,-1
    a2a0:	003ff606 	br	a27c <__ram_exceptions_end+0xfb008c34>

0000a2a4 <puts>:
    a2a4:	00800074 	movhi	r2,1
    a2a8:	10934a04 	addi	r2,r2,19752
    a2ac:	200b883a 	mov	r5,r4
    a2b0:	11000017 	ldw	r4,0(r2)
    a2b4:	000a1e41 	jmpi	a1e4 <_puts_r>

0000a2b8 <strlen>:
    a2b8:	208000cc 	andi	r2,r4,3
    a2bc:	10002026 	beq	r2,zero,a340 <strlen+0x88>
    a2c0:	20800007 	ldb	r2,0(r4)
    a2c4:	10002026 	beq	r2,zero,a348 <strlen+0x90>
    a2c8:	2005883a 	mov	r2,r4
    a2cc:	00000206 	br	a2d8 <strlen+0x20>
    a2d0:	10c00007 	ldb	r3,0(r2)
    a2d4:	18001826 	beq	r3,zero,a338 <strlen+0x80>
    a2d8:	10800044 	addi	r2,r2,1
    a2dc:	10c000cc 	andi	r3,r2,3
    a2e0:	183ffb1e 	bne	r3,zero,a2d0 <__ram_exceptions_end+0xfb008c88>
    a2e4:	10c00017 	ldw	r3,0(r2)
    a2e8:	01ffbff4 	movhi	r7,65279
    a2ec:	39ffbfc4 	addi	r7,r7,-257
    a2f0:	00ca303a 	nor	r5,zero,r3
    a2f4:	01a02074 	movhi	r6,32897
    a2f8:	19c7883a 	add	r3,r3,r7
    a2fc:	31a02004 	addi	r6,r6,-32640
    a300:	1946703a 	and	r3,r3,r5
    a304:	1986703a 	and	r3,r3,r6
    a308:	1800091e 	bne	r3,zero,a330 <strlen+0x78>
    a30c:	10800104 	addi	r2,r2,4
    a310:	10c00017 	ldw	r3,0(r2)
    a314:	19cb883a 	add	r5,r3,r7
    a318:	00c6303a 	nor	r3,zero,r3
    a31c:	28c6703a 	and	r3,r5,r3
    a320:	1986703a 	and	r3,r3,r6
    a324:	183ff926 	beq	r3,zero,a30c <__ram_exceptions_end+0xfb008cc4>
    a328:	00000106 	br	a330 <strlen+0x78>
    a32c:	10800044 	addi	r2,r2,1
    a330:	10c00007 	ldb	r3,0(r2)
    a334:	183ffd1e 	bne	r3,zero,a32c <__ram_exceptions_end+0xfb008ce4>
    a338:	1105c83a 	sub	r2,r2,r4
    a33c:	f800283a 	ret
    a340:	2005883a 	mov	r2,r4
    a344:	003fe706 	br	a2e4 <__ram_exceptions_end+0xfb008c9c>
    a348:	0005883a 	mov	r2,zero
    a34c:	f800283a 	ret

0000a350 <__fp_unlock>:
    a350:	0005883a 	mov	r2,zero
    a354:	f800283a 	ret

0000a358 <_cleanup_r>:
    a358:	01400074 	movhi	r5,1
    a35c:	29701f04 	addi	r5,r5,-16260
    a360:	000ac701 	jmpi	ac70 <_fwalk_reent>

0000a364 <__sinit.part.1>:
    a364:	defff704 	addi	sp,sp,-36
    a368:	00c00074 	movhi	r3,1
    a36c:	dfc00815 	stw	ra,32(sp)
    a370:	ddc00715 	stw	r23,28(sp)
    a374:	dd800615 	stw	r22,24(sp)
    a378:	dd400515 	stw	r21,20(sp)
    a37c:	dd000415 	stw	r20,16(sp)
    a380:	dcc00315 	stw	r19,12(sp)
    a384:	dc800215 	stw	r18,8(sp)
    a388:	dc400115 	stw	r17,4(sp)
    a38c:	dc000015 	stw	r16,0(sp)
    a390:	18e8d604 	addi	r3,r3,-23720
    a394:	24000117 	ldw	r16,4(r4)
    a398:	20c00f15 	stw	r3,60(r4)
    a39c:	2080bb04 	addi	r2,r4,748
    a3a0:	00c000c4 	movi	r3,3
    a3a4:	20c0b915 	stw	r3,740(r4)
    a3a8:	2080ba15 	stw	r2,744(r4)
    a3ac:	2000b815 	stw	zero,736(r4)
    a3b0:	05c00204 	movi	r23,8
    a3b4:	00800104 	movi	r2,4
    a3b8:	2025883a 	mov	r18,r4
    a3bc:	b80d883a 	mov	r6,r23
    a3c0:	81001704 	addi	r4,r16,92
    a3c4:	000b883a 	mov	r5,zero
    a3c8:	80000015 	stw	zero,0(r16)
    a3cc:	80000115 	stw	zero,4(r16)
    a3d0:	80000215 	stw	zero,8(r16)
    a3d4:	8080030d 	sth	r2,12(r16)
    a3d8:	80001915 	stw	zero,100(r16)
    a3dc:	8000038d 	sth	zero,14(r16)
    a3e0:	80000415 	stw	zero,16(r16)
    a3e4:	80000515 	stw	zero,20(r16)
    a3e8:	80000615 	stw	zero,24(r16)
    a3ec:	000a0bc0 	call	a0bc <memset>
    a3f0:	05800074 	movhi	r22,1
    a3f4:	94400217 	ldw	r17,8(r18)
    a3f8:	05400074 	movhi	r21,1
    a3fc:	05000074 	movhi	r20,1
    a400:	04c00074 	movhi	r19,1
    a404:	b5af4e04 	addi	r22,r22,-17096
    a408:	ad6f6504 	addi	r21,r21,-17004
    a40c:	a52f8404 	addi	r20,r20,-16880
    a410:	9cef9b04 	addi	r19,r19,-16788
    a414:	85800815 	stw	r22,32(r16)
    a418:	85400915 	stw	r21,36(r16)
    a41c:	85000a15 	stw	r20,40(r16)
    a420:	84c00b15 	stw	r19,44(r16)
    a424:	84000715 	stw	r16,28(r16)
    a428:	00800284 	movi	r2,10
    a42c:	8880030d 	sth	r2,12(r17)
    a430:	00800044 	movi	r2,1
    a434:	b80d883a 	mov	r6,r23
    a438:	89001704 	addi	r4,r17,92
    a43c:	000b883a 	mov	r5,zero
    a440:	88000015 	stw	zero,0(r17)
    a444:	88000115 	stw	zero,4(r17)
    a448:	88000215 	stw	zero,8(r17)
    a44c:	88001915 	stw	zero,100(r17)
    a450:	8880038d 	sth	r2,14(r17)
    a454:	88000415 	stw	zero,16(r17)
    a458:	88000515 	stw	zero,20(r17)
    a45c:	88000615 	stw	zero,24(r17)
    a460:	000a0bc0 	call	a0bc <memset>
    a464:	94000317 	ldw	r16,12(r18)
    a468:	00800484 	movi	r2,18
    a46c:	8c400715 	stw	r17,28(r17)
    a470:	8d800815 	stw	r22,32(r17)
    a474:	8d400915 	stw	r21,36(r17)
    a478:	8d000a15 	stw	r20,40(r17)
    a47c:	8cc00b15 	stw	r19,44(r17)
    a480:	8080030d 	sth	r2,12(r16)
    a484:	00800084 	movi	r2,2
    a488:	80000015 	stw	zero,0(r16)
    a48c:	80000115 	stw	zero,4(r16)
    a490:	80000215 	stw	zero,8(r16)
    a494:	80001915 	stw	zero,100(r16)
    a498:	8080038d 	sth	r2,14(r16)
    a49c:	80000415 	stw	zero,16(r16)
    a4a0:	80000515 	stw	zero,20(r16)
    a4a4:	80000615 	stw	zero,24(r16)
    a4a8:	b80d883a 	mov	r6,r23
    a4ac:	000b883a 	mov	r5,zero
    a4b0:	81001704 	addi	r4,r16,92
    a4b4:	000a0bc0 	call	a0bc <memset>
    a4b8:	00800044 	movi	r2,1
    a4bc:	84000715 	stw	r16,28(r16)
    a4c0:	85800815 	stw	r22,32(r16)
    a4c4:	85400915 	stw	r21,36(r16)
    a4c8:	85000a15 	stw	r20,40(r16)
    a4cc:	84c00b15 	stw	r19,44(r16)
    a4d0:	90800e15 	stw	r2,56(r18)
    a4d4:	dfc00817 	ldw	ra,32(sp)
    a4d8:	ddc00717 	ldw	r23,28(sp)
    a4dc:	dd800617 	ldw	r22,24(sp)
    a4e0:	dd400517 	ldw	r21,20(sp)
    a4e4:	dd000417 	ldw	r20,16(sp)
    a4e8:	dcc00317 	ldw	r19,12(sp)
    a4ec:	dc800217 	ldw	r18,8(sp)
    a4f0:	dc400117 	ldw	r17,4(sp)
    a4f4:	dc000017 	ldw	r16,0(sp)
    a4f8:	dec00904 	addi	sp,sp,36
    a4fc:	f800283a 	ret

0000a500 <__fp_lock>:
    a500:	0005883a 	mov	r2,zero
    a504:	f800283a 	ret

0000a508 <__sfmoreglue>:
    a508:	defffc04 	addi	sp,sp,-16
    a50c:	dc400115 	stw	r17,4(sp)
    a510:	2c7fffc4 	addi	r17,r5,-1
    a514:	8c401a24 	muli	r17,r17,104
    a518:	dc800215 	stw	r18,8(sp)
    a51c:	2825883a 	mov	r18,r5
    a520:	89401d04 	addi	r5,r17,116
    a524:	dc000015 	stw	r16,0(sp)
    a528:	dfc00315 	stw	ra,12(sp)
    a52c:	000ad340 	call	ad34 <_malloc_r>
    a530:	1021883a 	mov	r16,r2
    a534:	10000726 	beq	r2,zero,a554 <__sfmoreglue+0x4c>
    a538:	11000304 	addi	r4,r2,12
    a53c:	10000015 	stw	zero,0(r2)
    a540:	14800115 	stw	r18,4(r2)
    a544:	11000215 	stw	r4,8(r2)
    a548:	89801a04 	addi	r6,r17,104
    a54c:	000b883a 	mov	r5,zero
    a550:	000a0bc0 	call	a0bc <memset>
    a554:	8005883a 	mov	r2,r16
    a558:	dfc00317 	ldw	ra,12(sp)
    a55c:	dc800217 	ldw	r18,8(sp)
    a560:	dc400117 	ldw	r17,4(sp)
    a564:	dc000017 	ldw	r16,0(sp)
    a568:	dec00404 	addi	sp,sp,16
    a56c:	f800283a 	ret

0000a570 <__sfp>:
    a570:	defffb04 	addi	sp,sp,-20
    a574:	dc000015 	stw	r16,0(sp)
    a578:	04000074 	movhi	r16,1
    a57c:	84134904 	addi	r16,r16,19748
    a580:	dcc00315 	stw	r19,12(sp)
    a584:	2027883a 	mov	r19,r4
    a588:	81000017 	ldw	r4,0(r16)
    a58c:	dfc00415 	stw	ra,16(sp)
    a590:	dc800215 	stw	r18,8(sp)
    a594:	20800e17 	ldw	r2,56(r4)
    a598:	dc400115 	stw	r17,4(sp)
    a59c:	1000021e 	bne	r2,zero,a5a8 <__sfp+0x38>
    a5a0:	000a3640 	call	a364 <__sinit.part.1>
    a5a4:	81000017 	ldw	r4,0(r16)
    a5a8:	2480b804 	addi	r18,r4,736
    a5ac:	047fffc4 	movi	r17,-1
    a5b0:	91000117 	ldw	r4,4(r18)
    a5b4:	94000217 	ldw	r16,8(r18)
    a5b8:	213fffc4 	addi	r4,r4,-1
    a5bc:	20000a16 	blt	r4,zero,a5e8 <__sfp+0x78>
    a5c0:	8080030f 	ldh	r2,12(r16)
    a5c4:	10000c26 	beq	r2,zero,a5f8 <__sfp+0x88>
    a5c8:	80c01d04 	addi	r3,r16,116
    a5cc:	00000206 	br	a5d8 <__sfp+0x68>
    a5d0:	18bfe60f 	ldh	r2,-104(r3)
    a5d4:	10000826 	beq	r2,zero,a5f8 <__sfp+0x88>
    a5d8:	213fffc4 	addi	r4,r4,-1
    a5dc:	1c3ffd04 	addi	r16,r3,-12
    a5e0:	18c01a04 	addi	r3,r3,104
    a5e4:	247ffa1e 	bne	r4,r17,a5d0 <__ram_exceptions_end+0xfb008f88>
    a5e8:	90800017 	ldw	r2,0(r18)
    a5ec:	10001d26 	beq	r2,zero,a664 <__sfp+0xf4>
    a5f0:	1025883a 	mov	r18,r2
    a5f4:	003fee06 	br	a5b0 <__ram_exceptions_end+0xfb008f68>
    a5f8:	00bfffc4 	movi	r2,-1
    a5fc:	8080038d 	sth	r2,14(r16)
    a600:	00800044 	movi	r2,1
    a604:	8080030d 	sth	r2,12(r16)
    a608:	80001915 	stw	zero,100(r16)
    a60c:	80000015 	stw	zero,0(r16)
    a610:	80000215 	stw	zero,8(r16)
    a614:	80000115 	stw	zero,4(r16)
    a618:	80000415 	stw	zero,16(r16)
    a61c:	80000515 	stw	zero,20(r16)
    a620:	80000615 	stw	zero,24(r16)
    a624:	01800204 	movi	r6,8
    a628:	000b883a 	mov	r5,zero
    a62c:	81001704 	addi	r4,r16,92
    a630:	000a0bc0 	call	a0bc <memset>
    a634:	8005883a 	mov	r2,r16
    a638:	80000c15 	stw	zero,48(r16)
    a63c:	80000d15 	stw	zero,52(r16)
    a640:	80001115 	stw	zero,68(r16)
    a644:	80001215 	stw	zero,72(r16)
    a648:	dfc00417 	ldw	ra,16(sp)
    a64c:	dcc00317 	ldw	r19,12(sp)
    a650:	dc800217 	ldw	r18,8(sp)
    a654:	dc400117 	ldw	r17,4(sp)
    a658:	dc000017 	ldw	r16,0(sp)
    a65c:	dec00504 	addi	sp,sp,20
    a660:	f800283a 	ret
    a664:	01400104 	movi	r5,4
    a668:	9809883a 	mov	r4,r19
    a66c:	000a5080 	call	a508 <__sfmoreglue>
    a670:	90800015 	stw	r2,0(r18)
    a674:	103fde1e 	bne	r2,zero,a5f0 <__ram_exceptions_end+0xfb008fa8>
    a678:	00800304 	movi	r2,12
    a67c:	98800015 	stw	r2,0(r19)
    a680:	0005883a 	mov	r2,zero
    a684:	003ff006 	br	a648 <__ram_exceptions_end+0xfb009000>

0000a688 <_cleanup>:
    a688:	00800074 	movhi	r2,1
    a68c:	10934904 	addi	r2,r2,19748
    a690:	11000017 	ldw	r4,0(r2)
    a694:	01400074 	movhi	r5,1
    a698:	29701f04 	addi	r5,r5,-16260
    a69c:	000ac701 	jmpi	ac70 <_fwalk_reent>

0000a6a0 <__sinit>:
    a6a0:	20800e17 	ldw	r2,56(r4)
    a6a4:	10000126 	beq	r2,zero,a6ac <__sinit+0xc>
    a6a8:	f800283a 	ret
    a6ac:	000a3641 	jmpi	a364 <__sinit.part.1>

0000a6b0 <__sfp_lock_acquire>:
    a6b0:	f800283a 	ret

0000a6b4 <__sfp_lock_release>:
    a6b4:	f800283a 	ret

0000a6b8 <__sinit_lock_acquire>:
    a6b8:	f800283a 	ret

0000a6bc <__sinit_lock_release>:
    a6bc:	f800283a 	ret

0000a6c0 <__fp_lock_all>:
    a6c0:	00800074 	movhi	r2,1
    a6c4:	10934a04 	addi	r2,r2,19752
    a6c8:	11000017 	ldw	r4,0(r2)
    a6cc:	01400074 	movhi	r5,1
    a6d0:	29694004 	addi	r5,r5,-23296
    a6d4:	000abac1 	jmpi	abac <_fwalk>

0000a6d8 <__fp_unlock_all>:
    a6d8:	00800074 	movhi	r2,1
    a6dc:	10934a04 	addi	r2,r2,19752
    a6e0:	11000017 	ldw	r4,0(r2)
    a6e4:	01400074 	movhi	r5,1
    a6e8:	2968d404 	addi	r5,r5,-23728
    a6ec:	000abac1 	jmpi	abac <_fwalk>

0000a6f0 <__sfvwrite_r>:
    a6f0:	30800217 	ldw	r2,8(r6)
    a6f4:	10006726 	beq	r2,zero,a894 <__sfvwrite_r+0x1a4>
    a6f8:	28c0030b 	ldhu	r3,12(r5)
    a6fc:	defff404 	addi	sp,sp,-48
    a700:	dd400715 	stw	r21,28(sp)
    a704:	dd000615 	stw	r20,24(sp)
    a708:	dc000215 	stw	r16,8(sp)
    a70c:	dfc00b15 	stw	ra,44(sp)
    a710:	df000a15 	stw	fp,40(sp)
    a714:	ddc00915 	stw	r23,36(sp)
    a718:	dd800815 	stw	r22,32(sp)
    a71c:	dcc00515 	stw	r19,20(sp)
    a720:	dc800415 	stw	r18,16(sp)
    a724:	dc400315 	stw	r17,12(sp)
    a728:	1880020c 	andi	r2,r3,8
    a72c:	2821883a 	mov	r16,r5
    a730:	202b883a 	mov	r21,r4
    a734:	3029883a 	mov	r20,r6
    a738:	10002726 	beq	r2,zero,a7d8 <__sfvwrite_r+0xe8>
    a73c:	28800417 	ldw	r2,16(r5)
    a740:	10002526 	beq	r2,zero,a7d8 <__sfvwrite_r+0xe8>
    a744:	1880008c 	andi	r2,r3,2
    a748:	a4400017 	ldw	r17,0(r20)
    a74c:	10002a26 	beq	r2,zero,a7f8 <__sfvwrite_r+0x108>
    a750:	05a00034 	movhi	r22,32768
    a754:	0027883a 	mov	r19,zero
    a758:	0025883a 	mov	r18,zero
    a75c:	b5bf0004 	addi	r22,r22,-1024
    a760:	980d883a 	mov	r6,r19
    a764:	a809883a 	mov	r4,r21
    a768:	90004626 	beq	r18,zero,a884 <__sfvwrite_r+0x194>
    a76c:	900f883a 	mov	r7,r18
    a770:	b480022e 	bgeu	r22,r18,a77c <__sfvwrite_r+0x8c>
    a774:	01e00034 	movhi	r7,32768
    a778:	39ff0004 	addi	r7,r7,-1024
    a77c:	80800917 	ldw	r2,36(r16)
    a780:	81400717 	ldw	r5,28(r16)
    a784:	103ee83a 	callr	r2
    a788:	0080570e 	bge	zero,r2,a8e8 <__sfvwrite_r+0x1f8>
    a78c:	a0c00217 	ldw	r3,8(r20)
    a790:	98a7883a 	add	r19,r19,r2
    a794:	90a5c83a 	sub	r18,r18,r2
    a798:	1885c83a 	sub	r2,r3,r2
    a79c:	a0800215 	stw	r2,8(r20)
    a7a0:	103fef1e 	bne	r2,zero,a760 <__ram_exceptions_end+0xfb009118>
    a7a4:	0005883a 	mov	r2,zero
    a7a8:	dfc00b17 	ldw	ra,44(sp)
    a7ac:	df000a17 	ldw	fp,40(sp)
    a7b0:	ddc00917 	ldw	r23,36(sp)
    a7b4:	dd800817 	ldw	r22,32(sp)
    a7b8:	dd400717 	ldw	r21,28(sp)
    a7bc:	dd000617 	ldw	r20,24(sp)
    a7c0:	dcc00517 	ldw	r19,20(sp)
    a7c4:	dc800417 	ldw	r18,16(sp)
    a7c8:	dc400317 	ldw	r17,12(sp)
    a7cc:	dc000217 	ldw	r16,8(sp)
    a7d0:	dec00c04 	addi	sp,sp,48
    a7d4:	f800283a 	ret
    a7d8:	800b883a 	mov	r5,r16
    a7dc:	a809883a 	mov	r4,r21
    a7e0:	000bed40 	call	bed4 <__swsetup_r>
    a7e4:	1000eb1e 	bne	r2,zero,ab94 <__sfvwrite_r+0x4a4>
    a7e8:	80c0030b 	ldhu	r3,12(r16)
    a7ec:	a4400017 	ldw	r17,0(r20)
    a7f0:	1880008c 	andi	r2,r3,2
    a7f4:	103fd61e 	bne	r2,zero,a750 <__ram_exceptions_end+0xfb009108>
    a7f8:	1880004c 	andi	r2,r3,1
    a7fc:	10003f1e 	bne	r2,zero,a8fc <__sfvwrite_r+0x20c>
    a800:	0039883a 	mov	fp,zero
    a804:	0025883a 	mov	r18,zero
    a808:	90001a26 	beq	r18,zero,a874 <__sfvwrite_r+0x184>
    a80c:	1880800c 	andi	r2,r3,512
    a810:	84c00217 	ldw	r19,8(r16)
    a814:	10002126 	beq	r2,zero,a89c <__sfvwrite_r+0x1ac>
    a818:	982f883a 	mov	r23,r19
    a81c:	94c09336 	bltu	r18,r19,aa6c <__sfvwrite_r+0x37c>
    a820:	1881200c 	andi	r2,r3,1152
    a824:	10009e1e 	bne	r2,zero,aaa0 <__sfvwrite_r+0x3b0>
    a828:	81000017 	ldw	r4,0(r16)
    a82c:	b80d883a 	mov	r6,r23
    a830:	e00b883a 	mov	r5,fp
    a834:	000b6240 	call	b624 <memmove>
    a838:	80c00217 	ldw	r3,8(r16)
    a83c:	81000017 	ldw	r4,0(r16)
    a840:	9005883a 	mov	r2,r18
    a844:	1ce7c83a 	sub	r19,r3,r19
    a848:	25cf883a 	add	r7,r4,r23
    a84c:	84c00215 	stw	r19,8(r16)
    a850:	81c00015 	stw	r7,0(r16)
    a854:	a0c00217 	ldw	r3,8(r20)
    a858:	e0b9883a 	add	fp,fp,r2
    a85c:	90a5c83a 	sub	r18,r18,r2
    a860:	18a7c83a 	sub	r19,r3,r2
    a864:	a4c00215 	stw	r19,8(r20)
    a868:	983fce26 	beq	r19,zero,a7a4 <__ram_exceptions_end+0xfb00915c>
    a86c:	80c0030b 	ldhu	r3,12(r16)
    a870:	903fe61e 	bne	r18,zero,a80c <__ram_exceptions_end+0xfb0091c4>
    a874:	8f000017 	ldw	fp,0(r17)
    a878:	8c800117 	ldw	r18,4(r17)
    a87c:	8c400204 	addi	r17,r17,8
    a880:	003fe106 	br	a808 <__ram_exceptions_end+0xfb0091c0>
    a884:	8cc00017 	ldw	r19,0(r17)
    a888:	8c800117 	ldw	r18,4(r17)
    a88c:	8c400204 	addi	r17,r17,8
    a890:	003fb306 	br	a760 <__ram_exceptions_end+0xfb009118>
    a894:	0005883a 	mov	r2,zero
    a898:	f800283a 	ret
    a89c:	81000017 	ldw	r4,0(r16)
    a8a0:	80800417 	ldw	r2,16(r16)
    a8a4:	11005736 	bltu	r2,r4,aa04 <__sfvwrite_r+0x314>
    a8a8:	85c00517 	ldw	r23,20(r16)
    a8ac:	95c05536 	bltu	r18,r23,aa04 <__sfvwrite_r+0x314>
    a8b0:	00a00034 	movhi	r2,32768
    a8b4:	10bfffc4 	addi	r2,r2,-1
    a8b8:	9009883a 	mov	r4,r18
    a8bc:	1480012e 	bgeu	r2,r18,a8c4 <__sfvwrite_r+0x1d4>
    a8c0:	1009883a 	mov	r4,r2
    a8c4:	b80b883a 	mov	r5,r23
    a8c8:	00061d00 	call	61d0 <__divsi3>
    a8cc:	15cf383a 	mul	r7,r2,r23
    a8d0:	81400717 	ldw	r5,28(r16)
    a8d4:	80800917 	ldw	r2,36(r16)
    a8d8:	e00d883a 	mov	r6,fp
    a8dc:	a809883a 	mov	r4,r21
    a8e0:	103ee83a 	callr	r2
    a8e4:	00bfdb16 	blt	zero,r2,a854 <__ram_exceptions_end+0xfb00920c>
    a8e8:	8080030b 	ldhu	r2,12(r16)
    a8ec:	10801014 	ori	r2,r2,64
    a8f0:	8080030d 	sth	r2,12(r16)
    a8f4:	00bfffc4 	movi	r2,-1
    a8f8:	003fab06 	br	a7a8 <__ram_exceptions_end+0xfb009160>
    a8fc:	0027883a 	mov	r19,zero
    a900:	0011883a 	mov	r8,zero
    a904:	0039883a 	mov	fp,zero
    a908:	0025883a 	mov	r18,zero
    a90c:	90001f26 	beq	r18,zero,a98c <__sfvwrite_r+0x29c>
    a910:	40005a26 	beq	r8,zero,aa7c <__sfvwrite_r+0x38c>
    a914:	982d883a 	mov	r22,r19
    a918:	94c0012e 	bgeu	r18,r19,a920 <__sfvwrite_r+0x230>
    a91c:	902d883a 	mov	r22,r18
    a920:	81000017 	ldw	r4,0(r16)
    a924:	80800417 	ldw	r2,16(r16)
    a928:	b02f883a 	mov	r23,r22
    a92c:	81c00517 	ldw	r7,20(r16)
    a930:	1100032e 	bgeu	r2,r4,a940 <__sfvwrite_r+0x250>
    a934:	80c00217 	ldw	r3,8(r16)
    a938:	38c7883a 	add	r3,r7,r3
    a93c:	1d801816 	blt	r3,r22,a9a0 <__sfvwrite_r+0x2b0>
    a940:	b1c03e16 	blt	r22,r7,aa3c <__sfvwrite_r+0x34c>
    a944:	80800917 	ldw	r2,36(r16)
    a948:	81400717 	ldw	r5,28(r16)
    a94c:	e00d883a 	mov	r6,fp
    a950:	da000115 	stw	r8,4(sp)
    a954:	a809883a 	mov	r4,r21
    a958:	103ee83a 	callr	r2
    a95c:	102f883a 	mov	r23,r2
    a960:	da000117 	ldw	r8,4(sp)
    a964:	00bfe00e 	bge	zero,r2,a8e8 <__ram_exceptions_end+0xfb0092a0>
    a968:	9de7c83a 	sub	r19,r19,r23
    a96c:	98001f26 	beq	r19,zero,a9ec <__sfvwrite_r+0x2fc>
    a970:	a0800217 	ldw	r2,8(r20)
    a974:	e5f9883a 	add	fp,fp,r23
    a978:	95e5c83a 	sub	r18,r18,r23
    a97c:	15efc83a 	sub	r23,r2,r23
    a980:	a5c00215 	stw	r23,8(r20)
    a984:	b83f8726 	beq	r23,zero,a7a4 <__ram_exceptions_end+0xfb00915c>
    a988:	903fe11e 	bne	r18,zero,a910 <__ram_exceptions_end+0xfb0092c8>
    a98c:	8f000017 	ldw	fp,0(r17)
    a990:	8c800117 	ldw	r18,4(r17)
    a994:	0011883a 	mov	r8,zero
    a998:	8c400204 	addi	r17,r17,8
    a99c:	003fdb06 	br	a90c <__ram_exceptions_end+0xfb0092c4>
    a9a0:	180d883a 	mov	r6,r3
    a9a4:	e00b883a 	mov	r5,fp
    a9a8:	da000115 	stw	r8,4(sp)
    a9ac:	d8c00015 	stw	r3,0(sp)
    a9b0:	000b6240 	call	b624 <memmove>
    a9b4:	d8c00017 	ldw	r3,0(sp)
    a9b8:	80800017 	ldw	r2,0(r16)
    a9bc:	800b883a 	mov	r5,r16
    a9c0:	a809883a 	mov	r4,r21
    a9c4:	10c5883a 	add	r2,r2,r3
    a9c8:	80800015 	stw	r2,0(r16)
    a9cc:	d8c00015 	stw	r3,0(sp)
    a9d0:	000c39c0 	call	c39c <_fflush_r>
    a9d4:	d8c00017 	ldw	r3,0(sp)
    a9d8:	da000117 	ldw	r8,4(sp)
    a9dc:	103fc21e 	bne	r2,zero,a8e8 <__ram_exceptions_end+0xfb0092a0>
    a9e0:	182f883a 	mov	r23,r3
    a9e4:	9de7c83a 	sub	r19,r19,r23
    a9e8:	983fe11e 	bne	r19,zero,a970 <__ram_exceptions_end+0xfb009328>
    a9ec:	800b883a 	mov	r5,r16
    a9f0:	a809883a 	mov	r4,r21
    a9f4:	000c39c0 	call	c39c <_fflush_r>
    a9f8:	103fbb1e 	bne	r2,zero,a8e8 <__ram_exceptions_end+0xfb0092a0>
    a9fc:	0011883a 	mov	r8,zero
    aa00:	003fdb06 	br	a970 <__ram_exceptions_end+0xfb009328>
    aa04:	94c0012e 	bgeu	r18,r19,aa0c <__sfvwrite_r+0x31c>
    aa08:	9027883a 	mov	r19,r18
    aa0c:	980d883a 	mov	r6,r19
    aa10:	e00b883a 	mov	r5,fp
    aa14:	000b6240 	call	b624 <memmove>
    aa18:	80800217 	ldw	r2,8(r16)
    aa1c:	80c00017 	ldw	r3,0(r16)
    aa20:	14c5c83a 	sub	r2,r2,r19
    aa24:	1cc7883a 	add	r3,r3,r19
    aa28:	80800215 	stw	r2,8(r16)
    aa2c:	80c00015 	stw	r3,0(r16)
    aa30:	10004326 	beq	r2,zero,ab40 <__sfvwrite_r+0x450>
    aa34:	9805883a 	mov	r2,r19
    aa38:	003f8606 	br	a854 <__ram_exceptions_end+0xfb00920c>
    aa3c:	b00d883a 	mov	r6,r22
    aa40:	e00b883a 	mov	r5,fp
    aa44:	da000115 	stw	r8,4(sp)
    aa48:	000b6240 	call	b624 <memmove>
    aa4c:	80800217 	ldw	r2,8(r16)
    aa50:	80c00017 	ldw	r3,0(r16)
    aa54:	da000117 	ldw	r8,4(sp)
    aa58:	1585c83a 	sub	r2,r2,r22
    aa5c:	1dad883a 	add	r22,r3,r22
    aa60:	80800215 	stw	r2,8(r16)
    aa64:	85800015 	stw	r22,0(r16)
    aa68:	003fbf06 	br	a968 <__ram_exceptions_end+0xfb009320>
    aa6c:	81000017 	ldw	r4,0(r16)
    aa70:	9027883a 	mov	r19,r18
    aa74:	902f883a 	mov	r23,r18
    aa78:	003f6c06 	br	a82c <__ram_exceptions_end+0xfb0091e4>
    aa7c:	900d883a 	mov	r6,r18
    aa80:	01400284 	movi	r5,10
    aa84:	e009883a 	mov	r4,fp
    aa88:	000b5400 	call	b540 <memchr>
    aa8c:	10003e26 	beq	r2,zero,ab88 <__sfvwrite_r+0x498>
    aa90:	10800044 	addi	r2,r2,1
    aa94:	1727c83a 	sub	r19,r2,fp
    aa98:	02000044 	movi	r8,1
    aa9c:	003f9d06 	br	a914 <__ram_exceptions_end+0xfb0092cc>
    aaa0:	80800517 	ldw	r2,20(r16)
    aaa4:	81400417 	ldw	r5,16(r16)
    aaa8:	81c00017 	ldw	r7,0(r16)
    aaac:	10a7883a 	add	r19,r2,r2
    aab0:	9885883a 	add	r2,r19,r2
    aab4:	1026d7fa 	srli	r19,r2,31
    aab8:	396dc83a 	sub	r22,r7,r5
    aabc:	b1000044 	addi	r4,r22,1
    aac0:	9885883a 	add	r2,r19,r2
    aac4:	1027d07a 	srai	r19,r2,1
    aac8:	2485883a 	add	r2,r4,r18
    aacc:	980d883a 	mov	r6,r19
    aad0:	9880022e 	bgeu	r19,r2,aadc <__sfvwrite_r+0x3ec>
    aad4:	1027883a 	mov	r19,r2
    aad8:	100d883a 	mov	r6,r2
    aadc:	18c1000c 	andi	r3,r3,1024
    aae0:	18001c26 	beq	r3,zero,ab54 <__sfvwrite_r+0x464>
    aae4:	300b883a 	mov	r5,r6
    aae8:	a809883a 	mov	r4,r21
    aaec:	000ad340 	call	ad34 <_malloc_r>
    aaf0:	102f883a 	mov	r23,r2
    aaf4:	10002926 	beq	r2,zero,ab9c <__sfvwrite_r+0x4ac>
    aaf8:	81400417 	ldw	r5,16(r16)
    aafc:	b00d883a 	mov	r6,r22
    ab00:	1009883a 	mov	r4,r2
    ab04:	0009f740 	call	9f74 <memcpy>
    ab08:	8080030b 	ldhu	r2,12(r16)
    ab0c:	00fedfc4 	movi	r3,-1153
    ab10:	10c4703a 	and	r2,r2,r3
    ab14:	10802014 	ori	r2,r2,128
    ab18:	8080030d 	sth	r2,12(r16)
    ab1c:	bd89883a 	add	r4,r23,r22
    ab20:	9d8fc83a 	sub	r7,r19,r22
    ab24:	85c00415 	stw	r23,16(r16)
    ab28:	84c00515 	stw	r19,20(r16)
    ab2c:	81000015 	stw	r4,0(r16)
    ab30:	9027883a 	mov	r19,r18
    ab34:	81c00215 	stw	r7,8(r16)
    ab38:	902f883a 	mov	r23,r18
    ab3c:	003f3b06 	br	a82c <__ram_exceptions_end+0xfb0091e4>
    ab40:	800b883a 	mov	r5,r16
    ab44:	a809883a 	mov	r4,r21
    ab48:	000c39c0 	call	c39c <_fflush_r>
    ab4c:	103fb926 	beq	r2,zero,aa34 <__ram_exceptions_end+0xfb0093ec>
    ab50:	003f6506 	br	a8e8 <__ram_exceptions_end+0xfb0092a0>
    ab54:	a809883a 	mov	r4,r21
    ab58:	000b7800 	call	b780 <_realloc_r>
    ab5c:	102f883a 	mov	r23,r2
    ab60:	103fee1e 	bne	r2,zero,ab1c <__ram_exceptions_end+0xfb0094d4>
    ab64:	81400417 	ldw	r5,16(r16)
    ab68:	a809883a 	mov	r4,r21
    ab6c:	000c54c0 	call	c54c <_free_r>
    ab70:	8080030b 	ldhu	r2,12(r16)
    ab74:	00ffdfc4 	movi	r3,-129
    ab78:	1884703a 	and	r2,r3,r2
    ab7c:	00c00304 	movi	r3,12
    ab80:	a8c00015 	stw	r3,0(r21)
    ab84:	003f5906 	br	a8ec <__ram_exceptions_end+0xfb0092a4>
    ab88:	94c00044 	addi	r19,r18,1
    ab8c:	02000044 	movi	r8,1
    ab90:	003f6006 	br	a914 <__ram_exceptions_end+0xfb0092cc>
    ab94:	00bfffc4 	movi	r2,-1
    ab98:	003f0306 	br	a7a8 <__ram_exceptions_end+0xfb009160>
    ab9c:	00800304 	movi	r2,12
    aba0:	a8800015 	stw	r2,0(r21)
    aba4:	8080030b 	ldhu	r2,12(r16)
    aba8:	003f5006 	br	a8ec <__ram_exceptions_end+0xfb0092a4>

0000abac <_fwalk>:
    abac:	defff704 	addi	sp,sp,-36
    abb0:	dd000415 	stw	r20,16(sp)
    abb4:	dfc00815 	stw	ra,32(sp)
    abb8:	ddc00715 	stw	r23,28(sp)
    abbc:	dd800615 	stw	r22,24(sp)
    abc0:	dd400515 	stw	r21,20(sp)
    abc4:	dcc00315 	stw	r19,12(sp)
    abc8:	dc800215 	stw	r18,8(sp)
    abcc:	dc400115 	stw	r17,4(sp)
    abd0:	dc000015 	stw	r16,0(sp)
    abd4:	2500b804 	addi	r20,r4,736
    abd8:	a0002326 	beq	r20,zero,ac68 <_fwalk+0xbc>
    abdc:	282b883a 	mov	r21,r5
    abe0:	002f883a 	mov	r23,zero
    abe4:	05800044 	movi	r22,1
    abe8:	04ffffc4 	movi	r19,-1
    abec:	a4400117 	ldw	r17,4(r20)
    abf0:	a4800217 	ldw	r18,8(r20)
    abf4:	8c7fffc4 	addi	r17,r17,-1
    abf8:	88000d16 	blt	r17,zero,ac30 <_fwalk+0x84>
    abfc:	94000304 	addi	r16,r18,12
    ac00:	94800384 	addi	r18,r18,14
    ac04:	8080000b 	ldhu	r2,0(r16)
    ac08:	8c7fffc4 	addi	r17,r17,-1
    ac0c:	813ffd04 	addi	r4,r16,-12
    ac10:	b080042e 	bgeu	r22,r2,ac24 <_fwalk+0x78>
    ac14:	9080000f 	ldh	r2,0(r18)
    ac18:	14c00226 	beq	r2,r19,ac24 <_fwalk+0x78>
    ac1c:	a83ee83a 	callr	r21
    ac20:	b8aeb03a 	or	r23,r23,r2
    ac24:	84001a04 	addi	r16,r16,104
    ac28:	94801a04 	addi	r18,r18,104
    ac2c:	8cfff51e 	bne	r17,r19,ac04 <__ram_exceptions_end+0xfb0095bc>
    ac30:	a5000017 	ldw	r20,0(r20)
    ac34:	a03fed1e 	bne	r20,zero,abec <__ram_exceptions_end+0xfb0095a4>
    ac38:	b805883a 	mov	r2,r23
    ac3c:	dfc00817 	ldw	ra,32(sp)
    ac40:	ddc00717 	ldw	r23,28(sp)
    ac44:	dd800617 	ldw	r22,24(sp)
    ac48:	dd400517 	ldw	r21,20(sp)
    ac4c:	dd000417 	ldw	r20,16(sp)
    ac50:	dcc00317 	ldw	r19,12(sp)
    ac54:	dc800217 	ldw	r18,8(sp)
    ac58:	dc400117 	ldw	r17,4(sp)
    ac5c:	dc000017 	ldw	r16,0(sp)
    ac60:	dec00904 	addi	sp,sp,36
    ac64:	f800283a 	ret
    ac68:	002f883a 	mov	r23,zero
    ac6c:	003ff206 	br	ac38 <__ram_exceptions_end+0xfb0095f0>

0000ac70 <_fwalk_reent>:
    ac70:	defff704 	addi	sp,sp,-36
    ac74:	dd000415 	stw	r20,16(sp)
    ac78:	dfc00815 	stw	ra,32(sp)
    ac7c:	ddc00715 	stw	r23,28(sp)
    ac80:	dd800615 	stw	r22,24(sp)
    ac84:	dd400515 	stw	r21,20(sp)
    ac88:	dcc00315 	stw	r19,12(sp)
    ac8c:	dc800215 	stw	r18,8(sp)
    ac90:	dc400115 	stw	r17,4(sp)
    ac94:	dc000015 	stw	r16,0(sp)
    ac98:	2500b804 	addi	r20,r4,736
    ac9c:	a0002326 	beq	r20,zero,ad2c <_fwalk_reent+0xbc>
    aca0:	282b883a 	mov	r21,r5
    aca4:	2027883a 	mov	r19,r4
    aca8:	002f883a 	mov	r23,zero
    acac:	05800044 	movi	r22,1
    acb0:	04bfffc4 	movi	r18,-1
    acb4:	a4400117 	ldw	r17,4(r20)
    acb8:	a4000217 	ldw	r16,8(r20)
    acbc:	8c7fffc4 	addi	r17,r17,-1
    acc0:	88000c16 	blt	r17,zero,acf4 <_fwalk_reent+0x84>
    acc4:	84000304 	addi	r16,r16,12
    acc8:	8080000b 	ldhu	r2,0(r16)
    accc:	8c7fffc4 	addi	r17,r17,-1
    acd0:	817ffd04 	addi	r5,r16,-12
    acd4:	b080052e 	bgeu	r22,r2,acec <_fwalk_reent+0x7c>
    acd8:	8080008f 	ldh	r2,2(r16)
    acdc:	9809883a 	mov	r4,r19
    ace0:	14800226 	beq	r2,r18,acec <_fwalk_reent+0x7c>
    ace4:	a83ee83a 	callr	r21
    ace8:	b8aeb03a 	or	r23,r23,r2
    acec:	84001a04 	addi	r16,r16,104
    acf0:	8cbff51e 	bne	r17,r18,acc8 <__ram_exceptions_end+0xfb009680>
    acf4:	a5000017 	ldw	r20,0(r20)
    acf8:	a03fee1e 	bne	r20,zero,acb4 <__ram_exceptions_end+0xfb00966c>
    acfc:	b805883a 	mov	r2,r23
    ad00:	dfc00817 	ldw	ra,32(sp)
    ad04:	ddc00717 	ldw	r23,28(sp)
    ad08:	dd800617 	ldw	r22,24(sp)
    ad0c:	dd400517 	ldw	r21,20(sp)
    ad10:	dd000417 	ldw	r20,16(sp)
    ad14:	dcc00317 	ldw	r19,12(sp)
    ad18:	dc800217 	ldw	r18,8(sp)
    ad1c:	dc400117 	ldw	r17,4(sp)
    ad20:	dc000017 	ldw	r16,0(sp)
    ad24:	dec00904 	addi	sp,sp,36
    ad28:	f800283a 	ret
    ad2c:	002f883a 	mov	r23,zero
    ad30:	003ff206 	br	acfc <__ram_exceptions_end+0xfb0096b4>

0000ad34 <_malloc_r>:
    ad34:	defff504 	addi	sp,sp,-44
    ad38:	dc800315 	stw	r18,12(sp)
    ad3c:	dfc00a15 	stw	ra,40(sp)
    ad40:	df000915 	stw	fp,36(sp)
    ad44:	ddc00815 	stw	r23,32(sp)
    ad48:	dd800715 	stw	r22,28(sp)
    ad4c:	dd400615 	stw	r21,24(sp)
    ad50:	dd000515 	stw	r20,20(sp)
    ad54:	dcc00415 	stw	r19,16(sp)
    ad58:	dc400215 	stw	r17,8(sp)
    ad5c:	dc000115 	stw	r16,4(sp)
    ad60:	288002c4 	addi	r2,r5,11
    ad64:	00c00584 	movi	r3,22
    ad68:	2025883a 	mov	r18,r4
    ad6c:	18807f2e 	bgeu	r3,r2,af6c <_malloc_r+0x238>
    ad70:	047ffe04 	movi	r17,-8
    ad74:	1462703a 	and	r17,r2,r17
    ad78:	8800a316 	blt	r17,zero,b008 <_malloc_r+0x2d4>
    ad7c:	8940a236 	bltu	r17,r5,b008 <_malloc_r+0x2d4>
    ad80:	000d1040 	call	d104 <__malloc_lock>
    ad84:	00807dc4 	movi	r2,503
    ad88:	1441e92e 	bgeu	r2,r17,b530 <_malloc_r+0x7fc>
    ad8c:	8804d27a 	srli	r2,r17,9
    ad90:	1000a126 	beq	r2,zero,b018 <_malloc_r+0x2e4>
    ad94:	00c00104 	movi	r3,4
    ad98:	18811e36 	bltu	r3,r2,b214 <_malloc_r+0x4e0>
    ad9c:	8804d1ba 	srli	r2,r17,6
    ada0:	12000e44 	addi	r8,r2,57
    ada4:	11c00e04 	addi	r7,r2,56
    ada8:	4209883a 	add	r4,r8,r8
    adac:	04c00074 	movhi	r19,1
    adb0:	2109883a 	add	r4,r4,r4
    adb4:	9ccd9304 	addi	r19,r19,13900
    adb8:	2109883a 	add	r4,r4,r4
    adbc:	9909883a 	add	r4,r19,r4
    adc0:	24000117 	ldw	r16,4(r4)
    adc4:	213ffe04 	addi	r4,r4,-8
    adc8:	24009726 	beq	r4,r16,b028 <_malloc_r+0x2f4>
    adcc:	80800117 	ldw	r2,4(r16)
    add0:	01bfff04 	movi	r6,-4
    add4:	014003c4 	movi	r5,15
    add8:	1184703a 	and	r2,r2,r6
    addc:	1447c83a 	sub	r3,r2,r17
    ade0:	28c00716 	blt	r5,r3,ae00 <_malloc_r+0xcc>
    ade4:	1800920e 	bge	r3,zero,b030 <_malloc_r+0x2fc>
    ade8:	84000317 	ldw	r16,12(r16)
    adec:	24008e26 	beq	r4,r16,b028 <_malloc_r+0x2f4>
    adf0:	80800117 	ldw	r2,4(r16)
    adf4:	1184703a 	and	r2,r2,r6
    adf8:	1447c83a 	sub	r3,r2,r17
    adfc:	28fff90e 	bge	r5,r3,ade4 <__ram_exceptions_end+0xfb00979c>
    ae00:	3809883a 	mov	r4,r7
    ae04:	01800074 	movhi	r6,1
    ae08:	9c000417 	ldw	r16,16(r19)
    ae0c:	318d9304 	addi	r6,r6,13900
    ae10:	32000204 	addi	r8,r6,8
    ae14:	82013426 	beq	r16,r8,b2e8 <_malloc_r+0x5b4>
    ae18:	80c00117 	ldw	r3,4(r16)
    ae1c:	00bfff04 	movi	r2,-4
    ae20:	188e703a 	and	r7,r3,r2
    ae24:	3c45c83a 	sub	r2,r7,r17
    ae28:	00c003c4 	movi	r3,15
    ae2c:	18811f16 	blt	r3,r2,b2ac <_malloc_r+0x578>
    ae30:	32000515 	stw	r8,20(r6)
    ae34:	32000415 	stw	r8,16(r6)
    ae38:	10007f0e 	bge	r2,zero,b038 <_malloc_r+0x304>
    ae3c:	00807fc4 	movi	r2,511
    ae40:	11c0fd36 	bltu	r2,r7,b238 <_malloc_r+0x504>
    ae44:	3806d0fa 	srli	r3,r7,3
    ae48:	01c00044 	movi	r7,1
    ae4c:	30800117 	ldw	r2,4(r6)
    ae50:	19400044 	addi	r5,r3,1
    ae54:	294b883a 	add	r5,r5,r5
    ae58:	1807d0ba 	srai	r3,r3,2
    ae5c:	294b883a 	add	r5,r5,r5
    ae60:	294b883a 	add	r5,r5,r5
    ae64:	298b883a 	add	r5,r5,r6
    ae68:	38c6983a 	sll	r3,r7,r3
    ae6c:	29c00017 	ldw	r7,0(r5)
    ae70:	2a7ffe04 	addi	r9,r5,-8
    ae74:	1886b03a 	or	r3,r3,r2
    ae78:	82400315 	stw	r9,12(r16)
    ae7c:	81c00215 	stw	r7,8(r16)
    ae80:	30c00115 	stw	r3,4(r6)
    ae84:	2c000015 	stw	r16,0(r5)
    ae88:	3c000315 	stw	r16,12(r7)
    ae8c:	2005d0ba 	srai	r2,r4,2
    ae90:	01400044 	movi	r5,1
    ae94:	288a983a 	sll	r5,r5,r2
    ae98:	19406f36 	bltu	r3,r5,b058 <_malloc_r+0x324>
    ae9c:	28c4703a 	and	r2,r5,r3
    aea0:	10000a1e 	bne	r2,zero,aecc <_malloc_r+0x198>
    aea4:	00bfff04 	movi	r2,-4
    aea8:	294b883a 	add	r5,r5,r5
    aeac:	2088703a 	and	r4,r4,r2
    aeb0:	28c4703a 	and	r2,r5,r3
    aeb4:	21000104 	addi	r4,r4,4
    aeb8:	1000041e 	bne	r2,zero,aecc <_malloc_r+0x198>
    aebc:	294b883a 	add	r5,r5,r5
    aec0:	28c4703a 	and	r2,r5,r3
    aec4:	21000104 	addi	r4,r4,4
    aec8:	103ffc26 	beq	r2,zero,aebc <__ram_exceptions_end+0xfb009874>
    aecc:	02bfff04 	movi	r10,-4
    aed0:	024003c4 	movi	r9,15
    aed4:	21800044 	addi	r6,r4,1
    aed8:	318d883a 	add	r6,r6,r6
    aedc:	318d883a 	add	r6,r6,r6
    aee0:	318d883a 	add	r6,r6,r6
    aee4:	998d883a 	add	r6,r19,r6
    aee8:	333ffe04 	addi	r12,r6,-8
    aeec:	2017883a 	mov	r11,r4
    aef0:	31800104 	addi	r6,r6,4
    aef4:	34000017 	ldw	r16,0(r6)
    aef8:	31fffd04 	addi	r7,r6,-12
    aefc:	81c0041e 	bne	r16,r7,af10 <_malloc_r+0x1dc>
    af00:	0000fb06 	br	b2f0 <_malloc_r+0x5bc>
    af04:	1801030e 	bge	r3,zero,b314 <_malloc_r+0x5e0>
    af08:	84000317 	ldw	r16,12(r16)
    af0c:	81c0f826 	beq	r16,r7,b2f0 <_malloc_r+0x5bc>
    af10:	80800117 	ldw	r2,4(r16)
    af14:	1284703a 	and	r2,r2,r10
    af18:	1447c83a 	sub	r3,r2,r17
    af1c:	48fff90e 	bge	r9,r3,af04 <__ram_exceptions_end+0xfb0098bc>
    af20:	80800317 	ldw	r2,12(r16)
    af24:	81000217 	ldw	r4,8(r16)
    af28:	89400054 	ori	r5,r17,1
    af2c:	81400115 	stw	r5,4(r16)
    af30:	20800315 	stw	r2,12(r4)
    af34:	11000215 	stw	r4,8(r2)
    af38:	8463883a 	add	r17,r16,r17
    af3c:	9c400515 	stw	r17,20(r19)
    af40:	9c400415 	stw	r17,16(r19)
    af44:	18800054 	ori	r2,r3,1
    af48:	88800115 	stw	r2,4(r17)
    af4c:	8a000315 	stw	r8,12(r17)
    af50:	8a000215 	stw	r8,8(r17)
    af54:	88e3883a 	add	r17,r17,r3
    af58:	88c00015 	stw	r3,0(r17)
    af5c:	9009883a 	mov	r4,r18
    af60:	000d1280 	call	d128 <__malloc_unlock>
    af64:	80800204 	addi	r2,r16,8
    af68:	00001b06 	br	afd8 <_malloc_r+0x2a4>
    af6c:	04400404 	movi	r17,16
    af70:	89402536 	bltu	r17,r5,b008 <_malloc_r+0x2d4>
    af74:	000d1040 	call	d104 <__malloc_lock>
    af78:	00800184 	movi	r2,6
    af7c:	01000084 	movi	r4,2
    af80:	04c00074 	movhi	r19,1
    af84:	1085883a 	add	r2,r2,r2
    af88:	9ccd9304 	addi	r19,r19,13900
    af8c:	1085883a 	add	r2,r2,r2
    af90:	9885883a 	add	r2,r19,r2
    af94:	14000117 	ldw	r16,4(r2)
    af98:	10fffe04 	addi	r3,r2,-8
    af9c:	80c0d926 	beq	r16,r3,b304 <_malloc_r+0x5d0>
    afa0:	80c00117 	ldw	r3,4(r16)
    afa4:	81000317 	ldw	r4,12(r16)
    afa8:	00bfff04 	movi	r2,-4
    afac:	1884703a 	and	r2,r3,r2
    afb0:	81400217 	ldw	r5,8(r16)
    afb4:	8085883a 	add	r2,r16,r2
    afb8:	10c00117 	ldw	r3,4(r2)
    afbc:	29000315 	stw	r4,12(r5)
    afc0:	21400215 	stw	r5,8(r4)
    afc4:	18c00054 	ori	r3,r3,1
    afc8:	10c00115 	stw	r3,4(r2)
    afcc:	9009883a 	mov	r4,r18
    afd0:	000d1280 	call	d128 <__malloc_unlock>
    afd4:	80800204 	addi	r2,r16,8
    afd8:	dfc00a17 	ldw	ra,40(sp)
    afdc:	df000917 	ldw	fp,36(sp)
    afe0:	ddc00817 	ldw	r23,32(sp)
    afe4:	dd800717 	ldw	r22,28(sp)
    afe8:	dd400617 	ldw	r21,24(sp)
    afec:	dd000517 	ldw	r20,20(sp)
    aff0:	dcc00417 	ldw	r19,16(sp)
    aff4:	dc800317 	ldw	r18,12(sp)
    aff8:	dc400217 	ldw	r17,8(sp)
    affc:	dc000117 	ldw	r16,4(sp)
    b000:	dec00b04 	addi	sp,sp,44
    b004:	f800283a 	ret
    b008:	00800304 	movi	r2,12
    b00c:	90800015 	stw	r2,0(r18)
    b010:	0005883a 	mov	r2,zero
    b014:	003ff006 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b018:	01002004 	movi	r4,128
    b01c:	02001004 	movi	r8,64
    b020:	01c00fc4 	movi	r7,63
    b024:	003f6106 	br	adac <__ram_exceptions_end+0xfb009764>
    b028:	4009883a 	mov	r4,r8
    b02c:	003f7506 	br	ae04 <__ram_exceptions_end+0xfb0097bc>
    b030:	81000317 	ldw	r4,12(r16)
    b034:	003fde06 	br	afb0 <__ram_exceptions_end+0xfb009968>
    b038:	81c5883a 	add	r2,r16,r7
    b03c:	11400117 	ldw	r5,4(r2)
    b040:	9009883a 	mov	r4,r18
    b044:	29400054 	ori	r5,r5,1
    b048:	11400115 	stw	r5,4(r2)
    b04c:	000d1280 	call	d128 <__malloc_unlock>
    b050:	80800204 	addi	r2,r16,8
    b054:	003fe006 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b058:	9c000217 	ldw	r16,8(r19)
    b05c:	00bfff04 	movi	r2,-4
    b060:	85800117 	ldw	r22,4(r16)
    b064:	b0ac703a 	and	r22,r22,r2
    b068:	b4400336 	bltu	r22,r17,b078 <_malloc_r+0x344>
    b06c:	b445c83a 	sub	r2,r22,r17
    b070:	00c003c4 	movi	r3,15
    b074:	18805d16 	blt	r3,r2,b1ec <_malloc_r+0x4b8>
    b078:	05c00074 	movhi	r23,1
    b07c:	00800074 	movhi	r2,1
    b080:	109a3104 	addi	r2,r2,26820
    b084:	bdd34b04 	addi	r23,r23,19756
    b088:	15400017 	ldw	r21,0(r2)
    b08c:	b8c00017 	ldw	r3,0(r23)
    b090:	00bfffc4 	movi	r2,-1
    b094:	858d883a 	add	r6,r16,r22
    b098:	8d6b883a 	add	r21,r17,r21
    b09c:	1880ea26 	beq	r3,r2,b448 <_malloc_r+0x714>
    b0a0:	ad4403c4 	addi	r21,r21,4111
    b0a4:	00bc0004 	movi	r2,-4096
    b0a8:	a8aa703a 	and	r21,r21,r2
    b0ac:	a80b883a 	mov	r5,r21
    b0b0:	9009883a 	mov	r4,r18
    b0b4:	d9800015 	stw	r6,0(sp)
    b0b8:	000bce40 	call	bce4 <_sbrk_r>
    b0bc:	1029883a 	mov	r20,r2
    b0c0:	00bfffc4 	movi	r2,-1
    b0c4:	d9800017 	ldw	r6,0(sp)
    b0c8:	a080e826 	beq	r20,r2,b46c <_malloc_r+0x738>
    b0cc:	a180a636 	bltu	r20,r6,b368 <_malloc_r+0x634>
    b0d0:	070000b4 	movhi	fp,2
    b0d4:	e730c504 	addi	fp,fp,-15596
    b0d8:	e0800017 	ldw	r2,0(fp)
    b0dc:	a887883a 	add	r3,r21,r2
    b0e0:	e0c00015 	stw	r3,0(fp)
    b0e4:	3500e626 	beq	r6,r20,b480 <_malloc_r+0x74c>
    b0e8:	b9000017 	ldw	r4,0(r23)
    b0ec:	00bfffc4 	movi	r2,-1
    b0f0:	2080ee26 	beq	r4,r2,b4ac <_malloc_r+0x778>
    b0f4:	a185c83a 	sub	r2,r20,r6
    b0f8:	10c5883a 	add	r2,r2,r3
    b0fc:	e0800015 	stw	r2,0(fp)
    b100:	a0c001cc 	andi	r3,r20,7
    b104:	1800bc26 	beq	r3,zero,b3f8 <_malloc_r+0x6c4>
    b108:	a0e9c83a 	sub	r20,r20,r3
    b10c:	00840204 	movi	r2,4104
    b110:	a5000204 	addi	r20,r20,8
    b114:	10c7c83a 	sub	r3,r2,r3
    b118:	a545883a 	add	r2,r20,r21
    b11c:	1083ffcc 	andi	r2,r2,4095
    b120:	18abc83a 	sub	r21,r3,r2
    b124:	a80b883a 	mov	r5,r21
    b128:	9009883a 	mov	r4,r18
    b12c:	000bce40 	call	bce4 <_sbrk_r>
    b130:	00ffffc4 	movi	r3,-1
    b134:	10c0e126 	beq	r2,r3,b4bc <_malloc_r+0x788>
    b138:	1505c83a 	sub	r2,r2,r20
    b13c:	1545883a 	add	r2,r2,r21
    b140:	10800054 	ori	r2,r2,1
    b144:	e0c00017 	ldw	r3,0(fp)
    b148:	9d000215 	stw	r20,8(r19)
    b14c:	a0800115 	stw	r2,4(r20)
    b150:	a8c7883a 	add	r3,r21,r3
    b154:	e0c00015 	stw	r3,0(fp)
    b158:	84c00e26 	beq	r16,r19,b194 <_malloc_r+0x460>
    b15c:	018003c4 	movi	r6,15
    b160:	3580a72e 	bgeu	r6,r22,b400 <_malloc_r+0x6cc>
    b164:	81400117 	ldw	r5,4(r16)
    b168:	013ffe04 	movi	r4,-8
    b16c:	b0bffd04 	addi	r2,r22,-12
    b170:	1104703a 	and	r2,r2,r4
    b174:	2900004c 	andi	r4,r5,1
    b178:	2088b03a 	or	r4,r4,r2
    b17c:	81000115 	stw	r4,4(r16)
    b180:	01400144 	movi	r5,5
    b184:	8089883a 	add	r4,r16,r2
    b188:	21400115 	stw	r5,4(r4)
    b18c:	21400215 	stw	r5,8(r4)
    b190:	3080cd36 	bltu	r6,r2,b4c8 <_malloc_r+0x794>
    b194:	00800074 	movhi	r2,1
    b198:	109a3004 	addi	r2,r2,26816
    b19c:	11000017 	ldw	r4,0(r2)
    b1a0:	20c0012e 	bgeu	r4,r3,b1a8 <_malloc_r+0x474>
    b1a4:	10c00015 	stw	r3,0(r2)
    b1a8:	00800074 	movhi	r2,1
    b1ac:	109a2f04 	addi	r2,r2,26812
    b1b0:	11000017 	ldw	r4,0(r2)
    b1b4:	9c000217 	ldw	r16,8(r19)
    b1b8:	20c0012e 	bgeu	r4,r3,b1c0 <_malloc_r+0x48c>
    b1bc:	10c00015 	stw	r3,0(r2)
    b1c0:	80c00117 	ldw	r3,4(r16)
    b1c4:	00bfff04 	movi	r2,-4
    b1c8:	1886703a 	and	r3,r3,r2
    b1cc:	1c45c83a 	sub	r2,r3,r17
    b1d0:	1c400236 	bltu	r3,r17,b1dc <_malloc_r+0x4a8>
    b1d4:	00c003c4 	movi	r3,15
    b1d8:	18800416 	blt	r3,r2,b1ec <_malloc_r+0x4b8>
    b1dc:	9009883a 	mov	r4,r18
    b1e0:	000d1280 	call	d128 <__malloc_unlock>
    b1e4:	0005883a 	mov	r2,zero
    b1e8:	003f7b06 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b1ec:	88c00054 	ori	r3,r17,1
    b1f0:	80c00115 	stw	r3,4(r16)
    b1f4:	8463883a 	add	r17,r16,r17
    b1f8:	10800054 	ori	r2,r2,1
    b1fc:	9c400215 	stw	r17,8(r19)
    b200:	88800115 	stw	r2,4(r17)
    b204:	9009883a 	mov	r4,r18
    b208:	000d1280 	call	d128 <__malloc_unlock>
    b20c:	80800204 	addi	r2,r16,8
    b210:	003f7106 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b214:	00c00504 	movi	r3,20
    b218:	18804a2e 	bgeu	r3,r2,b344 <_malloc_r+0x610>
    b21c:	00c01504 	movi	r3,84
    b220:	18806e36 	bltu	r3,r2,b3dc <_malloc_r+0x6a8>
    b224:	8804d33a 	srli	r2,r17,12
    b228:	12001bc4 	addi	r8,r2,111
    b22c:	11c01b84 	addi	r7,r2,110
    b230:	4209883a 	add	r4,r8,r8
    b234:	003edd06 	br	adac <__ram_exceptions_end+0xfb009764>
    b238:	3804d27a 	srli	r2,r7,9
    b23c:	00c00104 	movi	r3,4
    b240:	1880442e 	bgeu	r3,r2,b354 <_malloc_r+0x620>
    b244:	00c00504 	movi	r3,20
    b248:	18808136 	bltu	r3,r2,b450 <_malloc_r+0x71c>
    b24c:	11401704 	addi	r5,r2,92
    b250:	10c016c4 	addi	r3,r2,91
    b254:	294b883a 	add	r5,r5,r5
    b258:	294b883a 	add	r5,r5,r5
    b25c:	294b883a 	add	r5,r5,r5
    b260:	994b883a 	add	r5,r19,r5
    b264:	28800017 	ldw	r2,0(r5)
    b268:	01800074 	movhi	r6,1
    b26c:	297ffe04 	addi	r5,r5,-8
    b270:	318d9304 	addi	r6,r6,13900
    b274:	28806526 	beq	r5,r2,b40c <_malloc_r+0x6d8>
    b278:	01bfff04 	movi	r6,-4
    b27c:	10c00117 	ldw	r3,4(r2)
    b280:	1986703a 	and	r3,r3,r6
    b284:	38c0022e 	bgeu	r7,r3,b290 <_malloc_r+0x55c>
    b288:	10800217 	ldw	r2,8(r2)
    b28c:	28bffb1e 	bne	r5,r2,b27c <__ram_exceptions_end+0xfb009c34>
    b290:	11400317 	ldw	r5,12(r2)
    b294:	98c00117 	ldw	r3,4(r19)
    b298:	81400315 	stw	r5,12(r16)
    b29c:	80800215 	stw	r2,8(r16)
    b2a0:	2c000215 	stw	r16,8(r5)
    b2a4:	14000315 	stw	r16,12(r2)
    b2a8:	003ef806 	br	ae8c <__ram_exceptions_end+0xfb009844>
    b2ac:	88c00054 	ori	r3,r17,1
    b2b0:	80c00115 	stw	r3,4(r16)
    b2b4:	8463883a 	add	r17,r16,r17
    b2b8:	34400515 	stw	r17,20(r6)
    b2bc:	34400415 	stw	r17,16(r6)
    b2c0:	10c00054 	ori	r3,r2,1
    b2c4:	8a000315 	stw	r8,12(r17)
    b2c8:	8a000215 	stw	r8,8(r17)
    b2cc:	88c00115 	stw	r3,4(r17)
    b2d0:	88a3883a 	add	r17,r17,r2
    b2d4:	88800015 	stw	r2,0(r17)
    b2d8:	9009883a 	mov	r4,r18
    b2dc:	000d1280 	call	d128 <__malloc_unlock>
    b2e0:	80800204 	addi	r2,r16,8
    b2e4:	003f3c06 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b2e8:	30c00117 	ldw	r3,4(r6)
    b2ec:	003ee706 	br	ae8c <__ram_exceptions_end+0xfb009844>
    b2f0:	5ac00044 	addi	r11,r11,1
    b2f4:	588000cc 	andi	r2,r11,3
    b2f8:	31800204 	addi	r6,r6,8
    b2fc:	103efd1e 	bne	r2,zero,aef4 <__ram_exceptions_end+0xfb0098ac>
    b300:	00002406 	br	b394 <_malloc_r+0x660>
    b304:	14000317 	ldw	r16,12(r2)
    b308:	143f251e 	bne	r2,r16,afa0 <__ram_exceptions_end+0xfb009958>
    b30c:	21000084 	addi	r4,r4,2
    b310:	003ebc06 	br	ae04 <__ram_exceptions_end+0xfb0097bc>
    b314:	8085883a 	add	r2,r16,r2
    b318:	10c00117 	ldw	r3,4(r2)
    b31c:	81000317 	ldw	r4,12(r16)
    b320:	81400217 	ldw	r5,8(r16)
    b324:	18c00054 	ori	r3,r3,1
    b328:	10c00115 	stw	r3,4(r2)
    b32c:	29000315 	stw	r4,12(r5)
    b330:	21400215 	stw	r5,8(r4)
    b334:	9009883a 	mov	r4,r18
    b338:	000d1280 	call	d128 <__malloc_unlock>
    b33c:	80800204 	addi	r2,r16,8
    b340:	003f2506 	br	afd8 <__ram_exceptions_end+0xfb009990>
    b344:	12001704 	addi	r8,r2,92
    b348:	11c016c4 	addi	r7,r2,91
    b34c:	4209883a 	add	r4,r8,r8
    b350:	003e9606 	br	adac <__ram_exceptions_end+0xfb009764>
    b354:	3804d1ba 	srli	r2,r7,6
    b358:	11400e44 	addi	r5,r2,57
    b35c:	10c00e04 	addi	r3,r2,56
    b360:	294b883a 	add	r5,r5,r5
    b364:	003fbc06 	br	b258 <__ram_exceptions_end+0xfb009c10>
    b368:	84ff5926 	beq	r16,r19,b0d0 <__ram_exceptions_end+0xfb009a88>
    b36c:	00800074 	movhi	r2,1
    b370:	108d9304 	addi	r2,r2,13900
    b374:	14000217 	ldw	r16,8(r2)
    b378:	00bfff04 	movi	r2,-4
    b37c:	80c00117 	ldw	r3,4(r16)
    b380:	1886703a 	and	r3,r3,r2
    b384:	003f9106 	br	b1cc <__ram_exceptions_end+0xfb009b84>
    b388:	60800217 	ldw	r2,8(r12)
    b38c:	213fffc4 	addi	r4,r4,-1
    b390:	1300651e 	bne	r2,r12,b528 <_malloc_r+0x7f4>
    b394:	208000cc 	andi	r2,r4,3
    b398:	633ffe04 	addi	r12,r12,-8
    b39c:	103ffa1e 	bne	r2,zero,b388 <__ram_exceptions_end+0xfb009d40>
    b3a0:	98800117 	ldw	r2,4(r19)
    b3a4:	0146303a 	nor	r3,zero,r5
    b3a8:	1884703a 	and	r2,r3,r2
    b3ac:	98800115 	stw	r2,4(r19)
    b3b0:	294b883a 	add	r5,r5,r5
    b3b4:	117f2836 	bltu	r2,r5,b058 <__ram_exceptions_end+0xfb009a10>
    b3b8:	283f2726 	beq	r5,zero,b058 <__ram_exceptions_end+0xfb009a10>
    b3bc:	2886703a 	and	r3,r5,r2
    b3c0:	5809883a 	mov	r4,r11
    b3c4:	183ec31e 	bne	r3,zero,aed4 <__ram_exceptions_end+0xfb00988c>
    b3c8:	294b883a 	add	r5,r5,r5
    b3cc:	2886703a 	and	r3,r5,r2
    b3d0:	21000104 	addi	r4,r4,4
    b3d4:	183ffc26 	beq	r3,zero,b3c8 <__ram_exceptions_end+0xfb009d80>
    b3d8:	003ebe06 	br	aed4 <__ram_exceptions_end+0xfb00988c>
    b3dc:	00c05504 	movi	r3,340
    b3e0:	18801236 	bltu	r3,r2,b42c <_malloc_r+0x6f8>
    b3e4:	8804d3fa 	srli	r2,r17,15
    b3e8:	12001e04 	addi	r8,r2,120
    b3ec:	11c01dc4 	addi	r7,r2,119
    b3f0:	4209883a 	add	r4,r8,r8
    b3f4:	003e6d06 	br	adac <__ram_exceptions_end+0xfb009764>
    b3f8:	00c40004 	movi	r3,4096
    b3fc:	003f4606 	br	b118 <__ram_exceptions_end+0xfb009ad0>
    b400:	00800044 	movi	r2,1
    b404:	a0800115 	stw	r2,4(r20)
    b408:	003f7406 	br	b1dc <__ram_exceptions_end+0xfb009b94>
    b40c:	1805d0ba 	srai	r2,r3,2
    b410:	01c00044 	movi	r7,1
    b414:	30c00117 	ldw	r3,4(r6)
    b418:	388e983a 	sll	r7,r7,r2
    b41c:	2805883a 	mov	r2,r5
    b420:	38c6b03a 	or	r3,r7,r3
    b424:	30c00115 	stw	r3,4(r6)
    b428:	003f9b06 	br	b298 <__ram_exceptions_end+0xfb009c50>
    b42c:	00c15504 	movi	r3,1364
    b430:	18801a36 	bltu	r3,r2,b49c <_malloc_r+0x768>
    b434:	8804d4ba 	srli	r2,r17,18
    b438:	12001f44 	addi	r8,r2,125
    b43c:	11c01f04 	addi	r7,r2,124
    b440:	4209883a 	add	r4,r8,r8
    b444:	003e5906 	br	adac <__ram_exceptions_end+0xfb009764>
    b448:	ad400404 	addi	r21,r21,16
    b44c:	003f1706 	br	b0ac <__ram_exceptions_end+0xfb009a64>
    b450:	00c01504 	movi	r3,84
    b454:	18802336 	bltu	r3,r2,b4e4 <_malloc_r+0x7b0>
    b458:	3804d33a 	srli	r2,r7,12
    b45c:	11401bc4 	addi	r5,r2,111
    b460:	10c01b84 	addi	r3,r2,110
    b464:	294b883a 	add	r5,r5,r5
    b468:	003f7b06 	br	b258 <__ram_exceptions_end+0xfb009c10>
    b46c:	9c000217 	ldw	r16,8(r19)
    b470:	00bfff04 	movi	r2,-4
    b474:	80c00117 	ldw	r3,4(r16)
    b478:	1886703a 	and	r3,r3,r2
    b47c:	003f5306 	br	b1cc <__ram_exceptions_end+0xfb009b84>
    b480:	3083ffcc 	andi	r2,r6,4095
    b484:	103f181e 	bne	r2,zero,b0e8 <__ram_exceptions_end+0xfb009aa0>
    b488:	99000217 	ldw	r4,8(r19)
    b48c:	b545883a 	add	r2,r22,r21
    b490:	10800054 	ori	r2,r2,1
    b494:	20800115 	stw	r2,4(r4)
    b498:	003f3e06 	br	b194 <__ram_exceptions_end+0xfb009b4c>
    b49c:	01003f84 	movi	r4,254
    b4a0:	02001fc4 	movi	r8,127
    b4a4:	01c01f84 	movi	r7,126
    b4a8:	003e4006 	br	adac <__ram_exceptions_end+0xfb009764>
    b4ac:	00800074 	movhi	r2,1
    b4b0:	10934b04 	addi	r2,r2,19756
    b4b4:	15000015 	stw	r20,0(r2)
    b4b8:	003f1106 	br	b100 <__ram_exceptions_end+0xfb009ab8>
    b4bc:	00800044 	movi	r2,1
    b4c0:	002b883a 	mov	r21,zero
    b4c4:	003f1f06 	br	b144 <__ram_exceptions_end+0xfb009afc>
    b4c8:	81400204 	addi	r5,r16,8
    b4cc:	9009883a 	mov	r4,r18
    b4d0:	000c54c0 	call	c54c <_free_r>
    b4d4:	008000b4 	movhi	r2,2
    b4d8:	10b0c504 	addi	r2,r2,-15596
    b4dc:	10c00017 	ldw	r3,0(r2)
    b4e0:	003f2c06 	br	b194 <__ram_exceptions_end+0xfb009b4c>
    b4e4:	00c05504 	movi	r3,340
    b4e8:	18800536 	bltu	r3,r2,b500 <_malloc_r+0x7cc>
    b4ec:	3804d3fa 	srli	r2,r7,15
    b4f0:	11401e04 	addi	r5,r2,120
    b4f4:	10c01dc4 	addi	r3,r2,119
    b4f8:	294b883a 	add	r5,r5,r5
    b4fc:	003f5606 	br	b258 <__ram_exceptions_end+0xfb009c10>
    b500:	00c15504 	movi	r3,1364
    b504:	18800536 	bltu	r3,r2,b51c <_malloc_r+0x7e8>
    b508:	3804d4ba 	srli	r2,r7,18
    b50c:	11401f44 	addi	r5,r2,125
    b510:	10c01f04 	addi	r3,r2,124
    b514:	294b883a 	add	r5,r5,r5
    b518:	003f4f06 	br	b258 <__ram_exceptions_end+0xfb009c10>
    b51c:	01403f84 	movi	r5,254
    b520:	00c01f84 	movi	r3,126
    b524:	003f4c06 	br	b258 <__ram_exceptions_end+0xfb009c10>
    b528:	98800117 	ldw	r2,4(r19)
    b52c:	003fa006 	br	b3b0 <__ram_exceptions_end+0xfb009d68>
    b530:	8808d0fa 	srli	r4,r17,3
    b534:	20800044 	addi	r2,r4,1
    b538:	1085883a 	add	r2,r2,r2
    b53c:	003e9006 	br	af80 <__ram_exceptions_end+0xfb009938>

0000b540 <memchr>:
    b540:	208000cc 	andi	r2,r4,3
    b544:	280f883a 	mov	r7,r5
    b548:	10003426 	beq	r2,zero,b61c <memchr+0xdc>
    b54c:	30bfffc4 	addi	r2,r6,-1
    b550:	30001a26 	beq	r6,zero,b5bc <memchr+0x7c>
    b554:	20c00003 	ldbu	r3,0(r4)
    b558:	29803fcc 	andi	r6,r5,255
    b55c:	30c0051e 	bne	r6,r3,b574 <memchr+0x34>
    b560:	00001806 	br	b5c4 <memchr+0x84>
    b564:	10001526 	beq	r2,zero,b5bc <memchr+0x7c>
    b568:	20c00003 	ldbu	r3,0(r4)
    b56c:	10bfffc4 	addi	r2,r2,-1
    b570:	30c01426 	beq	r6,r3,b5c4 <memchr+0x84>
    b574:	21000044 	addi	r4,r4,1
    b578:	20c000cc 	andi	r3,r4,3
    b57c:	183ff91e 	bne	r3,zero,b564 <__ram_exceptions_end+0xfb009f1c>
    b580:	020000c4 	movi	r8,3
    b584:	40801136 	bltu	r8,r2,b5cc <memchr+0x8c>
    b588:	10000c26 	beq	r2,zero,b5bc <memchr+0x7c>
    b58c:	20c00003 	ldbu	r3,0(r4)
    b590:	29403fcc 	andi	r5,r5,255
    b594:	28c00b26 	beq	r5,r3,b5c4 <memchr+0x84>
    b598:	20c00044 	addi	r3,r4,1
    b59c:	39803fcc 	andi	r6,r7,255
    b5a0:	2089883a 	add	r4,r4,r2
    b5a4:	00000306 	br	b5b4 <memchr+0x74>
    b5a8:	18c00044 	addi	r3,r3,1
    b5ac:	197fffc3 	ldbu	r5,-1(r3)
    b5b0:	31400526 	beq	r6,r5,b5c8 <memchr+0x88>
    b5b4:	1805883a 	mov	r2,r3
    b5b8:	20fffb1e 	bne	r4,r3,b5a8 <__ram_exceptions_end+0xfb009f60>
    b5bc:	0005883a 	mov	r2,zero
    b5c0:	f800283a 	ret
    b5c4:	2005883a 	mov	r2,r4
    b5c8:	f800283a 	ret
    b5cc:	28c03fcc 	andi	r3,r5,255
    b5d0:	1812923a 	slli	r9,r3,8
    b5d4:	02ffbff4 	movhi	r11,65279
    b5d8:	02a02074 	movhi	r10,32897
    b5dc:	48d2b03a 	or	r9,r9,r3
    b5e0:	4806943a 	slli	r3,r9,16
    b5e4:	5affbfc4 	addi	r11,r11,-257
    b5e8:	52a02004 	addi	r10,r10,-32640
    b5ec:	48d2b03a 	or	r9,r9,r3
    b5f0:	20c00017 	ldw	r3,0(r4)
    b5f4:	48c6f03a 	xor	r3,r9,r3
    b5f8:	1acd883a 	add	r6,r3,r11
    b5fc:	00c6303a 	nor	r3,zero,r3
    b600:	30c6703a 	and	r3,r6,r3
    b604:	1a86703a 	and	r3,r3,r10
    b608:	183fe01e 	bne	r3,zero,b58c <__ram_exceptions_end+0xfb009f44>
    b60c:	10bfff04 	addi	r2,r2,-4
    b610:	21000104 	addi	r4,r4,4
    b614:	40bff636 	bltu	r8,r2,b5f0 <__ram_exceptions_end+0xfb009fa8>
    b618:	003fdb06 	br	b588 <__ram_exceptions_end+0xfb009f40>
    b61c:	3005883a 	mov	r2,r6
    b620:	003fd706 	br	b580 <__ram_exceptions_end+0xfb009f38>

0000b624 <memmove>:
    b624:	2005883a 	mov	r2,r4
    b628:	29000b2e 	bgeu	r5,r4,b658 <memmove+0x34>
    b62c:	298f883a 	add	r7,r5,r6
    b630:	21c0092e 	bgeu	r4,r7,b658 <memmove+0x34>
    b634:	2187883a 	add	r3,r4,r6
    b638:	198bc83a 	sub	r5,r3,r6
    b63c:	30004826 	beq	r6,zero,b760 <memmove+0x13c>
    b640:	39ffffc4 	addi	r7,r7,-1
    b644:	39000003 	ldbu	r4,0(r7)
    b648:	18ffffc4 	addi	r3,r3,-1
    b64c:	19000005 	stb	r4,0(r3)
    b650:	28fffb1e 	bne	r5,r3,b640 <__ram_exceptions_end+0xfb009ff8>
    b654:	f800283a 	ret
    b658:	00c003c4 	movi	r3,15
    b65c:	1980412e 	bgeu	r3,r6,b764 <memmove+0x140>
    b660:	2886b03a 	or	r3,r5,r2
    b664:	18c000cc 	andi	r3,r3,3
    b668:	1800401e 	bne	r3,zero,b76c <memmove+0x148>
    b66c:	33fffc04 	addi	r15,r6,-16
    b670:	781ed13a 	srli	r15,r15,4
    b674:	28c00104 	addi	r3,r5,4
    b678:	13400104 	addi	r13,r2,4
    b67c:	781c913a 	slli	r14,r15,4
    b680:	2b000204 	addi	r12,r5,8
    b684:	12c00204 	addi	r11,r2,8
    b688:	73800504 	addi	r14,r14,20
    b68c:	2a800304 	addi	r10,r5,12
    b690:	12400304 	addi	r9,r2,12
    b694:	2b9d883a 	add	r14,r5,r14
    b698:	2811883a 	mov	r8,r5
    b69c:	100f883a 	mov	r7,r2
    b6a0:	41000017 	ldw	r4,0(r8)
    b6a4:	39c00404 	addi	r7,r7,16
    b6a8:	18c00404 	addi	r3,r3,16
    b6ac:	393ffc15 	stw	r4,-16(r7)
    b6b0:	193ffc17 	ldw	r4,-16(r3)
    b6b4:	6b400404 	addi	r13,r13,16
    b6b8:	5ac00404 	addi	r11,r11,16
    b6bc:	693ffc15 	stw	r4,-16(r13)
    b6c0:	61000017 	ldw	r4,0(r12)
    b6c4:	4a400404 	addi	r9,r9,16
    b6c8:	42000404 	addi	r8,r8,16
    b6cc:	593ffc15 	stw	r4,-16(r11)
    b6d0:	51000017 	ldw	r4,0(r10)
    b6d4:	63000404 	addi	r12,r12,16
    b6d8:	52800404 	addi	r10,r10,16
    b6dc:	493ffc15 	stw	r4,-16(r9)
    b6e0:	1bbfef1e 	bne	r3,r14,b6a0 <__ram_exceptions_end+0xfb00a058>
    b6e4:	79000044 	addi	r4,r15,1
    b6e8:	2008913a 	slli	r4,r4,4
    b6ec:	328003cc 	andi	r10,r6,15
    b6f0:	02c000c4 	movi	r11,3
    b6f4:	1107883a 	add	r3,r2,r4
    b6f8:	290b883a 	add	r5,r5,r4
    b6fc:	5a801e2e 	bgeu	r11,r10,b778 <memmove+0x154>
    b700:	1813883a 	mov	r9,r3
    b704:	2811883a 	mov	r8,r5
    b708:	500f883a 	mov	r7,r10
    b70c:	41000017 	ldw	r4,0(r8)
    b710:	4a400104 	addi	r9,r9,4
    b714:	39ffff04 	addi	r7,r7,-4
    b718:	493fff15 	stw	r4,-4(r9)
    b71c:	42000104 	addi	r8,r8,4
    b720:	59fffa36 	bltu	r11,r7,b70c <__ram_exceptions_end+0xfb00a0c4>
    b724:	513fff04 	addi	r4,r10,-4
    b728:	2008d0ba 	srli	r4,r4,2
    b72c:	318000cc 	andi	r6,r6,3
    b730:	21000044 	addi	r4,r4,1
    b734:	2109883a 	add	r4,r4,r4
    b738:	2109883a 	add	r4,r4,r4
    b73c:	1907883a 	add	r3,r3,r4
    b740:	290b883a 	add	r5,r5,r4
    b744:	30000b26 	beq	r6,zero,b774 <memmove+0x150>
    b748:	198d883a 	add	r6,r3,r6
    b74c:	29c00003 	ldbu	r7,0(r5)
    b750:	18c00044 	addi	r3,r3,1
    b754:	29400044 	addi	r5,r5,1
    b758:	19ffffc5 	stb	r7,-1(r3)
    b75c:	19bffb1e 	bne	r3,r6,b74c <__ram_exceptions_end+0xfb00a104>
    b760:	f800283a 	ret
    b764:	1007883a 	mov	r3,r2
    b768:	003ff606 	br	b744 <__ram_exceptions_end+0xfb00a0fc>
    b76c:	1007883a 	mov	r3,r2
    b770:	003ff506 	br	b748 <__ram_exceptions_end+0xfb00a100>
    b774:	f800283a 	ret
    b778:	500d883a 	mov	r6,r10
    b77c:	003ff106 	br	b744 <__ram_exceptions_end+0xfb00a0fc>

0000b780 <_realloc_r>:
    b780:	defff604 	addi	sp,sp,-40
    b784:	dc800215 	stw	r18,8(sp)
    b788:	dfc00915 	stw	ra,36(sp)
    b78c:	df000815 	stw	fp,32(sp)
    b790:	ddc00715 	stw	r23,28(sp)
    b794:	dd800615 	stw	r22,24(sp)
    b798:	dd400515 	stw	r21,20(sp)
    b79c:	dd000415 	stw	r20,16(sp)
    b7a0:	dcc00315 	stw	r19,12(sp)
    b7a4:	dc400115 	stw	r17,4(sp)
    b7a8:	dc000015 	stw	r16,0(sp)
    b7ac:	3025883a 	mov	r18,r6
    b7b0:	2800b726 	beq	r5,zero,ba90 <_realloc_r+0x310>
    b7b4:	282b883a 	mov	r21,r5
    b7b8:	2029883a 	mov	r20,r4
    b7bc:	000d1040 	call	d104 <__malloc_lock>
    b7c0:	a8bfff17 	ldw	r2,-4(r21)
    b7c4:	043fff04 	movi	r16,-4
    b7c8:	90c002c4 	addi	r3,r18,11
    b7cc:	01000584 	movi	r4,22
    b7d0:	acfffe04 	addi	r19,r21,-8
    b7d4:	1420703a 	and	r16,r2,r16
    b7d8:	20c0332e 	bgeu	r4,r3,b8a8 <_realloc_r+0x128>
    b7dc:	047ffe04 	movi	r17,-8
    b7e0:	1c62703a 	and	r17,r3,r17
    b7e4:	8807883a 	mov	r3,r17
    b7e8:	88005816 	blt	r17,zero,b94c <_realloc_r+0x1cc>
    b7ec:	8c805736 	bltu	r17,r18,b94c <_realloc_r+0x1cc>
    b7f0:	80c0300e 	bge	r16,r3,b8b4 <_realloc_r+0x134>
    b7f4:	07000074 	movhi	fp,1
    b7f8:	e70d9304 	addi	fp,fp,13900
    b7fc:	e1c00217 	ldw	r7,8(fp)
    b800:	9c09883a 	add	r4,r19,r16
    b804:	22000117 	ldw	r8,4(r4)
    b808:	21c06326 	beq	r4,r7,b998 <_realloc_r+0x218>
    b80c:	017fff84 	movi	r5,-2
    b810:	414a703a 	and	r5,r8,r5
    b814:	214b883a 	add	r5,r4,r5
    b818:	29800117 	ldw	r6,4(r5)
    b81c:	3180004c 	andi	r6,r6,1
    b820:	30003f26 	beq	r6,zero,b920 <_realloc_r+0x1a0>
    b824:	1080004c 	andi	r2,r2,1
    b828:	10008326 	beq	r2,zero,ba38 <_realloc_r+0x2b8>
    b82c:	900b883a 	mov	r5,r18
    b830:	a009883a 	mov	r4,r20
    b834:	000ad340 	call	ad34 <_malloc_r>
    b838:	1025883a 	mov	r18,r2
    b83c:	10011e26 	beq	r2,zero,bcb8 <_realloc_r+0x538>
    b840:	a93fff17 	ldw	r4,-4(r21)
    b844:	10fffe04 	addi	r3,r2,-8
    b848:	00bfff84 	movi	r2,-2
    b84c:	2084703a 	and	r2,r4,r2
    b850:	9885883a 	add	r2,r19,r2
    b854:	1880ee26 	beq	r3,r2,bc10 <_realloc_r+0x490>
    b858:	81bfff04 	addi	r6,r16,-4
    b85c:	00800904 	movi	r2,36
    b860:	1180b836 	bltu	r2,r6,bb44 <_realloc_r+0x3c4>
    b864:	00c004c4 	movi	r3,19
    b868:	19809636 	bltu	r3,r6,bac4 <_realloc_r+0x344>
    b86c:	9005883a 	mov	r2,r18
    b870:	a807883a 	mov	r3,r21
    b874:	19000017 	ldw	r4,0(r3)
    b878:	11000015 	stw	r4,0(r2)
    b87c:	19000117 	ldw	r4,4(r3)
    b880:	11000115 	stw	r4,4(r2)
    b884:	18c00217 	ldw	r3,8(r3)
    b888:	10c00215 	stw	r3,8(r2)
    b88c:	a80b883a 	mov	r5,r21
    b890:	a009883a 	mov	r4,r20
    b894:	000c54c0 	call	c54c <_free_r>
    b898:	a009883a 	mov	r4,r20
    b89c:	000d1280 	call	d128 <__malloc_unlock>
    b8a0:	9005883a 	mov	r2,r18
    b8a4:	00001206 	br	b8f0 <_realloc_r+0x170>
    b8a8:	00c00404 	movi	r3,16
    b8ac:	1823883a 	mov	r17,r3
    b8b0:	003fce06 	br	b7ec <__ram_exceptions_end+0xfb00a1a4>
    b8b4:	a825883a 	mov	r18,r21
    b8b8:	8445c83a 	sub	r2,r16,r17
    b8bc:	00c003c4 	movi	r3,15
    b8c0:	18802636 	bltu	r3,r2,b95c <_realloc_r+0x1dc>
    b8c4:	99800117 	ldw	r6,4(r19)
    b8c8:	9c07883a 	add	r3,r19,r16
    b8cc:	3180004c 	andi	r6,r6,1
    b8d0:	3420b03a 	or	r16,r6,r16
    b8d4:	9c000115 	stw	r16,4(r19)
    b8d8:	18800117 	ldw	r2,4(r3)
    b8dc:	10800054 	ori	r2,r2,1
    b8e0:	18800115 	stw	r2,4(r3)
    b8e4:	a009883a 	mov	r4,r20
    b8e8:	000d1280 	call	d128 <__malloc_unlock>
    b8ec:	9005883a 	mov	r2,r18
    b8f0:	dfc00917 	ldw	ra,36(sp)
    b8f4:	df000817 	ldw	fp,32(sp)
    b8f8:	ddc00717 	ldw	r23,28(sp)
    b8fc:	dd800617 	ldw	r22,24(sp)
    b900:	dd400517 	ldw	r21,20(sp)
    b904:	dd000417 	ldw	r20,16(sp)
    b908:	dcc00317 	ldw	r19,12(sp)
    b90c:	dc800217 	ldw	r18,8(sp)
    b910:	dc400117 	ldw	r17,4(sp)
    b914:	dc000017 	ldw	r16,0(sp)
    b918:	dec00a04 	addi	sp,sp,40
    b91c:	f800283a 	ret
    b920:	017fff04 	movi	r5,-4
    b924:	414a703a 	and	r5,r8,r5
    b928:	814d883a 	add	r6,r16,r5
    b92c:	30c01f16 	blt	r6,r3,b9ac <_realloc_r+0x22c>
    b930:	20800317 	ldw	r2,12(r4)
    b934:	20c00217 	ldw	r3,8(r4)
    b938:	a825883a 	mov	r18,r21
    b93c:	3021883a 	mov	r16,r6
    b940:	18800315 	stw	r2,12(r3)
    b944:	10c00215 	stw	r3,8(r2)
    b948:	003fdb06 	br	b8b8 <__ram_exceptions_end+0xfb00a270>
    b94c:	00800304 	movi	r2,12
    b950:	a0800015 	stw	r2,0(r20)
    b954:	0005883a 	mov	r2,zero
    b958:	003fe506 	br	b8f0 <__ram_exceptions_end+0xfb00a2a8>
    b95c:	98c00117 	ldw	r3,4(r19)
    b960:	9c4b883a 	add	r5,r19,r17
    b964:	11000054 	ori	r4,r2,1
    b968:	18c0004c 	andi	r3,r3,1
    b96c:	1c62b03a 	or	r17,r3,r17
    b970:	9c400115 	stw	r17,4(r19)
    b974:	29000115 	stw	r4,4(r5)
    b978:	2885883a 	add	r2,r5,r2
    b97c:	10c00117 	ldw	r3,4(r2)
    b980:	29400204 	addi	r5,r5,8
    b984:	a009883a 	mov	r4,r20
    b988:	18c00054 	ori	r3,r3,1
    b98c:	10c00115 	stw	r3,4(r2)
    b990:	000c54c0 	call	c54c <_free_r>
    b994:	003fd306 	br	b8e4 <__ram_exceptions_end+0xfb00a29c>
    b998:	017fff04 	movi	r5,-4
    b99c:	414a703a 	and	r5,r8,r5
    b9a0:	89800404 	addi	r6,r17,16
    b9a4:	8151883a 	add	r8,r16,r5
    b9a8:	4180590e 	bge	r8,r6,bb10 <_realloc_r+0x390>
    b9ac:	1080004c 	andi	r2,r2,1
    b9b0:	103f9e1e 	bne	r2,zero,b82c <__ram_exceptions_end+0xfb00a1e4>
    b9b4:	adbffe17 	ldw	r22,-8(r21)
    b9b8:	00bfff04 	movi	r2,-4
    b9bc:	9dadc83a 	sub	r22,r19,r22
    b9c0:	b1800117 	ldw	r6,4(r22)
    b9c4:	3084703a 	and	r2,r6,r2
    b9c8:	20002026 	beq	r4,zero,ba4c <_realloc_r+0x2cc>
    b9cc:	80af883a 	add	r23,r16,r2
    b9d0:	b96f883a 	add	r23,r23,r5
    b9d4:	21c05f26 	beq	r4,r7,bb54 <_realloc_r+0x3d4>
    b9d8:	b8c01c16 	blt	r23,r3,ba4c <_realloc_r+0x2cc>
    b9dc:	20800317 	ldw	r2,12(r4)
    b9e0:	20c00217 	ldw	r3,8(r4)
    b9e4:	81bfff04 	addi	r6,r16,-4
    b9e8:	01000904 	movi	r4,36
    b9ec:	18800315 	stw	r2,12(r3)
    b9f0:	10c00215 	stw	r3,8(r2)
    b9f4:	b0c00217 	ldw	r3,8(r22)
    b9f8:	b0800317 	ldw	r2,12(r22)
    b9fc:	b4800204 	addi	r18,r22,8
    ba00:	18800315 	stw	r2,12(r3)
    ba04:	10c00215 	stw	r3,8(r2)
    ba08:	21801b36 	bltu	r4,r6,ba78 <_realloc_r+0x2f8>
    ba0c:	008004c4 	movi	r2,19
    ba10:	1180352e 	bgeu	r2,r6,bae8 <_realloc_r+0x368>
    ba14:	a8800017 	ldw	r2,0(r21)
    ba18:	b0800215 	stw	r2,8(r22)
    ba1c:	a8800117 	ldw	r2,4(r21)
    ba20:	b0800315 	stw	r2,12(r22)
    ba24:	008006c4 	movi	r2,27
    ba28:	11807f36 	bltu	r2,r6,bc28 <_realloc_r+0x4a8>
    ba2c:	b0800404 	addi	r2,r22,16
    ba30:	ad400204 	addi	r21,r21,8
    ba34:	00002d06 	br	baec <_realloc_r+0x36c>
    ba38:	adbffe17 	ldw	r22,-8(r21)
    ba3c:	00bfff04 	movi	r2,-4
    ba40:	9dadc83a 	sub	r22,r19,r22
    ba44:	b1000117 	ldw	r4,4(r22)
    ba48:	2084703a 	and	r2,r4,r2
    ba4c:	b03f7726 	beq	r22,zero,b82c <__ram_exceptions_end+0xfb00a1e4>
    ba50:	80af883a 	add	r23,r16,r2
    ba54:	b8ff7516 	blt	r23,r3,b82c <__ram_exceptions_end+0xfb00a1e4>
    ba58:	b0800317 	ldw	r2,12(r22)
    ba5c:	b0c00217 	ldw	r3,8(r22)
    ba60:	81bfff04 	addi	r6,r16,-4
    ba64:	01000904 	movi	r4,36
    ba68:	18800315 	stw	r2,12(r3)
    ba6c:	10c00215 	stw	r3,8(r2)
    ba70:	b4800204 	addi	r18,r22,8
    ba74:	21bfe52e 	bgeu	r4,r6,ba0c <__ram_exceptions_end+0xfb00a3c4>
    ba78:	a80b883a 	mov	r5,r21
    ba7c:	9009883a 	mov	r4,r18
    ba80:	000b6240 	call	b624 <memmove>
    ba84:	b821883a 	mov	r16,r23
    ba88:	b027883a 	mov	r19,r22
    ba8c:	003f8a06 	br	b8b8 <__ram_exceptions_end+0xfb00a270>
    ba90:	300b883a 	mov	r5,r6
    ba94:	dfc00917 	ldw	ra,36(sp)
    ba98:	df000817 	ldw	fp,32(sp)
    ba9c:	ddc00717 	ldw	r23,28(sp)
    baa0:	dd800617 	ldw	r22,24(sp)
    baa4:	dd400517 	ldw	r21,20(sp)
    baa8:	dd000417 	ldw	r20,16(sp)
    baac:	dcc00317 	ldw	r19,12(sp)
    bab0:	dc800217 	ldw	r18,8(sp)
    bab4:	dc400117 	ldw	r17,4(sp)
    bab8:	dc000017 	ldw	r16,0(sp)
    babc:	dec00a04 	addi	sp,sp,40
    bac0:	000ad341 	jmpi	ad34 <_malloc_r>
    bac4:	a8c00017 	ldw	r3,0(r21)
    bac8:	90c00015 	stw	r3,0(r18)
    bacc:	a8c00117 	ldw	r3,4(r21)
    bad0:	90c00115 	stw	r3,4(r18)
    bad4:	00c006c4 	movi	r3,27
    bad8:	19804536 	bltu	r3,r6,bbf0 <_realloc_r+0x470>
    badc:	90800204 	addi	r2,r18,8
    bae0:	a8c00204 	addi	r3,r21,8
    bae4:	003f6306 	br	b874 <__ram_exceptions_end+0xfb00a22c>
    bae8:	9005883a 	mov	r2,r18
    baec:	a8c00017 	ldw	r3,0(r21)
    baf0:	b821883a 	mov	r16,r23
    baf4:	b027883a 	mov	r19,r22
    baf8:	10c00015 	stw	r3,0(r2)
    bafc:	a8c00117 	ldw	r3,4(r21)
    bb00:	10c00115 	stw	r3,4(r2)
    bb04:	a8c00217 	ldw	r3,8(r21)
    bb08:	10c00215 	stw	r3,8(r2)
    bb0c:	003f6a06 	br	b8b8 <__ram_exceptions_end+0xfb00a270>
    bb10:	9c67883a 	add	r19,r19,r17
    bb14:	4445c83a 	sub	r2,r8,r17
    bb18:	e4c00215 	stw	r19,8(fp)
    bb1c:	10800054 	ori	r2,r2,1
    bb20:	98800115 	stw	r2,4(r19)
    bb24:	a8bfff17 	ldw	r2,-4(r21)
    bb28:	a009883a 	mov	r4,r20
    bb2c:	1080004c 	andi	r2,r2,1
    bb30:	1462b03a 	or	r17,r2,r17
    bb34:	ac7fff15 	stw	r17,-4(r21)
    bb38:	000d1280 	call	d128 <__malloc_unlock>
    bb3c:	a805883a 	mov	r2,r21
    bb40:	003f6b06 	br	b8f0 <__ram_exceptions_end+0xfb00a2a8>
    bb44:	a80b883a 	mov	r5,r21
    bb48:	9009883a 	mov	r4,r18
    bb4c:	000b6240 	call	b624 <memmove>
    bb50:	003f4e06 	br	b88c <__ram_exceptions_end+0xfb00a244>
    bb54:	89000404 	addi	r4,r17,16
    bb58:	b93fbc16 	blt	r23,r4,ba4c <__ram_exceptions_end+0xfb00a404>
    bb5c:	b0800317 	ldw	r2,12(r22)
    bb60:	b0c00217 	ldw	r3,8(r22)
    bb64:	81bfff04 	addi	r6,r16,-4
    bb68:	01000904 	movi	r4,36
    bb6c:	18800315 	stw	r2,12(r3)
    bb70:	10c00215 	stw	r3,8(r2)
    bb74:	b4800204 	addi	r18,r22,8
    bb78:	21804336 	bltu	r4,r6,bc88 <_realloc_r+0x508>
    bb7c:	008004c4 	movi	r2,19
    bb80:	11803f2e 	bgeu	r2,r6,bc80 <_realloc_r+0x500>
    bb84:	a8800017 	ldw	r2,0(r21)
    bb88:	b0800215 	stw	r2,8(r22)
    bb8c:	a8800117 	ldw	r2,4(r21)
    bb90:	b0800315 	stw	r2,12(r22)
    bb94:	008006c4 	movi	r2,27
    bb98:	11803f36 	bltu	r2,r6,bc98 <_realloc_r+0x518>
    bb9c:	b0800404 	addi	r2,r22,16
    bba0:	ad400204 	addi	r21,r21,8
    bba4:	a8c00017 	ldw	r3,0(r21)
    bba8:	10c00015 	stw	r3,0(r2)
    bbac:	a8c00117 	ldw	r3,4(r21)
    bbb0:	10c00115 	stw	r3,4(r2)
    bbb4:	a8c00217 	ldw	r3,8(r21)
    bbb8:	10c00215 	stw	r3,8(r2)
    bbbc:	b447883a 	add	r3,r22,r17
    bbc0:	bc45c83a 	sub	r2,r23,r17
    bbc4:	e0c00215 	stw	r3,8(fp)
    bbc8:	10800054 	ori	r2,r2,1
    bbcc:	18800115 	stw	r2,4(r3)
    bbd0:	b0800117 	ldw	r2,4(r22)
    bbd4:	a009883a 	mov	r4,r20
    bbd8:	1080004c 	andi	r2,r2,1
    bbdc:	1462b03a 	or	r17,r2,r17
    bbe0:	b4400115 	stw	r17,4(r22)
    bbe4:	000d1280 	call	d128 <__malloc_unlock>
    bbe8:	9005883a 	mov	r2,r18
    bbec:	003f4006 	br	b8f0 <__ram_exceptions_end+0xfb00a2a8>
    bbf0:	a8c00217 	ldw	r3,8(r21)
    bbf4:	90c00215 	stw	r3,8(r18)
    bbf8:	a8c00317 	ldw	r3,12(r21)
    bbfc:	90c00315 	stw	r3,12(r18)
    bc00:	30801126 	beq	r6,r2,bc48 <_realloc_r+0x4c8>
    bc04:	90800404 	addi	r2,r18,16
    bc08:	a8c00404 	addi	r3,r21,16
    bc0c:	003f1906 	br	b874 <__ram_exceptions_end+0xfb00a22c>
    bc10:	90ffff17 	ldw	r3,-4(r18)
    bc14:	00bfff04 	movi	r2,-4
    bc18:	a825883a 	mov	r18,r21
    bc1c:	1884703a 	and	r2,r3,r2
    bc20:	80a1883a 	add	r16,r16,r2
    bc24:	003f2406 	br	b8b8 <__ram_exceptions_end+0xfb00a270>
    bc28:	a8800217 	ldw	r2,8(r21)
    bc2c:	b0800415 	stw	r2,16(r22)
    bc30:	a8800317 	ldw	r2,12(r21)
    bc34:	b0800515 	stw	r2,20(r22)
    bc38:	31000a26 	beq	r6,r4,bc64 <_realloc_r+0x4e4>
    bc3c:	b0800604 	addi	r2,r22,24
    bc40:	ad400404 	addi	r21,r21,16
    bc44:	003fa906 	br	baec <__ram_exceptions_end+0xfb00a4a4>
    bc48:	a9000417 	ldw	r4,16(r21)
    bc4c:	90800604 	addi	r2,r18,24
    bc50:	a8c00604 	addi	r3,r21,24
    bc54:	91000415 	stw	r4,16(r18)
    bc58:	a9000517 	ldw	r4,20(r21)
    bc5c:	91000515 	stw	r4,20(r18)
    bc60:	003f0406 	br	b874 <__ram_exceptions_end+0xfb00a22c>
    bc64:	a8c00417 	ldw	r3,16(r21)
    bc68:	ad400604 	addi	r21,r21,24
    bc6c:	b0800804 	addi	r2,r22,32
    bc70:	b0c00615 	stw	r3,24(r22)
    bc74:	a8ffff17 	ldw	r3,-4(r21)
    bc78:	b0c00715 	stw	r3,28(r22)
    bc7c:	003f9b06 	br	baec <__ram_exceptions_end+0xfb00a4a4>
    bc80:	9005883a 	mov	r2,r18
    bc84:	003fc706 	br	bba4 <__ram_exceptions_end+0xfb00a55c>
    bc88:	a80b883a 	mov	r5,r21
    bc8c:	9009883a 	mov	r4,r18
    bc90:	000b6240 	call	b624 <memmove>
    bc94:	003fc906 	br	bbbc <__ram_exceptions_end+0xfb00a574>
    bc98:	a8800217 	ldw	r2,8(r21)
    bc9c:	b0800415 	stw	r2,16(r22)
    bca0:	a8800317 	ldw	r2,12(r21)
    bca4:	b0800515 	stw	r2,20(r22)
    bca8:	31000726 	beq	r6,r4,bcc8 <_realloc_r+0x548>
    bcac:	b0800604 	addi	r2,r22,24
    bcb0:	ad400404 	addi	r21,r21,16
    bcb4:	003fbb06 	br	bba4 <__ram_exceptions_end+0xfb00a55c>
    bcb8:	a009883a 	mov	r4,r20
    bcbc:	000d1280 	call	d128 <__malloc_unlock>
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	003f0a06 	br	b8f0 <__ram_exceptions_end+0xfb00a2a8>
    bcc8:	a8c00417 	ldw	r3,16(r21)
    bccc:	ad400604 	addi	r21,r21,24
    bcd0:	b0800804 	addi	r2,r22,32
    bcd4:	b0c00615 	stw	r3,24(r22)
    bcd8:	a8ffff17 	ldw	r3,-4(r21)
    bcdc:	b0c00715 	stw	r3,28(r22)
    bce0:	003fb006 	br	bba4 <__ram_exceptions_end+0xfb00a55c>

0000bce4 <_sbrk_r>:
    bce4:	defffd04 	addi	sp,sp,-12
    bce8:	dc000015 	stw	r16,0(sp)
    bcec:	04000074 	movhi	r16,1
    bcf0:	dc400115 	stw	r17,4(sp)
    bcf4:	841a3204 	addi	r16,r16,26824
    bcf8:	2023883a 	mov	r17,r4
    bcfc:	2809883a 	mov	r4,r5
    bd00:	dfc00215 	stw	ra,8(sp)
    bd04:	80000015 	stw	zero,0(r16)
    bd08:	000d2e80 	call	d2e8 <sbrk>
    bd0c:	00ffffc4 	movi	r3,-1
    bd10:	10c00526 	beq	r2,r3,bd28 <_sbrk_r+0x44>
    bd14:	dfc00217 	ldw	ra,8(sp)
    bd18:	dc400117 	ldw	r17,4(sp)
    bd1c:	dc000017 	ldw	r16,0(sp)
    bd20:	dec00304 	addi	sp,sp,12
    bd24:	f800283a 	ret
    bd28:	80c00017 	ldw	r3,0(r16)
    bd2c:	183ff926 	beq	r3,zero,bd14 <__ram_exceptions_end+0xfb00a6cc>
    bd30:	88c00015 	stw	r3,0(r17)
    bd34:	003ff706 	br	bd14 <__ram_exceptions_end+0xfb00a6cc>

0000bd38 <__sread>:
    bd38:	defffe04 	addi	sp,sp,-8
    bd3c:	dc000015 	stw	r16,0(sp)
    bd40:	2821883a 	mov	r16,r5
    bd44:	2940038f 	ldh	r5,14(r5)
    bd48:	dfc00115 	stw	ra,4(sp)
    bd4c:	000ca780 	call	ca78 <_read_r>
    bd50:	10000716 	blt	r2,zero,bd70 <__sread+0x38>
    bd54:	80c01417 	ldw	r3,80(r16)
    bd58:	1887883a 	add	r3,r3,r2
    bd5c:	80c01415 	stw	r3,80(r16)
    bd60:	dfc00117 	ldw	ra,4(sp)
    bd64:	dc000017 	ldw	r16,0(sp)
    bd68:	dec00204 	addi	sp,sp,8
    bd6c:	f800283a 	ret
    bd70:	80c0030b 	ldhu	r3,12(r16)
    bd74:	18fbffcc 	andi	r3,r3,61439
    bd78:	80c0030d 	sth	r3,12(r16)
    bd7c:	dfc00117 	ldw	ra,4(sp)
    bd80:	dc000017 	ldw	r16,0(sp)
    bd84:	dec00204 	addi	sp,sp,8
    bd88:	f800283a 	ret

0000bd8c <__seofread>:
    bd8c:	0005883a 	mov	r2,zero
    bd90:	f800283a 	ret

0000bd94 <__swrite>:
    bd94:	2880030b 	ldhu	r2,12(r5)
    bd98:	defffb04 	addi	sp,sp,-20
    bd9c:	dcc00315 	stw	r19,12(sp)
    bda0:	dc800215 	stw	r18,8(sp)
    bda4:	dc400115 	stw	r17,4(sp)
    bda8:	dc000015 	stw	r16,0(sp)
    bdac:	dfc00415 	stw	ra,16(sp)
    bdb0:	10c0400c 	andi	r3,r2,256
    bdb4:	2821883a 	mov	r16,r5
    bdb8:	2023883a 	mov	r17,r4
    bdbc:	3025883a 	mov	r18,r6
    bdc0:	3827883a 	mov	r19,r7
    bdc4:	18000526 	beq	r3,zero,bddc <__swrite+0x48>
    bdc8:	2940038f 	ldh	r5,14(r5)
    bdcc:	01c00084 	movi	r7,2
    bdd0:	000d883a 	mov	r6,zero
    bdd4:	000c85c0 	call	c85c <_lseek_r>
    bdd8:	8080030b 	ldhu	r2,12(r16)
    bddc:	8140038f 	ldh	r5,14(r16)
    bde0:	10bbffcc 	andi	r2,r2,61439
    bde4:	980f883a 	mov	r7,r19
    bde8:	900d883a 	mov	r6,r18
    bdec:	8809883a 	mov	r4,r17
    bdf0:	8080030d 	sth	r2,12(r16)
    bdf4:	dfc00417 	ldw	ra,16(sp)
    bdf8:	dcc00317 	ldw	r19,12(sp)
    bdfc:	dc800217 	ldw	r18,8(sp)
    be00:	dc400117 	ldw	r17,4(sp)
    be04:	dc000017 	ldw	r16,0(sp)
    be08:	dec00504 	addi	sp,sp,20
    be0c:	000be741 	jmpi	be74 <_write_r>

0000be10 <__sseek>:
    be10:	defffe04 	addi	sp,sp,-8
    be14:	dc000015 	stw	r16,0(sp)
    be18:	2821883a 	mov	r16,r5
    be1c:	2940038f 	ldh	r5,14(r5)
    be20:	dfc00115 	stw	ra,4(sp)
    be24:	000c85c0 	call	c85c <_lseek_r>
    be28:	00ffffc4 	movi	r3,-1
    be2c:	10c00826 	beq	r2,r3,be50 <__sseek+0x40>
    be30:	80c0030b 	ldhu	r3,12(r16)
    be34:	80801415 	stw	r2,80(r16)
    be38:	18c40014 	ori	r3,r3,4096
    be3c:	80c0030d 	sth	r3,12(r16)
    be40:	dfc00117 	ldw	ra,4(sp)
    be44:	dc000017 	ldw	r16,0(sp)
    be48:	dec00204 	addi	sp,sp,8
    be4c:	f800283a 	ret
    be50:	80c0030b 	ldhu	r3,12(r16)
    be54:	18fbffcc 	andi	r3,r3,61439
    be58:	80c0030d 	sth	r3,12(r16)
    be5c:	dfc00117 	ldw	ra,4(sp)
    be60:	dc000017 	ldw	r16,0(sp)
    be64:	dec00204 	addi	sp,sp,8
    be68:	f800283a 	ret

0000be6c <__sclose>:
    be6c:	2940038f 	ldh	r5,14(r5)
    be70:	000c0281 	jmpi	c028 <_close_r>

0000be74 <_write_r>:
    be74:	defffd04 	addi	sp,sp,-12
    be78:	2805883a 	mov	r2,r5
    be7c:	dc000015 	stw	r16,0(sp)
    be80:	04000074 	movhi	r16,1
    be84:	dc400115 	stw	r17,4(sp)
    be88:	300b883a 	mov	r5,r6
    be8c:	841a3204 	addi	r16,r16,26824
    be90:	2023883a 	mov	r17,r4
    be94:	380d883a 	mov	r6,r7
    be98:	1009883a 	mov	r4,r2
    be9c:	dfc00215 	stw	ra,8(sp)
    bea0:	80000015 	stw	zero,0(r16)
    bea4:	000d3d40 	call	d3d4 <write>
    bea8:	00ffffc4 	movi	r3,-1
    beac:	10c00526 	beq	r2,r3,bec4 <_write_r+0x50>
    beb0:	dfc00217 	ldw	ra,8(sp)
    beb4:	dc400117 	ldw	r17,4(sp)
    beb8:	dc000017 	ldw	r16,0(sp)
    bebc:	dec00304 	addi	sp,sp,12
    bec0:	f800283a 	ret
    bec4:	80c00017 	ldw	r3,0(r16)
    bec8:	183ff926 	beq	r3,zero,beb0 <__ram_exceptions_end+0xfb00a868>
    becc:	88c00015 	stw	r3,0(r17)
    bed0:	003ff706 	br	beb0 <__ram_exceptions_end+0xfb00a868>

0000bed4 <__swsetup_r>:
    bed4:	00800074 	movhi	r2,1
    bed8:	defffd04 	addi	sp,sp,-12
    bedc:	10934a04 	addi	r2,r2,19752
    bee0:	dc400115 	stw	r17,4(sp)
    bee4:	2023883a 	mov	r17,r4
    bee8:	11000017 	ldw	r4,0(r2)
    beec:	dc000015 	stw	r16,0(sp)
    bef0:	dfc00215 	stw	ra,8(sp)
    bef4:	2821883a 	mov	r16,r5
    bef8:	20000226 	beq	r4,zero,bf04 <__swsetup_r+0x30>
    befc:	20800e17 	ldw	r2,56(r4)
    bf00:	10003126 	beq	r2,zero,bfc8 <__swsetup_r+0xf4>
    bf04:	8080030b 	ldhu	r2,12(r16)
    bf08:	10c0020c 	andi	r3,r2,8
    bf0c:	1009883a 	mov	r4,r2
    bf10:	18000f26 	beq	r3,zero,bf50 <__swsetup_r+0x7c>
    bf14:	80c00417 	ldw	r3,16(r16)
    bf18:	18001526 	beq	r3,zero,bf70 <__swsetup_r+0x9c>
    bf1c:	1100004c 	andi	r4,r2,1
    bf20:	20001c1e 	bne	r4,zero,bf94 <__swsetup_r+0xc0>
    bf24:	1080008c 	andi	r2,r2,2
    bf28:	1000291e 	bne	r2,zero,bfd0 <__swsetup_r+0xfc>
    bf2c:	80800517 	ldw	r2,20(r16)
    bf30:	80800215 	stw	r2,8(r16)
    bf34:	18001c26 	beq	r3,zero,bfa8 <__swsetup_r+0xd4>
    bf38:	0005883a 	mov	r2,zero
    bf3c:	dfc00217 	ldw	ra,8(sp)
    bf40:	dc400117 	ldw	r17,4(sp)
    bf44:	dc000017 	ldw	r16,0(sp)
    bf48:	dec00304 	addi	sp,sp,12
    bf4c:	f800283a 	ret
    bf50:	2080040c 	andi	r2,r4,16
    bf54:	10002e26 	beq	r2,zero,c010 <__swsetup_r+0x13c>
    bf58:	2080010c 	andi	r2,r4,4
    bf5c:	10001e1e 	bne	r2,zero,bfd8 <__swsetup_r+0x104>
    bf60:	80c00417 	ldw	r3,16(r16)
    bf64:	20800214 	ori	r2,r4,8
    bf68:	8080030d 	sth	r2,12(r16)
    bf6c:	183feb1e 	bne	r3,zero,bf1c <__ram_exceptions_end+0xfb00a8d4>
    bf70:	1100a00c 	andi	r4,r2,640
    bf74:	01408004 	movi	r5,512
    bf78:	217fe826 	beq	r4,r5,bf1c <__ram_exceptions_end+0xfb00a8d4>
    bf7c:	800b883a 	mov	r5,r16
    bf80:	8809883a 	mov	r4,r17
    bf84:	000c8bc0 	call	c8bc <__smakebuf_r>
    bf88:	8080030b 	ldhu	r2,12(r16)
    bf8c:	80c00417 	ldw	r3,16(r16)
    bf90:	003fe206 	br	bf1c <__ram_exceptions_end+0xfb00a8d4>
    bf94:	80800517 	ldw	r2,20(r16)
    bf98:	80000215 	stw	zero,8(r16)
    bf9c:	0085c83a 	sub	r2,zero,r2
    bfa0:	80800615 	stw	r2,24(r16)
    bfa4:	183fe41e 	bne	r3,zero,bf38 <__ram_exceptions_end+0xfb00a8f0>
    bfa8:	80c0030b 	ldhu	r3,12(r16)
    bfac:	0005883a 	mov	r2,zero
    bfb0:	1900200c 	andi	r4,r3,128
    bfb4:	203fe126 	beq	r4,zero,bf3c <__ram_exceptions_end+0xfb00a8f4>
    bfb8:	18c01014 	ori	r3,r3,64
    bfbc:	80c0030d 	sth	r3,12(r16)
    bfc0:	00bfffc4 	movi	r2,-1
    bfc4:	003fdd06 	br	bf3c <__ram_exceptions_end+0xfb00a8f4>
    bfc8:	000a6a00 	call	a6a0 <__sinit>
    bfcc:	003fcd06 	br	bf04 <__ram_exceptions_end+0xfb00a8bc>
    bfd0:	0005883a 	mov	r2,zero
    bfd4:	003fd606 	br	bf30 <__ram_exceptions_end+0xfb00a8e8>
    bfd8:	81400c17 	ldw	r5,48(r16)
    bfdc:	28000626 	beq	r5,zero,bff8 <__swsetup_r+0x124>
    bfe0:	80801004 	addi	r2,r16,64
    bfe4:	28800326 	beq	r5,r2,bff4 <__swsetup_r+0x120>
    bfe8:	8809883a 	mov	r4,r17
    bfec:	000c54c0 	call	c54c <_free_r>
    bff0:	8100030b 	ldhu	r4,12(r16)
    bff4:	80000c15 	stw	zero,48(r16)
    bff8:	80c00417 	ldw	r3,16(r16)
    bffc:	00bff6c4 	movi	r2,-37
    c000:	1108703a 	and	r4,r2,r4
    c004:	80000115 	stw	zero,4(r16)
    c008:	80c00015 	stw	r3,0(r16)
    c00c:	003fd506 	br	bf64 <__ram_exceptions_end+0xfb00a91c>
    c010:	00800244 	movi	r2,9
    c014:	88800015 	stw	r2,0(r17)
    c018:	20801014 	ori	r2,r4,64
    c01c:	8080030d 	sth	r2,12(r16)
    c020:	00bfffc4 	movi	r2,-1
    c024:	003fc506 	br	bf3c <__ram_exceptions_end+0xfb00a8f4>

0000c028 <_close_r>:
    c028:	defffd04 	addi	sp,sp,-12
    c02c:	dc000015 	stw	r16,0(sp)
    c030:	04000074 	movhi	r16,1
    c034:	dc400115 	stw	r17,4(sp)
    c038:	841a3204 	addi	r16,r16,26824
    c03c:	2023883a 	mov	r17,r4
    c040:	2809883a 	mov	r4,r5
    c044:	dfc00215 	stw	ra,8(sp)
    c048:	80000015 	stw	zero,0(r16)
    c04c:	000cbc40 	call	cbc4 <close>
    c050:	00ffffc4 	movi	r3,-1
    c054:	10c00526 	beq	r2,r3,c06c <_close_r+0x44>
    c058:	dfc00217 	ldw	ra,8(sp)
    c05c:	dc400117 	ldw	r17,4(sp)
    c060:	dc000017 	ldw	r16,0(sp)
    c064:	dec00304 	addi	sp,sp,12
    c068:	f800283a 	ret
    c06c:	80c00017 	ldw	r3,0(r16)
    c070:	183ff926 	beq	r3,zero,c058 <__ram_exceptions_end+0xfb00aa10>
    c074:	88c00015 	stw	r3,0(r17)
    c078:	003ff706 	br	c058 <__ram_exceptions_end+0xfb00aa10>

0000c07c <_fclose_r>:
    c07c:	28003926 	beq	r5,zero,c164 <_fclose_r+0xe8>
    c080:	defffc04 	addi	sp,sp,-16
    c084:	dc400115 	stw	r17,4(sp)
    c088:	dc000015 	stw	r16,0(sp)
    c08c:	dfc00315 	stw	ra,12(sp)
    c090:	dc800215 	stw	r18,8(sp)
    c094:	2023883a 	mov	r17,r4
    c098:	2821883a 	mov	r16,r5
    c09c:	20000226 	beq	r4,zero,c0a8 <_fclose_r+0x2c>
    c0a0:	20800e17 	ldw	r2,56(r4)
    c0a4:	10002726 	beq	r2,zero,c144 <_fclose_r+0xc8>
    c0a8:	8080030f 	ldh	r2,12(r16)
    c0ac:	1000071e 	bne	r2,zero,c0cc <_fclose_r+0x50>
    c0b0:	0005883a 	mov	r2,zero
    c0b4:	dfc00317 	ldw	ra,12(sp)
    c0b8:	dc800217 	ldw	r18,8(sp)
    c0bc:	dc400117 	ldw	r17,4(sp)
    c0c0:	dc000017 	ldw	r16,0(sp)
    c0c4:	dec00404 	addi	sp,sp,16
    c0c8:	f800283a 	ret
    c0cc:	800b883a 	mov	r5,r16
    c0d0:	8809883a 	mov	r4,r17
    c0d4:	000c1800 	call	c180 <__sflush_r>
    c0d8:	1025883a 	mov	r18,r2
    c0dc:	80800b17 	ldw	r2,44(r16)
    c0e0:	10000426 	beq	r2,zero,c0f4 <_fclose_r+0x78>
    c0e4:	81400717 	ldw	r5,28(r16)
    c0e8:	8809883a 	mov	r4,r17
    c0ec:	103ee83a 	callr	r2
    c0f0:	10001616 	blt	r2,zero,c14c <_fclose_r+0xd0>
    c0f4:	8080030b 	ldhu	r2,12(r16)
    c0f8:	1080200c 	andi	r2,r2,128
    c0fc:	1000151e 	bne	r2,zero,c154 <_fclose_r+0xd8>
    c100:	81400c17 	ldw	r5,48(r16)
    c104:	28000526 	beq	r5,zero,c11c <_fclose_r+0xa0>
    c108:	80801004 	addi	r2,r16,64
    c10c:	28800226 	beq	r5,r2,c118 <_fclose_r+0x9c>
    c110:	8809883a 	mov	r4,r17
    c114:	000c54c0 	call	c54c <_free_r>
    c118:	80000c15 	stw	zero,48(r16)
    c11c:	81401117 	ldw	r5,68(r16)
    c120:	28000326 	beq	r5,zero,c130 <_fclose_r+0xb4>
    c124:	8809883a 	mov	r4,r17
    c128:	000c54c0 	call	c54c <_free_r>
    c12c:	80001115 	stw	zero,68(r16)
    c130:	000a6b00 	call	a6b0 <__sfp_lock_acquire>
    c134:	8000030d 	sth	zero,12(r16)
    c138:	000a6b40 	call	a6b4 <__sfp_lock_release>
    c13c:	9005883a 	mov	r2,r18
    c140:	003fdc06 	br	c0b4 <__ram_exceptions_end+0xfb00aa6c>
    c144:	000a6a00 	call	a6a0 <__sinit>
    c148:	003fd706 	br	c0a8 <__ram_exceptions_end+0xfb00aa60>
    c14c:	04bfffc4 	movi	r18,-1
    c150:	003fe806 	br	c0f4 <__ram_exceptions_end+0xfb00aaac>
    c154:	81400417 	ldw	r5,16(r16)
    c158:	8809883a 	mov	r4,r17
    c15c:	000c54c0 	call	c54c <_free_r>
    c160:	003fe706 	br	c100 <__ram_exceptions_end+0xfb00aab8>
    c164:	0005883a 	mov	r2,zero
    c168:	f800283a 	ret

0000c16c <fclose>:
    c16c:	00800074 	movhi	r2,1
    c170:	10934a04 	addi	r2,r2,19752
    c174:	200b883a 	mov	r5,r4
    c178:	11000017 	ldw	r4,0(r2)
    c17c:	000c07c1 	jmpi	c07c <_fclose_r>

0000c180 <__sflush_r>:
    c180:	2880030b 	ldhu	r2,12(r5)
    c184:	defffb04 	addi	sp,sp,-20
    c188:	dcc00315 	stw	r19,12(sp)
    c18c:	dc400115 	stw	r17,4(sp)
    c190:	dfc00415 	stw	ra,16(sp)
    c194:	dc800215 	stw	r18,8(sp)
    c198:	dc000015 	stw	r16,0(sp)
    c19c:	10c0020c 	andi	r3,r2,8
    c1a0:	2823883a 	mov	r17,r5
    c1a4:	2027883a 	mov	r19,r4
    c1a8:	1800311e 	bne	r3,zero,c270 <__sflush_r+0xf0>
    c1ac:	28c00117 	ldw	r3,4(r5)
    c1b0:	10820014 	ori	r2,r2,2048
    c1b4:	2880030d 	sth	r2,12(r5)
    c1b8:	00c04b0e 	bge	zero,r3,c2e8 <__sflush_r+0x168>
    c1bc:	8a000a17 	ldw	r8,40(r17)
    c1c0:	40002326 	beq	r8,zero,c250 <__sflush_r+0xd0>
    c1c4:	9c000017 	ldw	r16,0(r19)
    c1c8:	10c4000c 	andi	r3,r2,4096
    c1cc:	98000015 	stw	zero,0(r19)
    c1d0:	18004826 	beq	r3,zero,c2f4 <__sflush_r+0x174>
    c1d4:	89801417 	ldw	r6,80(r17)
    c1d8:	10c0010c 	andi	r3,r2,4
    c1dc:	18000626 	beq	r3,zero,c1f8 <__sflush_r+0x78>
    c1e0:	88c00117 	ldw	r3,4(r17)
    c1e4:	88800c17 	ldw	r2,48(r17)
    c1e8:	30cdc83a 	sub	r6,r6,r3
    c1ec:	10000226 	beq	r2,zero,c1f8 <__sflush_r+0x78>
    c1f0:	88800f17 	ldw	r2,60(r17)
    c1f4:	308dc83a 	sub	r6,r6,r2
    c1f8:	89400717 	ldw	r5,28(r17)
    c1fc:	000f883a 	mov	r7,zero
    c200:	9809883a 	mov	r4,r19
    c204:	403ee83a 	callr	r8
    c208:	00ffffc4 	movi	r3,-1
    c20c:	10c04426 	beq	r2,r3,c320 <__sflush_r+0x1a0>
    c210:	88c0030b 	ldhu	r3,12(r17)
    c214:	89000417 	ldw	r4,16(r17)
    c218:	88000115 	stw	zero,4(r17)
    c21c:	197dffcc 	andi	r5,r3,63487
    c220:	8940030d 	sth	r5,12(r17)
    c224:	89000015 	stw	r4,0(r17)
    c228:	18c4000c 	andi	r3,r3,4096
    c22c:	18002c1e 	bne	r3,zero,c2e0 <__sflush_r+0x160>
    c230:	89400c17 	ldw	r5,48(r17)
    c234:	9c000015 	stw	r16,0(r19)
    c238:	28000526 	beq	r5,zero,c250 <__sflush_r+0xd0>
    c23c:	88801004 	addi	r2,r17,64
    c240:	28800226 	beq	r5,r2,c24c <__sflush_r+0xcc>
    c244:	9809883a 	mov	r4,r19
    c248:	000c54c0 	call	c54c <_free_r>
    c24c:	88000c15 	stw	zero,48(r17)
    c250:	0005883a 	mov	r2,zero
    c254:	dfc00417 	ldw	ra,16(sp)
    c258:	dcc00317 	ldw	r19,12(sp)
    c25c:	dc800217 	ldw	r18,8(sp)
    c260:	dc400117 	ldw	r17,4(sp)
    c264:	dc000017 	ldw	r16,0(sp)
    c268:	dec00504 	addi	sp,sp,20
    c26c:	f800283a 	ret
    c270:	2c800417 	ldw	r18,16(r5)
    c274:	903ff626 	beq	r18,zero,c250 <__ram_exceptions_end+0xfb00ac08>
    c278:	2c000017 	ldw	r16,0(r5)
    c27c:	108000cc 	andi	r2,r2,3
    c280:	2c800015 	stw	r18,0(r5)
    c284:	84a1c83a 	sub	r16,r16,r18
    c288:	1000131e 	bne	r2,zero,c2d8 <__sflush_r+0x158>
    c28c:	28800517 	ldw	r2,20(r5)
    c290:	88800215 	stw	r2,8(r17)
    c294:	04000316 	blt	zero,r16,c2a4 <__sflush_r+0x124>
    c298:	003fed06 	br	c250 <__ram_exceptions_end+0xfb00ac08>
    c29c:	90a5883a 	add	r18,r18,r2
    c2a0:	043feb0e 	bge	zero,r16,c250 <__ram_exceptions_end+0xfb00ac08>
    c2a4:	88800917 	ldw	r2,36(r17)
    c2a8:	89400717 	ldw	r5,28(r17)
    c2ac:	800f883a 	mov	r7,r16
    c2b0:	900d883a 	mov	r6,r18
    c2b4:	9809883a 	mov	r4,r19
    c2b8:	103ee83a 	callr	r2
    c2bc:	80a1c83a 	sub	r16,r16,r2
    c2c0:	00bff616 	blt	zero,r2,c29c <__ram_exceptions_end+0xfb00ac54>
    c2c4:	88c0030b 	ldhu	r3,12(r17)
    c2c8:	00bfffc4 	movi	r2,-1
    c2cc:	18c01014 	ori	r3,r3,64
    c2d0:	88c0030d 	sth	r3,12(r17)
    c2d4:	003fdf06 	br	c254 <__ram_exceptions_end+0xfb00ac0c>
    c2d8:	0005883a 	mov	r2,zero
    c2dc:	003fec06 	br	c290 <__ram_exceptions_end+0xfb00ac48>
    c2e0:	88801415 	stw	r2,80(r17)
    c2e4:	003fd206 	br	c230 <__ram_exceptions_end+0xfb00abe8>
    c2e8:	28c00f17 	ldw	r3,60(r5)
    c2ec:	00ffb316 	blt	zero,r3,c1bc <__ram_exceptions_end+0xfb00ab74>
    c2f0:	003fd706 	br	c250 <__ram_exceptions_end+0xfb00ac08>
    c2f4:	89400717 	ldw	r5,28(r17)
    c2f8:	000d883a 	mov	r6,zero
    c2fc:	01c00044 	movi	r7,1
    c300:	9809883a 	mov	r4,r19
    c304:	403ee83a 	callr	r8
    c308:	100d883a 	mov	r6,r2
    c30c:	00bfffc4 	movi	r2,-1
    c310:	30801426 	beq	r6,r2,c364 <__sflush_r+0x1e4>
    c314:	8880030b 	ldhu	r2,12(r17)
    c318:	8a000a17 	ldw	r8,40(r17)
    c31c:	003fae06 	br	c1d8 <__ram_exceptions_end+0xfb00ab90>
    c320:	98c00017 	ldw	r3,0(r19)
    c324:	183fba26 	beq	r3,zero,c210 <__ram_exceptions_end+0xfb00abc8>
    c328:	01000744 	movi	r4,29
    c32c:	19000626 	beq	r3,r4,c348 <__sflush_r+0x1c8>
    c330:	01000584 	movi	r4,22
    c334:	19000426 	beq	r3,r4,c348 <__sflush_r+0x1c8>
    c338:	88c0030b 	ldhu	r3,12(r17)
    c33c:	18c01014 	ori	r3,r3,64
    c340:	88c0030d 	sth	r3,12(r17)
    c344:	003fc306 	br	c254 <__ram_exceptions_end+0xfb00ac0c>
    c348:	8880030b 	ldhu	r2,12(r17)
    c34c:	88c00417 	ldw	r3,16(r17)
    c350:	88000115 	stw	zero,4(r17)
    c354:	10bdffcc 	andi	r2,r2,63487
    c358:	8880030d 	sth	r2,12(r17)
    c35c:	88c00015 	stw	r3,0(r17)
    c360:	003fb306 	br	c230 <__ram_exceptions_end+0xfb00abe8>
    c364:	98800017 	ldw	r2,0(r19)
    c368:	103fea26 	beq	r2,zero,c314 <__ram_exceptions_end+0xfb00accc>
    c36c:	00c00744 	movi	r3,29
    c370:	10c00226 	beq	r2,r3,c37c <__sflush_r+0x1fc>
    c374:	00c00584 	movi	r3,22
    c378:	10c0031e 	bne	r2,r3,c388 <__sflush_r+0x208>
    c37c:	9c000015 	stw	r16,0(r19)
    c380:	0005883a 	mov	r2,zero
    c384:	003fb306 	br	c254 <__ram_exceptions_end+0xfb00ac0c>
    c388:	88c0030b 	ldhu	r3,12(r17)
    c38c:	3005883a 	mov	r2,r6
    c390:	18c01014 	ori	r3,r3,64
    c394:	88c0030d 	sth	r3,12(r17)
    c398:	003fae06 	br	c254 <__ram_exceptions_end+0xfb00ac0c>

0000c39c <_fflush_r>:
    c39c:	defffd04 	addi	sp,sp,-12
    c3a0:	dc000115 	stw	r16,4(sp)
    c3a4:	dfc00215 	stw	ra,8(sp)
    c3a8:	2021883a 	mov	r16,r4
    c3ac:	20000226 	beq	r4,zero,c3b8 <_fflush_r+0x1c>
    c3b0:	20800e17 	ldw	r2,56(r4)
    c3b4:	10000c26 	beq	r2,zero,c3e8 <_fflush_r+0x4c>
    c3b8:	2880030f 	ldh	r2,12(r5)
    c3bc:	1000051e 	bne	r2,zero,c3d4 <_fflush_r+0x38>
    c3c0:	0005883a 	mov	r2,zero
    c3c4:	dfc00217 	ldw	ra,8(sp)
    c3c8:	dc000117 	ldw	r16,4(sp)
    c3cc:	dec00304 	addi	sp,sp,12
    c3d0:	f800283a 	ret
    c3d4:	8009883a 	mov	r4,r16
    c3d8:	dfc00217 	ldw	ra,8(sp)
    c3dc:	dc000117 	ldw	r16,4(sp)
    c3e0:	dec00304 	addi	sp,sp,12
    c3e4:	000c1801 	jmpi	c180 <__sflush_r>
    c3e8:	d9400015 	stw	r5,0(sp)
    c3ec:	000a6a00 	call	a6a0 <__sinit>
    c3f0:	d9400017 	ldw	r5,0(sp)
    c3f4:	003ff006 	br	c3b8 <__ram_exceptions_end+0xfb00ad70>

0000c3f8 <fflush>:
    c3f8:	20000526 	beq	r4,zero,c410 <fflush+0x18>
    c3fc:	00800074 	movhi	r2,1
    c400:	10934a04 	addi	r2,r2,19752
    c404:	200b883a 	mov	r5,r4
    c408:	11000017 	ldw	r4,0(r2)
    c40c:	000c39c1 	jmpi	c39c <_fflush_r>
    c410:	00800074 	movhi	r2,1
    c414:	10934904 	addi	r2,r2,19748
    c418:	11000017 	ldw	r4,0(r2)
    c41c:	01400074 	movhi	r5,1
    c420:	2970e704 	addi	r5,r5,-15460
    c424:	000ac701 	jmpi	ac70 <_fwalk_reent>

0000c428 <_malloc_trim_r>:
    c428:	defffb04 	addi	sp,sp,-20
    c42c:	dcc00315 	stw	r19,12(sp)
    c430:	04c00074 	movhi	r19,1
    c434:	dc800215 	stw	r18,8(sp)
    c438:	dc400115 	stw	r17,4(sp)
    c43c:	dc000015 	stw	r16,0(sp)
    c440:	dfc00415 	stw	ra,16(sp)
    c444:	2821883a 	mov	r16,r5
    c448:	9ccd9304 	addi	r19,r19,13900
    c44c:	2025883a 	mov	r18,r4
    c450:	000d1040 	call	d104 <__malloc_lock>
    c454:	98800217 	ldw	r2,8(r19)
    c458:	14400117 	ldw	r17,4(r2)
    c45c:	00bfff04 	movi	r2,-4
    c460:	88a2703a 	and	r17,r17,r2
    c464:	8c21c83a 	sub	r16,r17,r16
    c468:	8403fbc4 	addi	r16,r16,4079
    c46c:	8020d33a 	srli	r16,r16,12
    c470:	0083ffc4 	movi	r2,4095
    c474:	843fffc4 	addi	r16,r16,-1
    c478:	8020933a 	slli	r16,r16,12
    c47c:	1400060e 	bge	r2,r16,c498 <_malloc_trim_r+0x70>
    c480:	000b883a 	mov	r5,zero
    c484:	9009883a 	mov	r4,r18
    c488:	000bce40 	call	bce4 <_sbrk_r>
    c48c:	98c00217 	ldw	r3,8(r19)
    c490:	1c47883a 	add	r3,r3,r17
    c494:	10c00a26 	beq	r2,r3,c4c0 <_malloc_trim_r+0x98>
    c498:	9009883a 	mov	r4,r18
    c49c:	000d1280 	call	d128 <__malloc_unlock>
    c4a0:	0005883a 	mov	r2,zero
    c4a4:	dfc00417 	ldw	ra,16(sp)
    c4a8:	dcc00317 	ldw	r19,12(sp)
    c4ac:	dc800217 	ldw	r18,8(sp)
    c4b0:	dc400117 	ldw	r17,4(sp)
    c4b4:	dc000017 	ldw	r16,0(sp)
    c4b8:	dec00504 	addi	sp,sp,20
    c4bc:	f800283a 	ret
    c4c0:	040bc83a 	sub	r5,zero,r16
    c4c4:	9009883a 	mov	r4,r18
    c4c8:	000bce40 	call	bce4 <_sbrk_r>
    c4cc:	00ffffc4 	movi	r3,-1
    c4d0:	10c00d26 	beq	r2,r3,c508 <_malloc_trim_r+0xe0>
    c4d4:	00c000b4 	movhi	r3,2
    c4d8:	18f0c504 	addi	r3,r3,-15596
    c4dc:	18800017 	ldw	r2,0(r3)
    c4e0:	99000217 	ldw	r4,8(r19)
    c4e4:	8c23c83a 	sub	r17,r17,r16
    c4e8:	8c400054 	ori	r17,r17,1
    c4ec:	1421c83a 	sub	r16,r2,r16
    c4f0:	24400115 	stw	r17,4(r4)
    c4f4:	9009883a 	mov	r4,r18
    c4f8:	1c000015 	stw	r16,0(r3)
    c4fc:	000d1280 	call	d128 <__malloc_unlock>
    c500:	00800044 	movi	r2,1
    c504:	003fe706 	br	c4a4 <__ram_exceptions_end+0xfb00ae5c>
    c508:	000b883a 	mov	r5,zero
    c50c:	9009883a 	mov	r4,r18
    c510:	000bce40 	call	bce4 <_sbrk_r>
    c514:	99000217 	ldw	r4,8(r19)
    c518:	014003c4 	movi	r5,15
    c51c:	1107c83a 	sub	r3,r2,r4
    c520:	28ffdd0e 	bge	r5,r3,c498 <__ram_exceptions_end+0xfb00ae50>
    c524:	01400074 	movhi	r5,1
    c528:	29534b04 	addi	r5,r5,19756
    c52c:	29400017 	ldw	r5,0(r5)
    c530:	18c00054 	ori	r3,r3,1
    c534:	20c00115 	stw	r3,4(r4)
    c538:	00c000b4 	movhi	r3,2
    c53c:	1145c83a 	sub	r2,r2,r5
    c540:	18f0c504 	addi	r3,r3,-15596
    c544:	18800015 	stw	r2,0(r3)
    c548:	003fd306 	br	c498 <__ram_exceptions_end+0xfb00ae50>

0000c54c <_free_r>:
    c54c:	28004126 	beq	r5,zero,c654 <_free_r+0x108>
    c550:	defffd04 	addi	sp,sp,-12
    c554:	dc400115 	stw	r17,4(sp)
    c558:	dc000015 	stw	r16,0(sp)
    c55c:	2023883a 	mov	r17,r4
    c560:	2821883a 	mov	r16,r5
    c564:	dfc00215 	stw	ra,8(sp)
    c568:	000d1040 	call	d104 <__malloc_lock>
    c56c:	81ffff17 	ldw	r7,-4(r16)
    c570:	00bfff84 	movi	r2,-2
    c574:	01000074 	movhi	r4,1
    c578:	81bffe04 	addi	r6,r16,-8
    c57c:	3884703a 	and	r2,r7,r2
    c580:	210d9304 	addi	r4,r4,13900
    c584:	308b883a 	add	r5,r6,r2
    c588:	2a400117 	ldw	r9,4(r5)
    c58c:	22000217 	ldw	r8,8(r4)
    c590:	00ffff04 	movi	r3,-4
    c594:	48c6703a 	and	r3,r9,r3
    c598:	2a005726 	beq	r5,r8,c6f8 <_free_r+0x1ac>
    c59c:	28c00115 	stw	r3,4(r5)
    c5a0:	39c0004c 	andi	r7,r7,1
    c5a4:	3800091e 	bne	r7,zero,c5cc <_free_r+0x80>
    c5a8:	823ffe17 	ldw	r8,-8(r16)
    c5ac:	22400204 	addi	r9,r4,8
    c5b0:	320dc83a 	sub	r6,r6,r8
    c5b4:	31c00217 	ldw	r7,8(r6)
    c5b8:	1205883a 	add	r2,r2,r8
    c5bc:	3a406526 	beq	r7,r9,c754 <_free_r+0x208>
    c5c0:	32000317 	ldw	r8,12(r6)
    c5c4:	3a000315 	stw	r8,12(r7)
    c5c8:	41c00215 	stw	r7,8(r8)
    c5cc:	28cf883a 	add	r7,r5,r3
    c5d0:	39c00117 	ldw	r7,4(r7)
    c5d4:	39c0004c 	andi	r7,r7,1
    c5d8:	38003a26 	beq	r7,zero,c6c4 <_free_r+0x178>
    c5dc:	10c00054 	ori	r3,r2,1
    c5e0:	30c00115 	stw	r3,4(r6)
    c5e4:	3087883a 	add	r3,r6,r2
    c5e8:	18800015 	stw	r2,0(r3)
    c5ec:	00c07fc4 	movi	r3,511
    c5f0:	18801936 	bltu	r3,r2,c658 <_free_r+0x10c>
    c5f4:	1004d0fa 	srli	r2,r2,3
    c5f8:	01c00044 	movi	r7,1
    c5fc:	21400117 	ldw	r5,4(r4)
    c600:	10c00044 	addi	r3,r2,1
    c604:	18c7883a 	add	r3,r3,r3
    c608:	1005d0ba 	srai	r2,r2,2
    c60c:	18c7883a 	add	r3,r3,r3
    c610:	18c7883a 	add	r3,r3,r3
    c614:	1907883a 	add	r3,r3,r4
    c618:	3884983a 	sll	r2,r7,r2
    c61c:	19c00017 	ldw	r7,0(r3)
    c620:	1a3ffe04 	addi	r8,r3,-8
    c624:	1144b03a 	or	r2,r2,r5
    c628:	32000315 	stw	r8,12(r6)
    c62c:	31c00215 	stw	r7,8(r6)
    c630:	20800115 	stw	r2,4(r4)
    c634:	19800015 	stw	r6,0(r3)
    c638:	39800315 	stw	r6,12(r7)
    c63c:	8809883a 	mov	r4,r17
    c640:	dfc00217 	ldw	ra,8(sp)
    c644:	dc400117 	ldw	r17,4(sp)
    c648:	dc000017 	ldw	r16,0(sp)
    c64c:	dec00304 	addi	sp,sp,12
    c650:	000d1281 	jmpi	d128 <__malloc_unlock>
    c654:	f800283a 	ret
    c658:	100ad27a 	srli	r5,r2,9
    c65c:	00c00104 	movi	r3,4
    c660:	19404a36 	bltu	r3,r5,c78c <_free_r+0x240>
    c664:	100ad1ba 	srli	r5,r2,6
    c668:	28c00e44 	addi	r3,r5,57
    c66c:	18c7883a 	add	r3,r3,r3
    c670:	29400e04 	addi	r5,r5,56
    c674:	18c7883a 	add	r3,r3,r3
    c678:	18c7883a 	add	r3,r3,r3
    c67c:	1909883a 	add	r4,r3,r4
    c680:	20c00017 	ldw	r3,0(r4)
    c684:	01c00074 	movhi	r7,1
    c688:	213ffe04 	addi	r4,r4,-8
    c68c:	39cd9304 	addi	r7,r7,13900
    c690:	20c04426 	beq	r4,r3,c7a4 <_free_r+0x258>
    c694:	01ffff04 	movi	r7,-4
    c698:	19400117 	ldw	r5,4(r3)
    c69c:	29ca703a 	and	r5,r5,r7
    c6a0:	1140022e 	bgeu	r2,r5,c6ac <_free_r+0x160>
    c6a4:	18c00217 	ldw	r3,8(r3)
    c6a8:	20fffb1e 	bne	r4,r3,c698 <__ram_exceptions_end+0xfb00b050>
    c6ac:	19000317 	ldw	r4,12(r3)
    c6b0:	31000315 	stw	r4,12(r6)
    c6b4:	30c00215 	stw	r3,8(r6)
    c6b8:	21800215 	stw	r6,8(r4)
    c6bc:	19800315 	stw	r6,12(r3)
    c6c0:	003fde06 	br	c63c <__ram_exceptions_end+0xfb00aff4>
    c6c4:	29c00217 	ldw	r7,8(r5)
    c6c8:	10c5883a 	add	r2,r2,r3
    c6cc:	00c00074 	movhi	r3,1
    c6d0:	18cd9504 	addi	r3,r3,13908
    c6d4:	38c03b26 	beq	r7,r3,c7c4 <_free_r+0x278>
    c6d8:	2a000317 	ldw	r8,12(r5)
    c6dc:	11400054 	ori	r5,r2,1
    c6e0:	3087883a 	add	r3,r6,r2
    c6e4:	3a000315 	stw	r8,12(r7)
    c6e8:	41c00215 	stw	r7,8(r8)
    c6ec:	31400115 	stw	r5,4(r6)
    c6f0:	18800015 	stw	r2,0(r3)
    c6f4:	003fbd06 	br	c5ec <__ram_exceptions_end+0xfb00afa4>
    c6f8:	39c0004c 	andi	r7,r7,1
    c6fc:	10c5883a 	add	r2,r2,r3
    c700:	3800071e 	bne	r7,zero,c720 <_free_r+0x1d4>
    c704:	81fffe17 	ldw	r7,-8(r16)
    c708:	31cdc83a 	sub	r6,r6,r7
    c70c:	30c00317 	ldw	r3,12(r6)
    c710:	31400217 	ldw	r5,8(r6)
    c714:	11c5883a 	add	r2,r2,r7
    c718:	28c00315 	stw	r3,12(r5)
    c71c:	19400215 	stw	r5,8(r3)
    c720:	10c00054 	ori	r3,r2,1
    c724:	30c00115 	stw	r3,4(r6)
    c728:	00c00074 	movhi	r3,1
    c72c:	18d34c04 	addi	r3,r3,19760
    c730:	18c00017 	ldw	r3,0(r3)
    c734:	21800215 	stw	r6,8(r4)
    c738:	10ffc036 	bltu	r2,r3,c63c <__ram_exceptions_end+0xfb00aff4>
    c73c:	00800074 	movhi	r2,1
    c740:	109a3104 	addi	r2,r2,26820
    c744:	11400017 	ldw	r5,0(r2)
    c748:	8809883a 	mov	r4,r17
    c74c:	000c4280 	call	c428 <_malloc_trim_r>
    c750:	003fba06 	br	c63c <__ram_exceptions_end+0xfb00aff4>
    c754:	28c9883a 	add	r4,r5,r3
    c758:	21000117 	ldw	r4,4(r4)
    c75c:	2100004c 	andi	r4,r4,1
    c760:	2000391e 	bne	r4,zero,c848 <_free_r+0x2fc>
    c764:	29c00217 	ldw	r7,8(r5)
    c768:	29000317 	ldw	r4,12(r5)
    c76c:	1885883a 	add	r2,r3,r2
    c770:	10c00054 	ori	r3,r2,1
    c774:	39000315 	stw	r4,12(r7)
    c778:	21c00215 	stw	r7,8(r4)
    c77c:	30c00115 	stw	r3,4(r6)
    c780:	308d883a 	add	r6,r6,r2
    c784:	30800015 	stw	r2,0(r6)
    c788:	003fac06 	br	c63c <__ram_exceptions_end+0xfb00aff4>
    c78c:	00c00504 	movi	r3,20
    c790:	19401536 	bltu	r3,r5,c7e8 <_free_r+0x29c>
    c794:	28c01704 	addi	r3,r5,92
    c798:	18c7883a 	add	r3,r3,r3
    c79c:	294016c4 	addi	r5,r5,91
    c7a0:	003fb406 	br	c674 <__ram_exceptions_end+0xfb00b02c>
    c7a4:	280bd0ba 	srai	r5,r5,2
    c7a8:	00c00044 	movi	r3,1
    c7ac:	38800117 	ldw	r2,4(r7)
    c7b0:	194a983a 	sll	r5,r3,r5
    c7b4:	2007883a 	mov	r3,r4
    c7b8:	2884b03a 	or	r2,r5,r2
    c7bc:	38800115 	stw	r2,4(r7)
    c7c0:	003fbb06 	br	c6b0 <__ram_exceptions_end+0xfb00b068>
    c7c4:	21800515 	stw	r6,20(r4)
    c7c8:	21800415 	stw	r6,16(r4)
    c7cc:	10c00054 	ori	r3,r2,1
    c7d0:	31c00315 	stw	r7,12(r6)
    c7d4:	31c00215 	stw	r7,8(r6)
    c7d8:	30c00115 	stw	r3,4(r6)
    c7dc:	308d883a 	add	r6,r6,r2
    c7e0:	30800015 	stw	r2,0(r6)
    c7e4:	003f9506 	br	c63c <__ram_exceptions_end+0xfb00aff4>
    c7e8:	00c01504 	movi	r3,84
    c7ec:	19400536 	bltu	r3,r5,c804 <_free_r+0x2b8>
    c7f0:	100ad33a 	srli	r5,r2,12
    c7f4:	28c01bc4 	addi	r3,r5,111
    c7f8:	18c7883a 	add	r3,r3,r3
    c7fc:	29401b84 	addi	r5,r5,110
    c800:	003f9c06 	br	c674 <__ram_exceptions_end+0xfb00b02c>
    c804:	00c05504 	movi	r3,340
    c808:	19400536 	bltu	r3,r5,c820 <_free_r+0x2d4>
    c80c:	100ad3fa 	srli	r5,r2,15
    c810:	28c01e04 	addi	r3,r5,120
    c814:	18c7883a 	add	r3,r3,r3
    c818:	29401dc4 	addi	r5,r5,119
    c81c:	003f9506 	br	c674 <__ram_exceptions_end+0xfb00b02c>
    c820:	00c15504 	movi	r3,1364
    c824:	19400536 	bltu	r3,r5,c83c <_free_r+0x2f0>
    c828:	100ad4ba 	srli	r5,r2,18
    c82c:	28c01f44 	addi	r3,r5,125
    c830:	18c7883a 	add	r3,r3,r3
    c834:	29401f04 	addi	r5,r5,124
    c838:	003f8e06 	br	c674 <__ram_exceptions_end+0xfb00b02c>
    c83c:	00c03f84 	movi	r3,254
    c840:	01401f84 	movi	r5,126
    c844:	003f8b06 	br	c674 <__ram_exceptions_end+0xfb00b02c>
    c848:	10c00054 	ori	r3,r2,1
    c84c:	30c00115 	stw	r3,4(r6)
    c850:	308d883a 	add	r6,r6,r2
    c854:	30800015 	stw	r2,0(r6)
    c858:	003f7806 	br	c63c <__ram_exceptions_end+0xfb00aff4>

0000c85c <_lseek_r>:
    c85c:	defffd04 	addi	sp,sp,-12
    c860:	2805883a 	mov	r2,r5
    c864:	dc000015 	stw	r16,0(sp)
    c868:	04000074 	movhi	r16,1
    c86c:	dc400115 	stw	r17,4(sp)
    c870:	300b883a 	mov	r5,r6
    c874:	841a3204 	addi	r16,r16,26824
    c878:	2023883a 	mov	r17,r4
    c87c:	380d883a 	mov	r6,r7
    c880:	1009883a 	mov	r4,r2
    c884:	dfc00215 	stw	ra,8(sp)
    c888:	80000015 	stw	zero,0(r16)
    c88c:	000cfb40 	call	cfb4 <lseek>
    c890:	00ffffc4 	movi	r3,-1
    c894:	10c00526 	beq	r2,r3,c8ac <_lseek_r+0x50>
    c898:	dfc00217 	ldw	ra,8(sp)
    c89c:	dc400117 	ldw	r17,4(sp)
    c8a0:	dc000017 	ldw	r16,0(sp)
    c8a4:	dec00304 	addi	sp,sp,12
    c8a8:	f800283a 	ret
    c8ac:	80c00017 	ldw	r3,0(r16)
    c8b0:	183ff926 	beq	r3,zero,c898 <__ram_exceptions_end+0xfb00b250>
    c8b4:	88c00015 	stw	r3,0(r17)
    c8b8:	003ff706 	br	c898 <__ram_exceptions_end+0xfb00b250>

0000c8bc <__smakebuf_r>:
    c8bc:	2880030b 	ldhu	r2,12(r5)
    c8c0:	10c0008c 	andi	r3,r2,2
    c8c4:	1800411e 	bne	r3,zero,c9cc <__smakebuf_r+0x110>
    c8c8:	deffec04 	addi	sp,sp,-80
    c8cc:	dc000f15 	stw	r16,60(sp)
    c8d0:	2821883a 	mov	r16,r5
    c8d4:	2940038f 	ldh	r5,14(r5)
    c8d8:	dc401015 	stw	r17,64(sp)
    c8dc:	dfc01315 	stw	ra,76(sp)
    c8e0:	dcc01215 	stw	r19,72(sp)
    c8e4:	dc801115 	stw	r18,68(sp)
    c8e8:	2023883a 	mov	r17,r4
    c8ec:	28001c16 	blt	r5,zero,c960 <__smakebuf_r+0xa4>
    c8f0:	d80d883a 	mov	r6,sp
    c8f4:	000cad80 	call	cad8 <_fstat_r>
    c8f8:	10001816 	blt	r2,zero,c95c <__smakebuf_r+0xa0>
    c8fc:	d8800117 	ldw	r2,4(sp)
    c900:	00e00014 	movui	r3,32768
    c904:	10bc000c 	andi	r2,r2,61440
    c908:	14c80020 	cmpeqi	r19,r2,8192
    c90c:	10c03726 	beq	r2,r3,c9ec <__smakebuf_r+0x130>
    c910:	80c0030b 	ldhu	r3,12(r16)
    c914:	18c20014 	ori	r3,r3,2048
    c918:	80c0030d 	sth	r3,12(r16)
    c91c:	00c80004 	movi	r3,8192
    c920:	10c0521e 	bne	r2,r3,ca6c <__smakebuf_r+0x1b0>
    c924:	8140038f 	ldh	r5,14(r16)
    c928:	8809883a 	mov	r4,r17
    c92c:	000cb340 	call	cb34 <_isatty_r>
    c930:	10004c26 	beq	r2,zero,ca64 <__smakebuf_r+0x1a8>
    c934:	8080030b 	ldhu	r2,12(r16)
    c938:	80c010c4 	addi	r3,r16,67
    c93c:	80c00015 	stw	r3,0(r16)
    c940:	10800054 	ori	r2,r2,1
    c944:	8080030d 	sth	r2,12(r16)
    c948:	00800044 	movi	r2,1
    c94c:	80c00415 	stw	r3,16(r16)
    c950:	80800515 	stw	r2,20(r16)
    c954:	04810004 	movi	r18,1024
    c958:	00000706 	br	c978 <__smakebuf_r+0xbc>
    c95c:	8080030b 	ldhu	r2,12(r16)
    c960:	10c0200c 	andi	r3,r2,128
    c964:	18001f1e 	bne	r3,zero,c9e4 <__smakebuf_r+0x128>
    c968:	04810004 	movi	r18,1024
    c96c:	10820014 	ori	r2,r2,2048
    c970:	8080030d 	sth	r2,12(r16)
    c974:	0027883a 	mov	r19,zero
    c978:	900b883a 	mov	r5,r18
    c97c:	8809883a 	mov	r4,r17
    c980:	000ad340 	call	ad34 <_malloc_r>
    c984:	10002c26 	beq	r2,zero,ca38 <__smakebuf_r+0x17c>
    c988:	80c0030b 	ldhu	r3,12(r16)
    c98c:	01000074 	movhi	r4,1
    c990:	2128d604 	addi	r4,r4,-23720
    c994:	89000f15 	stw	r4,60(r17)
    c998:	18c02014 	ori	r3,r3,128
    c99c:	80c0030d 	sth	r3,12(r16)
    c9a0:	80800015 	stw	r2,0(r16)
    c9a4:	80800415 	stw	r2,16(r16)
    c9a8:	84800515 	stw	r18,20(r16)
    c9ac:	98001a1e 	bne	r19,zero,ca18 <__smakebuf_r+0x15c>
    c9b0:	dfc01317 	ldw	ra,76(sp)
    c9b4:	dcc01217 	ldw	r19,72(sp)
    c9b8:	dc801117 	ldw	r18,68(sp)
    c9bc:	dc401017 	ldw	r17,64(sp)
    c9c0:	dc000f17 	ldw	r16,60(sp)
    c9c4:	dec01404 	addi	sp,sp,80
    c9c8:	f800283a 	ret
    c9cc:	288010c4 	addi	r2,r5,67
    c9d0:	28800015 	stw	r2,0(r5)
    c9d4:	28800415 	stw	r2,16(r5)
    c9d8:	00800044 	movi	r2,1
    c9dc:	28800515 	stw	r2,20(r5)
    c9e0:	f800283a 	ret
    c9e4:	04801004 	movi	r18,64
    c9e8:	003fe006 	br	c96c <__ram_exceptions_end+0xfb00b324>
    c9ec:	81000a17 	ldw	r4,40(r16)
    c9f0:	00c00074 	movhi	r3,1
    c9f4:	18ef8404 	addi	r3,r3,-16880
    c9f8:	20ffc51e 	bne	r4,r3,c910 <__ram_exceptions_end+0xfb00b2c8>
    c9fc:	8080030b 	ldhu	r2,12(r16)
    ca00:	04810004 	movi	r18,1024
    ca04:	84801315 	stw	r18,76(r16)
    ca08:	1484b03a 	or	r2,r2,r18
    ca0c:	8080030d 	sth	r2,12(r16)
    ca10:	0027883a 	mov	r19,zero
    ca14:	003fd806 	br	c978 <__ram_exceptions_end+0xfb00b330>
    ca18:	8140038f 	ldh	r5,14(r16)
    ca1c:	8809883a 	mov	r4,r17
    ca20:	000cb340 	call	cb34 <_isatty_r>
    ca24:	103fe226 	beq	r2,zero,c9b0 <__ram_exceptions_end+0xfb00b368>
    ca28:	8080030b 	ldhu	r2,12(r16)
    ca2c:	10800054 	ori	r2,r2,1
    ca30:	8080030d 	sth	r2,12(r16)
    ca34:	003fde06 	br	c9b0 <__ram_exceptions_end+0xfb00b368>
    ca38:	8080030b 	ldhu	r2,12(r16)
    ca3c:	10c0800c 	andi	r3,r2,512
    ca40:	183fdb1e 	bne	r3,zero,c9b0 <__ram_exceptions_end+0xfb00b368>
    ca44:	10800094 	ori	r2,r2,2
    ca48:	80c010c4 	addi	r3,r16,67
    ca4c:	8080030d 	sth	r2,12(r16)
    ca50:	00800044 	movi	r2,1
    ca54:	80c00015 	stw	r3,0(r16)
    ca58:	80c00415 	stw	r3,16(r16)
    ca5c:	80800515 	stw	r2,20(r16)
    ca60:	003fd306 	br	c9b0 <__ram_exceptions_end+0xfb00b368>
    ca64:	04810004 	movi	r18,1024
    ca68:	003fc306 	br	c978 <__ram_exceptions_end+0xfb00b330>
    ca6c:	0027883a 	mov	r19,zero
    ca70:	04810004 	movi	r18,1024
    ca74:	003fc006 	br	c978 <__ram_exceptions_end+0xfb00b330>

0000ca78 <_read_r>:
    ca78:	defffd04 	addi	sp,sp,-12
    ca7c:	2805883a 	mov	r2,r5
    ca80:	dc000015 	stw	r16,0(sp)
    ca84:	04000074 	movhi	r16,1
    ca88:	dc400115 	stw	r17,4(sp)
    ca8c:	300b883a 	mov	r5,r6
    ca90:	841a3204 	addi	r16,r16,26824
    ca94:	2023883a 	mov	r17,r4
    ca98:	380d883a 	mov	r6,r7
    ca9c:	1009883a 	mov	r4,r2
    caa0:	dfc00215 	stw	ra,8(sp)
    caa4:	80000015 	stw	zero,0(r16)
    caa8:	000d1880 	call	d188 <read>
    caac:	00ffffc4 	movi	r3,-1
    cab0:	10c00526 	beq	r2,r3,cac8 <_read_r+0x50>
    cab4:	dfc00217 	ldw	ra,8(sp)
    cab8:	dc400117 	ldw	r17,4(sp)
    cabc:	dc000017 	ldw	r16,0(sp)
    cac0:	dec00304 	addi	sp,sp,12
    cac4:	f800283a 	ret
    cac8:	80c00017 	ldw	r3,0(r16)
    cacc:	183ff926 	beq	r3,zero,cab4 <__ram_exceptions_end+0xfb00b46c>
    cad0:	88c00015 	stw	r3,0(r17)
    cad4:	003ff706 	br	cab4 <__ram_exceptions_end+0xfb00b46c>

0000cad8 <_fstat_r>:
    cad8:	defffd04 	addi	sp,sp,-12
    cadc:	2805883a 	mov	r2,r5
    cae0:	dc000015 	stw	r16,0(sp)
    cae4:	04000074 	movhi	r16,1
    cae8:	dc400115 	stw	r17,4(sp)
    caec:	841a3204 	addi	r16,r16,26824
    caf0:	2023883a 	mov	r17,r4
    caf4:	300b883a 	mov	r5,r6
    caf8:	1009883a 	mov	r4,r2
    cafc:	dfc00215 	stw	ra,8(sp)
    cb00:	80000015 	stw	zero,0(r16)
    cb04:	000ccfc0 	call	ccfc <fstat>
    cb08:	00ffffc4 	movi	r3,-1
    cb0c:	10c00526 	beq	r2,r3,cb24 <_fstat_r+0x4c>
    cb10:	dfc00217 	ldw	ra,8(sp)
    cb14:	dc400117 	ldw	r17,4(sp)
    cb18:	dc000017 	ldw	r16,0(sp)
    cb1c:	dec00304 	addi	sp,sp,12
    cb20:	f800283a 	ret
    cb24:	80c00017 	ldw	r3,0(r16)
    cb28:	183ff926 	beq	r3,zero,cb10 <__ram_exceptions_end+0xfb00b4c8>
    cb2c:	88c00015 	stw	r3,0(r17)
    cb30:	003ff706 	br	cb10 <__ram_exceptions_end+0xfb00b4c8>

0000cb34 <_isatty_r>:
    cb34:	defffd04 	addi	sp,sp,-12
    cb38:	dc000015 	stw	r16,0(sp)
    cb3c:	04000074 	movhi	r16,1
    cb40:	dc400115 	stw	r17,4(sp)
    cb44:	841a3204 	addi	r16,r16,26824
    cb48:	2023883a 	mov	r17,r4
    cb4c:	2809883a 	mov	r4,r5
    cb50:	dfc00215 	stw	ra,8(sp)
    cb54:	80000015 	stw	zero,0(r16)
    cb58:	000cde80 	call	cde8 <isatty>
    cb5c:	00ffffc4 	movi	r3,-1
    cb60:	10c00526 	beq	r2,r3,cb78 <_isatty_r+0x44>
    cb64:	dfc00217 	ldw	ra,8(sp)
    cb68:	dc400117 	ldw	r17,4(sp)
    cb6c:	dc000017 	ldw	r16,0(sp)
    cb70:	dec00304 	addi	sp,sp,12
    cb74:	f800283a 	ret
    cb78:	80c00017 	ldw	r3,0(r16)
    cb7c:	183ff926 	beq	r3,zero,cb64 <__ram_exceptions_end+0xfb00b51c>
    cb80:	88c00015 	stw	r3,0(r17)
    cb84:	003ff706 	br	cb64 <__ram_exceptions_end+0xfb00b51c>

0000cb88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cb88:	defffe04 	addi	sp,sp,-8
    cb8c:	dfc00115 	stw	ra,4(sp)
    cb90:	df000015 	stw	fp,0(sp)
    cb94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cb98:	d0a00a17 	ldw	r2,-32728(gp)
    cb9c:	10000326 	beq	r2,zero,cbac <alt_get_errno+0x24>
    cba0:	d0a00a17 	ldw	r2,-32728(gp)
    cba4:	103ee83a 	callr	r2
    cba8:	00000106 	br	cbb0 <alt_get_errno+0x28>
    cbac:	d0a6ea04 	addi	r2,gp,-25688
}
    cbb0:	e037883a 	mov	sp,fp
    cbb4:	dfc00117 	ldw	ra,4(sp)
    cbb8:	df000017 	ldw	fp,0(sp)
    cbbc:	dec00204 	addi	sp,sp,8
    cbc0:	f800283a 	ret

0000cbc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cbc4:	defffb04 	addi	sp,sp,-20
    cbc8:	dfc00415 	stw	ra,16(sp)
    cbcc:	df000315 	stw	fp,12(sp)
    cbd0:	df000304 	addi	fp,sp,12
    cbd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cbd8:	e0bfff17 	ldw	r2,-4(fp)
    cbdc:	10000616 	blt	r2,zero,cbf8 <close+0x34>
    cbe0:	e0bfff17 	ldw	r2,-4(fp)
    cbe4:	10c00324 	muli	r3,r2,12
    cbe8:	00800074 	movhi	r2,1
    cbec:	108e9f04 	addi	r2,r2,14972
    cbf0:	1885883a 	add	r2,r3,r2
    cbf4:	00000106 	br	cbfc <close+0x38>
    cbf8:	0005883a 	mov	r2,zero
    cbfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cc00:	e0bffd17 	ldw	r2,-12(fp)
    cc04:	10001926 	beq	r2,zero,cc6c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cc08:	e0bffd17 	ldw	r2,-12(fp)
    cc0c:	10800017 	ldw	r2,0(r2)
    cc10:	10800417 	ldw	r2,16(r2)
    cc14:	10000626 	beq	r2,zero,cc30 <close+0x6c>
    cc18:	e0bffd17 	ldw	r2,-12(fp)
    cc1c:	10800017 	ldw	r2,0(r2)
    cc20:	10800417 	ldw	r2,16(r2)
    cc24:	e13ffd17 	ldw	r4,-12(fp)
    cc28:	103ee83a 	callr	r2
    cc2c:	00000106 	br	cc34 <close+0x70>
    cc30:	0005883a 	mov	r2,zero
    cc34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cc38:	e13fff17 	ldw	r4,-4(fp)
    cc3c:	000d2840 	call	d284 <alt_release_fd>
    if (rval < 0)
    cc40:	e0bffe17 	ldw	r2,-8(fp)
    cc44:	1000070e 	bge	r2,zero,cc64 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cc48:	000cb880 	call	cb88 <alt_get_errno>
    cc4c:	1007883a 	mov	r3,r2
    cc50:	e0bffe17 	ldw	r2,-8(fp)
    cc54:	0085c83a 	sub	r2,zero,r2
    cc58:	18800015 	stw	r2,0(r3)
      return -1;
    cc5c:	00bfffc4 	movi	r2,-1
    cc60:	00000706 	br	cc80 <close+0xbc>
    }
    return 0;
    cc64:	0005883a 	mov	r2,zero
    cc68:	00000506 	br	cc80 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cc6c:	000cb880 	call	cb88 <alt_get_errno>
    cc70:	1007883a 	mov	r3,r2
    cc74:	00801444 	movi	r2,81
    cc78:	18800015 	stw	r2,0(r3)
    return -1;
    cc7c:	00bfffc4 	movi	r2,-1
  }
}
    cc80:	e037883a 	mov	sp,fp
    cc84:	dfc00117 	ldw	ra,4(sp)
    cc88:	df000017 	ldw	fp,0(sp)
    cc8c:	dec00204 	addi	sp,sp,8
    cc90:	f800283a 	ret

0000cc94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cc94:	defffc04 	addi	sp,sp,-16
    cc98:	df000315 	stw	fp,12(sp)
    cc9c:	df000304 	addi	fp,sp,12
    cca0:	e13ffd15 	stw	r4,-12(fp)
    cca4:	e17ffe15 	stw	r5,-8(fp)
    cca8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ccac:	e0bfff17 	ldw	r2,-4(fp)
}
    ccb0:	e037883a 	mov	sp,fp
    ccb4:	df000017 	ldw	fp,0(sp)
    ccb8:	dec00104 	addi	sp,sp,4
    ccbc:	f800283a 	ret

0000ccc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccc0:	defffe04 	addi	sp,sp,-8
    ccc4:	dfc00115 	stw	ra,4(sp)
    ccc8:	df000015 	stw	fp,0(sp)
    cccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccd0:	d0a00a17 	ldw	r2,-32728(gp)
    ccd4:	10000326 	beq	r2,zero,cce4 <alt_get_errno+0x24>
    ccd8:	d0a00a17 	ldw	r2,-32728(gp)
    ccdc:	103ee83a 	callr	r2
    cce0:	00000106 	br	cce8 <alt_get_errno+0x28>
    cce4:	d0a6ea04 	addi	r2,gp,-25688
}
    cce8:	e037883a 	mov	sp,fp
    ccec:	dfc00117 	ldw	ra,4(sp)
    ccf0:	df000017 	ldw	fp,0(sp)
    ccf4:	dec00204 	addi	sp,sp,8
    ccf8:	f800283a 	ret

0000ccfc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ccfc:	defffb04 	addi	sp,sp,-20
    cd00:	dfc00415 	stw	ra,16(sp)
    cd04:	df000315 	stw	fp,12(sp)
    cd08:	df000304 	addi	fp,sp,12
    cd0c:	e13ffe15 	stw	r4,-8(fp)
    cd10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cd14:	e0bffe17 	ldw	r2,-8(fp)
    cd18:	10000616 	blt	r2,zero,cd34 <fstat+0x38>
    cd1c:	e0bffe17 	ldw	r2,-8(fp)
    cd20:	10c00324 	muli	r3,r2,12
    cd24:	00800074 	movhi	r2,1
    cd28:	108e9f04 	addi	r2,r2,14972
    cd2c:	1885883a 	add	r2,r3,r2
    cd30:	00000106 	br	cd38 <fstat+0x3c>
    cd34:	0005883a 	mov	r2,zero
    cd38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cd3c:	e0bffd17 	ldw	r2,-12(fp)
    cd40:	10001026 	beq	r2,zero,cd84 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cd44:	e0bffd17 	ldw	r2,-12(fp)
    cd48:	10800017 	ldw	r2,0(r2)
    cd4c:	10800817 	ldw	r2,32(r2)
    cd50:	10000726 	beq	r2,zero,cd70 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cd54:	e0bffd17 	ldw	r2,-12(fp)
    cd58:	10800017 	ldw	r2,0(r2)
    cd5c:	10800817 	ldw	r2,32(r2)
    cd60:	e17fff17 	ldw	r5,-4(fp)
    cd64:	e13ffd17 	ldw	r4,-12(fp)
    cd68:	103ee83a 	callr	r2
    cd6c:	00000a06 	br	cd98 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cd70:	e0bfff17 	ldw	r2,-4(fp)
    cd74:	00c80004 	movi	r3,8192
    cd78:	10c00115 	stw	r3,4(r2)
      return 0;
    cd7c:	0005883a 	mov	r2,zero
    cd80:	00000506 	br	cd98 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cd84:	000ccc00 	call	ccc0 <alt_get_errno>
    cd88:	1007883a 	mov	r3,r2
    cd8c:	00801444 	movi	r2,81
    cd90:	18800015 	stw	r2,0(r3)
    return -1;
    cd94:	00bfffc4 	movi	r2,-1
  }
}
    cd98:	e037883a 	mov	sp,fp
    cd9c:	dfc00117 	ldw	ra,4(sp)
    cda0:	df000017 	ldw	fp,0(sp)
    cda4:	dec00204 	addi	sp,sp,8
    cda8:	f800283a 	ret

0000cdac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdac:	defffe04 	addi	sp,sp,-8
    cdb0:	dfc00115 	stw	ra,4(sp)
    cdb4:	df000015 	stw	fp,0(sp)
    cdb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cdbc:	d0a00a17 	ldw	r2,-32728(gp)
    cdc0:	10000326 	beq	r2,zero,cdd0 <alt_get_errno+0x24>
    cdc4:	d0a00a17 	ldw	r2,-32728(gp)
    cdc8:	103ee83a 	callr	r2
    cdcc:	00000106 	br	cdd4 <alt_get_errno+0x28>
    cdd0:	d0a6ea04 	addi	r2,gp,-25688
}
    cdd4:	e037883a 	mov	sp,fp
    cdd8:	dfc00117 	ldw	ra,4(sp)
    cddc:	df000017 	ldw	fp,0(sp)
    cde0:	dec00204 	addi	sp,sp,8
    cde4:	f800283a 	ret

0000cde8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cde8:	deffed04 	addi	sp,sp,-76
    cdec:	dfc01215 	stw	ra,72(sp)
    cdf0:	df001115 	stw	fp,68(sp)
    cdf4:	df001104 	addi	fp,sp,68
    cdf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cdfc:	e0bfff17 	ldw	r2,-4(fp)
    ce00:	10000616 	blt	r2,zero,ce1c <isatty+0x34>
    ce04:	e0bfff17 	ldw	r2,-4(fp)
    ce08:	10c00324 	muli	r3,r2,12
    ce0c:	00800074 	movhi	r2,1
    ce10:	108e9f04 	addi	r2,r2,14972
    ce14:	1885883a 	add	r2,r3,r2
    ce18:	00000106 	br	ce20 <isatty+0x38>
    ce1c:	0005883a 	mov	r2,zero
    ce20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ce24:	e0bfef17 	ldw	r2,-68(fp)
    ce28:	10000e26 	beq	r2,zero,ce64 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ce2c:	e0bfef17 	ldw	r2,-68(fp)
    ce30:	10800017 	ldw	r2,0(r2)
    ce34:	10800817 	ldw	r2,32(r2)
    ce38:	1000021e 	bne	r2,zero,ce44 <isatty+0x5c>
    {
      return 1;
    ce3c:	00800044 	movi	r2,1
    ce40:	00000d06 	br	ce78 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ce44:	e0bff004 	addi	r2,fp,-64
    ce48:	100b883a 	mov	r5,r2
    ce4c:	e13fff17 	ldw	r4,-4(fp)
    ce50:	000ccfc0 	call	ccfc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ce54:	e0bff117 	ldw	r2,-60(fp)
    ce58:	10880020 	cmpeqi	r2,r2,8192
    ce5c:	10803fcc 	andi	r2,r2,255
    ce60:	00000506 	br	ce78 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce64:	000cdac0 	call	cdac <alt_get_errno>
    ce68:	1007883a 	mov	r3,r2
    ce6c:	00801444 	movi	r2,81
    ce70:	18800015 	stw	r2,0(r3)
    return 0;
    ce74:	0005883a 	mov	r2,zero
  }
}
    ce78:	e037883a 	mov	sp,fp
    ce7c:	dfc00117 	ldw	ra,4(sp)
    ce80:	df000017 	ldw	fp,0(sp)
    ce84:	dec00204 	addi	sp,sp,8
    ce88:	f800283a 	ret

0000ce8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ce8c:	defffc04 	addi	sp,sp,-16
    ce90:	df000315 	stw	fp,12(sp)
    ce94:	df000304 	addi	fp,sp,12
    ce98:	e13ffd15 	stw	r4,-12(fp)
    ce9c:	e17ffe15 	stw	r5,-8(fp)
    cea0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cea4:	e0fffe17 	ldw	r3,-8(fp)
    cea8:	e0bffd17 	ldw	r2,-12(fp)
    ceac:	18800c26 	beq	r3,r2,cee0 <alt_load_section+0x54>
  {
    while( to != end )
    ceb0:	00000806 	br	ced4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ceb4:	e0bffe17 	ldw	r2,-8(fp)
    ceb8:	10c00104 	addi	r3,r2,4
    cebc:	e0fffe15 	stw	r3,-8(fp)
    cec0:	e0fffd17 	ldw	r3,-12(fp)
    cec4:	19000104 	addi	r4,r3,4
    cec8:	e13ffd15 	stw	r4,-12(fp)
    cecc:	18c00017 	ldw	r3,0(r3)
    ced0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ced4:	e0fffe17 	ldw	r3,-8(fp)
    ced8:	e0bfff17 	ldw	r2,-4(fp)
    cedc:	18bff51e 	bne	r3,r2,ceb4 <__ram_exceptions_end+0xfb00b86c>
    {
      *to++ = *from++;
    }
  }
}
    cee0:	0001883a 	nop
    cee4:	e037883a 	mov	sp,fp
    cee8:	df000017 	ldw	fp,0(sp)
    ceec:	dec00104 	addi	sp,sp,4
    cef0:	f800283a 	ret

0000cef4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    cef4:	defffe04 	addi	sp,sp,-8
    cef8:	dfc00115 	stw	ra,4(sp)
    cefc:	df000015 	stw	fp,0(sp)
    cf00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    cf04:	01800074 	movhi	r6,1
    cf08:	31935704 	addi	r6,r6,19804
    cf0c:	01400074 	movhi	r5,1
    cf10:	294c8a04 	addi	r5,r5,12840
    cf14:	01000074 	movhi	r4,1
    cf18:	21135704 	addi	r4,r4,19804
    cf1c:	000ce8c0 	call	ce8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cf20:	01814034 	movhi	r6,1280
    cf24:	31859204 	addi	r6,r6,5704
    cf28:	01414034 	movhi	r5,1280
    cf2c:	29450804 	addi	r5,r5,5152
    cf30:	01000034 	movhi	r4,0
    cf34:	21000004 	addi	r4,r4,0
    cf38:	000ce8c0 	call	ce8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cf3c:	01800074 	movhi	r6,1
    cf40:	318c8a04 	addi	r6,r6,12840
    cf44:	01400074 	movhi	r5,1
    cf48:	29421c04 	addi	r5,r5,2160
    cf4c:	01000074 	movhi	r4,1
    cf50:	21021c04 	addi	r4,r4,2160
    cf54:	000ce8c0 	call	ce8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cf58:	000f8780 	call	f878 <alt_dcache_flush_all>
  alt_icache_flush_all();
    cf5c:	000faf00 	call	faf0 <alt_icache_flush_all>
}
    cf60:	0001883a 	nop
    cf64:	e037883a 	mov	sp,fp
    cf68:	dfc00117 	ldw	ra,4(sp)
    cf6c:	df000017 	ldw	fp,0(sp)
    cf70:	dec00204 	addi	sp,sp,8
    cf74:	f800283a 	ret

0000cf78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf78:	defffe04 	addi	sp,sp,-8
    cf7c:	dfc00115 	stw	ra,4(sp)
    cf80:	df000015 	stw	fp,0(sp)
    cf84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf88:	d0a00a17 	ldw	r2,-32728(gp)
    cf8c:	10000326 	beq	r2,zero,cf9c <alt_get_errno+0x24>
    cf90:	d0a00a17 	ldw	r2,-32728(gp)
    cf94:	103ee83a 	callr	r2
    cf98:	00000106 	br	cfa0 <alt_get_errno+0x28>
    cf9c:	d0a6ea04 	addi	r2,gp,-25688
}
    cfa0:	e037883a 	mov	sp,fp
    cfa4:	dfc00117 	ldw	ra,4(sp)
    cfa8:	df000017 	ldw	fp,0(sp)
    cfac:	dec00204 	addi	sp,sp,8
    cfb0:	f800283a 	ret

0000cfb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cfb4:	defff904 	addi	sp,sp,-28
    cfb8:	dfc00615 	stw	ra,24(sp)
    cfbc:	df000515 	stw	fp,20(sp)
    cfc0:	df000504 	addi	fp,sp,20
    cfc4:	e13ffd15 	stw	r4,-12(fp)
    cfc8:	e17ffe15 	stw	r5,-8(fp)
    cfcc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cfd0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cfd4:	e0bffd17 	ldw	r2,-12(fp)
    cfd8:	10000616 	blt	r2,zero,cff4 <lseek+0x40>
    cfdc:	e0bffd17 	ldw	r2,-12(fp)
    cfe0:	10c00324 	muli	r3,r2,12
    cfe4:	00800074 	movhi	r2,1
    cfe8:	108e9f04 	addi	r2,r2,14972
    cfec:	1885883a 	add	r2,r3,r2
    cff0:	00000106 	br	cff8 <lseek+0x44>
    cff4:	0005883a 	mov	r2,zero
    cff8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    cffc:	e0bffc17 	ldw	r2,-16(fp)
    d000:	10001026 	beq	r2,zero,d044 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d004:	e0bffc17 	ldw	r2,-16(fp)
    d008:	10800017 	ldw	r2,0(r2)
    d00c:	10800717 	ldw	r2,28(r2)
    d010:	10000926 	beq	r2,zero,d038 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d014:	e0bffc17 	ldw	r2,-16(fp)
    d018:	10800017 	ldw	r2,0(r2)
    d01c:	10800717 	ldw	r2,28(r2)
    d020:	e1bfff17 	ldw	r6,-4(fp)
    d024:	e17ffe17 	ldw	r5,-8(fp)
    d028:	e13ffc17 	ldw	r4,-16(fp)
    d02c:	103ee83a 	callr	r2
    d030:	e0bffb15 	stw	r2,-20(fp)
    d034:	00000506 	br	d04c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d038:	00bfde84 	movi	r2,-134
    d03c:	e0bffb15 	stw	r2,-20(fp)
    d040:	00000206 	br	d04c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d044:	00bfebc4 	movi	r2,-81
    d048:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d04c:	e0bffb17 	ldw	r2,-20(fp)
    d050:	1000070e 	bge	r2,zero,d070 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d054:	000cf780 	call	cf78 <alt_get_errno>
    d058:	1007883a 	mov	r3,r2
    d05c:	e0bffb17 	ldw	r2,-20(fp)
    d060:	0085c83a 	sub	r2,zero,r2
    d064:	18800015 	stw	r2,0(r3)
    rc = -1;
    d068:	00bfffc4 	movi	r2,-1
    d06c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d070:	e0bffb17 	ldw	r2,-20(fp)
}
    d074:	e037883a 	mov	sp,fp
    d078:	dfc00117 	ldw	ra,4(sp)
    d07c:	df000017 	ldw	fp,0(sp)
    d080:	dec00204 	addi	sp,sp,8
    d084:	f800283a 	ret

0000d088 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d088:	defffd04 	addi	sp,sp,-12
    d08c:	dfc00215 	stw	ra,8(sp)
    d090:	df000115 	stw	fp,4(sp)
    d094:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d098:	0009883a 	mov	r4,zero
    d09c:	000d5000 	call	d500 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d0a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d0a4:	000d5380 	call	d538 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d0a8:	01800074 	movhi	r6,1
    d0ac:	318c6b04 	addi	r6,r6,12716
    d0b0:	01400074 	movhi	r5,1
    d0b4:	294c6b04 	addi	r5,r5,12716
    d0b8:	01000074 	movhi	r4,1
    d0bc:	210c6b04 	addi	r4,r4,12716
    d0c0:	000fbe80 	call	fbe8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d0c4:	000f9a00 	call	f9a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d0c8:	01000074 	movhi	r4,1
    d0cc:	213e8004 	addi	r4,r4,-1536
    d0d0:	00104d80 	call	104d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d0d4:	d0a6eb17 	ldw	r2,-25684(gp)
    d0d8:	d0e6ec17 	ldw	r3,-25680(gp)
    d0dc:	d126ed17 	ldw	r4,-25676(gp)
    d0e0:	200d883a 	mov	r6,r4
    d0e4:	180b883a 	mov	r5,r3
    d0e8:	1009883a 	mov	r4,r2
    d0ec:	000371c0 	call	371c <main>
    d0f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d0f4:	01000044 	movi	r4,1
    d0f8:	000cbc40 	call	cbc4 <close>
  exit (result);
    d0fc:	e13fff17 	ldw	r4,-4(fp)
    d100:	00104ec0 	call	104ec <exit>

0000d104 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d104:	defffe04 	addi	sp,sp,-8
    d108:	df000115 	stw	fp,4(sp)
    d10c:	df000104 	addi	fp,sp,4
    d110:	e13fff15 	stw	r4,-4(fp)
}
    d114:	0001883a 	nop
    d118:	e037883a 	mov	sp,fp
    d11c:	df000017 	ldw	fp,0(sp)
    d120:	dec00104 	addi	sp,sp,4
    d124:	f800283a 	ret

0000d128 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d128:	defffe04 	addi	sp,sp,-8
    d12c:	df000115 	stw	fp,4(sp)
    d130:	df000104 	addi	fp,sp,4
    d134:	e13fff15 	stw	r4,-4(fp)
}
    d138:	0001883a 	nop
    d13c:	e037883a 	mov	sp,fp
    d140:	df000017 	ldw	fp,0(sp)
    d144:	dec00104 	addi	sp,sp,4
    d148:	f800283a 	ret

0000d14c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d14c:	defffe04 	addi	sp,sp,-8
    d150:	dfc00115 	stw	ra,4(sp)
    d154:	df000015 	stw	fp,0(sp)
    d158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d15c:	d0a00a17 	ldw	r2,-32728(gp)
    d160:	10000326 	beq	r2,zero,d170 <alt_get_errno+0x24>
    d164:	d0a00a17 	ldw	r2,-32728(gp)
    d168:	103ee83a 	callr	r2
    d16c:	00000106 	br	d174 <alt_get_errno+0x28>
    d170:	d0a6ea04 	addi	r2,gp,-25688
}
    d174:	e037883a 	mov	sp,fp
    d178:	dfc00117 	ldw	ra,4(sp)
    d17c:	df000017 	ldw	fp,0(sp)
    d180:	dec00204 	addi	sp,sp,8
    d184:	f800283a 	ret

0000d188 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d188:	defff904 	addi	sp,sp,-28
    d18c:	dfc00615 	stw	ra,24(sp)
    d190:	df000515 	stw	fp,20(sp)
    d194:	df000504 	addi	fp,sp,20
    d198:	e13ffd15 	stw	r4,-12(fp)
    d19c:	e17ffe15 	stw	r5,-8(fp)
    d1a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d1a4:	e0bffd17 	ldw	r2,-12(fp)
    d1a8:	10000616 	blt	r2,zero,d1c4 <read+0x3c>
    d1ac:	e0bffd17 	ldw	r2,-12(fp)
    d1b0:	10c00324 	muli	r3,r2,12
    d1b4:	00800074 	movhi	r2,1
    d1b8:	108e9f04 	addi	r2,r2,14972
    d1bc:	1885883a 	add	r2,r3,r2
    d1c0:	00000106 	br	d1c8 <read+0x40>
    d1c4:	0005883a 	mov	r2,zero
    d1c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d1cc:	e0bffb17 	ldw	r2,-20(fp)
    d1d0:	10002226 	beq	r2,zero,d25c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d1d4:	e0bffb17 	ldw	r2,-20(fp)
    d1d8:	10800217 	ldw	r2,8(r2)
    d1dc:	108000cc 	andi	r2,r2,3
    d1e0:	10800060 	cmpeqi	r2,r2,1
    d1e4:	1000181e 	bne	r2,zero,d248 <read+0xc0>
        (fd->dev->read))
    d1e8:	e0bffb17 	ldw	r2,-20(fp)
    d1ec:	10800017 	ldw	r2,0(r2)
    d1f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d1f4:	10001426 	beq	r2,zero,d248 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d1f8:	e0bffb17 	ldw	r2,-20(fp)
    d1fc:	10800017 	ldw	r2,0(r2)
    d200:	10800517 	ldw	r2,20(r2)
    d204:	e0ffff17 	ldw	r3,-4(fp)
    d208:	180d883a 	mov	r6,r3
    d20c:	e17ffe17 	ldw	r5,-8(fp)
    d210:	e13ffb17 	ldw	r4,-20(fp)
    d214:	103ee83a 	callr	r2
    d218:	e0bffc15 	stw	r2,-16(fp)
    d21c:	e0bffc17 	ldw	r2,-16(fp)
    d220:	1000070e 	bge	r2,zero,d240 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d224:	000d14c0 	call	d14c <alt_get_errno>
    d228:	1007883a 	mov	r3,r2
    d22c:	e0bffc17 	ldw	r2,-16(fp)
    d230:	0085c83a 	sub	r2,zero,r2
    d234:	18800015 	stw	r2,0(r3)
          return -1;
    d238:	00bfffc4 	movi	r2,-1
    d23c:	00000c06 	br	d270 <read+0xe8>
        }
        return rval;
    d240:	e0bffc17 	ldw	r2,-16(fp)
    d244:	00000a06 	br	d270 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d248:	000d14c0 	call	d14c <alt_get_errno>
    d24c:	1007883a 	mov	r3,r2
    d250:	00800344 	movi	r2,13
    d254:	18800015 	stw	r2,0(r3)
    d258:	00000406 	br	d26c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d25c:	000d14c0 	call	d14c <alt_get_errno>
    d260:	1007883a 	mov	r3,r2
    d264:	00801444 	movi	r2,81
    d268:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d26c:	00bfffc4 	movi	r2,-1
}
    d270:	e037883a 	mov	sp,fp
    d274:	dfc00117 	ldw	ra,4(sp)
    d278:	df000017 	ldw	fp,0(sp)
    d27c:	dec00204 	addi	sp,sp,8
    d280:	f800283a 	ret

0000d284 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d284:	defffe04 	addi	sp,sp,-8
    d288:	df000115 	stw	fp,4(sp)
    d28c:	df000104 	addi	fp,sp,4
    d290:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d294:	e0bfff17 	ldw	r2,-4(fp)
    d298:	108000d0 	cmplti	r2,r2,3
    d29c:	10000d1e 	bne	r2,zero,d2d4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d2a0:	00800074 	movhi	r2,1
    d2a4:	108e9f04 	addi	r2,r2,14972
    d2a8:	e0ffff17 	ldw	r3,-4(fp)
    d2ac:	18c00324 	muli	r3,r3,12
    d2b0:	10c5883a 	add	r2,r2,r3
    d2b4:	10800204 	addi	r2,r2,8
    d2b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d2bc:	00800074 	movhi	r2,1
    d2c0:	108e9f04 	addi	r2,r2,14972
    d2c4:	e0ffff17 	ldw	r3,-4(fp)
    d2c8:	18c00324 	muli	r3,r3,12
    d2cc:	10c5883a 	add	r2,r2,r3
    d2d0:	10000015 	stw	zero,0(r2)
  }
}
    d2d4:	0001883a 	nop
    d2d8:	e037883a 	mov	sp,fp
    d2dc:	df000017 	ldw	fp,0(sp)
    d2e0:	dec00104 	addi	sp,sp,4
    d2e4:	f800283a 	ret

0000d2e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d2e8:	defff904 	addi	sp,sp,-28
    d2ec:	df000615 	stw	fp,24(sp)
    d2f0:	df000604 	addi	fp,sp,24
    d2f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d2f8:	0005303a 	rdctl	r2,status
    d2fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d300:	e0fffe17 	ldw	r3,-8(fp)
    d304:	00bfff84 	movi	r2,-2
    d308:	1884703a 	and	r2,r3,r2
    d30c:	1001703a 	wrctl	status,r2
  
  return context;
    d310:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d314:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d318:	d0a00b17 	ldw	r2,-32724(gp)
    d31c:	10c000c4 	addi	r3,r2,3
    d320:	00bfff04 	movi	r2,-4
    d324:	1884703a 	and	r2,r3,r2
    d328:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d32c:	d0e00b17 	ldw	r3,-32724(gp)
    d330:	e0bfff17 	ldw	r2,-4(fp)
    d334:	1887883a 	add	r3,r3,r2
    d338:	00810034 	movhi	r2,1024
    d33c:	10800004 	addi	r2,r2,0
    d340:	10c0062e 	bgeu	r2,r3,d35c <sbrk+0x74>
    d344:	e0bffb17 	ldw	r2,-20(fp)
    d348:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d34c:	e0bffa17 	ldw	r2,-24(fp)
    d350:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d354:	00bfffc4 	movi	r2,-1
    d358:	00000b06 	br	d388 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d35c:	d0a00b17 	ldw	r2,-32724(gp)
    d360:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d364:	d0e00b17 	ldw	r3,-32724(gp)
    d368:	e0bfff17 	ldw	r2,-4(fp)
    d36c:	1885883a 	add	r2,r3,r2
    d370:	d0a00b15 	stw	r2,-32724(gp)
    d374:	e0bffb17 	ldw	r2,-20(fp)
    d378:	e0bffc15 	stw	r2,-16(fp)
    d37c:	e0bffc17 	ldw	r2,-16(fp)
    d380:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d384:	e0bffd17 	ldw	r2,-12(fp)
} 
    d388:	e037883a 	mov	sp,fp
    d38c:	df000017 	ldw	fp,0(sp)
    d390:	dec00104 	addi	sp,sp,4
    d394:	f800283a 	ret

0000d398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d398:	defffe04 	addi	sp,sp,-8
    d39c:	dfc00115 	stw	ra,4(sp)
    d3a0:	df000015 	stw	fp,0(sp)
    d3a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3a8:	d0a00a17 	ldw	r2,-32728(gp)
    d3ac:	10000326 	beq	r2,zero,d3bc <alt_get_errno+0x24>
    d3b0:	d0a00a17 	ldw	r2,-32728(gp)
    d3b4:	103ee83a 	callr	r2
    d3b8:	00000106 	br	d3c0 <alt_get_errno+0x28>
    d3bc:	d0a6ea04 	addi	r2,gp,-25688
}
    d3c0:	e037883a 	mov	sp,fp
    d3c4:	dfc00117 	ldw	ra,4(sp)
    d3c8:	df000017 	ldw	fp,0(sp)
    d3cc:	dec00204 	addi	sp,sp,8
    d3d0:	f800283a 	ret

0000d3d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d3d4:	defff904 	addi	sp,sp,-28
    d3d8:	dfc00615 	stw	ra,24(sp)
    d3dc:	df000515 	stw	fp,20(sp)
    d3e0:	df000504 	addi	fp,sp,20
    d3e4:	e13ffd15 	stw	r4,-12(fp)
    d3e8:	e17ffe15 	stw	r5,-8(fp)
    d3ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d3f0:	e0bffd17 	ldw	r2,-12(fp)
    d3f4:	10000616 	blt	r2,zero,d410 <write+0x3c>
    d3f8:	e0bffd17 	ldw	r2,-12(fp)
    d3fc:	10c00324 	muli	r3,r2,12
    d400:	00800074 	movhi	r2,1
    d404:	108e9f04 	addi	r2,r2,14972
    d408:	1885883a 	add	r2,r3,r2
    d40c:	00000106 	br	d414 <write+0x40>
    d410:	0005883a 	mov	r2,zero
    d414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d418:	e0bffb17 	ldw	r2,-20(fp)
    d41c:	10002126 	beq	r2,zero,d4a4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d420:	e0bffb17 	ldw	r2,-20(fp)
    d424:	10800217 	ldw	r2,8(r2)
    d428:	108000cc 	andi	r2,r2,3
    d42c:	10001826 	beq	r2,zero,d490 <write+0xbc>
    d430:	e0bffb17 	ldw	r2,-20(fp)
    d434:	10800017 	ldw	r2,0(r2)
    d438:	10800617 	ldw	r2,24(r2)
    d43c:	10001426 	beq	r2,zero,d490 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d440:	e0bffb17 	ldw	r2,-20(fp)
    d444:	10800017 	ldw	r2,0(r2)
    d448:	10800617 	ldw	r2,24(r2)
    d44c:	e0ffff17 	ldw	r3,-4(fp)
    d450:	180d883a 	mov	r6,r3
    d454:	e17ffe17 	ldw	r5,-8(fp)
    d458:	e13ffb17 	ldw	r4,-20(fp)
    d45c:	103ee83a 	callr	r2
    d460:	e0bffc15 	stw	r2,-16(fp)
    d464:	e0bffc17 	ldw	r2,-16(fp)
    d468:	1000070e 	bge	r2,zero,d488 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d46c:	000d3980 	call	d398 <alt_get_errno>
    d470:	1007883a 	mov	r3,r2
    d474:	e0bffc17 	ldw	r2,-16(fp)
    d478:	0085c83a 	sub	r2,zero,r2
    d47c:	18800015 	stw	r2,0(r3)
        return -1;
    d480:	00bfffc4 	movi	r2,-1
    d484:	00000c06 	br	d4b8 <write+0xe4>
      }
      return rval;
    d488:	e0bffc17 	ldw	r2,-16(fp)
    d48c:	00000a06 	br	d4b8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d490:	000d3980 	call	d398 <alt_get_errno>
    d494:	1007883a 	mov	r3,r2
    d498:	00800344 	movi	r2,13
    d49c:	18800015 	stw	r2,0(r3)
    d4a0:	00000406 	br	d4b4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d4a4:	000d3980 	call	d398 <alt_get_errno>
    d4a8:	1007883a 	mov	r3,r2
    d4ac:	00801444 	movi	r2,81
    d4b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d4b4:	00bfffc4 	movi	r2,-1
}
    d4b8:	e037883a 	mov	sp,fp
    d4bc:	dfc00117 	ldw	ra,4(sp)
    d4c0:	df000017 	ldw	fp,0(sp)
    d4c4:	dec00204 	addi	sp,sp,8
    d4c8:	f800283a 	ret

0000d4cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d4cc:	defffd04 	addi	sp,sp,-12
    d4d0:	dfc00215 	stw	ra,8(sp)
    d4d4:	df000115 	stw	fp,4(sp)
    d4d8:	df000104 	addi	fp,sp,4
    d4dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d4e0:	d1600704 	addi	r5,gp,-32740
    d4e4:	e13fff17 	ldw	r4,-4(fp)
    d4e8:	000f8fc0 	call	f8fc <alt_dev_llist_insert>
}
    d4ec:	e037883a 	mov	sp,fp
    d4f0:	dfc00117 	ldw	ra,4(sp)
    d4f4:	df000017 	ldw	fp,0(sp)
    d4f8:	dec00204 	addi	sp,sp,8
    d4fc:	f800283a 	ret

0000d500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d500:	defffd04 	addi	sp,sp,-12
    d504:	dfc00215 	stw	ra,8(sp)
    d508:	df000115 	stw	fp,4(sp)
    d50c:	df000104 	addi	fp,sp,4
    d510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    d514:	00101dc0 	call	101dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d518:	00800044 	movi	r2,1
    d51c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d520:	0001883a 	nop
    d524:	e037883a 	mov	sp,fp
    d528:	dfc00117 	ldw	ra,4(sp)
    d52c:	df000017 	ldw	fp,0(sp)
    d530:	dec00204 	addi	sp,sp,8
    d534:	f800283a 	ret

0000d538 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d538:	defffd04 	addi	sp,sp,-12
    d53c:	dfc00215 	stw	ra,8(sp)
    d540:	df000115 	stw	fp,4(sp)
    d544:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    d548:	01c0fa04 	movi	r7,1000
    d54c:	01800044 	movi	r6,1
    d550:	000b883a 	mov	r5,zero
    d554:	01014034 	movhi	r4,1280
    d558:	21060804 	addi	r4,r4,6176
    d55c:	000e35c0 	call	e35c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    d560:	00814034 	movhi	r2,1280
    d564:	10860004 	addi	r2,r2,6144
    d568:	d0a6ee15 	stw	r2,-25672(gp)
    d56c:	00813174 	movhi	r2,1221
    d570:	10ad0004 	addi	r2,r2,-19456
    d574:	d0a6ef15 	stw	r2,-25668(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    d578:	01800404 	movi	r6,16
    d57c:	000b883a 	mov	r5,zero
    d580:	01000074 	movhi	r4,1
    d584:	210f0904 	addi	r4,r4,15396
    d588:	000d9e40 	call	d9e4 <altera_avalon_jtag_uart_init>
    d58c:	01000074 	movhi	r4,1
    d590:	210eff04 	addi	r4,r4,15356
    d594:	000d4cc0 	call	d4cc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_SPI, touch_spi);
    d598:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    d59c:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
    d5a0:	01000074 	movhi	r4,1
    d5a4:	21131704 	addi	r4,r4,19548
    d5a8:	000d4cc0 	call	d4cc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
    d5ac:	00800074 	movhi	r2,1
    d5b0:	10932204 	addi	r2,r2,19592
    d5b4:	10800a17 	ldw	r2,40(r2)
    d5b8:	10800017 	ldw	r2,0(r2)
    d5bc:	1007883a 	mov	r3,r2
    d5c0:	00800074 	movhi	r2,1
    d5c4:	10932204 	addi	r2,r2,19592
    d5c8:	10c00b15 	stw	r3,44(r2)
    d5cc:	00800074 	movhi	r2,1
    d5d0:	10932204 	addi	r2,r2,19592
    d5d4:	10800a17 	ldw	r2,40(r2)
    d5d8:	10800104 	addi	r2,r2,4
    d5dc:	10800017 	ldw	r2,0(r2)
    d5e0:	1007883a 	mov	r3,r2
    d5e4:	00800074 	movhi	r2,1
    d5e8:	10932204 	addi	r2,r2,19592
    d5ec:	10c00c15 	stw	r3,48(r2)
    d5f0:	00800074 	movhi	r2,1
    d5f4:	10932204 	addi	r2,r2,19592
    d5f8:	10800a17 	ldw	r2,40(r2)
    d5fc:	10800204 	addi	r2,r2,8
    d600:	10800017 	ldw	r2,0(r2)
    d604:	10ffffcc 	andi	r3,r2,65535
    d608:	00800074 	movhi	r2,1
    d60c:	10932204 	addi	r2,r2,19592
    d610:	10c00f15 	stw	r3,60(r2)
    d614:	00800074 	movhi	r2,1
    d618:	10932204 	addi	r2,r2,19592
    d61c:	10800a17 	ldw	r2,40(r2)
    d620:	10800204 	addi	r2,r2,8
    d624:	10800017 	ldw	r2,0(r2)
    d628:	1006d43a 	srli	r3,r2,16
    d62c:	00800074 	movhi	r2,1
    d630:	10932204 	addi	r2,r2,19592
    d634:	10c01015 	stw	r3,64(r2)
    d638:	00800074 	movhi	r2,1
    d63c:	10932204 	addi	r2,r2,19592
    d640:	10800a17 	ldw	r2,40(r2)
    d644:	10800304 	addi	r2,r2,12
    d648:	10800017 	ldw	r2,0(r2)
    d64c:	1005d07a 	srai	r2,r2,1
    d650:	10c0004c 	andi	r3,r2,1
    d654:	00800074 	movhi	r2,1
    d658:	10932204 	addi	r2,r2,19592
    d65c:	10c00d15 	stw	r3,52(r2)
    d660:	00800074 	movhi	r2,1
    d664:	10932204 	addi	r2,r2,19592
    d668:	10800a17 	ldw	r2,40(r2)
    d66c:	10800304 	addi	r2,r2,12
    d670:	10800017 	ldw	r2,0(r2)
    d674:	1005d13a 	srai	r2,r2,4
    d678:	10c003cc 	andi	r3,r2,15
    d67c:	00800074 	movhi	r2,1
    d680:	10932204 	addi	r2,r2,19592
    d684:	10c00e15 	stw	r3,56(r2)
    d688:	00800074 	movhi	r2,1
    d68c:	10932204 	addi	r2,r2,19592
    d690:	10800a17 	ldw	r2,40(r2)
    d694:	10800304 	addi	r2,r2,12
    d698:	10800017 	ldw	r2,0(r2)
    d69c:	1005d43a 	srai	r2,r2,16
    d6a0:	e0bfff05 	stb	r2,-4(fp)
    d6a4:	00800074 	movhi	r2,1
    d6a8:	10932204 	addi	r2,r2,19592
    d6ac:	10800a17 	ldw	r2,40(r2)
    d6b0:	10800304 	addi	r2,r2,12
    d6b4:	10800017 	ldw	r2,0(r2)
    d6b8:	1004d63a 	srli	r2,r2,24
    d6bc:	e0bfff45 	stb	r2,-3(fp)
    d6c0:	00800074 	movhi	r2,1
    d6c4:	10932204 	addi	r2,r2,19592
    d6c8:	10800e17 	ldw	r2,56(r2)
    d6cc:	10800058 	cmpnei	r2,r2,1
    d6d0:	1000041e 	bne	r2,zero,d6e4 <alt_sys_init+0x1ac>
    d6d4:	00800074 	movhi	r2,1
    d6d8:	10932204 	addi	r2,r2,19592
    d6dc:	10001115 	stw	zero,68(r2)
    d6e0:	00000e06 	br	d71c <alt_sys_init+0x1e4>
    d6e4:	00800074 	movhi	r2,1
    d6e8:	10932204 	addi	r2,r2,19592
    d6ec:	10800e17 	ldw	r2,56(r2)
    d6f0:	10800098 	cmpnei	r2,r2,2
    d6f4:	1000051e 	bne	r2,zero,d70c <alt_sys_init+0x1d4>
    d6f8:	00800074 	movhi	r2,1
    d6fc:	10932204 	addi	r2,r2,19592
    d700:	00c00044 	movi	r3,1
    d704:	10c01115 	stw	r3,68(r2)
    d708:	00000406 	br	d71c <alt_sys_init+0x1e4>
    d70c:	00800074 	movhi	r2,1
    d710:	10932204 	addi	r2,r2,19592
    d714:	00c00084 	movi	r3,2
    d718:	10c01115 	stw	r3,68(r2)
    d71c:	e0bfff03 	ldbu	r2,-4(fp)
    d720:	00c00804 	movi	r3,32
    d724:	1885c83a 	sub	r2,r3,r2
    d728:	00ffffc4 	movi	r3,-1
    d72c:	1886d83a 	srl	r3,r3,r2
    d730:	00800074 	movhi	r2,1
    d734:	10932204 	addi	r2,r2,19592
    d738:	10c01215 	stw	r3,72(r2)
    d73c:	e0ffff03 	ldbu	r3,-4(fp)
    d740:	00800074 	movhi	r2,1
    d744:	10932204 	addi	r2,r2,19592
    d748:	10801117 	ldw	r2,68(r2)
    d74c:	1887883a 	add	r3,r3,r2
    d750:	00800074 	movhi	r2,1
    d754:	10932204 	addi	r2,r2,19592
    d758:	10c01315 	stw	r3,76(r2)
    d75c:	e0bfff43 	ldbu	r2,-3(fp)
    d760:	00c00804 	movi	r3,32
    d764:	1885c83a 	sub	r2,r3,r2
    d768:	00ffffc4 	movi	r3,-1
    d76c:	1886d83a 	srl	r3,r3,r2
    d770:	00800074 	movhi	r2,1
    d774:	10932204 	addi	r2,r2,19592
    d778:	10c01415 	stw	r3,80(r2)
    d77c:	01000074 	movhi	r4,1
    d780:	21132204 	addi	r4,r4,19592
    d784:	000d4cc0 	call	d4cc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
    d788:	00800074 	movhi	r2,1
    d78c:	10933704 	addi	r2,r2,19676
    d790:	10800a17 	ldw	r2,40(r2)
    d794:	10800017 	ldw	r2,0(r2)
    d798:	10c003cc 	andi	r3,r2,15
    d79c:	00800074 	movhi	r2,1
    d7a0:	10933704 	addi	r2,r2,19676
    d7a4:	10c00b15 	stw	r3,44(r2)
    d7a8:	00800074 	movhi	r2,1
    d7ac:	10933704 	addi	r2,r2,19676
    d7b0:	10800a17 	ldw	r2,40(r2)
    d7b4:	10800017 	ldw	r2,0(r2)
    d7b8:	1005d13a 	srai	r2,r2,4
    d7bc:	10c0004c 	andi	r3,r2,1
    d7c0:	00800074 	movhi	r2,1
    d7c4:	10933704 	addi	r2,r2,19676
    d7c8:	10c00c15 	stw	r3,48(r2)
    d7cc:	00800074 	movhi	r2,1
    d7d0:	10933704 	addi	r2,r2,19676
    d7d4:	10800a17 	ldw	r2,40(r2)
    d7d8:	10800017 	ldw	r2,0(r2)
    d7dc:	1005d17a 	srai	r2,r2,5
    d7e0:	10c0004c 	andi	r3,r2,1
    d7e4:	00800074 	movhi	r2,1
    d7e8:	10933704 	addi	r2,r2,19676
    d7ec:	10c00d15 	stw	r3,52(r2)
    d7f0:	00800074 	movhi	r2,1
    d7f4:	10933704 	addi	r2,r2,19676
    d7f8:	10800a17 	ldw	r2,40(r2)
    d7fc:	10800017 	ldw	r2,0(r2)
    d800:	1005d43a 	srai	r2,r2,16
    d804:	10c003cc 	andi	r3,r2,15
    d808:	00800074 	movhi	r2,1
    d80c:	10933704 	addi	r2,r2,19676
    d810:	10c00e15 	stw	r3,56(r2)
    d814:	00800074 	movhi	r2,1
    d818:	10933704 	addi	r2,r2,19676
    d81c:	10800a17 	ldw	r2,40(r2)
    d820:	10800017 	ldw	r2,0(r2)
    d824:	1005d53a 	srai	r2,r2,20
    d828:	10c0004c 	andi	r3,r2,1
    d82c:	00800074 	movhi	r2,1
    d830:	10933704 	addi	r2,r2,19676
    d834:	10c00f15 	stw	r3,60(r2)
    d838:	00800074 	movhi	r2,1
    d83c:	10933704 	addi	r2,r2,19676
    d840:	10800a17 	ldw	r2,40(r2)
    d844:	10800017 	ldw	r2,0(r2)
    d848:	1005d57a 	srai	r2,r2,21
    d84c:	10c0004c 	andi	r3,r2,1
    d850:	00800074 	movhi	r2,1
    d854:	10933704 	addi	r2,r2,19676
    d858:	10c01015 	stw	r3,64(r2)
    d85c:	01000074 	movhi	r4,1
    d860:	21133704 	addi	r4,r4,19676
    d864:	000d4cc0 	call	d4cc <alt_dev_reg>
}
    d868:	0001883a 	nop
    d86c:	e037883a 	mov	sp,fp
    d870:	dfc00117 	ldw	ra,4(sp)
    d874:	df000017 	ldw	fp,0(sp)
    d878:	dec00204 	addi	sp,sp,8
    d87c:	f800283a 	ret

0000d880 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d880:	defffa04 	addi	sp,sp,-24
    d884:	dfc00515 	stw	ra,20(sp)
    d888:	df000415 	stw	fp,16(sp)
    d88c:	df000404 	addi	fp,sp,16
    d890:	e13ffd15 	stw	r4,-12(fp)
    d894:	e17ffe15 	stw	r5,-8(fp)
    d898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d89c:	e0bffd17 	ldw	r2,-12(fp)
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d8a8:	e0bffc17 	ldw	r2,-16(fp)
    d8ac:	10c00a04 	addi	r3,r2,40
    d8b0:	e0bffd17 	ldw	r2,-12(fp)
    d8b4:	10800217 	ldw	r2,8(r2)
    d8b8:	100f883a 	mov	r7,r2
    d8bc:	e1bfff17 	ldw	r6,-4(fp)
    d8c0:	e17ffe17 	ldw	r5,-8(fp)
    d8c4:	1809883a 	mov	r4,r3
    d8c8:	000dea00 	call	dea0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d8cc:	e037883a 	mov	sp,fp
    d8d0:	dfc00117 	ldw	ra,4(sp)
    d8d4:	df000017 	ldw	fp,0(sp)
    d8d8:	dec00204 	addi	sp,sp,8
    d8dc:	f800283a 	ret

0000d8e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d8e0:	defffa04 	addi	sp,sp,-24
    d8e4:	dfc00515 	stw	ra,20(sp)
    d8e8:	df000415 	stw	fp,16(sp)
    d8ec:	df000404 	addi	fp,sp,16
    d8f0:	e13ffd15 	stw	r4,-12(fp)
    d8f4:	e17ffe15 	stw	r5,-8(fp)
    d8f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d8fc:	e0bffd17 	ldw	r2,-12(fp)
    d900:	10800017 	ldw	r2,0(r2)
    d904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d908:	e0bffc17 	ldw	r2,-16(fp)
    d90c:	10c00a04 	addi	r3,r2,40
    d910:	e0bffd17 	ldw	r2,-12(fp)
    d914:	10800217 	ldw	r2,8(r2)
    d918:	100f883a 	mov	r7,r2
    d91c:	e1bfff17 	ldw	r6,-4(fp)
    d920:	e17ffe17 	ldw	r5,-8(fp)
    d924:	1809883a 	mov	r4,r3
    d928:	000e0bc0 	call	e0bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d92c:	e037883a 	mov	sp,fp
    d930:	dfc00117 	ldw	ra,4(sp)
    d934:	df000017 	ldw	fp,0(sp)
    d938:	dec00204 	addi	sp,sp,8
    d93c:	f800283a 	ret

0000d940 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d940:	defffc04 	addi	sp,sp,-16
    d944:	dfc00315 	stw	ra,12(sp)
    d948:	df000215 	stw	fp,8(sp)
    d94c:	df000204 	addi	fp,sp,8
    d950:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d954:	e0bfff17 	ldw	r2,-4(fp)
    d958:	10800017 	ldw	r2,0(r2)
    d95c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d960:	e0bffe17 	ldw	r2,-8(fp)
    d964:	10c00a04 	addi	r3,r2,40
    d968:	e0bfff17 	ldw	r2,-4(fp)
    d96c:	10800217 	ldw	r2,8(r2)
    d970:	100b883a 	mov	r5,r2
    d974:	1809883a 	mov	r4,r3
    d978:	000dd480 	call	dd48 <altera_avalon_jtag_uart_close>
}
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d990:	defffa04 	addi	sp,sp,-24
    d994:	dfc00515 	stw	ra,20(sp)
    d998:	df000415 	stw	fp,16(sp)
    d99c:	df000404 	addi	fp,sp,16
    d9a0:	e13ffd15 	stw	r4,-12(fp)
    d9a4:	e17ffe15 	stw	r5,-8(fp)
    d9a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d9ac:	e0bffd17 	ldw	r2,-12(fp)
    d9b0:	10800017 	ldw	r2,0(r2)
    d9b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d9b8:	e0bffc17 	ldw	r2,-16(fp)
    d9bc:	10800a04 	addi	r2,r2,40
    d9c0:	e1bfff17 	ldw	r6,-4(fp)
    d9c4:	e17ffe17 	ldw	r5,-8(fp)
    d9c8:	1009883a 	mov	r4,r2
    d9cc:	000ddb00 	call	ddb0 <altera_avalon_jtag_uart_ioctl>
}
    d9d0:	e037883a 	mov	sp,fp
    d9d4:	dfc00117 	ldw	ra,4(sp)
    d9d8:	df000017 	ldw	fp,0(sp)
    d9dc:	dec00204 	addi	sp,sp,8
    d9e0:	f800283a 	ret

0000d9e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d9e4:	defffb04 	addi	sp,sp,-20
    d9e8:	dfc00415 	stw	ra,16(sp)
    d9ec:	df000315 	stw	fp,12(sp)
    d9f0:	df000304 	addi	fp,sp,12
    d9f4:	e13ffd15 	stw	r4,-12(fp)
    d9f8:	e17ffe15 	stw	r5,-8(fp)
    d9fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da00:	e0bffd17 	ldw	r2,-12(fp)
    da04:	00c00044 	movi	r3,1
    da08:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    da0c:	e0bffd17 	ldw	r2,-12(fp)
    da10:	10800017 	ldw	r2,0(r2)
    da14:	10800104 	addi	r2,r2,4
    da18:	1007883a 	mov	r3,r2
    da1c:	e0bffd17 	ldw	r2,-12(fp)
    da20:	10800817 	ldw	r2,32(r2)
    da24:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    da28:	e0bfff17 	ldw	r2,-4(fp)
    da2c:	01800074 	movhi	r6,1
    da30:	31b6a604 	addi	r6,r6,-9576
    da34:	e17ffd17 	ldw	r5,-12(fp)
    da38:	1009883a 	mov	r4,r2
    da3c:	000fc640 	call	fc64 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    da40:	e0bffd17 	ldw	r2,-12(fp)
    da44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    da48:	e0bffd17 	ldw	r2,-12(fp)
    da4c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    da50:	d0e6f117 	ldw	r3,-25660(gp)
    da54:	e1fffd17 	ldw	r7,-12(fp)
    da58:	01800074 	movhi	r6,1
    da5c:	31b72a04 	addi	r6,r6,-9048
    da60:	180b883a 	mov	r5,r3
    da64:	1009883a 	mov	r4,r2
    da68:	000f74c0 	call	f74c <alt_alarm_start>
    da6c:	1000040e 	bge	r2,zero,da80 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    da70:	e0fffd17 	ldw	r3,-12(fp)
    da74:	00a00034 	movhi	r2,32768
    da78:	10bfffc4 	addi	r2,r2,-1
    da7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    da80:	0001883a 	nop
    da84:	e037883a 	mov	sp,fp
    da88:	dfc00117 	ldw	ra,4(sp)
    da8c:	df000017 	ldw	fp,0(sp)
    da90:	dec00204 	addi	sp,sp,8
    da94:	f800283a 	ret

0000da98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    da98:	defff704 	addi	sp,sp,-36
    da9c:	df000815 	stw	fp,32(sp)
    daa0:	df000804 	addi	fp,sp,32
    daa4:	e13ffe15 	stw	r4,-8(fp)
    daa8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    daac:	e0bffe17 	ldw	r2,-8(fp)
    dab0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    dab4:	e0bffa17 	ldw	r2,-24(fp)
    dab8:	10800017 	ldw	r2,0(r2)
    dabc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dac0:	e0bffb17 	ldw	r2,-20(fp)
    dac4:	10800104 	addi	r2,r2,4
    dac8:	10800037 	ldwio	r2,0(r2)
    dacc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dad0:	e0bffc17 	ldw	r2,-16(fp)
    dad4:	1080c00c 	andi	r2,r2,768
    dad8:	10006d26 	beq	r2,zero,dc90 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dadc:	e0bffc17 	ldw	r2,-16(fp)
    dae0:	1080400c 	andi	r2,r2,256
    dae4:	10003526 	beq	r2,zero,dbbc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dae8:	00800074 	movhi	r2,1
    daec:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    daf0:	e0bffa17 	ldw	r2,-24(fp)
    daf4:	10800a17 	ldw	r2,40(r2)
    daf8:	10800044 	addi	r2,r2,1
    dafc:	1081ffcc 	andi	r2,r2,2047
    db00:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    db04:	e0bffa17 	ldw	r2,-24(fp)
    db08:	10c00b17 	ldw	r3,44(r2)
    db0c:	e0bffd17 	ldw	r2,-12(fp)
    db10:	18801526 	beq	r3,r2,db68 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    db14:	e0bffb17 	ldw	r2,-20(fp)
    db18:	10800037 	ldwio	r2,0(r2)
    db1c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    db20:	e0bff817 	ldw	r2,-32(fp)
    db24:	10a0000c 	andi	r2,r2,32768
    db28:	10001126 	beq	r2,zero,db70 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    db2c:	e0bffa17 	ldw	r2,-24(fp)
    db30:	10800a17 	ldw	r2,40(r2)
    db34:	e0fff817 	ldw	r3,-32(fp)
    db38:	1809883a 	mov	r4,r3
    db3c:	e0fffa17 	ldw	r3,-24(fp)
    db40:	1885883a 	add	r2,r3,r2
    db44:	10800e04 	addi	r2,r2,56
    db48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    db4c:	e0bffa17 	ldw	r2,-24(fp)
    db50:	10800a17 	ldw	r2,40(r2)
    db54:	10800044 	addi	r2,r2,1
    db58:	10c1ffcc 	andi	r3,r2,2047
    db5c:	e0bffa17 	ldw	r2,-24(fp)
    db60:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    db64:	003fe206 	br	daf0 <__ram_exceptions_end+0xfb00c4a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    db68:	0001883a 	nop
    db6c:	00000106 	br	db74 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    db70:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    db74:	e0bff817 	ldw	r2,-32(fp)
    db78:	10bfffec 	andhi	r2,r2,65535
    db7c:	10000f26 	beq	r2,zero,dbbc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    db80:	e0bffa17 	ldw	r2,-24(fp)
    db84:	10c00817 	ldw	r3,32(r2)
    db88:	00bfff84 	movi	r2,-2
    db8c:	1886703a 	and	r3,r3,r2
    db90:	e0bffa17 	ldw	r2,-24(fp)
    db94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    db98:	e0bffb17 	ldw	r2,-20(fp)
    db9c:	10800104 	addi	r2,r2,4
    dba0:	1007883a 	mov	r3,r2
    dba4:	e0bffa17 	ldw	r2,-24(fp)
    dba8:	10800817 	ldw	r2,32(r2)
    dbac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dbb0:	e0bffb17 	ldw	r2,-20(fp)
    dbb4:	10800104 	addi	r2,r2,4
    dbb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dbbc:	e0bffc17 	ldw	r2,-16(fp)
    dbc0:	1080800c 	andi	r2,r2,512
    dbc4:	103fbe26 	beq	r2,zero,dac0 <__ram_exceptions_end+0xfb00c478>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dbc8:	e0bffc17 	ldw	r2,-16(fp)
    dbcc:	1004d43a 	srli	r2,r2,16
    dbd0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dbd4:	00001406 	br	dc28 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dbd8:	e0bffb17 	ldw	r2,-20(fp)
    dbdc:	e0fffa17 	ldw	r3,-24(fp)
    dbe0:	18c00d17 	ldw	r3,52(r3)
    dbe4:	e13ffa17 	ldw	r4,-24(fp)
    dbe8:	20c7883a 	add	r3,r4,r3
    dbec:	18c20e04 	addi	r3,r3,2104
    dbf0:	18c00003 	ldbu	r3,0(r3)
    dbf4:	18c03fcc 	andi	r3,r3,255
    dbf8:	18c0201c 	xori	r3,r3,128
    dbfc:	18ffe004 	addi	r3,r3,-128
    dc00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc04:	e0bffa17 	ldw	r2,-24(fp)
    dc08:	10800d17 	ldw	r2,52(r2)
    dc0c:	10800044 	addi	r2,r2,1
    dc10:	10c1ffcc 	andi	r3,r2,2047
    dc14:	e0bffa17 	ldw	r2,-24(fp)
    dc18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dc1c:	e0bff917 	ldw	r2,-28(fp)
    dc20:	10bfffc4 	addi	r2,r2,-1
    dc24:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dc28:	e0bff917 	ldw	r2,-28(fp)
    dc2c:	10000526 	beq	r2,zero,dc44 <altera_avalon_jtag_uart_irq+0x1ac>
    dc30:	e0bffa17 	ldw	r2,-24(fp)
    dc34:	10c00d17 	ldw	r3,52(r2)
    dc38:	e0bffa17 	ldw	r2,-24(fp)
    dc3c:	10800c17 	ldw	r2,48(r2)
    dc40:	18bfe51e 	bne	r3,r2,dbd8 <__ram_exceptions_end+0xfb00c590>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dc44:	e0bff917 	ldw	r2,-28(fp)
    dc48:	103f9d26 	beq	r2,zero,dac0 <__ram_exceptions_end+0xfb00c478>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dc4c:	e0bffa17 	ldw	r2,-24(fp)
    dc50:	10c00817 	ldw	r3,32(r2)
    dc54:	00bfff44 	movi	r2,-3
    dc58:	1886703a 	and	r3,r3,r2
    dc5c:	e0bffa17 	ldw	r2,-24(fp)
    dc60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dc64:	e0bffa17 	ldw	r2,-24(fp)
    dc68:	10800017 	ldw	r2,0(r2)
    dc6c:	10800104 	addi	r2,r2,4
    dc70:	1007883a 	mov	r3,r2
    dc74:	e0bffa17 	ldw	r2,-24(fp)
    dc78:	10800817 	ldw	r2,32(r2)
    dc7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dc80:	e0bffb17 	ldw	r2,-20(fp)
    dc84:	10800104 	addi	r2,r2,4
    dc88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dc8c:	003f8c06 	br	dac0 <__ram_exceptions_end+0xfb00c478>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    dc90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    dc94:	0001883a 	nop
    dc98:	e037883a 	mov	sp,fp
    dc9c:	df000017 	ldw	fp,0(sp)
    dca0:	dec00104 	addi	sp,sp,4
    dca4:	f800283a 	ret

0000dca8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    dca8:	defff804 	addi	sp,sp,-32
    dcac:	df000715 	stw	fp,28(sp)
    dcb0:	df000704 	addi	fp,sp,28
    dcb4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dcb8:	e0bffb17 	ldw	r2,-20(fp)
    dcbc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dcc0:	e0bff917 	ldw	r2,-28(fp)
    dcc4:	10800017 	ldw	r2,0(r2)
    dcc8:	10800104 	addi	r2,r2,4
    dccc:	10800037 	ldwio	r2,0(r2)
    dcd0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dcd4:	e0bffa17 	ldw	r2,-24(fp)
    dcd8:	1081000c 	andi	r2,r2,1024
    dcdc:	10000b26 	beq	r2,zero,dd0c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dce0:	e0bff917 	ldw	r2,-28(fp)
    dce4:	10800017 	ldw	r2,0(r2)
    dce8:	10800104 	addi	r2,r2,4
    dcec:	1007883a 	mov	r3,r2
    dcf0:	e0bff917 	ldw	r2,-28(fp)
    dcf4:	10800817 	ldw	r2,32(r2)
    dcf8:	10810014 	ori	r2,r2,1024
    dcfc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dd00:	e0bff917 	ldw	r2,-28(fp)
    dd04:	10000915 	stw	zero,36(r2)
    dd08:	00000a06 	br	dd34 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dd0c:	e0bff917 	ldw	r2,-28(fp)
    dd10:	10c00917 	ldw	r3,36(r2)
    dd14:	00a00034 	movhi	r2,32768
    dd18:	10bfff04 	addi	r2,r2,-4
    dd1c:	10c00536 	bltu	r2,r3,dd34 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dd20:	e0bff917 	ldw	r2,-28(fp)
    dd24:	10800917 	ldw	r2,36(r2)
    dd28:	10c00044 	addi	r3,r2,1
    dd2c:	e0bff917 	ldw	r2,-28(fp)
    dd30:	10c00915 	stw	r3,36(r2)
    dd34:	d0a6f117 	ldw	r2,-25660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dd38:	e037883a 	mov	sp,fp
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00104 	addi	sp,sp,4
    dd44:	f800283a 	ret

0000dd48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dd48:	defffd04 	addi	sp,sp,-12
    dd4c:	df000215 	stw	fp,8(sp)
    dd50:	df000204 	addi	fp,sp,8
    dd54:	e13ffe15 	stw	r4,-8(fp)
    dd58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dd5c:	00000506 	br	dd74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dd60:	e0bfff17 	ldw	r2,-4(fp)
    dd64:	1090000c 	andi	r2,r2,16384
    dd68:	10000226 	beq	r2,zero,dd74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dd6c:	00bffd44 	movi	r2,-11
    dd70:	00000b06 	br	dda0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dd74:	e0bffe17 	ldw	r2,-8(fp)
    dd78:	10c00d17 	ldw	r3,52(r2)
    dd7c:	e0bffe17 	ldw	r2,-8(fp)
    dd80:	10800c17 	ldw	r2,48(r2)
    dd84:	18800526 	beq	r3,r2,dd9c <altera_avalon_jtag_uart_close+0x54>
    dd88:	e0bffe17 	ldw	r2,-8(fp)
    dd8c:	10c00917 	ldw	r3,36(r2)
    dd90:	e0bffe17 	ldw	r2,-8(fp)
    dd94:	10800117 	ldw	r2,4(r2)
    dd98:	18bff136 	bltu	r3,r2,dd60 <__ram_exceptions_end+0xfb00c718>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dd9c:	0005883a 	mov	r2,zero
}
    dda0:	e037883a 	mov	sp,fp
    dda4:	df000017 	ldw	fp,0(sp)
    dda8:	dec00104 	addi	sp,sp,4
    ddac:	f800283a 	ret

0000ddb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ddb0:	defffa04 	addi	sp,sp,-24
    ddb4:	df000515 	stw	fp,20(sp)
    ddb8:	df000504 	addi	fp,sp,20
    ddbc:	e13ffd15 	stw	r4,-12(fp)
    ddc0:	e17ffe15 	stw	r5,-8(fp)
    ddc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ddc8:	00bff9c4 	movi	r2,-25
    ddcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ddd0:	e0bffe17 	ldw	r2,-8(fp)
    ddd4:	10da8060 	cmpeqi	r3,r2,27137
    ddd8:	1800031e 	bne	r3,zero,dde8 <altera_avalon_jtag_uart_ioctl+0x38>
    dddc:	109a80a0 	cmpeqi	r2,r2,27138
    dde0:	1000181e 	bne	r2,zero,de44 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dde4:	00002906 	br	de8c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dde8:	e0bffd17 	ldw	r2,-12(fp)
    ddec:	10c00117 	ldw	r3,4(r2)
    ddf0:	00a00034 	movhi	r2,32768
    ddf4:	10bfffc4 	addi	r2,r2,-1
    ddf8:	18802126 	beq	r3,r2,de80 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ddfc:	e0bfff17 	ldw	r2,-4(fp)
    de00:	10800017 	ldw	r2,0(r2)
    de04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    de08:	e0bffc17 	ldw	r2,-16(fp)
    de0c:	10800090 	cmplti	r2,r2,2
    de10:	1000061e 	bne	r2,zero,de2c <altera_avalon_jtag_uart_ioctl+0x7c>
    de14:	e0fffc17 	ldw	r3,-16(fp)
    de18:	00a00034 	movhi	r2,32768
    de1c:	10bfffc4 	addi	r2,r2,-1
    de20:	18800226 	beq	r3,r2,de2c <altera_avalon_jtag_uart_ioctl+0x7c>
    de24:	e0bffc17 	ldw	r2,-16(fp)
    de28:	00000206 	br	de34 <altera_avalon_jtag_uart_ioctl+0x84>
    de2c:	00a00034 	movhi	r2,32768
    de30:	10bfff84 	addi	r2,r2,-2
    de34:	e0fffd17 	ldw	r3,-12(fp)
    de38:	18800115 	stw	r2,4(r3)
      rc = 0;
    de3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    de40:	00000f06 	br	de80 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	10c00117 	ldw	r3,4(r2)
    de4c:	00a00034 	movhi	r2,32768
    de50:	10bfffc4 	addi	r2,r2,-1
    de54:	18800c26 	beq	r3,r2,de88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    de58:	e0bffd17 	ldw	r2,-12(fp)
    de5c:	10c00917 	ldw	r3,36(r2)
    de60:	e0bffd17 	ldw	r2,-12(fp)
    de64:	10800117 	ldw	r2,4(r2)
    de68:	1885803a 	cmpltu	r2,r3,r2
    de6c:	10c03fcc 	andi	r3,r2,255
    de70:	e0bfff17 	ldw	r2,-4(fp)
    de74:	10c00015 	stw	r3,0(r2)
      rc = 0;
    de78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    de7c:	00000206 	br	de88 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    de80:	0001883a 	nop
    de84:	00000106 	br	de8c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    de88:	0001883a 	nop

  default:
    break;
  }

  return rc;
    de8c:	e0bffb17 	ldw	r2,-20(fp)
}
    de90:	e037883a 	mov	sp,fp
    de94:	df000017 	ldw	fp,0(sp)
    de98:	dec00104 	addi	sp,sp,4
    de9c:	f800283a 	ret

0000dea0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dea0:	defff304 	addi	sp,sp,-52
    dea4:	dfc00c15 	stw	ra,48(sp)
    dea8:	df000b15 	stw	fp,44(sp)
    deac:	df000b04 	addi	fp,sp,44
    deb0:	e13ffc15 	stw	r4,-16(fp)
    deb4:	e17ffd15 	stw	r5,-12(fp)
    deb8:	e1bffe15 	stw	r6,-8(fp)
    debc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dec0:	e0bffd17 	ldw	r2,-12(fp)
    dec4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dec8:	00004706 	br	dfe8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    decc:	e0bffc17 	ldw	r2,-16(fp)
    ded0:	10800a17 	ldw	r2,40(r2)
    ded4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	10800b17 	ldw	r2,44(r2)
    dee0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dee4:	e0fff717 	ldw	r3,-36(fp)
    dee8:	e0bff817 	ldw	r2,-32(fp)
    deec:	18800536 	bltu	r3,r2,df04 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    def0:	e0fff717 	ldw	r3,-36(fp)
    def4:	e0bff817 	ldw	r2,-32(fp)
    def8:	1885c83a 	sub	r2,r3,r2
    defc:	e0bff615 	stw	r2,-40(fp)
    df00:	00000406 	br	df14 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    df04:	00c20004 	movi	r3,2048
    df08:	e0bff817 	ldw	r2,-32(fp)
    df0c:	1885c83a 	sub	r2,r3,r2
    df10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    df14:	e0bff617 	ldw	r2,-40(fp)
    df18:	10001e26 	beq	r2,zero,df94 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    df1c:	e0fffe17 	ldw	r3,-8(fp)
    df20:	e0bff617 	ldw	r2,-40(fp)
    df24:	1880022e 	bgeu	r3,r2,df30 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    df28:	e0bffe17 	ldw	r2,-8(fp)
    df2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    df30:	e0bffc17 	ldw	r2,-16(fp)
    df34:	10c00e04 	addi	r3,r2,56
    df38:	e0bff817 	ldw	r2,-32(fp)
    df3c:	1885883a 	add	r2,r3,r2
    df40:	e1bff617 	ldw	r6,-40(fp)
    df44:	100b883a 	mov	r5,r2
    df48:	e13ff517 	ldw	r4,-44(fp)
    df4c:	0009f740 	call	9f74 <memcpy>
      ptr   += n;
    df50:	e0fff517 	ldw	r3,-44(fp)
    df54:	e0bff617 	ldw	r2,-40(fp)
    df58:	1885883a 	add	r2,r3,r2
    df5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    df60:	e0fffe17 	ldw	r3,-8(fp)
    df64:	e0bff617 	ldw	r2,-40(fp)
    df68:	1885c83a 	sub	r2,r3,r2
    df6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df70:	e0fff817 	ldw	r3,-32(fp)
    df74:	e0bff617 	ldw	r2,-40(fp)
    df78:	1885883a 	add	r2,r3,r2
    df7c:	10c1ffcc 	andi	r3,r2,2047
    df80:	e0bffc17 	ldw	r2,-16(fp)
    df84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    df88:	e0bffe17 	ldw	r2,-8(fp)
    df8c:	00bfcf16 	blt	zero,r2,decc <__ram_exceptions_end+0xfb00c884>
    df90:	00000106 	br	df98 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    df94:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    df98:	e0fff517 	ldw	r3,-44(fp)
    df9c:	e0bffd17 	ldw	r2,-12(fp)
    dfa0:	1880141e 	bne	r3,r2,dff4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dfa4:	e0bfff17 	ldw	r2,-4(fp)
    dfa8:	1090000c 	andi	r2,r2,16384
    dfac:	1000131e 	bne	r2,zero,dffc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dfb0:	0001883a 	nop
    dfb4:	e0bffc17 	ldw	r2,-16(fp)
    dfb8:	10c00a17 	ldw	r3,40(r2)
    dfbc:	e0bff717 	ldw	r2,-36(fp)
    dfc0:	1880051e 	bne	r3,r2,dfd8 <altera_avalon_jtag_uart_read+0x138>
    dfc4:	e0bffc17 	ldw	r2,-16(fp)
    dfc8:	10c00917 	ldw	r3,36(r2)
    dfcc:	e0bffc17 	ldw	r2,-16(fp)
    dfd0:	10800117 	ldw	r2,4(r2)
    dfd4:	18bff736 	bltu	r3,r2,dfb4 <__ram_exceptions_end+0xfb00c96c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    dfd8:	e0bffc17 	ldw	r2,-16(fp)
    dfdc:	10c00a17 	ldw	r3,40(r2)
    dfe0:	e0bff717 	ldw	r2,-36(fp)
    dfe4:	18800726 	beq	r3,r2,e004 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
    dfec:	00bfb716 	blt	zero,r2,decc <__ram_exceptions_end+0xfb00c884>
    dff0:	00000506 	br	e008 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    dff4:	0001883a 	nop
    dff8:	00000306 	br	e008 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    dffc:	0001883a 	nop
    e000:	00000106 	br	e008 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e004:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e008:	e0fff517 	ldw	r3,-44(fp)
    e00c:	e0bffd17 	ldw	r2,-12(fp)
    e010:	18801826 	beq	r3,r2,e074 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e014:	0005303a 	rdctl	r2,status
    e018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e01c:	e0fffb17 	ldw	r3,-20(fp)
    e020:	00bfff84 	movi	r2,-2
    e024:	1884703a 	and	r2,r3,r2
    e028:	1001703a 	wrctl	status,r2
  
  return context;
    e02c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e030:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e034:	e0bffc17 	ldw	r2,-16(fp)
    e038:	10800817 	ldw	r2,32(r2)
    e03c:	10c00054 	ori	r3,r2,1
    e040:	e0bffc17 	ldw	r2,-16(fp)
    e044:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e048:	e0bffc17 	ldw	r2,-16(fp)
    e04c:	10800017 	ldw	r2,0(r2)
    e050:	10800104 	addi	r2,r2,4
    e054:	1007883a 	mov	r3,r2
    e058:	e0bffc17 	ldw	r2,-16(fp)
    e05c:	10800817 	ldw	r2,32(r2)
    e060:	18800035 	stwio	r2,0(r3)
    e064:	e0bffa17 	ldw	r2,-24(fp)
    e068:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e06c:	e0bff917 	ldw	r2,-28(fp)
    e070:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e074:	e0fff517 	ldw	r3,-44(fp)
    e078:	e0bffd17 	ldw	r2,-12(fp)
    e07c:	18800426 	beq	r3,r2,e090 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e080:	e0fff517 	ldw	r3,-44(fp)
    e084:	e0bffd17 	ldw	r2,-12(fp)
    e088:	1885c83a 	sub	r2,r3,r2
    e08c:	00000606 	br	e0a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e090:	e0bfff17 	ldw	r2,-4(fp)
    e094:	1090000c 	andi	r2,r2,16384
    e098:	10000226 	beq	r2,zero,e0a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e09c:	00bffd44 	movi	r2,-11
    e0a0:	00000106 	br	e0a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e0a4:	00bffec4 	movi	r2,-5
}
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	dfc00117 	ldw	ra,4(sp)
    e0b0:	df000017 	ldw	fp,0(sp)
    e0b4:	dec00204 	addi	sp,sp,8
    e0b8:	f800283a 	ret

0000e0bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e0bc:	defff304 	addi	sp,sp,-52
    e0c0:	dfc00c15 	stw	ra,48(sp)
    e0c4:	df000b15 	stw	fp,44(sp)
    e0c8:	df000b04 	addi	fp,sp,44
    e0cc:	e13ffc15 	stw	r4,-16(fp)
    e0d0:	e17ffd15 	stw	r5,-12(fp)
    e0d4:	e1bffe15 	stw	r6,-8(fp)
    e0d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e0dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e0e0:	e0bffd17 	ldw	r2,-12(fp)
    e0e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e0e8:	00003706 	br	e1c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e0ec:	e0bffc17 	ldw	r2,-16(fp)
    e0f0:	10800c17 	ldw	r2,48(r2)
    e0f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e0f8:	e0bffc17 	ldw	r2,-16(fp)
    e0fc:	10800d17 	ldw	r2,52(r2)
    e100:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e104:	e0fff917 	ldw	r3,-28(fp)
    e108:	e0bff517 	ldw	r2,-44(fp)
    e10c:	1880062e 	bgeu	r3,r2,e128 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e110:	e0fff517 	ldw	r3,-44(fp)
    e114:	e0bff917 	ldw	r2,-28(fp)
    e118:	1885c83a 	sub	r2,r3,r2
    e11c:	10bfffc4 	addi	r2,r2,-1
    e120:	e0bff615 	stw	r2,-40(fp)
    e124:	00000b06 	br	e154 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e128:	e0bff517 	ldw	r2,-44(fp)
    e12c:	10000526 	beq	r2,zero,e144 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e130:	00c20004 	movi	r3,2048
    e134:	e0bff917 	ldw	r2,-28(fp)
    e138:	1885c83a 	sub	r2,r3,r2
    e13c:	e0bff615 	stw	r2,-40(fp)
    e140:	00000406 	br	e154 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e144:	00c1ffc4 	movi	r3,2047
    e148:	e0bff917 	ldw	r2,-28(fp)
    e14c:	1885c83a 	sub	r2,r3,r2
    e150:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e154:	e0bff617 	ldw	r2,-40(fp)
    e158:	10001e26 	beq	r2,zero,e1d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e15c:	e0fffe17 	ldw	r3,-8(fp)
    e160:	e0bff617 	ldw	r2,-40(fp)
    e164:	1880022e 	bgeu	r3,r2,e170 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e168:	e0bffe17 	ldw	r2,-8(fp)
    e16c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	10c20e04 	addi	r3,r2,2104
    e178:	e0bff917 	ldw	r2,-28(fp)
    e17c:	1885883a 	add	r2,r3,r2
    e180:	e1bff617 	ldw	r6,-40(fp)
    e184:	e17ffd17 	ldw	r5,-12(fp)
    e188:	1009883a 	mov	r4,r2
    e18c:	0009f740 	call	9f74 <memcpy>
      ptr   += n;
    e190:	e0fffd17 	ldw	r3,-12(fp)
    e194:	e0bff617 	ldw	r2,-40(fp)
    e198:	1885883a 	add	r2,r3,r2
    e19c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e1a0:	e0fffe17 	ldw	r3,-8(fp)
    e1a4:	e0bff617 	ldw	r2,-40(fp)
    e1a8:	1885c83a 	sub	r2,r3,r2
    e1ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e1b0:	e0fff917 	ldw	r3,-28(fp)
    e1b4:	e0bff617 	ldw	r2,-40(fp)
    e1b8:	1885883a 	add	r2,r3,r2
    e1bc:	10c1ffcc 	andi	r3,r2,2047
    e1c0:	e0bffc17 	ldw	r2,-16(fp)
    e1c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e1c8:	e0bffe17 	ldw	r2,-8(fp)
    e1cc:	00bfc716 	blt	zero,r2,e0ec <__ram_exceptions_end+0xfb00caa4>
    e1d0:	00000106 	br	e1d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e1d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1d8:	0005303a 	rdctl	r2,status
    e1dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1e0:	e0fffb17 	ldw	r3,-20(fp)
    e1e4:	00bfff84 	movi	r2,-2
    e1e8:	1884703a 	and	r2,r3,r2
    e1ec:	1001703a 	wrctl	status,r2
  
  return context;
    e1f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e1f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e1f8:	e0bffc17 	ldw	r2,-16(fp)
    e1fc:	10800817 	ldw	r2,32(r2)
    e200:	10c00094 	ori	r3,r2,2
    e204:	e0bffc17 	ldw	r2,-16(fp)
    e208:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e20c:	e0bffc17 	ldw	r2,-16(fp)
    e210:	10800017 	ldw	r2,0(r2)
    e214:	10800104 	addi	r2,r2,4
    e218:	1007883a 	mov	r3,r2
    e21c:	e0bffc17 	ldw	r2,-16(fp)
    e220:	10800817 	ldw	r2,32(r2)
    e224:	18800035 	stwio	r2,0(r3)
    e228:	e0bffa17 	ldw	r2,-24(fp)
    e22c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e230:	e0bff817 	ldw	r2,-32(fp)
    e234:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e238:	e0bffe17 	ldw	r2,-8(fp)
    e23c:	0080100e 	bge	zero,r2,e280 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e240:	e0bfff17 	ldw	r2,-4(fp)
    e244:	1090000c 	andi	r2,r2,16384
    e248:	1000101e 	bne	r2,zero,e28c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e24c:	0001883a 	nop
    e250:	e0bffc17 	ldw	r2,-16(fp)
    e254:	10c00d17 	ldw	r3,52(r2)
    e258:	e0bff517 	ldw	r2,-44(fp)
    e25c:	1880051e 	bne	r3,r2,e274 <altera_avalon_jtag_uart_write+0x1b8>
    e260:	e0bffc17 	ldw	r2,-16(fp)
    e264:	10c00917 	ldw	r3,36(r2)
    e268:	e0bffc17 	ldw	r2,-16(fp)
    e26c:	10800117 	ldw	r2,4(r2)
    e270:	18bff736 	bltu	r3,r2,e250 <__ram_exceptions_end+0xfb00cc08>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e274:	e0bffc17 	ldw	r2,-16(fp)
    e278:	10800917 	ldw	r2,36(r2)
    e27c:	1000051e 	bne	r2,zero,e294 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e280:	e0bffe17 	ldw	r2,-8(fp)
    e284:	00bfd016 	blt	zero,r2,e1c8 <__ram_exceptions_end+0xfb00cb80>
    e288:	00000306 	br	e298 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e28c:	0001883a 	nop
    e290:	00000106 	br	e298 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e294:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e298:	e0fffd17 	ldw	r3,-12(fp)
    e29c:	e0bff717 	ldw	r2,-36(fp)
    e2a0:	18800426 	beq	r3,r2,e2b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e2a4:	e0fffd17 	ldw	r3,-12(fp)
    e2a8:	e0bff717 	ldw	r2,-36(fp)
    e2ac:	1885c83a 	sub	r2,r3,r2
    e2b0:	00000606 	br	e2cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e2b4:	e0bfff17 	ldw	r2,-4(fp)
    e2b8:	1090000c 	andi	r2,r2,16384
    e2bc:	10000226 	beq	r2,zero,e2c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e2c0:	00bffd44 	movi	r2,-11
    e2c4:	00000106 	br	e2cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e2c8:	00bffec4 	movi	r2,-5
}
    e2cc:	e037883a 	mov	sp,fp
    e2d0:	dfc00117 	ldw	ra,4(sp)
    e2d4:	df000017 	ldw	fp,0(sp)
    e2d8:	dec00204 	addi	sp,sp,8
    e2dc:	f800283a 	ret

0000e2e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e2e0:	defff904 	addi	sp,sp,-28
    e2e4:	dfc00615 	stw	ra,24(sp)
    e2e8:	df000515 	stw	fp,20(sp)
    e2ec:	df000504 	addi	fp,sp,20
    e2f0:	e13ffe15 	stw	r4,-8(fp)
    e2f4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e2f8:	0007883a 	mov	r3,zero
    e2fc:	e0bffe17 	ldw	r2,-8(fp)
    e300:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e304:	e0bffe17 	ldw	r2,-8(fp)
    e308:	10800104 	addi	r2,r2,4
    e30c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e310:	0005303a 	rdctl	r2,status
    e314:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e318:	e0fffc17 	ldw	r3,-16(fp)
    e31c:	00bfff84 	movi	r2,-2
    e320:	1884703a 	and	r2,r3,r2
    e324:	1001703a 	wrctl	status,r2
  
  return context;
    e328:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e32c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e330:	00100d40 	call	100d4 <alt_tick>
    e334:	e0bffb17 	ldw	r2,-20(fp)
    e338:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e33c:	e0bffd17 	ldw	r2,-12(fp)
    e340:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e344:	0001883a 	nop
    e348:	e037883a 	mov	sp,fp
    e34c:	dfc00117 	ldw	ra,4(sp)
    e350:	df000017 	ldw	fp,0(sp)
    e354:	dec00204 	addi	sp,sp,8
    e358:	f800283a 	ret

0000e35c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e35c:	defff904 	addi	sp,sp,-28
    e360:	dfc00615 	stw	ra,24(sp)
    e364:	df000515 	stw	fp,20(sp)
    e368:	df000504 	addi	fp,sp,20
    e36c:	e13ffc15 	stw	r4,-16(fp)
    e370:	e17ffd15 	stw	r5,-12(fp)
    e374:	e1bffe15 	stw	r6,-8(fp)
    e378:	e1ffff15 	stw	r7,-4(fp)
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e384:	d0a6f117 	ldw	r2,-25660(gp)
    e388:	1000021e 	bne	r2,zero,e394 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e38c:	e0bffb17 	ldw	r2,-20(fp)
    e390:	d0a6f115 	stw	r2,-25660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e394:	e0bffc17 	ldw	r2,-16(fp)
    e398:	10800104 	addi	r2,r2,4
    e39c:	00c001c4 	movi	r3,7
    e3a0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e3a4:	01800074 	movhi	r6,1
    e3a8:	31b8b804 	addi	r6,r6,-7456
    e3ac:	e17ffc17 	ldw	r5,-16(fp)
    e3b0:	e13ffe17 	ldw	r4,-8(fp)
    e3b4:	000fc640 	call	fc64 <alt_irq_register>
#endif  
}
    e3b8:	0001883a 	nop
    e3bc:	e037883a 	mov	sp,fp
    e3c0:	dfc00117 	ldw	ra,4(sp)
    e3c4:	df000017 	ldw	fp,0(sp)
    e3c8:	dec00204 	addi	sp,sp,8
    e3cc:	f800283a 	ret

0000e3d0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    e3d0:	defffe04 	addi	sp,sp,-8
    e3d4:	df000115 	stw	fp,4(sp)
    e3d8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    e3dc:	d0a6ee17 	ldw	r2,-25672(gp)
    e3e0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    e3e4:	d0a6ef17 	ldw	r2,-25668(gp)
    e3e8:	1000021e 	bne	r2,zero,e3f4 <alt_timestamp_start+0x24>
  {
    return -1;
    e3ec:	00bfffc4 	movi	r2,-1
    e3f0:	00001106 	br	e438 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    e3f4:	e0bfff17 	ldw	r2,-4(fp)
    e3f8:	10800104 	addi	r2,r2,4
    e3fc:	00c00204 	movi	r3,8
    e400:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    e404:	e0bfff17 	ldw	r2,-4(fp)
    e408:	10800204 	addi	r2,r2,8
    e40c:	00ffffd4 	movui	r3,65535
    e410:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    e414:	e0bfff17 	ldw	r2,-4(fp)
    e418:	10800304 	addi	r2,r2,12
    e41c:	00ffffd4 	movui	r3,65535
    e420:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    e424:	e0bfff17 	ldw	r2,-4(fp)
    e428:	10800104 	addi	r2,r2,4
    e42c:	00c00104 	movi	r3,4
    e430:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    e434:	0005883a 	mov	r2,zero
}
    e438:	e037883a 	mov	sp,fp
    e43c:	df000017 	ldw	fp,0(sp)
    e440:	dec00104 	addi	sp,sp,4
    e444:	f800283a 	ret

0000e448 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    e448:	defffc04 	addi	sp,sp,-16
    e44c:	df000315 	stw	fp,12(sp)
    e450:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    e454:	d0a6ee17 	ldw	r2,-25672(gp)
    e458:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    e45c:	d0a6ef17 	ldw	r2,-25668(gp)
    e460:	1000021e 	bne	r2,zero,e46c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    e464:	00bfffc4 	movi	r2,-1
    e468:	00001306 	br	e4b8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    e46c:	e0bffd17 	ldw	r2,-12(fp)
    e470:	10800404 	addi	r2,r2,16
    e474:	0007883a 	mov	r3,zero
    e478:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    e47c:	e0bffd17 	ldw	r2,-12(fp)
    e480:	10800404 	addi	r2,r2,16
    e484:	10800037 	ldwio	r2,0(r2)
    e488:	10bfffcc 	andi	r2,r2,65535
    e48c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    e490:	e0bffd17 	ldw	r2,-12(fp)
    e494:	10800504 	addi	r2,r2,20
    e498:	10800037 	ldwio	r2,0(r2)
    e49c:	10bfffcc 	andi	r2,r2,65535
    e4a0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    e4a4:	e0bfff17 	ldw	r2,-4(fp)
    e4a8:	1006943a 	slli	r3,r2,16
    e4ac:	e0bffe17 	ldw	r2,-8(fp)
    e4b0:	1884b03a 	or	r2,r3,r2
    e4b4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    e4b8:	e037883a 	mov	sp,fp
    e4bc:	df000017 	ldw	fp,0(sp)
    e4c0:	dec00104 	addi	sp,sp,4
    e4c4:	f800283a 	ret

0000e4c8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    e4c8:	deffff04 	addi	sp,sp,-4
    e4cc:	df000015 	stw	fp,0(sp)
    e4d0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    e4d4:	d0a6ef17 	ldw	r2,-25668(gp)
}
    e4d8:	e037883a 	mov	sp,fp
    e4dc:	df000017 	ldw	fp,0(sp)
    e4e0:	dec00104 	addi	sp,sp,4
    e4e4:	f800283a 	ret

0000e4e8 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
    e4e8:	defffc04 	addi	sp,sp,-16
    e4ec:	dfc00315 	stw	ra,12(sp)
    e4f0:	df000215 	stw	fp,8(sp)
    e4f4:	df000204 	addi	fp,sp,8
    e4f8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
    e4fc:	d1600704 	addi	r5,gp,-32740
    e500:	e13fff17 	ldw	r4,-4(fp)
    e504:	000fa600 	call	fa60 <alt_find_dev>
    e508:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e50c:	e0bffe17 	ldw	r2,-8(fp)
}
    e510:	e037883a 	mov	sp,fp
    e514:	dfc00117 	ldw	ra,4(sp)
    e518:	df000017 	ldw	fp,0(sp)
    e51c:	dec00204 	addi	sp,sp,8
    e520:	f800283a 	ret

0000e524 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
    e524:	defffd04 	addi	sp,sp,-12
    e528:	df000215 	stw	fp,8(sp)
    e52c:	df000204 	addi	fp,sp,8
    e530:	e13ffe15 	stw	r4,-8(fp)
    e534:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
    e538:	e0bffe17 	ldw	r2,-8(fp)
    e53c:	10800a17 	ldw	r2,40(r2)
    e540:	10800023 	ldbuio	r2,0(r2)
    e544:	10803fcc 	andi	r2,r2,255
    e548:	1007883a 	mov	r3,r2
    e54c:	e0bfff17 	ldw	r2,-4(fp)
    e550:	10c00005 	stb	r3,0(r2)

	return 0;
    e554:	0005883a 	mov	r2,zero
}
    e558:	e037883a 	mov	sp,fp
    e55c:	df000017 	ldw	fp,0(sp)
    e560:	dec00104 	addi	sp,sp,4
    e564:	f800283a 	ret

0000e568 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
    e568:	defffc04 	addi	sp,sp,-16
    e56c:	df000315 	stw	fp,12(sp)
    e570:	df000304 	addi	fp,sp,12
    e574:	e13ffd15 	stw	r4,-12(fp)
    e578:	2805883a 	mov	r2,r5
    e57c:	e1bfff15 	stw	r6,-4(fp)
    e580:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e584:	e0bffd17 	ldw	r2,-12(fp)
    e588:	10800a17 	ldw	r2,40(r2)
    e58c:	1007883a 	mov	r3,r2
    e590:	e0bffe03 	ldbu	r2,-8(fp)
    e594:	10800fcc 	andi	r2,r2,63
    e598:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    e59c:	e0bffd17 	ldw	r2,-12(fp)
    e5a0:	10800a17 	ldw	r2,40(r2)
    e5a4:	10800044 	addi	r2,r2,1
    e5a8:	10800023 	ldbuio	r2,0(r2)
    e5ac:	10803fcc 	andi	r2,r2,255
    e5b0:	1007883a 	mov	r3,r2
    e5b4:	e0bfff17 	ldw	r2,-4(fp)
    e5b8:	10c00005 	stb	r3,0(r2)

	return 0;
    e5bc:	0005883a 	mov	r2,zero
}
    e5c0:	e037883a 	mov	sp,fp
    e5c4:	df000017 	ldw	fp,0(sp)
    e5c8:	dec00104 	addi	sp,sp,4
    e5cc:	f800283a 	ret

0000e5d0 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
    e5d0:	defffc04 	addi	sp,sp,-16
    e5d4:	df000315 	stw	fp,12(sp)
    e5d8:	df000304 	addi	fp,sp,12
    e5dc:	e13ffd15 	stw	r4,-12(fp)
    e5e0:	2807883a 	mov	r3,r5
    e5e4:	3005883a 	mov	r2,r6
    e5e8:	e0fffe05 	stb	r3,-8(fp)
    e5ec:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e5f0:	e0bffd17 	ldw	r2,-12(fp)
    e5f4:	10800a17 	ldw	r2,40(r2)
    e5f8:	1007883a 	mov	r3,r2
    e5fc:	e0bffe03 	ldbu	r2,-8(fp)
    e600:	10800fcc 	andi	r2,r2,63
    e604:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
    e608:	e0bffd17 	ldw	r2,-12(fp)
    e60c:	10800a17 	ldw	r2,40(r2)
    e610:	10800044 	addi	r2,r2,1
    e614:	1007883a 	mov	r3,r2
    e618:	e0bfff03 	ldbu	r2,-4(fp)
    e61c:	18800025 	stbio	r2,0(r3)

	return 0;
    e620:	0005883a 	mov	r2,zero
}
    e624:	e037883a 	mov	sp,fp
    e628:	df000017 	ldw	fp,0(sp)
    e62c:	dec00104 	addi	sp,sp,4
    e630:	f800283a 	ret

0000e634 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
    e634:	defffd04 	addi	sp,sp,-12
    e638:	df000215 	stw	fp,8(sp)
    e63c:	df000204 	addi	fp,sp,8
    e640:	e13ffe15 	stw	r4,-8(fp)
    e644:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e648:	e0bffe17 	ldw	r2,-8(fp)
    e64c:	10800a17 	ldw	r2,40(r2)
    e650:	1007883a 	mov	r3,r2
    e654:	00800c84 	movi	r2,50
    e658:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    e65c:	e0bffe17 	ldw	r2,-8(fp)
    e660:	10800a17 	ldw	r2,40(r2)
    e664:	10800044 	addi	r2,r2,1
    e668:	10800023 	ldbuio	r2,0(r2)
    e66c:	10803fcc 	andi	r2,r2,255
    e670:	10ffffcc 	andi	r3,r2,65535
    e674:	e0bfff17 	ldw	r2,-4(fp)
    e678:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e67c:	e0bffe17 	ldw	r2,-8(fp)
    e680:	10800a17 	ldw	r2,40(r2)
    e684:	1007883a 	mov	r3,r2
    e688:	00800cc4 	movi	r2,51
    e68c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    e690:	e0bffe17 	ldw	r2,-8(fp)
    e694:	10800a17 	ldw	r2,40(r2)
    e698:	10800044 	addi	r2,r2,1
    e69c:	10800023 	ldbuio	r2,0(r2)
    e6a0:	10803fcc 	andi	r2,r2,255
    e6a4:	10bfffcc 	andi	r2,r2,65535
    e6a8:	1004923a 	slli	r2,r2,8
    e6ac:	e0ffff17 	ldw	r3,-4(fp)
    e6b0:	18c00017 	ldw	r3,0(r3)
    e6b4:	1885883a 	add	r2,r3,r2
    e6b8:	1007883a 	mov	r3,r2
    e6bc:	e0bfff17 	ldw	r2,-4(fp)
    e6c0:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
    e6c4:	e0bfff17 	ldw	r2,-4(fp)
    e6c8:	10800017 	ldw	r2,0(r2)
    e6cc:	10a0000c 	andi	r2,r2,32768
    e6d0:	10000626 	beq	r2,zero,e6ec <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
    e6d4:	e0bfff17 	ldw	r2,-4(fp)
    e6d8:	10800017 	ldw	r2,0(r2)
    e6dc:	10bffff4 	orhi	r2,r2,65535
    e6e0:	1007883a 	mov	r3,r2
    e6e4:	e0bfff17 	ldw	r2,-4(fp)
    e6e8:	10c00015 	stw	r3,0(r2)
	}

	return 0;
    e6ec:	0005883a 	mov	r2,zero
}
    e6f0:	e037883a 	mov	sp,fp
    e6f4:	df000017 	ldw	fp,0(sp)
    e6f8:	dec00104 	addi	sp,sp,4
    e6fc:	f800283a 	ret

0000e700 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
    e700:	defffd04 	addi	sp,sp,-12
    e704:	df000215 	stw	fp,8(sp)
    e708:	df000204 	addi	fp,sp,8
    e70c:	e13ffe15 	stw	r4,-8(fp)
    e710:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e714:	e0bffe17 	ldw	r2,-8(fp)
    e718:	10800a17 	ldw	r2,40(r2)
    e71c:	1007883a 	mov	r3,r2
    e720:	00800d04 	movi	r2,52
    e724:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    e728:	e0bffe17 	ldw	r2,-8(fp)
    e72c:	10800a17 	ldw	r2,40(r2)
    e730:	10800044 	addi	r2,r2,1
    e734:	10800023 	ldbuio	r2,0(r2)
    e738:	10803fcc 	andi	r2,r2,255
    e73c:	10ffffcc 	andi	r3,r2,65535
    e740:	e0bfff17 	ldw	r2,-4(fp)
    e744:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e748:	e0bffe17 	ldw	r2,-8(fp)
    e74c:	10800a17 	ldw	r2,40(r2)
    e750:	1007883a 	mov	r3,r2
    e754:	00800d44 	movi	r2,53
    e758:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    e75c:	e0bffe17 	ldw	r2,-8(fp)
    e760:	10800a17 	ldw	r2,40(r2)
    e764:	10800044 	addi	r2,r2,1
    e768:	10800023 	ldbuio	r2,0(r2)
    e76c:	10803fcc 	andi	r2,r2,255
    e770:	10bfffcc 	andi	r2,r2,65535
    e774:	1004923a 	slli	r2,r2,8
    e778:	e0ffff17 	ldw	r3,-4(fp)
    e77c:	18c00017 	ldw	r3,0(r3)
    e780:	1885883a 	add	r2,r3,r2
    e784:	1007883a 	mov	r3,r2
    e788:	e0bfff17 	ldw	r2,-4(fp)
    e78c:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
    e790:	e0bfff17 	ldw	r2,-4(fp)
    e794:	10800017 	ldw	r2,0(r2)
    e798:	10a0000c 	andi	r2,r2,32768
    e79c:	10000626 	beq	r2,zero,e7b8 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
    e7a0:	e0bfff17 	ldw	r2,-4(fp)
    e7a4:	10800017 	ldw	r2,0(r2)
    e7a8:	10bffff4 	orhi	r2,r2,65535
    e7ac:	1007883a 	mov	r3,r2
    e7b0:	e0bfff17 	ldw	r2,-4(fp)
    e7b4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
    e7b8:	0005883a 	mov	r2,zero
}
    e7bc:	e037883a 	mov	sp,fp
    e7c0:	df000017 	ldw	fp,0(sp)
    e7c4:	dec00104 	addi	sp,sp,4
    e7c8:	f800283a 	ret

0000e7cc <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
    e7cc:	defffd04 	addi	sp,sp,-12
    e7d0:	df000215 	stw	fp,8(sp)
    e7d4:	df000204 	addi	fp,sp,8
    e7d8:	e13ffe15 	stw	r4,-8(fp)
    e7dc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e7e0:	e0bffe17 	ldw	r2,-8(fp)
    e7e4:	10800a17 	ldw	r2,40(r2)
    e7e8:	1007883a 	mov	r3,r2
    e7ec:	00800d84 	movi	r2,54
    e7f0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    e7f4:	e0bffe17 	ldw	r2,-8(fp)
    e7f8:	10800a17 	ldw	r2,40(r2)
    e7fc:	10800044 	addi	r2,r2,1
    e800:	10800023 	ldbuio	r2,0(r2)
    e804:	10803fcc 	andi	r2,r2,255
    e808:	10ffffcc 	andi	r3,r2,65535
    e80c:	e0bfff17 	ldw	r2,-4(fp)
    e810:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    e814:	e0bffe17 	ldw	r2,-8(fp)
    e818:	10800a17 	ldw	r2,40(r2)
    e81c:	1007883a 	mov	r3,r2
    e820:	00800dc4 	movi	r2,55
    e824:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    e828:	e0bffe17 	ldw	r2,-8(fp)
    e82c:	10800a17 	ldw	r2,40(r2)
    e830:	10800044 	addi	r2,r2,1
    e834:	10800023 	ldbuio	r2,0(r2)
    e838:	10803fcc 	andi	r2,r2,255
    e83c:	10bfffcc 	andi	r2,r2,65535
    e840:	1004923a 	slli	r2,r2,8
    e844:	e0ffff17 	ldw	r3,-4(fp)
    e848:	18c00017 	ldw	r3,0(r3)
    e84c:	1885883a 	add	r2,r3,r2
    e850:	1007883a 	mov	r3,r2
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
    e85c:	e0bfff17 	ldw	r2,-4(fp)
    e860:	10800017 	ldw	r2,0(r2)
    e864:	10a0000c 	andi	r2,r2,32768
    e868:	10000626 	beq	r2,zero,e884 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
    e86c:	e0bfff17 	ldw	r2,-4(fp)
    e870:	10800017 	ldw	r2,0(r2)
    e874:	10bffff4 	orhi	r2,r2,65535
    e878:	1007883a 	mov	r3,r2
    e87c:	e0bfff17 	ldw	r2,-4(fp)
    e880:	10c00015 	stw	r3,0(r2)
	}

	return 0;
    e884:	0005883a 	mov	r2,zero
}
    e888:	e037883a 	mov	sp,fp
    e88c:	df000017 	ldw	fp,0(sp)
    e890:	dec00104 	addi	sp,sp,4
    e894:	f800283a 	ret

0000e898 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    e898:	defffc04 	addi	sp,sp,-16
    e89c:	dfc00315 	stw	ra,12(sp)
    e8a0:	df000215 	stw	fp,8(sp)
    e8a4:	df000204 	addi	fp,sp,8
    e8a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    e8ac:	d1600704 	addi	r5,gp,-32740
    e8b0:	e13fff17 	ldw	r4,-4(fp)
    e8b4:	000fa600 	call	fa60 <alt_find_dev>
    e8b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e8bc:	e0bffe17 	ldw	r2,-8(fp)
}
    e8c0:	e037883a 	mov	sp,fp
    e8c4:	dfc00117 	ldw	ra,4(sp)
    e8c8:	df000017 	ldw	fp,0(sp)
    e8cc:	dec00204 	addi	sp,sp,8
    e8d0:	f800283a 	ret

0000e8d4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    e8d4:	defffa04 	addi	sp,sp,-24
    e8d8:	df000515 	stw	fp,20(sp)
    e8dc:	df000504 	addi	fp,sp,20
    e8e0:	e13ffc15 	stw	r4,-16(fp)
    e8e4:	e17ffd15 	stw	r5,-12(fp)
    e8e8:	e1bffe15 	stw	r6,-8(fp)
    e8ec:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    e8f0:	e0bffc17 	ldw	r2,-16(fp)
    e8f4:	10800f17 	ldw	r2,60(r2)
    e8f8:	e0fffe17 	ldw	r3,-8(fp)
    e8fc:	1880042e 	bgeu	r3,r2,e910 <alt_up_pixel_buffer_dma_draw+0x3c>
    e900:	e0bffc17 	ldw	r2,-16(fp)
    e904:	10801017 	ldw	r2,64(r2)
    e908:	e0ffff17 	ldw	r3,-4(fp)
    e90c:	18800236 	bltu	r3,r2,e918 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
    e910:	00bfffc4 	movi	r2,-1
    e914:	00005006 	br	ea58 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
    e918:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    e91c:	e0bffc17 	ldw	r2,-16(fp)
    e920:	10800d17 	ldw	r2,52(r2)
    e924:	1000151e 	bne	r2,zero,e97c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    e928:	e0bffc17 	ldw	r2,-16(fp)
    e92c:	10c01217 	ldw	r3,72(r2)
    e930:	e0bffe17 	ldw	r2,-8(fp)
    e934:	1886703a 	and	r3,r3,r2
    e938:	e0bffc17 	ldw	r2,-16(fp)
    e93c:	10801117 	ldw	r2,68(r2)
    e940:	1884983a 	sll	r2,r3,r2
    e944:	e0fffb17 	ldw	r3,-20(fp)
    e948:	1885883a 	add	r2,r3,r2
    e94c:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    e950:	e0bffc17 	ldw	r2,-16(fp)
    e954:	10c01417 	ldw	r3,80(r2)
    e958:	e0bfff17 	ldw	r2,-4(fp)
    e95c:	1886703a 	and	r3,r3,r2
    e960:	e0bffc17 	ldw	r2,-16(fp)
    e964:	10801317 	ldw	r2,76(r2)
    e968:	1884983a 	sll	r2,r3,r2
    e96c:	e0fffb17 	ldw	r3,-20(fp)
    e970:	1885883a 	add	r2,r3,r2
    e974:	e0bffb15 	stw	r2,-20(fp)
    e978:	00001706 	br	e9d8 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    e97c:	e0bffc17 	ldw	r2,-16(fp)
    e980:	10c01217 	ldw	r3,72(r2)
    e984:	e0bffe17 	ldw	r2,-8(fp)
    e988:	1886703a 	and	r3,r3,r2
    e98c:	e0bffc17 	ldw	r2,-16(fp)
    e990:	10801117 	ldw	r2,68(r2)
    e994:	1884983a 	sll	r2,r3,r2
    e998:	e0fffb17 	ldw	r3,-20(fp)
    e99c:	1885883a 	add	r2,r3,r2
    e9a0:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    e9a4:	e0bffc17 	ldw	r2,-16(fp)
    e9a8:	10c01417 	ldw	r3,80(r2)
    e9ac:	e0bfff17 	ldw	r2,-4(fp)
    e9b0:	1886703a 	and	r3,r3,r2
    e9b4:	e0bffc17 	ldw	r2,-16(fp)
    e9b8:	10800f17 	ldw	r2,60(r2)
    e9bc:	1887383a 	mul	r3,r3,r2
    e9c0:	e0bffc17 	ldw	r2,-16(fp)
    e9c4:	10801117 	ldw	r2,68(r2)
    e9c8:	1884983a 	sll	r2,r3,r2
    e9cc:	e0fffb17 	ldw	r3,-20(fp)
    e9d0:	1885883a 	add	r2,r3,r2
    e9d4:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    e9d8:	e0bffc17 	ldw	r2,-16(fp)
    e9dc:	10800e17 	ldw	r2,56(r2)
    e9e0:	10800058 	cmpnei	r2,r2,1
    e9e4:	1000081e 	bne	r2,zero,ea08 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	10c00c17 	ldw	r3,48(r2)
    e9f0:	e0bffb17 	ldw	r2,-20(fp)
    e9f4:	1885883a 	add	r2,r3,r2
    e9f8:	1007883a 	mov	r3,r2
    e9fc:	e0bffd17 	ldw	r2,-12(fp)
    ea00:	18800025 	stbio	r2,0(r3)
    ea04:	00001306 	br	ea54 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ea08:	e0bffc17 	ldw	r2,-16(fp)
    ea0c:	10800e17 	ldw	r2,56(r2)
    ea10:	10800098 	cmpnei	r2,r2,2
    ea14:	1000081e 	bne	r2,zero,ea38 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    ea18:	e0bffc17 	ldw	r2,-16(fp)
    ea1c:	10c00c17 	ldw	r3,48(r2)
    ea20:	e0bffb17 	ldw	r2,-20(fp)
    ea24:	1885883a 	add	r2,r3,r2
    ea28:	1007883a 	mov	r3,r2
    ea2c:	e0bffd17 	ldw	r2,-12(fp)
    ea30:	1880002d 	sthio	r2,0(r3)
    ea34:	00000706 	br	ea54 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    ea38:	e0bffc17 	ldw	r2,-16(fp)
    ea3c:	10c00c17 	ldw	r3,48(r2)
    ea40:	e0bffb17 	ldw	r2,-20(fp)
    ea44:	1885883a 	add	r2,r3,r2
    ea48:	1007883a 	mov	r3,r2
    ea4c:	e0bffd17 	ldw	r2,-12(fp)
    ea50:	18800035 	stwio	r2,0(r3)
	}

	return 0;
    ea54:	0005883a 	mov	r2,zero
}
    ea58:	e037883a 	mov	sp,fp
    ea5c:	df000017 	ldw	fp,0(sp)
    ea60:	dec00104 	addi	sp,sp,4
    ea64:	f800283a 	ret

0000ea68 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    ea68:	defffd04 	addi	sp,sp,-12
    ea6c:	df000215 	stw	fp,8(sp)
    ea70:	df000204 	addi	fp,sp,8
    ea74:	e13ffe15 	stw	r4,-8(fp)
    ea78:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    ea7c:	e0bffe17 	ldw	r2,-8(fp)
    ea80:	10800a17 	ldw	r2,40(r2)
    ea84:	10800104 	addi	r2,r2,4
    ea88:	1007883a 	mov	r3,r2
    ea8c:	e0bfff17 	ldw	r2,-4(fp)
    ea90:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    ea94:	e0bffe17 	ldw	r2,-8(fp)
    ea98:	10800a17 	ldw	r2,40(r2)
    ea9c:	10800104 	addi	r2,r2,4
    eaa0:	10800037 	ldwio	r2,0(r2)
    eaa4:	1007883a 	mov	r3,r2
    eaa8:	e0bffe17 	ldw	r2,-8(fp)
    eaac:	10c00c15 	stw	r3,48(r2)
	return 0;
    eab0:	0005883a 	mov	r2,zero
}
    eab4:	e037883a 	mov	sp,fp
    eab8:	df000017 	ldw	fp,0(sp)
    eabc:	dec00104 	addi	sp,sp,4
    eac0:	f800283a 	ret

0000eac4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    eac4:	defffd04 	addi	sp,sp,-12
    eac8:	df000215 	stw	fp,8(sp)
    eacc:	dc000115 	stw	r16,4(sp)
    ead0:	df000204 	addi	fp,sp,8
    ead4:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    ead8:	e0bffe17 	ldw	r2,-8(fp)
    eadc:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    eae0:	e0bffe17 	ldw	r2,-8(fp)
    eae4:	10800a17 	ldw	r2,40(r2)
    eae8:	1007883a 	mov	r3,r2
    eaec:	00800044 	movi	r2,1
    eaf0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    eaf4:	e0bffe17 	ldw	r2,-8(fp)
    eaf8:	10c00b17 	ldw	r3,44(r2)
    eafc:	e0bffe17 	ldw	r2,-8(fp)
    eb00:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    eb04:	e0bffe17 	ldw	r2,-8(fp)
    eb08:	14000b15 	stw	r16,44(r2)
	return 0;
    eb0c:	0005883a 	mov	r2,zero
}
    eb10:	e6ffff04 	addi	sp,fp,-4
    eb14:	df000117 	ldw	fp,4(sp)
    eb18:	dc000017 	ldw	r16,0(sp)
    eb1c:	dec00204 	addi	sp,sp,8
    eb20:	f800283a 	ret

0000eb24 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    eb24:	defffe04 	addi	sp,sp,-8
    eb28:	df000115 	stw	fp,4(sp)
    eb2c:	df000104 	addi	fp,sp,4
    eb30:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    eb34:	e0bfff17 	ldw	r2,-4(fp)
    eb38:	10800a17 	ldw	r2,40(r2)
    eb3c:	10800304 	addi	r2,r2,12
    eb40:	10800037 	ldwio	r2,0(r2)
    eb44:	1080004c 	andi	r2,r2,1
}
    eb48:	e037883a 	mov	sp,fp
    eb4c:	df000017 	ldw	fp,0(sp)
    eb50:	dec00104 	addi	sp,sp,4
    eb54:	f800283a 	ret

0000eb58 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    eb58:	defff704 	addi	sp,sp,-36
    eb5c:	df000815 	stw	fp,32(sp)
    eb60:	dd400715 	stw	r21,28(sp)
    eb64:	dd000615 	stw	r20,24(sp)
    eb68:	dcc00515 	stw	r19,20(sp)
    eb6c:	dc800415 	stw	r18,16(sp)
    eb70:	dc400315 	stw	r17,12(sp)
    eb74:	dc000215 	stw	r16,8(sp)
    eb78:	df000804 	addi	fp,sp,32
    eb7c:	e13ff815 	stw	r4,-32(fp)
    eb80:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    eb84:	e0bff917 	ldw	r2,-28(fp)
    eb88:	10800058 	cmpnei	r2,r2,1
    eb8c:	1000031e 	bne	r2,zero,eb9c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
    eb90:	e0bff817 	ldw	r2,-32(fp)
    eb94:	14400c17 	ldw	r17,48(r2)
    eb98:	00000206 	br	eba4 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
    eb9c:	e0bff817 	ldw	r2,-32(fp)
    eba0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
    eba4:	e0bff817 	ldw	r2,-32(fp)
    eba8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ebac:	e0bff817 	ldw	r2,-32(fp)
    ebb0:	10800e17 	ldw	r2,56(r2)
    ebb4:	10800098 	cmpnei	r2,r2,2
    ebb8:	1000031e 	bne	r2,zero,ebc8 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
    ebbc:	8405883a 	add	r2,r16,r16
    ebc0:	1021883a 	mov	r16,r2
    ebc4:	00000306 	br	ebd4 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
    ebc8:	8405883a 	add	r2,r16,r16
    ebcc:	1085883a 	add	r2,r2,r2
    ebd0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    ebd4:	e0bff817 	ldw	r2,-32(fp)
    ebd8:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ebdc:	e0bff817 	ldw	r2,-32(fp)
    ebe0:	10800d17 	ldw	r2,52(r2)
    ebe4:	1000111e 	bne	r2,zero,ec2c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    ebe8:	e0bff817 	ldw	r2,-32(fp)
    ebec:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
    ebf0:	0029883a 	mov	r20,zero
    ebf4:	00000b06 	br	ec24 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
    ebf8:	0027883a 	mov	r19,zero
    ebfc:	00000406 	br	ec10 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
    ec00:	9c45883a 	add	r2,r19,r17
    ec04:	0007883a 	mov	r3,zero
    ec08:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    ec0c:	9cc00104 	addi	r19,r19,4
    ec10:	9c3ffb36 	bltu	r19,r16,ec00 <__ram_exceptions_end+0xfb00d5b8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    ec14:	00800044 	movi	r2,1
    ec18:	1544983a 	sll	r2,r2,r21
    ec1c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    ec20:	a5000044 	addi	r20,r20,1
    ec24:	a4bff436 	bltu	r20,r18,ebf8 <__ram_exceptions_end+0xfb00d5b0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    ec28:	00000a06 	br	ec54 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    ec2c:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
    ec30:	0021883a 	mov	r16,zero
    ec34:	00000506 	br	ec4c <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
    ec38:	8005883a 	mov	r2,r16
    ec3c:	1445883a 	add	r2,r2,r17
    ec40:	0007883a 	mov	r3,zero
    ec44:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    ec48:	84000104 	addi	r16,r16,4
    ec4c:	8005883a 	mov	r2,r16
    ec50:	14bff936 	bltu	r2,r18,ec38 <__ram_exceptions_end+0xfb00d5f0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    ec54:	0001883a 	nop
    ec58:	e6fffa04 	addi	sp,fp,-24
    ec5c:	df000617 	ldw	fp,24(sp)
    ec60:	dd400517 	ldw	r21,20(sp)
    ec64:	dd000417 	ldw	r20,16(sp)
    ec68:	dcc00317 	ldw	r19,12(sp)
    ec6c:	dc800217 	ldw	r18,8(sp)
    ec70:	dc400117 	ldw	r17,4(sp)
    ec74:	dc000017 	ldw	r16,0(sp)
    ec78:	dec00704 	addi	sp,sp,28
    ec7c:	f800283a 	ret

0000ec80 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    ec80:	defff304 	addi	sp,sp,-52
    ec84:	df000c15 	stw	fp,48(sp)
    ec88:	ddc00b15 	stw	r23,44(sp)
    ec8c:	dd800a15 	stw	r22,40(sp)
    ec90:	dd400915 	stw	r21,36(sp)
    ec94:	dd000815 	stw	r20,32(sp)
    ec98:	dcc00715 	stw	r19,28(sp)
    ec9c:	dc800615 	stw	r18,24(sp)
    eca0:	dc400515 	stw	r17,20(sp)
    eca4:	dc000415 	stw	r16,16(sp)
    eca8:	df000c04 	addi	fp,sp,48
    ecac:	e13ff415 	stw	r4,-48(fp)
    ecb0:	e17ff515 	stw	r5,-44(fp)
    ecb4:	e1bff615 	stw	r6,-40(fp)
    ecb8:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    ecbc:	e0bff417 	ldw	r2,-48(fp)
    ecc0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    ecc4:	e0bff417 	ldw	r2,-48(fp)
    ecc8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    eccc:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
    ecd0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
    ecd4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
    ecd8:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
    ecdc:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    ece0:	a580032e 	bgeu	r20,r22,ecf0 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
    ece4:	b02b883a 	mov	r21,r22
		l_x = r_x;
    ece8:	a02d883a 	mov	r22,r20
		r_x = temp;
    ecec:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
    ecf0:	9c40032e 	bgeu	r19,r17,ed00 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
    ecf4:	882b883a 	mov	r21,r17
		t_y = b_y;
    ecf8:	9823883a 	mov	r17,r19
		b_y = temp;
    ecfc:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    ed00:	b480892e 	bgeu	r22,r18,ef28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
    ed04:	8c00882e 	bgeu	r17,r16,ef28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    ed08:	a4800136 	bltu	r20,r18,ed10 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
    ed0c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    ed10:	9c000136 	bltu	r19,r16,ed18 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
    ed14:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    ed18:	e0800317 	ldw	r2,12(fp)
    ed1c:	10800058 	cmpnei	r2,r2,1
    ed20:	1000031e 	bne	r2,zero,ed30 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
    ed24:	e0bff417 	ldw	r2,-48(fp)
    ed28:	14000c17 	ldw	r16,48(r2)
    ed2c:	00000206 	br	ed38 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
    ed30:	e0bff417 	ldw	r2,-48(fp)
    ed34:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ed38:	e0bff417 	ldw	r2,-48(fp)
    ed3c:	10800d17 	ldw	r2,52(r2)
    ed40:	10003c1e 	bne	r2,zero,ee34 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    ed44:	e0bff417 	ldw	r2,-48(fp)
    ed48:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    ed4c:	8d44983a 	sll	r2,r17,r21
    ed50:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ed54:	e0bff417 	ldw	r2,-48(fp)
    ed58:	10800e17 	ldw	r2,56(r2)
    ed5c:	10800058 	cmpnei	r2,r2,1
    ed60:	10000f1e 	bne	r2,zero,eda0 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
    ed64:	8825883a 	mov	r18,r17
    ed68:	00000b06 	br	ed98 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
    ed6c:	b023883a 	mov	r17,r22
    ed70:	00000406 	br	ed84 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
    ed74:	8c05883a 	add	r2,r17,r16
    ed78:	b807883a 	mov	r3,r23
    ed7c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ed80:	8c400044 	addi	r17,r17,1
    ed84:	a47ffb2e 	bgeu	r20,r17,ed74 <__ram_exceptions_end+0xfb00d72c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    ed88:	00800044 	movi	r2,1
    ed8c:	1544983a 	sll	r2,r2,r21
    ed90:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    ed94:	94800044 	addi	r18,r18,1
    ed98:	9cbff42e 	bgeu	r19,r18,ed6c <__ram_exceptions_end+0xfb00d724>
    ed9c:	00006306 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    eda0:	e0bff417 	ldw	r2,-48(fp)
    eda4:	10800e17 	ldw	r2,56(r2)
    eda8:	10800098 	cmpnei	r2,r2,2
    edac:	1000101e 	bne	r2,zero,edf0 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
    edb0:	8825883a 	mov	r18,r17
    edb4:	00000c06 	br	ede8 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
    edb8:	b023883a 	mov	r17,r22
    edbc:	00000506 	br	edd4 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    edc0:	8c45883a 	add	r2,r17,r17
    edc4:	1405883a 	add	r2,r2,r16
    edc8:	b807883a 	mov	r3,r23
    edcc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    edd0:	8c400044 	addi	r17,r17,1
    edd4:	a47ffa2e 	bgeu	r20,r17,edc0 <__ram_exceptions_end+0xfb00d778>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    edd8:	00800044 	movi	r2,1
    eddc:	1544983a 	sll	r2,r2,r21
    ede0:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    ede4:	94800044 	addi	r18,r18,1
    ede8:	9cbff32e 	bgeu	r19,r18,edb8 <__ram_exceptions_end+0xfb00d770>
    edec:	00004f06 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    edf0:	8825883a 	mov	r18,r17
    edf4:	00000d06 	br	ee2c <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
    edf8:	b023883a 	mov	r17,r22
    edfc:	00000606 	br	ee18 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    ee00:	8c45883a 	add	r2,r17,r17
    ee04:	1085883a 	add	r2,r2,r2
    ee08:	1405883a 	add	r2,r2,r16
    ee0c:	b807883a 	mov	r3,r23
    ee10:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ee14:	8c400044 	addi	r17,r17,1
    ee18:	a47ff92e 	bgeu	r20,r17,ee00 <__ram_exceptions_end+0xfb00d7b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    ee1c:	00800044 	movi	r2,1
    ee20:	1544983a 	sll	r2,r2,r21
    ee24:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    ee28:	94800044 	addi	r18,r18,1
    ee2c:	9cbff22e 	bgeu	r19,r18,edf8 <__ram_exceptions_end+0xfb00d7b0>
    ee30:	00003e06 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ee34:	e0bff417 	ldw	r2,-48(fp)
    ee38:	10800e17 	ldw	r2,56(r2)
    ee3c:	10800058 	cmpnei	r2,r2,1
    ee40:	10000f1e 	bne	r2,zero,ee80 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
    ee44:	8c85383a 	mul	r2,r17,r18
    ee48:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    ee4c:	882b883a 	mov	r21,r17
    ee50:	00000906 	br	ee78 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
    ee54:	b023883a 	mov	r17,r22
    ee58:	00000406 	br	ee6c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
    ee5c:	8c05883a 	add	r2,r17,r16
    ee60:	b807883a 	mov	r3,r23
    ee64:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ee68:	8c400044 	addi	r17,r17,1
    ee6c:	a47ffb2e 	bgeu	r20,r17,ee5c <__ram_exceptions_end+0xfb00d814>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    ee70:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ee74:	ad400044 	addi	r21,r21,1
    ee78:	9d7ff62e 	bgeu	r19,r21,ee54 <__ram_exceptions_end+0xfb00d80c>
    ee7c:	00002b06 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ee80:	e0bff417 	ldw	r2,-48(fp)
    ee84:	10800e17 	ldw	r2,56(r2)
    ee88:	10800098 	cmpnei	r2,r2,2
    ee8c:	1000121e 	bne	r2,zero,eed8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
    ee90:	9485883a 	add	r2,r18,r18
    ee94:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    ee98:	8c85383a 	mul	r2,r17,r18
    ee9c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    eea0:	882b883a 	mov	r21,r17
    eea4:	00000a06 	br	eed0 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
    eea8:	b023883a 	mov	r17,r22
    eeac:	00000506 	br	eec4 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    eeb0:	8c45883a 	add	r2,r17,r17
    eeb4:	1405883a 	add	r2,r2,r16
    eeb8:	b807883a 	mov	r3,r23
    eebc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    eec0:	8c400044 	addi	r17,r17,1
    eec4:	a47ffa2e 	bgeu	r20,r17,eeb0 <__ram_exceptions_end+0xfb00d868>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    eec8:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    eecc:	ad400044 	addi	r21,r21,1
    eed0:	9d7ff52e 	bgeu	r19,r21,eea8 <__ram_exceptions_end+0xfb00d860>
    eed4:	00001506 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    eed8:	9485883a 	add	r2,r18,r18
    eedc:	1085883a 	add	r2,r2,r2
    eee0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    eee4:	8c85383a 	mul	r2,r17,r18
    eee8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    eeec:	882b883a 	mov	r21,r17
    eef0:	00000b06 	br	ef20 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
    eef4:	b023883a 	mov	r17,r22
    eef8:	00000606 	br	ef14 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    eefc:	8c45883a 	add	r2,r17,r17
    ef00:	1085883a 	add	r2,r2,r2
    ef04:	1405883a 	add	r2,r2,r16
    ef08:	b807883a 	mov	r3,r23
    ef0c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ef10:	8c400044 	addi	r17,r17,1
    ef14:	a47ff92e 	bgeu	r20,r17,eefc <__ram_exceptions_end+0xfb00d8b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    ef18:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ef1c:	ad400044 	addi	r21,r21,1
    ef20:	9d7ff42e 	bgeu	r19,r21,eef4 <__ram_exceptions_end+0xfb00d8ac>
    ef24:	00000106 	br	ef2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    ef28:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
    ef2c:	e6fff804 	addi	sp,fp,-32
    ef30:	df000817 	ldw	fp,32(sp)
    ef34:	ddc00717 	ldw	r23,28(sp)
    ef38:	dd800617 	ldw	r22,24(sp)
    ef3c:	dd400517 	ldw	r21,20(sp)
    ef40:	dd000417 	ldw	r20,16(sp)
    ef44:	dcc00317 	ldw	r19,12(sp)
    ef48:	dc800217 	ldw	r18,8(sp)
    ef4c:	dc400117 	ldw	r17,4(sp)
    ef50:	dc000017 	ldw	r16,0(sp)
    ef54:	dec00904 	addi	sp,sp,36
    ef58:	f800283a 	ret

0000ef5c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    ef5c:	defff404 	addi	sp,sp,-48
    ef60:	df000b15 	stw	fp,44(sp)
    ef64:	dd800a15 	stw	r22,40(sp)
    ef68:	dd400915 	stw	r21,36(sp)
    ef6c:	dd000815 	stw	r20,32(sp)
    ef70:	dcc00715 	stw	r19,28(sp)
    ef74:	dc800615 	stw	r18,24(sp)
    ef78:	dc400515 	stw	r17,20(sp)
    ef7c:	dc000415 	stw	r16,16(sp)
    ef80:	df000b04 	addi	fp,sp,44
    ef84:	e13ff515 	stw	r4,-44(fp)
    ef88:	e17ff615 	stw	r5,-40(fp)
    ef8c:	e1bff715 	stw	r6,-36(fp)
    ef90:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    ef94:	e0bff517 	ldw	r2,-44(fp)
    ef98:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    ef9c:	e0bff517 	ldw	r2,-44(fp)
    efa0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    efa4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
    efa8:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
    efac:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
    efb0:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    efb4:	9c40032e 	bgeu	r19,r17,efc4 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
    efb8:	882d883a 	mov	r22,r17
		l_x = r_x;
    efbc:	9823883a 	mov	r17,r19
		r_x = temp;
    efc0:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    efc4:	8c805d2e 	bgeu	r17,r18,f13c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
    efc8:	a4005c2e 	bgeu	r20,r16,f13c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    efcc:	9c800136 	bltu	r19,r18,efd4 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
    efd0:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    efd4:	e0800217 	ldw	r2,8(fp)
    efd8:	10800058 	cmpnei	r2,r2,1
    efdc:	1000031e 	bne	r2,zero,efec <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    efe0:	e0bff517 	ldw	r2,-44(fp)
    efe4:	14000c17 	ldw	r16,48(r2)
    efe8:	00000206 	br	eff4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    efec:	e0bff517 	ldw	r2,-44(fp)
    eff0:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    eff4:	e0bff517 	ldw	r2,-44(fp)
    eff8:	10800d17 	ldw	r2,52(r2)
    effc:	1000231e 	bne	r2,zero,f08c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f000:	e0bff517 	ldw	r2,-44(fp)
    f004:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
    f008:	a484983a 	sll	r2,r20,r18
    f00c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f010:	e0bff517 	ldw	r2,-44(fp)
    f014:	10800e17 	ldw	r2,56(r2)
    f018:	10800058 	cmpnei	r2,r2,1
    f01c:	1000071e 	bne	r2,zero,f03c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
    f020:	00000406 	br	f034 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
    f024:	8c05883a 	add	r2,r17,r16
    f028:	a807883a 	mov	r3,r21
    f02c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    f030:	8c400044 	addi	r17,r17,1
    f034:	9c7ffb2e 	bgeu	r19,r17,f024 <__ram_exceptions_end+0xfb00d9dc>
    f038:	00004106 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f03c:	e0bff517 	ldw	r2,-44(fp)
    f040:	10800e17 	ldw	r2,56(r2)
    f044:	10800098 	cmpnei	r2,r2,2
    f048:	10000e1e 	bne	r2,zero,f084 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
    f04c:	00000506 	br	f064 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    f050:	8c45883a 	add	r2,r17,r17
    f054:	1405883a 	add	r2,r2,r16
    f058:	a807883a 	mov	r3,r21
    f05c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    f060:	8c400044 	addi	r17,r17,1
    f064:	9c7ffa2e 	bgeu	r19,r17,f050 <__ram_exceptions_end+0xfb00da08>
    f068:	00003506 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    f06c:	8c45883a 	add	r2,r17,r17
    f070:	1085883a 	add	r2,r2,r2
    f074:	1405883a 	add	r2,r2,r16
    f078:	a807883a 	mov	r3,r21
    f07c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    f080:	8c400044 	addi	r17,r17,1
    f084:	9c7ff92e 	bgeu	r19,r17,f06c <__ram_exceptions_end+0xfb00da24>
    f088:	00002d06 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f08c:	e0bff517 	ldw	r2,-44(fp)
    f090:	10800e17 	ldw	r2,56(r2)
    f094:	10800058 	cmpnei	r2,r2,1
    f098:	1000091e 	bne	r2,zero,f0c0 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
    f09c:	a485383a 	mul	r2,r20,r18
    f0a0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    f0a4:	00000406 	br	f0b8 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    f0a8:	8c05883a 	add	r2,r17,r16
    f0ac:	a807883a 	mov	r3,r21
    f0b0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f0b4:	8c400044 	addi	r17,r17,1
    f0b8:	9c7ffb2e 	bgeu	r19,r17,f0a8 <__ram_exceptions_end+0xfb00da60>
    f0bc:	00002006 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f0c0:	e0bff517 	ldw	r2,-44(fp)
    f0c4:	10800e17 	ldw	r2,56(r2)
    f0c8:	10800098 	cmpnei	r2,r2,2
    f0cc:	10000c1e 	bne	r2,zero,f100 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
    f0d0:	9485883a 	add	r2,r18,r18
    f0d4:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    f0d8:	a485383a 	mul	r2,r20,r18
    f0dc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    f0e0:	00000506 	br	f0f8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    f0e4:	8c45883a 	add	r2,r17,r17
    f0e8:	1405883a 	add	r2,r2,r16
    f0ec:	a807883a 	mov	r3,r21
    f0f0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f0f4:	8c400044 	addi	r17,r17,1
    f0f8:	9c7ffa2e 	bgeu	r19,r17,f0e4 <__ram_exceptions_end+0xfb00da9c>
    f0fc:	00001006 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    f100:	9485883a 	add	r2,r18,r18
    f104:	1085883a 	add	r2,r2,r2
    f108:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    f10c:	a485383a 	mul	r2,r20,r18
    f110:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    f114:	00000606 	br	f130 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    f118:	8c45883a 	add	r2,r17,r17
    f11c:	1085883a 	add	r2,r2,r2
    f120:	1405883a 	add	r2,r2,r16
    f124:	a807883a 	mov	r3,r21
    f128:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f12c:	8c400044 	addi	r17,r17,1
    f130:	9c7ff92e 	bgeu	r19,r17,f118 <__ram_exceptions_end+0xfb00dad0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
    f134:	84a1883a 	add	r16,r16,r18
    f138:	00000106 	br	f140 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f13c:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    f140:	e6fff904 	addi	sp,fp,-28
    f144:	df000717 	ldw	fp,28(sp)
    f148:	dd800617 	ldw	r22,24(sp)
    f14c:	dd400517 	ldw	r21,20(sp)
    f150:	dd000417 	ldw	r20,16(sp)
    f154:	dcc00317 	ldw	r19,12(sp)
    f158:	dc800217 	ldw	r18,8(sp)
    f15c:	dc400117 	ldw	r17,4(sp)
    f160:	dc000017 	ldw	r16,0(sp)
    f164:	dec00804 	addi	sp,sp,32
    f168:	f800283a 	ret

0000f16c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    f16c:	defff404 	addi	sp,sp,-48
    f170:	df000b15 	stw	fp,44(sp)
    f174:	dd800a15 	stw	r22,40(sp)
    f178:	dd400915 	stw	r21,36(sp)
    f17c:	dd000815 	stw	r20,32(sp)
    f180:	dcc00715 	stw	r19,28(sp)
    f184:	dc800615 	stw	r18,24(sp)
    f188:	dc400515 	stw	r17,20(sp)
    f18c:	dc000415 	stw	r16,16(sp)
    f190:	df000b04 	addi	fp,sp,44
    f194:	e13ff515 	stw	r4,-44(fp)
    f198:	e17ff615 	stw	r5,-40(fp)
    f19c:	e1bff715 	stw	r6,-36(fp)
    f1a0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f1a4:	e0bff517 	ldw	r2,-44(fp)
    f1a8:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f1ac:	e0bff517 	ldw	r2,-44(fp)
    f1b0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
    f1b4:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
    f1b8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
    f1bc:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
    f1c0:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    f1c4:	9d00032e 	bgeu	r19,r20,f1d4 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
    f1c8:	a02b883a 	mov	r21,r20
		t_y = b_y;
    f1cc:	9829883a 	mov	r20,r19
		b_y = temp;
    f1d0:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    f1d4:	94406c2e 	bgeu	r18,r17,f388 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
    f1d8:	a4006b2e 	bgeu	r20,r16,f388 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f1dc:	9c000136 	bltu	r19,r16,f1e4 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
    f1e0:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f1e4:	e0800217 	ldw	r2,8(fp)
    f1e8:	10800058 	cmpnei	r2,r2,1
    f1ec:	1000031e 	bne	r2,zero,f1fc <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    f1f0:	e0bff517 	ldw	r2,-44(fp)
    f1f4:	14000c17 	ldw	r16,48(r2)
    f1f8:	00000206 	br	f204 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    f1fc:	e0bff517 	ldw	r2,-44(fp)
    f200:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f204:	e0bff517 	ldw	r2,-44(fp)
    f208:	10800d17 	ldw	r2,52(r2)
    f20c:	1000301e 	bne	r2,zero,f2d0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f210:	e0bff517 	ldw	r2,-44(fp)
    f214:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    f218:	a544983a 	sll	r2,r20,r21
    f21c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f220:	e0bff517 	ldw	r2,-44(fp)
    f224:	10800e17 	ldw	r2,56(r2)
    f228:	10800058 	cmpnei	r2,r2,1
    f22c:	10000b1e 	bne	r2,zero,f25c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
    f230:	a023883a 	mov	r17,r20
    f234:	00000706 	br	f254 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    f238:	9405883a 	add	r2,r18,r16
    f23c:	b007883a 	mov	r3,r22
    f240:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    f244:	00800044 	movi	r2,1
    f248:	1544983a 	sll	r2,r2,r21
    f24c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f250:	8c400044 	addi	r17,r17,1
    f254:	9c7ff82e 	bgeu	r19,r17,f238 <__ram_exceptions_end+0xfb00dbf0>
    f258:	00004c06 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f25c:	e0bff517 	ldw	r2,-44(fp)
    f260:	10800e17 	ldw	r2,56(r2)
    f264:	10800098 	cmpnei	r2,r2,2
    f268:	10000c1e 	bne	r2,zero,f29c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
    f26c:	a023883a 	mov	r17,r20
    f270:	00000806 	br	f294 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    f274:	9485883a 	add	r2,r18,r18
    f278:	1405883a 	add	r2,r2,r16
    f27c:	b007883a 	mov	r3,r22
    f280:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    f284:	00800044 	movi	r2,1
    f288:	1544983a 	sll	r2,r2,r21
    f28c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f290:	8c400044 	addi	r17,r17,1
    f294:	9c7ff72e 	bgeu	r19,r17,f274 <__ram_exceptions_end+0xfb00dc2c>
    f298:	00003c06 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f29c:	a023883a 	mov	r17,r20
    f2a0:	00000906 	br	f2c8 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    f2a4:	9485883a 	add	r2,r18,r18
    f2a8:	1085883a 	add	r2,r2,r2
    f2ac:	1405883a 	add	r2,r2,r16
    f2b0:	b007883a 	mov	r3,r22
    f2b4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    f2b8:	00800044 	movi	r2,1
    f2bc:	1544983a 	sll	r2,r2,r21
    f2c0:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f2c4:	8c400044 	addi	r17,r17,1
    f2c8:	9c7ff62e 	bgeu	r19,r17,f2a4 <__ram_exceptions_end+0xfb00dc5c>
    f2cc:	00002f06 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f2d0:	e0bff517 	ldw	r2,-44(fp)
    f2d4:	10800e17 	ldw	r2,56(r2)
    f2d8:	10800058 	cmpnei	r2,r2,1
    f2dc:	10000a1e 	bne	r2,zero,f308 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
    f2e0:	a445383a 	mul	r2,r20,r17
    f2e4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    f2e8:	00000506 	br	f300 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    f2ec:	9405883a 	add	r2,r18,r16
    f2f0:	b007883a 	mov	r3,r22
    f2f4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    f2f8:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f2fc:	a5000044 	addi	r20,r20,1
    f300:	9d3ffa2e 	bgeu	r19,r20,f2ec <__ram_exceptions_end+0xfb00dca4>
    f304:	00002106 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f308:	e0bff517 	ldw	r2,-44(fp)
    f30c:	10800e17 	ldw	r2,56(r2)
    f310:	10800098 	cmpnei	r2,r2,2
    f314:	10000d1e 	bne	r2,zero,f34c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
    f318:	8c45883a 	add	r2,r17,r17
    f31c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    f320:	a445383a 	mul	r2,r20,r17
    f324:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    f328:	00000606 	br	f344 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    f32c:	9485883a 	add	r2,r18,r18
    f330:	1405883a 	add	r2,r2,r16
    f334:	b007883a 	mov	r3,r22
    f338:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    f33c:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f340:	a5000044 	addi	r20,r20,1
    f344:	9d3ff92e 	bgeu	r19,r20,f32c <__ram_exceptions_end+0xfb00dce4>
    f348:	00001006 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    f34c:	8c45883a 	add	r2,r17,r17
    f350:	1085883a 	add	r2,r2,r2
    f354:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    f358:	a445383a 	mul	r2,r20,r17
    f35c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    f360:	00000706 	br	f380 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    f364:	9485883a 	add	r2,r18,r18
    f368:	1085883a 	add	r2,r2,r2
    f36c:	1405883a 	add	r2,r2,r16
    f370:	b007883a 	mov	r3,r22
    f374:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    f378:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f37c:	a5000044 	addi	r20,r20,1
    f380:	9d3ff82e 	bgeu	r19,r20,f364 <__ram_exceptions_end+0xfb00dd1c>
    f384:	00000106 	br	f38c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f388:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    f38c:	e6fff904 	addi	sp,fp,-28
    f390:	df000717 	ldw	fp,28(sp)
    f394:	dd800617 	ldw	r22,24(sp)
    f398:	dd400517 	ldw	r21,20(sp)
    f39c:	dd000417 	ldw	r20,16(sp)
    f3a0:	dcc00317 	ldw	r19,12(sp)
    f3a4:	dc800217 	ldw	r18,8(sp)
    f3a8:	dc400117 	ldw	r17,4(sp)
    f3ac:	dc000017 	ldw	r16,0(sp)
    f3b0:	dec00804 	addi	sp,sp,32
    f3b4:	f800283a 	ret

0000f3b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    f3b8:	defff804 	addi	sp,sp,-32
    f3bc:	dfc00715 	stw	ra,28(sp)
    f3c0:	df000615 	stw	fp,24(sp)
    f3c4:	df000604 	addi	fp,sp,24
    f3c8:	e13ffc15 	stw	r4,-16(fp)
    f3cc:	e17ffd15 	stw	r5,-12(fp)
    f3d0:	e1bffe15 	stw	r6,-8(fp)
    f3d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    f3d8:	e0800417 	ldw	r2,16(fp)
    f3dc:	d8800115 	stw	r2,4(sp)
    f3e0:	e0800317 	ldw	r2,12(fp)
    f3e4:	d8800015 	stw	r2,0(sp)
    f3e8:	e1fffe17 	ldw	r7,-8(fp)
    f3ec:	e1bfff17 	ldw	r6,-4(fp)
    f3f0:	e17ffd17 	ldw	r5,-12(fp)
    f3f4:	e13ffc17 	ldw	r4,-16(fp)
    f3f8:	000ef5c0 	call	ef5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    f3fc:	e0800417 	ldw	r2,16(fp)
    f400:	d8800115 	stw	r2,4(sp)
    f404:	e0800317 	ldw	r2,12(fp)
    f408:	d8800015 	stw	r2,0(sp)
    f40c:	e1c00217 	ldw	r7,8(fp)
    f410:	e1bfff17 	ldw	r6,-4(fp)
    f414:	e17ffd17 	ldw	r5,-12(fp)
    f418:	e13ffc17 	ldw	r4,-16(fp)
    f41c:	000ef5c0 	call	ef5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    f420:	e0800417 	ldw	r2,16(fp)
    f424:	d8800115 	stw	r2,4(sp)
    f428:	e0800317 	ldw	r2,12(fp)
    f42c:	d8800015 	stw	r2,0(sp)
    f430:	e1c00217 	ldw	r7,8(fp)
    f434:	e1bffe17 	ldw	r6,-8(fp)
    f438:	e17ffd17 	ldw	r5,-12(fp)
    f43c:	e13ffc17 	ldw	r4,-16(fp)
    f440:	000f16c0 	call	f16c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    f444:	e0800417 	ldw	r2,16(fp)
    f448:	d8800115 	stw	r2,4(sp)
    f44c:	e0800317 	ldw	r2,12(fp)
    f450:	d8800015 	stw	r2,0(sp)
    f454:	e1c00217 	ldw	r7,8(fp)
    f458:	e1bffe17 	ldw	r6,-8(fp)
    f45c:	e17fff17 	ldw	r5,-4(fp)
    f460:	e13ffc17 	ldw	r4,-16(fp)
    f464:	000f16c0 	call	f16c <alt_up_pixel_buffer_dma_draw_vline>
}
    f468:	0001883a 	nop
    f46c:	e037883a 	mov	sp,fp
    f470:	dfc00117 	ldw	ra,4(sp)
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00204 	addi	sp,sp,8
    f47c:	f800283a 	ret

0000f480 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    f480:	deffff04 	addi	sp,sp,-4
    f484:	df000015 	stw	fp,0(sp)
    f488:	d839883a 	mov	fp,sp
    f48c:	2005883a 	mov	r2,r4
    f490:	3007883a 	mov	r3,r6
    f494:	3809883a 	mov	r4,r7
    f498:	e1800117 	ldw	r6,4(fp)
    f49c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
    f4a0:	3800051e 	bne	r7,zero,f4b8 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    f4a4:	2909383a 	mul	r4,r5,r4
    f4a8:	20c7883a 	add	r3,r4,r3
    f4ac:	1885883a 	add	r2,r3,r2
    f4b0:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    f4b4:	00000e06 	br	f4f0 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
    f4b8:	39c00058 	cmpnei	r7,r7,1
    f4bc:	3800061e 	bne	r7,zero,f4d8 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    f4c0:	2909383a 	mul	r4,r5,r4
    f4c4:	20c7883a 	add	r3,r4,r3
    f4c8:	18c7883a 	add	r3,r3,r3
    f4cc:	1885883a 	add	r2,r3,r2
    f4d0:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    f4d4:	00000606 	br	f4f0 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    f4d8:	2909383a 	mul	r4,r5,r4
    f4dc:	20c7883a 	add	r3,r4,r3
    f4e0:	18c7883a 	add	r3,r3,r3
    f4e4:	18c7883a 	add	r3,r3,r3
    f4e8:	1885883a 	add	r2,r3,r2
    f4ec:	11800035 	stwio	r6,0(r2)
}
    f4f0:	0001883a 	nop
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00104 	addi	sp,sp,4
    f500:	f800283a 	ret

0000f504 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    f504:	deffeb04 	addi	sp,sp,-84
    f508:	dfc01415 	stw	ra,80(sp)
    f50c:	df001315 	stw	fp,76(sp)
    f510:	ddc01215 	stw	r23,72(sp)
    f514:	dd801115 	stw	r22,68(sp)
    f518:	dd401015 	stw	r21,64(sp)
    f51c:	dd000f15 	stw	r20,60(sp)
    f520:	dcc00e15 	stw	r19,56(sp)
    f524:	dc800d15 	stw	r18,52(sp)
    f528:	dc400c15 	stw	r17,48(sp)
    f52c:	dc000b15 	stw	r16,44(sp)
    f530:	df001304 	addi	fp,sp,76
    f534:	e13fef15 	stw	r4,-68(fp)
    f538:	e17ff015 	stw	r5,-64(fp)
    f53c:	e1bff115 	stw	r6,-60(fp)
    f540:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
    f544:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
    f548:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
    f54c:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
    f550:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    f554:	a4c5c83a 	sub	r2,r20,r19
    f558:	1000010e 	bge	r2,zero,f560 <alt_up_pixel_buffer_dma_draw_line+0x5c>
    f55c:	0085c83a 	sub	r2,zero,r2
    f560:	1007883a 	mov	r3,r2
    f564:	9445c83a 	sub	r2,r18,r17
    f568:	1000010e 	bge	r2,zero,f570 <alt_up_pixel_buffer_dma_draw_line+0x6c>
    f56c:	0085c83a 	sub	r2,zero,r2
    f570:	10c4803a 	cmplt	r2,r2,r3
    f574:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    f578:	e0bfef17 	ldw	r2,-68(fp)
    f57c:	10800e17 	ldw	r2,56(r2)
    f580:	10800060 	cmpeqi	r2,r2,1
    f584:	1000081e 	bne	r2,zero,f5a8 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    f588:	e0bfef17 	ldw	r2,-68(fp)
    f58c:	10800e17 	ldw	r2,56(r2)
    f590:	10800098 	cmpnei	r2,r2,2
    f594:	1000021e 	bne	r2,zero,f5a0 <alt_up_pixel_buffer_dma_draw_line+0x9c>
    f598:	00800044 	movi	r2,1
    f59c:	00000306 	br	f5ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
    f5a0:	00800084 	movi	r2,2
    f5a4:	00000106 	br	f5ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    f5a8:	0005883a 	mov	r2,zero
    f5ac:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
    f5b0:	e0800317 	ldw	r2,12(fp)
    f5b4:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    f5b8:	e0bfef17 	ldw	r2,-68(fp)
    f5bc:	10800d17 	ldw	r2,52(r2)
    f5c0:	1000071e 	bne	r2,zero,f5e0 <alt_up_pixel_buffer_dma_draw_line+0xdc>
    f5c4:	e0bfef17 	ldw	r2,-68(fp)
    f5c8:	10801317 	ldw	r2,76(r2)
    f5cc:	e0fff417 	ldw	r3,-48(fp)
    f5d0:	10c5c83a 	sub	r2,r2,r3
    f5d4:	00c00044 	movi	r3,1
    f5d8:	1884983a 	sll	r2,r3,r2
    f5dc:	00000206 	br	f5e8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    f5e0:	e0bfef17 	ldw	r2,-68(fp)
    f5e4:	10800f17 	ldw	r2,60(r2)
    f5e8:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
    f5ec:	e0800417 	ldw	r2,16(fp)
    f5f0:	10800058 	cmpnei	r2,r2,1
    f5f4:	1000031e 	bne	r2,zero,f604 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
    f5f8:	e0bfef17 	ldw	r2,-68(fp)
    f5fc:	15c00c17 	ldw	r23,48(r2)
    f600:	00000206 	br	f60c <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    f604:	e0bfef17 	ldw	r2,-68(fp)
    f608:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
    f60c:	e0bff307 	ldb	r2,-52(fp)
    f610:	0080060e 	bge	zero,r2,f62c <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
    f614:	8821883a 	mov	r16,r17
		x_0 = y_0;
    f618:	9823883a 	mov	r17,r19
		y_0 = error;
    f61c:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
    f620:	9021883a 	mov	r16,r18
		x_1 = y_1;
    f624:	a025883a 	mov	r18,r20
		y_1 = error;
    f628:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
    f62c:	9440060e 	bge	r18,r17,f648 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
    f630:	8821883a 	mov	r16,r17
		x_0 = x_1;
    f634:	9023883a 	mov	r17,r18
		x_1 = error;
    f638:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
    f63c:	9821883a 	mov	r16,r19
		y_0 = y_1;
    f640:	a027883a 	mov	r19,r20
		y_1 = error;
    f644:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    f648:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
    f64c:	a4c5c83a 	sub	r2,r20,r19
    f650:	1000010e 	bge	r2,zero,f658 <alt_up_pixel_buffer_dma_draw_line+0x154>
    f654:	0085c83a 	sub	r2,zero,r2
    f658:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
    f65c:	a804d7fa 	srli	r2,r21,31
    f660:	1545883a 	add	r2,r2,r21
    f664:	1005d07a 	srai	r2,r2,1
    f668:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
    f66c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
    f670:	9d00020e 	bge	r19,r20,f67c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
    f674:	04c00044 	movi	r19,1
    f678:	00000106 	br	f680 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
    f67c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    f680:	e0bff307 	ldb	r2,-52(fp)
    f684:	10800058 	cmpnei	r2,r2,1
    f688:	1000211e 	bne	r2,zero,f710 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
    f68c:	00000f06 	br	f6cc <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    f690:	e0bff417 	ldw	r2,-48(fp)
    f694:	d8800115 	stw	r2,4(sp)
    f698:	e0bff517 	ldw	r2,-44(fp)
    f69c:	d8800015 	stw	r2,0(sp)
    f6a0:	880f883a 	mov	r7,r17
    f6a4:	b00d883a 	mov	r6,r22
    f6a8:	e17ff617 	ldw	r5,-40(fp)
    f6ac:	b809883a 	mov	r4,r23
    f6b0:	000f4800 	call	f480 <helper_plot_pixel>
			error = error + deltay;
    f6b4:	e0bff717 	ldw	r2,-36(fp)
    f6b8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    f6bc:	0400020e 	bge	zero,r16,f6c8 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
    f6c0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    f6c4:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    f6c8:	8c400044 	addi	r17,r17,1
    f6cc:	947ff00e 	bge	r18,r17,f690 <__ram_exceptions_end+0xfb00e048>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    f6d0:	00001006 	br	f714 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    f6d4:	e0bff417 	ldw	r2,-48(fp)
    f6d8:	d8800115 	stw	r2,4(sp)
    f6dc:	e0bff517 	ldw	r2,-44(fp)
    f6e0:	d8800015 	stw	r2,0(sp)
    f6e4:	b00f883a 	mov	r7,r22
    f6e8:	880d883a 	mov	r6,r17
    f6ec:	e17ff617 	ldw	r5,-40(fp)
    f6f0:	b809883a 	mov	r4,r23
    f6f4:	000f4800 	call	f480 <helper_plot_pixel>
			error = error + deltay;
    f6f8:	e0bff717 	ldw	r2,-36(fp)
    f6fc:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    f700:	0400020e 	bge	zero,r16,f70c <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
    f704:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    f708:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    f70c:	8c400044 	addi	r17,r17,1
    f710:	947ff00e 	bge	r18,r17,f6d4 <__ram_exceptions_end+0xfb00e08c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    f714:	0001883a 	nop
    f718:	e6fff804 	addi	sp,fp,-32
    f71c:	dfc00917 	ldw	ra,36(sp)
    f720:	df000817 	ldw	fp,32(sp)
    f724:	ddc00717 	ldw	r23,28(sp)
    f728:	dd800617 	ldw	r22,24(sp)
    f72c:	dd400517 	ldw	r21,20(sp)
    f730:	dd000417 	ldw	r20,16(sp)
    f734:	dcc00317 	ldw	r19,12(sp)
    f738:	dc800217 	ldw	r18,8(sp)
    f73c:	dc400117 	ldw	r17,4(sp)
    f740:	dc000017 	ldw	r16,0(sp)
    f744:	dec00a04 	addi	sp,sp,40
    f748:	f800283a 	ret

0000f74c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f74c:	defff504 	addi	sp,sp,-44
    f750:	df000a15 	stw	fp,40(sp)
    f754:	df000a04 	addi	fp,sp,40
    f758:	e13ffc15 	stw	r4,-16(fp)
    f75c:	e17ffd15 	stw	r5,-12(fp)
    f760:	e1bffe15 	stw	r6,-8(fp)
    f764:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f768:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f76c:	d0a6f117 	ldw	r2,-25660(gp)
  
  if (alt_ticks_per_second ())
    f770:	10003c26 	beq	r2,zero,f864 <alt_alarm_start+0x118>
  {
    if (alarm)
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10003826 	beq	r2,zero,f85c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    f77c:	e0bffc17 	ldw	r2,-16(fp)
    f780:	e0fffe17 	ldw	r3,-8(fp)
    f784:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f788:	e0bffc17 	ldw	r2,-16(fp)
    f78c:	e0ffff17 	ldw	r3,-4(fp)
    f790:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f794:	0005303a 	rdctl	r2,status
    f798:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f79c:	e0fff917 	ldw	r3,-28(fp)
    f7a0:	00bfff84 	movi	r2,-2
    f7a4:	1884703a 	and	r2,r3,r2
    f7a8:	1001703a 	wrctl	status,r2
  
  return context;
    f7ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f7b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f7b4:	d0a6f217 	ldw	r2,-25656(gp)
      
      current_nticks = alt_nticks();
    f7b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f7bc:	e0fffd17 	ldw	r3,-12(fp)
    f7c0:	e0bff617 	ldw	r2,-40(fp)
    f7c4:	1885883a 	add	r2,r3,r2
    f7c8:	10c00044 	addi	r3,r2,1
    f7cc:	e0bffc17 	ldw	r2,-16(fp)
    f7d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f7d4:	e0bffc17 	ldw	r2,-16(fp)
    f7d8:	10c00217 	ldw	r3,8(r2)
    f7dc:	e0bff617 	ldw	r2,-40(fp)
    f7e0:	1880042e 	bgeu	r3,r2,f7f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	00c00044 	movi	r3,1
    f7ec:	10c00405 	stb	r3,16(r2)
    f7f0:	00000206 	br	f7fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f7fc:	e0bffc17 	ldw	r2,-16(fp)
    f800:	d0e00d04 	addi	r3,gp,-32716
    f804:	e0fffa15 	stw	r3,-24(fp)
    f808:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f80c:	e0bffb17 	ldw	r2,-20(fp)
    f810:	e0fffa17 	ldw	r3,-24(fp)
    f814:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f818:	e0bffa17 	ldw	r2,-24(fp)
    f81c:	10c00017 	ldw	r3,0(r2)
    f820:	e0bffb17 	ldw	r2,-20(fp)
    f824:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f828:	e0bffa17 	ldw	r2,-24(fp)
    f82c:	10800017 	ldw	r2,0(r2)
    f830:	e0fffb17 	ldw	r3,-20(fp)
    f834:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f838:	e0bffa17 	ldw	r2,-24(fp)
    f83c:	e0fffb17 	ldw	r3,-20(fp)
    f840:	10c00015 	stw	r3,0(r2)
    f844:	e0bff817 	ldw	r2,-32(fp)
    f848:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f84c:	e0bff717 	ldw	r2,-36(fp)
    f850:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f854:	0005883a 	mov	r2,zero
    f858:	00000306 	br	f868 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    f85c:	00bffa84 	movi	r2,-22
    f860:	00000106 	br	f868 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    f864:	00bfde84 	movi	r2,-134
  }
}
    f868:	e037883a 	mov	sp,fp
    f86c:	df000017 	ldw	fp,0(sp)
    f870:	dec00104 	addi	sp,sp,4
    f874:	f800283a 	ret

0000f878 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f878:	defffe04 	addi	sp,sp,-8
    f87c:	df000115 	stw	fp,4(sp)
    f880:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f884:	e03fff15 	stw	zero,-4(fp)
    f888:	00000506 	br	f8a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f88c:	e0bfff17 	ldw	r2,-4(fp)
    f890:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f894:	e0bfff17 	ldw	r2,-4(fp)
    f898:	10800804 	addi	r2,r2,32
    f89c:	e0bfff15 	stw	r2,-4(fp)
    f8a0:	e0bfff17 	ldw	r2,-4(fp)
    f8a4:	00ffffd4 	movui	r3,65535
    f8a8:	18bff82e 	bgeu	r3,r2,f88c <__ram_exceptions_end+0xfb00e244>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f8ac:	0001883a 	nop
    f8b0:	e037883a 	mov	sp,fp
    f8b4:	df000017 	ldw	fp,0(sp)
    f8b8:	dec00104 	addi	sp,sp,4
    f8bc:	f800283a 	ret

0000f8c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8c0:	defffe04 	addi	sp,sp,-8
    f8c4:	dfc00115 	stw	ra,4(sp)
    f8c8:	df000015 	stw	fp,0(sp)
    f8cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8d0:	d0a00a17 	ldw	r2,-32728(gp)
    f8d4:	10000326 	beq	r2,zero,f8e4 <alt_get_errno+0x24>
    f8d8:	d0a00a17 	ldw	r2,-32728(gp)
    f8dc:	103ee83a 	callr	r2
    f8e0:	00000106 	br	f8e8 <alt_get_errno+0x28>
    f8e4:	d0a6ea04 	addi	r2,gp,-25688
}
    f8e8:	e037883a 	mov	sp,fp
    f8ec:	dfc00117 	ldw	ra,4(sp)
    f8f0:	df000017 	ldw	fp,0(sp)
    f8f4:	dec00204 	addi	sp,sp,8
    f8f8:	f800283a 	ret

0000f8fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f8fc:	defffa04 	addi	sp,sp,-24
    f900:	dfc00515 	stw	ra,20(sp)
    f904:	df000415 	stw	fp,16(sp)
    f908:	df000404 	addi	fp,sp,16
    f90c:	e13ffe15 	stw	r4,-8(fp)
    f910:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f914:	e0bffe17 	ldw	r2,-8(fp)
    f918:	10000326 	beq	r2,zero,f928 <alt_dev_llist_insert+0x2c>
    f91c:	e0bffe17 	ldw	r2,-8(fp)
    f920:	10800217 	ldw	r2,8(r2)
    f924:	1000061e 	bne	r2,zero,f940 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f928:	000f8c00 	call	f8c0 <alt_get_errno>
    f92c:	1007883a 	mov	r3,r2
    f930:	00800584 	movi	r2,22
    f934:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f938:	00bffa84 	movi	r2,-22
    f93c:	00001306 	br	f98c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f940:	e0bffe17 	ldw	r2,-8(fp)
    f944:	e0ffff17 	ldw	r3,-4(fp)
    f948:	e0fffc15 	stw	r3,-16(fp)
    f94c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f950:	e0bffd17 	ldw	r2,-12(fp)
    f954:	e0fffc17 	ldw	r3,-16(fp)
    f958:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f95c:	e0bffc17 	ldw	r2,-16(fp)
    f960:	10c00017 	ldw	r3,0(r2)
    f964:	e0bffd17 	ldw	r2,-12(fp)
    f968:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f96c:	e0bffc17 	ldw	r2,-16(fp)
    f970:	10800017 	ldw	r2,0(r2)
    f974:	e0fffd17 	ldw	r3,-12(fp)
    f978:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f97c:	e0bffc17 	ldw	r2,-16(fp)
    f980:	e0fffd17 	ldw	r3,-12(fp)
    f984:	10c00015 	stw	r3,0(r2)

  return 0;  
    f988:	0005883a 	mov	r2,zero
}
    f98c:	e037883a 	mov	sp,fp
    f990:	dfc00117 	ldw	ra,4(sp)
    f994:	df000017 	ldw	fp,0(sp)
    f998:	dec00204 	addi	sp,sp,8
    f99c:	f800283a 	ret

0000f9a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f9a0:	defffd04 	addi	sp,sp,-12
    f9a4:	dfc00215 	stw	ra,8(sp)
    f9a8:	df000115 	stw	fp,4(sp)
    f9ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f9b0:	00800074 	movhi	r2,1
    f9b4:	10821b04 	addi	r2,r2,2156
    f9b8:	e0bfff15 	stw	r2,-4(fp)
    f9bc:	00000606 	br	f9d8 <_do_ctors+0x38>
        (*ctor) (); 
    f9c0:	e0bfff17 	ldw	r2,-4(fp)
    f9c4:	10800017 	ldw	r2,0(r2)
    f9c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f9cc:	e0bfff17 	ldw	r2,-4(fp)
    f9d0:	10bfff04 	addi	r2,r2,-4
    f9d4:	e0bfff15 	stw	r2,-4(fp)
    f9d8:	e0ffff17 	ldw	r3,-4(fp)
    f9dc:	00800074 	movhi	r2,1
    f9e0:	10821b04 	addi	r2,r2,2156
    f9e4:	18bff62e 	bgeu	r3,r2,f9c0 <__ram_exceptions_end+0xfb00e378>
        (*ctor) (); 
}
    f9e8:	0001883a 	nop
    f9ec:	e037883a 	mov	sp,fp
    f9f0:	dfc00117 	ldw	ra,4(sp)
    f9f4:	df000017 	ldw	fp,0(sp)
    f9f8:	dec00204 	addi	sp,sp,8
    f9fc:	f800283a 	ret

0000fa00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fa00:	defffd04 	addi	sp,sp,-12
    fa04:	dfc00215 	stw	ra,8(sp)
    fa08:	df000115 	stw	fp,4(sp)
    fa0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fa10:	00800074 	movhi	r2,1
    fa14:	10821b04 	addi	r2,r2,2156
    fa18:	e0bfff15 	stw	r2,-4(fp)
    fa1c:	00000606 	br	fa38 <_do_dtors+0x38>
        (*dtor) (); 
    fa20:	e0bfff17 	ldw	r2,-4(fp)
    fa24:	10800017 	ldw	r2,0(r2)
    fa28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fa2c:	e0bfff17 	ldw	r2,-4(fp)
    fa30:	10bfff04 	addi	r2,r2,-4
    fa34:	e0bfff15 	stw	r2,-4(fp)
    fa38:	e0ffff17 	ldw	r3,-4(fp)
    fa3c:	00800074 	movhi	r2,1
    fa40:	10821c04 	addi	r2,r2,2160
    fa44:	18bff62e 	bgeu	r3,r2,fa20 <__ram_exceptions_end+0xfb00e3d8>
        (*dtor) (); 
}
    fa48:	0001883a 	nop
    fa4c:	e037883a 	mov	sp,fp
    fa50:	dfc00117 	ldw	ra,4(sp)
    fa54:	df000017 	ldw	fp,0(sp)
    fa58:	dec00204 	addi	sp,sp,8
    fa5c:	f800283a 	ret

0000fa60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa60:	defffa04 	addi	sp,sp,-24
    fa64:	dfc00515 	stw	ra,20(sp)
    fa68:	df000415 	stw	fp,16(sp)
    fa6c:	df000404 	addi	fp,sp,16
    fa70:	e13ffe15 	stw	r4,-8(fp)
    fa74:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fa78:	e0bfff17 	ldw	r2,-4(fp)
    fa7c:	10800017 	ldw	r2,0(r2)
    fa80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fa84:	e13ffe17 	ldw	r4,-8(fp)
    fa88:	000a2b80 	call	a2b8 <strlen>
    fa8c:	10800044 	addi	r2,r2,1
    fa90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa94:	00000d06 	br	facc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fa98:	e0bffc17 	ldw	r2,-16(fp)
    fa9c:	10800217 	ldw	r2,8(r2)
    faa0:	e0fffd17 	ldw	r3,-12(fp)
    faa4:	180d883a 	mov	r6,r3
    faa8:	e17ffe17 	ldw	r5,-8(fp)
    faac:	1009883a 	mov	r4,r2
    fab0:	00105240 	call	10524 <memcmp>
    fab4:	1000021e 	bne	r2,zero,fac0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fab8:	e0bffc17 	ldw	r2,-16(fp)
    fabc:	00000706 	br	fadc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fac0:	e0bffc17 	ldw	r2,-16(fp)
    fac4:	10800017 	ldw	r2,0(r2)
    fac8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    facc:	e0fffc17 	ldw	r3,-16(fp)
    fad0:	e0bfff17 	ldw	r2,-4(fp)
    fad4:	18bff01e 	bne	r3,r2,fa98 <__ram_exceptions_end+0xfb00e450>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fad8:	0005883a 	mov	r2,zero
}
    fadc:	e037883a 	mov	sp,fp
    fae0:	dfc00117 	ldw	ra,4(sp)
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00204 	addi	sp,sp,8
    faec:	f800283a 	ret

0000faf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    faf0:	defffe04 	addi	sp,sp,-8
    faf4:	dfc00115 	stw	ra,4(sp)
    faf8:	df000015 	stw	fp,0(sp)
    fafc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fb00:	01400074 	movhi	r5,1
    fb04:	0009883a 	mov	r4,zero
    fb08:	00103ac0 	call	103ac <alt_icache_flush>
#endif
}
    fb0c:	0001883a 	nop
    fb10:	e037883a 	mov	sp,fp
    fb14:	dfc00117 	ldw	ra,4(sp)
    fb18:	df000017 	ldw	fp,0(sp)
    fb1c:	dec00204 	addi	sp,sp,8
    fb20:	f800283a 	ret

0000fb24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    fb24:	defff904 	addi	sp,sp,-28
    fb28:	dfc00615 	stw	ra,24(sp)
    fb2c:	df000515 	stw	fp,20(sp)
    fb30:	df000504 	addi	fp,sp,20
    fb34:	e13ffc15 	stw	r4,-16(fp)
    fb38:	e17ffd15 	stw	r5,-12(fp)
    fb3c:	e1bffe15 	stw	r6,-8(fp)
    fb40:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    fb44:	e1bfff17 	ldw	r6,-4(fp)
    fb48:	e17ffe17 	ldw	r5,-8(fp)
    fb4c:	e13ffd17 	ldw	r4,-12(fp)
    fb50:	000fee40 	call	fee4 <open>
    fb54:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    fb58:	e0bffb17 	ldw	r2,-20(fp)
    fb5c:	10001c16 	blt	r2,zero,fbd0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    fb60:	00800074 	movhi	r2,1
    fb64:	108e9f04 	addi	r2,r2,14972
    fb68:	e0fffb17 	ldw	r3,-20(fp)
    fb6c:	18c00324 	muli	r3,r3,12
    fb70:	10c5883a 	add	r2,r2,r3
    fb74:	10c00017 	ldw	r3,0(r2)
    fb78:	e0bffc17 	ldw	r2,-16(fp)
    fb7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fb80:	00800074 	movhi	r2,1
    fb84:	108e9f04 	addi	r2,r2,14972
    fb88:	e0fffb17 	ldw	r3,-20(fp)
    fb8c:	18c00324 	muli	r3,r3,12
    fb90:	10c5883a 	add	r2,r2,r3
    fb94:	10800104 	addi	r2,r2,4
    fb98:	10c00017 	ldw	r3,0(r2)
    fb9c:	e0bffc17 	ldw	r2,-16(fp)
    fba0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    fba4:	00800074 	movhi	r2,1
    fba8:	108e9f04 	addi	r2,r2,14972
    fbac:	e0fffb17 	ldw	r3,-20(fp)
    fbb0:	18c00324 	muli	r3,r3,12
    fbb4:	10c5883a 	add	r2,r2,r3
    fbb8:	10800204 	addi	r2,r2,8
    fbbc:	10c00017 	ldw	r3,0(r2)
    fbc0:	e0bffc17 	ldw	r2,-16(fp)
    fbc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    fbc8:	e13ffb17 	ldw	r4,-20(fp)
    fbcc:	000d2840 	call	d284 <alt_release_fd>
  }
} 
    fbd0:	0001883a 	nop
    fbd4:	e037883a 	mov	sp,fp
    fbd8:	dfc00117 	ldw	ra,4(sp)
    fbdc:	df000017 	ldw	fp,0(sp)
    fbe0:	dec00204 	addi	sp,sp,8
    fbe4:	f800283a 	ret

0000fbe8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    fbe8:	defffb04 	addi	sp,sp,-20
    fbec:	dfc00415 	stw	ra,16(sp)
    fbf0:	df000315 	stw	fp,12(sp)
    fbf4:	df000304 	addi	fp,sp,12
    fbf8:	e13ffd15 	stw	r4,-12(fp)
    fbfc:	e17ffe15 	stw	r5,-8(fp)
    fc00:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    fc04:	01c07fc4 	movi	r7,511
    fc08:	01800044 	movi	r6,1
    fc0c:	e17ffd17 	ldw	r5,-12(fp)
    fc10:	01000074 	movhi	r4,1
    fc14:	210ea204 	addi	r4,r4,14984
    fc18:	000fb240 	call	fb24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    fc1c:	01c07fc4 	movi	r7,511
    fc20:	000d883a 	mov	r6,zero
    fc24:	e17ffe17 	ldw	r5,-8(fp)
    fc28:	01000074 	movhi	r4,1
    fc2c:	210e9f04 	addi	r4,r4,14972
    fc30:	000fb240 	call	fb24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    fc34:	01c07fc4 	movi	r7,511
    fc38:	01800044 	movi	r6,1
    fc3c:	e17fff17 	ldw	r5,-4(fp)
    fc40:	01000074 	movhi	r4,1
    fc44:	210ea504 	addi	r4,r4,14996
    fc48:	000fb240 	call	fb24 <alt_open_fd>
}  
    fc4c:	0001883a 	nop
    fc50:	e037883a 	mov	sp,fp
    fc54:	dfc00117 	ldw	ra,4(sp)
    fc58:	df000017 	ldw	fp,0(sp)
    fc5c:	dec00204 	addi	sp,sp,8
    fc60:	f800283a 	ret

0000fc64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    fc64:	defff004 	addi	sp,sp,-64
    fc68:	df000f15 	stw	fp,60(sp)
    fc6c:	df000f04 	addi	fp,sp,60
    fc70:	e13ffd15 	stw	r4,-12(fp)
    fc74:	e17ffe15 	stw	r5,-8(fp)
    fc78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    fc7c:	00bffa84 	movi	r2,-22
    fc80:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    fc84:	e0bffd17 	ldw	r2,-12(fp)
    fc88:	10800828 	cmpgeui	r2,r2,32
    fc8c:	1000501e 	bne	r2,zero,fdd0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc90:	0005303a 	rdctl	r2,status
    fc94:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc98:	e0fff617 	ldw	r3,-40(fp)
    fc9c:	00bfff84 	movi	r2,-2
    fca0:	1884703a 	and	r2,r3,r2
    fca4:	1001703a 	wrctl	status,r2
  
  return context;
    fca8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    fcac:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    fcb0:	008000b4 	movhi	r2,2
    fcb4:	10b0cf04 	addi	r2,r2,-15556
    fcb8:	e0fffd17 	ldw	r3,-12(fp)
    fcbc:	180690fa 	slli	r3,r3,3
    fcc0:	10c5883a 	add	r2,r2,r3
    fcc4:	e0ffff17 	ldw	r3,-4(fp)
    fcc8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    fccc:	008000b4 	movhi	r2,2
    fcd0:	10b0cf04 	addi	r2,r2,-15556
    fcd4:	e0fffd17 	ldw	r3,-12(fp)
    fcd8:	180690fa 	slli	r3,r3,3
    fcdc:	10c5883a 	add	r2,r2,r3
    fce0:	10800104 	addi	r2,r2,4
    fce4:	e0fffe17 	ldw	r3,-8(fp)
    fce8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    fcec:	e0bfff17 	ldw	r2,-4(fp)
    fcf0:	10001926 	beq	r2,zero,fd58 <alt_irq_register+0xf4>
    fcf4:	e0bffd17 	ldw	r2,-12(fp)
    fcf8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcfc:	0005303a 	rdctl	r2,status
    fd00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd04:	e0fff717 	ldw	r3,-36(fp)
    fd08:	00bfff84 	movi	r2,-2
    fd0c:	1884703a 	and	r2,r3,r2
    fd10:	1001703a 	wrctl	status,r2
  
  return context;
    fd14:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fd18:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    fd1c:	00c00044 	movi	r3,1
    fd20:	e0bff217 	ldw	r2,-56(fp)
    fd24:	1884983a 	sll	r2,r3,r2
    fd28:	1007883a 	mov	r3,r2
    fd2c:	d0a6f017 	ldw	r2,-25664(gp)
    fd30:	1884b03a 	or	r2,r3,r2
    fd34:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fd38:	d0a6f017 	ldw	r2,-25664(gp)
    fd3c:	100170fa 	wrctl	ienable,r2
    fd40:	e0bff817 	ldw	r2,-32(fp)
    fd44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd48:	e0bff917 	ldw	r2,-28(fp)
    fd4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fd50:	0005883a 	mov	r2,zero
    fd54:	00001906 	br	fdbc <alt_irq_register+0x158>
    fd58:	e0bffd17 	ldw	r2,-12(fp)
    fd5c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd60:	0005303a 	rdctl	r2,status
    fd64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd68:	e0fffa17 	ldw	r3,-24(fp)
    fd6c:	00bfff84 	movi	r2,-2
    fd70:	1884703a 	and	r2,r3,r2
    fd74:	1001703a 	wrctl	status,r2
  
  return context;
    fd78:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fd7c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    fd80:	00c00044 	movi	r3,1
    fd84:	e0bff417 	ldw	r2,-48(fp)
    fd88:	1884983a 	sll	r2,r3,r2
    fd8c:	0084303a 	nor	r2,zero,r2
    fd90:	1007883a 	mov	r3,r2
    fd94:	d0a6f017 	ldw	r2,-25664(gp)
    fd98:	1884703a 	and	r2,r3,r2
    fd9c:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fda0:	d0a6f017 	ldw	r2,-25664(gp)
    fda4:	100170fa 	wrctl	ienable,r2
    fda8:	e0bffb17 	ldw	r2,-20(fp)
    fdac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdb0:	e0bffc17 	ldw	r2,-16(fp)
    fdb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fdb8:	0005883a 	mov	r2,zero
    fdbc:	e0bff115 	stw	r2,-60(fp)
    fdc0:	e0bff317 	ldw	r2,-52(fp)
    fdc4:	e0bff515 	stw	r2,-44(fp)
    fdc8:	e0bff517 	ldw	r2,-44(fp)
    fdcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    fdd0:	e0bff117 	ldw	r2,-60(fp)
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	df000017 	ldw	fp,0(sp)
    fddc:	dec00104 	addi	sp,sp,4
    fde0:	f800283a 	ret

0000fde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fde4:	defffe04 	addi	sp,sp,-8
    fde8:	dfc00115 	stw	ra,4(sp)
    fdec:	df000015 	stw	fp,0(sp)
    fdf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fdf4:	d0a00a17 	ldw	r2,-32728(gp)
    fdf8:	10000326 	beq	r2,zero,fe08 <alt_get_errno+0x24>
    fdfc:	d0a00a17 	ldw	r2,-32728(gp)
    fe00:	103ee83a 	callr	r2
    fe04:	00000106 	br	fe0c <alt_get_errno+0x28>
    fe08:	d0a6ea04 	addi	r2,gp,-25688
}
    fe0c:	e037883a 	mov	sp,fp
    fe10:	dfc00117 	ldw	ra,4(sp)
    fe14:	df000017 	ldw	fp,0(sp)
    fe18:	dec00204 	addi	sp,sp,8
    fe1c:	f800283a 	ret

0000fe20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fe20:	defffd04 	addi	sp,sp,-12
    fe24:	df000215 	stw	fp,8(sp)
    fe28:	df000204 	addi	fp,sp,8
    fe2c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fe30:	e0bfff17 	ldw	r2,-4(fp)
    fe34:	10800217 	ldw	r2,8(r2)
    fe38:	10d00034 	orhi	r3,r2,16384
    fe3c:	e0bfff17 	ldw	r2,-4(fp)
    fe40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fe44:	e03ffe15 	stw	zero,-8(fp)
    fe48:	00001d06 	br	fec0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fe4c:	00800074 	movhi	r2,1
    fe50:	108e9f04 	addi	r2,r2,14972
    fe54:	e0fffe17 	ldw	r3,-8(fp)
    fe58:	18c00324 	muli	r3,r3,12
    fe5c:	10c5883a 	add	r2,r2,r3
    fe60:	10c00017 	ldw	r3,0(r2)
    fe64:	e0bfff17 	ldw	r2,-4(fp)
    fe68:	10800017 	ldw	r2,0(r2)
    fe6c:	1880111e 	bne	r3,r2,feb4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fe70:	00800074 	movhi	r2,1
    fe74:	108e9f04 	addi	r2,r2,14972
    fe78:	e0fffe17 	ldw	r3,-8(fp)
    fe7c:	18c00324 	muli	r3,r3,12
    fe80:	10c5883a 	add	r2,r2,r3
    fe84:	10800204 	addi	r2,r2,8
    fe88:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fe8c:	1000090e 	bge	r2,zero,feb4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fe90:	e0bffe17 	ldw	r2,-8(fp)
    fe94:	10c00324 	muli	r3,r2,12
    fe98:	00800074 	movhi	r2,1
    fe9c:	108e9f04 	addi	r2,r2,14972
    fea0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	18800226 	beq	r3,r2,feb4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    feac:	00bffcc4 	movi	r2,-13
    feb0:	00000806 	br	fed4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    feb4:	e0bffe17 	ldw	r2,-8(fp)
    feb8:	10800044 	addi	r2,r2,1
    febc:	e0bffe15 	stw	r2,-8(fp)
    fec0:	d0a00917 	ldw	r2,-32732(gp)
    fec4:	1007883a 	mov	r3,r2
    fec8:	e0bffe17 	ldw	r2,-8(fp)
    fecc:	18bfdf2e 	bgeu	r3,r2,fe4c <__ram_exceptions_end+0xfb00e804>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    fed0:	0005883a 	mov	r2,zero
}
    fed4:	e037883a 	mov	sp,fp
    fed8:	df000017 	ldw	fp,0(sp)
    fedc:	dec00104 	addi	sp,sp,4
    fee0:	f800283a 	ret

0000fee4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    fee4:	defff604 	addi	sp,sp,-40
    fee8:	dfc00915 	stw	ra,36(sp)
    feec:	df000815 	stw	fp,32(sp)
    fef0:	df000804 	addi	fp,sp,32
    fef4:	e13ffd15 	stw	r4,-12(fp)
    fef8:	e17ffe15 	stw	r5,-8(fp)
    fefc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ff00:	00bfffc4 	movi	r2,-1
    ff04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ff08:	00bffb44 	movi	r2,-19
    ff0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ff10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ff14:	d1600704 	addi	r5,gp,-32740
    ff18:	e13ffd17 	ldw	r4,-12(fp)
    ff1c:	000fa600 	call	fa60 <alt_find_dev>
    ff20:	e0bff815 	stw	r2,-32(fp)
    ff24:	e0bff817 	ldw	r2,-32(fp)
    ff28:	1000051e 	bne	r2,zero,ff40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ff2c:	e13ffd17 	ldw	r4,-12(fp)
    ff30:	00102000 	call	10200 <alt_find_file>
    ff34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ff38:	00800044 	movi	r2,1
    ff3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ff40:	e0bff817 	ldw	r2,-32(fp)
    ff44:	10002926 	beq	r2,zero,ffec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ff48:	e13ff817 	ldw	r4,-32(fp)
    ff4c:	00103080 	call	10308 <alt_get_fd>
    ff50:	e0bff915 	stw	r2,-28(fp)
    ff54:	e0bff917 	ldw	r2,-28(fp)
    ff58:	1000030e 	bge	r2,zero,ff68 <open+0x84>
    {
      status = index;
    ff5c:	e0bff917 	ldw	r2,-28(fp)
    ff60:	e0bffa15 	stw	r2,-24(fp)
    ff64:	00002306 	br	fff4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    ff68:	e0bff917 	ldw	r2,-28(fp)
    ff6c:	10c00324 	muli	r3,r2,12
    ff70:	00800074 	movhi	r2,1
    ff74:	108e9f04 	addi	r2,r2,14972
    ff78:	1885883a 	add	r2,r3,r2
    ff7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ff80:	e0fffe17 	ldw	r3,-8(fp)
    ff84:	00900034 	movhi	r2,16384
    ff88:	10bfffc4 	addi	r2,r2,-1
    ff8c:	1886703a 	and	r3,r3,r2
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ff98:	e0bffb17 	ldw	r2,-20(fp)
    ff9c:	1000051e 	bne	r2,zero,ffb4 <open+0xd0>
    ffa0:	e13ffc17 	ldw	r4,-16(fp)
    ffa4:	000fe200 	call	fe20 <alt_file_locked>
    ffa8:	e0bffa15 	stw	r2,-24(fp)
    ffac:	e0bffa17 	ldw	r2,-24(fp)
    ffb0:	10001016 	blt	r2,zero,fff4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ffb4:	e0bff817 	ldw	r2,-32(fp)
    ffb8:	10800317 	ldw	r2,12(r2)
    ffbc:	10000826 	beq	r2,zero,ffe0 <open+0xfc>
    ffc0:	e0bff817 	ldw	r2,-32(fp)
    ffc4:	10800317 	ldw	r2,12(r2)
    ffc8:	e1ffff17 	ldw	r7,-4(fp)
    ffcc:	e1bffe17 	ldw	r6,-8(fp)
    ffd0:	e17ffd17 	ldw	r5,-12(fp)
    ffd4:	e13ffc17 	ldw	r4,-16(fp)
    ffd8:	103ee83a 	callr	r2
    ffdc:	00000106 	br	ffe4 <open+0x100>
    ffe0:	0005883a 	mov	r2,zero
    ffe4:	e0bffa15 	stw	r2,-24(fp)
    ffe8:	00000206 	br	fff4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ffec:	00bffb44 	movi	r2,-19
    fff0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    fff4:	e0bffa17 	ldw	r2,-24(fp)
    fff8:	1000090e 	bge	r2,zero,10020 <open+0x13c>
  {
    alt_release_fd (index);  
    fffc:	e13ff917 	ldw	r4,-28(fp)
   10000:	000d2840 	call	d284 <alt_release_fd>
    ALT_ERRNO = -status;
   10004:	000fde40 	call	fde4 <alt_get_errno>
   10008:	1007883a 	mov	r3,r2
   1000c:	e0bffa17 	ldw	r2,-24(fp)
   10010:	0085c83a 	sub	r2,zero,r2
   10014:	18800015 	stw	r2,0(r3)
    return -1;
   10018:	00bfffc4 	movi	r2,-1
   1001c:	00000106 	br	10024 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10020:	e0bff917 	ldw	r2,-28(fp)
}
   10024:	e037883a 	mov	sp,fp
   10028:	dfc00117 	ldw	ra,4(sp)
   1002c:	df000017 	ldw	fp,0(sp)
   10030:	dec00204 	addi	sp,sp,8
   10034:	f800283a 	ret

00010038 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10038:	defffa04 	addi	sp,sp,-24
   1003c:	df000515 	stw	fp,20(sp)
   10040:	df000504 	addi	fp,sp,20
   10044:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10048:	0005303a 	rdctl	r2,status
   1004c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10050:	e0fffc17 	ldw	r3,-16(fp)
   10054:	00bfff84 	movi	r2,-2
   10058:	1884703a 	and	r2,r3,r2
   1005c:	1001703a 	wrctl	status,r2
  
  return context;
   10060:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10064:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10070:	e0bffd17 	ldw	r2,-12(fp)
   10074:	10800017 	ldw	r2,0(r2)
   10078:	e0fffd17 	ldw	r3,-12(fp)
   1007c:	18c00117 	ldw	r3,4(r3)
   10080:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10084:	e0bffd17 	ldw	r2,-12(fp)
   10088:	10800117 	ldw	r2,4(r2)
   1008c:	e0fffd17 	ldw	r3,-12(fp)
   10090:	18c00017 	ldw	r3,0(r3)
   10094:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10098:	e0bffd17 	ldw	r2,-12(fp)
   1009c:	e0fffd17 	ldw	r3,-12(fp)
   100a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   100a4:	e0bffd17 	ldw	r2,-12(fp)
   100a8:	e0fffd17 	ldw	r3,-12(fp)
   100ac:	10c00015 	stw	r3,0(r2)
   100b0:	e0bffb17 	ldw	r2,-20(fp)
   100b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100b8:	e0bffe17 	ldw	r2,-8(fp)
   100bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   100c0:	0001883a 	nop
   100c4:	e037883a 	mov	sp,fp
   100c8:	df000017 	ldw	fp,0(sp)
   100cc:	dec00104 	addi	sp,sp,4
   100d0:	f800283a 	ret

000100d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   100d4:	defffb04 	addi	sp,sp,-20
   100d8:	dfc00415 	stw	ra,16(sp)
   100dc:	df000315 	stw	fp,12(sp)
   100e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   100e4:	d0a00d17 	ldw	r2,-32716(gp)
   100e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   100ec:	d0a6f217 	ldw	r2,-25656(gp)
   100f0:	10800044 	addi	r2,r2,1
   100f4:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   100f8:	00002e06 	br	101b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   100fc:	e0bffd17 	ldw	r2,-12(fp)
   10100:	10800017 	ldw	r2,0(r2)
   10104:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10108:	e0bffd17 	ldw	r2,-12(fp)
   1010c:	10800403 	ldbu	r2,16(r2)
   10110:	10803fcc 	andi	r2,r2,255
   10114:	10000426 	beq	r2,zero,10128 <alt_tick+0x54>
   10118:	d0a6f217 	ldw	r2,-25656(gp)
   1011c:	1000021e 	bne	r2,zero,10128 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10128:	e0bffd17 	ldw	r2,-12(fp)
   1012c:	10800217 	ldw	r2,8(r2)
   10130:	d0e6f217 	ldw	r3,-25656(gp)
   10134:	18801d36 	bltu	r3,r2,101ac <alt_tick+0xd8>
   10138:	e0bffd17 	ldw	r2,-12(fp)
   1013c:	10800403 	ldbu	r2,16(r2)
   10140:	10803fcc 	andi	r2,r2,255
   10144:	1000191e 	bne	r2,zero,101ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10148:	e0bffd17 	ldw	r2,-12(fp)
   1014c:	10800317 	ldw	r2,12(r2)
   10150:	e0fffd17 	ldw	r3,-12(fp)
   10154:	18c00517 	ldw	r3,20(r3)
   10158:	1809883a 	mov	r4,r3
   1015c:	103ee83a 	callr	r2
   10160:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10164:	e0bfff17 	ldw	r2,-4(fp)
   10168:	1000031e 	bne	r2,zero,10178 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1016c:	e13ffd17 	ldw	r4,-12(fp)
   10170:	00100380 	call	10038 <alt_alarm_stop>
   10174:	00000d06 	br	101ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10178:	e0bffd17 	ldw	r2,-12(fp)
   1017c:	10c00217 	ldw	r3,8(r2)
   10180:	e0bfff17 	ldw	r2,-4(fp)
   10184:	1887883a 	add	r3,r3,r2
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10c00217 	ldw	r3,8(r2)
   10198:	d0a6f217 	ldw	r2,-25656(gp)
   1019c:	1880032e 	bgeu	r3,r2,101ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   101a0:	e0bffd17 	ldw	r2,-12(fp)
   101a4:	00c00044 	movi	r3,1
   101a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   101ac:	e0bffe17 	ldw	r2,-8(fp)
   101b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   101b4:	e0fffd17 	ldw	r3,-12(fp)
   101b8:	d0a00d04 	addi	r2,gp,-32716
   101bc:	18bfcf1e 	bne	r3,r2,100fc <__ram_exceptions_end+0xfb00eab4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   101c0:	0001883a 	nop
}
   101c4:	0001883a 	nop
   101c8:	e037883a 	mov	sp,fp
   101cc:	dfc00117 	ldw	ra,4(sp)
   101d0:	df000017 	ldw	fp,0(sp)
   101d4:	dec00204 	addi	sp,sp,8
   101d8:	f800283a 	ret

000101dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   101dc:	deffff04 	addi	sp,sp,-4
   101e0:	df000015 	stw	fp,0(sp)
   101e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   101e8:	000170fa 	wrctl	ienable,zero
}
   101ec:	0001883a 	nop
   101f0:	e037883a 	mov	sp,fp
   101f4:	df000017 	ldw	fp,0(sp)
   101f8:	dec00104 	addi	sp,sp,4
   101fc:	f800283a 	ret

00010200 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10200:	defffb04 	addi	sp,sp,-20
   10204:	dfc00415 	stw	ra,16(sp)
   10208:	df000315 	stw	fp,12(sp)
   1020c:	df000304 	addi	fp,sp,12
   10210:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10214:	d0a00517 	ldw	r2,-32748(gp)
   10218:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1021c:	00003106 	br	102e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10220:	e0bffd17 	ldw	r2,-12(fp)
   10224:	10800217 	ldw	r2,8(r2)
   10228:	1009883a 	mov	r4,r2
   1022c:	000a2b80 	call	a2b8 <strlen>
   10230:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10234:	e0bffd17 	ldw	r2,-12(fp)
   10238:	10c00217 	ldw	r3,8(r2)
   1023c:	e0bffe17 	ldw	r2,-8(fp)
   10240:	10bfffc4 	addi	r2,r2,-1
   10244:	1885883a 	add	r2,r3,r2
   10248:	10800003 	ldbu	r2,0(r2)
   1024c:	10803fcc 	andi	r2,r2,255
   10250:	1080201c 	xori	r2,r2,128
   10254:	10bfe004 	addi	r2,r2,-128
   10258:	10800bd8 	cmpnei	r2,r2,47
   1025c:	1000031e 	bne	r2,zero,1026c <alt_find_file+0x6c>
    {
      len -= 1;
   10260:	e0bffe17 	ldw	r2,-8(fp)
   10264:	10bfffc4 	addi	r2,r2,-1
   10268:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1026c:	e0bffe17 	ldw	r2,-8(fp)
   10270:	e0ffff17 	ldw	r3,-4(fp)
   10274:	1885883a 	add	r2,r3,r2
   10278:	10800003 	ldbu	r2,0(r2)
   1027c:	10803fcc 	andi	r2,r2,255
   10280:	1080201c 	xori	r2,r2,128
   10284:	10bfe004 	addi	r2,r2,-128
   10288:	10800be0 	cmpeqi	r2,r2,47
   1028c:	1000081e 	bne	r2,zero,102b0 <alt_find_file+0xb0>
   10290:	e0bffe17 	ldw	r2,-8(fp)
   10294:	e0ffff17 	ldw	r3,-4(fp)
   10298:	1885883a 	add	r2,r3,r2
   1029c:	10800003 	ldbu	r2,0(r2)
   102a0:	10803fcc 	andi	r2,r2,255
   102a4:	1080201c 	xori	r2,r2,128
   102a8:	10bfe004 	addi	r2,r2,-128
   102ac:	10000a1e 	bne	r2,zero,102d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   102b0:	e0bffd17 	ldw	r2,-12(fp)
   102b4:	10800217 	ldw	r2,8(r2)
   102b8:	e0fffe17 	ldw	r3,-8(fp)
   102bc:	180d883a 	mov	r6,r3
   102c0:	e17fff17 	ldw	r5,-4(fp)
   102c4:	1009883a 	mov	r4,r2
   102c8:	00105240 	call	10524 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   102cc:	1000021e 	bne	r2,zero,102d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   102d0:	e0bffd17 	ldw	r2,-12(fp)
   102d4:	00000706 	br	102f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   102d8:	e0bffd17 	ldw	r2,-12(fp)
   102dc:	10800017 	ldw	r2,0(r2)
   102e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   102e4:	e0fffd17 	ldw	r3,-12(fp)
   102e8:	d0a00504 	addi	r2,gp,-32748
   102ec:	18bfcc1e 	bne	r3,r2,10220 <__ram_exceptions_end+0xfb00ebd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   102f0:	0005883a 	mov	r2,zero
}
   102f4:	e037883a 	mov	sp,fp
   102f8:	dfc00117 	ldw	ra,4(sp)
   102fc:	df000017 	ldw	fp,0(sp)
   10300:	dec00204 	addi	sp,sp,8
   10304:	f800283a 	ret

00010308 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10308:	defffc04 	addi	sp,sp,-16
   1030c:	df000315 	stw	fp,12(sp)
   10310:	df000304 	addi	fp,sp,12
   10314:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10318:	00bffa04 	movi	r2,-24
   1031c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10320:	e03ffd15 	stw	zero,-12(fp)
   10324:	00001906 	br	1038c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10328:	00800074 	movhi	r2,1
   1032c:	108e9f04 	addi	r2,r2,14972
   10330:	e0fffd17 	ldw	r3,-12(fp)
   10334:	18c00324 	muli	r3,r3,12
   10338:	10c5883a 	add	r2,r2,r3
   1033c:	10800017 	ldw	r2,0(r2)
   10340:	10000f1e 	bne	r2,zero,10380 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10344:	00800074 	movhi	r2,1
   10348:	108e9f04 	addi	r2,r2,14972
   1034c:	e0fffd17 	ldw	r3,-12(fp)
   10350:	18c00324 	muli	r3,r3,12
   10354:	10c5883a 	add	r2,r2,r3
   10358:	e0ffff17 	ldw	r3,-4(fp)
   1035c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10360:	d0e00917 	ldw	r3,-32732(gp)
   10364:	e0bffd17 	ldw	r2,-12(fp)
   10368:	1880020e 	bge	r3,r2,10374 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1036c:	e0bffd17 	ldw	r2,-12(fp)
   10370:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   10374:	e0bffd17 	ldw	r2,-12(fp)
   10378:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1037c:	00000606 	br	10398 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10380:	e0bffd17 	ldw	r2,-12(fp)
   10384:	10800044 	addi	r2,r2,1
   10388:	e0bffd15 	stw	r2,-12(fp)
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	10800810 	cmplti	r2,r2,32
   10394:	103fe41e 	bne	r2,zero,10328 <__ram_exceptions_end+0xfb00ece0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10398:	e0bffe17 	ldw	r2,-8(fp)
}
   1039c:	e037883a 	mov	sp,fp
   103a0:	df000017 	ldw	fp,0(sp)
   103a4:	dec00104 	addi	sp,sp,4
   103a8:	f800283a 	ret

000103ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   103ac:	defffb04 	addi	sp,sp,-20
   103b0:	df000415 	stw	fp,16(sp)
   103b4:	df000404 	addi	fp,sp,16
   103b8:	e13ffe15 	stw	r4,-8(fp)
   103bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	00c00074 	movhi	r3,1
   103c8:	1880022e 	bgeu	r3,r2,103d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   103cc:	00800074 	movhi	r2,1
   103d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   103d4:	e0fffe17 	ldw	r3,-8(fp)
   103d8:	e0bfff17 	ldw	r2,-4(fp)
   103dc:	1885883a 	add	r2,r3,r2
   103e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	e0bffc15 	stw	r2,-16(fp)
   103ec:	00000506 	br	10404 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   103f0:	e0bffc17 	ldw	r2,-16(fp)
   103f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10800804 	addi	r2,r2,32
   10400:	e0bffc15 	stw	r2,-16(fp)
   10404:	e0fffc17 	ldw	r3,-16(fp)
   10408:	e0bffd17 	ldw	r2,-12(fp)
   1040c:	18bff836 	bltu	r3,r2,103f0 <__ram_exceptions_end+0xfb00eda8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10410:	e0bffe17 	ldw	r2,-8(fp)
   10414:	108007cc 	andi	r2,r2,31
   10418:	10000226 	beq	r2,zero,10424 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1041c:	e0bffc17 	ldw	r2,-16(fp)
   10420:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10424:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10428:	0001883a 	nop
   1042c:	e037883a 	mov	sp,fp
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00104 	addi	sp,sp,4
   10438:	f800283a 	ret

0001043c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	df000115 	stw	fp,4(sp)
   10444:	df000104 	addi	fp,sp,4
   10448:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	10bffe84 	addi	r2,r2,-6
   10454:	10c00428 	cmpgeui	r3,r2,16
   10458:	18001a1e 	bne	r3,zero,104c4 <alt_exception_cause_generated_bad_addr+0x88>
   1045c:	100690ba 	slli	r3,r2,2
   10460:	00800074 	movhi	r2,1
   10464:	10811d04 	addi	r2,r2,1140
   10468:	1885883a 	add	r2,r3,r2
   1046c:	10800017 	ldw	r2,0(r2)
   10470:	1000683a 	jmp	r2
   10474:	000104b4 	movhi	zero,1042
   10478:	000104b4 	movhi	zero,1042
   1047c:	000104c4 	movi	zero,1043
   10480:	000104c4 	movi	zero,1043
   10484:	000104c4 	movi	zero,1043
   10488:	000104b4 	movhi	zero,1042
   1048c:	000104bc 	xorhi	zero,zero,1042
   10490:	000104c4 	movi	zero,1043
   10494:	000104b4 	movhi	zero,1042
   10498:	000104b4 	movhi	zero,1042
   1049c:	000104c4 	movi	zero,1043
   104a0:	000104b4 	movhi	zero,1042
   104a4:	000104bc 	xorhi	zero,zero,1042
   104a8:	000104c4 	movi	zero,1043
   104ac:	000104c4 	movi	zero,1043
   104b0:	000104b4 	movhi	zero,1042
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   104b4:	00800044 	movi	r2,1
   104b8:	00000306 	br	104c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   104bc:	0005883a 	mov	r2,zero
   104c0:	00000106 	br	104c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   104c4:	0005883a 	mov	r2,zero
  }
}
   104c8:	e037883a 	mov	sp,fp
   104cc:	df000017 	ldw	fp,0(sp)
   104d0:	dec00104 	addi	sp,sp,4
   104d4:	f800283a 	ret

000104d8 <atexit>:
   104d8:	200b883a 	mov	r5,r4
   104dc:	000f883a 	mov	r7,zero
   104e0:	000d883a 	mov	r6,zero
   104e4:	0009883a 	mov	r4,zero
   104e8:	00105a01 	jmpi	105a0 <__register_exitproc>

000104ec <exit>:
   104ec:	defffe04 	addi	sp,sp,-8
   104f0:	000b883a 	mov	r5,zero
   104f4:	dc000015 	stw	r16,0(sp)
   104f8:	dfc00115 	stw	ra,4(sp)
   104fc:	2021883a 	mov	r16,r4
   10500:	00106b80 	call	106b8 <__call_exitprocs>
   10504:	00800074 	movhi	r2,1
   10508:	10934904 	addi	r2,r2,19748
   1050c:	11000017 	ldw	r4,0(r2)
   10510:	20800f17 	ldw	r2,60(r4)
   10514:	10000126 	beq	r2,zero,1051c <exit+0x30>
   10518:	103ee83a 	callr	r2
   1051c:	8009883a 	mov	r4,r16
   10520:	00108380 	call	10838 <_exit>

00010524 <memcmp>:
   10524:	01c000c4 	movi	r7,3
   10528:	3980192e 	bgeu	r7,r6,10590 <memcmp+0x6c>
   1052c:	2144b03a 	or	r2,r4,r5
   10530:	11c4703a 	and	r2,r2,r7
   10534:	10000f26 	beq	r2,zero,10574 <memcmp+0x50>
   10538:	20800003 	ldbu	r2,0(r4)
   1053c:	28c00003 	ldbu	r3,0(r5)
   10540:	10c0151e 	bne	r2,r3,10598 <memcmp+0x74>
   10544:	31bfff84 	addi	r6,r6,-2
   10548:	01ffffc4 	movi	r7,-1
   1054c:	00000406 	br	10560 <memcmp+0x3c>
   10550:	20800003 	ldbu	r2,0(r4)
   10554:	28c00003 	ldbu	r3,0(r5)
   10558:	31bfffc4 	addi	r6,r6,-1
   1055c:	10c00e1e 	bne	r2,r3,10598 <memcmp+0x74>
   10560:	21000044 	addi	r4,r4,1
   10564:	29400044 	addi	r5,r5,1
   10568:	31fff91e 	bne	r6,r7,10550 <__ram_exceptions_end+0xfb00ef08>
   1056c:	0005883a 	mov	r2,zero
   10570:	f800283a 	ret
   10574:	20c00017 	ldw	r3,0(r4)
   10578:	28800017 	ldw	r2,0(r5)
   1057c:	18bfee1e 	bne	r3,r2,10538 <__ram_exceptions_end+0xfb00eef0>
   10580:	31bfff04 	addi	r6,r6,-4
   10584:	21000104 	addi	r4,r4,4
   10588:	29400104 	addi	r5,r5,4
   1058c:	39bff936 	bltu	r7,r6,10574 <__ram_exceptions_end+0xfb00ef2c>
   10590:	303fe91e 	bne	r6,zero,10538 <__ram_exceptions_end+0xfb00eef0>
   10594:	003ff506 	br	1056c <__ram_exceptions_end+0xfb00ef24>
   10598:	10c5c83a 	sub	r2,r2,r3
   1059c:	f800283a 	ret

000105a0 <__register_exitproc>:
   105a0:	defffa04 	addi	sp,sp,-24
   105a4:	dc000315 	stw	r16,12(sp)
   105a8:	04000074 	movhi	r16,1
   105ac:	84134904 	addi	r16,r16,19748
   105b0:	80c00017 	ldw	r3,0(r16)
   105b4:	dc400415 	stw	r17,16(sp)
   105b8:	dfc00515 	stw	ra,20(sp)
   105bc:	18805217 	ldw	r2,328(r3)
   105c0:	2023883a 	mov	r17,r4
   105c4:	10003726 	beq	r2,zero,106a4 <__register_exitproc+0x104>
   105c8:	10c00117 	ldw	r3,4(r2)
   105cc:	010007c4 	movi	r4,31
   105d0:	20c00e16 	blt	r4,r3,1060c <__register_exitproc+0x6c>
   105d4:	1a000044 	addi	r8,r3,1
   105d8:	8800221e 	bne	r17,zero,10664 <__register_exitproc+0xc4>
   105dc:	18c00084 	addi	r3,r3,2
   105e0:	18c7883a 	add	r3,r3,r3
   105e4:	18c7883a 	add	r3,r3,r3
   105e8:	12000115 	stw	r8,4(r2)
   105ec:	10c7883a 	add	r3,r2,r3
   105f0:	19400015 	stw	r5,0(r3)
   105f4:	0005883a 	mov	r2,zero
   105f8:	dfc00517 	ldw	ra,20(sp)
   105fc:	dc400417 	ldw	r17,16(sp)
   10600:	dc000317 	ldw	r16,12(sp)
   10604:	dec00604 	addi	sp,sp,24
   10608:	f800283a 	ret
   1060c:	00800034 	movhi	r2,0
   10610:	10800004 	addi	r2,r2,0
   10614:	10002626 	beq	r2,zero,106b0 <__register_exitproc+0x110>
   10618:	01006404 	movi	r4,400
   1061c:	d9400015 	stw	r5,0(sp)
   10620:	d9800115 	stw	r6,4(sp)
   10624:	d9c00215 	stw	r7,8(sp)
   10628:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
   1062c:	d9400017 	ldw	r5,0(sp)
   10630:	d9800117 	ldw	r6,4(sp)
   10634:	d9c00217 	ldw	r7,8(sp)
   10638:	10001d26 	beq	r2,zero,106b0 <__register_exitproc+0x110>
   1063c:	81000017 	ldw	r4,0(r16)
   10640:	10000115 	stw	zero,4(r2)
   10644:	02000044 	movi	r8,1
   10648:	22405217 	ldw	r9,328(r4)
   1064c:	0007883a 	mov	r3,zero
   10650:	12400015 	stw	r9,0(r2)
   10654:	20805215 	stw	r2,328(r4)
   10658:	10006215 	stw	zero,392(r2)
   1065c:	10006315 	stw	zero,396(r2)
   10660:	883fde26 	beq	r17,zero,105dc <__ram_exceptions_end+0xfb00ef94>
   10664:	18c9883a 	add	r4,r3,r3
   10668:	2109883a 	add	r4,r4,r4
   1066c:	1109883a 	add	r4,r2,r4
   10670:	21802215 	stw	r6,136(r4)
   10674:	01800044 	movi	r6,1
   10678:	12406217 	ldw	r9,392(r2)
   1067c:	30cc983a 	sll	r6,r6,r3
   10680:	4992b03a 	or	r9,r9,r6
   10684:	12406215 	stw	r9,392(r2)
   10688:	21c04215 	stw	r7,264(r4)
   1068c:	01000084 	movi	r4,2
   10690:	893fd21e 	bne	r17,r4,105dc <__ram_exceptions_end+0xfb00ef94>
   10694:	11006317 	ldw	r4,396(r2)
   10698:	218cb03a 	or	r6,r4,r6
   1069c:	11806315 	stw	r6,396(r2)
   106a0:	003fce06 	br	105dc <__ram_exceptions_end+0xfb00ef94>
   106a4:	18805304 	addi	r2,r3,332
   106a8:	18805215 	stw	r2,328(r3)
   106ac:	003fc606 	br	105c8 <__ram_exceptions_end+0xfb00ef80>
   106b0:	00bfffc4 	movi	r2,-1
   106b4:	003fd006 	br	105f8 <__ram_exceptions_end+0xfb00efb0>

000106b8 <__call_exitprocs>:
   106b8:	defff504 	addi	sp,sp,-44
   106bc:	df000915 	stw	fp,36(sp)
   106c0:	dd400615 	stw	r21,24(sp)
   106c4:	dc800315 	stw	r18,12(sp)
   106c8:	dfc00a15 	stw	ra,40(sp)
   106cc:	ddc00815 	stw	r23,32(sp)
   106d0:	dd800715 	stw	r22,28(sp)
   106d4:	dd000515 	stw	r20,20(sp)
   106d8:	dcc00415 	stw	r19,16(sp)
   106dc:	dc400215 	stw	r17,8(sp)
   106e0:	dc000115 	stw	r16,4(sp)
   106e4:	d9000015 	stw	r4,0(sp)
   106e8:	2839883a 	mov	fp,r5
   106ec:	04800044 	movi	r18,1
   106f0:	057fffc4 	movi	r21,-1
   106f4:	00800074 	movhi	r2,1
   106f8:	10934904 	addi	r2,r2,19748
   106fc:	12000017 	ldw	r8,0(r2)
   10700:	45005217 	ldw	r20,328(r8)
   10704:	44c05204 	addi	r19,r8,328
   10708:	a0001c26 	beq	r20,zero,1077c <__call_exitprocs+0xc4>
   1070c:	a0800117 	ldw	r2,4(r20)
   10710:	15ffffc4 	addi	r23,r2,-1
   10714:	b8000d16 	blt	r23,zero,1074c <__call_exitprocs+0x94>
   10718:	14000044 	addi	r16,r2,1
   1071c:	8421883a 	add	r16,r16,r16
   10720:	8421883a 	add	r16,r16,r16
   10724:	84402004 	addi	r17,r16,128
   10728:	a463883a 	add	r17,r20,r17
   1072c:	a421883a 	add	r16,r20,r16
   10730:	e0001e26 	beq	fp,zero,107ac <__call_exitprocs+0xf4>
   10734:	80804017 	ldw	r2,256(r16)
   10738:	e0801c26 	beq	fp,r2,107ac <__call_exitprocs+0xf4>
   1073c:	bdffffc4 	addi	r23,r23,-1
   10740:	843fff04 	addi	r16,r16,-4
   10744:	8c7fff04 	addi	r17,r17,-4
   10748:	bd7ff91e 	bne	r23,r21,10730 <__ram_exceptions_end+0xfb00f0e8>
   1074c:	00800034 	movhi	r2,0
   10750:	10800004 	addi	r2,r2,0
   10754:	10000926 	beq	r2,zero,1077c <__call_exitprocs+0xc4>
   10758:	a0800117 	ldw	r2,4(r20)
   1075c:	1000301e 	bne	r2,zero,10820 <__call_exitprocs+0x168>
   10760:	a0800017 	ldw	r2,0(r20)
   10764:	10003226 	beq	r2,zero,10830 <__call_exitprocs+0x178>
   10768:	a009883a 	mov	r4,r20
   1076c:	98800015 	stw	r2,0(r19)
   10770:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
   10774:	9d000017 	ldw	r20,0(r19)
   10778:	a03fe41e 	bne	r20,zero,1070c <__ram_exceptions_end+0xfb00f0c4>
   1077c:	dfc00a17 	ldw	ra,40(sp)
   10780:	df000917 	ldw	fp,36(sp)
   10784:	ddc00817 	ldw	r23,32(sp)
   10788:	dd800717 	ldw	r22,28(sp)
   1078c:	dd400617 	ldw	r21,24(sp)
   10790:	dd000517 	ldw	r20,20(sp)
   10794:	dcc00417 	ldw	r19,16(sp)
   10798:	dc800317 	ldw	r18,12(sp)
   1079c:	dc400217 	ldw	r17,8(sp)
   107a0:	dc000117 	ldw	r16,4(sp)
   107a4:	dec00b04 	addi	sp,sp,44
   107a8:	f800283a 	ret
   107ac:	a0800117 	ldw	r2,4(r20)
   107b0:	80c00017 	ldw	r3,0(r16)
   107b4:	10bfffc4 	addi	r2,r2,-1
   107b8:	15c01426 	beq	r2,r23,1080c <__call_exitprocs+0x154>
   107bc:	80000015 	stw	zero,0(r16)
   107c0:	183fde26 	beq	r3,zero,1073c <__ram_exceptions_end+0xfb00f0f4>
   107c4:	95c8983a 	sll	r4,r18,r23
   107c8:	a0806217 	ldw	r2,392(r20)
   107cc:	a5800117 	ldw	r22,4(r20)
   107d0:	2084703a 	and	r2,r4,r2
   107d4:	10000b26 	beq	r2,zero,10804 <__call_exitprocs+0x14c>
   107d8:	a0806317 	ldw	r2,396(r20)
   107dc:	2088703a 	and	r4,r4,r2
   107e0:	20000c1e 	bne	r4,zero,10814 <__call_exitprocs+0x15c>
   107e4:	89400017 	ldw	r5,0(r17)
   107e8:	d9000017 	ldw	r4,0(sp)
   107ec:	183ee83a 	callr	r3
   107f0:	a0800117 	ldw	r2,4(r20)
   107f4:	15bfbf1e 	bne	r2,r22,106f4 <__ram_exceptions_end+0xfb00f0ac>
   107f8:	98800017 	ldw	r2,0(r19)
   107fc:	153fcf26 	beq	r2,r20,1073c <__ram_exceptions_end+0xfb00f0f4>
   10800:	003fbc06 	br	106f4 <__ram_exceptions_end+0xfb00f0ac>
   10804:	183ee83a 	callr	r3
   10808:	003ff906 	br	107f0 <__ram_exceptions_end+0xfb00f1a8>
   1080c:	a5c00115 	stw	r23,4(r20)
   10810:	003feb06 	br	107c0 <__ram_exceptions_end+0xfb00f178>
   10814:	89000017 	ldw	r4,0(r17)
   10818:	183ee83a 	callr	r3
   1081c:	003ff406 	br	107f0 <__ram_exceptions_end+0xfb00f1a8>
   10820:	a0800017 	ldw	r2,0(r20)
   10824:	a027883a 	mov	r19,r20
   10828:	1029883a 	mov	r20,r2
   1082c:	003fb606 	br	10708 <__ram_exceptions_end+0xfb00f0c0>
   10830:	0005883a 	mov	r2,zero
   10834:	003ffb06 	br	10824 <__ram_exceptions_end+0xfb00f1dc>

00010838 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10838:	defffd04 	addi	sp,sp,-12
   1083c:	df000215 	stw	fp,8(sp)
   10840:	df000204 	addi	fp,sp,8
   10844:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10848:	0001883a 	nop
   1084c:	e0bfff17 	ldw	r2,-4(fp)
   10850:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10854:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10858:	10000226 	beq	r2,zero,10864 <_exit+0x2c>
    ALT_SIM_FAIL();
   1085c:	002af070 	cmpltui	zero,zero,43969
   10860:	00000106 	br	10868 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10864:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10868:	003fff06 	br	10868 <__ram_exceptions_end+0xfb00f220>
   1086c:	000037dc 	xori	zero,zero,223
