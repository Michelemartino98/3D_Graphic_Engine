
LT24_Painter.elf:     file format elf32-littlenios2
LT24_Painter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04400224

Program Header:
    LOAD off    0x00001000 vaddr 0x04400000 paddr 0x04400000 align 2**12
         filesz 0x00034ec8 memsz 0x00034ec8 flags r-x
    LOAD off    0x00035ec8 vaddr 0x04434ec8 paddr 0x0443857c align 2**12
         filesz 0x000036b4 memsz 0x000036b4 flags rw-
    LOAD off    0x00039c30 vaddr 0x0443bc30 paddr 0x0443bc30 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-
    LOAD off    0x0003a000 vaddr 0x09004000 paddr 0x09004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  09004000  09004000  0003a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04400000  04400000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a92c  04400224  04400224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a378  0441ab50  0441ab50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000036b4  04434ec8  0443857c  00035ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0443bc30  0443bc30  00039c30  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0443bd94  0443bd94  0003a020  2**0
                  CONTENTS
  7 .onchip_memory 00000000  09004020  09004020  0003a020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0003a020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001220  00000000  00000000  0003a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e0b9  00000000  00000000  0003b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b376  00000000  00000000  00069321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f3af  00000000  00000000  00074697  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003648  00000000  00000000  00083a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005a9b  00000000  00000000  00087090  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d34e  00000000  00000000  0008cb2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000a9e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b08  00000000  00000000  000a9ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b172d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  000b1730  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b173a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b173b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b173c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b1740  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b1744  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000b1748  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000b1751  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000b175a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  000b1763  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000057  00000000  00000000  000b1771  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fc3b  00000000  00000000  000b17c8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09004000 l    d  .entry	00000000 .entry
04400000 l    d  .exceptions	00000000 .exceptions
04400224 l    d  .text	00000000 .text
0441ab50 l    d  .rodata	00000000 .rodata
04434ec8 l    d  .rwdata	00000000 .rwdata
0443bc30 l    d  .bss	00000000 .bss
0443bd94 l    d  .sdram	00000000 .sdram
09004020 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Painter_bsp//obj/HAL/src/crt0.o
0440026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
0441ab50 l     O .rodata	000000b6 tahomabold_20_33
0441ac06 l     O .rodata	00000104 tahomabold_20_34
0441ad0a l     O .rodata	000001a0 tahomabold_20_35
0441aeaa l     O .rodata	00000152 tahomabold_20_36
0441affc l     O .rodata	00000270 tahomabold_20_37
0441b26c l     O .rodata	000001ba tahomabold_20_38
0441b426 l     O .rodata	0000009c tahomabold_20_39
0441b4c2 l     O .rodata	000000ea tahomabold_20_40
0441b5ac l     O .rodata	000000ea tahomabold_20_41
0441b696 l     O .rodata	00000152 tahomabold_20_42
0441b7e8 l     O .rodata	000001a0 tahomabold_20_43
0441b988 l     O .rodata	0000009c tahomabold_20_44
0441ba24 l     O .rodata	000000ea tahomabold_20_45
0441bb0e l     O .rodata	0000009c tahomabold_20_46
0441bbaa l     O .rodata	00000138 tahomabold_20_47
0441bce2 l     O .rodata	00000152 tahomabold_20_48
0441be34 l     O .rodata	00000152 tahomabold_20_49
0441bf86 l     O .rodata	00000152 tahomabold_20_50
0441c0d8 l     O .rodata	00000152 tahomabold_20_51
0441c22a l     O .rodata	00000152 tahomabold_20_52
0441c37c l     O .rodata	00000152 tahomabold_20_53
0441c4ce l     O .rodata	00000152 tahomabold_20_54
0441c620 l     O .rodata	00000152 tahomabold_20_55
0441c772 l     O .rodata	00000152 tahomabold_20_56
0441c8c4 l     O .rodata	00000152 tahomabold_20_57
0441ca16 l     O .rodata	000000b6 tahomabold_20_58
0441cacc l     O .rodata	000000b6 tahomabold_20_59
0441cb82 l     O .rodata	000001a0 tahomabold_20_60
0441cd22 l     O .rodata	000001a0 tahomabold_20_61
0441cec2 l     O .rodata	000001a0 tahomabold_20_62
0441d062 l     O .rodata	0000011e tahomabold_20_63
0441d180 l     O .rodata	000001d4 tahomabold_20_64
0441d354 l     O .rodata	0000016c tahomabold_20_65
0441d4c0 l     O .rodata	0000016c tahomabold_20_66
0441d62c l     O .rodata	00000152 tahomabold_20_67
0441d77e l     O .rodata	00000186 tahomabold_20_68
0441d904 l     O .rodata	00000138 tahomabold_20_69
0441da3c l     O .rodata	00000138 tahomabold_20_70
0441db74 l     O .rodata	00000186 tahomabold_20_71
0441dcfa l     O .rodata	00000186 tahomabold_20_72
0441de80 l     O .rodata	00000104 tahomabold_20_73
0441df84 l     O .rodata	00000104 tahomabold_20_74
0441e088 l     O .rodata	0000016c tahomabold_20_75
0441e1f4 l     O .rodata	0000011e tahomabold_20_76
0441e312 l     O .rodata	000001d4 tahomabold_20_77
0441e4e6 l     O .rodata	00000186 tahomabold_20_78
0441e66c l     O .rodata	00000186 tahomabold_20_79
0441e7f2 l     O .rodata	00000152 tahomabold_20_80
0441e944 l     O .rodata	00000186 tahomabold_20_81
0441eaca l     O .rodata	00000186 tahomabold_20_82
0441ec50 l     O .rodata	00000152 tahomabold_20_83
0441eda2 l     O .rodata	00000138 tahomabold_20_84
0441eeda l     O .rodata	00000186 tahomabold_20_85
0441f060 l     O .rodata	0000016c tahomabold_20_86
0441f1cc l     O .rodata	00000222 tahomabold_20_87
0441f3ee l     O .rodata	0000016c tahomabold_20_88
0441f55a l     O .rodata	0000016c tahomabold_20_89
0441f6c6 l     O .rodata	00000138 tahomabold_20_90
0441f7fe l     O .rodata	000000ea tahomabold_20_91
0441f8e8 l     O .rodata	00000138 tahomabold_20_92
0441fa20 l     O .rodata	000000ea tahomabold_20_93
0441fb0a l     O .rodata	000001a0 tahomabold_20_94
0441fcaa l     O .rodata	00000152 tahomabold_20_95
0441fdfc l     O .rodata	0000011e tahomabold_20_96
0441ff1a l     O .rodata	00000138 tahomabold_20_97
04420052 l     O .rodata	00000152 tahomabold_20_98
044201a4 l     O .rodata	0000011e tahomabold_20_99
044202c2 l     O .rodata	00000152 tahomabold_20_100
04420414 l     O .rodata	00000138 tahomabold_20_101
0442054c l     O .rodata	000000d0 tahomabold_20_102
0442061c l     O .rodata	00000152 tahomabold_20_103
0442076e l     O .rodata	00000152 tahomabold_20_104
044208c0 l     O .rodata	0000009c tahomabold_20_105
0442095c l     O .rodata	000000ea tahomabold_20_106
04420a46 l     O .rodata	00000138 tahomabold_20_107
04420b7e l     O .rodata	0000009c tahomabold_20_108
04420c1a l     O .rodata	000001ee tahomabold_20_109
04420e08 l     O .rodata	00000152 tahomabold_20_110
04420f5a l     O .rodata	00000138 tahomabold_20_111
04421092 l     O .rodata	00000152 tahomabold_20_112
044211e4 l     O .rodata	00000152 tahomabold_20_113
04421336 l     O .rodata	000000ea tahomabold_20_114
04421420 l     O .rodata	00000104 tahomabold_20_115
04421524 l     O .rodata	000000d0 tahomabold_20_116
044215f4 l     O .rodata	00000152 tahomabold_20_117
04421746 l     O .rodata	00000138 tahomabold_20_118
0442187e l     O .rodata	000001d4 tahomabold_20_119
04421a52 l     O .rodata	00000138 tahomabold_20_120
04421b8a l     O .rodata	00000138 tahomabold_20_121
04421cc2 l     O .rodata	0000011e tahomabold_20_122
04421de0 l     O .rodata	00000138 tahomabold_20_123
04421f18 l     O .rodata	00000152 tahomabold_20_124
0442206a l     O .rodata	00000138 tahomabold_20_125
044221a2 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
04422342 l     O .rodata	000001b8 tahomabold_32_33
044224fa l     O .rodata	00000280 tahomabold_32_34
0442277a l     O .rodata	00000410 tahomabold_32_35
04422b8a l     O .rodata	00000320 tahomabold_32_36
04422eaa l     O .rodata	000005f0 tahomabold_32_37
0442349a l     O .rodata	00000410 tahomabold_32_38
044238aa l     O .rodata	00000168 tahomabold_32_39
04423a12 l     O .rodata	00000258 tahomabold_32_40
04423c6a l     O .rodata	00000258 tahomabold_32_41
04423ec2 l     O .rodata	00000320 tahomabold_32_42
044241e2 l     O .rodata	00000410 tahomabold_32_43
044245f2 l     O .rodata	00000190 tahomabold_32_44
04424782 l     O .rodata	00000230 tahomabold_32_45
044249b2 l     O .rodata	00000190 tahomabold_32_46
04424b42 l     O .rodata	000002d0 tahomabold_32_47
04424e12 l     O .rodata	00000320 tahomabold_32_48
04425132 l     O .rodata	00000320 tahomabold_32_49
04425452 l     O .rodata	00000320 tahomabold_32_50
04425772 l     O .rodata	00000320 tahomabold_32_51
04425a92 l     O .rodata	00000320 tahomabold_32_52
04425db2 l     O .rodata	00000320 tahomabold_32_53
044260d2 l     O .rodata	00000320 tahomabold_32_54
044263f2 l     O .rodata	00000320 tahomabold_32_55
04426712 l     O .rodata	00000320 tahomabold_32_56
04426a32 l     O .rodata	00000320 tahomabold_32_57
04426d52 l     O .rodata	000001e0 tahomabold_32_58
04426f32 l     O .rodata	000001e0 tahomabold_32_59
04427112 l     O .rodata	00000410 tahomabold_32_60
04427522 l     O .rodata	00000410 tahomabold_32_61
04427932 l     O .rodata	00000410 tahomabold_32_62
04427d42 l     O .rodata	000002d0 tahomabold_32_63
04428012 l     O .rodata	00000488 tahomabold_32_64
0442849a l     O .rodata	00000370 tahomabold_32_65
0442880a l     O .rodata	00000370 tahomabold_32_66
04428b7a l     O .rodata	00000348 tahomabold_32_67
04428ec2 l     O .rodata	000003c0 tahomabold_32_68
04429282 l     O .rodata	00000320 tahomabold_32_69
044295a2 l     O .rodata	000002f8 tahomabold_32_70
0442989a l     O .rodata	000003c0 tahomabold_32_71
04429c5a l     O .rodata	000003c0 tahomabold_32_72
0442a01a l     O .rodata	00000258 tahomabold_32_73
0442a272 l     O .rodata	00000280 tahomabold_32_74
0442a4f2 l     O .rodata	00000398 tahomabold_32_75
0442a88a l     O .rodata	000002d0 tahomabold_32_76
0442ab5a l     O .rodata	00000488 tahomabold_32_77
0442afe2 l     O .rodata	000003e8 tahomabold_32_78
0442b3ca l     O .rodata	000003e8 tahomabold_32_79
0442b7b2 l     O .rodata	00000348 tahomabold_32_80
0442bafa l     O .rodata	000003e8 tahomabold_32_81
0442bee2 l     O .rodata	000003c0 tahomabold_32_82
0442c2a2 l     O .rodata	00000320 tahomabold_32_83
0442c5c2 l     O .rodata	00000320 tahomabold_32_84
0442c8e2 l     O .rodata	000003c0 tahomabold_32_85
0442cca2 l     O .rodata	00000370 tahomabold_32_86
0442d012 l     O .rodata	00000528 tahomabold_32_87
0442d53a l     O .rodata	00000370 tahomabold_32_88
0442d8aa l     O .rodata	00000370 tahomabold_32_89
0442dc1a l     O .rodata	00000320 tahomabold_32_90
0442df3a l     O .rodata	00000258 tahomabold_32_91
0442e192 l     O .rodata	000002d0 tahomabold_32_92
0442e462 l     O .rodata	00000258 tahomabold_32_93
0442e6ba l     O .rodata	00000410 tahomabold_32_94
0442eaca l     O .rodata	00000320 tahomabold_32_95
0442edea l     O .rodata	000002a8 tahomabold_32_96
0442f092 l     O .rodata	000002f8 tahomabold_32_97
0442f38a l     O .rodata	00000320 tahomabold_32_98
0442f6aa l     O .rodata	000002a8 tahomabold_32_99
0442f952 l     O .rodata	00000320 tahomabold_32_100
0442fc72 l     O .rodata	000002f8 tahomabold_32_101
0442ff6a l     O .rodata	00000230 tahomabold_32_102
0443019a l     O .rodata	00000320 tahomabold_32_103
044304ba l     O .rodata	00000320 tahomabold_32_104
044307da l     O .rodata	00000190 tahomabold_32_105
0443096a l     O .rodata	00000208 tahomabold_32_106
04430b72 l     O .rodata	000002f8 tahomabold_32_107
04430e6a l     O .rodata	00000190 tahomabold_32_108
04430ffa l     O .rodata	000004d8 tahomabold_32_109
044314d2 l     O .rodata	00000320 tahomabold_32_110
044317f2 l     O .rodata	00000320 tahomabold_32_111
04431b12 l     O .rodata	00000320 tahomabold_32_112
04431e32 l     O .rodata	00000320 tahomabold_32_113
04432152 l     O .rodata	00000230 tahomabold_32_114
04432382 l     O .rodata	00000280 tahomabold_32_115
04432602 l     O .rodata	00000208 tahomabold_32_116
0443280a l     O .rodata	00000320 tahomabold_32_117
04432b2a l     O .rodata	000002f8 tahomabold_32_118
04432e22 l     O .rodata	00000460 tahomabold_32_119
04433282 l     O .rodata	000002f8 tahomabold_32_120
0443357a l     O .rodata	000002d0 tahomabold_32_121
0443384a l     O .rodata	000002a8 tahomabold_32_122
04433af2 l     O .rodata	00000320 tahomabold_32_123
04433e12 l     O .rodata	00000320 tahomabold_32_124
04434132 l     O .rodata	00000320 tahomabold_32_125
04434452 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
0443bc30 l     O .bss	00000004 x.4232
04438534 l     O .rwdata	00000004 y.4233
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 SEG7.c
04436a74 l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
04436a84 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04434cda l     O .rodata	00000010 zeroes.4389
04434cea l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
04434cfa l     O .rodata	00000010 zeroes.4404
0440f5d8 l     F .text	000000bc __sbprintf
04434d0a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0440f90c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0441143c l     F .text	00000008 __fp_unlock
04411450 l     F .text	0000019c __sinit.part.1
044115ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
044372d0 l     O .rwdata	00000020 lc_ctype_charset
044372b0 l     O .rwdata	00000020 lc_message_charset
044372f0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04434d38 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04434e6c l     O .rodata	00000010 blanks.4332
04434e5c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
044152b0 l     F .text	000000fc __sprint_r.part.0
04434e8c l     O .rodata	00000010 blanks.4348
04434e7c l     O .rodata	00000010 zeroes.4349
0441683c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04418028 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04418148 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04418174 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04418544 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04418638 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04418724 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0441890c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04438570 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04418d40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04418e88 l     F .text	00000038 alt_dev_reg
044374d0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0441918c l     F .text	0000020c altera_avalon_jtag_uart_irq
04419398 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04419bd4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04419e78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0441a0fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0441a23c l     F .text	00000050 alt_get_errno
0441a28c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0443bc68 g     O .bss	00000004 alt_instruction_exception_handler
04401d30 g     F .text	0000007c vid_draw_horiz_line
044135b0 g     F .text	00000074 _mprec_log10
04405770 g     F .text	00000124 I2C_Read
0441369c g     F .text	0000008c __any_on
04416dd8 g     F .text	00000054 _isatty_r
04434d44 g     O .rodata	00000028 __mprec_tinytens
04400808 g     F .text	00000070 LCD_DrawPoint
04418848 g     F .text	0000007c alt_main
0440b0c4 g     F .text	00000090 strcpy
0440aed8 g     F .text	000000c0 _puts_r
0443bc94 g     O .bss	00000100 alt_irq
04416e2c g     F .text	00000060 _lseek_r
04401e98 g     F .text	0000006c vid_color_convert16_24
04407970 g     F .text	00000130 sqrt
0440652c g     F .text	000000a0 I2CL_Read16
0443857c g       *ABS*	00000000 __flash_rwdata_start
04417cdc g     F .text	00000088 .hidden __eqdf2
0440734c g     F .text	00000168 touch_enable_penirq
0443bd94 g       *ABS*	00000000 __alt_heap_start
04406d3c g     F .text	00000064 QUEUE_IsFull
04400ee8 g     F .text	0000013c LCD_Pattern_Horizon
0440ae9c g     F .text	0000003c printf
04406798 g     F .text	000000ac SEG7_All_Number
04417044 g     F .text	0000009c _wcrtomb_r
0440432c g     F .text	000001dc GUI_DeskInit
04413d64 g     F .text	0000005c __sseek
0441178c g     F .text	00000010 __sinit
04416eec g     F .text	00000140 __swbuf_r
04412254 g     F .text	0000007c _setlocale_r
044115f4 g     F .text	00000068 __sfmoreglue
044188e8 g     F .text	00000024 __malloc_unlock
0440196c g     F .text	00000158 vid_draw_box
04400634 g     F .text	00000048 PtCopy
0440380c g     F .text	00000264 vid_print_string_alpha
044125d0 g     F .text	0000015c memmove
04411774 g     F .text	00000018 _cleanup
0441272c g     F .text	000000a8 _Balloc
04436648 g     O .rwdata	00000415 cour10_font_array
04417d64 g     F .text	000000dc .hidden __gtdf2
04401748 g     F .text	0000011c vid_move_block
0441a4b0 g     F .text	00000024 altera_nios2_gen2_irq_init
0440a3b8 g     F .text	00000010 __errno
044063b0 g     F .text	0000017c I2CL_MultipleWrite
04404170 g     F .text	000000e8 vid_string_pixel_length_alpha
04405c8c g     F .text	00000164 i2c_write
09004000 g     F .entry	0000001c __reset
044054f0 g     F .text	00000044 my_wait
04400000 g       *ABS*	00000000 __flash_exceptions_start
04400784 g     F .text	00000084 LCD_Clear
04416d7c g     F .text	0000005c _fstat_r
0443bc40 g     O .bss	00000004 errno
04405894 g     F .text	00000178 I2C_Read16
04413ce0 g     F .text	00000008 __seofread
04414074 g     F .text	0000123c ___svfiprintf_internal_r
0443bc58 g     O .bss	00000004 alt_argv
04440530 g       *ABS*	00000000 _gp
04418d10 g     F .text	00000030 usleep
04404c68 g     F .text	000000b4 VPG_ColorPanel
04403a70 g     F .text	00000148 seperate_color_channels
04437350 g     O .rwdata	00000180 alt_fd_list
0441a4d4 g     F .text	00000090 alt_find_dev
0440abfc g     F .text	00000148 memcpy
04411444 g     F .text	0000000c _cleanup_r
0440a278 g     F .text	000000dc .hidden __floatsidf
044026a8 g     F .text	0000073c vid_round_corner_points
0440706c g     F .text	0000006c Touch_UnInit
0441a1c0 g     F .text	0000007c alt_io_redirect
044090f0 g     F .text	000000f4 .hidden __ltdf2
0441ab50 g       *ABS*	00000000 __DTOR_END__
04404508 g     F .text	00000090 GUI_CheckButton
0440af98 g     F .text	00000014 puts
0441a060 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04401108 g     F .text	00000064 vid_clean_screen
04407d2c g     F .text	00000074 __fpclassifyd
0441350c g     F .text	000000a4 __ratio
04416820 g     F .text	0000001c __vfiprintf_internal
04406cfc g     F .text	00000040 QUEUE_IsEmpty
0440127c g     F .text	00000154 vid_scroll_string_init
04419598 g     F .text	0000021c altera_avalon_jtag_uart_read
0440a3c8 g     F .text	00000014 malloc
0440ae6c g     F .text	00000030 _printf_r
04406ef8 g     F .text	00000174 Touch_Init
04407ea0 g     F .text	00000064 .hidden __udivsi3
04418594 g     F .text	000000a4 isatty
04434d94 g     O .rodata	000000c8 __mprec_tens
044122d0 g     F .text	0000000c __locale_charset
0440f784 g     F .text	00000034 vsnprintf
04406844 g     F .text	00000098 SEG7_Seg
04404598 g     F .text	0000023c GUI_DeskDraw
0441a72c g     F .text	00000090 alt_icache_flush
04405a0c g     F .text	0000017c I2C_MultipleRead
0443bc3c g     O .bss	00000004 __malloc_top_pad
04406ec4 g     F .text	00000034 QUEUE_Empty
0443854c g     O .rwdata	00000004 __mb_cur_max
04412300 g     F .text	0000000c _localeconv_r
04412b38 g     F .text	0000003c __i2b
04411c10 g     F .text	000004bc __sfvwrite_r
04406e34 g     F .text	00000090 QUEUE_Pop
04406658 g     F .text	00000064 SEG7_Clear
0440afac g     F .text	00000054 _sbrk_r
044072d8 g     F .text	00000034 touch_empty_fifo
0440054c g     F .text	00000034 RectHeight
04416e8c g     F .text	00000060 _read_r
04438564 g     O .rwdata	00000004 alt_max_fd
04404c44 g     F .text	00000024 VPG_XLine
04416a70 g     F .text	000000f0 _fclose_r
0441140c g     F .text	00000030 fflush
0443bc38 g     O .bss	00000004 __malloc_max_sbrked_mem
04406088 g     F .text	00000168 I2CL_Read
04435a88 g     O .rwdata	00000bc0 tahomabold_32
04407f5c g     F .text	000008ac .hidden __adddf3
04404868 g     F .text	0000008c GUI_ClearPaintArea
044002f4 g     F .text	00000044 PtSet
044132b4 g     F .text	0000010c __b2d
044177a4 g     F .text	00000538 .hidden __umoddi3
04418774 g     F .text	000000d4 lseek
04438538 g     O .rwdata	00000004 __fdlib_version
0443853c g     O .rwdata	00000004 _global_impure_ptr
044021bc g     F .text	0000013c vid_draw_circle
04413728 g     F .text	00000564 _realloc_r
0443bd94 g       *ABS*	00000000 __bss_end
04418454 g     F .text	000000f0 alt_iic_isr_register
04418c08 g     F .text	00000108 alt_tick
04405630 g     F .text	00000140 I2C_Write16
04400424 g     F .text	0000008c RectOffset
0441722c g     F .text	00000578 .hidden __udivdi3
04416cd8 g     F .text	00000024 _fputwc_r
04434d6c g     O .rodata	00000028 __mprec_bigtens
0441291c g     F .text	00000104 __s2b
04401f48 g     F .text	00000274 vid_draw_sloped_line
04417e40 g     F .text	000000a8 .hidden __floatunsidf
04412ff4 g     F .text	00000060 __mcmp
04404e1c g     F .text	000000e8 VPG_VGrid
044117ac g     F .text	00000018 __fp_lock_all
04418408 g     F .text	0000004c alt_ic_irq_enabled
04405534 g     F .text	000000fc I2C_Write
044022f8 g     F .text	000003b0 vid_draw_round_corner_box
04406720 g     F .text	00000078 SEG7_Number
04418b6c g     F .text	0000009c alt_alarm_stop
0443bc50 g     O .bss	00000004 alt_irq_active
04401024 g     F .text	000000e4 LCD_Pattern_Vertical
044000dc g     F .exceptions	000000d4 alt_irq_handler
04437328 g     O .rwdata	00000028 alt_dev_null
044065cc g     F .text	0000008c I2CL_Write16
04405b88 g     F .text	0000008c i2c_start
04419e30 g     F .text	00000048 alt_dcache_flush_all
04412a20 g     F .text	00000068 __hi0bits
0440781c g     F .text	00000078 touch_alarm_callback
0440a1f8 g     F .text	00000080 .hidden __fixdfsi
0440730c g     F .text	00000040 touch_is_pen_pressed
0443857c g       *ABS*	00000000 __ram_rwdata_end
04403238 g     F .text	000003b4 vid_draw_triangle
09004000 g       *ABS*	00000000 __alt_mem_onchip_memory
0443855c g     O .rwdata	00000008 alt_dev_list
04418d90 g     F .text	000000f8 write
04436a60 g     O .rwdata	00000014 szPallete
044036d8 g     F .text	00000134 CropImage16
04434ec8 g       *ABS*	00000000 __ram_rodata_end
044181c4 g     F .text	000000b0 fstat
044090f0 g     F .text	000000f4 .hidden __ledf2
044013d0 g     F .text	00000378 vid_scroll_string
04406ad4 g     F .text	0000006c myprintf
044074e8 g     F .text	00000334 touch_get_xy
04412d6c g     F .text	00000140 __pow5mult
044153c4 g     F .text	0000145c ___vfiprintf_internal_r
0443bc4c g     O .bss	00000004 __nlocale_changed
04407f04 g     F .text	00000058 .hidden __umodsi3
0440725c g     F .text	0000007c touch_isr
04400518 g     F .text	00000034 RectWidth
044035ec g     F .text	000000ec CopyImage16
0443bd94 g       *ABS*	00000000 end
04405320 g     F .text	000000a8 GUI_VPG
04404b1c g     F .text	00000068 GUI_ShowInfo
044190c4 g     F .text	000000c8 altera_avalon_jtag_uart_init
044001b0 g     F .exceptions	00000074 alt_instruction_exception_entry
04401ac4 g     F .text	000000f0 vid_print_char
0441ab50 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04419c4c g     F .text	0000008c alt_avalon_timer_sc_init
0440a354 g     F .text	00000064 .hidden __clzsi2
044197b4 g     F .text	00000224 altera_avalon_jtag_uart_write
044051a0 g     F .text	00000180 GUI_ShowPAT
04402e38 g     F .text	00000054 min3
0440116c g     F .text	000000cc vid_draw_line
0441179c g     F .text	00000004 __sfp_lock_acquire
044124ec g     F .text	000000e4 memchr
0440d3c4 g     F .text	000021f8 ___vfprintf_internal_r
0440b000 g     F .text	00000058 _sprintf_r
04411900 g     F .text	00000310 _free_r
044122dc g     F .text	00000010 __locale_mb_cur_max
044006cc g     F .text	000000b8 LCD_SetCursor
0441a99c g     F .text	00000180 __call_exitprocs
0443bc48 g     O .bss	00000004 __mlocale_changed
04404d1c g     F .text	00000100 VPG_Grid
04438544 g     O .rwdata	00000004 __malloc_sbrk_base
04400224 g     F .text	0000004c _start
0443bc60 g     O .bss	00000004 _alt_tick_rate
044074b4 g     F .text	00000034 touch_clear_input
04412eac g     F .text	00000148 __lshift
044199d8 g     F .text	000001fc alt_avalon_spi_command
04406da0 g     F .text	00000094 QUEUE_Push
0443bc64 g     O .bss	00000004 _alt_nticks
04402ef0 g     F .text	00000104 vid_put_pixel_in_span_map
0441895c g     F .text	000000fc read
04404fec g     F .text	000001b4 VPG_ColorBar
04418ef8 g     F .text	00000068 alt_sys_init
04413ea4 g     F .text	000001d0 __ssprint_r
0441a884 g     F .text	00000118 __register_exitproc
04412b74 g     F .text	000001f8 __multiply
04401c98 g     F .text	00000098 vid_paint_block
04419440 g     F .text	00000068 altera_avalon_jtag_uart_close
04434ec8 g       *ABS*	00000000 __ram_rwdata_start
0441ab50 g       *ABS*	00000000 __ram_rodata_start
0443bc6c g     O .bss	00000028 __malloc_current_mallinfo
044133c0 g     F .text	0000014c __d2b
04404f04 g     F .text	000000e8 VPG_HGrid
04401df8 g     F .text	000000a0 vid_color_convert24_16
04418f60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0441a678 g     F .text	000000b4 alt_get_fd
04419cd8 g     F .text	00000158 alt_busy_sleep
04416958 g     F .text	00000054 _close_r
044048f4 g     F .text	00000228 GUI
04403d2c g     F .text	0000025c alpha_blending
0441a808 g     F .text	0000007c memcmp
04419020 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0443bd94 g       *ABS*	00000000 __alt_stack_base
04419070 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0440f7b8 g     F .text	00000154 __swsetup_r
04408808 g     F .text	000008e8 .hidden __divdf3
0441165c g     F .text	00000118 __sfp
04413624 g     F .text	00000078 __copybits
04436ea8 g     O .rwdata	00000408 __malloc_av_
044117a8 g     F .text	00000004 __sinit_lock_release
0440f694 g     F .text	000000f0 _vsnprintf_r
04405c14 g     F .text	00000078 i2c_stop
044091e4 g     F .text	00000718 .hidden __muldf3
04413c8c g     F .text	00000054 __sread
044066bc g     F .text	00000064 SEG7_Full
0441a564 g     F .text	00000114 alt_find_file
044069b0 g     F .text	000000f0 SEG7_Decimal
04419ec8 g     F .text	000000a4 alt_dev_llist_insert
044188c4 g     F .text	00000024 __malloc_lock
04401f04 g     F .text	00000044 vid_copy_line_to_frame_buffer
04418abc g     F .text	000000b0 sbrk
0440b1ec g     F .text	000021d8 ___svfprintf_internal_r
044113b0 g     F .text	0000005c _fflush_r
044169ac g     F .text	000000c4 _calloc_r
04406c58 g     F .text	00000070 QUEUE_New
0443bc30 g       *ABS*	00000000 __bss_start
04400878 g     F .text	00000670 LCD_Init
0440ad44 g     F .text	00000128 memset
044053c8 g     F .text	00000128 main
0443bc5c g     O .bss	00000004 alt_envp
0443bc34 g     O .bss	00000004 __malloc_max_total_mem
04406b40 g     F .text	00000088 myprintf_hexarray
04418fc0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04404b84 g     F .text	0000005c GUI_ShowTouchPoint
04405df0 g     F .text	00000158 i2c_read
0441702c g     F .text	00000018 __swbuf
04434ec8 g     O .rwdata	00000bc0 tahomabold_20
04413dc0 g     F .text	00000008 __sclose
04407da0 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04403f88 g     F .text	000001e8 vid_print_char_alpha
04416b60 g     F .text	00000014 fclose
04438530 g     O .rwdata	00000004 cour10_font
0440fb0c g     F .text	00001688 _dtoa_r
0440a3f0 g     F .text	0000080c _malloc_r
044171a0 g     F .text	00000030 __ascii_wctomb
04438568 g     O .rwdata	00000004 alt_errno
044120cc g     F .text	000000c4 _fwalk
04400580 g     F .text	000000b4 PtDistance
04400338 g     F .text	00000060 RectSet
04407da8 g     F .text	00000084 .hidden __divsi3
0440067c g     F .text	00000050 Delay_Ms
044004b0 g     F .text	00000068 RectCopy
044117dc g     F .text	00000124 _malloc_trim_r
0441ab50 g       *ABS*	00000000 __CTOR_END__
04413dc8 g     F .text	000000dc strcmp
04403ce8 g     F .text	00000044 read_from_frame
0441ab50 g       *ABS*	00000000 __flash_rodata_start
0441ab50 g       *ABS*	00000000 __DTOR_LIST__
04401c58 g     F .text	00000040 vid_get_pixel
04417cdc g     F .text	00000088 .hidden __nedf2
04418ec0 g     F .text	00000038 alt_irq_init
04418a58 g     F .text	00000064 alt_release_fd
0440b058 g     F .text	0000006c sprintf
04434b8d g     O .rodata	00000100 .hidden __clz_tab
044068dc g     F .text	000000d4 SEG7_Hex
04406aa0 g     F .text	00000034 debug_output
0443bc44 g     O .bss	00000004 _PathLocale
0441a7bc g     F .text	00000014 atexit
044168f8 g     F .text	00000060 _write_r
04400270 g     F .text	00000084 IsPtInRect
0441230c g     F .text	00000018 setlocale
04438540 g     O .rwdata	00000004 _impure_ptr
0443bc54 g     O .bss	00000004 alt_argc
04411194 g     F .text	0000021c __sflush_r
04419fcc g     F .text	00000060 _do_dtors
044122f8 g     F .text	00000008 __locale_cjk_lang
04406bc8 g     F .text	00000090 myprintf_dwordarray
044061f0 g     F .text	000001c0 I2CL_MultipleRead
04400000 g       .exceptions	00000000 alt_irq_entry
04413250 g     F .text	00000064 __ulp
044117c4 g     F .text	00000018 __fp_unlock_all
04407114 g     F .text	00000148 Touch_GetXY
04438554 g     O .rwdata	00000008 alt_fs_list
04401864 g     F .text	00000108 vid_print_string
04400000 g       *ABS*	00000000 __ram_exceptions_start
04412324 g     F .text	0000000c localeconv
04407aa0 g     F .text	0000028c __ieee754_sqrt
04418274 g     F .text	00000050 alt_ic_isr_register
0443857c g       *ABS*	00000000 _edata
0443bd94 g       *ABS*	00000000 _end
04404be0 g     F .text	00000064 ShowInfo
04402de4 g     F .text	00000054 max3
04416b74 g     F .text	00000164 __fputwc
04400224 g       *ABS*	00000000 __ram_exceptions_end
044194a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04418364 g     F .text	000000a4 alt_ic_irq_disable
04401dac g     F .text	0000004c vid_merge_colors
04413ce8 g     F .text	0000007c __swrite
04438548 g     O .rwdata	00000004 __malloc_trim_threshold
044122ec g     F .text	0000000c __locale_msgcharset
0441a7d0 g     F .text	00000038 exit
04412190 g     F .text	000000c4 _fwalk_reent
04413054 g     F .text	000001fc __mdiff
044047d4 g     F .text	00000094 IsContinuedPoint
04407e2c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04400000 g     F .exceptions	00000000 alt_exception
044117a0 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04406cc8 g     F .text	00000034 QUEUE_Delete
04407894 g     F .text	000000dc touch_xy_transform
04401bb4 g     F .text	000000a4 vid_set_pixel
0441ab1c g     F .text	00000034 _exit
04417ee8 g     F .text	00000140 alt_alarm_start
04401238 g     F .text	00000044 vid_scroll_string_quit
04412330 g     F .text	000001bc __smakebuf_r
0440b154 g     F .text	00000098 strlen
0441a358 g     F .text	00000158 open
04417d64 g     F .text	000000dc .hidden __gedf2
04400398 g     F .text	0000008c RectInflate
04438550 g     O .rwdata	00000004 __wctomb
044153ac g     F .text	00000018 __sprint_r
0441a02c g     F .text	00000034 alt_icache_flush_all
0443856c g     O .rwdata	00000004 alt_priority_mask
044182c4 g     F .text	000000a0 alt_ic_irq_enable
0440f5bc g     F .text	0000001c __vfprintf_internal
044171d0 g     F .text	0000005c _wctomb_r
044098fc g     F .text	000008fc .hidden __subdf3
04402ff4 g     F .text	00000244 vid_bres_scan_edges
04412a88 g     F .text	000000b0 __lo0bits
04438574 g     O .rwdata	00000008 alt_alarm_list
04402e8c g     F .text	00000064 max_diff3
04419f6c g     F .text	00000060 _do_ctors
04405f48 g     F .text	00000140 I2CL_Write
04404258 g     F .text	000000d4 GUI_ShowWelcome
04403bb8 g     F .text	00000130 merge_color_channels
044170e0 g     F .text	000000c0 wcrtomb
04418078 g     F .text	000000d0 close
044186a0 g     F .text	00000084 alt_load
044070d8 g     F .text	0000003c Touch_EmptyFifo
04416cfc g     F .text	00000080 fputwc
0440a3dc g     F .text	00000014 free
044117a4 g     F .text	00000004 __sinit_lock_acquire
044127fc g     F .text	00000120 __multadd
044127d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

09004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 9004000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 9004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 9004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 900400c:	00bffd16 	blt	zero,r2,9004004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 9004010:	00411034 	movhi	at,1088
    ori r1, r1, %lo(_start)
 9004014:	08408914 	ori	at,at,548
    jmp r1
 9004018:	0800683a 	jmp	at
 900401c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04400000 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4400000:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4400004:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4400008:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 440000c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4400010:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4400014:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4400018:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 440001c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4400020:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4400024:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4400028:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 440002c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4400030:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4400034:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4400038:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 440003c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4400040:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4400044:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4400048:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 440004c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4400050:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4400054:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4400058:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 440005c:	10000326 	beq	r2,zero,440006c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4400060:	20000226 	beq	r4,zero,440006c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4400064:	44000dc0 	call	44000dc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4400068:	00000706 	br	4400088 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 440006c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4400070:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4400074:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4400078:	44001b00 	call	44001b0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 440007c:	1000021e 	bne	r2,zero,4400088 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 4400080:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4400084:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4400088:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 440008c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 4400090:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 4400094:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 4400098:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 440009c:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 44000a0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 44000a4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 44000a8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 44000ac:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 44000b0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 44000b4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 44000b8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 44000bc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 44000c0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 44000c4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 44000c8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 44000cc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 44000d0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 44000d4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 44000d8:	ef80083a 	eret

044000dc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 44000dc:	defff904 	addi	sp,sp,-28
 44000e0:	dfc00615 	stw	ra,24(sp)
 44000e4:	df000515 	stw	fp,20(sp)
 44000e8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 44000ec:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 44000f0:	0005313a 	rdctl	r2,ipending
 44000f4:	e0bffe15 	stw	r2,-8(fp)

  return active;
 44000f8:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 44000fc:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4400100:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4400104:	00800044 	movi	r2,1
 4400108:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 440010c:	e0fffb17 	ldw	r3,-20(fp)
 4400110:	e0bffc17 	ldw	r2,-16(fp)
 4400114:	1884703a 	and	r2,r3,r2
 4400118:	10001426 	beq	r2,zero,440016c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 440011c:	00811134 	movhi	r2,1092
 4400120:	10af2504 	addi	r2,r2,-17260
 4400124:	e0fffd17 	ldw	r3,-12(fp)
 4400128:	180690fa 	slli	r3,r3,3
 440012c:	10c5883a 	add	r2,r2,r3
 4400130:	10c00017 	ldw	r3,0(r2)
 4400134:	00811134 	movhi	r2,1092
 4400138:	10af2504 	addi	r2,r2,-17260
 440013c:	e13ffd17 	ldw	r4,-12(fp)
 4400140:	200890fa 	slli	r4,r4,3
 4400144:	1105883a 	add	r2,r2,r4
 4400148:	10800104 	addi	r2,r2,4
 440014c:	10800017 	ldw	r2,0(r2)
 4400150:	1009883a 	mov	r4,r2
 4400154:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4400158:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 440015c:	0005313a 	rdctl	r2,ipending
 4400160:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4400164:	e0bfff17 	ldw	r2,-4(fp)
 4400168:	00000706 	br	4400188 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 440016c:	e0bffc17 	ldw	r2,-16(fp)
 4400170:	1085883a 	add	r2,r2,r2
 4400174:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4400178:	e0bffd17 	ldw	r2,-12(fp)
 440017c:	10800044 	addi	r2,r2,1
 4400180:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 4400184:	003fe106 	br	440010c <__reset+0xfb3fc10c>

    active = alt_irq_pending ();
 4400188:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 440018c:	e0bffb17 	ldw	r2,-20(fp)
 4400190:	103fdb1e 	bne	r2,zero,4400100 <__reset+0xfb3fc100>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4400194:	0001883a 	nop
}
 4400198:	0001883a 	nop
 440019c:	e037883a 	mov	sp,fp
 44001a0:	dfc00117 	ldw	ra,4(sp)
 44001a4:	df000017 	ldw	fp,0(sp)
 44001a8:	dec00204 	addi	sp,sp,8
 44001ac:	f800283a 	ret

044001b0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 44001b0:	defffb04 	addi	sp,sp,-20
 44001b4:	dfc00415 	stw	ra,16(sp)
 44001b8:	df000315 	stw	fp,12(sp)
 44001bc:	df000304 	addi	fp,sp,12
 44001c0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 44001c4:	000531fa 	rdctl	r2,exception
 44001c8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 44001cc:	e0bffd17 	ldw	r2,-12(fp)
 44001d0:	10801f0c 	andi	r2,r2,124
 44001d4:	1004d0ba 	srli	r2,r2,2
 44001d8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 44001dc:	0005333a 	rdctl	r2,badaddr
 44001e0:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 44001e4:	d0adce17 	ldw	r2,-18632(gp)
 44001e8:	10000726 	beq	r2,zero,4400208 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 44001ec:	d0adce17 	ldw	r2,-18632(gp)
 44001f0:	e0fffd17 	ldw	r3,-12(fp)
 44001f4:	e1bffe17 	ldw	r6,-8(fp)
 44001f8:	e17fff17 	ldw	r5,-4(fp)
 44001fc:	1809883a 	mov	r4,r3
 4400200:	103ee83a 	callr	r2
 4400204:	00000206 	br	4400210 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4400208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 440020c:	0005883a 	mov	r2,zero
}
 4400210:	e037883a 	mov	sp,fp
 4400214:	dfc00117 	ldw	ra,4(sp)
 4400218:	df000017 	ldw	fp,0(sp)
 440021c:	dec00204 	addi	sp,sp,8
 4400220:	f800283a 	ret

Disassembly of section .text:

04400224 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4400224:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4400228:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 440022c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4400230:	00bffd16 	blt	zero,r2,4400228 <__reset+0xfb3fc228>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4400234:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4400238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 440023c:	06811134 	movhi	gp,1092
    ori gp, gp, %lo(_gp)
 4400240:	d6814c14 	ori	gp,gp,1328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4400244:	008110f4 	movhi	r2,1091
    ori r2, r2, %lo(__bss_start)
 4400248:	10af0c14 	ori	r2,r2,48176

    movhi r3, %hi(__bss_end)
 440024c:	00c110f4 	movhi	r3,1091
    ori r3, r3, %lo(__bss_end)
 4400250:	18ef6514 	ori	r3,r3,48532

    beq r2, r3, 1f
 4400254:	10c00326 	beq	r2,r3,4400264 <_start+0x40>

0:
    stw zero, (r2)
 4400258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 440025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4400260:	10fffd36 	bltu	r2,r3,4400258 <__reset+0xfb3fc258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4400264:	44186a00 	call	44186a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4400268:	44188480 	call	4418848 <alt_main>

0440026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 440026c:	003fff06 	br	440026c <__reset+0xfb3fc26c>

04400270 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 4400270:	defffc04 	addi	sp,sp,-16
 4400274:	df000315 	stw	fp,12(sp)
 4400278:	df000304 	addi	fp,sp,12
 440027c:	e13ffe15 	stw	r4,-8(fp)
 4400280:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 4400284:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 4400288:	e0bffe17 	ldw	r2,-8(fp)
 440028c:	10c00017 	ldw	r3,0(r2)
 4400290:	e0bfff17 	ldw	r2,-4(fp)
 4400294:	10800017 	ldw	r2,0(r2)
 4400298:	18801116 	blt	r3,r2,44002e0 <IsPtInRect+0x70>
 440029c:	e0bffe17 	ldw	r2,-8(fp)
 44002a0:	10800017 	ldw	r2,0(r2)
 44002a4:	e0ffff17 	ldw	r3,-4(fp)
 44002a8:	18c00117 	ldw	r3,4(r3)
 44002ac:	18800c16 	blt	r3,r2,44002e0 <IsPtInRect+0x70>
 44002b0:	e0bffe17 	ldw	r2,-8(fp)
 44002b4:	10c00117 	ldw	r3,4(r2)
 44002b8:	e0bfff17 	ldw	r2,-4(fp)
 44002bc:	10800217 	ldw	r2,8(r2)
 44002c0:	18800716 	blt	r3,r2,44002e0 <IsPtInRect+0x70>
 44002c4:	e0bffe17 	ldw	r2,-8(fp)
 44002c8:	10800117 	ldw	r2,4(r2)
 44002cc:	e0ffff17 	ldw	r3,-4(fp)
 44002d0:	18c00317 	ldw	r3,12(r3)
 44002d4:	18800216 	blt	r3,r2,44002e0 <IsPtInRect+0x70>
        bYes = TRUE;
 44002d8:	00800044 	movi	r2,1
 44002dc:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 44002e0:	e0bffd17 	ldw	r2,-12(fp)
}
 44002e4:	e037883a 	mov	sp,fp
 44002e8:	df000017 	ldw	fp,0(sp)
 44002ec:	dec00104 	addi	sp,sp,4
 44002f0:	f800283a 	ret

044002f4 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 44002f4:	defffc04 	addi	sp,sp,-16
 44002f8:	df000315 	stw	fp,12(sp)
 44002fc:	df000304 	addi	fp,sp,12
 4400300:	e13ffd15 	stw	r4,-12(fp)
 4400304:	e17ffe15 	stw	r5,-8(fp)
 4400308:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 440030c:	e0bffd17 	ldw	r2,-12(fp)
 4400310:	e0fffe17 	ldw	r3,-8(fp)
 4400314:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 4400318:	e0bffd17 	ldw	r2,-12(fp)
 440031c:	e0ffff17 	ldw	r3,-4(fp)
 4400320:	10c00115 	stw	r3,4(r2)
}
 4400324:	0001883a 	nop
 4400328:	e037883a 	mov	sp,fp
 440032c:	df000017 	ldw	fp,0(sp)
 4400330:	dec00104 	addi	sp,sp,4
 4400334:	f800283a 	ret

04400338 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 4400338:	defffb04 	addi	sp,sp,-20
 440033c:	df000415 	stw	fp,16(sp)
 4400340:	df000404 	addi	fp,sp,16
 4400344:	e13ffc15 	stw	r4,-16(fp)
 4400348:	e17ffd15 	stw	r5,-12(fp)
 440034c:	e1bffe15 	stw	r6,-8(fp)
 4400350:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 4400354:	e0bffc17 	ldw	r2,-16(fp)
 4400358:	e0fffd17 	ldw	r3,-12(fp)
 440035c:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 4400360:	e0bffc17 	ldw	r2,-16(fp)
 4400364:	e0fffe17 	ldw	r3,-8(fp)
 4400368:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 440036c:	e0bffc17 	ldw	r2,-16(fp)
 4400370:	e0ffff17 	ldw	r3,-4(fp)
 4400374:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4400378:	e0bffc17 	ldw	r2,-16(fp)
 440037c:	e0c00117 	ldw	r3,4(fp)
 4400380:	10c00315 	stw	r3,12(r2)
}
 4400384:	0001883a 	nop
 4400388:	e037883a 	mov	sp,fp
 440038c:	df000017 	ldw	fp,0(sp)
 4400390:	dec00104 	addi	sp,sp,4
 4400394:	f800283a 	ret

04400398 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 4400398:	defffc04 	addi	sp,sp,-16
 440039c:	df000315 	stw	fp,12(sp)
 44003a0:	df000304 	addi	fp,sp,12
 44003a4:	e13ffd15 	stw	r4,-12(fp)
 44003a8:	e17ffe15 	stw	r5,-8(fp)
 44003ac:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 44003b0:	e0bffd17 	ldw	r2,-12(fp)
 44003b4:	10c00017 	ldw	r3,0(r2)
 44003b8:	e0bffe17 	ldw	r2,-8(fp)
 44003bc:	1887c83a 	sub	r3,r3,r2
 44003c0:	e0bffd17 	ldw	r2,-12(fp)
 44003c4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 44003c8:	e0bffd17 	ldw	r2,-12(fp)
 44003cc:	10c00117 	ldw	r3,4(r2)
 44003d0:	e0bffe17 	ldw	r2,-8(fp)
 44003d4:	1887883a 	add	r3,r3,r2
 44003d8:	e0bffd17 	ldw	r2,-12(fp)
 44003dc:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 44003e0:	e0bffd17 	ldw	r2,-12(fp)
 44003e4:	10c00217 	ldw	r3,8(r2)
 44003e8:	e0bfff17 	ldw	r2,-4(fp)
 44003ec:	1887c83a 	sub	r3,r3,r2
 44003f0:	e0bffd17 	ldw	r2,-12(fp)
 44003f4:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 44003f8:	e0bffd17 	ldw	r2,-12(fp)
 44003fc:	10c00317 	ldw	r3,12(r2)
 4400400:	e0bfff17 	ldw	r2,-4(fp)
 4400404:	1887883a 	add	r3,r3,r2
 4400408:	e0bffd17 	ldw	r2,-12(fp)
 440040c:	10c00315 	stw	r3,12(r2)
}
 4400410:	0001883a 	nop
 4400414:	e037883a 	mov	sp,fp
 4400418:	df000017 	ldw	fp,0(sp)
 440041c:	dec00104 	addi	sp,sp,4
 4400420:	f800283a 	ret

04400424 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 4400424:	defffc04 	addi	sp,sp,-16
 4400428:	df000315 	stw	fp,12(sp)
 440042c:	df000304 	addi	fp,sp,12
 4400430:	e13ffd15 	stw	r4,-12(fp)
 4400434:	e17ffe15 	stw	r5,-8(fp)
 4400438:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 440043c:	e0bffd17 	ldw	r2,-12(fp)
 4400440:	10c00017 	ldw	r3,0(r2)
 4400444:	e0bffe17 	ldw	r2,-8(fp)
 4400448:	1887883a 	add	r3,r3,r2
 440044c:	e0bffd17 	ldw	r2,-12(fp)
 4400450:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4400454:	e0bffd17 	ldw	r2,-12(fp)
 4400458:	10c00117 	ldw	r3,4(r2)
 440045c:	e0bffe17 	ldw	r2,-8(fp)
 4400460:	1887883a 	add	r3,r3,r2
 4400464:	e0bffd17 	ldw	r2,-12(fp)
 4400468:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 440046c:	e0bffd17 	ldw	r2,-12(fp)
 4400470:	10c00217 	ldw	r3,8(r2)
 4400474:	e0bfff17 	ldw	r2,-4(fp)
 4400478:	1887883a 	add	r3,r3,r2
 440047c:	e0bffd17 	ldw	r2,-12(fp)
 4400480:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4400484:	e0bffd17 	ldw	r2,-12(fp)
 4400488:	10c00317 	ldw	r3,12(r2)
 440048c:	e0bfff17 	ldw	r2,-4(fp)
 4400490:	1887883a 	add	r3,r3,r2
 4400494:	e0bffd17 	ldw	r2,-12(fp)
 4400498:	10c00315 	stw	r3,12(r2)
}
 440049c:	0001883a 	nop
 44004a0:	e037883a 	mov	sp,fp
 44004a4:	df000017 	ldw	fp,0(sp)
 44004a8:	dec00104 	addi	sp,sp,4
 44004ac:	f800283a 	ret

044004b0 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 44004b0:	defffd04 	addi	sp,sp,-12
 44004b4:	df000215 	stw	fp,8(sp)
 44004b8:	df000204 	addi	fp,sp,8
 44004bc:	e13ffe15 	stw	r4,-8(fp)
 44004c0:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 44004c4:	e0bfff17 	ldw	r2,-4(fp)
 44004c8:	10c00017 	ldw	r3,0(r2)
 44004cc:	e0bffe17 	ldw	r2,-8(fp)
 44004d0:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 44004d4:	e0bfff17 	ldw	r2,-4(fp)
 44004d8:	10c00117 	ldw	r3,4(r2)
 44004dc:	e0bffe17 	ldw	r2,-8(fp)
 44004e0:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 44004e4:	e0bfff17 	ldw	r2,-4(fp)
 44004e8:	10c00217 	ldw	r3,8(r2)
 44004ec:	e0bffe17 	ldw	r2,-8(fp)
 44004f0:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 44004f4:	e0bfff17 	ldw	r2,-4(fp)
 44004f8:	10c00317 	ldw	r3,12(r2)
 44004fc:	e0bffe17 	ldw	r2,-8(fp)
 4400500:	10c00315 	stw	r3,12(r2)
}
 4400504:	0001883a 	nop
 4400508:	e037883a 	mov	sp,fp
 440050c:	df000017 	ldw	fp,0(sp)
 4400510:	dec00104 	addi	sp,sp,4
 4400514:	f800283a 	ret

04400518 <RectWidth>:

int RectWidth(RECT *rc){
 4400518:	defffe04 	addi	sp,sp,-8
 440051c:	df000115 	stw	fp,4(sp)
 4400520:	df000104 	addi	fp,sp,4
 4400524:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 4400528:	e0bfff17 	ldw	r2,-4(fp)
 440052c:	10c00117 	ldw	r3,4(r2)
 4400530:	e0bfff17 	ldw	r2,-4(fp)
 4400534:	10800017 	ldw	r2,0(r2)
 4400538:	1885c83a 	sub	r2,r3,r2
}
 440053c:	e037883a 	mov	sp,fp
 4400540:	df000017 	ldw	fp,0(sp)
 4400544:	dec00104 	addi	sp,sp,4
 4400548:	f800283a 	ret

0440054c <RectHeight>:

int RectHeight(RECT *rc){
 440054c:	defffe04 	addi	sp,sp,-8
 4400550:	df000115 	stw	fp,4(sp)
 4400554:	df000104 	addi	fp,sp,4
 4400558:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 440055c:	e0bfff17 	ldw	r2,-4(fp)
 4400560:	10c00317 	ldw	r3,12(r2)
 4400564:	e0bfff17 	ldw	r2,-4(fp)
 4400568:	10800217 	ldw	r2,8(r2)
 440056c:	1885c83a 	sub	r2,r3,r2
}
 4400570:	e037883a 	mov	sp,fp
 4400574:	df000017 	ldw	fp,0(sp)
 4400578:	dec00104 	addi	sp,sp,4
 440057c:	f800283a 	ret

04400580 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 4400580:	defff904 	addi	sp,sp,-28
 4400584:	dfc00615 	stw	ra,24(sp)
 4400588:	df000515 	stw	fp,20(sp)
 440058c:	df000504 	addi	fp,sp,20
 4400590:	e13ffe15 	stw	r4,-8(fp)
 4400594:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 4400598:	e0bffe17 	ldw	r2,-8(fp)
 440059c:	10c00017 	ldw	r3,0(r2)
 44005a0:	e0bfff17 	ldw	r2,-4(fp)
 44005a4:	10800017 	ldw	r2,0(r2)
 44005a8:	1885c83a 	sub	r2,r3,r2
 44005ac:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 44005b0:	e0bffe17 	ldw	r2,-8(fp)
 44005b4:	10c00117 	ldw	r3,4(r2)
 44005b8:	e0bfff17 	ldw	r2,-4(fp)
 44005bc:	10800117 	ldw	r2,4(r2)
 44005c0:	1885c83a 	sub	r2,r3,r2
 44005c4:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 44005c8:	e0fffb17 	ldw	r3,-20(fp)
 44005cc:	e0bffb17 	ldw	r2,-20(fp)
 44005d0:	1887383a 	mul	r3,r3,r2
 44005d4:	e13ffc17 	ldw	r4,-16(fp)
 44005d8:	e0bffc17 	ldw	r2,-16(fp)
 44005dc:	2085383a 	mul	r2,r4,r2
 44005e0:	1885883a 	add	r2,r3,r2
 44005e4:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 44005e8:	e13ffd17 	ldw	r4,-12(fp)
 44005ec:	440a2780 	call	440a278 <__floatsidf>
 44005f0:	100b883a 	mov	r5,r2
 44005f4:	180d883a 	mov	r6,r3
 44005f8:	2809883a 	mov	r4,r5
 44005fc:	300b883a 	mov	r5,r6
 4400600:	44079700 	call	4407970 <sqrt>
 4400604:	100b883a 	mov	r5,r2
 4400608:	180d883a 	mov	r6,r3
 440060c:	2809883a 	mov	r4,r5
 4400610:	300b883a 	mov	r5,r6
 4400614:	440a1f80 	call	440a1f8 <__fixdfsi>
 4400618:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 440061c:	e0bffd17 	ldw	r2,-12(fp)
}
 4400620:	e037883a 	mov	sp,fp
 4400624:	dfc00117 	ldw	ra,4(sp)
 4400628:	df000017 	ldw	fp,0(sp)
 440062c:	dec00204 	addi	sp,sp,8
 4400630:	f800283a 	ret

04400634 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 4400634:	defffd04 	addi	sp,sp,-12
 4400638:	df000215 	stw	fp,8(sp)
 440063c:	df000204 	addi	fp,sp,8
 4400640:	e13ffe15 	stw	r4,-8(fp)
 4400644:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 4400648:	e0bfff17 	ldw	r2,-4(fp)
 440064c:	10c00017 	ldw	r3,0(r2)
 4400650:	e0bffe17 	ldw	r2,-8(fp)
 4400654:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 4400658:	e0bfff17 	ldw	r2,-4(fp)
 440065c:	10c00117 	ldw	r3,4(r2)
 4400660:	e0bffe17 	ldw	r2,-8(fp)
 4400664:	10c00115 	stw	r3,4(r2)
}
 4400668:	0001883a 	nop
 440066c:	e037883a 	mov	sp,fp
 4400670:	df000017 	ldw	fp,0(sp)
 4400674:	dec00104 	addi	sp,sp,4
 4400678:	f800283a 	ret

0440067c <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 440067c:	defffd04 	addi	sp,sp,-12
 4400680:	dfc00215 	stw	ra,8(sp)
 4400684:	df000115 	stw	fp,4(sp)
 4400688:	df000104 	addi	fp,sp,4
 440068c:	2005883a 	mov	r2,r4
 4400690:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 4400694:	00000206 	br	44006a0 <Delay_Ms+0x24>
    {
        usleep(1000);
 4400698:	0100fa04 	movi	r4,1000
 440069c:	4418d100 	call	4418d10 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 44006a0:	e0bfff0b 	ldhu	r2,-4(fp)
 44006a4:	10ffffc4 	addi	r3,r2,-1
 44006a8:	e0ffff0d 	sth	r3,-4(fp)
 44006ac:	10bfffcc 	andi	r2,r2,65535
 44006b0:	103ff91e 	bne	r2,zero,4400698 <__reset+0xfb3fc698>
    {
        usleep(1000);
    }
}
 44006b4:	0001883a 	nop
 44006b8:	e037883a 	mov	sp,fp
 44006bc:	dfc00117 	ldw	ra,4(sp)
 44006c0:	df000017 	ldw	fp,0(sp)
 44006c4:	dec00204 	addi	sp,sp,8
 44006c8:	f800283a 	ret

044006cc <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 44006cc:	defffd04 	addi	sp,sp,-12
 44006d0:	df000215 	stw	fp,8(sp)
 44006d4:	df000204 	addi	fp,sp,8
 44006d8:	2007883a 	mov	r3,r4
 44006dc:	2805883a 	mov	r2,r5
 44006e0:	e0fffe0d 	sth	r3,-8(fp)
 44006e4:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
 44006e8:	00c00a84 	movi	r3,42
 44006ec:	00824074 	movhi	r2,2305
 44006f0:	10a4a404 	addi	r2,r2,-28016
 44006f4:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
 44006f8:	e0bffe0b 	ldhu	r2,-8(fp)
 44006fc:	1004d23a 	srli	r2,r2,8
 4400700:	10ffffcc 	andi	r3,r2,65535
 4400704:	00824074 	movhi	r2,2305
 4400708:	10a4a504 	addi	r2,r2,-28012
 440070c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 4400710:	e0bffe0b 	ldhu	r2,-8(fp)
 4400714:	10c03fcc 	andi	r3,r2,255
 4400718:	00824074 	movhi	r2,2305
 440071c:	10a4a504 	addi	r2,r2,-28012
 4400720:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 4400724:	00c00ac4 	movi	r3,43
 4400728:	00824074 	movhi	r2,2305
 440072c:	10a4a404 	addi	r2,r2,-28016
 4400730:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
 4400734:	e0bfff0b 	ldhu	r2,-4(fp)
 4400738:	1004d23a 	srli	r2,r2,8
 440073c:	10ffffcc 	andi	r3,r2,65535
 4400740:	00824074 	movhi	r2,2305
 4400744:	10a4a504 	addi	r2,r2,-28012
 4400748:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 440074c:	e0bfff0b 	ldhu	r2,-4(fp)
 4400750:	10c03fcc 	andi	r3,r2,255
 4400754:	00824074 	movhi	r2,2305
 4400758:	10a4a504 	addi	r2,r2,-28012
 440075c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 4400760:	00c00b04 	movi	r3,44
 4400764:	00824074 	movhi	r2,2305
 4400768:	10a4a404 	addi	r2,r2,-28016
 440076c:	10c00035 	stwio	r3,0(r2)
}
 4400770:	0001883a 	nop
 4400774:	e037883a 	mov	sp,fp
 4400778:	df000017 	ldw	fp,0(sp)
 440077c:	dec00104 	addi	sp,sp,4
 4400780:	f800283a 	ret

04400784 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 4400784:	defffc04 	addi	sp,sp,-16
 4400788:	dfc00315 	stw	ra,12(sp)
 440078c:	df000215 	stw	fp,8(sp)
 4400790:	df000204 	addi	fp,sp,8
 4400794:	2005883a 	mov	r2,r4
 4400798:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 440079c:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 44007a0:	000b883a 	mov	r5,zero
 44007a4:	0009883a 	mov	r4,zero
 44007a8:	44006cc0 	call	44006cc <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 44007ac:	00c00b04 	movi	r3,44
 44007b0:	00824074 	movhi	r2,2305
 44007b4:	10a4a404 	addi	r2,r2,-28016
 44007b8:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 44007bc:	e03ffe15 	stw	zero,-8(fp)
 44007c0:	00000706 	br	44007e0 <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
 44007c4:	e0ffff0b 	ldhu	r3,-4(fp)
 44007c8:	00824074 	movhi	r2,2305
 44007cc:	10a4a504 	addi	r2,r2,-28012
 44007d0:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 44007d4:	e0bffe17 	ldw	r2,-8(fp)
 44007d8:	10800044 	addi	r2,r2,1
 44007dc:	e0bffe15 	stw	r2,-8(fp)
 44007e0:	e0fffe17 	ldw	r3,-8(fp)
 44007e4:	00800074 	movhi	r2,1
 44007e8:	108affc4 	addi	r2,r2,11263
 44007ec:	10fff52e 	bgeu	r2,r3,44007c4 <__reset+0xfb3fc7c4>
        {
        	LCD_WR_DATA(Color);
        }
}
 44007f0:	0001883a 	nop
 44007f4:	e037883a 	mov	sp,fp
 44007f8:	dfc00117 	ldw	ra,4(sp)
 44007fc:	df000017 	ldw	fp,0(sp)
 4400800:	dec00204 	addi	sp,sp,8
 4400804:	f800283a 	ret

04400808 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 4400808:	defffb04 	addi	sp,sp,-20
 440080c:	dfc00415 	stw	ra,16(sp)
 4400810:	df000315 	stw	fp,12(sp)
 4400814:	df000304 	addi	fp,sp,12
 4400818:	2807883a 	mov	r3,r5
 440081c:	3005883a 	mov	r2,r6
 4400820:	e13ffd0d 	sth	r4,-12(fp)
 4400824:	e0fffe0d 	sth	r3,-8(fp)
 4400828:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 440082c:	e0bffd0b 	ldhu	r2,-12(fp)
 4400830:	e0fffe0b 	ldhu	r3,-8(fp)
 4400834:	180b883a 	mov	r5,r3
 4400838:	1009883a 	mov	r4,r2
 440083c:	44006cc0 	call	44006cc <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 4400840:	00c00b04 	movi	r3,44
 4400844:	00824074 	movhi	r2,2305
 4400848:	10a4a404 	addi	r2,r2,-28016
 440084c:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
 4400850:	e0ffff0b 	ldhu	r3,-4(fp)
 4400854:	00824074 	movhi	r2,2305
 4400858:	10a4a504 	addi	r2,r2,-28012
 440085c:	10c00035 	stwio	r3,0(r2)
}
 4400860:	0001883a 	nop
 4400864:	e037883a 	mov	sp,fp
 4400868:	dfc00117 	ldw	ra,4(sp)
 440086c:	df000017 	ldw	fp,0(sp)
 4400870:	dec00204 	addi	sp,sp,8
 4400874:	f800283a 	ret

04400878 <LCD_Init>:
void LCD_Init()
{
 4400878:	defffe04 	addi	sp,sp,-8
 440087c:	dfc00115 	stw	ra,4(sp)
 4400880:	df000015 	stw	fp,0(sp)
 4400884:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 4400888:	00c00044 	movi	r3,1
 440088c:	00820034 	movhi	r2,2048
 4400890:	10802004 	addi	r2,r2,128
 4400894:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 4400898:	01000044 	movi	r4,1
 440089c:	440067c0 	call	440067c <Delay_Ms>
	Clr_LCD_RST;
 44008a0:	0007883a 	mov	r3,zero
 44008a4:	00820034 	movhi	r2,2048
 44008a8:	10802004 	addi	r2,r2,128
 44008ac:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 44008b0:	01000284 	movi	r4,10
 44008b4:	440067c0 	call	440067c <Delay_Ms>
	Set_LCD_RST;
 44008b8:	00c00044 	movi	r3,1
 44008bc:	00820034 	movhi	r2,2048
 44008c0:	10802004 	addi	r2,r2,128
 44008c4:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 44008c8:	01001e04 	movi	r4,120
 44008cc:	440067c0 	call	440067c <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 44008d0:	00c00444 	movi	r3,17
 44008d4:	00824074 	movhi	r2,2305
 44008d8:	10a4a404 	addi	r2,r2,-28016
 44008dc:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
 44008e0:	00c033c4 	movi	r3,207
 44008e4:	00824074 	movhi	r2,2305
 44008e8:	10a4a404 	addi	r2,r2,-28016
 44008ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 44008f0:	0007883a 	mov	r3,zero
 44008f4:	00824074 	movhi	r2,2305
 44008f8:	10a4a504 	addi	r2,r2,-28012
 44008fc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
 4400900:	00c02044 	movi	r3,129
 4400904:	00824074 	movhi	r2,2305
 4400908:	10a4a504 	addi	r2,r2,-28012
 440090c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
 4400910:	00c03004 	movi	r3,192
 4400914:	00824074 	movhi	r2,2305
 4400918:	10a4a504 	addi	r2,r2,-28012
 440091c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
 4400920:	00c03b44 	movi	r3,237
 4400924:	00824074 	movhi	r2,2305
 4400928:	10a4a404 	addi	r2,r2,-28016
 440092c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
 4400930:	00c01904 	movi	r3,100
 4400934:	00824074 	movhi	r2,2305
 4400938:	10a4a504 	addi	r2,r2,-28012
 440093c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
 4400940:	00c000c4 	movi	r3,3
 4400944:	00824074 	movhi	r2,2305
 4400948:	10a4a504 	addi	r2,r2,-28012
 440094c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
 4400950:	00c00484 	movi	r3,18
 4400954:	00824074 	movhi	r2,2305
 4400958:	10a4a504 	addi	r2,r2,-28012
 440095c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
 4400960:	00c02044 	movi	r3,129
 4400964:	00824074 	movhi	r2,2305
 4400968:	10a4a504 	addi	r2,r2,-28012
 440096c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
 4400970:	00c03a04 	movi	r3,232
 4400974:	00824074 	movhi	r2,2305
 4400978:	10a4a404 	addi	r2,r2,-28016
 440097c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
 4400980:	00c02144 	movi	r3,133
 4400984:	00824074 	movhi	r2,2305
 4400988:	10a4a504 	addi	r2,r2,-28012
 440098c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4400990:	00c00044 	movi	r3,1
 4400994:	00824074 	movhi	r2,2305
 4400998:	10a4a504 	addi	r2,r2,-28012
 440099c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
 44009a0:	00c1e604 	movi	r3,1944
 44009a4:	00824074 	movhi	r2,2305
 44009a8:	10a4a504 	addi	r2,r2,-28012
 44009ac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
 44009b0:	00c032c4 	movi	r3,203
 44009b4:	00824074 	movhi	r2,2305
 44009b8:	10a4a404 	addi	r2,r2,-28016
 44009bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
 44009c0:	00c00e44 	movi	r3,57
 44009c4:	00824074 	movhi	r2,2305
 44009c8:	10a4a504 	addi	r2,r2,-28012
 44009cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
 44009d0:	00c00b04 	movi	r3,44
 44009d4:	00824074 	movhi	r2,2305
 44009d8:	10a4a504 	addi	r2,r2,-28012
 44009dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 44009e0:	0007883a 	mov	r3,zero
 44009e4:	00824074 	movhi	r2,2305
 44009e8:	10a4a504 	addi	r2,r2,-28012
 44009ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 44009f0:	00c00d04 	movi	r3,52
 44009f4:	00824074 	movhi	r2,2305
 44009f8:	10a4a504 	addi	r2,r2,-28012
 44009fc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
 4400a00:	00c00084 	movi	r3,2
 4400a04:	00824074 	movhi	r2,2305
 4400a08:	10a4a504 	addi	r2,r2,-28012
 4400a0c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
 4400a10:	00c03dc4 	movi	r3,247
 4400a14:	00824074 	movhi	r2,2305
 4400a18:	10a4a404 	addi	r2,r2,-28016
 4400a1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 4400a20:	00c00804 	movi	r3,32
 4400a24:	00824074 	movhi	r2,2305
 4400a28:	10a4a504 	addi	r2,r2,-28012
 4400a2c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
 4400a30:	00c03a84 	movi	r3,234
 4400a34:	00824074 	movhi	r2,2305
 4400a38:	10a4a404 	addi	r2,r2,-28016
 4400a3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400a40:	0007883a 	mov	r3,zero
 4400a44:	00824074 	movhi	r2,2305
 4400a48:	10a4a504 	addi	r2,r2,-28012
 4400a4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400a50:	0007883a 	mov	r3,zero
 4400a54:	00824074 	movhi	r2,2305
 4400a58:	10a4a504 	addi	r2,r2,-28012
 4400a5c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
 4400a60:	00c02c44 	movi	r3,177
 4400a64:	00824074 	movhi	r2,2305
 4400a68:	10a4a404 	addi	r2,r2,-28016
 4400a6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400a70:	0007883a 	mov	r3,zero
 4400a74:	00824074 	movhi	r2,2305
 4400a78:	10a4a504 	addi	r2,r2,-28012
 4400a7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
 4400a80:	00c006c4 	movi	r3,27
 4400a84:	00824074 	movhi	r2,2305
 4400a88:	10a4a504 	addi	r2,r2,-28012
 4400a8c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
 4400a90:	00c02d84 	movi	r3,182
 4400a94:	00824074 	movhi	r2,2305
 4400a98:	10a4a404 	addi	r2,r2,-28016
 4400a9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
 4400aa0:	00c00284 	movi	r3,10
 4400aa4:	00824074 	movhi	r2,2305
 4400aa8:	10a4a504 	addi	r2,r2,-28012
 4400aac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
 4400ab0:	00c02884 	movi	r3,162
 4400ab4:	00824074 	movhi	r2,2305
 4400ab8:	10a4a504 	addi	r2,r2,-28012
 4400abc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
 4400ac0:	00c03004 	movi	r3,192
 4400ac4:	00824074 	movhi	r2,2305
 4400ac8:	10a4a404 	addi	r2,r2,-28016
 4400acc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 4400ad0:	00c00144 	movi	r3,5
 4400ad4:	00824074 	movhi	r2,2305
 4400ad8:	10a4a504 	addi	r2,r2,-28012
 4400adc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
 4400ae0:	00c03044 	movi	r3,193
 4400ae4:	00824074 	movhi	r2,2305
 4400ae8:	10a4a404 	addi	r2,r2,-28016
 4400aec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 4400af0:	00c00444 	movi	r3,17
 4400af4:	00824074 	movhi	r2,2305
 4400af8:	10a4a504 	addi	r2,r2,-28012
 4400afc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
 4400b00:	00c03144 	movi	r3,197
 4400b04:	00824074 	movhi	r2,2305
 4400b08:	10a4a404 	addi	r2,r2,-28016
 4400b0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
 4400b10:	00c01144 	movi	r3,69
 4400b14:	00824074 	movhi	r2,2305
 4400b18:	10a4a504 	addi	r2,r2,-28012
 4400b1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
 4400b20:	00c01144 	movi	r3,69
 4400b24:	00824074 	movhi	r2,2305
 4400b28:	10a4a504 	addi	r2,r2,-28012
 4400b2c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
 4400b30:	00c031c4 	movi	r3,199
 4400b34:	00824074 	movhi	r2,2305
 4400b38:	10a4a404 	addi	r2,r2,-28016
 4400b3c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
 4400b40:	00c02884 	movi	r3,162
 4400b44:	00824074 	movhi	r2,2305
 4400b48:	10a4a504 	addi	r2,r2,-28012
 4400b4c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
 4400b50:	00c00d84 	movi	r3,54
 4400b54:	00824074 	movhi	r2,2305
 4400b58:	10a4a404 	addi	r2,r2,-28016
 4400b5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
 4400b60:	00c00204 	movi	r3,8
 4400b64:	00824074 	movhi	r2,2305
 4400b68:	10a4a504 	addi	r2,r2,-28012
 4400b6c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 4400b70:	00c03c84 	movi	r3,242
 4400b74:	00824074 	movhi	r2,2305
 4400b78:	10a4a404 	addi	r2,r2,-28016
 4400b7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400b80:	0007883a 	mov	r3,zero
 4400b84:	00824074 	movhi	r2,2305
 4400b88:	10a4a504 	addi	r2,r2,-28012
 4400b8c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 4400b90:	00c00984 	movi	r3,38
 4400b94:	00824074 	movhi	r2,2305
 4400b98:	10a4a404 	addi	r2,r2,-28016
 4400b9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4400ba0:	00c00044 	movi	r3,1
 4400ba4:	00824074 	movhi	r2,2305
 4400ba8:	10a4a504 	addi	r2,r2,-28012
 4400bac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
 4400bb0:	00c03804 	movi	r3,224
 4400bb4:	00824074 	movhi	r2,2305
 4400bb8:	10a4a404 	addi	r2,r2,-28016
 4400bbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
 4400bc0:	00c003c4 	movi	r3,15
 4400bc4:	00824074 	movhi	r2,2305
 4400bc8:	10a4a504 	addi	r2,r2,-28012
 4400bcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
 4400bd0:	00c00984 	movi	r3,38
 4400bd4:	00824074 	movhi	r2,2305
 4400bd8:	10a4a504 	addi	r2,r2,-28012
 4400bdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
 4400be0:	00c00904 	movi	r3,36
 4400be4:	00824074 	movhi	r2,2305
 4400be8:	10a4a504 	addi	r2,r2,-28012
 4400bec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 4400bf0:	00c002c4 	movi	r3,11
 4400bf4:	00824074 	movhi	r2,2305
 4400bf8:	10a4a504 	addi	r2,r2,-28012
 4400bfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
 4400c00:	00c00384 	movi	r3,14
 4400c04:	00824074 	movhi	r2,2305
 4400c08:	10a4a504 	addi	r2,r2,-28012
 4400c0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 4400c10:	00c00204 	movi	r3,8
 4400c14:	00824074 	movhi	r2,2305
 4400c18:	10a4a504 	addi	r2,r2,-28012
 4400c1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
 4400c20:	00c012c4 	movi	r3,75
 4400c24:	00824074 	movhi	r2,2305
 4400c28:	10a4a504 	addi	r2,r2,-28012
 4400c2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
 4400c30:	00c02a04 	movi	r3,168
 4400c34:	00824074 	movhi	r2,2305
 4400c38:	10a4a504 	addi	r2,r2,-28012
 4400c3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
 4400c40:	00c00ec4 	movi	r3,59
 4400c44:	00824074 	movhi	r2,2305
 4400c48:	10a4a504 	addi	r2,r2,-28012
 4400c4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
 4400c50:	00c00284 	movi	r3,10
 4400c54:	00824074 	movhi	r2,2305
 4400c58:	10a4a504 	addi	r2,r2,-28012
 4400c5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
 4400c60:	00c00504 	movi	r3,20
 4400c64:	00824074 	movhi	r2,2305
 4400c68:	10a4a504 	addi	r2,r2,-28012
 4400c6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
 4400c70:	00c00184 	movi	r3,6
 4400c74:	00824074 	movhi	r2,2305
 4400c78:	10a4a504 	addi	r2,r2,-28012
 4400c7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 4400c80:	00c00404 	movi	r3,16
 4400c84:	00824074 	movhi	r2,2305
 4400c88:	10a4a504 	addi	r2,r2,-28012
 4400c8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 4400c90:	00c00244 	movi	r3,9
 4400c94:	00824074 	movhi	r2,2305
 4400c98:	10a4a504 	addi	r2,r2,-28012
 4400c9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400ca0:	0007883a 	mov	r3,zero
 4400ca4:	00824074 	movhi	r2,2305
 4400ca8:	10a4a504 	addi	r2,r2,-28012
 4400cac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 4400cb0:	00c03844 	movi	r3,225
 4400cb4:	00824074 	movhi	r2,2305
 4400cb8:	10a4a404 	addi	r2,r2,-28016
 4400cbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400cc0:	0007883a 	mov	r3,zero
 4400cc4:	00824074 	movhi	r2,2305
 4400cc8:	10a4a504 	addi	r2,r2,-28012
 4400ccc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
 4400cd0:	00c00704 	movi	r3,28
 4400cd4:	00824074 	movhi	r2,2305
 4400cd8:	10a4a504 	addi	r2,r2,-28012
 4400cdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 4400ce0:	00c00804 	movi	r3,32
 4400ce4:	00824074 	movhi	r2,2305
 4400ce8:	10a4a504 	addi	r2,r2,-28012
 4400cec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
 4400cf0:	00c00104 	movi	r3,4
 4400cf4:	00824074 	movhi	r2,2305
 4400cf8:	10a4a504 	addi	r2,r2,-28012
 4400cfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 4400d00:	00c00404 	movi	r3,16
 4400d04:	00824074 	movhi	r2,2305
 4400d08:	10a4a504 	addi	r2,r2,-28012
 4400d0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 4400d10:	00c00204 	movi	r3,8
 4400d14:	00824074 	movhi	r2,2305
 4400d18:	10a4a504 	addi	r2,r2,-28012
 4400d1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 4400d20:	00c00d04 	movi	r3,52
 4400d24:	00824074 	movhi	r2,2305
 4400d28:	10a4a504 	addi	r2,r2,-28012
 4400d2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
 4400d30:	00c011c4 	movi	r3,71
 4400d34:	00824074 	movhi	r2,2305
 4400d38:	10a4a504 	addi	r2,r2,-28012
 4400d3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
 4400d40:	00c01104 	movi	r3,68
 4400d44:	00824074 	movhi	r2,2305
 4400d48:	10a4a504 	addi	r2,r2,-28012
 4400d4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
 4400d50:	00c00144 	movi	r3,5
 4400d54:	00824074 	movhi	r2,2305
 4400d58:	10a4a504 	addi	r2,r2,-28012
 4400d5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 4400d60:	00c002c4 	movi	r3,11
 4400d64:	00824074 	movhi	r2,2305
 4400d68:	10a4a504 	addi	r2,r2,-28012
 4400d6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 4400d70:	00c00244 	movi	r3,9
 4400d74:	00824074 	movhi	r2,2305
 4400d78:	10a4a504 	addi	r2,r2,-28012
 4400d7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
 4400d80:	00c00bc4 	movi	r3,47
 4400d84:	00824074 	movhi	r2,2305
 4400d88:	10a4a504 	addi	r2,r2,-28012
 4400d8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
 4400d90:	00c00d84 	movi	r3,54
 4400d94:	00824074 	movhi	r2,2305
 4400d98:	10a4a504 	addi	r2,r2,-28012
 4400d9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
 4400da0:	00c003c4 	movi	r3,15
 4400da4:	00824074 	movhi	r2,2305
 4400da8:	10a4a504 	addi	r2,r2,-28012
 4400dac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
 4400db0:	00c00a84 	movi	r3,42
 4400db4:	00824074 	movhi	r2,2305
 4400db8:	10a4a404 	addi	r2,r2,-28016
 4400dbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400dc0:	0007883a 	mov	r3,zero
 4400dc4:	00824074 	movhi	r2,2305
 4400dc8:	10a4a504 	addi	r2,r2,-28012
 4400dcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400dd0:	0007883a 	mov	r3,zero
 4400dd4:	00824074 	movhi	r2,2305
 4400dd8:	10a4a504 	addi	r2,r2,-28012
 4400ddc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400de0:	0007883a 	mov	r3,zero
 4400de4:	00824074 	movhi	r2,2305
 4400de8:	10a4a504 	addi	r2,r2,-28012
 4400dec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
 4400df0:	00c03bc4 	movi	r3,239
 4400df4:	00824074 	movhi	r2,2305
 4400df8:	10a4a504 	addi	r2,r2,-28012
 4400dfc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
 4400e00:	00c00ac4 	movi	r3,43
 4400e04:	00824074 	movhi	r2,2305
 4400e08:	10a4a404 	addi	r2,r2,-28016
 4400e0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400e10:	0007883a 	mov	r3,zero
 4400e14:	00824074 	movhi	r2,2305
 4400e18:	10a4a504 	addi	r2,r2,-28012
 4400e1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400e20:	0007883a 	mov	r3,zero
 4400e24:	00824074 	movhi	r2,2305
 4400e28:	10a4a504 	addi	r2,r2,-28012
 4400e2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4400e30:	00c00044 	movi	r3,1
 4400e34:	00824074 	movhi	r2,2305
 4400e38:	10a4a504 	addi	r2,r2,-28012
 4400e3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
 4400e40:	00c00fc4 	movi	r3,63
 4400e44:	00824074 	movhi	r2,2305
 4400e48:	10a4a504 	addi	r2,r2,-28012
 4400e4c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
 4400e50:	00c00e84 	movi	r3,58
 4400e54:	00824074 	movhi	r2,2305
 4400e58:	10a4a404 	addi	r2,r2,-28016
 4400e5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
 4400e60:	00c01544 	movi	r3,85
 4400e64:	00824074 	movhi	r2,2305
 4400e68:	10a4a504 	addi	r2,r2,-28012
 4400e6c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
 4400e70:	00c03d84 	movi	r3,246
 4400e74:	00824074 	movhi	r2,2305
 4400e78:	10a4a404 	addi	r2,r2,-28016
 4400e7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4400e80:	00c00044 	movi	r3,1
 4400e84:	00824074 	movhi	r2,2305
 4400e88:	10a4a504 	addi	r2,r2,-28012
 4400e8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
 4400e90:	00c00c04 	movi	r3,48
 4400e94:	00824074 	movhi	r2,2305
 4400e98:	10a4a504 	addi	r2,r2,-28012
 4400e9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4400ea0:	0007883a 	mov	r3,zero
 4400ea4:	00824074 	movhi	r2,2305
 4400ea8:	10a4a504 	addi	r2,r2,-28012
 4400eac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
 4400eb0:	00c00a44 	movi	r3,41
 4400eb4:	00824074 	movhi	r2,2305
 4400eb8:	10a4a404 	addi	r2,r2,-28016
 4400ebc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
 4400ec0:	00c00b04 	movi	r3,44
 4400ec4:	00824074 	movhi	r2,2305
 4400ec8:	10a4a404 	addi	r2,r2,-28016
 4400ecc:	10c00035 	stwio	r3,0(r2)

}
 4400ed0:	0001883a 	nop
 4400ed4:	e037883a 	mov	sp,fp
 4400ed8:	dfc00117 	ldw	ra,4(sp)
 4400edc:	df000017 	ldw	fp,0(sp)
 4400ee0:	dec00204 	addi	sp,sp,8
 4400ee4:	f800283a 	ret

04400ee8 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 4400ee8:	defffc04 	addi	sp,sp,-16
 4400eec:	dfc00315 	stw	ra,12(sp)
 4400ef0:	df000215 	stw	fp,8(sp)
 4400ef4:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 4400ef8:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
 4400efc:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 4400f00:	000b883a 	mov	r5,zero
 4400f04:	0009883a 	mov	r4,zero
 4400f08:	44006cc0 	call	44006cc <LCD_SetCursor>
        data=0x0000;
 4400f0c:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
 4400f10:	e03ffe15 	stw	zero,-8(fp)
 4400f14:	00000706 	br	4400f34 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
 4400f18:	e0ffff0b 	ldhu	r3,-4(fp)
 4400f1c:	00824074 	movhi	r2,2305
 4400f20:	10a4a504 	addi	r2,r2,-28012
 4400f24:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 4400f28:	e0bffe17 	ldw	r2,-8(fp)
 4400f2c:	10800044 	addi	r2,r2,1
 4400f30:	e0bffe15 	stw	r2,-8(fp)
 4400f34:	e0bffe17 	ldw	r2,-8(fp)
 4400f38:	1092c030 	cmpltui	r2,r2,19200
 4400f3c:	103ff61e 	bne	r2,zero,4400f18 <__reset+0xfb3fcf18>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 4400f40:	01401404 	movi	r5,80
 4400f44:	0009883a 	mov	r4,zero
 4400f48:	44006cc0 	call	44006cc <LCD_SetCursor>
        data=RED;
 4400f4c:	00be0004 	movi	r2,-2048
 4400f50:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4400f54:	e03ffe15 	stw	zero,-8(fp)
 4400f58:	00000706 	br	4400f78 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
 4400f5c:	e0ffff0b 	ldhu	r3,-4(fp)
 4400f60:	00824074 	movhi	r2,2305
 4400f64:	10a4a504 	addi	r2,r2,-28012
 4400f68:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 4400f6c:	e0bffe17 	ldw	r2,-8(fp)
 4400f70:	10800044 	addi	r2,r2,1
 4400f74:	e0bffe15 	stw	r2,-8(fp)
 4400f78:	e0bffe17 	ldw	r2,-8(fp)
 4400f7c:	1092c030 	cmpltui	r2,r2,19200
 4400f80:	103ff61e 	bne	r2,zero,4400f5c <__reset+0xfb3fcf5c>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 4400f84:	01402804 	movi	r5,160
 4400f88:	0009883a 	mov	r4,zero
 4400f8c:	44006cc0 	call	44006cc <LCD_SetCursor>
		data=GREEN;
 4400f90:	0081f804 	movi	r2,2016
 4400f94:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4400f98:	e03ffe15 	stw	zero,-8(fp)
 4400f9c:	00000706 	br	4400fbc <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
 4400fa0:	e0ffff0b 	ldhu	r3,-4(fp)
 4400fa4:	00824074 	movhi	r2,2305
 4400fa8:	10a4a504 	addi	r2,r2,-28012
 4400fac:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 4400fb0:	e0bffe17 	ldw	r2,-8(fp)
 4400fb4:	10800044 	addi	r2,r2,1
 4400fb8:	e0bffe15 	stw	r2,-8(fp)
 4400fbc:	e0bffe17 	ldw	r2,-8(fp)
 4400fc0:	1092c030 	cmpltui	r2,r2,19200
 4400fc4:	103ff61e 	bne	r2,zero,4400fa0 <__reset+0xfb3fcfa0>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 4400fc8:	01403c04 	movi	r5,240
 4400fcc:	0009883a 	mov	r4,zero
 4400fd0:	44006cc0 	call	44006cc <LCD_SetCursor>
		data=BLUE;
 4400fd4:	008007c4 	movi	r2,31
 4400fd8:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4400fdc:	e03ffe15 	stw	zero,-8(fp)
 4400fe0:	00000706 	br	4401000 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
 4400fe4:	e0ffff0b 	ldhu	r3,-4(fp)
 4400fe8:	00824074 	movhi	r2,2305
 4400fec:	10a4a504 	addi	r2,r2,-28012
 4400ff0:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 4400ff4:	e0bffe17 	ldw	r2,-8(fp)
 4400ff8:	10800044 	addi	r2,r2,1
 4400ffc:	e0bffe15 	stw	r2,-8(fp)
 4401000:	e0bffe17 	ldw	r2,-8(fp)
 4401004:	1092c030 	cmpltui	r2,r2,19200
 4401008:	103ff61e 	bne	r2,zero,4400fe4 <__reset+0xfb3fcfe4>
		{
			LCD_WR_DATA(data);
		}
}
 440100c:	0001883a 	nop
 4401010:	e037883a 	mov	sp,fp
 4401014:	dfc00117 	ldw	ra,4(sp)
 4401018:	df000017 	ldw	fp,0(sp)
 440101c:	dec00204 	addi	sp,sp,8
 4401020:	f800283a 	ret

04401024 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 4401024:	defff804 	addi	sp,sp,-32
 4401028:	dfc00715 	stw	ra,28(sp)
 440102c:	df000615 	stw	fp,24(sp)
 4401030:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 4401034:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 4401038:	00bfffc4 	movi	r2,-1
 440103c:	e0bffd8d 	sth	r2,-10(fp)
 4401040:	008007c4 	movi	r2,31
 4401044:	e0bffe0d 	sth	r2,-8(fp)
 4401048:	0081f804 	movi	r2,2016
 440104c:	e0bffe8d 	sth	r2,-6(fp)
 4401050:	00be0004 	movi	r2,-2048
 4401054:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 4401058:	000b883a 	mov	r5,zero
 440105c:	0009883a 	mov	r4,zero
 4401060:	44006cc0 	call	44006cc <LCD_SetCursor>
        for(m=0;m<320;m++)
 4401064:	e03ffc15 	stw	zero,-16(fp)
 4401068:	00001e06 	br	44010e4 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
 440106c:	e03ffa15 	stw	zero,-24(fp)
 4401070:	00001606 	br	44010cc <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
 4401074:	e0bffa17 	ldw	r2,-24(fp)
 4401078:	1085883a 	add	r2,r2,r2
 440107c:	e0fffa04 	addi	r3,fp,-24
 4401080:	1885883a 	add	r2,r3,r2
 4401084:	10800384 	addi	r2,r2,14
 4401088:	1080000b 	ldhu	r2,0(r2)
 440108c:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
 4401090:	e03ffb15 	stw	zero,-20(fp)
 4401094:	00000706 	br	44010b4 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
 4401098:	e0fffd0b 	ldhu	r3,-12(fp)
 440109c:	00824074 	movhi	r2,2305
 44010a0:	10a4a504 	addi	r2,r2,-28012
 44010a4:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 44010a8:	e0bffb17 	ldw	r2,-20(fp)
 44010ac:	10800044 	addi	r2,r2,1
 44010b0:	e0bffb15 	stw	r2,-20(fp)
 44010b4:	e0bffb17 	ldw	r2,-20(fp)
 44010b8:	10800f10 	cmplti	r2,r2,60
 44010bc:	103ff61e 	bne	r2,zero,4401098 <__reset+0xfb3fd098>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 44010c0:	e0bffa17 	ldw	r2,-24(fp)
 44010c4:	10800044 	addi	r2,r2,1
 44010c8:	e0bffa15 	stw	r2,-24(fp)
 44010cc:	e0bffa17 	ldw	r2,-24(fp)
 44010d0:	10800110 	cmplti	r2,r2,4
 44010d4:	103fe71e 	bne	r2,zero,4401074 <__reset+0xfb3fd074>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 44010d8:	e0bffc17 	ldw	r2,-16(fp)
 44010dc:	10800044 	addi	r2,r2,1
 44010e0:	e0bffc15 	stw	r2,-16(fp)
 44010e4:	e0bffc17 	ldw	r2,-16(fp)
 44010e8:	10805010 	cmplti	r2,r2,320
 44010ec:	103fdf1e 	bne	r2,zero,440106c <__reset+0xfb3fd06c>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 44010f0:	0001883a 	nop
 44010f4:	e037883a 	mov	sp,fp
 44010f8:	dfc00117 	ldw	ra,4(sp)
 44010fc:	df000017 	ldw	fp,0(sp)
 4401100:	dec00204 	addi	sp,sp,8
 4401104:	f800283a 	ret

04401108 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4401108:	defffa04 	addi	sp,sp,-24
 440110c:	dfc00515 	stw	ra,20(sp)
 4401110:	df000415 	stw	fp,16(sp)
 4401114:	df000404 	addi	fp,sp,16
 4401118:	e13ffe15 	stw	r4,-8(fp)
 440111c:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4401120:	e0bffe17 	ldw	r2,-8(fp)
 4401124:	10c00117 	ldw	r3,4(r2)
 4401128:	e0bffe17 	ldw	r2,-8(fp)
 440112c:	11000217 	ldw	r4,8(r2)
 4401130:	e0bffe17 	ldw	r2,-8(fp)
 4401134:	d8800115 	stw	r2,4(sp)
 4401138:	e0bfff17 	ldw	r2,-4(fp)
 440113c:	d8800015 	stw	r2,0(sp)
 4401140:	200f883a 	mov	r7,r4
 4401144:	180d883a 	mov	r6,r3
 4401148:	000b883a 	mov	r5,zero
 440114c:	0009883a 	mov	r4,zero
 4401150:	4401c980 	call	4401c98 <vid_paint_block>
}
 4401154:	0001883a 	nop
 4401158:	e037883a 	mov	sp,fp
 440115c:	dfc00117 	ldw	ra,4(sp)
 4401160:	df000017 	ldw	fp,0(sp)
 4401164:	dec00204 	addi	sp,sp,8
 4401168:	f800283a 	ret

0440116c <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 440116c:	defff704 	addi	sp,sp,-36
 4401170:	dfc00815 	stw	ra,32(sp)
 4401174:	df000715 	stw	fp,28(sp)
 4401178:	df000704 	addi	fp,sp,28
 440117c:	e13ffc15 	stw	r4,-16(fp)
 4401180:	e17ffd15 	stw	r5,-12(fp)
 4401184:	e1bffe15 	stw	r6,-8(fp)
 4401188:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 440118c:	e0fffd17 	ldw	r3,-12(fp)
 4401190:	e0bfff17 	ldw	r2,-4(fp)
 4401194:	1880121e 	bne	r3,r2,44011e0 <vid_draw_line+0x74>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4401198:	e0bffc17 	ldw	r2,-16(fp)
 440119c:	10ffffcc 	andi	r3,r2,65535
 44011a0:	18e0001c 	xori	r3,r3,32768
 44011a4:	18e00004 	addi	r3,r3,-32768
 44011a8:	e0bffe17 	ldw	r2,-8(fp)
 44011ac:	113fffcc 	andi	r4,r2,65535
 44011b0:	2120001c 	xori	r4,r4,32768
 44011b4:	21200004 	addi	r4,r4,-32768
 44011b8:	e0bffd17 	ldw	r2,-12(fp)
 44011bc:	117fffcc 	andi	r5,r2,65535
 44011c0:	e0800417 	ldw	r2,16(fp)
 44011c4:	d8800015 	stw	r2,0(sp)
 44011c8:	e1c00317 	ldw	r7,12(fp)
 44011cc:	280d883a 	mov	r6,r5
 44011d0:	200b883a 	mov	r5,r4
 44011d4:	1809883a 	mov	r4,r3
 44011d8:	4401d300 	call	4401d30 <vid_draw_horiz_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 44011dc:	00001006 	br	4401220 <vid_draw_line+0xb4>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 44011e0:	e0bffc17 	ldw	r2,-16(fp)
 44011e4:	113fffcc 	andi	r4,r2,65535
 44011e8:	e0bffd17 	ldw	r2,-12(fp)
 44011ec:	117fffcc 	andi	r5,r2,65535
 44011f0:	e0bffe17 	ldw	r2,-8(fp)
 44011f4:	11bfffcc 	andi	r6,r2,65535
 44011f8:	e0bfff17 	ldw	r2,-4(fp)
 44011fc:	11ffffcc 	andi	r7,r2,65535
 4401200:	e0800217 	ldw	r2,8(fp)
 4401204:	10bfffcc 	andi	r2,r2,65535
 4401208:	e0c00417 	ldw	r3,16(fp)
 440120c:	d8c00215 	stw	r3,8(sp)
 4401210:	e0c00317 	ldw	r3,12(fp)
 4401214:	d8c00115 	stw	r3,4(sp)
 4401218:	d8800015 	stw	r2,0(sp)
 440121c:	4401f480 	call	4401f48 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4401220:	0001883a 	nop
 4401224:	e037883a 	mov	sp,fp
 4401228:	dfc00117 	ldw	ra,4(sp)
 440122c:	df000017 	ldw	fp,0(sp)
 4401230:	dec00204 	addi	sp,sp,8
 4401234:	f800283a 	ret

04401238 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 4401238:	defffd04 	addi	sp,sp,-12
 440123c:	dfc00215 	stw	ra,8(sp)
 4401240:	df000115 	stw	fp,4(sp)
 4401244:	df000104 	addi	fp,sp,4
 4401248:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 440124c:	e0bfff17 	ldw	r2,-4(fp)
 4401250:	10800517 	ldw	r2,20(r2)
 4401254:	1009883a 	mov	r4,r2
 4401258:	440a3dc0 	call	440a3dc <free>
  free(scroll);
 440125c:	e13fff17 	ldw	r4,-4(fp)
 4401260:	440a3dc0 	call	440a3dc <free>
}
 4401264:	0001883a 	nop
 4401268:	e037883a 	mov	sp,fp
 440126c:	dfc00117 	ldw	ra,4(sp)
 4401270:	df000017 	ldw	fp,0(sp)
 4401274:	dec00204 	addi	sp,sp,8
 4401278:	f800283a 	ret

0440127c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 440127c:	defff904 	addi	sp,sp,-28
 4401280:	dfc00615 	stw	ra,24(sp)
 4401284:	df000515 	stw	fp,20(sp)
 4401288:	df000504 	addi	fp,sp,20
 440128c:	e13ffc15 	stw	r4,-16(fp)
 4401290:	e17ffd15 	stw	r5,-12(fp)
 4401294:	e1bffe15 	stw	r6,-8(fp)
 4401298:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 440129c:	01000f04 	movi	r4,60
 44012a0:	440a3c80 	call	440a3c8 <malloc>
 44012a4:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 44012a8:	e0bffb17 	ldw	r2,-20(fp)
 44012ac:	e0fffc17 	ldw	r3,-16(fp)
 44012b0:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 44012b4:	e0bffb17 	ldw	r2,-20(fp)
 44012b8:	e0fffd17 	ldw	r3,-12(fp)
 44012bc:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 44012c0:	e0bffb17 	ldw	r2,-20(fp)
 44012c4:	e0fffe17 	ldw	r3,-8(fp)
 44012c8:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 44012cc:	e0bffb17 	ldw	r2,-20(fp)
 44012d0:	e0ffff17 	ldw	r3,-4(fp)
 44012d4:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 44012d8:	e0bffb17 	ldw	r2,-20(fp)
 44012dc:	e0c00217 	ldw	r3,8(fp)
 44012e0:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 44012e4:	e1000517 	ldw	r4,20(fp)
 44012e8:	440b1540 	call	440b154 <strlen>
 44012ec:	10800084 	addi	r2,r2,2
 44012f0:	1009883a 	mov	r4,r2
 44012f4:	440a3c80 	call	440a3c8 <malloc>
 44012f8:	1007883a 	mov	r3,r2
 44012fc:	e0bffb17 	ldw	r2,-20(fp)
 4401300:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4401304:	e0bffb17 	ldw	r2,-20(fp)
 4401308:	10800517 	ldw	r2,20(r2)
 440130c:	e1400517 	ldw	r5,20(fp)
 4401310:	1009883a 	mov	r4,r2
 4401314:	440b0c40 	call	440b0c4 <strcpy>
  scroll->font = font;
 4401318:	e0bffb17 	ldw	r2,-20(fp)
 440131c:	e0c00317 	ldw	r3,12(fp)
 4401320:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 4401324:	e0bffb17 	ldw	r2,-20(fp)
 4401328:	e0c00417 	ldw	r3,16(fp)
 440132c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4401330:	00811134 	movhi	r2,1092
 4401334:	10af1904 	addi	r2,r2,-17308
 4401338:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 440133c:	1007883a 	mov	r3,r2
 4401340:	e0bffb17 	ldw	r2,-20(fp)
 4401344:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 4401348:	e0bffb17 	ldw	r2,-20(fp)
 440134c:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 4401350:	e0bffb17 	ldw	r2,-20(fp)
 4401354:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 4401358:	e0bffb17 	ldw	r2,-20(fp)
 440135c:	10c00217 	ldw	r3,8(r2)
 4401360:	e0bffb17 	ldw	r2,-20(fp)
 4401364:	10800017 	ldw	r2,0(r2)
 4401368:	1887c83a 	sub	r3,r3,r2
 440136c:	e0bffb17 	ldw	r2,-20(fp)
 4401370:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 4401374:	e1000517 	ldw	r4,20(fp)
 4401378:	440b1540 	call	440b154 <strlen>
 440137c:	1007883a 	mov	r3,r2
 4401380:	e0bffb17 	ldw	r2,-20(fp)
 4401384:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 4401388:	e0bffb17 	ldw	r2,-20(fp)
 440138c:	10800c17 	ldw	r2,48(r2)
 4401390:	100690fa 	slli	r3,r2,3
 4401394:	e0bffb17 	ldw	r2,-20(fp)
 4401398:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 440139c:	e0bffb17 	ldw	r2,-20(fp)
 44013a0:	10c00b17 	ldw	r3,44(r2)
 44013a4:	e0bffb17 	ldw	r2,-20(fp)
 44013a8:	10800e17 	ldw	r2,56(r2)
 44013ac:	1887883a 	add	r3,r3,r2
 44013b0:	e0bffb17 	ldw	r2,-20(fp)
 44013b4:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 44013b8:	e0bffb17 	ldw	r2,-20(fp)
  
}
 44013bc:	e037883a 	mov	sp,fp
 44013c0:	dfc00117 	ldw	ra,4(sp)
 44013c4:	df000017 	ldw	fp,0(sp)
 44013c8:	dec00204 	addi	sp,sp,8
 44013cc:	f800283a 	ret

044013d0 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 44013d0:	deffec04 	addi	sp,sp,-80
 44013d4:	dfc01315 	stw	ra,76(sp)
 44013d8:	df001215 	stw	fp,72(sp)
 44013dc:	dc401115 	stw	r17,68(sp)
 44013e0:	dc001015 	stw	r16,64(sp)
 44013e4:	df001204 	addi	fp,sp,72
 44013e8:	e13ffc15 	stw	r4,-16(fp)
 44013ec:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 44013f0:	00800044 	movi	r2,1
 44013f4:	e0bff605 	stb	r2,-40(fp)
 44013f8:	00811134 	movhi	r2,1092
 44013fc:	10af1904 	addi	r2,r2,-17308
 4401400:	14000017 	ldw	r16,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4401404:	e0bffc17 	ldw	r2,-16(fp)
 4401408:	10800817 	ldw	r2,32(r2)
 440140c:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4401410:	00811134 	movhi	r2,1092
 4401414:	10af1804 	addi	r2,r2,-17312
 4401418:	10800017 	ldw	r2,0(r2)
 440141c:	e0fffc17 	ldw	r3,-16(fp)
 4401420:	18c00717 	ldw	r3,28(r3)
 4401424:	10c5383a 	mul	r2,r2,r3
 4401428:	0140fa04 	movi	r5,1000
 440142c:	1009883a 	mov	r4,r2
 4401430:	4407ea00 	call	4407ea0 <__udivsi3>
 4401434:	8885883a 	add	r2,r17,r2
 4401438:	8080bb36 	bltu	r16,r2,4401728 <vid_scroll_string+0x358>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 440143c:	00811134 	movhi	r2,1092
 4401440:	10af1904 	addi	r2,r2,-17308
 4401444:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 4401448:	1007883a 	mov	r3,r2
 440144c:	e0bffc17 	ldw	r2,-16(fp)
 4401450:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 4401454:	e0bffc17 	ldw	r2,-16(fp)
 4401458:	10800a03 	ldbu	r2,40(r2)
 440145c:	10803fcc 	andi	r2,r2,255
 4401460:	1080201c 	xori	r2,r2,128
 4401464:	10bfe004 	addi	r2,r2,-128
 4401468:	1000061e 	bne	r2,zero,4401484 <vid_scroll_string+0xb4>
      scroll->text_scroll_index = 0;
 440146c:	e0bffc17 	ldw	r2,-16(fp)
 4401470:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 4401474:	e0bffc17 	ldw	r2,-16(fp)
 4401478:	00c00044 	movi	r3,1
 440147c:	10c00a05 	stb	r3,40(r2)
 4401480:	00000e06 	br	44014bc <vid_scroll_string+0xec>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 4401484:	e0bffc17 	ldw	r2,-16(fp)
 4401488:	10c00917 	ldw	r3,36(r2)
 440148c:	e0bffc17 	ldw	r2,-16(fp)
 4401490:	10800d17 	ldw	r2,52(r2)
 4401494:	18800316 	blt	r3,r2,44014a4 <vid_scroll_string+0xd4>
      scroll->text_scroll_started = 0;
 4401498:	e0bffc17 	ldw	r2,-16(fp)
 440149c:	10000a05 	stb	zero,40(r2)
 44014a0:	00000606 	br	44014bc <vid_scroll_string+0xec>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 44014a4:	e0bffc17 	ldw	r2,-16(fp)
 44014a8:	10c00917 	ldw	r3,36(r2)
 44014ac:	e0bff607 	ldb	r2,-40(fp)
 44014b0:	1887883a 	add	r3,r3,r2
 44014b4:	e0bffc17 	ldw	r2,-16(fp)
 44014b8:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 44014bc:	e0bffc17 	ldw	r2,-16(fp)
 44014c0:	10c00917 	ldw	r3,36(r2)
 44014c4:	e0bffc17 	ldw	r2,-16(fp)
 44014c8:	10800b17 	ldw	r2,44(r2)
 44014cc:	18800a0e 	bge	r3,r2,44014f8 <vid_scroll_string+0x128>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 44014d0:	e0bffc17 	ldw	r2,-16(fp)
 44014d4:	10c00017 	ldw	r3,0(r2)
 44014d8:	e0bffc17 	ldw	r2,-16(fp)
 44014dc:	10800b17 	ldw	r2,44(r2)
 44014e0:	1887883a 	add	r3,r3,r2
 44014e4:	e0bffc17 	ldw	r2,-16(fp)
 44014e8:	10800917 	ldw	r2,36(r2)
 44014ec:	1885c83a 	sub	r2,r3,r2
 44014f0:	e0bff115 	stw	r2,-60(fp)
 44014f4:	00000306 	br	4401504 <vid_scroll_string+0x134>
    } else {
      x_start = scroll->hbegin;
 44014f8:	e0bffc17 	ldw	r2,-16(fp)
 44014fc:	10800017 	ldw	r2,0(r2)
 4401500:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4401504:	e0bffc17 	ldw	r2,-16(fp)
 4401508:	10800e17 	ldw	r2,56(r2)
 440150c:	e0fffc17 	ldw	r3,-16(fp)
 4401510:	18c00917 	ldw	r3,36(r3)
 4401514:	1880040e 	bge	r3,r2,4401528 <vid_scroll_string+0x158>
      x_end = scroll->hend;
 4401518:	e0bffc17 	ldw	r2,-16(fp)
 440151c:	10800217 	ldw	r2,8(r2)
 4401520:	e0bff215 	stw	r2,-56(fp)
 4401524:	00000906 	br	440154c <vid_scroll_string+0x17c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 4401528:	e0bffc17 	ldw	r2,-16(fp)
 440152c:	10c00217 	ldw	r3,8(r2)
 4401530:	e0bffc17 	ldw	r2,-16(fp)
 4401534:	10800917 	ldw	r2,36(r2)
 4401538:	1887c83a 	sub	r3,r3,r2
 440153c:	e0bffc17 	ldw	r2,-16(fp)
 4401540:	10800e17 	ldw	r2,56(r2)
 4401544:	1885883a 	add	r2,r3,r2
 4401548:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 440154c:	e0bff117 	ldw	r2,-60(fp)
 4401550:	e0bff315 	stw	r2,-52(fp)
 4401554:	00006006 	br	44016d8 <vid_scroll_string+0x308>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 4401558:	e0bffc17 	ldw	r2,-16(fp)
 440155c:	10c00917 	ldw	r3,36(r2)
 4401560:	e0bffc17 	ldw	r2,-16(fp)
 4401564:	10800b17 	ldw	r2,44(r2)
 4401568:	1880050e 	bge	r3,r2,4401580 <vid_scroll_string+0x1b0>
        string_x_index = (x_index - x_start);
 440156c:	e0fff317 	ldw	r3,-52(fp)
 4401570:	e0bff117 	ldw	r2,-60(fp)
 4401574:	1885c83a 	sub	r2,r3,r2
 4401578:	e0bff415 	stw	r2,-48(fp)
 440157c:	00000a06 	br	44015a8 <vid_scroll_string+0x1d8>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 4401580:	e0bffc17 	ldw	r2,-16(fp)
 4401584:	10c00917 	ldw	r3,36(r2)
 4401588:	e0bffc17 	ldw	r2,-16(fp)
 440158c:	10800b17 	ldw	r2,44(r2)
 4401590:	1887c83a 	sub	r3,r3,r2
 4401594:	e0bff317 	ldw	r2,-52(fp)
 4401598:	1887883a 	add	r3,r3,r2
 440159c:	e0bff117 	ldw	r2,-60(fp)
 44015a0:	1885c83a 	sub	r2,r3,r2
 44015a4:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 44015a8:	e0bff417 	ldw	r2,-48(fp)
 44015ac:	1000010e 	bge	r2,zero,44015b4 <vid_scroll_string+0x1e4>
 44015b0:	108001c4 	addi	r2,r2,7
 44015b4:	1005d0fa 	srai	r2,r2,3
 44015b8:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 44015bc:	e0bffc17 	ldw	r2,-16(fp)
 44015c0:	10c00517 	ldw	r3,20(r2)
 44015c4:	e0bff717 	ldw	r2,-36(fp)
 44015c8:	1885883a 	add	r2,r3,r2
 44015cc:	10800003 	ldbu	r2,0(r2)
 44015d0:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 44015d4:	e0fff417 	ldw	r3,-48(fp)
 44015d8:	00a00034 	movhi	r2,32768
 44015dc:	108001c4 	addi	r2,r2,7
 44015e0:	1884703a 	and	r2,r3,r2
 44015e4:	1000040e 	bge	r2,zero,44015f8 <vid_scroll_string+0x228>
 44015e8:	10bfffc4 	addi	r2,r2,-1
 44015ec:	00fffe04 	movi	r3,-8
 44015f0:	10c4b03a 	or	r2,r2,r3
 44015f4:	10800044 	addi	r2,r2,1
 44015f8:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 44015fc:	00c02004 	movi	r3,128
 4401600:	e0bff917 	ldw	r2,-28(fp)
 4401604:	1884d83a 	srl	r2,r3,r2
 4401608:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 440160c:	e0bffc17 	ldw	r2,-16(fp)
 4401610:	10800617 	ldw	r2,24(r2)
 4401614:	e0fff807 	ldb	r3,-32(fp)
 4401618:	18fff804 	addi	r3,r3,-32
 440161c:	18c002e4 	muli	r3,r3,11
 4401620:	10c5883a 	add	r2,r2,r3
 4401624:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4401628:	e03ff515 	stw	zero,-44(fp)
 440162c:	00002406 	br	44016c0 <vid_scroll_string+0x2f0>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 4401630:	e0bff517 	ldw	r2,-44(fp)
 4401634:	e0fffb17 	ldw	r3,-20(fp)
 4401638:	1885883a 	add	r2,r3,r2
 440163c:	10c00003 	ldbu	r3,0(r2)
 4401640:	e0bffa03 	ldbu	r2,-24(fp)
 4401644:	1884703a 	and	r2,r3,r2
 4401648:	10803fcc 	andi	r2,r2,255
 440164c:	1080201c 	xori	r2,r2,128
 4401650:	10bfe004 	addi	r2,r2,-128
 4401654:	10000c26 	beq	r2,zero,4401688 <vid_scroll_string+0x2b8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 4401658:	e0bffc17 	ldw	r2,-16(fp)
 440165c:	10c00117 	ldw	r3,4(r2)
 4401660:	e0bff517 	ldw	r2,-44(fp)
 4401664:	1887883a 	add	r3,r3,r2
 4401668:	e0bffc17 	ldw	r2,-16(fp)
 440166c:	10800317 	ldw	r2,12(r2)
 4401670:	e1fffd17 	ldw	r7,-12(fp)
 4401674:	100d883a 	mov	r6,r2
 4401678:	180b883a 	mov	r5,r3
 440167c:	e13ff317 	ldw	r4,-52(fp)
 4401680:	4401bb40 	call	4401bb4 <vid_set_pixel>
 4401684:	00000b06 	br	44016b4 <vid_scroll_string+0x2e4>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 4401688:	e0bffc17 	ldw	r2,-16(fp)
 440168c:	10c00117 	ldw	r3,4(r2)
 4401690:	e0bff517 	ldw	r2,-44(fp)
 4401694:	1887883a 	add	r3,r3,r2
 4401698:	e0bffc17 	ldw	r2,-16(fp)
 440169c:	10800417 	ldw	r2,16(r2)
 44016a0:	e1fffd17 	ldw	r7,-12(fp)
 44016a4:	100d883a 	mov	r6,r2
 44016a8:	180b883a 	mov	r5,r3
 44016ac:	e13ff317 	ldw	r4,-52(fp)
 44016b0:	4401bb40 	call	4401bb4 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 44016b4:	e0bff517 	ldw	r2,-44(fp)
 44016b8:	10800044 	addi	r2,r2,1
 44016bc:	e0bff515 	stw	r2,-44(fp)
 44016c0:	e0bff517 	ldw	r2,-44(fp)
 44016c4:	108002d0 	cmplti	r2,r2,11
 44016c8:	103fd91e 	bne	r2,zero,4401630 <__reset+0xfb3fd630>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 44016cc:	e0bff317 	ldw	r2,-52(fp)
 44016d0:	10800044 	addi	r2,r2,1
 44016d4:	e0bff315 	stw	r2,-52(fp)
 44016d8:	e0fff317 	ldw	r3,-52(fp)
 44016dc:	e0bff217 	ldw	r2,-56(fp)
 44016e0:	18bf9d16 	blt	r3,r2,4401558 <__reset+0xfb3fd558>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 44016e4:	e0bffc17 	ldw	r2,-16(fp)
 44016e8:	11000117 	ldw	r4,4(r2)
 44016ec:	e0bffc17 	ldw	r2,-16(fp)
 44016f0:	10800117 	ldw	r2,4(r2)
 44016f4:	11400284 	addi	r5,r2,10
 44016f8:	e0bffc17 	ldw	r2,-16(fp)
 44016fc:	10800417 	ldw	r2,16(r2)
 4401700:	e0fffd17 	ldw	r3,-12(fp)
 4401704:	d8c00215 	stw	r3,8(sp)
 4401708:	d8800115 	stw	r2,4(sp)
 440170c:	00800044 	movi	r2,1
 4401710:	d8800015 	stw	r2,0(sp)
 4401714:	280f883a 	mov	r7,r5
 4401718:	e1bff217 	ldw	r6,-56(fp)
 440171c:	200b883a 	mov	r5,r4
 4401720:	e13ff217 	ldw	r4,-56(fp)
 4401724:	440116c0 	call	440116c <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 4401728:	0005883a 	mov	r2,zero
}
 440172c:	e6fffe04 	addi	sp,fp,-8
 4401730:	dfc00317 	ldw	ra,12(sp)
 4401734:	df000217 	ldw	fp,8(sp)
 4401738:	dc400117 	ldw	r17,4(sp)
 440173c:	dc000017 	ldw	r16,0(sp)
 4401740:	dec00404 	addi	sp,sp,16
 4401744:	f800283a 	ret

04401748 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 4401748:	defff504 	addi	sp,sp,-44
 440174c:	dfc00a15 	stw	ra,40(sp)
 4401750:	df000915 	stw	fp,36(sp)
 4401754:	df000904 	addi	fp,sp,36
 4401758:	e13ffc15 	stw	r4,-16(fp)
 440175c:	e17ffd15 	stw	r5,-12(fp)
 4401760:	e1bffe15 	stw	r6,-8(fp)
 4401764:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 4401768:	e0800217 	ldw	r2,8(fp)
 440176c:	00803716 	blt	zero,r2,440184c <vid_move_block+0x104>
 4401770:	e0800317 	ldw	r2,12(fp)
 4401774:	00803516 	blt	zero,r2,440184c <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4401778:	e0bffd17 	ldw	r2,-12(fp)
 440177c:	e0bff815 	stw	r2,-32(fp)
 4401780:	00002f06 	br	4401840 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 4401784:	e0fff817 	ldw	r3,-32(fp)
 4401788:	e0800317 	ldw	r2,12(fp)
 440178c:	1885883a 	add	r2,r3,r2
 4401790:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 4401794:	e0bffc17 	ldw	r2,-16(fp)
 4401798:	e0bff715 	stw	r2,-36(fp)
 440179c:	00002206 	br	4401828 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 44017a0:	e0fff717 	ldw	r3,-36(fp)
 44017a4:	e0800217 	ldw	r2,8(fp)
 44017a8:	1885883a 	add	r2,r3,r2
 44017ac:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 44017b0:	e1800517 	ldw	r6,20(fp)
 44017b4:	e17ff817 	ldw	r5,-32(fp)
 44017b8:	e13ff717 	ldw	r4,-36(fp)
 44017bc:	4401c580 	call	4401c58 <vid_get_pixel>
 44017c0:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 44017c4:	e0bffb0f 	ldh	r2,-20(fp)
 44017c8:	e1c00517 	ldw	r7,20(fp)
 44017cc:	100d883a 	mov	r6,r2
 44017d0:	e17ff917 	ldw	r5,-28(fp)
 44017d4:	e13ffa17 	ldw	r4,-24(fp)
 44017d8:	4401bb40 	call	4401bb4 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 44017dc:	e0fffe17 	ldw	r3,-8(fp)
 44017e0:	e0800217 	ldw	r2,8(fp)
 44017e4:	1885883a 	add	r2,r3,r2
 44017e8:	e0fff717 	ldw	r3,-36(fp)
 44017ec:	1880050e 	bge	r3,r2,4401804 <vid_move_block+0xbc>
 44017f0:	e0ffff17 	ldw	r3,-4(fp)
 44017f4:	e0800317 	ldw	r2,12(fp)
 44017f8:	1885883a 	add	r2,r3,r2
 44017fc:	e0fff817 	ldw	r3,-32(fp)
 4401800:	18800616 	blt	r3,r2,440181c <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4401804:	e0800417 	ldw	r2,16(fp)
 4401808:	e1c00517 	ldw	r7,20(fp)
 440180c:	100d883a 	mov	r6,r2
 4401810:	e17ff817 	ldw	r5,-32(fp)
 4401814:	e13ff717 	ldw	r4,-36(fp)
 4401818:	4401bb40 	call	4401bb4 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 440181c:	e0bff717 	ldw	r2,-36(fp)
 4401820:	10800044 	addi	r2,r2,1
 4401824:	e0bff715 	stw	r2,-36(fp)
 4401828:	e0fff717 	ldw	r3,-36(fp)
 440182c:	e0bffe17 	ldw	r2,-8(fp)
 4401830:	18bfdb16 	blt	r3,r2,44017a0 <__reset+0xfb3fd7a0>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4401834:	e0bff817 	ldw	r2,-32(fp)
 4401838:	10800044 	addi	r2,r2,1
 440183c:	e0bff815 	stw	r2,-32(fp)
 4401840:	e0fff817 	ldw	r3,-32(fp)
 4401844:	e0bfff17 	ldw	r2,-4(fp)
 4401848:	18bfce16 	blt	r3,r2,4401784 <__reset+0xfb3fd784>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 440184c:	0005883a 	mov	r2,zero
}
 4401850:	e037883a 	mov	sp,fp
 4401854:	dfc00117 	ldw	ra,4(sp)
 4401858:	df000017 	ldw	fp,0(sp)
 440185c:	dec00204 	addi	sp,sp,8
 4401860:	f800283a 	ret

04401864 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 4401864:	defff604 	addi	sp,sp,-40
 4401868:	dfc00915 	stw	ra,36(sp)
 440186c:	df000815 	stw	fp,32(sp)
 4401870:	df000804 	addi	fp,sp,32
 4401874:	e13ffc15 	stw	r4,-16(fp)
 4401878:	e17ffd15 	stw	r5,-12(fp)
 440187c:	e1bffe15 	stw	r6,-8(fp)
 4401880:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4401884:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4401888:	e0bffc17 	ldw	r2,-16(fp)
 440188c:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4401890:	00002806 	br	4401934 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 4401894:	e0bffa17 	ldw	r2,-24(fp)
 4401898:	e0c00317 	ldw	r3,12(fp)
 440189c:	1885883a 	add	r2,r3,r2
 44018a0:	10800003 	ldbu	r2,0(r2)
 44018a4:	10803fcc 	andi	r2,r2,255
 44018a8:	1080201c 	xori	r2,r2,128
 44018ac:	10bfe004 	addi	r2,r2,-128
 44018b0:	10800298 	cmpnei	r2,r2,10
 44018b4:	1000091e 	bne	r2,zero,44018dc <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 44018b8:	e0bffb17 	ldw	r2,-20(fp)
 44018bc:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 44018c0:	e0bffd17 	ldw	r2,-12(fp)
 44018c4:	10800304 	addi	r2,r2,12
 44018c8:	e0bffd15 	stw	r2,-12(fp)
      i++;
 44018cc:	e0bffa17 	ldw	r2,-24(fp)
 44018d0:	10800044 	addi	r2,r2,1
 44018d4:	e0bffa15 	stw	r2,-24(fp)
      continue;
 44018d8:	00001606 	br	4401934 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 44018dc:	e0bffa17 	ldw	r2,-24(fp)
 44018e0:	e0c00317 	ldw	r3,12(fp)
 44018e4:	1885883a 	add	r2,r3,r2
 44018e8:	10800003 	ldbu	r2,0(r2)
 44018ec:	10c03fcc 	andi	r3,r2,255
 44018f0:	18c0201c 	xori	r3,r3,128
 44018f4:	18ffe004 	addi	r3,r3,-128
 44018f8:	e0800217 	ldw	r2,8(fp)
 44018fc:	d8800115 	stw	r2,4(sp)
 4401900:	e0bfff17 	ldw	r2,-4(fp)
 4401904:	d8800015 	stw	r2,0(sp)
 4401908:	180f883a 	mov	r7,r3
 440190c:	e1bffe17 	ldw	r6,-8(fp)
 4401910:	e17ffd17 	ldw	r5,-12(fp)
 4401914:	e13ffc17 	ldw	r4,-16(fp)
 4401918:	4401ac40 	call	4401ac4 <vid_print_char>
    i++;
 440191c:	e0bffa17 	ldw	r2,-24(fp)
 4401920:	10800044 	addi	r2,r2,1
 4401924:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 4401928:	e0bffc17 	ldw	r2,-16(fp)
 440192c:	10800204 	addi	r2,r2,8
 4401930:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4401934:	e0bffa17 	ldw	r2,-24(fp)
 4401938:	e0c00317 	ldw	r3,12(fp)
 440193c:	1885883a 	add	r2,r3,r2
 4401940:	10800003 	ldbu	r2,0(r2)
 4401944:	10803fcc 	andi	r2,r2,255
 4401948:	1080201c 	xori	r2,r2,128
 440194c:	10bfe004 	addi	r2,r2,-128
 4401950:	103fd01e 	bne	r2,zero,4401894 <__reset+0xfb3fd894>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 4401954:	0005883a 	mov	r2,zero
}
 4401958:	e037883a 	mov	sp,fp
 440195c:	dfc00117 	ldw	ra,4(sp)
 4401960:	df000017 	ldw	fp,0(sp)
 4401964:	dec00204 	addi	sp,sp,8
 4401968:	f800283a 	ret

0440196c <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 440196c:	defff704 	addi	sp,sp,-36
 4401970:	dfc00815 	stw	ra,32(sp)
 4401974:	df000715 	stw	fp,28(sp)
 4401978:	df000704 	addi	fp,sp,28
 440197c:	e13ffc15 	stw	r4,-16(fp)
 4401980:	e17ffd15 	stw	r5,-12(fp)
 4401984:	e1bffe15 	stw	r6,-8(fp)
 4401988:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 440198c:	e0800317 	ldw	r2,12(fp)
 4401990:	10000a26 	beq	r2,zero,44019bc <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 4401994:	e0800417 	ldw	r2,16(fp)
 4401998:	d8800115 	stw	r2,4(sp)
 440199c:	e0800217 	ldw	r2,8(fp)
 44019a0:	d8800015 	stw	r2,0(sp)
 44019a4:	e1ffff17 	ldw	r7,-4(fp)
 44019a8:	e1bffe17 	ldw	r6,-8(fp)
 44019ac:	e17ffd17 	ldw	r5,-12(fp)
 44019b0:	e13ffc17 	ldw	r4,-16(fp)
 44019b4:	4401c980 	call	4401c98 <vid_paint_block>
 44019b8:	00003c06 	br	4401aac <vid_draw_box+0x140>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 44019bc:	e0bfff17 	ldw	r2,-4(fp)
 44019c0:	10ffffc4 	addi	r3,r2,-1
 44019c4:	e0800417 	ldw	r2,16(fp)
 44019c8:	d8800215 	stw	r2,8(sp)
 44019cc:	e0800217 	ldw	r2,8(fp)
 44019d0:	d8800115 	stw	r2,4(sp)
 44019d4:	00800044 	movi	r2,1
 44019d8:	d8800015 	stw	r2,0(sp)
 44019dc:	180f883a 	mov	r7,r3
 44019e0:	e1bffc17 	ldw	r6,-16(fp)
 44019e4:	e17ffd17 	ldw	r5,-12(fp)
 44019e8:	e13ffc17 	ldw	r4,-16(fp)
 44019ec:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 44019f0:	e0bffe17 	ldw	r2,-8(fp)
 44019f4:	10ffffc4 	addi	r3,r2,-1
 44019f8:	e0bffe17 	ldw	r2,-8(fp)
 44019fc:	113fffc4 	addi	r4,r2,-1
 4401a00:	e0bfff17 	ldw	r2,-4(fp)
 4401a04:	117fffc4 	addi	r5,r2,-1
 4401a08:	e0800417 	ldw	r2,16(fp)
 4401a0c:	d8800215 	stw	r2,8(sp)
 4401a10:	e0800217 	ldw	r2,8(fp)
 4401a14:	d8800115 	stw	r2,4(sp)
 4401a18:	00800044 	movi	r2,1
 4401a1c:	d8800015 	stw	r2,0(sp)
 4401a20:	280f883a 	mov	r7,r5
 4401a24:	200d883a 	mov	r6,r4
 4401a28:	e17ffd17 	ldw	r5,-12(fp)
 4401a2c:	1809883a 	mov	r4,r3
 4401a30:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4401a34:	e0bffe17 	ldw	r2,-8(fp)
 4401a38:	10ffffc4 	addi	r3,r2,-1
 4401a3c:	e0800417 	ldw	r2,16(fp)
 4401a40:	d8800215 	stw	r2,8(sp)
 4401a44:	e0800217 	ldw	r2,8(fp)
 4401a48:	d8800115 	stw	r2,4(sp)
 4401a4c:	00800044 	movi	r2,1
 4401a50:	d8800015 	stw	r2,0(sp)
 4401a54:	e1fffd17 	ldw	r7,-12(fp)
 4401a58:	180d883a 	mov	r6,r3
 4401a5c:	e17ffd17 	ldw	r5,-12(fp)
 4401a60:	e13ffc17 	ldw	r4,-16(fp)
 4401a64:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 4401a68:	e0bfff17 	ldw	r2,-4(fp)
 4401a6c:	10ffffc4 	addi	r3,r2,-1
 4401a70:	e0bffe17 	ldw	r2,-8(fp)
 4401a74:	113fffc4 	addi	r4,r2,-1
 4401a78:	e0bfff17 	ldw	r2,-4(fp)
 4401a7c:	117fffc4 	addi	r5,r2,-1
 4401a80:	e0800417 	ldw	r2,16(fp)
 4401a84:	d8800215 	stw	r2,8(sp)
 4401a88:	e0800217 	ldw	r2,8(fp)
 4401a8c:	d8800115 	stw	r2,4(sp)
 4401a90:	00800044 	movi	r2,1
 4401a94:	d8800015 	stw	r2,0(sp)
 4401a98:	280f883a 	mov	r7,r5
 4401a9c:	200d883a 	mov	r6,r4
 4401aa0:	180b883a 	mov	r5,r3
 4401aa4:	e13ffc17 	ldw	r4,-16(fp)
 4401aa8:	440116c0 	call	440116c <vid_draw_line>
  }

  return (0);
 4401aac:	0005883a 	mov	r2,zero
}
 4401ab0:	e037883a 	mov	sp,fp
 4401ab4:	dfc00117 	ldw	ra,4(sp)
 4401ab8:	df000017 	ldw	fp,0(sp)
 4401abc:	dec00204 	addi	sp,sp,8
 4401ac0:	f800283a 	ret

04401ac4 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4401ac4:	defff704 	addi	sp,sp,-36
 4401ac8:	dfc00815 	stw	ra,32(sp)
 4401acc:	df000715 	stw	fp,28(sp)
 4401ad0:	df000704 	addi	fp,sp,28
 4401ad4:	e13ffc15 	stw	r4,-16(fp)
 4401ad8:	e17ffd15 	stw	r5,-12(fp)
 4401adc:	e1bffe15 	stw	r6,-8(fp)
 4401ae0:	3805883a 	mov	r2,r7
 4401ae4:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4401ae8:	e0bfff03 	ldbu	r2,-4(fp)
 4401aec:	10bff804 	addi	r2,r2,-32
 4401af0:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4401af4:	e03ff915 	stw	zero,-28(fp)
 4401af8:	00002506 	br	4401b90 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4401afc:	e0bffb07 	ldb	r2,-20(fp)
 4401b00:	108002e4 	muli	r2,r2,11
 4401b04:	1007883a 	mov	r3,r2
 4401b08:	e0bff917 	ldw	r2,-28(fp)
 4401b0c:	1885883a 	add	r2,r3,r2
 4401b10:	e0c00217 	ldw	r3,8(fp)
 4401b14:	1885883a 	add	r2,r3,r2
 4401b18:	10800003 	ldbu	r2,0(r2)
 4401b1c:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4401b20:	e03ffa15 	stw	zero,-24(fp)
 4401b24:	00001406 	br	4401b78 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4401b28:	e0fffb47 	ldb	r3,-19(fp)
 4401b2c:	01002004 	movi	r4,128
 4401b30:	e0bffa17 	ldw	r2,-24(fp)
 4401b34:	2085d83a 	sra	r2,r4,r2
 4401b38:	1884703a 	and	r2,r3,r2
 4401b3c:	10000b26 	beq	r2,zero,4401b6c <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4401b40:	e0fffc17 	ldw	r3,-16(fp)
 4401b44:	e0bffa17 	ldw	r2,-24(fp)
 4401b48:	1889883a 	add	r4,r3,r2
 4401b4c:	e0fffd17 	ldw	r3,-12(fp)
 4401b50:	e0bff917 	ldw	r2,-28(fp)
 4401b54:	1885883a 	add	r2,r3,r2
 4401b58:	e0fffe17 	ldw	r3,-8(fp)
 4401b5c:	e1c00317 	ldw	r7,12(fp)
 4401b60:	180d883a 	mov	r6,r3
 4401b64:	100b883a 	mov	r5,r2
 4401b68:	4401bb40 	call	4401bb4 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 4401b6c:	e0bffa17 	ldw	r2,-24(fp)
 4401b70:	10800044 	addi	r2,r2,1
 4401b74:	e0bffa15 	stw	r2,-24(fp)
 4401b78:	e0bffa17 	ldw	r2,-24(fp)
 4401b7c:	10800210 	cmplti	r2,r2,8
 4401b80:	103fe91e 	bne	r2,zero,4401b28 <__reset+0xfb3fdb28>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4401b84:	e0bff917 	ldw	r2,-28(fp)
 4401b88:	10800044 	addi	r2,r2,1
 4401b8c:	e0bff915 	stw	r2,-28(fp)
 4401b90:	e0bff917 	ldw	r2,-28(fp)
 4401b94:	108002d0 	cmplti	r2,r2,11
 4401b98:	103fd81e 	bne	r2,zero,4401afc <__reset+0xfb3fdafc>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 4401b9c:	0005883a 	mov	r2,zero
}
 4401ba0:	e037883a 	mov	sp,fp
 4401ba4:	dfc00117 	ldw	ra,4(sp)
 4401ba8:	df000017 	ldw	fp,0(sp)
 4401bac:	dec00204 	addi	sp,sp,8
 4401bb0:	f800283a 	ret

04401bb4 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 4401bb4:	defff904 	addi	sp,sp,-28
 4401bb8:	dfc00615 	stw	ra,24(sp)
 4401bbc:	df000515 	stw	fp,20(sp)
 4401bc0:	df000504 	addi	fp,sp,20
 4401bc4:	e13ffc15 	stw	r4,-16(fp)
 4401bc8:	e17ffd15 	stw	r5,-12(fp)
 4401bcc:	e1bffe15 	stw	r6,-8(fp)
 4401bd0:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 4401bd4:	e0bffe17 	ldw	r2,-8(fp)
 4401bd8:	10803fcc 	andi	r2,r2,255
 4401bdc:	1004d0fa 	srli	r2,r2,3
 4401be0:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 4401be4:	e0bffe17 	ldw	r2,-8(fp)
 4401be8:	10bf000c 	andi	r2,r2,64512
 4401bec:	1004d17a 	srli	r2,r2,5
 4401bf0:	1007883a 	mov	r3,r2
 4401bf4:	e0bffb0b 	ldhu	r2,-20(fp)
 4401bf8:	1884b03a 	or	r2,r3,r2
 4401bfc:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 4401c00:	e0bffe17 	ldw	r2,-8(fp)
 4401c04:	10803e2c 	andhi	r2,r2,248
 4401c08:	1004d23a 	srli	r2,r2,8
 4401c0c:	1007883a 	mov	r3,r2
 4401c10:	e0bffb0b 	ldhu	r2,-20(fp)
 4401c14:	1884b03a 	or	r2,r3,r2
 4401c18:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
 4401c1c:	e0bffc17 	ldw	r2,-16(fp)
 4401c20:	10ffffcc 	andi	r3,r2,65535
 4401c24:	e0bffd17 	ldw	r2,-12(fp)
 4401c28:	10bfffcc 	andi	r2,r2,65535
 4401c2c:	e13ffb0b 	ldhu	r4,-20(fp)
 4401c30:	200d883a 	mov	r6,r4
 4401c34:	100b883a 	mov	r5,r2
 4401c38:	1809883a 	mov	r4,r3
 4401c3c:	44008080 	call	4400808 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
 4401c40:	0001883a 	nop
 4401c44:	e037883a 	mov	sp,fp
 4401c48:	dfc00117 	ldw	ra,4(sp)
 4401c4c:	df000017 	ldw	fp,0(sp)
 4401c50:	dec00204 	addi	sp,sp,8
 4401c54:	f800283a 	ret

04401c58 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4401c58:	defffb04 	addi	sp,sp,-20
 4401c5c:	dfc00415 	stw	ra,16(sp)
 4401c60:	df000315 	stw	fp,12(sp)
 4401c64:	df000304 	addi	fp,sp,12
 4401c68:	e13ffd15 	stw	r4,-12(fp)
 4401c6c:	e17ffe15 	stw	r5,-8(fp)
 4401c70:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
 4401c74:	010110f4 	movhi	r4,1091
 4401c78:	21121904 	addi	r4,r4,18532
 4401c7c:	440af980 	call	440af98 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
 4401c80:	0001883a 	nop
 4401c84:	e037883a 	mov	sp,fp
 4401c88:	dfc00117 	ldw	ra,4(sp)
 4401c8c:	df000017 	ldw	fp,0(sp)
 4401c90:	dec00204 	addi	sp,sp,8
 4401c94:	f800283a 	ret

04401c98 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 4401c98:	defff804 	addi	sp,sp,-32
 4401c9c:	dfc00715 	stw	ra,28(sp)
 4401ca0:	df000615 	stw	fp,24(sp)
 4401ca4:	df000604 	addi	fp,sp,24
 4401ca8:	e13ffc15 	stw	r4,-16(fp)
 4401cac:	e17ffd15 	stw	r5,-12(fp)
 4401cb0:	e1bffe15 	stw	r6,-8(fp)
 4401cb4:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4401cb8:	e0bffd17 	ldw	r2,-12(fp)
 4401cbc:	e0bffb15 	stw	r2,-20(fp)
 4401cc0:	00001206 	br	4401d0c <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
 4401cc4:	e0bffc17 	ldw	r2,-16(fp)
 4401cc8:	e0bffa15 	stw	r2,-24(fp)
 4401ccc:	00000906 	br	4401cf4 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
 4401cd0:	e0800217 	ldw	r2,8(fp)
 4401cd4:	e1c00317 	ldw	r7,12(fp)
 4401cd8:	100d883a 	mov	r6,r2
 4401cdc:	e17ffb17 	ldw	r5,-20(fp)
 4401ce0:	e13ffa17 	ldw	r4,-24(fp)
 4401ce4:	4401bb40 	call	4401bb4 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 4401ce8:	e0bffa17 	ldw	r2,-24(fp)
 4401cec:	10800044 	addi	r2,r2,1
 4401cf0:	e0bffa15 	stw	r2,-24(fp)
 4401cf4:	e0fffa17 	ldw	r3,-24(fp)
 4401cf8:	e0bffe17 	ldw	r2,-8(fp)
 4401cfc:	18bff416 	blt	r3,r2,4401cd0 <__reset+0xfb3fdcd0>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4401d00:	e0bffb17 	ldw	r2,-20(fp)
 4401d04:	10800044 	addi	r2,r2,1
 4401d08:	e0bffb15 	stw	r2,-20(fp)
 4401d0c:	e0fffb17 	ldw	r3,-20(fp)
 4401d10:	e0bfff17 	ldw	r2,-4(fp)
 4401d14:	18bfeb16 	blt	r3,r2,4401cc4 <__reset+0xfb3fdcc4>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
 4401d18:	0001883a 	nop
 4401d1c:	e037883a 	mov	sp,fp
 4401d20:	dfc00117 	ldw	ra,4(sp)
 4401d24:	df000017 	ldw	fp,0(sp)
 4401d28:	dec00204 	addi	sp,sp,8
 4401d2c:	f800283a 	ret

04401d30 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 4401d30:	defff904 	addi	sp,sp,-28
 4401d34:	dfc00615 	stw	ra,24(sp)
 4401d38:	df000515 	stw	fp,20(sp)
 4401d3c:	df000504 	addi	fp,sp,20
 4401d40:	2007883a 	mov	r3,r4
 4401d44:	2805883a 	mov	r2,r5
 4401d48:	e1bffe15 	stw	r6,-8(fp)
 4401d4c:	e1ffff15 	stw	r7,-4(fp)
 4401d50:	e0fffc0d 	sth	r3,-16(fp)
 4401d54:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4401d58:	e0bffc0f 	ldh	r2,-16(fp)
 4401d5c:	e0bffb15 	stw	r2,-20(fp)
 4401d60:	00000906 	br	4401d88 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
 4401d64:	e0bfff17 	ldw	r2,-4(fp)
 4401d68:	e1c00217 	ldw	r7,8(fp)
 4401d6c:	100d883a 	mov	r6,r2
 4401d70:	e17ffe17 	ldw	r5,-8(fp)
 4401d74:	e13ffb17 	ldw	r4,-20(fp)
 4401d78:	4401bb40 	call	4401bb4 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4401d7c:	e0bffb17 	ldw	r2,-20(fp)
 4401d80:	10800044 	addi	r2,r2,1
 4401d84:	e0bffb15 	stw	r2,-20(fp)
 4401d88:	e0bffd0f 	ldh	r2,-12(fp)
 4401d8c:	e0fffb17 	ldw	r3,-20(fp)
 4401d90:	18bff416 	blt	r3,r2,4401d64 <__reset+0xfb3fdd64>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
 4401d94:	0001883a 	nop
 4401d98:	e037883a 	mov	sp,fp
 4401d9c:	dfc00117 	ldw	ra,4(sp)
 4401da0:	df000017 	ldw	fp,0(sp)
 4401da4:	dec00204 	addi	sp,sp,8
 4401da8:	f800283a 	ret

04401dac <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4401dac:	defffc04 	addi	sp,sp,-16
 4401db0:	df000315 	stw	fp,12(sp)
 4401db4:	df000304 	addi	fp,sp,12
 4401db8:	e13ffd15 	stw	r4,-12(fp)
 4401dbc:	e17ffe15 	stw	r5,-8(fp)
 4401dc0:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 4401dc4:	e0bffe17 	ldw	r2,-8(fp)
 4401dc8:	1085883a 	add	r2,r2,r2
 4401dcc:	10800054 	ori	r2,r2,1
 4401dd0:	1006917a 	slli	r3,r2,5
 4401dd4:	e0bfff17 	ldw	r2,-4(fp)
 4401dd8:	1886b03a 	or	r3,r3,r2
 4401ddc:	e0bffd17 	ldw	r2,-12(fp)
 4401de0:	100492fa 	slli	r2,r2,11
 4401de4:	1884b03a 	or	r2,r3,r2
}
 4401de8:	e037883a 	mov	sp,fp
 4401dec:	df000017 	ldw	fp,0(sp)
 4401df0:	dec00104 	addi	sp,sp,4
 4401df4:	f800283a 	ret

04401df8 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 4401df8:	defffc04 	addi	sp,sp,-16
 4401dfc:	df000315 	stw	fp,12(sp)
 4401e00:	df000304 	addi	fp,sp,12
 4401e04:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 4401e08:	e0bfff17 	ldw	r2,-4(fp)
 4401e0c:	10800003 	ldbu	r2,0(r2)
 4401e10:	1007883a 	mov	r3,r2
 4401e14:	00bffe04 	movi	r2,-8
 4401e18:	1884703a 	and	r2,r3,r2
 4401e1c:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 4401e20:	e0bfff17 	ldw	r2,-4(fp)
 4401e24:	10800044 	addi	r2,r2,1
 4401e28:	10800003 	ldbu	r2,0(r2)
 4401e2c:	1007883a 	mov	r3,r2
 4401e30:	00bfff04 	movi	r2,-4
 4401e34:	1884703a 	and	r2,r3,r2
 4401e38:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 4401e3c:	e0bfff17 	ldw	r2,-4(fp)
 4401e40:	10800084 	addi	r2,r2,2
 4401e44:	10800003 	ldbu	r2,0(r2)
 4401e48:	1007883a 	mov	r3,r2
 4401e4c:	00bffe04 	movi	r2,-8
 4401e50:	1884703a 	and	r2,r3,r2
 4401e54:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 4401e58:	e0bffd83 	ldbu	r2,-10(fp)
 4401e5c:	1004d0fa 	srli	r2,r2,3
 4401e60:	10803fcc 	andi	r2,r2,255
 4401e64:	e0fffd43 	ldbu	r3,-11(fp)
 4401e68:	180690fa 	slli	r3,r3,3
 4401e6c:	10c4b03a 	or	r2,r2,r3
 4401e70:	1007883a 	mov	r3,r2
 4401e74:	e0bffd03 	ldbu	r2,-12(fp)
 4401e78:	1004923a 	slli	r2,r2,8
 4401e7c:	1884b03a 	or	r2,r3,r2
 4401e80:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 4401e84:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4401e88:	e037883a 	mov	sp,fp
 4401e8c:	df000017 	ldw	fp,0(sp)
 4401e90:	dec00104 	addi	sp,sp,4
 4401e94:	f800283a 	ret

04401e98 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 4401e98:	defffd04 	addi	sp,sp,-12
 4401e9c:	df000215 	stw	fp,8(sp)
 4401ea0:	df000204 	addi	fp,sp,8
 4401ea4:	2005883a 	mov	r2,r4
 4401ea8:	e17fff15 	stw	r5,-4(fp)
 4401eac:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4401eb0:	e0bffe0b 	ldhu	r2,-8(fp)
 4401eb4:	1004d2fa 	srli	r2,r2,11
 4401eb8:	1007883a 	mov	r3,r2
 4401ebc:	e0bfff17 	ldw	r2,-4(fp)
 4401ec0:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 4401ec4:	e0bfff17 	ldw	r2,-4(fp)
 4401ec8:	10800044 	addi	r2,r2,1
 4401ecc:	e0fffe0b 	ldhu	r3,-8(fp)
 4401ed0:	18c00f8c 	andi	r3,r3,62
 4401ed4:	1807d17a 	srai	r3,r3,5
 4401ed8:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4401edc:	e0bfff17 	ldw	r2,-4(fp)
 4401ee0:	10800084 	addi	r2,r2,2
 4401ee4:	e0fffe0b 	ldhu	r3,-8(fp)
 4401ee8:	18c007cc 	andi	r3,r3,31
 4401eec:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4401ef0:	0005883a 	mov	r2,zero
}
 4401ef4:	e037883a 	mov	sp,fp
 4401ef8:	df000017 	ldw	fp,0(sp)
 4401efc:	dec00104 	addi	sp,sp,4
 4401f00:	f800283a 	ret

04401f04 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 4401f04:	defffa04 	addi	sp,sp,-24
 4401f08:	dfc00515 	stw	ra,20(sp)
 4401f0c:	df000415 	stw	fp,16(sp)
 4401f10:	df000404 	addi	fp,sp,16
 4401f14:	e13ffc15 	stw	r4,-16(fp)
 4401f18:	e17ffd15 	stw	r5,-12(fp)
 4401f1c:	e1bffe15 	stw	r6,-8(fp)
 4401f20:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
 4401f24:	010110f4 	movhi	r4,1091
 4401f28:	21122204 	addi	r4,r4,18568
 4401f2c:	440af980 	call	440af98 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
 4401f30:	0001883a 	nop
 4401f34:	e037883a 	mov	sp,fp
 4401f38:	dfc00117 	ldw	ra,4(sp)
 4401f3c:	df000017 	ldw	fp,0(sp)
 4401f40:	dec00204 	addi	sp,sp,8
 4401f44:	f800283a 	ret

04401f48 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 4401f48:	deffef04 	addi	sp,sp,-68
 4401f4c:	dfc01015 	stw	ra,64(sp)
 4401f50:	df000f15 	stw	fp,60(sp)
 4401f54:	df000f04 	addi	fp,sp,60
 4401f58:	2011883a 	mov	r8,r4
 4401f5c:	3009883a 	mov	r4,r6
 4401f60:	3807883a 	mov	r3,r7
 4401f64:	e0800217 	ldw	r2,8(fp)
 4401f68:	e23ffb0d 	sth	r8,-20(fp)
 4401f6c:	e17ffc0d 	sth	r5,-16(fp)
 4401f70:	e13ffd0d 	sth	r4,-12(fp)
 4401f74:	e0fffe0d 	sth	r3,-8(fp)
 4401f78:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4401f7c:	e0fffd0b 	ldhu	r3,-12(fp)
 4401f80:	e0bffb0b 	ldhu	r2,-20(fp)
 4401f84:	1885c83a 	sub	r2,r3,r2
 4401f88:	1000010e 	bge	r2,zero,4401f90 <vid_draw_sloped_line+0x48>
 4401f8c:	0085c83a 	sub	r2,zero,r2
 4401f90:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4401f94:	e0fffe0b 	ldhu	r3,-8(fp)
 4401f98:	e0bffc0b 	ldhu	r2,-16(fp)
 4401f9c:	1885c83a 	sub	r2,r3,r2
 4401fa0:	1000010e 	bge	r2,zero,4401fa8 <vid_draw_sloped_line+0x60>
 4401fa4:	0085c83a 	sub	r2,zero,r2
 4401fa8:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4401fac:	e0bffb0b 	ldhu	r2,-20(fp)
 4401fb0:	e0fffd0b 	ldhu	r3,-12(fp)
 4401fb4:	1880032e 	bgeu	r3,r2,4401fc4 <vid_draw_sloped_line+0x7c>
 4401fb8:	00bfffc4 	movi	r2,-1
 4401fbc:	e0bff315 	stw	r2,-52(fp)
 4401fc0:	00000206 	br	4401fcc <vid_draw_sloped_line+0x84>
 4401fc4:	00800044 	movi	r2,1
 4401fc8:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 4401fcc:	e0bffc0b 	ldhu	r2,-16(fp)
 4401fd0:	e0fffe0b 	ldhu	r3,-8(fp)
 4401fd4:	1880032e 	bgeu	r3,r2,4401fe4 <vid_draw_sloped_line+0x9c>
 4401fd8:	00bfffc4 	movi	r2,-1
 4401fdc:	e0bff415 	stw	r2,-48(fp)
 4401fe0:	00000206 	br	4401fec <vid_draw_sloped_line+0xa4>
 4401fe4:	00800044 	movi	r2,1
 4401fe8:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 4401fec:	e0fff117 	ldw	r3,-60(fp)
 4401ff0:	e0bff217 	ldw	r2,-56(fp)
 4401ff4:	18803616 	blt	r3,r2,44020d0 <vid_draw_sloped_line+0x188>
    int dPr   = vert_delta<<1;
 4401ff8:	e0bff217 	ldw	r2,-56(fp)
 4401ffc:	1085883a 	add	r2,r2,r2
 4402000:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4402004:	e0bff117 	ldw	r2,-60(fp)
 4402008:	1085883a 	add	r2,r2,r2
 440200c:	1007883a 	mov	r3,r2
 4402010:	e0bff717 	ldw	r2,-36(fp)
 4402014:	10c5c83a 	sub	r2,r2,r3
 4402018:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 440201c:	e0fff717 	ldw	r3,-36(fp)
 4402020:	e0bff117 	ldw	r2,-60(fp)
 4402024:	1885c83a 	sub	r2,r3,r2
 4402028:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 440202c:	00002506 	br	44020c4 <vid_draw_sloped_line+0x17c>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4402030:	e0bffb0b 	ldhu	r2,-20(fp)
 4402034:	e0fffc0b 	ldhu	r3,-16(fp)
 4402038:	e1000317 	ldw	r4,12(fp)
 440203c:	e1c00417 	ldw	r7,16(fp)
 4402040:	200d883a 	mov	r6,r4
 4402044:	180b883a 	mov	r5,r3
 4402048:	1009883a 	mov	r4,r2
 440204c:	4401bb40 	call	4401bb4 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4402050:	e0bff517 	ldw	r2,-44(fp)
 4402054:	00800f0e 	bge	zero,r2,4402094 <vid_draw_sloped_line+0x14c>
        horiz_start+=horiz_incr;
 4402058:	e0bff317 	ldw	r2,-52(fp)
 440205c:	1007883a 	mov	r3,r2
 4402060:	e0bffb0b 	ldhu	r2,-20(fp)
 4402064:	1885883a 	add	r2,r3,r2
 4402068:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 440206c:	e0bff417 	ldw	r2,-48(fp)
 4402070:	1007883a 	mov	r3,r2
 4402074:	e0bffc0b 	ldhu	r2,-16(fp)
 4402078:	1885883a 	add	r2,r3,r2
 440207c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4402080:	e0fff517 	ldw	r3,-44(fp)
 4402084:	e0bff817 	ldw	r2,-32(fp)
 4402088:	1885883a 	add	r2,r3,r2
 440208c:	e0bff515 	stw	r2,-44(fp)
 4402090:	00000906 	br	44020b8 <vid_draw_sloped_line+0x170>
      } else {
        horiz_start+=horiz_incr;
 4402094:	e0bff317 	ldw	r2,-52(fp)
 4402098:	1007883a 	mov	r3,r2
 440209c:	e0bffb0b 	ldhu	r2,-20(fp)
 44020a0:	1885883a 	add	r2,r3,r2
 44020a4:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 44020a8:	e0fff517 	ldw	r3,-44(fp)
 44020ac:	e0bff717 	ldw	r2,-36(fp)
 44020b0:	1885883a 	add	r2,r3,r2
 44020b4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 44020b8:	e0bff117 	ldw	r2,-60(fp)
 44020bc:	10bfffc4 	addi	r2,r2,-1
 44020c0:	e0bff115 	stw	r2,-60(fp)
 44020c4:	e0bff117 	ldw	r2,-60(fp)
 44020c8:	103fd90e 	bge	r2,zero,4402030 <__reset+0xfb3fe030>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 44020cc:	00003506 	br	44021a4 <vid_draw_sloped_line+0x25c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 44020d0:	e0bff117 	ldw	r2,-60(fp)
 44020d4:	1085883a 	add	r2,r2,r2
 44020d8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 44020dc:	e0bff217 	ldw	r2,-56(fp)
 44020e0:	1085883a 	add	r2,r2,r2
 44020e4:	1007883a 	mov	r3,r2
 44020e8:	e0bff917 	ldw	r2,-28(fp)
 44020ec:	10c5c83a 	sub	r2,r2,r3
 44020f0:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 44020f4:	e0fff917 	ldw	r3,-28(fp)
 44020f8:	e0bff217 	ldw	r2,-56(fp)
 44020fc:	1885c83a 	sub	r2,r3,r2
 4402100:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4402104:	00002506 	br	440219c <vid_draw_sloped_line+0x254>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4402108:	e0bffb0b 	ldhu	r2,-20(fp)
 440210c:	e0fffc0b 	ldhu	r3,-16(fp)
 4402110:	e1000317 	ldw	r4,12(fp)
 4402114:	e1c00417 	ldw	r7,16(fp)
 4402118:	200d883a 	mov	r6,r4
 440211c:	180b883a 	mov	r5,r3
 4402120:	1009883a 	mov	r4,r2
 4402124:	4401bb40 	call	4401bb4 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4402128:	e0bff617 	ldw	r2,-40(fp)
 440212c:	00800f0e 	bge	zero,r2,440216c <vid_draw_sloped_line+0x224>
        horiz_start+=horiz_incr;
 4402130:	e0bff317 	ldw	r2,-52(fp)
 4402134:	1007883a 	mov	r3,r2
 4402138:	e0bffb0b 	ldhu	r2,-20(fp)
 440213c:	1885883a 	add	r2,r3,r2
 4402140:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4402144:	e0bff417 	ldw	r2,-48(fp)
 4402148:	1007883a 	mov	r3,r2
 440214c:	e0bffc0b 	ldhu	r2,-16(fp)
 4402150:	1885883a 	add	r2,r3,r2
 4402154:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4402158:	e0fff617 	ldw	r3,-40(fp)
 440215c:	e0bffa17 	ldw	r2,-24(fp)
 4402160:	1885883a 	add	r2,r3,r2
 4402164:	e0bff615 	stw	r2,-40(fp)
 4402168:	00000906 	br	4402190 <vid_draw_sloped_line+0x248>
      } else {
        vert_start+=vert_incr;
 440216c:	e0bff417 	ldw	r2,-48(fp)
 4402170:	1007883a 	mov	r3,r2
 4402174:	e0bffc0b 	ldhu	r2,-16(fp)
 4402178:	1885883a 	add	r2,r3,r2
 440217c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4402180:	e0fff617 	ldw	r3,-40(fp)
 4402184:	e0bff917 	ldw	r2,-28(fp)
 4402188:	1885883a 	add	r2,r3,r2
 440218c:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4402190:	e0bff217 	ldw	r2,-56(fp)
 4402194:	10bfffc4 	addi	r2,r2,-1
 4402198:	e0bff215 	stw	r2,-56(fp)
 440219c:	e0bff217 	ldw	r2,-56(fp)
 44021a0:	103fd90e 	bge	r2,zero,4402108 <__reset+0xfb3fe108>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 44021a4:	0001883a 	nop
 44021a8:	e037883a 	mov	sp,fp
 44021ac:	dfc00117 	ldw	ra,4(sp)
 44021b0:	df000017 	ldw	fp,0(sp)
 44021b4:	dec00204 	addi	sp,sp,8
 44021b8:	f800283a 	ret

044021bc <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 44021bc:	defff104 	addi	sp,sp,-60
 44021c0:	dfc00e15 	stw	ra,56(sp)
 44021c4:	df000d15 	stw	fp,52(sp)
 44021c8:	df000d04 	addi	fp,sp,52
 44021cc:	e13ffb15 	stw	r4,-20(fp)
 44021d0:	e17ffc15 	stw	r5,-16(fp)
 44021d4:	e1bffd15 	stw	r6,-12(fp)
 44021d8:	e1fffe15 	stw	r7,-8(fp)
 44021dc:	e0800217 	ldw	r2,8(fp)
 44021e0:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 44021e4:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 44021e8:	e0bffd17 	ldw	r2,-12(fp)
 44021ec:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 44021f0:	e0bffd17 	ldw	r2,-12(fp)
 44021f4:	10bfff24 	muli	r2,r2,-4
 44021f8:	10800144 	addi	r2,r2,5
 44021fc:	1000010e 	bge	r2,zero,4402204 <vid_draw_circle+0x48>
 4402200:	108000c4 	addi	r2,r2,3
 4402204:	1005d0ba 	srai	r2,r2,2
 4402208:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 440220c:	e0bfff07 	ldb	r2,-4(fp)
 4402210:	e0c00317 	ldw	r3,12(fp)
 4402214:	d8c00415 	stw	r3,16(sp)
 4402218:	d8800315 	stw	r2,12(sp)
 440221c:	e0bffe17 	ldw	r2,-8(fp)
 4402220:	d8800215 	stw	r2,8(sp)
 4402224:	d8000115 	stw	zero,4(sp)
 4402228:	d8000015 	stw	zero,0(sp)
 440222c:	e1fff917 	ldw	r7,-28(fp)
 4402230:	e1bff817 	ldw	r6,-32(fp)
 4402234:	e17ffc17 	ldw	r5,-16(fp)
 4402238:	e13ffb17 	ldw	r4,-20(fp)
 440223c:	44026a80 	call	44026a8 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4402240:	00002406 	br	44022d4 <vid_draw_circle+0x118>
    x++;
 4402244:	e0bff817 	ldw	r2,-32(fp)
 4402248:	10800044 	addi	r2,r2,1
 440224c:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4402250:	e0bffa17 	ldw	r2,-24(fp)
 4402254:	1000070e 	bge	r2,zero,4402274 <vid_draw_circle+0xb8>
      p += 2*x+1;
 4402258:	e0bff817 	ldw	r2,-32(fp)
 440225c:	1085883a 	add	r2,r2,r2
 4402260:	10800044 	addi	r2,r2,1
 4402264:	e0fffa17 	ldw	r3,-24(fp)
 4402268:	1885883a 	add	r2,r3,r2
 440226c:	e0bffa15 	stw	r2,-24(fp)
 4402270:	00000b06 	br	44022a0 <vid_draw_circle+0xe4>
    } else {
      y--;
 4402274:	e0bff917 	ldw	r2,-28(fp)
 4402278:	10bfffc4 	addi	r2,r2,-1
 440227c:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4402280:	e0fff817 	ldw	r3,-32(fp)
 4402284:	e0bff917 	ldw	r2,-28(fp)
 4402288:	1885c83a 	sub	r2,r3,r2
 440228c:	1085883a 	add	r2,r2,r2
 4402290:	10800044 	addi	r2,r2,1
 4402294:	e0fffa17 	ldw	r3,-24(fp)
 4402298:	1885883a 	add	r2,r3,r2
 440229c:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 44022a0:	e0bfff07 	ldb	r2,-4(fp)
 44022a4:	e0c00317 	ldw	r3,12(fp)
 44022a8:	d8c00415 	stw	r3,16(sp)
 44022ac:	d8800315 	stw	r2,12(sp)
 44022b0:	e0bffe17 	ldw	r2,-8(fp)
 44022b4:	d8800215 	stw	r2,8(sp)
 44022b8:	d8000115 	stw	zero,4(sp)
 44022bc:	d8000015 	stw	zero,0(sp)
 44022c0:	e1fff917 	ldw	r7,-28(fp)
 44022c4:	e1bff817 	ldw	r6,-32(fp)
 44022c8:	e17ffc17 	ldw	r5,-16(fp)
 44022cc:	e13ffb17 	ldw	r4,-20(fp)
 44022d0:	44026a80 	call	44026a8 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 44022d4:	e0fff817 	ldw	r3,-32(fp)
 44022d8:	e0bff917 	ldw	r2,-28(fp)
 44022dc:	18bfd916 	blt	r3,r2,4402244 <__reset+0xfb3fe244>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 44022e0:	0005883a 	mov	r2,zero
}
 44022e4:	e037883a 	mov	sp,fp
 44022e8:	dfc00117 	ldw	ra,4(sp)
 44022ec:	df000017 	ldw	fp,0(sp)
 44022f0:	dec00204 	addi	sp,sp,8
 44022f4:	f800283a 	ret

044022f8 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 44022f8:	deffec04 	addi	sp,sp,-80
 44022fc:	dfc01315 	stw	ra,76(sp)
 4402300:	df001215 	stw	fp,72(sp)
 4402304:	df001204 	addi	fp,sp,72
 4402308:	e13ffc15 	stw	r4,-16(fp)
 440230c:	e17ffd15 	stw	r5,-12(fp)
 4402310:	e1bffe15 	stw	r6,-8(fp)
 4402314:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4402318:	e0bffc17 	ldw	r2,-16(fp)
 440231c:	e0fffe17 	ldw	r3,-8(fp)
 4402320:	1880060e 	bge	r3,r2,440233c <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 4402324:	e0bffe17 	ldw	r2,-8(fp)
 4402328:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 440232c:	e0bffc17 	ldw	r2,-16(fp)
 4402330:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 4402334:	e0bff617 	ldw	r2,-40(fp)
 4402338:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 440233c:	e0bffd17 	ldw	r2,-12(fp)
 4402340:	e0ffff17 	ldw	r3,-4(fp)
 4402344:	1880060e 	bge	r3,r2,4402360 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 4402348:	e0bfff17 	ldw	r2,-4(fp)
 440234c:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4402350:	e0bffd17 	ldw	r2,-12(fp)
 4402354:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 4402358:	e0bff617 	ldw	r2,-40(fp)
 440235c:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 4402360:	e0fffe17 	ldw	r3,-8(fp)
 4402364:	e0bffc17 	ldw	r2,-16(fp)
 4402368:	1885c83a 	sub	r2,r3,r2
 440236c:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 4402370:	e0ffff17 	ldw	r3,-4(fp)
 4402374:	e0bffd17 	ldw	r2,-12(fp)
 4402378:	1885c83a 	sub	r2,r3,r2
 440237c:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 4402380:	e0bff717 	ldw	r2,-36(fp)
 4402384:	1006d07a 	srli	r3,r2,1
 4402388:	e0800217 	ldw	r2,8(fp)
 440238c:	1880032e 	bgeu	r3,r2,440239c <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 4402390:	e0bff717 	ldw	r2,-36(fp)
 4402394:	1004d07a 	srli	r2,r2,1
 4402398:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 440239c:	e0bff817 	ldw	r2,-32(fp)
 44023a0:	1006d07a 	srli	r3,r2,1
 44023a4:	e0800217 	ldw	r2,8(fp)
 44023a8:	1880032e 	bgeu	r3,r2,44023b8 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 44023ac:	e0bff817 	ldw	r2,-32(fp)
 44023b0:	1004d07a 	srli	r2,r2,1
 44023b4:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 44023b8:	e0800217 	ldw	r2,8(fp)
 44023bc:	1085883a 	add	r2,r2,r2
 44023c0:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 44023c4:	e0bff917 	ldw	r2,-28(fp)
 44023c8:	e0fff717 	ldw	r3,-36(fp)
 44023cc:	1885c83a 	sub	r2,r3,r2
 44023d0:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 44023d4:	e0bff917 	ldw	r2,-28(fp)
 44023d8:	e0fff817 	ldw	r3,-32(fp)
 44023dc:	1885c83a 	sub	r2,r3,r2
 44023e0:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 44023e4:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 44023e8:	e0800217 	ldw	r2,8(fp)
 44023ec:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 44023f0:	e0800217 	ldw	r2,8(fp)
 44023f4:	10bfff24 	muli	r2,r2,-4
 44023f8:	10800144 	addi	r2,r2,5
 44023fc:	1000010e 	bge	r2,zero,4402404 <vid_draw_round_corner_box+0x10c>
 4402400:	108000c4 	addi	r2,r2,3
 4402404:	1005d0ba 	srai	r2,r2,2
 4402408:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 440240c:	e0fffc17 	ldw	r3,-16(fp)
 4402410:	e0800217 	ldw	r2,8(fp)
 4402414:	1891883a 	add	r8,r3,r2
 4402418:	e0fffd17 	ldw	r3,-12(fp)
 440241c:	e0800217 	ldw	r2,8(fp)
 4402420:	1893883a 	add	r9,r3,r2
 4402424:	e1bff317 	ldw	r6,-52(fp)
 4402428:	e1fff417 	ldw	r7,-48(fp)
 440242c:	e0bffa17 	ldw	r2,-24(fp)
 4402430:	e0fffb17 	ldw	r3,-20(fp)
 4402434:	e1000417 	ldw	r4,16(fp)
 4402438:	21003fcc 	andi	r4,r4,255
 440243c:	2100201c 	xori	r4,r4,128
 4402440:	213fe004 	addi	r4,r4,-128
 4402444:	e1400517 	ldw	r5,20(fp)
 4402448:	d9400415 	stw	r5,16(sp)
 440244c:	d9000315 	stw	r4,12(sp)
 4402450:	e1000317 	ldw	r4,12(fp)
 4402454:	d9000215 	stw	r4,8(sp)
 4402458:	d8c00115 	stw	r3,4(sp)
 440245c:	d8800015 	stw	r2,0(sp)
 4402460:	480b883a 	mov	r5,r9
 4402464:	4009883a 	mov	r4,r8
 4402468:	44026a80 	call	44026a8 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 440246c:	00003106 	br	4402534 <vid_draw_round_corner_box+0x23c>
    x++;
 4402470:	e0bff317 	ldw	r2,-52(fp)
 4402474:	10800044 	addi	r2,r2,1
 4402478:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 440247c:	e0bff517 	ldw	r2,-44(fp)
 4402480:	1000080e 	bge	r2,zero,44024a4 <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
 4402484:	e0bff317 	ldw	r2,-52(fp)
 4402488:	1085883a 	add	r2,r2,r2
 440248c:	1007883a 	mov	r3,r2
 4402490:	e0bff517 	ldw	r2,-44(fp)
 4402494:	1885883a 	add	r2,r3,r2
 4402498:	10800044 	addi	r2,r2,1
 440249c:	e0bff515 	stw	r2,-44(fp)
 44024a0:	00000c06 	br	44024d4 <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
 44024a4:	e0bff417 	ldw	r2,-48(fp)
 44024a8:	10bfffc4 	addi	r2,r2,-1
 44024ac:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 44024b0:	e0fff317 	ldw	r3,-52(fp)
 44024b4:	e0bff417 	ldw	r2,-48(fp)
 44024b8:	1885c83a 	sub	r2,r3,r2
 44024bc:	1085883a 	add	r2,r2,r2
 44024c0:	1007883a 	mov	r3,r2
 44024c4:	e0bff517 	ldw	r2,-44(fp)
 44024c8:	1885883a 	add	r2,r3,r2
 44024cc:	10800044 	addi	r2,r2,1
 44024d0:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 44024d4:	e0fffc17 	ldw	r3,-16(fp)
 44024d8:	e0800217 	ldw	r2,8(fp)
 44024dc:	1891883a 	add	r8,r3,r2
 44024e0:	e0fffd17 	ldw	r3,-12(fp)
 44024e4:	e0800217 	ldw	r2,8(fp)
 44024e8:	1893883a 	add	r9,r3,r2
 44024ec:	e1bff317 	ldw	r6,-52(fp)
 44024f0:	e1fff417 	ldw	r7,-48(fp)
 44024f4:	e0bffa17 	ldw	r2,-24(fp)
 44024f8:	e0fffb17 	ldw	r3,-20(fp)
 44024fc:	e1000417 	ldw	r4,16(fp)
 4402500:	21003fcc 	andi	r4,r4,255
 4402504:	2100201c 	xori	r4,r4,128
 4402508:	213fe004 	addi	r4,r4,-128
 440250c:	e1400517 	ldw	r5,20(fp)
 4402510:	d9400415 	stw	r5,16(sp)
 4402514:	d9000315 	stw	r4,12(sp)
 4402518:	e1000317 	ldw	r4,12(fp)
 440251c:	d9000215 	stw	r4,8(sp)
 4402520:	d8c00115 	stw	r3,4(sp)
 4402524:	d8800015 	stw	r2,0(sp)
 4402528:	480b883a 	mov	r5,r9
 440252c:	4009883a 	mov	r4,r8
 4402530:	44026a80 	call	44026a8 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4402534:	e0fff317 	ldw	r3,-52(fp)
 4402538:	e0bff417 	ldw	r2,-48(fp)
 440253c:	18bfcc36 	bltu	r3,r2,4402470 <__reset+0xfb3fe470>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4402540:	e0800417 	ldw	r2,16(fp)
 4402544:	10001026 	beq	r2,zero,4402588 <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4402548:	e0fffd17 	ldw	r3,-12(fp)
 440254c:	e0800217 	ldw	r2,8(fp)
 4402550:	1889883a 	add	r4,r3,r2
 4402554:	e0ffff17 	ldw	r3,-4(fp)
 4402558:	e0800217 	ldw	r2,8(fp)
 440255c:	1887c83a 	sub	r3,r3,r2
 4402560:	e0800517 	ldw	r2,20(fp)
 4402564:	d8800115 	stw	r2,4(sp)
 4402568:	e0800317 	ldw	r2,12(fp)
 440256c:	d8800015 	stw	r2,0(sp)
 4402570:	180f883a 	mov	r7,r3
 4402574:	e1bffe17 	ldw	r6,-8(fp)
 4402578:	200b883a 	mov	r5,r4
 440257c:	e13ffc17 	ldw	r4,-16(fp)
 4402580:	4401c980 	call	4401c98 <vid_paint_block>
 4402584:	00004206 	br	4402690 <vid_draw_round_corner_box+0x398>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 4402588:	e0fffd17 	ldw	r3,-12(fp)
 440258c:	e0800217 	ldw	r2,8(fp)
 4402590:	1889883a 	add	r4,r3,r2
 4402594:	e0ffff17 	ldw	r3,-4(fp)
 4402598:	e0800217 	ldw	r2,8(fp)
 440259c:	1887c83a 	sub	r3,r3,r2
 44025a0:	e0800517 	ldw	r2,20(fp)
 44025a4:	d8800215 	stw	r2,8(sp)
 44025a8:	e0800317 	ldw	r2,12(fp)
 44025ac:	d8800115 	stw	r2,4(sp)
 44025b0:	00800044 	movi	r2,1
 44025b4:	d8800015 	stw	r2,0(sp)
 44025b8:	180f883a 	mov	r7,r3
 44025bc:	e1bffc17 	ldw	r6,-16(fp)
 44025c0:	200b883a 	mov	r5,r4
 44025c4:	e13ffc17 	ldw	r4,-16(fp)
 44025c8:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 44025cc:	e0fffd17 	ldw	r3,-12(fp)
 44025d0:	e0800217 	ldw	r2,8(fp)
 44025d4:	1889883a 	add	r4,r3,r2
 44025d8:	e0ffff17 	ldw	r3,-4(fp)
 44025dc:	e0800217 	ldw	r2,8(fp)
 44025e0:	1887c83a 	sub	r3,r3,r2
 44025e4:	e0800517 	ldw	r2,20(fp)
 44025e8:	d8800215 	stw	r2,8(sp)
 44025ec:	e0800317 	ldw	r2,12(fp)
 44025f0:	d8800115 	stw	r2,4(sp)
 44025f4:	00800044 	movi	r2,1
 44025f8:	d8800015 	stw	r2,0(sp)
 44025fc:	180f883a 	mov	r7,r3
 4402600:	e1bffe17 	ldw	r6,-8(fp)
 4402604:	200b883a 	mov	r5,r4
 4402608:	e13ffe17 	ldw	r4,-8(fp)
 440260c:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4402610:	e0fffc17 	ldw	r3,-16(fp)
 4402614:	e0800217 	ldw	r2,8(fp)
 4402618:	1889883a 	add	r4,r3,r2
 440261c:	e0fffe17 	ldw	r3,-8(fp)
 4402620:	e0800217 	ldw	r2,8(fp)
 4402624:	1887c83a 	sub	r3,r3,r2
 4402628:	e0800517 	ldw	r2,20(fp)
 440262c:	d8800215 	stw	r2,8(sp)
 4402630:	e0800317 	ldw	r2,12(fp)
 4402634:	d8800115 	stw	r2,4(sp)
 4402638:	00800044 	movi	r2,1
 440263c:	d8800015 	stw	r2,0(sp)
 4402640:	e1fffd17 	ldw	r7,-12(fp)
 4402644:	180d883a 	mov	r6,r3
 4402648:	e17ffd17 	ldw	r5,-12(fp)
 440264c:	440116c0 	call	440116c <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 4402650:	e0fffc17 	ldw	r3,-16(fp)
 4402654:	e0800217 	ldw	r2,8(fp)
 4402658:	1889883a 	add	r4,r3,r2
 440265c:	e0fffe17 	ldw	r3,-8(fp)
 4402660:	e0800217 	ldw	r2,8(fp)
 4402664:	1887c83a 	sub	r3,r3,r2
 4402668:	e0800517 	ldw	r2,20(fp)
 440266c:	d8800215 	stw	r2,8(sp)
 4402670:	e0800317 	ldw	r2,12(fp)
 4402674:	d8800115 	stw	r2,4(sp)
 4402678:	00800044 	movi	r2,1
 440267c:	d8800015 	stw	r2,0(sp)
 4402680:	e1ffff17 	ldw	r7,-4(fp)
 4402684:	180d883a 	mov	r6,r3
 4402688:	e17fff17 	ldw	r5,-4(fp)
 440268c:	440116c0 	call	440116c <vid_draw_line>
  }

  return (0);
 4402690:	0005883a 	mov	r2,zero
}
 4402694:	e037883a 	mov	sp,fp
 4402698:	dfc00117 	ldw	ra,4(sp)
 440269c:	df000017 	ldw	fp,0(sp)
 44026a0:	dec00204 	addi	sp,sp,8
 44026a4:	f800283a 	ret

044026a8 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 44026a8:	defff604 	addi	sp,sp,-40
 44026ac:	dfc00915 	stw	ra,36(sp)
 44026b0:	df000815 	stw	fp,32(sp)
 44026b4:	df000804 	addi	fp,sp,32
 44026b8:	e13ffb15 	stw	r4,-20(fp)
 44026bc:	e17ffc15 	stw	r5,-16(fp)
 44026c0:	e1bffd15 	stw	r6,-12(fp)
 44026c4:	e1fffe15 	stw	r7,-8(fp)
 44026c8:	e0800517 	ldw	r2,20(fp)
 44026cc:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 44026d0:	e0bffd17 	ldw	r2,-12(fp)
 44026d4:	1000841e 	bne	r2,zero,44028e8 <vid_round_corner_points+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 44026d8:	e0fffc17 	ldw	r3,-16(fp)
 44026dc:	e0bffe17 	ldw	r2,-8(fp)
 44026e0:	1887883a 	add	r3,r3,r2
 44026e4:	e0800317 	ldw	r2,12(fp)
 44026e8:	1885883a 	add	r2,r3,r2
 44026ec:	e0c00417 	ldw	r3,16(fp)
 44026f0:	e1c00617 	ldw	r7,24(fp)
 44026f4:	180d883a 	mov	r6,r3
 44026f8:	100b883a 	mov	r5,r2
 44026fc:	e13ffb17 	ldw	r4,-20(fp)
 4402700:	4401bb40 	call	4401bb4 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 4402704:	e0fffb17 	ldw	r3,-20(fp)
 4402708:	e0800217 	ldw	r2,8(fp)
 440270c:	1889883a 	add	r4,r3,r2
 4402710:	e0fffc17 	ldw	r3,-16(fp)
 4402714:	e0bffe17 	ldw	r2,-8(fp)
 4402718:	1887883a 	add	r3,r3,r2
 440271c:	e0800317 	ldw	r2,12(fp)
 4402720:	1885883a 	add	r2,r3,r2
 4402724:	e0c00417 	ldw	r3,16(fp)
 4402728:	e1c00617 	ldw	r7,24(fp)
 440272c:	180d883a 	mov	r6,r3
 4402730:	100b883a 	mov	r5,r2
 4402734:	4401bb40 	call	4401bb4 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4402738:	e0fffc17 	ldw	r3,-16(fp)
 440273c:	e0bffe17 	ldw	r2,-8(fp)
 4402740:	1885c83a 	sub	r2,r3,r2
 4402744:	e0c00417 	ldw	r3,16(fp)
 4402748:	e1c00617 	ldw	r7,24(fp)
 440274c:	180d883a 	mov	r6,r3
 4402750:	100b883a 	mov	r5,r2
 4402754:	e13ffb17 	ldw	r4,-20(fp)
 4402758:	4401bb40 	call	4401bb4 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 440275c:	e0fffb17 	ldw	r3,-20(fp)
 4402760:	e0800217 	ldw	r2,8(fp)
 4402764:	1889883a 	add	r4,r3,r2
 4402768:	e0fffc17 	ldw	r3,-16(fp)
 440276c:	e0bffe17 	ldw	r2,-8(fp)
 4402770:	1885c83a 	sub	r2,r3,r2
 4402774:	e0c00417 	ldw	r3,16(fp)
 4402778:	e1c00617 	ldw	r7,24(fp)
 440277c:	180d883a 	mov	r6,r3
 4402780:	100b883a 	mov	r5,r2
 4402784:	4401bb40 	call	4401bb4 <vid_set_pixel>

        if(fill) {
 4402788:	e0bfff07 	ldb	r2,-4(fp)
 440278c:	10002926 	beq	r2,zero,4402834 <vid_round_corner_points+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 4402790:	e0fffb17 	ldw	r3,-20(fp)
 4402794:	e0bffe17 	ldw	r2,-8(fp)
 4402798:	1889c83a 	sub	r4,r3,r2
 440279c:	e0fffb17 	ldw	r3,-20(fp)
 44027a0:	e0bffe17 	ldw	r2,-8(fp)
 44027a4:	1887883a 	add	r3,r3,r2
 44027a8:	e0800217 	ldw	r2,8(fp)
 44027ac:	1887883a 	add	r3,r3,r2
 44027b0:	e0800617 	ldw	r2,24(fp)
 44027b4:	d8800215 	stw	r2,8(sp)
 44027b8:	e0800417 	ldw	r2,16(fp)
 44027bc:	d8800115 	stw	r2,4(sp)
 44027c0:	00800044 	movi	r2,1
 44027c4:	d8800015 	stw	r2,0(sp)
 44027c8:	e1fffc17 	ldw	r7,-16(fp)
 44027cc:	180d883a 	mov	r6,r3
 44027d0:	e17ffc17 	ldw	r5,-16(fp)
 44027d4:	440116c0 	call	440116c <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 44027d8:	e0fffb17 	ldw	r3,-20(fp)
 44027dc:	e0bffe17 	ldw	r2,-8(fp)
 44027e0:	1889c83a 	sub	r4,r3,r2
 44027e4:	e0fffc17 	ldw	r3,-16(fp)
 44027e8:	e0800317 	ldw	r2,12(fp)
 44027ec:	188b883a 	add	r5,r3,r2
 44027f0:	e0fffb17 	ldw	r3,-20(fp)
 44027f4:	e0bffe17 	ldw	r2,-8(fp)
 44027f8:	1887883a 	add	r3,r3,r2
 44027fc:	e0800217 	ldw	r2,8(fp)
 4402800:	188d883a 	add	r6,r3,r2
 4402804:	e0fffc17 	ldw	r3,-16(fp)
 4402808:	e0800317 	ldw	r2,12(fp)
 440280c:	1887883a 	add	r3,r3,r2
 4402810:	e0800617 	ldw	r2,24(fp)
 4402814:	d8800215 	stw	r2,8(sp)
 4402818:	e0800417 	ldw	r2,16(fp)
 440281c:	d8800115 	stw	r2,4(sp)
 4402820:	00800044 	movi	r2,1
 4402824:	d8800015 	stw	r2,0(sp)
 4402828:	180f883a 	mov	r7,r3
 440282c:	440116c0 	call	440116c <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4402830:	00016606 	br	4402dcc <vid_round_corner_points+0x724>
        if(fill) {
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 4402834:	e0fffb17 	ldw	r3,-20(fp)
 4402838:	e0bffe17 	ldw	r2,-8(fp)
 440283c:	1887883a 	add	r3,r3,r2
 4402840:	e0800217 	ldw	r2,8(fp)
 4402844:	1885883a 	add	r2,r3,r2
 4402848:	e0c00417 	ldw	r3,16(fp)
 440284c:	e1c00617 	ldw	r7,24(fp)
 4402850:	180d883a 	mov	r6,r3
 4402854:	e17ffc17 	ldw	r5,-16(fp)
 4402858:	1009883a 	mov	r4,r2
 440285c:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4402860:	e0fffb17 	ldw	r3,-20(fp)
 4402864:	e0bffe17 	ldw	r2,-8(fp)
 4402868:	1887883a 	add	r3,r3,r2
 440286c:	e0800217 	ldw	r2,8(fp)
 4402870:	1889883a 	add	r4,r3,r2
 4402874:	e0fffc17 	ldw	r3,-16(fp)
 4402878:	e0800317 	ldw	r2,12(fp)
 440287c:	1885883a 	add	r2,r3,r2
 4402880:	e0c00417 	ldw	r3,16(fp)
 4402884:	e1c00617 	ldw	r7,24(fp)
 4402888:	180d883a 	mov	r6,r3
 440288c:	100b883a 	mov	r5,r2
 4402890:	4401bb40 	call	4401bb4 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 4402894:	e0fffb17 	ldw	r3,-20(fp)
 4402898:	e0bffe17 	ldw	r2,-8(fp)
 440289c:	1885c83a 	sub	r2,r3,r2
 44028a0:	e0c00417 	ldw	r3,16(fp)
 44028a4:	e1c00617 	ldw	r7,24(fp)
 44028a8:	180d883a 	mov	r6,r3
 44028ac:	e17ffc17 	ldw	r5,-16(fp)
 44028b0:	1009883a 	mov	r4,r2
 44028b4:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 44028b8:	e0fffb17 	ldw	r3,-20(fp)
 44028bc:	e0bffe17 	ldw	r2,-8(fp)
 44028c0:	1889c83a 	sub	r4,r3,r2
 44028c4:	e0fffc17 	ldw	r3,-16(fp)
 44028c8:	e0800317 	ldw	r2,12(fp)
 44028cc:	1885883a 	add	r2,r3,r2
 44028d0:	e0c00417 	ldw	r3,16(fp)
 44028d4:	e1c00617 	ldw	r7,24(fp)
 44028d8:	180d883a 	mov	r6,r3
 44028dc:	100b883a 	mov	r5,r2
 44028e0:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 44028e4:	00013906 	br	4402dcc <vid_round_corner_points+0x724>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 44028e8:	e0fffd17 	ldw	r3,-12(fp)
 44028ec:	e0bffe17 	ldw	r2,-8(fp)
 44028f0:	1880681e 	bne	r3,r2,4402a94 <vid_round_corner_points+0x3ec>
      if(fill) {
 44028f4:	e0bfff07 	ldb	r2,-4(fp)
 44028f8:	10003126 	beq	r2,zero,44029c0 <vid_round_corner_points+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 44028fc:	e0fffb17 	ldw	r3,-20(fp)
 4402900:	e0bffd17 	ldw	r2,-12(fp)
 4402904:	1889c83a 	sub	r4,r3,r2
 4402908:	e0fffc17 	ldw	r3,-16(fp)
 440290c:	e0bffe17 	ldw	r2,-8(fp)
 4402910:	1887883a 	add	r3,r3,r2
 4402914:	e0800317 	ldw	r2,12(fp)
 4402918:	188b883a 	add	r5,r3,r2
 440291c:	e0fffb17 	ldw	r3,-20(fp)
 4402920:	e0bffd17 	ldw	r2,-12(fp)
 4402924:	1887883a 	add	r3,r3,r2
 4402928:	e0800217 	ldw	r2,8(fp)
 440292c:	188d883a 	add	r6,r3,r2
 4402930:	e0fffc17 	ldw	r3,-16(fp)
 4402934:	e0bffe17 	ldw	r2,-8(fp)
 4402938:	1887883a 	add	r3,r3,r2
 440293c:	e0800317 	ldw	r2,12(fp)
 4402940:	1887883a 	add	r3,r3,r2
 4402944:	e0800617 	ldw	r2,24(fp)
 4402948:	d8800215 	stw	r2,8(sp)
 440294c:	e0800417 	ldw	r2,16(fp)
 4402950:	d8800115 	stw	r2,4(sp)
 4402954:	00800044 	movi	r2,1
 4402958:	d8800015 	stw	r2,0(sp)
 440295c:	180f883a 	mov	r7,r3
 4402960:	440116c0 	call	440116c <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 4402964:	e0fffb17 	ldw	r3,-20(fp)
 4402968:	e0bffd17 	ldw	r2,-12(fp)
 440296c:	1889c83a 	sub	r4,r3,r2
 4402970:	e0fffc17 	ldw	r3,-16(fp)
 4402974:	e0bffe17 	ldw	r2,-8(fp)
 4402978:	188bc83a 	sub	r5,r3,r2
 440297c:	e0fffb17 	ldw	r3,-20(fp)
 4402980:	e0bffd17 	ldw	r2,-12(fp)
 4402984:	1887883a 	add	r3,r3,r2
 4402988:	e0800217 	ldw	r2,8(fp)
 440298c:	188d883a 	add	r6,r3,r2
 4402990:	e0fffc17 	ldw	r3,-16(fp)
 4402994:	e0bffe17 	ldw	r2,-8(fp)
 4402998:	1887c83a 	sub	r3,r3,r2
 440299c:	e0800617 	ldw	r2,24(fp)
 44029a0:	d8800215 	stw	r2,8(sp)
 44029a4:	e0800417 	ldw	r2,16(fp)
 44029a8:	d8800115 	stw	r2,4(sp)
 44029ac:	00800044 	movi	r2,1
 44029b0:	d8800015 	stw	r2,0(sp)
 44029b4:	180f883a 	mov	r7,r3
 44029b8:	440116c0 	call	440116c <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 44029bc:	00010306 	br	4402dcc <vid_round_corner_points+0x724>
      if(fill) {
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 44029c0:	e0fffb17 	ldw	r3,-20(fp)
 44029c4:	e0bffd17 	ldw	r2,-12(fp)
 44029c8:	1887883a 	add	r3,r3,r2
 44029cc:	e0800217 	ldw	r2,8(fp)
 44029d0:	1889883a 	add	r4,r3,r2
 44029d4:	e0fffc17 	ldw	r3,-16(fp)
 44029d8:	e0bffe17 	ldw	r2,-8(fp)
 44029dc:	1887883a 	add	r3,r3,r2
 44029e0:	e0800317 	ldw	r2,12(fp)
 44029e4:	1885883a 	add	r2,r3,r2
 44029e8:	e0c00417 	ldw	r3,16(fp)
 44029ec:	e1c00617 	ldw	r7,24(fp)
 44029f0:	180d883a 	mov	r6,r3
 44029f4:	100b883a 	mov	r5,r2
 44029f8:	4401bb40 	call	4401bb4 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 44029fc:	e0fffb17 	ldw	r3,-20(fp)
 4402a00:	e0bffd17 	ldw	r2,-12(fp)
 4402a04:	1889c83a 	sub	r4,r3,r2
 4402a08:	e0fffc17 	ldw	r3,-16(fp)
 4402a0c:	e0bffe17 	ldw	r2,-8(fp)
 4402a10:	1887883a 	add	r3,r3,r2
 4402a14:	e0800317 	ldw	r2,12(fp)
 4402a18:	1885883a 	add	r2,r3,r2
 4402a1c:	e0c00417 	ldw	r3,16(fp)
 4402a20:	e1c00617 	ldw	r7,24(fp)
 4402a24:	180d883a 	mov	r6,r3
 4402a28:	100b883a 	mov	r5,r2
 4402a2c:	4401bb40 	call	4401bb4 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4402a30:	e0fffb17 	ldw	r3,-20(fp)
 4402a34:	e0bffd17 	ldw	r2,-12(fp)
 4402a38:	1887883a 	add	r3,r3,r2
 4402a3c:	e0800217 	ldw	r2,8(fp)
 4402a40:	1889883a 	add	r4,r3,r2
 4402a44:	e0fffc17 	ldw	r3,-16(fp)
 4402a48:	e0bffe17 	ldw	r2,-8(fp)
 4402a4c:	1885c83a 	sub	r2,r3,r2
 4402a50:	e0c00417 	ldw	r3,16(fp)
 4402a54:	e1c00617 	ldw	r7,24(fp)
 4402a58:	180d883a 	mov	r6,r3
 4402a5c:	100b883a 	mov	r5,r2
 4402a60:	4401bb40 	call	4401bb4 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 4402a64:	e0fffb17 	ldw	r3,-20(fp)
 4402a68:	e0bffd17 	ldw	r2,-12(fp)
 4402a6c:	1889c83a 	sub	r4,r3,r2
 4402a70:	e0fffc17 	ldw	r3,-16(fp)
 4402a74:	e0bffe17 	ldw	r2,-8(fp)
 4402a78:	1885c83a 	sub	r2,r3,r2
 4402a7c:	e0c00417 	ldw	r3,16(fp)
 4402a80:	e1c00617 	ldw	r7,24(fp)
 4402a84:	180d883a 	mov	r6,r3
 4402a88:	100b883a 	mov	r5,r2
 4402a8c:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4402a90:	0000ce06 	br	4402dcc <vid_round_corner_points+0x724>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
        vid_set_pixel(cx - x, cy - y, color, display); // top left
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 4402a94:	e0fffd17 	ldw	r3,-12(fp)
 4402a98:	e0bffe17 	ldw	r2,-8(fp)
 4402a9c:	1880cb0e 	bge	r3,r2,4402dcc <vid_round_corner_points+0x724>
        if(fill) {
 4402aa0:	e0bfff07 	ldb	r2,-4(fp)
 4402aa4:	10006126 	beq	r2,zero,4402c2c <vid_round_corner_points+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 4402aa8:	e0fffb17 	ldw	r3,-20(fp)
 4402aac:	e0bffd17 	ldw	r2,-12(fp)
 4402ab0:	1889c83a 	sub	r4,r3,r2
 4402ab4:	e0fffc17 	ldw	r3,-16(fp)
 4402ab8:	e0bffe17 	ldw	r2,-8(fp)
 4402abc:	1887883a 	add	r3,r3,r2
 4402ac0:	e0800317 	ldw	r2,12(fp)
 4402ac4:	188b883a 	add	r5,r3,r2
 4402ac8:	e0fffb17 	ldw	r3,-20(fp)
 4402acc:	e0bffd17 	ldw	r2,-12(fp)
 4402ad0:	1887883a 	add	r3,r3,r2
 4402ad4:	e0800217 	ldw	r2,8(fp)
 4402ad8:	188d883a 	add	r6,r3,r2
 4402adc:	e0fffc17 	ldw	r3,-16(fp)
 4402ae0:	e0bffe17 	ldw	r2,-8(fp)
 4402ae4:	1887883a 	add	r3,r3,r2
 4402ae8:	e0800317 	ldw	r2,12(fp)
 4402aec:	1887883a 	add	r3,r3,r2
 4402af0:	e0800617 	ldw	r2,24(fp)
 4402af4:	d8800215 	stw	r2,8(sp)
 4402af8:	e0800417 	ldw	r2,16(fp)
 4402afc:	d8800115 	stw	r2,4(sp)
 4402b00:	00800044 	movi	r2,1
 4402b04:	d8800015 	stw	r2,0(sp)
 4402b08:	180f883a 	mov	r7,r3
 4402b0c:	440116c0 	call	440116c <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4402b10:	e0fffb17 	ldw	r3,-20(fp)
 4402b14:	e0bffe17 	ldw	r2,-8(fp)
 4402b18:	1889c83a 	sub	r4,r3,r2
 4402b1c:	e0fffc17 	ldw	r3,-16(fp)
 4402b20:	e0bffd17 	ldw	r2,-12(fp)
 4402b24:	1887883a 	add	r3,r3,r2
 4402b28:	e0800317 	ldw	r2,12(fp)
 4402b2c:	188b883a 	add	r5,r3,r2
 4402b30:	e0fffb17 	ldw	r3,-20(fp)
 4402b34:	e0bffe17 	ldw	r2,-8(fp)
 4402b38:	1887883a 	add	r3,r3,r2
 4402b3c:	e0800217 	ldw	r2,8(fp)
 4402b40:	188d883a 	add	r6,r3,r2
 4402b44:	e0fffc17 	ldw	r3,-16(fp)
 4402b48:	e0bffd17 	ldw	r2,-12(fp)
 4402b4c:	1887883a 	add	r3,r3,r2
 4402b50:	e0800317 	ldw	r2,12(fp)
 4402b54:	1887883a 	add	r3,r3,r2
 4402b58:	e0800617 	ldw	r2,24(fp)
 4402b5c:	d8800215 	stw	r2,8(sp)
 4402b60:	e0800417 	ldw	r2,16(fp)
 4402b64:	d8800115 	stw	r2,4(sp)
 4402b68:	00800044 	movi	r2,1
 4402b6c:	d8800015 	stw	r2,0(sp)
 4402b70:	180f883a 	mov	r7,r3
 4402b74:	440116c0 	call	440116c <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4402b78:	e0fffb17 	ldw	r3,-20(fp)
 4402b7c:	e0bffe17 	ldw	r2,-8(fp)
 4402b80:	1889c83a 	sub	r4,r3,r2
 4402b84:	e0fffc17 	ldw	r3,-16(fp)
 4402b88:	e0bffd17 	ldw	r2,-12(fp)
 4402b8c:	188bc83a 	sub	r5,r3,r2
 4402b90:	e0fffb17 	ldw	r3,-20(fp)
 4402b94:	e0bffe17 	ldw	r2,-8(fp)
 4402b98:	1887883a 	add	r3,r3,r2
 4402b9c:	e0800217 	ldw	r2,8(fp)
 4402ba0:	188d883a 	add	r6,r3,r2
 4402ba4:	e0fffc17 	ldw	r3,-16(fp)
 4402ba8:	e0bffd17 	ldw	r2,-12(fp)
 4402bac:	1887c83a 	sub	r3,r3,r2
 4402bb0:	e0800617 	ldw	r2,24(fp)
 4402bb4:	d8800215 	stw	r2,8(sp)
 4402bb8:	e0800417 	ldw	r2,16(fp)
 4402bbc:	d8800115 	stw	r2,4(sp)
 4402bc0:	00800044 	movi	r2,1
 4402bc4:	d8800015 	stw	r2,0(sp)
 4402bc8:	180f883a 	mov	r7,r3
 4402bcc:	440116c0 	call	440116c <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 4402bd0:	e0fffb17 	ldw	r3,-20(fp)
 4402bd4:	e0bffd17 	ldw	r2,-12(fp)
 4402bd8:	1889c83a 	sub	r4,r3,r2
 4402bdc:	e0fffc17 	ldw	r3,-16(fp)
 4402be0:	e0bffe17 	ldw	r2,-8(fp)
 4402be4:	188bc83a 	sub	r5,r3,r2
 4402be8:	e0fffb17 	ldw	r3,-20(fp)
 4402bec:	e0bffd17 	ldw	r2,-12(fp)
 4402bf0:	1887883a 	add	r3,r3,r2
 4402bf4:	e0800217 	ldw	r2,8(fp)
 4402bf8:	188d883a 	add	r6,r3,r2
 4402bfc:	e0fffc17 	ldw	r3,-16(fp)
 4402c00:	e0bffe17 	ldw	r2,-8(fp)
 4402c04:	1887c83a 	sub	r3,r3,r2
 4402c08:	e0800617 	ldw	r2,24(fp)
 4402c0c:	d8800215 	stw	r2,8(sp)
 4402c10:	e0800417 	ldw	r2,16(fp)
 4402c14:	d8800115 	stw	r2,4(sp)
 4402c18:	00800044 	movi	r2,1
 4402c1c:	d8800015 	stw	r2,0(sp)
 4402c20:	180f883a 	mov	r7,r3
 4402c24:	440116c0 	call	440116c <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4402c28:	00006806 	br	4402dcc <vid_round_corner_points+0x724>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 4402c2c:	e0fffb17 	ldw	r3,-20(fp)
 4402c30:	e0bffd17 	ldw	r2,-12(fp)
 4402c34:	1887883a 	add	r3,r3,r2
 4402c38:	e0800217 	ldw	r2,8(fp)
 4402c3c:	1889883a 	add	r4,r3,r2
 4402c40:	e0fffc17 	ldw	r3,-16(fp)
 4402c44:	e0bffe17 	ldw	r2,-8(fp)
 4402c48:	1887883a 	add	r3,r3,r2
 4402c4c:	e0800317 	ldw	r2,12(fp)
 4402c50:	1885883a 	add	r2,r3,r2
 4402c54:	e0c00417 	ldw	r3,16(fp)
 4402c58:	e1c00617 	ldw	r7,24(fp)
 4402c5c:	180d883a 	mov	r6,r3
 4402c60:	100b883a 	mov	r5,r2
 4402c64:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4402c68:	e0fffb17 	ldw	r3,-20(fp)
 4402c6c:	e0bffd17 	ldw	r2,-12(fp)
 4402c70:	1889c83a 	sub	r4,r3,r2
 4402c74:	e0fffc17 	ldw	r3,-16(fp)
 4402c78:	e0bffe17 	ldw	r2,-8(fp)
 4402c7c:	1887883a 	add	r3,r3,r2
 4402c80:	e0800317 	ldw	r2,12(fp)
 4402c84:	1885883a 	add	r2,r3,r2
 4402c88:	e0c00417 	ldw	r3,16(fp)
 4402c8c:	e1c00617 	ldw	r7,24(fp)
 4402c90:	180d883a 	mov	r6,r3
 4402c94:	100b883a 	mov	r5,r2
 4402c98:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 4402c9c:	e0fffb17 	ldw	r3,-20(fp)
 4402ca0:	e0bffd17 	ldw	r2,-12(fp)
 4402ca4:	1887883a 	add	r3,r3,r2
 4402ca8:	e0800217 	ldw	r2,8(fp)
 4402cac:	1889883a 	add	r4,r3,r2
 4402cb0:	e0fffc17 	ldw	r3,-16(fp)
 4402cb4:	e0bffe17 	ldw	r2,-8(fp)
 4402cb8:	1885c83a 	sub	r2,r3,r2
 4402cbc:	e0c00417 	ldw	r3,16(fp)
 4402cc0:	e1c00617 	ldw	r7,24(fp)
 4402cc4:	180d883a 	mov	r6,r3
 4402cc8:	100b883a 	mov	r5,r2
 4402ccc:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 4402cd0:	e0fffb17 	ldw	r3,-20(fp)
 4402cd4:	e0bffd17 	ldw	r2,-12(fp)
 4402cd8:	1889c83a 	sub	r4,r3,r2
 4402cdc:	e0fffc17 	ldw	r3,-16(fp)
 4402ce0:	e0bffe17 	ldw	r2,-8(fp)
 4402ce4:	1885c83a 	sub	r2,r3,r2
 4402ce8:	e0c00417 	ldw	r3,16(fp)
 4402cec:	e1c00617 	ldw	r7,24(fp)
 4402cf0:	180d883a 	mov	r6,r3
 4402cf4:	100b883a 	mov	r5,r2
 4402cf8:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4402cfc:	e0fffb17 	ldw	r3,-20(fp)
 4402d00:	e0bffe17 	ldw	r2,-8(fp)
 4402d04:	1887883a 	add	r3,r3,r2
 4402d08:	e0800217 	ldw	r2,8(fp)
 4402d0c:	1889883a 	add	r4,r3,r2
 4402d10:	e0fffc17 	ldw	r3,-16(fp)
 4402d14:	e0bffd17 	ldw	r2,-12(fp)
 4402d18:	1887883a 	add	r3,r3,r2
 4402d1c:	e0800317 	ldw	r2,12(fp)
 4402d20:	1885883a 	add	r2,r3,r2
 4402d24:	e0c00417 	ldw	r3,16(fp)
 4402d28:	e1c00617 	ldw	r7,24(fp)
 4402d2c:	180d883a 	mov	r6,r3
 4402d30:	100b883a 	mov	r5,r2
 4402d34:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4402d38:	e0fffb17 	ldw	r3,-20(fp)
 4402d3c:	e0bffe17 	ldw	r2,-8(fp)
 4402d40:	1889c83a 	sub	r4,r3,r2
 4402d44:	e0fffc17 	ldw	r3,-16(fp)
 4402d48:	e0bffd17 	ldw	r2,-12(fp)
 4402d4c:	1887883a 	add	r3,r3,r2
 4402d50:	e0800317 	ldw	r2,12(fp)
 4402d54:	1885883a 	add	r2,r3,r2
 4402d58:	e0c00417 	ldw	r3,16(fp)
 4402d5c:	e1c00617 	ldw	r7,24(fp)
 4402d60:	180d883a 	mov	r6,r3
 4402d64:	100b883a 	mov	r5,r2
 4402d68:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4402d6c:	e0fffb17 	ldw	r3,-20(fp)
 4402d70:	e0bffe17 	ldw	r2,-8(fp)
 4402d74:	1887883a 	add	r3,r3,r2
 4402d78:	e0800217 	ldw	r2,8(fp)
 4402d7c:	1889883a 	add	r4,r3,r2
 4402d80:	e0fffc17 	ldw	r3,-16(fp)
 4402d84:	e0bffd17 	ldw	r2,-12(fp)
 4402d88:	1885c83a 	sub	r2,r3,r2
 4402d8c:	e0c00417 	ldw	r3,16(fp)
 4402d90:	e1c00617 	ldw	r7,24(fp)
 4402d94:	180d883a 	mov	r6,r3
 4402d98:	100b883a 	mov	r5,r2
 4402d9c:	4401bb40 	call	4401bb4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 4402da0:	e0fffb17 	ldw	r3,-20(fp)
 4402da4:	e0bffe17 	ldw	r2,-8(fp)
 4402da8:	1889c83a 	sub	r4,r3,r2
 4402dac:	e0fffc17 	ldw	r3,-16(fp)
 4402db0:	e0bffd17 	ldw	r2,-12(fp)
 4402db4:	1885c83a 	sub	r2,r3,r2
 4402db8:	e0c00417 	ldw	r3,16(fp)
 4402dbc:	e1c00617 	ldw	r7,24(fp)
 4402dc0:	180d883a 	mov	r6,r3
 4402dc4:	100b883a 	mov	r5,r2
 4402dc8:	4401bb40 	call	4401bb4 <vid_set_pixel>
        }
    }
}
 4402dcc:	0001883a 	nop
 4402dd0:	e037883a 	mov	sp,fp
 4402dd4:	dfc00117 	ldw	ra,4(sp)
 4402dd8:	df000017 	ldw	fp,0(sp)
 4402ddc:	dec00204 	addi	sp,sp,8
 4402de0:	f800283a 	ret

04402de4 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
int max3( int a, int b, int c )
{
 4402de4:	defffc04 	addi	sp,sp,-16
 4402de8:	df000315 	stw	fp,12(sp)
 4402dec:	df000304 	addi	fp,sp,12
 4402df0:	e13ffd15 	stw	r4,-12(fp)
 4402df4:	e17ffe15 	stw	r5,-8(fp)
 4402df8:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4402dfc:	e0fffd17 	ldw	r3,-12(fp)
 4402e00:	e0bffe17 	ldw	r2,-8(fp)
 4402e04:	1880020e 	bge	r3,r2,4402e10 <max3+0x2c>
    a = b;
 4402e08:	e0bffe17 	ldw	r2,-8(fp)
 4402e0c:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4402e10:	e0fffd17 	ldw	r3,-12(fp)
 4402e14:	e0bfff17 	ldw	r2,-4(fp)
 4402e18:	1880020e 	bge	r3,r2,4402e24 <max3+0x40>
    a = c;
 4402e1c:	e0bfff17 	ldw	r2,-4(fp)
 4402e20:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4402e24:	e0bffd17 	ldw	r2,-12(fp)
}
 4402e28:	e037883a 	mov	sp,fp
 4402e2c:	df000017 	ldw	fp,0(sp)
 4402e30:	dec00104 	addi	sp,sp,4
 4402e34:	f800283a 	ret

04402e38 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
int min3( int a, int b, int c )
{
 4402e38:	defffc04 	addi	sp,sp,-16
 4402e3c:	df000315 	stw	fp,12(sp)
 4402e40:	df000304 	addi	fp,sp,12
 4402e44:	e13ffd15 	stw	r4,-12(fp)
 4402e48:	e17ffe15 	stw	r5,-8(fp)
 4402e4c:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4402e50:	e0bffd17 	ldw	r2,-12(fp)
 4402e54:	e0fffe17 	ldw	r3,-8(fp)
 4402e58:	1880020e 	bge	r3,r2,4402e64 <min3+0x2c>
    a = b;
 4402e5c:	e0bffe17 	ldw	r2,-8(fp)
 4402e60:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4402e64:	e0bffd17 	ldw	r2,-12(fp)
 4402e68:	e0ffff17 	ldw	r3,-4(fp)
 4402e6c:	1880020e 	bge	r3,r2,4402e78 <min3+0x40>
    a = c;
 4402e70:	e0bfff17 	ldw	r2,-4(fp)
 4402e74:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4402e78:	e0bffd17 	ldw	r2,-12(fp)
}
 4402e7c:	e037883a 	mov	sp,fp
 4402e80:	df000017 	ldw	fp,0(sp)
 4402e84:	dec00104 	addi	sp,sp,4
 4402e88:	f800283a 	ret

04402e8c <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
int max_diff3(int a, int b, int c)
{
 4402e8c:	defff904 	addi	sp,sp,-28
 4402e90:	dfc00615 	stw	ra,24(sp)
 4402e94:	df000515 	stw	fp,20(sp)
 4402e98:	df000504 	addi	fp,sp,20
 4402e9c:	e13ffd15 	stw	r4,-12(fp)
 4402ea0:	e17ffe15 	stw	r5,-8(fp)
 4402ea4:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4402ea8:	e1bfff17 	ldw	r6,-4(fp)
 4402eac:	e17ffe17 	ldw	r5,-8(fp)
 4402eb0:	e13ffd17 	ldw	r4,-12(fp)
 4402eb4:	4402de40 	call	4402de4 <max3>
 4402eb8:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4402ebc:	e1bfff17 	ldw	r6,-4(fp)
 4402ec0:	e17ffe17 	ldw	r5,-8(fp)
 4402ec4:	e13ffd17 	ldw	r4,-12(fp)
 4402ec8:	4402e380 	call	4402e38 <min3>
 4402ecc:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4402ed0:	e0fffb17 	ldw	r3,-20(fp)
 4402ed4:	e0bffc17 	ldw	r2,-16(fp)
 4402ed8:	1885c83a 	sub	r2,r3,r2
}
 4402edc:	e037883a 	mov	sp,fp
 4402ee0:	dfc00117 	ldw	ra,4(sp)
 4402ee4:	df000017 	ldw	fp,0(sp)
 4402ee8:	dec00204 	addi	sp,sp,8
 4402eec:	f800283a 	ret

04402ef0 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4402ef0:	defffc04 	addi	sp,sp,-16
 4402ef4:	df000315 	stw	fp,12(sp)
 4402ef8:	df000304 	addi	fp,sp,12
 4402efc:	e13ffd15 	stw	r4,-12(fp)
 4402f00:	e17ffe15 	stw	r5,-8(fp)
 4402f04:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4402f08:	e0bffe17 	ldw	r2,-8(fp)
 4402f0c:	100490fa 	slli	r2,r2,3
 4402f10:	1007883a 	mov	r3,r2
 4402f14:	e0bfff17 	ldw	r2,-4(fp)
 4402f18:	10c5883a 	add	r2,r2,r3
 4402f1c:	10800017 	ldw	r2,0(r2)
 4402f20:	10bfffd8 	cmpnei	r2,r2,-1
 4402f24:	10000f1e 	bne	r2,zero,4402f64 <vid_put_pixel_in_span_map+0x74>
  {
    span_array[y*2] = x;
 4402f28:	e0bffe17 	ldw	r2,-8(fp)
 4402f2c:	100490fa 	slli	r2,r2,3
 4402f30:	1007883a 	mov	r3,r2
 4402f34:	e0bfff17 	ldw	r2,-4(fp)
 4402f38:	10c5883a 	add	r2,r2,r3
 4402f3c:	e0fffd17 	ldw	r3,-12(fp)
 4402f40:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 4402f44:	e0bffe17 	ldw	r2,-8(fp)
 4402f48:	100490fa 	slli	r2,r2,3
 4402f4c:	10800104 	addi	r2,r2,4
 4402f50:	e0ffff17 	ldw	r3,-4(fp)
 4402f54:	1885883a 	add	r2,r3,r2
 4402f58:	e0fffd17 	ldw	r3,-12(fp)
 4402f5c:	10c00015 	stw	r3,0(r2)
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4402f60:	00001f06 	br	4402fe0 <vid_put_pixel_in_span_map+0xf0>
  if (span_array[y*2] == -1)
  {
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
 4402f64:	e0bffe17 	ldw	r2,-8(fp)
 4402f68:	100490fa 	slli	r2,r2,3
 4402f6c:	1007883a 	mov	r3,r2
 4402f70:	e0bfff17 	ldw	r2,-4(fp)
 4402f74:	10c5883a 	add	r2,r2,r3
 4402f78:	10800017 	ldw	r2,0(r2)
 4402f7c:	e0fffd17 	ldw	r3,-12(fp)
 4402f80:	1880080e 	bge	r3,r2,4402fa4 <vid_put_pixel_in_span_map+0xb4>
    span_array[y*2] = x;
 4402f84:	e0bffe17 	ldw	r2,-8(fp)
 4402f88:	100490fa 	slli	r2,r2,3
 4402f8c:	1007883a 	mov	r3,r2
 4402f90:	e0bfff17 	ldw	r2,-4(fp)
 4402f94:	10c5883a 	add	r2,r2,r3
 4402f98:	e0fffd17 	ldw	r3,-12(fp)
 4402f9c:	10c00015 	stw	r3,0(r2)
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4402fa0:	00000f06 	br	4402fe0 <vid_put_pixel_in_span_map+0xf0>
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
 4402fa4:	e0bffe17 	ldw	r2,-8(fp)
 4402fa8:	100490fa 	slli	r2,r2,3
 4402fac:	10800104 	addi	r2,r2,4
 4402fb0:	e0ffff17 	ldw	r3,-4(fp)
 4402fb4:	1885883a 	add	r2,r3,r2
 4402fb8:	10c00017 	ldw	r3,0(r2)
 4402fbc:	e0bffd17 	ldw	r2,-12(fp)
 4402fc0:	1880070e 	bge	r3,r2,4402fe0 <vid_put_pixel_in_span_map+0xf0>
    span_array[(y*2)+1] = x;
 4402fc4:	e0bffe17 	ldw	r2,-8(fp)
 4402fc8:	100490fa 	slli	r2,r2,3
 4402fcc:	10800104 	addi	r2,r2,4
 4402fd0:	e0ffff17 	ldw	r3,-4(fp)
 4402fd4:	1885883a 	add	r2,r3,r2
 4402fd8:	e0fffd17 	ldw	r3,-12(fp)
 4402fdc:	10c00015 	stw	r3,0(r2)
}
 4402fe0:	0001883a 	nop
 4402fe4:	e037883a 	mov	sp,fp
 4402fe8:	df000017 	ldw	fp,0(sp)
 4402fec:	dec00104 	addi	sp,sp,4
 4402ff0:	f800283a 	ret

04402ff4 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 4402ff4:	deffee04 	addi	sp,sp,-72
 4402ff8:	dfc01115 	stw	ra,68(sp)
 4402ffc:	df001015 	stw	fp,64(sp)
 4403000:	df001004 	addi	fp,sp,64
 4403004:	e13ffc15 	stw	r4,-16(fp)
 4403008:	e17ffd15 	stw	r5,-12(fp)
 440300c:	e1bffe15 	stw	r6,-8(fp)
 4403010:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 4403014:	e0bffc17 	ldw	r2,-16(fp)
 4403018:	e0fffe17 	ldw	r3,-8(fp)
 440301c:	18800c0e 	bge	r3,r2,4403050 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 4403020:	e0bffe17 	ldw	r2,-8(fp)
 4403024:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4403028:	e0bffc17 	ldw	r2,-16(fp)
 440302c:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4403030:	e0bff517 	ldw	r2,-44(fp)
 4403034:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4403038:	e0bfff17 	ldw	r2,-4(fp)
 440303c:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4403040:	e0bffd17 	ldw	r2,-12(fp)
 4403044:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4403048:	e0bff617 	ldw	r2,-40(fp)
 440304c:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4403050:	e0fffd17 	ldw	r3,-12(fp)
 4403054:	e0bfff17 	ldw	r2,-4(fp)
 4403058:	1885c83a 	sub	r2,r3,r2
 440305c:	1000010e 	bge	r2,zero,4403064 <vid_bres_scan_edges+0x70>
 4403060:	0085c83a 	sub	r2,zero,r2
 4403064:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4403068:	e0fffe17 	ldw	r3,-8(fp)
 440306c:	e0bffc17 	ldw	r2,-16(fp)
 4403070:	1885c83a 	sub	r2,r3,r2
 4403074:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4403078:	e0bffd17 	ldw	r2,-12(fp)
 440307c:	e0ffff17 	ldw	r3,-4(fp)
 4403080:	1880030e 	bge	r3,r2,4403090 <vid_bres_scan_edges+0x9c>
 4403084:	00bfffc4 	movi	r2,-1
 4403088:	e0bff015 	stw	r2,-64(fp)
 440308c:	00000206 	br	4403098 <vid_bres_scan_edges+0xa4>
 4403090:	00800044 	movi	r2,1
 4403094:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 4403098:	00800044 	movi	r2,1
 440309c:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 44030a0:	e0fff217 	ldw	r3,-56(fp)
 44030a4:	e0bff117 	ldw	r2,-60(fp)
 44030a8:	18802f16 	blt	r3,r2,4403168 <vid_bres_scan_edges+0x174>
    int dPr   = y_delta<<1;
 44030ac:	e0bff117 	ldw	r2,-60(fp)
 44030b0:	1085883a 	add	r2,r2,r2
 44030b4:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 44030b8:	e0bff217 	ldw	r2,-56(fp)
 44030bc:	1085883a 	add	r2,r2,r2
 44030c0:	1007883a 	mov	r3,r2
 44030c4:	e0bff817 	ldw	r2,-32(fp)
 44030c8:	10c5c83a 	sub	r2,r2,r3
 44030cc:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 44030d0:	e0fff817 	ldw	r3,-32(fp)
 44030d4:	e0bff217 	ldw	r2,-56(fp)
 44030d8:	1885c83a 	sub	r2,r3,r2
 44030dc:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 44030e0:	00001e06 	br	440315c <vid_bres_scan_edges+0x168>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 44030e4:	e1800217 	ldw	r6,8(fp)
 44030e8:	e17ffd17 	ldw	r5,-12(fp)
 44030ec:	e13ffc17 	ldw	r4,-16(fp)
 44030f0:	4402ef00 	call	4402ef0 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 44030f4:	e0bff317 	ldw	r2,-52(fp)
 44030f8:	00800d0e 	bge	zero,r2,4403130 <vid_bres_scan_edges+0x13c>
        x1+=x_incr;
 44030fc:	e0fffc17 	ldw	r3,-16(fp)
 4403100:	e0bff717 	ldw	r2,-36(fp)
 4403104:	1885883a 	add	r2,r3,r2
 4403108:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 440310c:	e0fffd17 	ldw	r3,-12(fp)
 4403110:	e0bff017 	ldw	r2,-64(fp)
 4403114:	1885883a 	add	r2,r3,r2
 4403118:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 440311c:	e0fff317 	ldw	r3,-52(fp)
 4403120:	e0bff917 	ldw	r2,-28(fp)
 4403124:	1885883a 	add	r2,r3,r2
 4403128:	e0bff315 	stw	r2,-52(fp)
 440312c:	00000806 	br	4403150 <vid_bres_scan_edges+0x15c>
      } else {
        x1+=x_incr;
 4403130:	e0fffc17 	ldw	r3,-16(fp)
 4403134:	e0bff717 	ldw	r2,-36(fp)
 4403138:	1885883a 	add	r2,r3,r2
 440313c:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 4403140:	e0fff317 	ldw	r3,-52(fp)
 4403144:	e0bff817 	ldw	r2,-32(fp)
 4403148:	1885883a 	add	r2,r3,r2
 440314c:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4403150:	e0bff217 	ldw	r2,-56(fp)
 4403154:	10bfffc4 	addi	r2,r2,-1
 4403158:	e0bff215 	stw	r2,-56(fp)
 440315c:	e0bff217 	ldw	r2,-56(fp)
 4403160:	103fe00e 	bge	r2,zero,44030e4 <__reset+0xfb3ff0e4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4403164:	00002e06 	br	4403220 <vid_bres_scan_edges+0x22c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 4403168:	e0bff217 	ldw	r2,-56(fp)
 440316c:	1085883a 	add	r2,r2,r2
 4403170:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 4403174:	e0bff117 	ldw	r2,-60(fp)
 4403178:	1085883a 	add	r2,r2,r2
 440317c:	1007883a 	mov	r3,r2
 4403180:	e0bffa17 	ldw	r2,-24(fp)
 4403184:	10c5c83a 	sub	r2,r2,r3
 4403188:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 440318c:	e0fffa17 	ldw	r3,-24(fp)
 4403190:	e0bff117 	ldw	r2,-60(fp)
 4403194:	1885c83a 	sub	r2,r3,r2
 4403198:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 440319c:	00001e06 	br	4403218 <vid_bres_scan_edges+0x224>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 44031a0:	e1800217 	ldw	r6,8(fp)
 44031a4:	e17ffd17 	ldw	r5,-12(fp)
 44031a8:	e13ffc17 	ldw	r4,-16(fp)
 44031ac:	4402ef00 	call	4402ef0 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 44031b0:	e0bff417 	ldw	r2,-48(fp)
 44031b4:	00800d0e 	bge	zero,r2,44031ec <vid_bres_scan_edges+0x1f8>
        x1+=x_incr;
 44031b8:	e0fffc17 	ldw	r3,-16(fp)
 44031bc:	e0bff717 	ldw	r2,-36(fp)
 44031c0:	1885883a 	add	r2,r3,r2
 44031c4:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 44031c8:	e0fffd17 	ldw	r3,-12(fp)
 44031cc:	e0bff017 	ldw	r2,-64(fp)
 44031d0:	1885883a 	add	r2,r3,r2
 44031d4:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 44031d8:	e0fff417 	ldw	r3,-48(fp)
 44031dc:	e0bffb17 	ldw	r2,-20(fp)
 44031e0:	1885883a 	add	r2,r3,r2
 44031e4:	e0bff415 	stw	r2,-48(fp)
 44031e8:	00000806 	br	440320c <vid_bres_scan_edges+0x218>
      } else {
        y1+=y_incr;
 44031ec:	e0fffd17 	ldw	r3,-12(fp)
 44031f0:	e0bff017 	ldw	r2,-64(fp)
 44031f4:	1885883a 	add	r2,r3,r2
 44031f8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 44031fc:	e0fff417 	ldw	r3,-48(fp)
 4403200:	e0bffa17 	ldw	r2,-24(fp)
 4403204:	1885883a 	add	r2,r3,r2
 4403208:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 440320c:	e0bff117 	ldw	r2,-60(fp)
 4403210:	10bfffc4 	addi	r2,r2,-1
 4403214:	e0bff115 	stw	r2,-60(fp)
 4403218:	e0bff117 	ldw	r2,-60(fp)
 440321c:	103fe00e 	bge	r2,zero,44031a0 <__reset+0xfb3ff1a0>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4403220:	0001883a 	nop
 4403224:	e037883a 	mov	sp,fp
 4403228:	dfc00117 	ldw	ra,4(sp)
 440322c:	df000017 	ldw	fp,0(sp)
 4403230:	dec00204 	addi	sp,sp,8
 4403234:	f800283a 	ret

04403238 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 4403238:	defff804 	addi	sp,sp,-32
 440323c:	dfc00715 	stw	ra,28(sp)
 4403240:	df000615 	stw	fp,24(sp)
 4403244:	df000604 	addi	fp,sp,24
 4403248:	e13ffe15 	stw	r4,-8(fp)
 440324c:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4403250:	e0bffe17 	ldw	r2,-8(fp)
 4403254:	11000017 	ldw	r4,0(r2)
 4403258:	e0bffe17 	ldw	r2,-8(fp)
 440325c:	11400317 	ldw	r5,12(r2)
 4403260:	e0bffe17 	ldw	r2,-8(fp)
 4403264:	11800117 	ldw	r6,4(r2)
 4403268:	e0bffe17 	ldw	r2,-8(fp)
 440326c:	11c00417 	ldw	r7,16(r2)
 4403270:	e0bffe17 	ldw	r2,-8(fp)
 4403274:	10800a17 	ldw	r2,40(r2)
 4403278:	e0ffff17 	ldw	r3,-4(fp)
 440327c:	d8c00215 	stw	r3,8(sp)
 4403280:	d8800115 	stw	r2,4(sp)
 4403284:	00800044 	movi	r2,1
 4403288:	d8800015 	stw	r2,0(sp)
 440328c:	440116c0 	call	440116c <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4403290:	e0bffe17 	ldw	r2,-8(fp)
 4403294:	11000117 	ldw	r4,4(r2)
 4403298:	e0bffe17 	ldw	r2,-8(fp)
 440329c:	11400417 	ldw	r5,16(r2)
 44032a0:	e0bffe17 	ldw	r2,-8(fp)
 44032a4:	11800217 	ldw	r6,8(r2)
 44032a8:	e0bffe17 	ldw	r2,-8(fp)
 44032ac:	11c00517 	ldw	r7,20(r2)
 44032b0:	e0bffe17 	ldw	r2,-8(fp)
 44032b4:	10800a17 	ldw	r2,40(r2)
 44032b8:	e0ffff17 	ldw	r3,-4(fp)
 44032bc:	d8c00215 	stw	r3,8(sp)
 44032c0:	d8800115 	stw	r2,4(sp)
 44032c4:	00800044 	movi	r2,1
 44032c8:	d8800015 	stw	r2,0(sp)
 44032cc:	440116c0 	call	440116c <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 44032d0:	e0bffe17 	ldw	r2,-8(fp)
 44032d4:	11000217 	ldw	r4,8(r2)
 44032d8:	e0bffe17 	ldw	r2,-8(fp)
 44032dc:	11400517 	ldw	r5,20(r2)
 44032e0:	e0bffe17 	ldw	r2,-8(fp)
 44032e4:	11800017 	ldw	r6,0(r2)
 44032e8:	e0bffe17 	ldw	r2,-8(fp)
 44032ec:	11c00317 	ldw	r7,12(r2)
 44032f0:	e0bffe17 	ldw	r2,-8(fp)
 44032f4:	10800a17 	ldw	r2,40(r2)
 44032f8:	e0ffff17 	ldw	r3,-4(fp)
 44032fc:	d8c00215 	stw	r3,8(sp)
 4403300:	d8800115 	stw	r2,4(sp)
 4403304:	00800044 	movi	r2,1
 4403308:	d8800015 	stw	r2,0(sp)
 440330c:	440116c0 	call	440116c <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4403310:	e0bffe17 	ldw	r2,-8(fp)
 4403314:	10800b17 	ldw	r2,44(r2)
 4403318:	10800058 	cmpnei	r2,r2,1
 440331c:	1000ad1e 	bne	r2,zero,44035d4 <vid_draw_triangle+0x39c>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4403320:	e0bffe17 	ldw	r2,-8(fp)
 4403324:	10c00317 	ldw	r3,12(r2)
 4403328:	e0bffe17 	ldw	r2,-8(fp)
 440332c:	11000417 	ldw	r4,16(r2)
 4403330:	e0bffe17 	ldw	r2,-8(fp)
 4403334:	10800517 	ldw	r2,20(r2)
 4403338:	100d883a 	mov	r6,r2
 440333c:	200b883a 	mov	r5,r4
 4403340:	1809883a 	mov	r4,r3
 4403344:	4402e380 	call	4402e38 <min3>
 4403348:	1007883a 	mov	r3,r2
 440334c:	e0bffe17 	ldw	r2,-8(fp)
 4403350:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4403354:	e0bffe17 	ldw	r2,-8(fp)
 4403358:	10c00317 	ldw	r3,12(r2)
 440335c:	e0bffe17 	ldw	r2,-8(fp)
 4403360:	11000417 	ldw	r4,16(r2)
 4403364:	e0bffe17 	ldw	r2,-8(fp)
 4403368:	10800517 	ldw	r2,20(r2)
 440336c:	100d883a 	mov	r6,r2
 4403370:	200b883a 	mov	r5,r4
 4403374:	1809883a 	mov	r4,r3
 4403378:	4402de40 	call	4402de4 <max3>
 440337c:	1007883a 	mov	r3,r2
 4403380:	e0bffe17 	ldw	r2,-8(fp)
 4403384:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4403388:	e0bffe17 	ldw	r2,-8(fp)
 440338c:	10c00317 	ldw	r3,12(r2)
 4403390:	e0bffe17 	ldw	r2,-8(fp)
 4403394:	11000417 	ldw	r4,16(r2)
 4403398:	e0bffe17 	ldw	r2,-8(fp)
 440339c:	10800517 	ldw	r2,20(r2)
 44033a0:	100d883a 	mov	r6,r2
 44033a4:	200b883a 	mov	r5,r4
 44033a8:	1809883a 	mov	r4,r3
 44033ac:	4402e8c0 	call	4402e8c <max_diff3>
 44033b0:	1007883a 	mov	r3,r2
 44033b4:	e0bffe17 	ldw	r2,-8(fp)
 44033b8:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 44033bc:	e0bffe17 	ldw	r2,-8(fp)
 44033c0:	10c00017 	ldw	r3,0(r2)
 44033c4:	e0bffe17 	ldw	r2,-8(fp)
 44033c8:	11000117 	ldw	r4,4(r2)
 44033cc:	e0bffe17 	ldw	r2,-8(fp)
 44033d0:	10800217 	ldw	r2,8(r2)
 44033d4:	100d883a 	mov	r6,r2
 44033d8:	200b883a 	mov	r5,r4
 44033dc:	1809883a 	mov	r4,r3
 44033e0:	4402e8c0 	call	4402e8c <max_diff3>
 44033e4:	1007883a 	mov	r3,r2
 44033e8:	e0bffe17 	ldw	r2,-8(fp)
 44033ec:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
 44033f0:	e0bfff17 	ldw	r2,-4(fp)
 44033f4:	10800217 	ldw	r2,8(r2)
 44033f8:	100490fa 	slli	r2,r2,3
 44033fc:	1009883a 	mov	r4,r2
 4403400:	440a3c80 	call	440a3c8 <malloc>
 4403404:	1007883a 	mov	r3,r2
 4403408:	e0bffe17 	ldw	r2,-8(fp)
 440340c:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4403410:	e0bffe17 	ldw	r2,-8(fp)
 4403414:	10800817 	ldw	r2,32(r2)
 4403418:	e0bffd15 	stw	r2,-12(fp)
 440341c:	00001206 	br	4403468 <vid_draw_triangle+0x230>
    {
      tri->span_array[i*2] = -1;
 4403420:	e0bffe17 	ldw	r2,-8(fp)
 4403424:	10800d17 	ldw	r2,52(r2)
 4403428:	e0fffd17 	ldw	r3,-12(fp)
 440342c:	180690fa 	slli	r3,r3,3
 4403430:	10c5883a 	add	r2,r2,r3
 4403434:	00ffffc4 	movi	r3,-1
 4403438:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 440343c:	e0bffe17 	ldw	r2,-8(fp)
 4403440:	10c00d17 	ldw	r3,52(r2)
 4403444:	e0bffd17 	ldw	r2,-12(fp)
 4403448:	100490fa 	slli	r2,r2,3
 440344c:	10800104 	addi	r2,r2,4
 4403450:	1885883a 	add	r2,r3,r2
 4403454:	00ffffc4 	movi	r3,-1
 4403458:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 440345c:	e0bffd17 	ldw	r2,-12(fp)
 4403460:	10800044 	addi	r2,r2,1
 4403464:	e0bffd15 	stw	r2,-12(fp)
 4403468:	e0bffe17 	ldw	r2,-8(fp)
 440346c:	10c00917 	ldw	r3,36(r2)
 4403470:	e0bffd17 	ldw	r2,-12(fp)
 4403474:	18bfea0e 	bge	r3,r2,4403420 <__reset+0xfb3ff420>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4403478:	e0bffe17 	ldw	r2,-8(fp)
 440347c:	10c00017 	ldw	r3,0(r2)
 4403480:	e0bffe17 	ldw	r2,-8(fp)
 4403484:	11000317 	ldw	r4,12(r2)
 4403488:	e0bffe17 	ldw	r2,-8(fp)
 440348c:	11400117 	ldw	r5,4(r2)
 4403490:	e0bffe17 	ldw	r2,-8(fp)
 4403494:	11800417 	ldw	r6,16(r2)
 4403498:	e0bffe17 	ldw	r2,-8(fp)
 440349c:	10800d17 	ldw	r2,52(r2)
 44034a0:	d8800015 	stw	r2,0(sp)
 44034a4:	300f883a 	mov	r7,r6
 44034a8:	280d883a 	mov	r6,r5
 44034ac:	200b883a 	mov	r5,r4
 44034b0:	1809883a 	mov	r4,r3
 44034b4:	4402ff40 	call	4402ff4 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 44034b8:	e0bffe17 	ldw	r2,-8(fp)
 44034bc:	10c00117 	ldw	r3,4(r2)
 44034c0:	e0bffe17 	ldw	r2,-8(fp)
 44034c4:	11000417 	ldw	r4,16(r2)
 44034c8:	e0bffe17 	ldw	r2,-8(fp)
 44034cc:	11400217 	ldw	r5,8(r2)
 44034d0:	e0bffe17 	ldw	r2,-8(fp)
 44034d4:	11800517 	ldw	r6,20(r2)
 44034d8:	e0bffe17 	ldw	r2,-8(fp)
 44034dc:	10800d17 	ldw	r2,52(r2)
 44034e0:	d8800015 	stw	r2,0(sp)
 44034e4:	300f883a 	mov	r7,r6
 44034e8:	280d883a 	mov	r6,r5
 44034ec:	200b883a 	mov	r5,r4
 44034f0:	1809883a 	mov	r4,r3
 44034f4:	4402ff40 	call	4402ff4 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 44034f8:	e0bffe17 	ldw	r2,-8(fp)
 44034fc:	10c00217 	ldw	r3,8(r2)
 4403500:	e0bffe17 	ldw	r2,-8(fp)
 4403504:	11000517 	ldw	r4,20(r2)
 4403508:	e0bffe17 	ldw	r2,-8(fp)
 440350c:	11400017 	ldw	r5,0(r2)
 4403510:	e0bffe17 	ldw	r2,-8(fp)
 4403514:	11800317 	ldw	r6,12(r2)
 4403518:	e0bffe17 	ldw	r2,-8(fp)
 440351c:	10800d17 	ldw	r2,52(r2)
 4403520:	d8800015 	stw	r2,0(sp)
 4403524:	300f883a 	mov	r7,r6
 4403528:	280d883a 	mov	r6,r5
 440352c:	200b883a 	mov	r5,r4
 4403530:	1809883a 	mov	r4,r3
 4403534:	4402ff40 	call	4402ff4 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4403538:	e0bffe17 	ldw	r2,-8(fp)
 440353c:	10800817 	ldw	r2,32(r2)
 4403540:	e0bffd15 	stw	r2,-12(fp)
 4403544:	00001b06 	br	44035b4 <vid_draw_triangle+0x37c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4403548:	e0bffe17 	ldw	r2,-8(fp)
 440354c:	10800d17 	ldw	r2,52(r2)
 4403550:	e0fffd17 	ldw	r3,-12(fp)
 4403554:	180690fa 	slli	r3,r3,3
 4403558:	10c5883a 	add	r2,r2,r3
 440355c:	11000017 	ldw	r4,0(r2)
 4403560:	e0bffe17 	ldw	r2,-8(fp)
 4403564:	10c00d17 	ldw	r3,52(r2)
 4403568:	e0bffd17 	ldw	r2,-12(fp)
 440356c:	100490fa 	slli	r2,r2,3
 4403570:	10800104 	addi	r2,r2,4
 4403574:	1885883a 	add	r2,r3,r2
 4403578:	11400017 	ldw	r5,0(r2)
 440357c:	e0bffe17 	ldw	r2,-8(fp)
 4403580:	10800a17 	ldw	r2,40(r2)
 4403584:	e0ffff17 	ldw	r3,-4(fp)
 4403588:	d8c00215 	stw	r3,8(sp)
 440358c:	d8800115 	stw	r2,4(sp)
 4403590:	00800044 	movi	r2,1
 4403594:	d8800015 	stw	r2,0(sp)
 4403598:	e1fffd17 	ldw	r7,-12(fp)
 440359c:	280d883a 	mov	r6,r5
 44035a0:	e17ffd17 	ldw	r5,-12(fp)
 44035a4:	440116c0 	call	440116c <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 44035a8:	e0bffd17 	ldw	r2,-12(fp)
 44035ac:	10800044 	addi	r2,r2,1
 44035b0:	e0bffd15 	stw	r2,-12(fp)
 44035b4:	e0bffe17 	ldw	r2,-8(fp)
 44035b8:	10c00917 	ldw	r3,36(r2)
 44035bc:	e0bffd17 	ldw	r2,-12(fp)
 44035c0:	18bfe10e 	bge	r3,r2,4403548 <__reset+0xfb3ff548>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 44035c4:	e0bffe17 	ldw	r2,-8(fp)
 44035c8:	10800d17 	ldw	r2,52(r2)
 44035cc:	1009883a 	mov	r4,r2
 44035d0:	440a3dc0 	call	440a3dc <free>
  }
}
 44035d4:	0001883a 	nop
 44035d8:	e037883a 	mov	sp,fp
 44035dc:	dfc00117 	ldw	ra,4(sp)
 44035e0:	df000017 	ldw	fp,0(sp)
 44035e4:	dec00204 	addi	sp,sp,8
 44035e8:	f800283a 	ret

044035ec <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 44035ec:	defff404 	addi	sp,sp,-48
 44035f0:	dfc00b15 	stw	ra,44(sp)
 44035f4:	df000a15 	stw	fp,40(sp)
 44035f8:	df000a04 	addi	fp,sp,40
 44035fc:	e13ffa15 	stw	r4,-24(fp)
 4403600:	e17ffb15 	stw	r5,-20(fp)
 4403604:	300b883a 	mov	r5,r6
 4403608:	3809883a 	mov	r4,r7
 440360c:	e0c00217 	ldw	r3,8(fp)
 4403610:	e0800317 	ldw	r2,12(fp)
 4403614:	e17ffc0d 	sth	r5,-16(fp)
 4403618:	e13ffd0d 	sth	r4,-12(fp)
 440361c:	e0fffe0d 	sth	r3,-8(fp)
 4403620:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 4403624:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 4403628:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 440362c:	e03ff615 	stw	zero,-40(fp)
 4403630:	e03ff715 	stw	zero,-36(fp)
 4403634:	00001e06 	br	44036b0 <CopyImage16+0xc4>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4403638:	e0bff917 	ldw	r2,-28(fp)
 440363c:	1085883a 	add	r2,r2,r2
 4403640:	1007883a 	mov	r3,r2
 4403644:	e0bffb17 	ldw	r2,-20(fp)
 4403648:	10c7883a 	add	r3,r2,r3
 440364c:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 4403650:	1085883a 	add	r2,r2,r2
 4403654:	1009883a 	mov	r4,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4403658:	e0bffa17 	ldw	r2,-24(fp)
 440365c:	1109883a 	add	r4,r2,r4
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4403660:	e0bffc0f 	ldh	r2,-16(fp)
 4403664:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4403668:	100d883a 	mov	r6,r2
 440366c:	200b883a 	mov	r5,r4
 4403670:	1809883a 	mov	r4,r3
 4403674:	440abfc0 	call	440abfc <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 4403678:	e0bff617 	ldw	r2,-40(fp)
 440367c:	10800044 	addi	r2,r2,1
 4403680:	e0bff615 	stw	r2,-40(fp)
 4403684:	e0bff717 	ldw	r2,-36(fp)
 4403688:	10800044 	addi	r2,r2,1
 440368c:	e0bff715 	stw	r2,-36(fp)
 4403690:	e0bffc0f 	ldh	r2,-16(fp)
 4403694:	e0fff817 	ldw	r3,-32(fp)
 4403698:	1885883a 	add	r2,r3,r2
 440369c:	e0bff815 	stw	r2,-32(fp)
 44036a0:	e0bffe0f 	ldh	r2,-8(fp)
 44036a4:	e0fff917 	ldw	r3,-28(fp)
 44036a8:	1885883a 	add	r2,r3,r2
 44036ac:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 44036b0:	e0bffd0f 	ldh	r2,-12(fp)
 44036b4:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 44036b8:	e0bff617 	ldw	r2,-40(fp)
 44036bc:	18bfde0e 	bge	r3,r2,4403638 <__reset+0xfb3ff638>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 44036c0:	0001883a 	nop
 44036c4:	e037883a 	mov	sp,fp
 44036c8:	dfc00117 	ldw	ra,4(sp)
 44036cc:	df000017 	ldw	fp,0(sp)
 44036d0:	dec00204 	addi	sp,sp,8
 44036d4:	f800283a 	ret

044036d8 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 44036d8:	defff004 	addi	sp,sp,-64
 44036dc:	dfc00f15 	stw	ra,60(sp)
 44036e0:	df000e15 	stw	fp,56(sp)
 44036e4:	df000e04 	addi	fp,sp,56
 44036e8:	e13ff615 	stw	r4,-40(fp)
 44036ec:	e17ff715 	stw	r5,-36(fp)
 44036f0:	3013883a 	mov	r9,r6
 44036f4:	3811883a 	mov	r8,r7
 44036f8:	e1c00217 	ldw	r7,8(fp)
 44036fc:	e1800317 	ldw	r6,12(fp)
 4403700:	e1400417 	ldw	r5,16(fp)
 4403704:	e1000517 	ldw	r4,20(fp)
 4403708:	e0c00617 	ldw	r3,24(fp)
 440370c:	e0800717 	ldw	r2,28(fp)
 4403710:	e27ff80d 	sth	r9,-32(fp)
 4403714:	e23ff90d 	sth	r8,-28(fp)
 4403718:	e1fffa0d 	sth	r7,-24(fp)
 440371c:	e1bffb0d 	sth	r6,-20(fp)
 4403720:	e17ffc0d 	sth	r5,-16(fp)
 4403724:	e13ffd0d 	sth	r4,-12(fp)
 4403728:	e0fffe0d 	sth	r3,-8(fp)
 440372c:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 4403730:	e0fff80f 	ldh	r3,-32(fp)
 4403734:	e0bffc0f 	ldh	r2,-16(fp)
 4403738:	1885383a 	mul	r2,r3,r2
 440373c:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 4403740:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4403744:	e0bffc0f 	ldh	r2,-16(fp)
 4403748:	e0bff215 	stw	r2,-56(fp)
 440374c:	e03ff315 	stw	zero,-52(fp)
 4403750:	00002206 	br	44037dc <CropImage16+0x104>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4403754:	e0bff517 	ldw	r2,-44(fp)
 4403758:	1085883a 	add	r2,r2,r2
 440375c:	1007883a 	mov	r3,r2
 4403760:	e0bff717 	ldw	r2,-36(fp)
 4403764:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 4403768:	e0fffa0f 	ldh	r3,-24(fp)
 440376c:	e0bff417 	ldw	r2,-48(fp)
 4403770:	1885883a 	add	r2,r3,r2
 4403774:	1085883a 	add	r2,r2,r2
 4403778:	1007883a 	mov	r3,r2
 440377c:	e0bff617 	ldw	r2,-40(fp)
 4403780:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 4403784:	e0fff80f 	ldh	r3,-32(fp)
 4403788:	e0bffa0f 	ldh	r2,-24(fp)
 440378c:	1887c83a 	sub	r3,r3,r2
 4403790:	e0bffb0f 	ldh	r2,-20(fp)
 4403794:	1885c83a 	sub	r2,r3,r2
 4403798:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 440379c:	100d883a 	mov	r6,r2
 44037a0:	440abfc0 	call	440abfc <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 44037a4:	e0bff217 	ldw	r2,-56(fp)
 44037a8:	10800044 	addi	r2,r2,1
 44037ac:	e0bff215 	stw	r2,-56(fp)
 44037b0:	e0bff317 	ldw	r2,-52(fp)
 44037b4:	10800044 	addi	r2,r2,1
 44037b8:	e0bff315 	stw	r2,-52(fp)
 44037bc:	e0bff80f 	ldh	r2,-32(fp)
 44037c0:	e0fff417 	ldw	r3,-48(fp)
 44037c4:	1885883a 	add	r2,r3,r2
 44037c8:	e0bff415 	stw	r2,-48(fp)
 44037cc:	e0bffe0f 	ldh	r2,-8(fp)
 44037d0:	e0fff517 	ldw	r3,-44(fp)
 44037d4:	1885883a 	add	r2,r3,r2
 44037d8:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 44037dc:	e0fff90f 	ldh	r3,-28(fp)
 44037e0:	e0bffd0f 	ldh	r2,-12(fp)
 44037e4:	1885c83a 	sub	r2,r3,r2
 44037e8:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 44037ec:	e0bff217 	ldw	r2,-56(fp)
 44037f0:	18bfd80e 	bge	r3,r2,4403754 <__reset+0xfb3ff754>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 44037f4:	0001883a 	nop
 44037f8:	e037883a 	mov	sp,fp
 44037fc:	dfc00117 	ldw	ra,4(sp)
 4403800:	df000017 	ldw	fp,0(sp)
 4403804:	dec00204 	addi	sp,sp,8
 4403808:	f800283a 	ret

0440380c <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 440380c:	defff404 	addi	sp,sp,-48
 4403810:	dfc00b15 	stw	ra,44(sp)
 4403814:	df000a15 	stw	fp,40(sp)
 4403818:	df000a04 	addi	fp,sp,40
 440381c:	e13ffc15 	stw	r4,-16(fp)
 4403820:	e17ffd15 	stw	r5,-12(fp)
 4403824:	e1bffe15 	stw	r6,-8(fp)
 4403828:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 440382c:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4403830:	e0bffc17 	ldw	r2,-16(fp)
 4403834:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4403838:	00007f06 	br	4403a38 <vid_print_string_alpha+0x22c>
    //Handle newline char here.
    if (string[i] == '\n') {
 440383c:	e0bff917 	ldw	r2,-28(fp)
 4403840:	e0c00417 	ldw	r3,16(fp)
 4403844:	1885883a 	add	r2,r3,r2
 4403848:	10800003 	ldbu	r2,0(r2)
 440384c:	10803fcc 	andi	r2,r2,255
 4403850:	1080201c 	xori	r2,r2,128
 4403854:	10bfe004 	addi	r2,r2,-128
 4403858:	10800298 	cmpnei	r2,r2,10
 440385c:	10000c1e 	bne	r2,zero,4403890 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 4403860:	e0bffb17 	ldw	r2,-20(fp)
 4403864:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4403868:	e0800217 	ldw	r2,8(fp)
 440386c:	1082d804 	addi	r2,r2,2912
 4403870:	10c00517 	ldw	r3,20(r2)
 4403874:	e0bffd17 	ldw	r2,-12(fp)
 4403878:	1885883a 	add	r2,r3,r2
 440387c:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4403880:	e0bff917 	ldw	r2,-28(fp)
 4403884:	10800044 	addi	r2,r2,1
 4403888:	e0bff915 	stw	r2,-28(fp)
      continue;
 440388c:	00006a06 	br	4403a38 <vid_print_string_alpha+0x22c>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 4403890:	e0bff917 	ldw	r2,-28(fp)
 4403894:	e0c00417 	ldw	r3,16(fp)
 4403898:	1885883a 	add	r2,r3,r2
 440389c:	10800003 	ldbu	r2,0(r2)
 44038a0:	10803fcc 	andi	r2,r2,255
 44038a4:	1080201c 	xori	r2,r2,128
 44038a8:	10bfe004 	addi	r2,r2,-128
 44038ac:	10800818 	cmpnei	r2,r2,32
 44038b0:	1000151e 	bne	r2,zero,4403908 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 44038b4:	e0bfff17 	ldw	r2,-4(fp)
 44038b8:	10bfffe0 	cmpeqi	r2,r2,-1
 44038bc:	10000b1e 	bne	r2,zero,44038ec <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 44038c0:	e0800317 	ldw	r2,12(fp)
 44038c4:	d8800215 	stw	r2,8(sp)
 44038c8:	e0800217 	ldw	r2,8(fp)
 44038cc:	d8800115 	stw	r2,4(sp)
 44038d0:	e0bfff17 	ldw	r2,-4(fp)
 44038d4:	d8800015 	stw	r2,0(sp)
 44038d8:	01c00b44 	movi	r7,45
 44038dc:	e1bfff17 	ldw	r6,-4(fp)
 44038e0:	e17ffd17 	ldw	r5,-12(fp)
 44038e4:	e13ffc17 	ldw	r4,-16(fp)
 44038e8:	4403f880 	call	4403f88 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 44038ec:	e0800217 	ldw	r2,8(fp)
 44038f0:	10806004 	addi	r2,r2,384
 44038f4:	10c00417 	ldw	r3,16(r2)
 44038f8:	e0bffc17 	ldw	r2,-16(fp)
 44038fc:	1885883a 	add	r2,r3,r2
 4403900:	e0bffc15 	stw	r2,-16(fp)
 4403904:	00004906 	br	4403a2c <vid_print_string_alpha+0x220>
    }
    else if(string[i] == '\t')  // this is a tab
 4403908:	e0bff917 	ldw	r2,-28(fp)
 440390c:	e0c00417 	ldw	r3,16(fp)
 4403910:	1885883a 	add	r2,r3,r2
 4403914:	10800003 	ldbu	r2,0(r2)
 4403918:	10803fcc 	andi	r2,r2,255
 440391c:	1080201c 	xori	r2,r2,128
 4403920:	10bfe004 	addi	r2,r2,-128
 4403924:	10800258 	cmpnei	r2,r2,9
 4403928:	10001d1e 	bne	r2,zero,44039a0 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 440392c:	e03ffa15 	stw	zero,-24(fp)
 4403930:	00001706 	br	4403990 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4403934:	e0bfff17 	ldw	r2,-4(fp)
 4403938:	10bfffe0 	cmpeqi	r2,r2,-1
 440393c:	10000b1e 	bne	r2,zero,440396c <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4403940:	e0800317 	ldw	r2,12(fp)
 4403944:	d8800215 	stw	r2,8(sp)
 4403948:	e0800217 	ldw	r2,8(fp)
 440394c:	d8800115 	stw	r2,4(sp)
 4403950:	e0bfff17 	ldw	r2,-4(fp)
 4403954:	d8800015 	stw	r2,0(sp)
 4403958:	01c00b44 	movi	r7,45
 440395c:	e1bfff17 	ldw	r6,-4(fp)
 4403960:	e17ffd17 	ldw	r5,-12(fp)
 4403964:	e13ffc17 	ldw	r4,-16(fp)
 4403968:	4403f880 	call	4403f88 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 440396c:	e0800217 	ldw	r2,8(fp)
 4403970:	10806004 	addi	r2,r2,384
 4403974:	10c00417 	ldw	r3,16(r2)
 4403978:	e0bffc17 	ldw	r2,-16(fp)
 440397c:	1885883a 	add	r2,r3,r2
 4403980:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4403984:	e0bffa17 	ldw	r2,-24(fp)
 4403988:	10800044 	addi	r2,r2,1
 440398c:	e0bffa15 	stw	r2,-24(fp)
 4403990:	e0bffa17 	ldw	r2,-24(fp)
 4403994:	10800090 	cmplti	r2,r2,2
 4403998:	103fe61e 	bne	r2,zero,4403934 <__reset+0xfb3ff934>
 440399c:	00002306 	br	4403a2c <vid_print_string_alpha+0x220>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 44039a0:	e0bff917 	ldw	r2,-28(fp)
 44039a4:	e0c00417 	ldw	r3,16(fp)
 44039a8:	1885883a 	add	r2,r3,r2
 44039ac:	10800003 	ldbu	r2,0(r2)
 44039b0:	10c03fcc 	andi	r3,r2,255
 44039b4:	18c0201c 	xori	r3,r3,128
 44039b8:	18ffe004 	addi	r3,r3,-128
 44039bc:	e0800317 	ldw	r2,12(fp)
 44039c0:	d8800215 	stw	r2,8(sp)
 44039c4:	e0800217 	ldw	r2,8(fp)
 44039c8:	d8800115 	stw	r2,4(sp)
 44039cc:	e0bfff17 	ldw	r2,-4(fp)
 44039d0:	d8800015 	stw	r2,0(sp)
 44039d4:	180f883a 	mov	r7,r3
 44039d8:	e1bffe17 	ldw	r6,-8(fp)
 44039dc:	e17ffd17 	ldw	r5,-12(fp)
 44039e0:	e13ffc17 	ldw	r4,-16(fp)
 44039e4:	4403f880 	call	4403f88 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 44039e8:	e0bff917 	ldw	r2,-28(fp)
 44039ec:	e0c00417 	ldw	r3,16(fp)
 44039f0:	1885883a 	add	r2,r3,r2
 44039f4:	10800003 	ldbu	r2,0(r2)
 44039f8:	10c03fcc 	andi	r3,r2,255
 44039fc:	18c0201c 	xori	r3,r3,128
 4403a00:	18ffe004 	addi	r3,r3,-128
 4403a04:	00820034 	movhi	r2,2048
 4403a08:	10bff7c4 	addi	r2,r2,-33
 4403a0c:	1885883a 	add	r2,r3,r2
 4403a10:	1004917a 	slli	r2,r2,5
 4403a14:	e0c00217 	ldw	r3,8(fp)
 4403a18:	1885883a 	add	r2,r3,r2
 4403a1c:	10c00417 	ldw	r3,16(r2)
 4403a20:	e0bffc17 	ldw	r2,-16(fp)
 4403a24:	1885883a 	add	r2,r3,r2
 4403a28:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4403a2c:	e0bff917 	ldw	r2,-28(fp)
 4403a30:	10800044 	addi	r2,r2,1
 4403a34:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4403a38:	e0bff917 	ldw	r2,-28(fp)
 4403a3c:	e0c00417 	ldw	r3,16(fp)
 4403a40:	1885883a 	add	r2,r3,r2
 4403a44:	10800003 	ldbu	r2,0(r2)
 4403a48:	10803fcc 	andi	r2,r2,255
 4403a4c:	1080201c 	xori	r2,r2,128
 4403a50:	10bfe004 	addi	r2,r2,-128
 4403a54:	103f791e 	bne	r2,zero,440383c <__reset+0xfb3ff83c>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4403a58:	0005883a 	mov	r2,zero
}
 4403a5c:	e037883a 	mov	sp,fp
 4403a60:	dfc00117 	ldw	ra,4(sp)
 4403a64:	df000017 	ldw	fp,0(sp)
 4403a68:	dec00204 	addi	sp,sp,8
 4403a6c:	f800283a 	ret

04403a70 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 4403a70:	defff904 	addi	sp,sp,-28
 4403a74:	df000615 	stw	fp,24(sp)
 4403a78:	df000604 	addi	fp,sp,24
 4403a7c:	e13ffc15 	stw	r4,-16(fp)
 4403a80:	e17ffd15 	stw	r5,-12(fp)
 4403a84:	e1bffe15 	stw	r6,-8(fp)
 4403a88:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4403a8c:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 4403a90:	e0bffc17 	ldw	r2,-16(fp)
 4403a94:	10800418 	cmpnei	r2,r2,16
 4403a98:	1000221e 	bne	r2,zero,4403b24 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4403a9c:	e0bffd17 	ldw	r2,-12(fp)
 4403aa0:	10c00044 	addi	r3,r2,1
 4403aa4:	e0fffd15 	stw	r3,-12(fp)
 4403aa8:	10800003 	ldbu	r2,0(r2)
 4403aac:	10803fcc 	andi	r2,r2,255
 4403ab0:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 4403ab4:	e0bffd17 	ldw	r2,-12(fp)
 4403ab8:	10800003 	ldbu	r2,0(r2)
 4403abc:	10803fcc 	andi	r2,r2,255
 4403ac0:	1004923a 	slli	r2,r2,8
 4403ac4:	1007883a 	mov	r3,r2
 4403ac8:	e0bffb0b 	ldhu	r2,-20(fp)
 4403acc:	1885883a 	add	r2,r3,r2
 4403ad0:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 4403ad4:	e0bffb0b 	ldhu	r2,-20(fp)
 4403ad8:	108007cc 	andi	r2,r2,31
 4403adc:	1007883a 	mov	r3,r2
 4403ae0:	e0800117 	ldw	r2,4(fp)
 4403ae4:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4403ae8:	e0bffb0b 	ldhu	r2,-20(fp)
 4403aec:	1004d17a 	srli	r2,r2,5
 4403af0:	10800fcc 	andi	r2,r2,63
 4403af4:	1007883a 	mov	r3,r2
 4403af8:	e0bfff17 	ldw	r2,-4(fp)
 4403afc:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 4403b00:	e0bffb0b 	ldhu	r2,-20(fp)
 4403b04:	1004d2fa 	srli	r2,r2,11
 4403b08:	108007cc 	andi	r2,r2,31
 4403b0c:	1007883a 	mov	r3,r2
 4403b10:	e0bffe17 	ldw	r2,-8(fp)
 4403b14:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4403b18:	00800044 	movi	r2,1
 4403b1c:	e0bffa15 	stw	r2,-24(fp)
 4403b20:	00002006 	br	4403ba4 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4403b24:	e0bffc17 	ldw	r2,-16(fp)
 4403b28:	10800620 	cmpeqi	r2,r2,24
 4403b2c:	1000031e 	bne	r2,zero,4403b3c <seperate_color_channels+0xcc>
 4403b30:	e0bffc17 	ldw	r2,-16(fp)
 4403b34:	10800818 	cmpnei	r2,r2,32
 4403b38:	1000131e 	bne	r2,zero,4403b88 <seperate_color_channels+0x118>
  {
    *blue = *color++;
 4403b3c:	e0bffd17 	ldw	r2,-12(fp)
 4403b40:	10c00044 	addi	r3,r2,1
 4403b44:	e0fffd15 	stw	r3,-12(fp)
 4403b48:	10c00003 	ldbu	r3,0(r2)
 4403b4c:	e0800117 	ldw	r2,4(fp)
 4403b50:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 4403b54:	e0bffd17 	ldw	r2,-12(fp)
 4403b58:	10c00044 	addi	r3,r2,1
 4403b5c:	e0fffd15 	stw	r3,-12(fp)
 4403b60:	10c00003 	ldbu	r3,0(r2)
 4403b64:	e0bfff17 	ldw	r2,-4(fp)
 4403b68:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 4403b6c:	e0bffd17 	ldw	r2,-12(fp)
 4403b70:	10c00003 	ldbu	r3,0(r2)
 4403b74:	e0bffe17 	ldw	r2,-8(fp)
 4403b78:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4403b7c:	00800044 	movi	r2,1
 4403b80:	e0bffa15 	stw	r2,-24(fp)
 4403b84:	00000706 	br	4403ba4 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4403b88:	e0bffe17 	ldw	r2,-8(fp)
 4403b8c:	10000005 	stb	zero,0(r2)
    *green = 0;
 4403b90:	e0bfff17 	ldw	r2,-4(fp)
 4403b94:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4403b98:	e0800117 	ldw	r2,4(fp)
 4403b9c:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4403ba0:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4403ba4:	e0bffa17 	ldw	r2,-24(fp)
}
 4403ba8:	e037883a 	mov	sp,fp
 4403bac:	df000017 	ldw	fp,0(sp)
 4403bb0:	dec00104 	addi	sp,sp,4
 4403bb4:	f800283a 	ret

04403bb8 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4403bb8:	defff904 	addi	sp,sp,-28
 4403bbc:	df000615 	stw	fp,24(sp)
 4403bc0:	df000604 	addi	fp,sp,24
 4403bc4:	e13ffc15 	stw	r4,-16(fp)
 4403bc8:	2809883a 	mov	r4,r5
 4403bcc:	3007883a 	mov	r3,r6
 4403bd0:	3805883a 	mov	r2,r7
 4403bd4:	e13ffd05 	stb	r4,-12(fp)
 4403bd8:	e0fffe05 	stb	r3,-8(fp)
 4403bdc:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 4403be0:	e0bffc17 	ldw	r2,-16(fp)
 4403be4:	10800418 	cmpnei	r2,r2,16
 4403be8:	1000191e 	bne	r2,zero,4403c50 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4403bec:	e0bfff03 	ldbu	r2,-4(fp)
 4403bf0:	108007cc 	andi	r2,r2,31
 4403bf4:	1007883a 	mov	r3,r2
 4403bf8:	e0bffe03 	ldbu	r2,-8(fp)
 4403bfc:	10800fcc 	andi	r2,r2,63
 4403c00:	1004917a 	slli	r2,r2,5
 4403c04:	1884b03a 	or	r2,r3,r2
 4403c08:	1007883a 	mov	r3,r2
 4403c0c:	e0bffd03 	ldbu	r2,-12(fp)
 4403c10:	100492fa 	slli	r2,r2,11
 4403c14:	1884b03a 	or	r2,r3,r2
 4403c18:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 4403c1c:	e0800117 	ldw	r2,4(fp)
 4403c20:	10c00044 	addi	r3,r2,1
 4403c24:	e0c00115 	stw	r3,4(fp)
 4403c28:	e0fffb0b 	ldhu	r3,-20(fp)
 4403c2c:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 4403c30:	e0bffb0b 	ldhu	r2,-20(fp)
 4403c34:	1004d23a 	srli	r2,r2,8
 4403c38:	1007883a 	mov	r3,r2
 4403c3c:	e0800117 	ldw	r2,4(fp)
 4403c40:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4403c44:	00800044 	movi	r2,1
 4403c48:	e0bffa15 	stw	r2,-24(fp)
 4403c4c:	00002106 	br	4403cd4 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4403c50:	e0bffc17 	ldw	r2,-16(fp)
 4403c54:	10800620 	cmpeqi	r2,r2,24
 4403c58:	1000031e 	bne	r2,zero,4403c68 <merge_color_channels+0xb0>
 4403c5c:	e0bffc17 	ldw	r2,-16(fp)
 4403c60:	10800818 	cmpnei	r2,r2,32
 4403c64:	1000101e 	bne	r2,zero,4403ca8 <merge_color_channels+0xf0>
  {
    *color++ = blue;
 4403c68:	e0800117 	ldw	r2,4(fp)
 4403c6c:	10c00044 	addi	r3,r2,1
 4403c70:	e0c00115 	stw	r3,4(fp)
 4403c74:	e0ffff03 	ldbu	r3,-4(fp)
 4403c78:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 4403c7c:	e0800117 	ldw	r2,4(fp)
 4403c80:	10c00044 	addi	r3,r2,1
 4403c84:	e0c00115 	stw	r3,4(fp)
 4403c88:	e0fffe03 	ldbu	r3,-8(fp)
 4403c8c:	10c00005 	stb	r3,0(r2)
    *color = red;
 4403c90:	e0800117 	ldw	r2,4(fp)
 4403c94:	e0fffd03 	ldbu	r3,-12(fp)
 4403c98:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4403c9c:	00800044 	movi	r2,1
 4403ca0:	e0bffa15 	stw	r2,-24(fp)
 4403ca4:	00000b06 	br	4403cd4 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4403ca8:	e0800117 	ldw	r2,4(fp)
 4403cac:	10c00044 	addi	r3,r2,1
 4403cb0:	e0c00115 	stw	r3,4(fp)
 4403cb4:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 4403cb8:	e0800117 	ldw	r2,4(fp)
 4403cbc:	10c00044 	addi	r3,r2,1
 4403cc0:	e0c00115 	stw	r3,4(fp)
 4403cc4:	10000005 	stb	zero,0(r2)
    *color = 0;
 4403cc8:	e0800117 	ldw	r2,4(fp)
 4403ccc:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4403cd0:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 4403cd4:	e0bffa17 	ldw	r2,-24(fp)
}
 4403cd8:	e037883a 	mov	sp,fp
 4403cdc:	df000017 	ldw	fp,0(sp)
 4403ce0:	dec00104 	addi	sp,sp,4
 4403ce4:	f800283a 	ret

04403ce8 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4403ce8:	defffa04 	addi	sp,sp,-24
 4403cec:	dfc00515 	stw	ra,20(sp)
 4403cf0:	df000415 	stw	fp,16(sp)
 4403cf4:	df000404 	addi	fp,sp,16
 4403cf8:	e13ffc15 	stw	r4,-16(fp)
 4403cfc:	e17ffd15 	stw	r5,-12(fp)
 4403d00:	e1bffe15 	stw	r6,-8(fp)
 4403d04:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
 4403d08:	010110f4 	movhi	r4,1091
 4403d0c:	21122f04 	addi	r4,r4,18620
 4403d10:	440af980 	call	440af98 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
 4403d14:	0001883a 	nop
 4403d18:	e037883a 	mov	sp,fp
 4403d1c:	dfc00117 	ldw	ra,4(sp)
 4403d20:	df000017 	ldw	fp,0(sp)
 4403d24:	dec00204 	addi	sp,sp,8
 4403d28:	f800283a 	ret

04403d2c <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4403d2c:	defff304 	addi	sp,sp,-52
 4403d30:	dfc00c15 	stw	ra,48(sp)
 4403d34:	df000b15 	stw	fp,44(sp)
 4403d38:	df000b04 	addi	fp,sp,44
 4403d3c:	e13ffc15 	stw	r4,-16(fp)
 4403d40:	e17ffd15 	stw	r5,-12(fp)
 4403d44:	e1bffe15 	stw	r6,-8(fp)
 4403d48:	3805883a 	mov	r2,r7
 4403d4c:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4403d50:	e0bffe17 	ldw	r2,-8(fp)
 4403d54:	10bfffd8 	cmpnei	r2,r2,-1
 4403d58:	10000c1e 	bne	r2,zero,4403d8c <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4403d5c:	e13ffb44 	addi	r4,fp,-19
 4403d60:	e0fffb04 	addi	r3,fp,-20
 4403d64:	e0800517 	ldw	r2,20(fp)
 4403d68:	d8800115 	stw	r2,4(sp)
 4403d6c:	e0bffb84 	addi	r2,fp,-18
 4403d70:	d8800015 	stw	r2,0(sp)
 4403d74:	200f883a 	mov	r7,r4
 4403d78:	180d883a 	mov	r6,r3
 4403d7c:	e17ffd17 	ldw	r5,-12(fp)
 4403d80:	e13ffc17 	ldw	r4,-16(fp)
 4403d84:	4403ce80 	call	4403ce8 <read_from_frame>
 4403d88:	00000c06 	br	4403dbc <alpha_blending+0x90>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4403d8c:	e0800517 	ldw	r2,20(fp)
 4403d90:	10c00017 	ldw	r3,0(r2)
 4403d94:	e1bffb44 	addi	r6,fp,-19
 4403d98:	e17ffb04 	addi	r5,fp,-20
 4403d9c:	e13ffe04 	addi	r4,fp,-8
 4403da0:	e0bffb84 	addi	r2,fp,-18
 4403da4:	d8800015 	stw	r2,0(sp)
 4403da8:	300f883a 	mov	r7,r6
 4403dac:	280d883a 	mov	r6,r5
 4403db0:	200b883a 	mov	r5,r4
 4403db4:	1809883a 	mov	r4,r3
 4403db8:	4403a700 	call	4403a70 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4403dbc:	e0800217 	ldw	r2,8(fp)
 4403dc0:	10800003 	ldbu	r2,0(r2)
 4403dc4:	10c03fcc 	andi	r3,r2,255
 4403dc8:	e0bfff03 	ldbu	r2,-4(fp)
 4403dcc:	1887383a 	mul	r3,r3,r2
 4403dd0:	e0bffb03 	ldbu	r2,-20(fp)
 4403dd4:	11003fcc 	andi	r4,r2,255
 4403dd8:	e0bfff03 	ldbu	r2,-4(fp)
 4403ddc:	01403fc4 	movi	r5,255
 4403de0:	2885c83a 	sub	r2,r5,r2
 4403de4:	2085383a 	mul	r2,r4,r2
 4403de8:	1885883a 	add	r2,r3,r2
 4403dec:	01403fc4 	movi	r5,255
 4403df0:	1009883a 	mov	r4,r2
 4403df4:	4407da80 	call	4407da8 <__divsi3>
 4403df8:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4403dfc:	e0800317 	ldw	r2,12(fp)
 4403e00:	10800003 	ldbu	r2,0(r2)
 4403e04:	10c03fcc 	andi	r3,r2,255
 4403e08:	e0bfff03 	ldbu	r2,-4(fp)
 4403e0c:	1887383a 	mul	r3,r3,r2
 4403e10:	e0bffb43 	ldbu	r2,-19(fp)
 4403e14:	11003fcc 	andi	r4,r2,255
 4403e18:	e0bfff03 	ldbu	r2,-4(fp)
 4403e1c:	01403fc4 	movi	r5,255
 4403e20:	2885c83a 	sub	r2,r5,r2
 4403e24:	2085383a 	mul	r2,r4,r2
 4403e28:	1885883a 	add	r2,r3,r2
 4403e2c:	01403fc4 	movi	r5,255
 4403e30:	1009883a 	mov	r4,r2
 4403e34:	4407da80 	call	4407da8 <__divsi3>
 4403e38:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4403e3c:	e0800417 	ldw	r2,16(fp)
 4403e40:	10800003 	ldbu	r2,0(r2)
 4403e44:	10c03fcc 	andi	r3,r2,255
 4403e48:	e0bfff03 	ldbu	r2,-4(fp)
 4403e4c:	1887383a 	mul	r3,r3,r2
 4403e50:	e0bffb83 	ldbu	r2,-18(fp)
 4403e54:	11003fcc 	andi	r4,r2,255
 4403e58:	e0bfff03 	ldbu	r2,-4(fp)
 4403e5c:	01403fc4 	movi	r5,255
 4403e60:	2885c83a 	sub	r2,r5,r2
 4403e64:	2085383a 	mul	r2,r4,r2
 4403e68:	1885883a 	add	r2,r3,r2
 4403e6c:	01403fc4 	movi	r5,255
 4403e70:	1009883a 	mov	r4,r2
 4403e74:	4407da80 	call	4407da8 <__divsi3>
 4403e78:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4403e7c:	e0800517 	ldw	r2,20(fp)
 4403e80:	10800017 	ldw	r2,0(r2)
 4403e84:	10800418 	cmpnei	r2,r2,16
 4403e88:	1000181e 	bne	r2,zero,4403eec <alpha_blending+0x1c0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4403e8c:	e0bff817 	ldw	r2,-32(fp)
 4403e90:	10c00830 	cmpltui	r3,r2,32
 4403e94:	1800011e 	bne	r3,zero,4403e9c <alpha_blending+0x170>
 4403e98:	008007c4 	movi	r2,31
 4403e9c:	1007883a 	mov	r3,r2
 4403ea0:	e0800217 	ldw	r2,8(fp)
 4403ea4:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4403ea8:	e0bff917 	ldw	r2,-28(fp)
 4403eac:	10c01030 	cmpltui	r3,r2,64
 4403eb0:	1800011e 	bne	r3,zero,4403eb8 <alpha_blending+0x18c>
 4403eb4:	00800fc4 	movi	r2,63
 4403eb8:	1007883a 	mov	r3,r2
 4403ebc:	e0800317 	ldw	r2,12(fp)
 4403ec0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4403ec4:	e0bffa17 	ldw	r2,-24(fp)
 4403ec8:	10c00830 	cmpltui	r3,r2,32
 4403ecc:	1800011e 	bne	r3,zero,4403ed4 <alpha_blending+0x1a8>
 4403ed0:	008007c4 	movi	r2,31
 4403ed4:	1007883a 	mov	r3,r2
 4403ed8:	e0800417 	ldw	r2,16(fp)
 4403edc:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4403ee0:	00800044 	movi	r2,1
 4403ee4:	e0bff715 	stw	r2,-36(fp)
 4403ee8:	00002106 	br	4403f70 <alpha_blending+0x244>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4403eec:	e0800517 	ldw	r2,20(fp)
 4403ef0:	10800017 	ldw	r2,0(r2)
 4403ef4:	10800620 	cmpeqi	r2,r2,24
 4403ef8:	1000041e 	bne	r2,zero,4403f0c <alpha_blending+0x1e0>
 4403efc:	e0800517 	ldw	r2,20(fp)
 4403f00:	10800017 	ldw	r2,0(r2)
 4403f04:	10800818 	cmpnei	r2,r2,32
 4403f08:	1000181e 	bne	r2,zero,4403f6c <alpha_blending+0x240>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4403f0c:	e0bff817 	ldw	r2,-32(fp)
 4403f10:	10c04030 	cmpltui	r3,r2,256
 4403f14:	1800011e 	bne	r3,zero,4403f1c <alpha_blending+0x1f0>
 4403f18:	00803fc4 	movi	r2,255
 4403f1c:	1007883a 	mov	r3,r2
 4403f20:	e0800217 	ldw	r2,8(fp)
 4403f24:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4403f28:	e0bff917 	ldw	r2,-28(fp)
 4403f2c:	10c04030 	cmpltui	r3,r2,256
 4403f30:	1800011e 	bne	r3,zero,4403f38 <alpha_blending+0x20c>
 4403f34:	00803fc4 	movi	r2,255
 4403f38:	1007883a 	mov	r3,r2
 4403f3c:	e0800317 	ldw	r2,12(fp)
 4403f40:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4403f44:	e0bffa17 	ldw	r2,-24(fp)
 4403f48:	10c04030 	cmpltui	r3,r2,256
 4403f4c:	1800011e 	bne	r3,zero,4403f54 <alpha_blending+0x228>
 4403f50:	00803fc4 	movi	r2,255
 4403f54:	1007883a 	mov	r3,r2
 4403f58:	e0800417 	ldw	r2,16(fp)
 4403f5c:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4403f60:	00800044 	movi	r2,1
 4403f64:	e0bff715 	stw	r2,-36(fp)
 4403f68:	00000106 	br	4403f70 <alpha_blending+0x244>
  }
  else
  {
    return_value = 0;     
 4403f6c:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4403f70:	e0bff717 	ldw	r2,-36(fp)
} 
 4403f74:	e037883a 	mov	sp,fp
 4403f78:	dfc00117 	ldw	ra,4(sp)
 4403f7c:	df000017 	ldw	fp,0(sp)
 4403f80:	dec00204 	addi	sp,sp,8
 4403f84:	f800283a 	ret

04403f88 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4403f88:	defff004 	addi	sp,sp,-64
 4403f8c:	dfc00f15 	stw	ra,60(sp)
 4403f90:	df000e15 	stw	fp,56(sp)
 4403f94:	df000e04 	addi	fp,sp,56
 4403f98:	e13ffc15 	stw	r4,-16(fp)
 4403f9c:	e17ffd15 	stw	r5,-12(fp)
 4403fa0:	e1bffe15 	stw	r6,-8(fp)
 4403fa4:	3805883a 	mov	r2,r7
 4403fa8:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4403fac:	e0ffff07 	ldb	r3,-4(fp)
 4403fb0:	00820034 	movhi	r2,2048
 4403fb4:	10bff7c4 	addi	r2,r2,-33
 4403fb8:	1885883a 	add	r2,r3,r2
 4403fbc:	1004917a 	slli	r2,r2,5
 4403fc0:	e0c00317 	ldw	r3,12(fp)
 4403fc4:	1885883a 	add	r2,r3,r2
 4403fc8:	10800617 	ldw	r2,24(r2)
 4403fcc:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4403fd0:	e0800417 	ldw	r2,16(fp)
 4403fd4:	10c00017 	ldw	r3,0(r2)
 4403fd8:	e1bff984 	addi	r6,fp,-26
 4403fdc:	e17ff904 	addi	r5,fp,-28
 4403fe0:	e13ffe04 	addi	r4,fp,-8
 4403fe4:	e0bff944 	addi	r2,fp,-27
 4403fe8:	d8800015 	stw	r2,0(sp)
 4403fec:	300f883a 	mov	r7,r6
 4403ff0:	280d883a 	mov	r6,r5
 4403ff4:	200b883a 	mov	r5,r4
 4403ff8:	1809883a 	mov	r4,r3
 4403ffc:	4403a700 	call	4403a70 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4404000:	e03ff615 	stw	zero,-40(fp)
 4404004:	00004a06 	br	4404130 <vid_print_char_alpha+0x1a8>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4404008:	e03ff715 	stw	zero,-36(fp)
 440400c:	00003b06 	br	44040fc <vid_print_char_alpha+0x174>
      red = original_red;
 4404010:	e0bff903 	ldbu	r2,-28(fp)
 4404014:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4404018:	e0bff983 	ldbu	r2,-26(fp)
 440401c:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 4404020:	e0bff943 	ldbu	r2,-27(fp)
 4404024:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4404028:	e0fffc17 	ldw	r3,-16(fp)
 440402c:	e0bff717 	ldw	r2,-36(fp)
 4404030:	1889883a 	add	r4,r3,r2
 4404034:	e0fffd17 	ldw	r3,-12(fp)
 4404038:	e0bff617 	ldw	r2,-40(fp)
 440403c:	1887883a 	add	r3,r3,r2
 4404040:	e0bff817 	ldw	r2,-32(fp)
 4404044:	10800003 	ldbu	r2,0(r2)
 4404048:	11403fcc 	andi	r5,r2,255
 440404c:	e0800417 	ldw	r2,16(fp)
 4404050:	d8800315 	stw	r2,12(sp)
 4404054:	e0bffa44 	addi	r2,fp,-23
 4404058:	d8800215 	stw	r2,8(sp)
 440405c:	e0bffa04 	addi	r2,fp,-24
 4404060:	d8800115 	stw	r2,4(sp)
 4404064:	e0bff9c4 	addi	r2,fp,-25
 4404068:	d8800015 	stw	r2,0(sp)
 440406c:	280f883a 	mov	r7,r5
 4404070:	e1800217 	ldw	r6,8(fp)
 4404074:	180b883a 	mov	r5,r3
 4404078:	4403d2c0 	call	4403d2c <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 440407c:	e0800417 	ldw	r2,16(fp)
 4404080:	10c00017 	ldw	r3,0(r2)
 4404084:	e0bff9c3 	ldbu	r2,-25(fp)
 4404088:	11003fcc 	andi	r4,r2,255
 440408c:	e0bffa03 	ldbu	r2,-24(fp)
 4404090:	11403fcc 	andi	r5,r2,255
 4404094:	e0bffa43 	ldbu	r2,-23(fp)
 4404098:	11803fcc 	andi	r6,r2,255
 440409c:	e0bffb04 	addi	r2,fp,-20
 44040a0:	d8800015 	stw	r2,0(sp)
 44040a4:	300f883a 	mov	r7,r6
 44040a8:	280d883a 	mov	r6,r5
 44040ac:	200b883a 	mov	r5,r4
 44040b0:	1809883a 	mov	r4,r3
 44040b4:	4403bb80 	call	4403bb8 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 44040b8:	e0fffc17 	ldw	r3,-16(fp)
 44040bc:	e0bff717 	ldw	r2,-36(fp)
 44040c0:	1889883a 	add	r4,r3,r2
 44040c4:	e0fffd17 	ldw	r3,-12(fp)
 44040c8:	e0bff617 	ldw	r2,-40(fp)
 44040cc:	1885883a 	add	r2,r3,r2
 44040d0:	e0fffb17 	ldw	r3,-20(fp)
 44040d4:	e1c00417 	ldw	r7,16(fp)
 44040d8:	180d883a 	mov	r6,r3
 44040dc:	100b883a 	mov	r5,r2
 44040e0:	4401bb40 	call	4401bb4 <vid_set_pixel>

      alpha++;
 44040e4:	e0bff817 	ldw	r2,-32(fp)
 44040e8:	10800044 	addi	r2,r2,1
 44040ec:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 44040f0:	e0bff717 	ldw	r2,-36(fp)
 44040f4:	10800044 	addi	r2,r2,1
 44040f8:	e0bff715 	stw	r2,-36(fp)
 44040fc:	e0ffff07 	ldb	r3,-4(fp)
 4404100:	00820034 	movhi	r2,2048
 4404104:	10bff7c4 	addi	r2,r2,-33
 4404108:	1885883a 	add	r2,r3,r2
 440410c:	1004917a 	slli	r2,r2,5
 4404110:	e0c00317 	ldw	r3,12(fp)
 4404114:	1885883a 	add	r2,r3,r2
 4404118:	10800417 	ldw	r2,16(r2)
 440411c:	e0fff717 	ldw	r3,-36(fp)
 4404120:	18bfbb36 	bltu	r3,r2,4404010 <__reset+0xfb400010>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4404124:	e0bff617 	ldw	r2,-40(fp)
 4404128:	10800044 	addi	r2,r2,1
 440412c:	e0bff615 	stw	r2,-40(fp)
 4404130:	e0ffff07 	ldb	r3,-4(fp)
 4404134:	00820034 	movhi	r2,2048
 4404138:	10bff7c4 	addi	r2,r2,-33
 440413c:	1885883a 	add	r2,r3,r2
 4404140:	1004917a 	slli	r2,r2,5
 4404144:	e0c00317 	ldw	r3,12(fp)
 4404148:	1885883a 	add	r2,r3,r2
 440414c:	10800517 	ldw	r2,20(r2)
 4404150:	e0fff617 	ldw	r3,-40(fp)
 4404154:	18bfac36 	bltu	r3,r2,4404008 <__reset+0xfb400008>

      alpha++;
    }
  }

  return(0);
 4404158:	0005883a 	mov	r2,zero
}
 440415c:	e037883a 	mov	sp,fp
 4404160:	dfc00117 	ldw	ra,4(sp)
 4404164:	df000017 	ldw	fp,0(sp)
 4404168:	dec00204 	addi	sp,sp,8
 440416c:	f800283a 	ret

04404170 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4404170:	defffb04 	addi	sp,sp,-20
 4404174:	df000415 	stw	fp,16(sp)
 4404178:	df000404 	addi	fp,sp,16
 440417c:	e13ffe15 	stw	r4,-8(fp)
 4404180:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4404184:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 4404188:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 440418c:	e03ffc15 	stw	zero,-16(fp)
 4404190:	00002406 	br	4404224 <vid_string_pixel_length_alpha+0xb4>
  {
    if( string[i] == ' ' )
 4404194:	e0bffc17 	ldw	r2,-16(fp)
 4404198:	e0ffff17 	ldw	r3,-4(fp)
 440419c:	1885883a 	add	r2,r3,r2
 44041a0:	10800003 	ldbu	r2,0(r2)
 44041a4:	10803fcc 	andi	r2,r2,255
 44041a8:	1080201c 	xori	r2,r2,128
 44041ac:	10bfe004 	addi	r2,r2,-128
 44041b0:	10800818 	cmpnei	r2,r2,32
 44041b4:	1000071e 	bne	r2,zero,44041d4 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 44041b8:	e0bffe17 	ldw	r2,-8(fp)
 44041bc:	10806004 	addi	r2,r2,384
 44041c0:	10c00417 	ldw	r3,16(r2)
 44041c4:	e0bffd17 	ldw	r2,-12(fp)
 44041c8:	1885883a 	add	r2,r3,r2
 44041cc:	e0bffd15 	stw	r2,-12(fp)
 44041d0:	00001106 	br	4404218 <vid_string_pixel_length_alpha+0xa8>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 44041d4:	e0bffc17 	ldw	r2,-16(fp)
 44041d8:	e0ffff17 	ldw	r3,-4(fp)
 44041dc:	1885883a 	add	r2,r3,r2
 44041e0:	10800003 	ldbu	r2,0(r2)
 44041e4:	10c03fcc 	andi	r3,r2,255
 44041e8:	18c0201c 	xori	r3,r3,128
 44041ec:	18ffe004 	addi	r3,r3,-128
 44041f0:	00820034 	movhi	r2,2048
 44041f4:	10bff7c4 	addi	r2,r2,-33
 44041f8:	1885883a 	add	r2,r3,r2
 44041fc:	1004917a 	slli	r2,r2,5
 4404200:	e0fffe17 	ldw	r3,-8(fp)
 4404204:	1885883a 	add	r2,r3,r2
 4404208:	10c00417 	ldw	r3,16(r2)
 440420c:	e0bffd17 	ldw	r2,-12(fp)
 4404210:	1885883a 	add	r2,r3,r2
 4404214:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4404218:	e0bffc17 	ldw	r2,-16(fp)
 440421c:	10800044 	addi	r2,r2,1
 4404220:	e0bffc15 	stw	r2,-16(fp)
 4404224:	e0bffc17 	ldw	r2,-16(fp)
 4404228:	e0ffff17 	ldw	r3,-4(fp)
 440422c:	1885883a 	add	r2,r3,r2
 4404230:	10800003 	ldbu	r2,0(r2)
 4404234:	10803fcc 	andi	r2,r2,255
 4404238:	1080201c 	xori	r2,r2,128
 440423c:	10bfe004 	addi	r2,r2,-128
 4404240:	103fd41e 	bne	r2,zero,4404194 <__reset+0xfb400194>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4404244:	e0bffd17 	ldw	r2,-12(fp)
}
 4404248:	e037883a 	mov	sp,fp
 440424c:	df000017 	ldw	fp,0(sp)
 4404250:	dec00104 	addi	sp,sp,4
 4404254:	f800283a 	ret

04404258 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
 4404258:	defff804 	addi	sp,sp,-32
 440425c:	dfc00715 	stw	ra,28(sp)
 4404260:	df000615 	stw	fp,24(sp)
 4404264:	df000604 	addi	fp,sp,24
 4404268:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
 440426c:	e0bfff17 	ldw	r2,-4(fp)
 4404270:	10800117 	ldw	r2,4(r2)
 4404274:	1006d7fa 	srli	r3,r2,31
 4404278:	1885883a 	add	r2,r3,r2
 440427c:	1005d07a 	srai	r2,r2,1
 4404280:	10bff104 	addi	r2,r2,-60
 4404284:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
 4404288:	e0bfff17 	ldw	r2,-4(fp)
 440428c:	10800217 	ldw	r2,8(r2)
 4404290:	1006d7fa 	srli	r3,r2,31
 4404294:	1885883a 	add	r2,r3,r2
 4404298:	1005d07a 	srai	r2,r2,1
 440429c:	10bffd84 	addi	r2,r2,-10
 44042a0:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
 44042a4:	008110f4 	movhi	r2,1091
 44042a8:	10923904 	addi	r2,r2,18660
 44042ac:	d8800215 	stw	r2,8(sp)
 44042b0:	e0bfff17 	ldw	r2,-4(fp)
 44042b4:	d8800115 	stw	r2,4(sp)
 44042b8:	008110f4 	movhi	r2,1091
 44042bc:	1093b204 	addi	r2,r2,20168
 44042c0:	d8800015 	stw	r2,0(sp)
 44042c4:	000f883a 	mov	r7,zero
 44042c8:	01803fc4 	movi	r6,255
 44042cc:	e17ffe17 	ldw	r5,-8(fp)
 44042d0:	e13ffd17 	ldw	r4,-12(fp)
 44042d4:	440380c0 	call	440380c <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
 44042d8:	e0bffe17 	ldw	r2,-8(fp)
 44042dc:	10c00584 	addi	r3,r2,22
 44042e0:	008110f4 	movhi	r2,1091
 44042e4:	10923b04 	addi	r2,r2,18668
 44042e8:	d8800215 	stw	r2,8(sp)
 44042ec:	e0bfff17 	ldw	r2,-4(fp)
 44042f0:	d8800115 	stw	r2,4(sp)
 44042f4:	008110f4 	movhi	r2,1091
 44042f8:	1093b204 	addi	r2,r2,20168
 44042fc:	d8800015 	stw	r2,0(sp)
 4404300:	000f883a 	mov	r7,zero
 4404304:	01803fc4 	movi	r6,255
 4404308:	180b883a 	mov	r5,r3
 440430c:	e13ffd17 	ldw	r4,-12(fp)
 4404310:	440380c0 	call	440380c <vid_print_string_alpha>



}
 4404314:	0001883a 	nop
 4404318:	e037883a 	mov	sp,fp
 440431c:	dfc00117 	ldw	ra,4(sp)
 4404320:	df000017 	ldw	fp,0(sp)
 4404324:	dec00204 	addi	sp,sp,8
 4404328:	f800283a 	ret

0440432c <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 440432c:	deffef04 	addi	sp,sp,-68
 4404330:	dfc01015 	stw	ra,64(sp)
 4404334:	df000f15 	stw	fp,60(sp)
 4404338:	df000f04 	addi	fp,sp,60
 440433c:	e13ffe15 	stw	r4,-8(fp)
 4404340:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
 4404344:	00800a04 	movi	r2,40
 4404348:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
 440434c:	00800a04 	movi	r2,40
 4404350:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
 4404354:	00800144 	movi	r2,5
 4404358:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
 440435c:	00800084 	movi	r2,2
 4404360:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
 4404364:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
 4404368:	00800784 	movi	r2,30
 440436c:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 4404370:	e0bffe17 	ldw	r2,-8(fp)
 4404374:	10c00117 	ldw	r3,4(r2)
 4404378:	e0bff717 	ldw	r2,-36(fp)
 440437c:	1887c83a 	sub	r3,r3,r2
 4404380:	e0bff817 	ldw	r2,-32(fp)
 4404384:	1887c83a 	sub	r3,r3,r2
 4404388:	e0bff417 	ldw	r2,-48(fp)
 440438c:	10bffee4 	muli	r2,r2,-5
 4404390:	1885883a 	add	r2,r3,r2
 4404394:	01400184 	movi	r5,6
 4404398:	1009883a 	mov	r4,r2
 440439c:	4407da80 	call	4407da8 <__divsi3>
 44043a0:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
 44043a4:	e0bffe17 	ldw	r2,-8(fp)
 44043a8:	10c00217 	ldw	r3,8(r2)
 44043ac:	e0bff317 	ldw	r2,-52(fp)
 44043b0:	1887c83a 	sub	r3,r3,r2
 44043b4:	e0bff517 	ldw	r2,-44(fp)
 44043b8:	1885c83a 	sub	r2,r3,r2
 44043bc:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 44043c0:	e0fffc17 	ldw	r3,-16(fp)
 44043c4:	e0bff317 	ldw	r2,-52(fp)
 44043c8:	1885883a 	add	r2,r3,r2
 44043cc:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
 44043d0:	e0fff917 	ldw	r3,-28(fp)
 44043d4:	e0bff717 	ldw	r2,-36(fp)
 44043d8:	1887883a 	add	r3,r3,r2
 44043dc:	e0bff817 	ldw	r2,-32(fp)
 44043e0:	1885883a 	add	r2,r3,r2
 44043e4:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 44043e8:	e0fffa17 	ldw	r3,-24(fp)
 44043ec:	e0bff417 	ldw	r2,-48(fp)
 44043f0:	1885883a 	add	r2,r3,r2
 44043f4:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 44043f8:	e0bfff17 	ldw	r2,-4(fp)
 44043fc:	11000104 	addi	r4,r2,4
 4404400:	e0bffe17 	ldw	r2,-8(fp)
 4404404:	10c00117 	ldw	r3,4(r2)
 4404408:	e0bff617 	ldw	r2,-40(fp)
 440440c:	188bc83a 	sub	r5,r3,r2
 4404410:	e0fffc17 	ldw	r3,-16(fp)
 4404414:	e0bff617 	ldw	r2,-40(fp)
 4404418:	1885c83a 	sub	r2,r3,r2
 440441c:	d8800015 	stw	r2,0(sp)
 4404420:	e1fff617 	ldw	r7,-40(fp)
 4404424:	280d883a 	mov	r6,r5
 4404428:	e17ff617 	ldw	r5,-40(fp)
 440442c:	44003380 	call	4400338 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 4404430:	e03ff215 	stw	zero,-56(fp)
 4404434:	00002206 	br	44044c0 <GUI_DeskInit+0x194>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 4404438:	e0bff217 	ldw	r2,-56(fp)
 440443c:	10800044 	addi	r2,r2,1
 4404440:	10800524 	muli	r2,r2,20
 4404444:	e0ffff17 	ldw	r3,-4(fp)
 4404448:	1885883a 	add	r2,r3,r2
 440444c:	e0fffa04 	addi	r3,fp,-24
 4404450:	180b883a 	mov	r5,r3
 4404454:	1009883a 	mov	r4,r2
 4404458:	44004b00 	call	44004b0 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 440445c:	008110f4 	movhi	r2,1091
 4404460:	109a9804 	addi	r2,r2,27232
 4404464:	e0fff217 	ldw	r3,-56(fp)
 4404468:	18c7883a 	add	r3,r3,r3
 440446c:	18c7883a 	add	r3,r3,r3
 4404470:	10c5883a 	add	r2,r2,r3
 4404474:	10800017 	ldw	r2,0(r2)
 4404478:	1009883a 	mov	r4,r2
 440447c:	e0ffff17 	ldw	r3,-4(fp)
 4404480:	e0bff217 	ldw	r2,-56(fp)
 4404484:	10800524 	muli	r2,r2,20
 4404488:	1885883a 	add	r2,r3,r2
 440448c:	10800904 	addi	r2,r2,36
 4404490:	11000015 	stw	r4,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 4404494:	e0fff417 	ldw	r3,-48(fp)
 4404498:	e0bff917 	ldw	r2,-28(fp)
 440449c:	1887883a 	add	r3,r3,r2
 44044a0:	e0bffa04 	addi	r2,fp,-24
 44044a4:	000d883a 	mov	r6,zero
 44044a8:	180b883a 	mov	r5,r3
 44044ac:	1009883a 	mov	r4,r2
 44044b0:	44004240 	call	4400424 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 44044b4:	e0bff217 	ldw	r2,-56(fp)
 44044b8:	10800044 	addi	r2,r2,1
 44044bc:	e0bff215 	stw	r2,-56(fp)
 44044c0:	e0bff217 	ldw	r2,-56(fp)
 44044c4:	10800150 	cmplti	r2,r2,5
 44044c8:	103fdb1e 	bne	r2,zero,4404438 <__reset+0xfb400438>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
 44044cc:	e0bfff17 	ldw	r2,-4(fp)
 44044d0:	10c00517 	ldw	r3,20(r2)
 44044d4:	e0bff817 	ldw	r2,-32(fp)
 44044d8:	1887c83a 	sub	r3,r3,r2
 44044dc:	e0bfff17 	ldw	r2,-4(fp)
 44044e0:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
 44044e4:	e0bfff17 	ldw	r2,-4(fp)
 44044e8:	00c00084 	movi	r3,2
 44044ec:	10c00015 	stw	r3,0(r2)
}
 44044f0:	0001883a 	nop
 44044f4:	e037883a 	mov	sp,fp
 44044f8:	dfc00117 	ldw	ra,4(sp)
 44044fc:	df000017 	ldw	fp,0(sp)
 4404500:	dec00204 	addi	sp,sp,8
 4404504:	f800283a 	ret

04404508 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 4404508:	defffa04 	addi	sp,sp,-24
 440450c:	dfc00515 	stw	ra,20(sp)
 4404510:	df000415 	stw	fp,16(sp)
 4404514:	df000404 	addi	fp,sp,16
 4404518:	e13ffe15 	stw	r4,-8(fp)
 440451c:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 4404520:	00800184 	movi	r2,6
 4404524:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 4404528:	e03ffd15 	stw	zero,-12(fp)
 440452c:	00000e06 	br	4404568 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 4404530:	e0bffd17 	ldw	r2,-12(fp)
 4404534:	10800044 	addi	r2,r2,1
 4404538:	10800524 	muli	r2,r2,20
 440453c:	e0fffe17 	ldw	r3,-8(fp)
 4404540:	1885883a 	add	r2,r3,r2
 4404544:	100b883a 	mov	r5,r2
 4404548:	e13fff17 	ldw	r4,-4(fp)
 440454c:	44002700 	call	4400270 <IsPtInRect>
 4404550:	10000226 	beq	r2,zero,440455c <GUI_CheckButton+0x54>
            ButtonId = i;
 4404554:	e0bffd17 	ldw	r2,-12(fp)
 4404558:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 440455c:	e0bffd17 	ldw	r2,-12(fp)
 4404560:	10800044 	addi	r2,r2,1
 4404564:	e0bffd15 	stw	r2,-12(fp)
 4404568:	e0bffd17 	ldw	r2,-12(fp)
 440456c:	10800148 	cmpgei	r2,r2,5
 4404570:	1000031e 	bne	r2,zero,4404580 <GUI_CheckButton+0x78>
 4404574:	e0bffc17 	ldw	r2,-16(fp)
 4404578:	108001a0 	cmpeqi	r2,r2,6
 440457c:	103fec1e 	bne	r2,zero,4404530 <__reset+0xfb400530>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 4404580:	e0bffc17 	ldw	r2,-16(fp)
}
 4404584:	e037883a 	mov	sp,fp
 4404588:	dfc00117 	ldw	ra,4(sp)
 440458c:	df000017 	ldw	fp,0(sp)
 4404590:	dec00204 	addi	sp,sp,8
 4404594:	f800283a 	ret

04404598 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 4404598:	defff104 	addi	sp,sp,-60
 440459c:	dfc00e15 	stw	ra,56(sp)
 44045a0:	df000d15 	stw	fp,52(sp)
 44045a4:	dc400c15 	stw	r17,48(sp)
 44045a8:	dc000b15 	stw	r16,44(sp)
 44045ac:	df000d04 	addi	fp,sp,52
 44045b0:	e13ffc15 	stw	r4,-16(fp)
 44045b4:	e17ffd15 	stw	r5,-12(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 44045b8:	e0bffd17 	ldw	r2,-12(fp)
 44045bc:	10c00104 	addi	r3,r2,4
 44045c0:	e0bff804 	addi	r2,fp,-32
 44045c4:	180b883a 	mov	r5,r3
 44045c8:	1009883a 	mov	r4,r2
 44045cc:	44004b00 	call	44004b0 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
 44045d0:	e0fff817 	ldw	r3,-32(fp)
 44045d4:	e13ffa17 	ldw	r4,-24(fp)
 44045d8:	e17ff917 	ldw	r5,-28(fp)
 44045dc:	e1bffb17 	ldw	r6,-20(fp)
 44045e0:	e0bffc17 	ldw	r2,-16(fp)
 44045e4:	d8800215 	stw	r2,8(sp)
 44045e8:	d8000115 	stw	zero,4(sp)
 44045ec:	00804034 	movhi	r2,256
 44045f0:	10bfffc4 	addi	r2,r2,-1
 44045f4:	d8800015 	stw	r2,0(sp)
 44045f8:	300f883a 	mov	r7,r6
 44045fc:	280d883a 	mov	r6,r5
 4404600:	200b883a 	mov	r5,r4
 4404604:	1809883a 	mov	r4,r3
 4404608:	440196c0 	call	440196c <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
 440460c:	e0bffd17 	ldw	r2,-12(fp)
 4404610:	10800017 	ldw	r2,0(r2)
 4404614:	e0bff715 	stw	r2,-36(fp)
    for(i=0;i<BTN_NUM;i++){
 4404618:	e03ff615 	stw	zero,-40(fp)
 440461c:	00006206 	br	44047a8 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 4404620:	e0bff617 	ldw	r2,-40(fp)
 4404624:	10800044 	addi	r2,r2,1
 4404628:	10800524 	muli	r2,r2,20
 440462c:	e0fffd17 	ldw	r3,-12(fp)
 4404630:	1887883a 	add	r3,r3,r2
 4404634:	e0bff804 	addi	r2,fp,-32
 4404638:	180b883a 	mov	r5,r3
 440463c:	1009883a 	mov	r4,r2
 4404640:	44004b00 	call	44004b0 <RectCopy>
        if (i == BTN_CLEAR){
 4404644:	e0bff617 	ldw	r2,-40(fp)
 4404648:	10002e1e 	bne	r2,zero,4404704 <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
 440464c:	e13ff817 	ldw	r4,-32(fp)
 4404650:	e17ffa17 	ldw	r5,-24(fp)
 4404654:	e1bff917 	ldw	r6,-28(fp)
 4404658:	e1fffb17 	ldw	r7,-20(fp)
 440465c:	e0fffd17 	ldw	r3,-12(fp)
 4404660:	e0bff617 	ldw	r2,-40(fp)
 4404664:	10800524 	muli	r2,r2,20
 4404668:	1885883a 	add	r2,r3,r2
 440466c:	10800904 	addi	r2,r2,36
 4404670:	10800017 	ldw	r2,0(r2)
 4404674:	e0fffc17 	ldw	r3,-16(fp)
 4404678:	d8c00215 	stw	r3,8(sp)
 440467c:	d8000115 	stw	zero,4(sp)
 4404680:	d8800015 	stw	r2,0(sp)
 4404684:	440196c0 	call	440196c <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
 4404688:	e0bff817 	ldw	r2,-32(fp)
 440468c:	14400204 	addi	r17,r2,8
 4404690:	e43ffa17 	ldw	r16,-24(fp)
 4404694:	e0bff804 	addi	r2,fp,-32
 4404698:	1009883a 	mov	r4,r2
 440469c:	440054c0 	call	440054c <RectHeight>
 44046a0:	10bffa84 	addi	r2,r2,-22
 44046a4:	1006d7fa 	srli	r3,r2,31
 44046a8:	1885883a 	add	r2,r3,r2
 44046ac:	1005d07a 	srai	r2,r2,1
 44046b0:	8089883a 	add	r4,r16,r2
 44046b4:	e0fffd17 	ldw	r3,-12(fp)
 44046b8:	e0bff617 	ldw	r2,-40(fp)
 44046bc:	10800524 	muli	r2,r2,20
 44046c0:	1885883a 	add	r2,r3,r2
 44046c4:	10800904 	addi	r2,r2,36
 44046c8:	10c00017 	ldw	r3,0(r2)
 44046cc:	008110f4 	movhi	r2,1091
 44046d0:	10923e04 	addi	r2,r2,18680
 44046d4:	d8800215 	stw	r2,8(sp)
 44046d8:	e0bffc17 	ldw	r2,-16(fp)
 44046dc:	d8800115 	stw	r2,4(sp)
 44046e0:	008110f4 	movhi	r2,1091
 44046e4:	1093b204 	addi	r2,r2,20168
 44046e8:	d8800015 	stw	r2,0(sp)
 44046ec:	000f883a 	mov	r7,zero
 44046f0:	180d883a 	mov	r6,r3
 44046f4:	200b883a 	mov	r5,r4
 44046f8:	8809883a 	mov	r4,r17
 44046fc:	440380c0 	call	440380c <vid_print_string_alpha>
 4404700:	00002606 	br	440479c <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
 4404704:	e0fff717 	ldw	r3,-36(fp)
 4404708:	e0bff617 	ldw	r2,-40(fp)
 440470c:	18801326 	beq	r3,r2,440475c <GUI_DeskDraw+0x1c4>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 4404710:	e0fff817 	ldw	r3,-32(fp)
 4404714:	e13ffa17 	ldw	r4,-24(fp)
 4404718:	e17ff917 	ldw	r5,-28(fp)
 440471c:	e1bffb17 	ldw	r6,-20(fp)
 4404720:	e0bffc17 	ldw	r2,-16(fp)
 4404724:	d8800215 	stw	r2,8(sp)
 4404728:	00800044 	movi	r2,1
 440472c:	d8800115 	stw	r2,4(sp)
 4404730:	d8000015 	stw	zero,0(sp)
 4404734:	300f883a 	mov	r7,r6
 4404738:	280d883a 	mov	r6,r5
 440473c:	200b883a 	mov	r5,r4
 4404740:	1809883a 	mov	r4,r3
 4404744:	440196c0 	call	440196c <vid_draw_box>
        		RectInflate(&rc, -4, -4);
 4404748:	e0bff804 	addi	r2,fp,-32
 440474c:	01bfff04 	movi	r6,-4
 4404750:	017fff04 	movi	r5,-4
 4404754:	1009883a 	mov	r4,r2
 4404758:	44003980 	call	4400398 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
 440475c:	e13ff817 	ldw	r4,-32(fp)
 4404760:	e17ffa17 	ldw	r5,-24(fp)
 4404764:	e1bff917 	ldw	r6,-28(fp)
 4404768:	e1fffb17 	ldw	r7,-20(fp)
 440476c:	e0fffd17 	ldw	r3,-12(fp)
 4404770:	e0bff617 	ldw	r2,-40(fp)
 4404774:	10800524 	muli	r2,r2,20
 4404778:	1885883a 	add	r2,r3,r2
 440477c:	10800904 	addi	r2,r2,36
 4404780:	10800017 	ldw	r2,0(r2)
 4404784:	e0fffc17 	ldw	r3,-16(fp)
 4404788:	d8c00215 	stw	r3,8(sp)
 440478c:	00c00044 	movi	r3,1
 4404790:	d8c00115 	stw	r3,4(sp)
 4404794:	d8800015 	stw	r2,0(sp)
 4404798:	440196c0 	call	440196c <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
 440479c:	e0bff617 	ldw	r2,-40(fp)
 44047a0:	10800044 	addi	r2,r2,1
 44047a4:	e0bff615 	stw	r2,-40(fp)
 44047a8:	e0bff617 	ldw	r2,-40(fp)
 44047ac:	10800150 	cmplti	r2,r2,5
 44047b0:	103f9b1e 	bne	r2,zero,4404620 <__reset+0xfb400620>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
 44047b4:	0001883a 	nop
 44047b8:	e6fffe04 	addi	sp,fp,-8
 44047bc:	dfc00317 	ldw	ra,12(sp)
 44047c0:	df000217 	ldw	fp,8(sp)
 44047c4:	dc400117 	ldw	r17,4(sp)
 44047c8:	dc000017 	ldw	r16,0(sp)
 44047cc:	dec00404 	addi	sp,sp,16
 44047d0:	f800283a 	ret

044047d4 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 44047d4:	defffb04 	addi	sp,sp,-20
 44047d8:	df000415 	stw	fp,16(sp)
 44047dc:	df000404 	addi	fp,sp,16
 44047e0:	e13ffe15 	stw	r4,-8(fp)
 44047e4:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
 44047e8:	00800044 	movi	r2,1
 44047ec:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
 44047f0:	00800c84 	movi	r2,50
 44047f4:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 44047f8:	e0bffe17 	ldw	r2,-8(fp)
 44047fc:	10c00017 	ldw	r3,0(r2)
 4404800:	e0bfff17 	ldw	r2,-4(fp)
 4404804:	10800017 	ldw	r2,0(r2)
 4404808:	1885c83a 	sub	r2,r3,r2
 440480c:	1000010e 	bge	r2,zero,4404814 <IsContinuedPoint+0x40>
 4404810:	0085c83a 	sub	r2,zero,r2
 4404814:	1007883a 	mov	r3,r2
 4404818:	e0bffd17 	ldw	r2,-12(fp)
 440481c:	10c0020e 	bge	r2,r3,4404828 <IsContinuedPoint+0x54>
        bYes = FALSE;
 4404820:	e03ffc15 	stw	zero,-16(fp)
 4404824:	00000b06 	br	4404854 <IsContinuedPoint+0x80>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 4404828:	e0bffe17 	ldw	r2,-8(fp)
 440482c:	10c00117 	ldw	r3,4(r2)
 4404830:	e0bfff17 	ldw	r2,-4(fp)
 4404834:	10800117 	ldw	r2,4(r2)
 4404838:	1885c83a 	sub	r2,r3,r2
 440483c:	1000010e 	bge	r2,zero,4404844 <IsContinuedPoint+0x70>
 4404840:	0085c83a 	sub	r2,zero,r2
 4404844:	1007883a 	mov	r3,r2
 4404848:	e0bffd17 	ldw	r2,-12(fp)
 440484c:	10c0010e 	bge	r2,r3,4404854 <IsContinuedPoint+0x80>
        bYes = FALSE;
 4404850:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
 4404854:	e0bffc17 	ldw	r2,-16(fp)
        
}
 4404858:	e037883a 	mov	sp,fp
 440485c:	df000017 	ldw	fp,0(sp)
 4404860:	dec00104 	addi	sp,sp,4
 4404864:	f800283a 	ret

04404868 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 4404868:	defff504 	addi	sp,sp,-44
 440486c:	dfc00a15 	stw	ra,40(sp)
 4404870:	df000915 	stw	fp,36(sp)
 4404874:	df000904 	addi	fp,sp,36
 4404878:	e13ffe15 	stw	r4,-8(fp)
 440487c:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4404880:	e0bfff17 	ldw	r2,-4(fp)
 4404884:	10800104 	addi	r2,r2,4
 4404888:	100b883a 	mov	r5,r2
 440488c:	e13ffa04 	addi	r4,fp,-24
 4404890:	44004b00 	call	44004b0 <RectCopy>
    RectInflate(&rc, -1, -1);
 4404894:	01bfffc4 	movi	r6,-1
 4404898:	017fffc4 	movi	r5,-1
 440489c:	e13ffa04 	addi	r4,fp,-24
 44048a0:	44003980 	call	4400398 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 44048a4:	e0fffa17 	ldw	r3,-24(fp)
 44048a8:	e13ffc17 	ldw	r4,-16(fp)
 44048ac:	e17ffb17 	ldw	r5,-20(fp)
 44048b0:	e1bffd17 	ldw	r6,-12(fp)
 44048b4:	e0bffe17 	ldw	r2,-8(fp)
 44048b8:	d8800215 	stw	r2,8(sp)
 44048bc:	00800044 	movi	r2,1
 44048c0:	d8800115 	stw	r2,4(sp)
 44048c4:	d8000015 	stw	zero,0(sp)
 44048c8:	300f883a 	mov	r7,r6
 44048cc:	280d883a 	mov	r6,r5
 44048d0:	200b883a 	mov	r5,r4
 44048d4:	1809883a 	mov	r4,r3
 44048d8:	440196c0 	call	440196c <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
 44048dc:	0001883a 	nop
 44048e0:	e037883a 	mov	sp,fp
 44048e4:	dfc00117 	ldw	ra,4(sp)
 44048e8:	df000017 	ldw	fp,0(sp)
 44048ec:	dec00204 	addi	sp,sp,8
 44048f0:	f800283a 	ret

044048f4 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 44048f4:	deffd004 	addi	sp,sp,-192
 44048f8:	dfc02f15 	stw	ra,188(sp)
 44048fc:	df002e15 	stw	fp,184(sp)
 4404900:	df002e04 	addi	fp,sp,184
 4404904:	e13ffe15 	stw	r4,-8(fp)
 4404908:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
 440490c:	00800144 	movi	r2,5
 4404910:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 4404914:	000b883a 	mov	r5,zero
 4404918:	e13ffe17 	ldw	r4,-8(fp)
 440491c:	44011080 	call	4401108 <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
 4404920:	e13ffe17 	ldw	r4,-8(fp)
 4404924:	44042580 	call	4404258 <GUI_ShowWelcome>
    usleep(1*1000*1000);
 4404928:	010003f4 	movhi	r4,15
 440492c:	21109004 	addi	r4,r4,16960
 4404930:	4418d100 	call	4418d10 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
 4404934:	000b883a 	mov	r5,zero
 4404938:	e13ffe17 	ldw	r4,-8(fp)
 440493c:	44011080 	call	4401108 <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
 4404940:	e0bfd804 	addi	r2,fp,-160
 4404944:	100b883a 	mov	r5,r2
 4404948:	e13ffe17 	ldw	r4,-8(fp)
 440494c:	440432c0 	call	440432c <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
 4404950:	e0bfd804 	addi	r2,fp,-160
 4404954:	100b883a 	mov	r5,r2
 4404958:	e13ffe17 	ldw	r4,-8(fp)
 440495c:	44045980 	call	4404598 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 4404960:	e0bfd804 	addi	r2,fp,-160
 4404964:	10c00104 	addi	r3,r2,4
 4404968:	e0bffa04 	addi	r2,fp,-24
 440496c:	180b883a 	mov	r5,r3
 4404970:	1009883a 	mov	r4,r2
 4404974:	44004b00 	call	44004b0 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 4404978:	00ffff84 	movi	r3,-2
 440497c:	e0bfd617 	ldw	r2,-168(fp)
 4404980:	1889c83a 	sub	r4,r3,r2
 4404984:	00ffff84 	movi	r3,-2
 4404988:	e0bfd617 	ldw	r2,-168(fp)
 440498c:	1887c83a 	sub	r3,r3,r2
 4404990:	e0bffa04 	addi	r2,fp,-24
 4404994:	180d883a 	mov	r6,r3
 4404998:	200b883a 	mov	r5,r4
 440499c:	1009883a 	mov	r4,r2
 44049a0:	44003980 	call	4400398 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 44049a4:	e0bfd817 	ldw	r2,-160(fp)
 44049a8:	10800524 	muli	r2,r2,20
 44049ac:	e0ffd404 	addi	r3,fp,-176
 44049b0:	1885883a 	add	r2,r3,r2
 44049b4:	10800d04 	addi	r2,r2,52
 44049b8:	10800017 	ldw	r2,0(r2)
 44049bc:	e0bfd415 	stw	r2,-176(fp)
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
 44049c0:	e0fff704 	addi	r3,fp,-36
 44049c4:	e0bff604 	addi	r2,fp,-40
 44049c8:	180d883a 	mov	r6,r3
 44049cc:	100b883a 	mov	r5,r2
 44049d0:	e13fff17 	ldw	r4,-4(fp)
 44049d4:	44071140 	call	4407114 <Touch_GetXY>
 44049d8:	103ff926 	beq	r2,zero,44049c0 <__reset+0xfb4009c0>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
 44049dc:	e0bff617 	ldw	r2,-40(fp)
 44049e0:	e0fff717 	ldw	r3,-36(fp)
 44049e4:	180d883a 	mov	r6,r3
 44049e8:	100b883a 	mov	r5,r2
 44049ec:	010110f4 	movhi	r4,1091
 44049f0:	21124004 	addi	r4,r4,18688
 44049f4:	440ae9c0 	call	440ae9c <printf>
                PtSet(&Pt, X, Y);
 44049f8:	e0fff617 	ldw	r3,-40(fp)
 44049fc:	e13ff717 	ldw	r4,-36(fp)
 4404a00:	e0bff804 	addi	r2,fp,-32
 4404a04:	200d883a 	mov	r6,r4
 4404a08:	180b883a 	mov	r5,r3
 4404a0c:	1009883a 	mov	r4,r2
 4404a10:	44002f40 	call	44002f4 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
 4404a14:	e0fffa04 	addi	r3,fp,-24
 4404a18:	e0bff804 	addi	r2,fp,-32
 4404a1c:	180b883a 	mov	r5,r3
 4404a20:	1009883a 	mov	r4,r2
 4404a24:	44002700 	call	4400270 <IsPtInRect>
 4404a28:	10000c26 	beq	r2,zero,4404a5c <GUI+0x168>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
 4404a2c:	e0fff817 	ldw	r3,-32(fp)
 4404a30:	e13ff917 	ldw	r4,-28(fp)
 4404a34:	e0bffe17 	ldw	r2,-8(fp)
 4404a38:	d8800115 	stw	r2,4(sp)
 4404a3c:	00800044 	movi	r2,1
 4404a40:	d8800015 	stw	r2,0(sp)
 4404a44:	e1ffd417 	ldw	r7,-176(fp)
 4404a48:	e1bfd617 	ldw	r6,-168(fp)
 4404a4c:	200b883a 	mov	r5,r4
 4404a50:	1809883a 	mov	r4,r3
 4404a54:	44021bc0 	call	44021bc <vid_draw_circle>
 4404a58:	003fd906 	br	44049c0 <__reset+0xfb4009c0>
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
 4404a5c:	e0fff804 	addi	r3,fp,-32
 4404a60:	e0bfd804 	addi	r2,fp,-160
 4404a64:	180b883a 	mov	r5,r3
 4404a68:	1009883a 	mov	r4,r2
 4404a6c:	44045080 	call	4404508 <GUI_CheckButton>
 4404a70:	1000071e 	bne	r2,zero,4404a90 <GUI+0x19c>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
 4404a74:	e0bfd804 	addi	r2,fp,-160
 4404a78:	100b883a 	mov	r5,r2
 4404a7c:	e13ffe17 	ldw	r4,-8(fp)
 4404a80:	44048680 	call	4404868 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
 4404a84:	e13fff17 	ldw	r4,-4(fp)
 4404a88:	44070d80 	call	44070d8 <Touch_EmptyFifo>
 4404a8c:	003fcc06 	br	44049c0 <__reset+0xfb4009c0>
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
 4404a90:	e0fff804 	addi	r3,fp,-32
 4404a94:	e0bfd804 	addi	r2,fp,-160
 4404a98:	180b883a 	mov	r5,r3
 4404a9c:	1009883a 	mov	r4,r2
 4404aa0:	44045080 	call	4404508 <GUI_CheckButton>
 4404aa4:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
 4404aa8:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
 4404aac:	e0bfd717 	ldw	r2,-164(fp)
 4404ab0:	108001a0 	cmpeqi	r2,r2,6
 4404ab4:	103fc21e 	bne	r2,zero,44049c0 <__reset+0xfb4009c0>
 4404ab8:	e0bfd717 	ldw	r2,-164(fp)
 4404abc:	103fc026 	beq	r2,zero,44049c0 <__reset+0xfb4009c0>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
 4404ac0:	e0ffd817 	ldw	r3,-160(fp)
 4404ac4:	e0bfd717 	ldw	r2,-164(fp)
 4404ac8:	18800426 	beq	r3,r2,4404adc <GUI+0x1e8>
                            DeskInfo.Paint_Index = ButtonId;
 4404acc:	e0bfd717 	ldw	r2,-164(fp)
 4404ad0:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
 4404ad4:	00800044 	movi	r2,1
 4404ad8:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
 4404adc:	e0bfd517 	ldw	r2,-172(fp)
 4404ae0:	103fb726 	beq	r2,zero,44049c0 <__reset+0xfb4009c0>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 4404ae4:	e0bfd817 	ldw	r2,-160(fp)
 4404ae8:	10800524 	muli	r2,r2,20
 4404aec:	e0ffd404 	addi	r3,fp,-176
 4404af0:	1885883a 	add	r2,r3,r2
 4404af4:	10800d04 	addi	r2,r2,52
 4404af8:	10800017 	ldw	r2,0(r2)
 4404afc:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
 4404b00:	e0bfd804 	addi	r2,fp,-160
 4404b04:	100b883a 	mov	r5,r2
 4404b08:	e13ffe17 	ldw	r4,-8(fp)
 4404b0c:	44045980 	call	4404598 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
 4404b10:	e13fff17 	ldw	r4,-4(fp)
 4404b14:	44070d80 	call	44070d8 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
 4404b18:	003fa906 	br	44049c0 <__reset+0xfb4009c0>

04404b1c <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
 4404b1c:	defff904 	addi	sp,sp,-28
 4404b20:	dfc00615 	stw	ra,24(sp)
 4404b24:	df000515 	stw	fp,20(sp)
 4404b28:	df000504 	addi	fp,sp,20
 4404b2c:	e13ffe15 	stw	r4,-8(fp)
 4404b30:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 4404b34:	d0edc017 	ldw	r3,-18688(gp)
 4404b38:	d1200117 	ldw	r4,-32764(gp)
 4404b3c:	e0bfff17 	ldw	r2,-4(fp)
 4404b40:	d8800215 	stw	r2,8(sp)
 4404b44:	e0bffe17 	ldw	r2,-8(fp)
 4404b48:	d8800115 	stw	r2,4(sp)
 4404b4c:	008110f4 	movhi	r2,1091
 4404b50:	1093b204 	addi	r2,r2,20168
 4404b54:	d8800015 	stw	r2,0(sp)
 4404b58:	000f883a 	mov	r7,zero
 4404b5c:	01803fc4 	movi	r6,255
 4404b60:	200b883a 	mov	r5,r4
 4404b64:	1809883a 	mov	r4,r3
 4404b68:	440380c0 	call	440380c <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
 4404b6c:	0001883a 	nop
 4404b70:	e037883a 	mov	sp,fp
 4404b74:	dfc00117 	ldw	ra,4(sp)
 4404b78:	df000017 	ldw	fp,0(sp)
 4404b7c:	dec00204 	addi	sp,sp,8
 4404b80:	f800283a 	ret

04404b84 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
 4404b84:	defff804 	addi	sp,sp,-32
 4404b88:	dfc00715 	stw	ra,28(sp)
 4404b8c:	df000615 	stw	fp,24(sp)
 4404b90:	df000604 	addi	fp,sp,24
 4404b94:	e13ffc15 	stw	r4,-16(fp)
 4404b98:	e17ffd15 	stw	r5,-12(fp)
 4404b9c:	e1bffe15 	stw	r6,-8(fp)
 4404ba0:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
 4404ba4:	e0bffc17 	ldw	r2,-16(fp)
 4404ba8:	d8800115 	stw	r2,4(sp)
 4404bac:	00800044 	movi	r2,1
 4404bb0:	d8800015 	stw	r2,0(sp)
 4404bb4:	e1ffff17 	ldw	r7,-4(fp)
 4404bb8:	01800284 	movi	r6,10
 4404bbc:	e17ffe17 	ldw	r5,-8(fp)
 4404bc0:	e13ffd17 	ldw	r4,-12(fp)
 4404bc4:	44021bc0 	call	44021bc <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
 4404bc8:	0001883a 	nop
 4404bcc:	e037883a 	mov	sp,fp
 4404bd0:	dfc00117 	ldw	ra,4(sp)
 4404bd4:	df000017 	ldw	fp,0(sp)
 4404bd8:	dec00204 	addi	sp,sp,8
 4404bdc:	f800283a 	ret

04404be0 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
 4404be0:	defff904 	addi	sp,sp,-28
 4404be4:	dfc00615 	stw	ra,24(sp)
 4404be8:	df000515 	stw	fp,20(sp)
 4404bec:	df000504 	addi	fp,sp,20
 4404bf0:	e13ffe15 	stw	r4,-8(fp)
 4404bf4:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 4404bf8:	e0bfff17 	ldw	r2,-4(fp)
 4404bfc:	d8800215 	stw	r2,8(sp)
 4404c00:	e0bffe17 	ldw	r2,-8(fp)
 4404c04:	d8800115 	stw	r2,4(sp)
 4404c08:	008110f4 	movhi	r2,1091
 4404c0c:	1093b204 	addi	r2,r2,20168
 4404c10:	d8800015 	stw	r2,0(sp)
 4404c14:	000f883a 	mov	r7,zero
 4404c18:	01804034 	movhi	r6,256
 4404c1c:	31bfffc4 	addi	r6,r6,-1
 4404c20:	01400044 	movi	r5,1
 4404c24:	01000044 	movi	r4,1
 4404c28:	440380c0 	call	440380c <vid_print_string_alpha>
}
 4404c2c:	0001883a 	nop
 4404c30:	e037883a 	mov	sp,fp
 4404c34:	dfc00117 	ldw	ra,4(sp)
 4404c38:	df000017 	ldw	fp,0(sp)
 4404c3c:	dec00204 	addi	sp,sp,8
 4404c40:	f800283a 	ret

04404c44 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
 4404c44:	defffe04 	addi	sp,sp,-8
 4404c48:	df000115 	stw	fp,4(sp)
 4404c4c:	df000104 	addi	fp,sp,4
 4404c50:	e13fff15 	stw	r4,-4(fp)
return ;
 4404c54:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
 4404c58:	e037883a 	mov	sp,fp
 4404c5c:	df000017 	ldw	fp,0(sp)
 4404c60:	dec00104 	addi	sp,sp,4
 4404c64:	f800283a 	ret

04404c68 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
 4404c68:	defff204 	addi	sp,sp,-56
 4404c6c:	dfc00d15 	stw	ra,52(sp)
 4404c70:	df000c15 	stw	fp,48(sp)
 4404c74:	df000c04 	addi	fp,sp,48
 4404c78:	e13ffe15 	stw	r4,-8(fp)
 4404c7c:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4404c80:	e03ff515 	stw	zero,-44(fp)
 4404c84:	00001106 	br	4404ccc <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
 4404c88:	e03ff415 	stw	zero,-48(fp)
 4404c8c:	00000806 	br	4404cb0 <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
 4404c90:	e1fffe17 	ldw	r7,-8(fp)
 4404c94:	e1bfff17 	ldw	r6,-4(fp)
 4404c98:	e17ff517 	ldw	r5,-44(fp)
 4404c9c:	e13ff417 	ldw	r4,-48(fp)
 4404ca0:	4401bb40 	call	4401bb4 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4404ca4:	e0bff417 	ldw	r2,-48(fp)
 4404ca8:	10800044 	addi	r2,r2,1
 4404cac:	e0bff415 	stw	r2,-48(fp)
 4404cb0:	e0bffe17 	ldw	r2,-8(fp)
 4404cb4:	10800117 	ldw	r2,4(r2)
 4404cb8:	e0fff417 	ldw	r3,-48(fp)
 4404cbc:	18bff416 	blt	r3,r2,4404c90 <__reset+0xfb400c90>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4404cc0:	e0bff517 	ldw	r2,-44(fp)
 4404cc4:	10800044 	addi	r2,r2,1
 4404cc8:	e0bff515 	stw	r2,-44(fp)
 4404ccc:	e0bffe17 	ldw	r2,-8(fp)
 4404cd0:	10800217 	ldw	r2,8(r2)
 4404cd4:	e0fff517 	ldw	r3,-44(fp)
 4404cd8:	18bfeb16 	blt	r3,r2,4404c88 <__reset+0xfb400c88>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
 4404cdc:	e0bff604 	addi	r2,fp,-40
 4404ce0:	e1bfff17 	ldw	r6,-4(fp)
 4404ce4:	014110f4 	movhi	r5,1091
 4404ce8:	29524404 	addi	r5,r5,18704
 4404cec:	1009883a 	mov	r4,r2
 4404cf0:	440b0580 	call	440b058 <sprintf>
    ShowInfo(pDisplay, szText);
 4404cf4:	e0bff604 	addi	r2,fp,-40
 4404cf8:	100b883a 	mov	r5,r2
 4404cfc:	e13ffe17 	ldw	r4,-8(fp)
 4404d00:	4404be00 	call	4404be0 <ShowInfo>



}
 4404d04:	0001883a 	nop
 4404d08:	e037883a 	mov	sp,fp
 4404d0c:	dfc00117 	ldw	ra,4(sp)
 4404d10:	df000017 	ldw	fp,0(sp)
 4404d14:	dec00204 	addi	sp,sp,8
 4404d18:	f800283a 	ret

04404d1c <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
 4404d1c:	defff104 	addi	sp,sp,-60
 4404d20:	dfc00e15 	stw	ra,56(sp)
 4404d24:	df000d15 	stw	fp,52(sp)
 4404d28:	df000d04 	addi	fp,sp,52
 4404d2c:	e13ffe15 	stw	r4,-8(fp)
 4404d30:	2805883a 	mov	r2,r5
 4404d34:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4404d38:	e03ff415 	stw	zero,-48(fp)
 4404d3c:	00002206 	br	4404dc8 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
 4404d40:	e03ff315 	stw	zero,-52(fp)
 4404d44:	00001906 	br	4404dac <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
 4404d48:	e0ffff03 	ldbu	r3,-4(fp)
 4404d4c:	e0bff317 	ldw	r2,-52(fp)
 4404d50:	180b883a 	mov	r5,r3
 4404d54:	1009883a 	mov	r4,r2
 4404d58:	4407e2c0 	call	4407e2c <__modsi3>
 4404d5c:	10000626 	beq	r2,zero,4404d78 <VPG_Grid+0x5c>
 4404d60:	e0ffff03 	ldbu	r3,-4(fp)
 4404d64:	e0bff417 	ldw	r2,-48(fp)
 4404d68:	180b883a 	mov	r5,r3
 4404d6c:	1009883a 	mov	r4,r2
 4404d70:	4407e2c0 	call	4407e2c <__modsi3>
 4404d74:	1000041e 	bne	r2,zero,4404d88 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
 4404d78:	00804034 	movhi	r2,256
 4404d7c:	10bfffc4 	addi	r2,r2,-1
 4404d80:	e0bff515 	stw	r2,-44(fp)
 4404d84:	00000106 	br	4404d8c <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
 4404d88:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4404d8c:	e1fffe17 	ldw	r7,-8(fp)
 4404d90:	e1bff517 	ldw	r6,-44(fp)
 4404d94:	e17ff417 	ldw	r5,-48(fp)
 4404d98:	e13ff317 	ldw	r4,-52(fp)
 4404d9c:	4401bb40 	call	4401bb4 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4404da0:	e0bff317 	ldw	r2,-52(fp)
 4404da4:	10800044 	addi	r2,r2,1
 4404da8:	e0bff315 	stw	r2,-52(fp)
 4404dac:	e0bffe17 	ldw	r2,-8(fp)
 4404db0:	10800117 	ldw	r2,4(r2)
 4404db4:	e0fff317 	ldw	r3,-52(fp)
 4404db8:	18bfe316 	blt	r3,r2,4404d48 <__reset+0xfb400d48>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4404dbc:	e0bff417 	ldw	r2,-48(fp)
 4404dc0:	10800044 	addi	r2,r2,1
 4404dc4:	e0bff415 	stw	r2,-48(fp)
 4404dc8:	e0bffe17 	ldw	r2,-8(fp)
 4404dcc:	10800217 	ldw	r2,8(r2)
 4404dd0:	e0fff417 	ldw	r3,-48(fp)
 4404dd4:	18bfda16 	blt	r3,r2,4404d40 <__reset+0xfb400d40>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 4404dd8:	e0ffff03 	ldbu	r3,-4(fp)
 4404ddc:	e0bff604 	addi	r2,fp,-40
 4404de0:	180d883a 	mov	r6,r3
 4404de4:	014110f4 	movhi	r5,1091
 4404de8:	29524804 	addi	r5,r5,18720
 4404dec:	1009883a 	mov	r4,r2
 4404df0:	440b0580 	call	440b058 <sprintf>
    ShowInfo(pDisplay, szText);
 4404df4:	e0bff604 	addi	r2,fp,-40
 4404df8:	100b883a 	mov	r5,r2
 4404dfc:	e13ffe17 	ldw	r4,-8(fp)
 4404e00:	4404be00 	call	4404be0 <ShowInfo>

}
 4404e04:	0001883a 	nop
 4404e08:	e037883a 	mov	sp,fp
 4404e0c:	dfc00117 	ldw	ra,4(sp)
 4404e10:	df000017 	ldw	fp,0(sp)
 4404e14:	dec00204 	addi	sp,sp,8
 4404e18:	f800283a 	ret

04404e1c <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 4404e1c:	defff104 	addi	sp,sp,-60
 4404e20:	dfc00e15 	stw	ra,56(sp)
 4404e24:	df000d15 	stw	fp,52(sp)
 4404e28:	df000d04 	addi	fp,sp,52
 4404e2c:	e13ffe15 	stw	r4,-8(fp)
 4404e30:	2805883a 	mov	r2,r5
 4404e34:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4404e38:	e03ff415 	stw	zero,-48(fp)
 4404e3c:	00001c06 	br	4404eb0 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 4404e40:	e03ff315 	stw	zero,-52(fp)
 4404e44:	00001306 	br	4404e94 <VPG_VGrid+0x78>
            if (x%GridSize == 0)
 4404e48:	e0ffff03 	ldbu	r3,-4(fp)
 4404e4c:	e0bff317 	ldw	r2,-52(fp)
 4404e50:	180b883a 	mov	r5,r3
 4404e54:	1009883a 	mov	r4,r2
 4404e58:	4407e2c0 	call	4407e2c <__modsi3>
 4404e5c:	1000041e 	bne	r2,zero,4404e70 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
 4404e60:	00804034 	movhi	r2,256
 4404e64:	10bfffc4 	addi	r2,r2,-1
 4404e68:	e0bff515 	stw	r2,-44(fp)
 4404e6c:	00000106 	br	4404e74 <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
 4404e70:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4404e74:	e1fffe17 	ldw	r7,-8(fp)
 4404e78:	e1bff517 	ldw	r6,-44(fp)
 4404e7c:	e17ff417 	ldw	r5,-48(fp)
 4404e80:	e13ff317 	ldw	r4,-52(fp)
 4404e84:	4401bb40 	call	4401bb4 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4404e88:	e0bff317 	ldw	r2,-52(fp)
 4404e8c:	10800044 	addi	r2,r2,1
 4404e90:	e0bff315 	stw	r2,-52(fp)
 4404e94:	e0bffe17 	ldw	r2,-8(fp)
 4404e98:	10800117 	ldw	r2,4(r2)
 4404e9c:	e0fff317 	ldw	r3,-52(fp)
 4404ea0:	18bfe916 	blt	r3,r2,4404e48 <__reset+0xfb400e48>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4404ea4:	e0bff417 	ldw	r2,-48(fp)
 4404ea8:	10800044 	addi	r2,r2,1
 4404eac:	e0bff415 	stw	r2,-48(fp)
 4404eb0:	e0bffe17 	ldw	r2,-8(fp)
 4404eb4:	10800217 	ldw	r2,8(r2)
 4404eb8:	e0fff417 	ldw	r3,-48(fp)
 4404ebc:	18bfe016 	blt	r3,r2,4404e40 <__reset+0xfb400e40>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 4404ec0:	e0ffff03 	ldbu	r3,-4(fp)
 4404ec4:	e0bff604 	addi	r2,fp,-40
 4404ec8:	180d883a 	mov	r6,r3
 4404ecc:	014110f4 	movhi	r5,1091
 4404ed0:	29524a04 	addi	r5,r5,18728
 4404ed4:	1009883a 	mov	r4,r2
 4404ed8:	440b0580 	call	440b058 <sprintf>
    ShowInfo(pDisplay, szText);
 4404edc:	e0bff604 	addi	r2,fp,-40
 4404ee0:	100b883a 	mov	r5,r2
 4404ee4:	e13ffe17 	ldw	r4,-8(fp)
 4404ee8:	4404be00 	call	4404be0 <ShowInfo>

}
 4404eec:	0001883a 	nop
 4404ef0:	e037883a 	mov	sp,fp
 4404ef4:	dfc00117 	ldw	ra,4(sp)
 4404ef8:	df000017 	ldw	fp,0(sp)
 4404efc:	dec00204 	addi	sp,sp,8
 4404f00:	f800283a 	ret

04404f04 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 4404f04:	defff104 	addi	sp,sp,-60
 4404f08:	dfc00e15 	stw	ra,56(sp)
 4404f0c:	df000d15 	stw	fp,52(sp)
 4404f10:	df000d04 	addi	fp,sp,52
 4404f14:	e13ffe15 	stw	r4,-8(fp)
 4404f18:	2805883a 	mov	r2,r5
 4404f1c:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4404f20:	e03ff415 	stw	zero,-48(fp)
 4404f24:	00001c06 	br	4404f98 <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 4404f28:	e03ff315 	stw	zero,-52(fp)
 4404f2c:	00001306 	br	4404f7c <VPG_HGrid+0x78>
            if (y%GridSize == 0)
 4404f30:	e0ffff03 	ldbu	r3,-4(fp)
 4404f34:	e0bff417 	ldw	r2,-48(fp)
 4404f38:	180b883a 	mov	r5,r3
 4404f3c:	1009883a 	mov	r4,r2
 4404f40:	4407e2c0 	call	4407e2c <__modsi3>
 4404f44:	1000041e 	bne	r2,zero,4404f58 <VPG_HGrid+0x54>
                Value32 = WHITE_24;
 4404f48:	00804034 	movhi	r2,256
 4404f4c:	10bfffc4 	addi	r2,r2,-1
 4404f50:	e0bff515 	stw	r2,-44(fp)
 4404f54:	00000106 	br	4404f5c <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
 4404f58:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4404f5c:	e1fffe17 	ldw	r7,-8(fp)
 4404f60:	e1bff517 	ldw	r6,-44(fp)
 4404f64:	e17ff417 	ldw	r5,-48(fp)
 4404f68:	e13ff317 	ldw	r4,-52(fp)
 4404f6c:	4401bb40 	call	4401bb4 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4404f70:	e0bff317 	ldw	r2,-52(fp)
 4404f74:	10800044 	addi	r2,r2,1
 4404f78:	e0bff315 	stw	r2,-52(fp)
 4404f7c:	e0bffe17 	ldw	r2,-8(fp)
 4404f80:	10800117 	ldw	r2,4(r2)
 4404f84:	e0fff317 	ldw	r3,-52(fp)
 4404f88:	18bfe916 	blt	r3,r2,4404f30 <__reset+0xfb400f30>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4404f8c:	e0bff417 	ldw	r2,-48(fp)
 4404f90:	10800044 	addi	r2,r2,1
 4404f94:	e0bff415 	stw	r2,-48(fp)
 4404f98:	e0bffe17 	ldw	r2,-8(fp)
 4404f9c:	10800217 	ldw	r2,8(r2)
 4404fa0:	e0fff417 	ldw	r3,-48(fp)
 4404fa4:	18bfe016 	blt	r3,r2,4404f28 <__reset+0xfb400f28>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 4404fa8:	e0ffff03 	ldbu	r3,-4(fp)
 4404fac:	e0bff604 	addi	r2,fp,-40
 4404fb0:	180d883a 	mov	r6,r3
 4404fb4:	014110f4 	movhi	r5,1091
 4404fb8:	29524c04 	addi	r5,r5,18736
 4404fbc:	1009883a 	mov	r4,r2
 4404fc0:	440b0580 	call	440b058 <sprintf>
    ShowInfo(pDisplay, szText);
 4404fc4:	e0bff604 	addi	r2,fp,-40
 4404fc8:	100b883a 	mov	r5,r2
 4404fcc:	e13ffe17 	ldw	r4,-8(fp)
 4404fd0:	4404be00 	call	4404be0 <ShowInfo>

}
 4404fd4:	0001883a 	nop
 4404fd8:	e037883a 	mov	sp,fp
 4404fdc:	dfc00117 	ldw	ra,4(sp)
 4404fe0:	df000017 	ldw	fp,0(sp)
 4404fe4:	dec00204 	addi	sp,sp,8
 4404fe8:	f800283a 	ret

04404fec <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
 4404fec:	defffa04 	addi	sp,sp,-24
 4404ff0:	dfc00515 	stw	ra,20(sp)
 4404ff4:	df000415 	stw	fp,16(sp)
 4404ff8:	df000404 	addi	fp,sp,16
 4404ffc:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 4405000:	e03ffd15 	stw	zero,-12(fp)
 4405004:	00005c06 	br	4405178 <VPG_ColorBar+0x18c>
        for(x=0;x<pDisplay->width;x++){
 4405008:	e03ffc15 	stw	zero,-16(fp)
 440500c:	00005306 	br	440515c <VPG_ColorBar+0x170>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
 4405010:	e0bffc17 	ldw	r2,-16(fp)
 4405014:	10000c26 	beq	r2,zero,4405048 <VPG_ColorBar+0x5c>
 4405018:	e0bffd17 	ldw	r2,-12(fp)
 440501c:	10000a26 	beq	r2,zero,4405048 <VPG_ColorBar+0x5c>
 4405020:	e0bfff17 	ldw	r2,-4(fp)
 4405024:	10800117 	ldw	r2,4(r2)
 4405028:	10ffffc4 	addi	r3,r2,-1
 440502c:	e0bffc17 	ldw	r2,-16(fp)
 4405030:	18800526 	beq	r3,r2,4405048 <VPG_ColorBar+0x5c>
 4405034:	e0bfff17 	ldw	r2,-4(fp)
 4405038:	10800217 	ldw	r2,8(r2)
 440503c:	10ffffc4 	addi	r3,r2,-1
 4405040:	e0bffd17 	ldw	r2,-12(fp)
 4405044:	1880041e 	bne	r3,r2,4405058 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
 4405048:	00804034 	movhi	r2,256
 440504c:	10bfffc4 	addi	r2,r2,-1
 4405050:	e0bffe15 	stw	r2,-8(fp)
 4405054:	00003906 	br	440513c <VPG_ColorBar+0x150>
            }else if (y < pDisplay->height/4){
 4405058:	e0bfff17 	ldw	r2,-4(fp)
 440505c:	10800217 	ldw	r2,8(r2)
 4405060:	1000010e 	bge	r2,zero,4405068 <VPG_ColorBar+0x7c>
 4405064:	108000c4 	addi	r2,r2,3
 4405068:	1005d0ba 	srai	r2,r2,2
 440506c:	1007883a 	mov	r3,r2
 4405070:	e0bffd17 	ldw	r2,-12(fp)
 4405074:	10c0040e 	bge	r2,r3,4405088 <VPG_ColorBar+0x9c>
                // red
                Value32 = x & 0xFF;
 4405078:	e0bffc17 	ldw	r2,-16(fp)
 440507c:	10803fcc 	andi	r2,r2,255
 4405080:	e0bffe15 	stw	r2,-8(fp)
 4405084:	00002d06 	br	440513c <VPG_ColorBar+0x150>
            }else if (y < pDisplay->height/2){
 4405088:	e0bfff17 	ldw	r2,-4(fp)
 440508c:	10800217 	ldw	r2,8(r2)
 4405090:	1006d7fa 	srli	r3,r2,31
 4405094:	1885883a 	add	r2,r3,r2
 4405098:	1005d07a 	srai	r2,r2,1
 440509c:	1007883a 	mov	r3,r2
 44050a0:	e0bffd17 	ldw	r2,-12(fp)
 44050a4:	10c0050e 	bge	r2,r3,44050bc <VPG_ColorBar+0xd0>
                Value32 = (x & 0xFF) << 8;
 44050a8:	e0bffc17 	ldw	r2,-16(fp)
 44050ac:	1004923a 	slli	r2,r2,8
 44050b0:	10bfffcc 	andi	r2,r2,65535
 44050b4:	e0bffe15 	stw	r2,-8(fp)
 44050b8:	00002006 	br	440513c <VPG_ColorBar+0x150>
            }else if (y < pDisplay->height*3/4){
 44050bc:	e0bfff17 	ldw	r2,-4(fp)
 44050c0:	10c00217 	ldw	r3,8(r2)
 44050c4:	1805883a 	mov	r2,r3
 44050c8:	1085883a 	add	r2,r2,r2
 44050cc:	10c5883a 	add	r2,r2,r3
 44050d0:	1000010e 	bge	r2,zero,44050d8 <VPG_ColorBar+0xec>
 44050d4:	108000c4 	addi	r2,r2,3
 44050d8:	1005d0ba 	srai	r2,r2,2
 44050dc:	1007883a 	mov	r3,r2
 44050e0:	e0bffd17 	ldw	r2,-12(fp)
 44050e4:	10c0050e 	bge	r2,r3,44050fc <VPG_ColorBar+0x110>
                Value32 = (x & 0xFF) << 16;
 44050e8:	e0bffc17 	ldw	r2,-16(fp)
 44050ec:	10803fcc 	andi	r2,r2,255
 44050f0:	1004943a 	slli	r2,r2,16
 44050f4:	e0bffe15 	stw	r2,-8(fp)
 44050f8:	00001006 	br	440513c <VPG_ColorBar+0x150>
            }else{
                Value32 = x & 0xFF;
 44050fc:	e0bffc17 	ldw	r2,-16(fp)
 4405100:	10803fcc 	andi	r2,r2,255
 4405104:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
 4405108:	e0bffc17 	ldw	r2,-16(fp)
 440510c:	1004923a 	slli	r2,r2,8
 4405110:	10bfffcc 	andi	r2,r2,65535
 4405114:	e0fffe17 	ldw	r3,-8(fp)
 4405118:	1884b03a 	or	r2,r3,r2
 440511c:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
 4405120:	e0bffc17 	ldw	r2,-16(fp)
 4405124:	10803fcc 	andi	r2,r2,255
 4405128:	1004943a 	slli	r2,r2,16
 440512c:	1007883a 	mov	r3,r2
 4405130:	e0bffe17 	ldw	r2,-8(fp)
 4405134:	10c4b03a 	or	r2,r2,r3
 4405138:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
 440513c:	e1ffff17 	ldw	r7,-4(fp)
 4405140:	e1bffe17 	ldw	r6,-8(fp)
 4405144:	e17ffd17 	ldw	r5,-12(fp)
 4405148:	e13ffc17 	ldw	r4,-16(fp)
 440514c:	4401bb40 	call	4401bb4 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4405150:	e0bffc17 	ldw	r2,-16(fp)
 4405154:	10800044 	addi	r2,r2,1
 4405158:	e0bffc15 	stw	r2,-16(fp)
 440515c:	e0bfff17 	ldw	r2,-4(fp)
 4405160:	10800117 	ldw	r2,4(r2)
 4405164:	e0fffc17 	ldw	r3,-16(fp)
 4405168:	18bfa916 	blt	r3,r2,4405010 <__reset+0xfb401010>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 440516c:	e0bffd17 	ldw	r2,-12(fp)
 4405170:	10800044 	addi	r2,r2,1
 4405174:	e0bffd15 	stw	r2,-12(fp)
 4405178:	e0bfff17 	ldw	r2,-4(fp)
 440517c:	10800217 	ldw	r2,8(r2)
 4405180:	e0fffd17 	ldw	r3,-12(fp)
 4405184:	18bfa016 	blt	r3,r2,4405008 <__reset+0xfb401008>

        }

    }

}
 4405188:	0001883a 	nop
 440518c:	e037883a 	mov	sp,fp
 4405190:	dfc00117 	ldw	ra,4(sp)
 4405194:	df000017 	ldw	fp,0(sp)
 4405198:	dec00204 	addi	sp,sp,8
 440519c:	f800283a 	ret

044051a0 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
 44051a0:	defffc04 	addi	sp,sp,-16
 44051a4:	dfc00315 	stw	ra,12(sp)
 44051a8:	df000215 	stw	fp,8(sp)
 44051ac:	df000204 	addi	fp,sp,8
 44051b0:	e13ffe15 	stw	r4,-8(fp)
 44051b4:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
 44051b8:	e0bfff17 	ldw	r2,-4(fp)
 44051bc:	108003e8 	cmpgeui	r2,r2,15
 44051c0:	1000511e 	bne	r2,zero,4405308 <GUI_ShowPAT+0x168>
 44051c4:	e0bfff17 	ldw	r2,-4(fp)
 44051c8:	100690ba 	slli	r3,r2,2
 44051cc:	00811034 	movhi	r2,1088
 44051d0:	10947804 	addi	r2,r2,20960
 44051d4:	1885883a 	add	r2,r3,r2
 44051d8:	10800017 	ldw	r2,0(r2)
 44051dc:	1000683a 	jmp	r2
 44051e0:	0440521c 	xori	r17,zero,328
 44051e4:	04405228 	cmpgeui	r17,zero,328
 44051e8:	0440523c 	xorhi	r17,zero,328
 44051ec:	0440524c 	andi	r17,zero,329
 44051f0:	0440525c 	xori	r17,zero,329
 44051f4:	0440526c 	andhi	r17,zero,329
 44051f8:	04405278 	rdprs	r17,zero,329
 44051fc:	04405288 	cmpgei	r17,zero,330
 4405200:	04405298 	cmpnei	r17,zero,330
 4405204:	044052a8 	cmpgeui	r17,zero,330
 4405208:	044052b8 	rdprs	r17,zero,330
 440520c:	044052c8 	cmpgei	r17,zero,331
 4405210:	044052d8 	cmpnei	r17,zero,331
 4405214:	044052e8 	cmpgeui	r17,zero,331
 4405218:	044052f8 	rdprs	r17,zero,331
                    case 0: VPG_ColorBar(pDisplay); break;
 440521c:	e13ffe17 	ldw	r4,-8(fp)
 4405220:	4404fec0 	call	4404fec <VPG_ColorBar>
 4405224:	00003806 	br	4405308 <GUI_ShowPAT+0x168>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
 4405228:	01404034 	movhi	r5,256
 440522c:	297fffc4 	addi	r5,r5,-1
 4405230:	e13ffe17 	ldw	r4,-8(fp)
 4405234:	4404c680 	call	4404c68 <VPG_ColorPanel>
 4405238:	00003306 	br	4405308 <GUI_ShowPAT+0x168>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
 440523c:	01403ff4 	movhi	r5,255
 4405240:	e13ffe17 	ldw	r4,-8(fp)
 4405244:	4404c680 	call	4404c68 <VPG_ColorPanel>
 4405248:	00002f06 	br	4405308 <GUI_ShowPAT+0x168>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
 440524c:	01600014 	movui	r5,32768
 4405250:	e13ffe17 	ldw	r4,-8(fp)
 4405254:	4404c680 	call	4404c68 <VPG_ColorPanel>
 4405258:	00002b06 	br	4405308 <GUI_ShowPAT+0x168>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
 440525c:	01403fc4 	movi	r5,255
 4405260:	e13ffe17 	ldw	r4,-8(fp)
 4405264:	4404c680 	call	4404c68 <VPG_ColorPanel>
 4405268:	00002706 	br	4405308 <GUI_ShowPAT+0x168>
                    case 5: VPG_XLine(pDisplay); break;
 440526c:	e13ffe17 	ldw	r4,-8(fp)
 4405270:	4404c440 	call	4404c44 <VPG_XLine>
 4405274:	00002406 	br	4405308 <GUI_ShowPAT+0x168>
                    case 6: VPG_VGrid(pDisplay, 2); break;
 4405278:	01400084 	movi	r5,2
 440527c:	e13ffe17 	ldw	r4,-8(fp)
 4405280:	4404e1c0 	call	4404e1c <VPG_VGrid>
 4405284:	00002006 	br	4405308 <GUI_ShowPAT+0x168>
                    case 7: VPG_VGrid(pDisplay, 4); break;
 4405288:	01400104 	movi	r5,4
 440528c:	e13ffe17 	ldw	r4,-8(fp)
 4405290:	4404e1c0 	call	4404e1c <VPG_VGrid>
 4405294:	00001c06 	br	4405308 <GUI_ShowPAT+0x168>
                    case 8: VPG_VGrid(pDisplay, 8); break;
 4405298:	01400204 	movi	r5,8
 440529c:	e13ffe17 	ldw	r4,-8(fp)
 44052a0:	4404e1c0 	call	4404e1c <VPG_VGrid>
 44052a4:	00001806 	br	4405308 <GUI_ShowPAT+0x168>
                    case 9: VPG_HGrid(pDisplay, 2); break;
 44052a8:	01400084 	movi	r5,2
 44052ac:	e13ffe17 	ldw	r4,-8(fp)
 44052b0:	4404f040 	call	4404f04 <VPG_HGrid>
 44052b4:	00001406 	br	4405308 <GUI_ShowPAT+0x168>
                    case 10: VPG_HGrid(pDisplay, 4); break;
 44052b8:	01400104 	movi	r5,4
 44052bc:	e13ffe17 	ldw	r4,-8(fp)
 44052c0:	4404f040 	call	4404f04 <VPG_HGrid>
 44052c4:	00001006 	br	4405308 <GUI_ShowPAT+0x168>
                    case 11: VPG_HGrid(pDisplay, 8); break;
 44052c8:	01400204 	movi	r5,8
 44052cc:	e13ffe17 	ldw	r4,-8(fp)
 44052d0:	4404f040 	call	4404f04 <VPG_HGrid>
 44052d4:	00000c06 	br	4405308 <GUI_ShowPAT+0x168>
                    case 12: VPG_Grid(pDisplay, 2); break;
 44052d8:	01400084 	movi	r5,2
 44052dc:	e13ffe17 	ldw	r4,-8(fp)
 44052e0:	4404d1c0 	call	4404d1c <VPG_Grid>
 44052e4:	00000806 	br	4405308 <GUI_ShowPAT+0x168>
                    case 13: VPG_Grid(pDisplay, 4); break;
 44052e8:	01400104 	movi	r5,4
 44052ec:	e13ffe17 	ldw	r4,-8(fp)
 44052f0:	4404d1c0 	call	4404d1c <VPG_Grid>
 44052f4:	00000406 	br	4405308 <GUI_ShowPAT+0x168>
                    case 14: VPG_Grid(pDisplay, 8); break;
 44052f8:	01400204 	movi	r5,8
 44052fc:	e13ffe17 	ldw	r4,-8(fp)
 4405300:	4404d1c0 	call	4404d1c <VPG_Grid>
 4405304:	0001883a 	nop
                }

}
 4405308:	0001883a 	nop
 440530c:	e037883a 	mov	sp,fp
 4405310:	dfc00117 	ldw	ra,4(sp)
 4405314:	df000017 	ldw	fp,0(sp)
 4405318:	dec00204 	addi	sp,sp,8
 440531c:	f800283a 	ret

04405320 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 4405320:	defff904 	addi	sp,sp,-28
 4405324:	dfc00615 	stw	ra,24(sp)
 4405328:	df000515 	stw	fp,20(sp)
 440532c:	df000504 	addi	fp,sp,20
 4405330:	e13ffe15 	stw	r4,-8(fp)
 4405334:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
 4405338:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 440533c:	000b883a 	mov	r5,zero
 4405340:	e13ffe17 	ldw	r4,-8(fp)
 4405344:	44011080 	call	4401108 <vid_clean_screen>


    VPG_ColorBar(pDisplay);
 4405348:	e13ffe17 	ldw	r4,-8(fp)
 440534c:	4404fec0 	call	4404fec <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
 4405350:	e17ffb17 	ldw	r5,-20(fp)
 4405354:	e13ffe17 	ldw	r4,-8(fp)
 4405358:	44051a00 	call	44051a0 <GUI_ShowPAT>

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
 440535c:	e0fffd04 	addi	r3,fp,-12
 4405360:	e0bffc04 	addi	r2,fp,-16
 4405364:	180d883a 	mov	r6,r3
 4405368:	100b883a 	mov	r5,r2
 440536c:	e13fff17 	ldw	r4,-4(fp)
 4405370:	44071140 	call	4407114 <Touch_GetXY>
 4405374:	103ff926 	beq	r2,zero,440535c <__reset+0xfb40135c>
            //printf(".");

            // change pattern
            PatId++;
 4405378:	e0bffb17 	ldw	r2,-20(fp)
 440537c:	10800044 	addi	r2,r2,1
 4405380:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
 4405384:	e0bffb17 	ldw	r2,-20(fp)
 4405388:	108003d0 	cmplti	r2,r2,15
 440538c:	1000011e 	bne	r2,zero,4405394 <GUI_VPG+0x74>
                PatId = 0;
 4405390:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
 4405394:	e17ffb17 	ldw	r5,-20(fp)
 4405398:	010110f4 	movhi	r4,1091
 440539c:	21124e04 	addi	r4,r4,18744
 44053a0:	440ae9c0 	call	440ae9c <printf>
            GUI_ShowPAT(pDisplay, PatId);
 44053a4:	e17ffb17 	ldw	r5,-20(fp)
 44053a8:	e13ffe17 	ldw	r4,-8(fp)
 44053ac:	44051a00 	call	44051a0 <GUI_ShowPAT>
            usleep(300*1000); // debounce
 44053b0:	01000174 	movhi	r4,5
 44053b4:	2124f804 	addi	r4,r4,-27680
 44053b8:	4418d100 	call	4418d10 <usleep>
            Touch_EmptyFifo( pTouch);
 44053bc:	e13fff17 	ldw	r4,-4(fp)
 44053c0:	44070d80 	call	44070d8 <Touch_EmptyFifo>
        }
    }
 44053c4:	003fe506 	br	440535c <__reset+0xfb40135c>

044053c8 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
 44053c8:	defff504 	addi	sp,sp,-44
 44053cc:	dfc00a15 	stw	ra,40(sp)
 44053d0:	df000915 	stw	fp,36(sp)
 44053d4:	df000904 	addi	fp,sp,36
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;
    int delay , count ;
    while (count<10) {
 44053d8:	00000c06 	br	440540c <main+0x44>
    delay=0;
 44053dc:	e03ff715 	stw	zero,-36(fp)
    while (delay <200000) {delay++;}
 44053e0:	00000306 	br	44053f0 <main+0x28>
 44053e4:	e0bff717 	ldw	r2,-36(fp)
 44053e8:	10800044 	addi	r2,r2,1
 44053ec:	e0bff715 	stw	r2,-36(fp)
 44053f0:	e0fff717 	ldw	r3,-36(fp)
 44053f4:	008000f4 	movhi	r2,3
 44053f8:	10834fc4 	addi	r2,r2,3391
 44053fc:	10fff90e 	bge	r2,r3,44053e4 <__reset+0xfb4013e4>
    count++;
 4405400:	e0bff817 	ldw	r2,-32(fp)
 4405404:	10800044 	addi	r2,r2,1
 4405408:	e0bff815 	stw	r2,-32(fp)
int main()
{
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;
    int delay , count ;
    while (count<10) {
 440540c:	e0bff817 	ldw	r2,-32(fp)
 4405410:	10800290 	cmplti	r2,r2,10
 4405414:	103ff11e 	bne	r2,zero,44053dc <__reset+0xfb4013dc>





    const bool bVPG = ((IORD(PIO_KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 4405418:	00820034 	movhi	r2,2048
 440541c:	10802404 	addi	r2,r2,144
 4405420:	10800037 	ldwio	r2,0(r2)
 4405424:	1080004c 	andi	r2,r2,1
 4405428:	1005003a 	cmpeq	r2,r2,zero
 440542c:	10803fcc 	andi	r2,r2,255
 4405430:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
 4405434:	010110f4 	movhi	r4,1091
 4405438:	21125104 	addi	r4,r4,18756
 440543c:	440af980 	call	440af98 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4405440:	018000c4 	movi	r6,3
 4405444:	01420034 	movhi	r5,2048
 4405448:	29401c04 	addi	r5,r5,112
 440544c:	01020034 	movhi	r4,2048
 4405450:	4406ef80 	call	4406ef8 <Touch_Init>
 4405454:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
 4405458:	e0bffa17 	ldw	r2,-24(fp)
 440545c:	1000041e 	bne	r2,zero,4405470 <main+0xa8>
       printf("Failed to init touch\r\n");
 4405460:	010110f4 	movhi	r4,1091
 4405464:	21125404 	addi	r4,r4,18768
 4405468:	440af980 	call	440af98 <puts>
 440546c:	00000306 	br	440547c <main+0xb4>
   }else{
       printf("Init touch successfully\r\n");
 4405470:	010110f4 	movhi	r4,1091
 4405474:	21125a04 	addi	r4,r4,18792
 4405478:	440af980 	call	440af98 <puts>

   }

   // init LCD
   LCD_Init();
 440547c:	44008780 	call	4400878 <LCD_Init>
   LCD_Clear(0X0000);
 4405480:	0009883a 	mov	r4,zero
 4405484:	44007840 	call	4400784 <LCD_Clear>

   Display.interlace = 0;
 4405488:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
 440548c:	00800084 	movi	r2,2
 4405490:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
 4405494:	00800404 	movi	r2,16
 4405498:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
 440549c:	00805004 	movi	r2,320
 44054a0:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
 44054a4:	00803c04 	movi	r2,240
 44054a8:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
 44054ac:	e0bff917 	ldw	r2,-28(fp)
 44054b0:	10000526 	beq	r2,zero,44054c8 <main+0x100>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
 44054b4:	e0bffb04 	addi	r2,fp,-20
 44054b8:	e17ffa17 	ldw	r5,-24(fp)
 44054bc:	1009883a 	mov	r4,r2
 44054c0:	44053200 	call	4405320 <GUI_VPG>
 44054c4:	00000406 	br	44054d8 <main+0x110>
   else
	   GUI(&Display, pTouch);
 44054c8:	e0bffb04 	addi	r2,fp,-20
 44054cc:	e17ffa17 	ldw	r5,-24(fp)
 44054d0:	1009883a 	mov	r4,r2
 44054d4:	44048f40 	call	44048f4 <GUI>
 44054d8:	0005883a 	mov	r2,zero


}
 44054dc:	e037883a 	mov	sp,fp
 44054e0:	dfc00117 	ldw	ra,4(sp)
 44054e4:	df000017 	ldw	fp,0(sp)
 44054e8:	dec00204 	addi	sp,sp,8
 44054ec:	f800283a 	ret

044054f0 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 44054f0:	defffd04 	addi	sp,sp,-12
 44054f4:	df000215 	stw	fp,8(sp)
 44054f8:	df000204 	addi	fp,sp,8
 44054fc:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 4405500:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 4405504:	00000306 	br	4405514 <my_wait+0x24>
        i++;
 4405508:	e0bffe17 	ldw	r2,-8(fp)
 440550c:	10800044 	addi	r2,r2,1
 4405510:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 4405514:	e0fffe17 	ldw	r3,-8(fp)
 4405518:	e0bfff17 	ldw	r2,-4(fp)
 440551c:	18bffa16 	blt	r3,r2,4405508 <__reset+0xfb401508>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 4405520:	0001883a 	nop
 4405524:	e037883a 	mov	sp,fp
 4405528:	df000017 	ldw	fp,0(sp)
 440552c:	dec00104 	addi	sp,sp,4
 4405530:	f800283a 	ret

04405534 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 4405534:	defff804 	addi	sp,sp,-32
 4405538:	dfc00715 	stw	ra,28(sp)
 440553c:	df000615 	stw	fp,24(sp)
 4405540:	df000604 	addi	fp,sp,24
 4405544:	e13ffb15 	stw	r4,-20(fp)
 4405548:	e17ffc15 	stw	r5,-16(fp)
 440554c:	3009883a 	mov	r4,r6
 4405550:	3807883a 	mov	r3,r7
 4405554:	e0800217 	ldw	r2,8(fp)
 4405558:	e13ffd05 	stb	r4,-12(fp)
 440555c:	e0fffe05 	stb	r3,-8(fp)
 4405560:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4405564:	00800044 	movi	r2,1
 4405568:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 440556c:	e17ffc17 	ldw	r5,-16(fp)
 4405570:	e13ffb17 	ldw	r4,-20(fp)
 4405574:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4405578:	e0bffd03 	ldbu	r2,-12(fp)
 440557c:	10803fcc 	andi	r2,r2,255
 4405580:	100d883a 	mov	r6,r2
 4405584:	e17ffc17 	ldw	r5,-16(fp)
 4405588:	e13ffb17 	ldw	r4,-20(fp)
 440558c:	4405c8c0 	call	4405c8c <i2c_write>
 4405590:	1000041e 	bne	r2,zero,44055a4 <I2C_Write+0x70>
        bSuccess = FALSE;
 4405594:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4405598:	010110f4 	movhi	r4,1091
 440559c:	21126104 	addi	r4,r4,18820
 44055a0:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 44055a4:	e0bffa17 	ldw	r2,-24(fp)
 44055a8:	10000a26 	beq	r2,zero,44055d4 <I2C_Write+0xa0>
 44055ac:	e0bffe03 	ldbu	r2,-8(fp)
 44055b0:	100d883a 	mov	r6,r2
 44055b4:	e17ffc17 	ldw	r5,-16(fp)
 44055b8:	e13ffb17 	ldw	r4,-20(fp)
 44055bc:	4405c8c0 	call	4405c8c <i2c_write>
 44055c0:	1000041e 	bne	r2,zero,44055d4 <I2C_Write+0xa0>
        bSuccess = FALSE;
 44055c4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 44055c8:	010110f4 	movhi	r4,1091
 44055cc:	21126904 	addi	r4,r4,18852
 44055d0:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 44055d4:	e0bffa17 	ldw	r2,-24(fp)
 44055d8:	10000a26 	beq	r2,zero,4405604 <I2C_Write+0xd0>
 44055dc:	e0bfff03 	ldbu	r2,-4(fp)
 44055e0:	100d883a 	mov	r6,r2
 44055e4:	e17ffc17 	ldw	r5,-16(fp)
 44055e8:	e13ffb17 	ldw	r4,-20(fp)
 44055ec:	4405c8c0 	call	4405c8c <i2c_write>
 44055f0:	1000041e 	bne	r2,zero,4405604 <I2C_Write+0xd0>
        bSuccess = FALSE;
 44055f4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 44055f8:	010110f4 	movhi	r4,1091
 44055fc:	21127204 	addi	r4,r4,18888
 4405600:	4406ad40 	call	4406ad4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4405604:	e17ffc17 	ldw	r5,-16(fp)
 4405608:	e13ffb17 	ldw	r4,-20(fp)
 440560c:	4405c140 	call	4405c14 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4405610:	0106d604 	movi	r4,7000
 4405614:	4418d100 	call	4418d10 <usleep>
    
    return bSuccess;
 4405618:	e0bffa17 	ldw	r2,-24(fp)

    
}
 440561c:	e037883a 	mov	sp,fp
 4405620:	dfc00117 	ldw	ra,4(sp)
 4405624:	df000017 	ldw	fp,0(sp)
 4405628:	dec00204 	addi	sp,sp,8
 440562c:	f800283a 	ret

04405630 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 4405630:	defff704 	addi	sp,sp,-36
 4405634:	dfc00815 	stw	ra,32(sp)
 4405638:	df000715 	stw	fp,28(sp)
 440563c:	df000704 	addi	fp,sp,28
 4405640:	e13ffb15 	stw	r4,-20(fp)
 4405644:	e17ffc15 	stw	r5,-16(fp)
 4405648:	3009883a 	mov	r4,r6
 440564c:	3807883a 	mov	r3,r7
 4405650:	e0800217 	ldw	r2,8(fp)
 4405654:	e13ffd05 	stb	r4,-12(fp)
 4405658:	e0fffe05 	stb	r3,-8(fp)
 440565c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4405660:	00800044 	movi	r2,1
 4405664:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 4405668:	e0bfff0b 	ldhu	r2,-4(fp)
 440566c:	1004d23a 	srli	r2,r2,8
 4405670:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 4405674:	e0bfff0b 	ldhu	r2,-4(fp)
 4405678:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 440567c:	e17ffc17 	ldw	r5,-16(fp)
 4405680:	e13ffb17 	ldw	r4,-20(fp)
 4405684:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4405688:	e0bffd03 	ldbu	r2,-12(fp)
 440568c:	10803fcc 	andi	r2,r2,255
 4405690:	100d883a 	mov	r6,r2
 4405694:	e17ffc17 	ldw	r5,-16(fp)
 4405698:	e13ffb17 	ldw	r4,-20(fp)
 440569c:	4405c8c0 	call	4405c8c <i2c_write>
 44056a0:	1000041e 	bne	r2,zero,44056b4 <I2C_Write16+0x84>
        bSuccess = FALSE;
 44056a4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 44056a8:	010110f4 	movhi	r4,1091
 44056ac:	21126104 	addi	r4,r4,18820
 44056b0:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 44056b4:	e0bff917 	ldw	r2,-28(fp)
 44056b8:	10000a26 	beq	r2,zero,44056e4 <I2C_Write16+0xb4>
 44056bc:	e0bffe03 	ldbu	r2,-8(fp)
 44056c0:	100d883a 	mov	r6,r2
 44056c4:	e17ffc17 	ldw	r5,-16(fp)
 44056c8:	e13ffb17 	ldw	r4,-20(fp)
 44056cc:	4405c8c0 	call	4405c8c <i2c_write>
 44056d0:	1000041e 	bne	r2,zero,44056e4 <I2C_Write16+0xb4>
        bSuccess = FALSE;
 44056d4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 44056d8:	010110f4 	movhi	r4,1091
 44056dc:	21126904 	addi	r4,r4,18852
 44056e0:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 44056e4:	e0bff917 	ldw	r2,-28(fp)
 44056e8:	10000a26 	beq	r2,zero,4405714 <I2C_Write16+0xe4>
 44056ec:	e0bffa03 	ldbu	r2,-24(fp)
 44056f0:	100d883a 	mov	r6,r2
 44056f4:	e17ffc17 	ldw	r5,-16(fp)
 44056f8:	e13ffb17 	ldw	r4,-20(fp)
 44056fc:	4405c8c0 	call	4405c8c <i2c_write>
 4405700:	1000041e 	bne	r2,zero,4405714 <I2C_Write16+0xe4>
        bSuccess = FALSE;
 4405704:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4405708:	010110f4 	movhi	r4,1091
 440570c:	21127204 	addi	r4,r4,18888
 4405710:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 4405714:	e0bff917 	ldw	r2,-28(fp)
 4405718:	10000a26 	beq	r2,zero,4405744 <I2C_Write16+0x114>
 440571c:	e0bffa43 	ldbu	r2,-23(fp)
 4405720:	100d883a 	mov	r6,r2
 4405724:	e17ffc17 	ldw	r5,-16(fp)
 4405728:	e13ffb17 	ldw	r4,-20(fp)
 440572c:	4405c8c0 	call	4405c8c <i2c_write>
 4405730:	1000041e 	bne	r2,zero,4405744 <I2C_Write16+0x114>
        bSuccess = FALSE;
 4405734:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4405738:	010110f4 	movhi	r4,1091
 440573c:	21127204 	addi	r4,r4,18888
 4405740:	4406ad40 	call	4406ad4 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 4405744:	e17ffc17 	ldw	r5,-16(fp)
 4405748:	e13ffb17 	ldw	r4,-20(fp)
 440574c:	4405c140 	call	4405c14 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4405750:	0106d604 	movi	r4,7000
 4405754:	4418d100 	call	4418d10 <usleep>
    
    return bSuccess;
 4405758:	e0bff917 	ldw	r2,-28(fp)

    
}
 440575c:	e037883a 	mov	sp,fp
 4405760:	dfc00117 	ldw	ra,4(sp)
 4405764:	df000017 	ldw	fp,0(sp)
 4405768:	dec00204 	addi	sp,sp,8
 440576c:	f800283a 	ret

04405770 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 4405770:	defff904 	addi	sp,sp,-28
 4405774:	dfc00615 	stw	ra,24(sp)
 4405778:	df000515 	stw	fp,20(sp)
 440577c:	df000504 	addi	fp,sp,20
 4405780:	e13ffc15 	stw	r4,-16(fp)
 4405784:	e17ffd15 	stw	r5,-12(fp)
 4405788:	3007883a 	mov	r3,r6
 440578c:	3805883a 	mov	r2,r7
 4405790:	e0fffe05 	stb	r3,-8(fp)
 4405794:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4405798:	00800044 	movi	r2,1
 440579c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 44057a0:	e17ffd17 	ldw	r5,-12(fp)
 44057a4:	e13ffc17 	ldw	r4,-16(fp)
 44057a8:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 44057ac:	e0bffe03 	ldbu	r2,-8(fp)
 44057b0:	10803fcc 	andi	r2,r2,255
 44057b4:	100d883a 	mov	r6,r2
 44057b8:	e17ffd17 	ldw	r5,-12(fp)
 44057bc:	e13ffc17 	ldw	r4,-16(fp)
 44057c0:	4405c8c0 	call	4405c8c <i2c_write>
 44057c4:	1000041e 	bne	r2,zero,44057d8 <I2C_Read+0x68>
        bSuccess = FALSE;
 44057c8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 44057cc:	010110f4 	movhi	r4,1091
 44057d0:	21127a04 	addi	r4,r4,18920
 44057d4:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 44057d8:	e0bffb17 	ldw	r2,-20(fp)
 44057dc:	10000a26 	beq	r2,zero,4405808 <I2C_Read+0x98>
 44057e0:	e0bfff03 	ldbu	r2,-4(fp)
 44057e4:	100d883a 	mov	r6,r2
 44057e8:	e17ffd17 	ldw	r5,-12(fp)
 44057ec:	e13ffc17 	ldw	r4,-16(fp)
 44057f0:	4405c8c0 	call	4405c8c <i2c_write>
 44057f4:	1000041e 	bne	r2,zero,4405808 <I2C_Read+0x98>
        bSuccess = FALSE;
 44057f8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 44057fc:	010110f4 	movhi	r4,1091
 4405800:	21128304 	addi	r4,r4,18956
 4405804:	4406ad40 	call	4406ad4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4405808:	e17ffd17 	ldw	r5,-12(fp)
 440580c:	e13ffc17 	ldw	r4,-16(fp)
 4405810:	4405b880 	call	4405b88 <i2c_start>
    DeviceAddr |= 1; // Read
 4405814:	e0bffe03 	ldbu	r2,-8(fp)
 4405818:	10800054 	ori	r2,r2,1
 440581c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4405820:	e0bffb17 	ldw	r2,-20(fp)
 4405824:	10000b26 	beq	r2,zero,4405854 <I2C_Read+0xe4>
 4405828:	e0bffe03 	ldbu	r2,-8(fp)
 440582c:	10803fcc 	andi	r2,r2,255
 4405830:	100d883a 	mov	r6,r2
 4405834:	e17ffd17 	ldw	r5,-12(fp)
 4405838:	e13ffc17 	ldw	r4,-16(fp)
 440583c:	4405c8c0 	call	4405c8c <i2c_write>
 4405840:	1000041e 	bne	r2,zero,4405854 <I2C_Read+0xe4>
        bSuccess = FALSE;
 4405844:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 4405848:	010110f4 	movhi	r4,1091
 440584c:	21128c04 	addi	r4,r4,18992
 4405850:	4406ad40 	call	4406ad4 <myprintf>
    }
    
    if (bSuccess){
 4405854:	e0bffb17 	ldw	r2,-20(fp)
 4405858:	10000526 	beq	r2,zero,4405870 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 440585c:	000f883a 	mov	r7,zero
 4405860:	e1800217 	ldw	r6,8(fp)
 4405864:	e17ffd17 	ldw	r5,-12(fp)
 4405868:	e13ffc17 	ldw	r4,-16(fp)
 440586c:	4405df00 	call	4405df0 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4405870:	e17ffd17 	ldw	r5,-12(fp)
 4405874:	e13ffc17 	ldw	r4,-16(fp)
 4405878:	4405c140 	call	4405c14 <i2c_stop>
    
    return bSuccess;
 440587c:	e0bffb17 	ldw	r2,-20(fp)
}
 4405880:	e037883a 	mov	sp,fp
 4405884:	dfc00117 	ldw	ra,4(sp)
 4405888:	df000017 	ldw	fp,0(sp)
 440588c:	dec00204 	addi	sp,sp,8
 4405890:	f800283a 	ret

04405894 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 4405894:	defff804 	addi	sp,sp,-32
 4405898:	dfc00715 	stw	ra,28(sp)
 440589c:	df000615 	stw	fp,24(sp)
 44058a0:	df000604 	addi	fp,sp,24
 44058a4:	e13ffc15 	stw	r4,-16(fp)
 44058a8:	e17ffd15 	stw	r5,-12(fp)
 44058ac:	3007883a 	mov	r3,r6
 44058b0:	3805883a 	mov	r2,r7
 44058b4:	e0fffe05 	stb	r3,-8(fp)
 44058b8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 44058bc:	00800044 	movi	r2,1
 44058c0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 44058c4:	e17ffd17 	ldw	r5,-12(fp)
 44058c8:	e13ffc17 	ldw	r4,-16(fp)
 44058cc:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 44058d0:	e0bffe03 	ldbu	r2,-8(fp)
 44058d4:	10803fcc 	andi	r2,r2,255
 44058d8:	100d883a 	mov	r6,r2
 44058dc:	e17ffd17 	ldw	r5,-12(fp)
 44058e0:	e13ffc17 	ldw	r4,-16(fp)
 44058e4:	4405c8c0 	call	4405c8c <i2c_write>
 44058e8:	1000041e 	bne	r2,zero,44058fc <I2C_Read16+0x68>
        bSuccess = FALSE;
 44058ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 44058f0:	010110f4 	movhi	r4,1091
 44058f4:	21126104 	addi	r4,r4,18820
 44058f8:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 44058fc:	e0bffa17 	ldw	r2,-24(fp)
 4405900:	10000a26 	beq	r2,zero,440592c <I2C_Read16+0x98>
 4405904:	e0bfff03 	ldbu	r2,-4(fp)
 4405908:	100d883a 	mov	r6,r2
 440590c:	e17ffd17 	ldw	r5,-12(fp)
 4405910:	e13ffc17 	ldw	r4,-16(fp)
 4405914:	4405c8c0 	call	4405c8c <i2c_write>
 4405918:	1000041e 	bne	r2,zero,440592c <I2C_Read16+0x98>
        bSuccess = FALSE;
 440591c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4405920:	010110f4 	movhi	r4,1091
 4405924:	21126904 	addi	r4,r4,18852
 4405928:	4406ad40 	call	4406ad4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 440592c:	e17ffd17 	ldw	r5,-12(fp)
 4405930:	e13ffc17 	ldw	r4,-16(fp)
 4405934:	4405b880 	call	4405b88 <i2c_start>
    DeviceAddr |= 1; // Read
 4405938:	e0bffe03 	ldbu	r2,-8(fp)
 440593c:	10800054 	ori	r2,r2,1
 4405940:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4405944:	e0bffa17 	ldw	r2,-24(fp)
 4405948:	10000b26 	beq	r2,zero,4405978 <I2C_Read16+0xe4>
 440594c:	e0bffe03 	ldbu	r2,-8(fp)
 4405950:	10803fcc 	andi	r2,r2,255
 4405954:	100d883a 	mov	r6,r2
 4405958:	e17ffd17 	ldw	r5,-12(fp)
 440595c:	e13ffc17 	ldw	r4,-16(fp)
 4405960:	4405c8c0 	call	4405c8c <i2c_write>
 4405964:	1000041e 	bne	r2,zero,4405978 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 4405968:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 440596c:	010110f4 	movhi	r4,1091
 4405970:	21129504 	addi	r4,r4,19028
 4405974:	4406ad40 	call	4406ad4 <myprintf>
    }
    
    if (bSuccess){
 4405978:	e0bffa17 	ldw	r2,-24(fp)
 440597c:	10000626 	beq	r2,zero,4405998 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 4405980:	e0bffb44 	addi	r2,fp,-19
 4405984:	01c00044 	movi	r7,1
 4405988:	100d883a 	mov	r6,r2
 440598c:	e17ffd17 	ldw	r5,-12(fp)
 4405990:	e13ffc17 	ldw	r4,-16(fp)
 4405994:	4405df00 	call	4405df0 <i2c_read>
    }        
    if (bSuccess){
 4405998:	e0bffa17 	ldw	r2,-24(fp)
 440599c:	10000626 	beq	r2,zero,44059b8 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 44059a0:	e0bffb04 	addi	r2,fp,-20
 44059a4:	000f883a 	mov	r7,zero
 44059a8:	100d883a 	mov	r6,r2
 44059ac:	e17ffd17 	ldw	r5,-12(fp)
 44059b0:	e13ffc17 	ldw	r4,-16(fp)
 44059b4:	4405df00 	call	4405df0 <i2c_read>
    }        
    if (bSuccess)
 44059b8:	e0bffa17 	ldw	r2,-24(fp)
 44059bc:	10000a26 	beq	r2,zero,44059e8 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 44059c0:	e0bffb43 	ldbu	r2,-19(fp)
 44059c4:	10803fcc 	andi	r2,r2,255
 44059c8:	1004923a 	slli	r2,r2,8
 44059cc:	1007883a 	mov	r3,r2
 44059d0:	e0bffb03 	ldbu	r2,-20(fp)
 44059d4:	10803fcc 	andi	r2,r2,255
 44059d8:	1884b03a 	or	r2,r3,r2
 44059dc:	1007883a 	mov	r3,r2
 44059e0:	e0800217 	ldw	r2,8(fp)
 44059e4:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 44059e8:	e17ffd17 	ldw	r5,-12(fp)
 44059ec:	e13ffc17 	ldw	r4,-16(fp)
 44059f0:	4405c140 	call	4405c14 <i2c_stop>
    
    return bSuccess;
 44059f4:	e0bffa17 	ldw	r2,-24(fp)
}
 44059f8:	e037883a 	mov	sp,fp
 44059fc:	dfc00117 	ldw	ra,4(sp)
 4405a00:	df000017 	ldw	fp,0(sp)
 4405a04:	dec00204 	addi	sp,sp,8
 4405a08:	f800283a 	ret

04405a0c <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 4405a0c:	defff704 	addi	sp,sp,-36
 4405a10:	dfc00815 	stw	ra,32(sp)
 4405a14:	df000715 	stw	fp,28(sp)
 4405a18:	df000704 	addi	fp,sp,28
 4405a1c:	e13ffb15 	stw	r4,-20(fp)
 4405a20:	e17ffc15 	stw	r5,-16(fp)
 4405a24:	3009883a 	mov	r4,r6
 4405a28:	3807883a 	mov	r3,r7
 4405a2c:	e0800317 	ldw	r2,12(fp)
 4405a30:	e13ffd05 	stb	r4,-12(fp)
 4405a34:	e0fffe05 	stb	r3,-8(fp)
 4405a38:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4405a3c:	00800044 	movi	r2,1
 4405a40:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4405a44:	e17ffc17 	ldw	r5,-16(fp)
 4405a48:	e13ffb17 	ldw	r4,-20(fp)
 4405a4c:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4405a50:	e0bffd03 	ldbu	r2,-12(fp)
 4405a54:	10803fcc 	andi	r2,r2,255
 4405a58:	100d883a 	mov	r6,r2
 4405a5c:	e17ffc17 	ldw	r5,-16(fp)
 4405a60:	e13ffb17 	ldw	r4,-20(fp)
 4405a64:	4405c8c0 	call	4405c8c <i2c_write>
 4405a68:	1000041e 	bne	r2,zero,4405a7c <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 4405a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 4405a70:	010110f4 	movhi	r4,1091
 4405a74:	21129e04 	addi	r4,r4,19064
 4405a78:	4406ad40 	call	4406ad4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4405a7c:	e0bffa17 	ldw	r2,-24(fp)
 4405a80:	10000a26 	beq	r2,zero,4405aac <I2C_MultipleRead+0xa0>
 4405a84:	e0bffe03 	ldbu	r2,-8(fp)
 4405a88:	100d883a 	mov	r6,r2
 4405a8c:	e17ffc17 	ldw	r5,-16(fp)
 4405a90:	e13ffb17 	ldw	r4,-20(fp)
 4405a94:	4405c8c0 	call	4405c8c <i2c_write>
 4405a98:	1000041e 	bne	r2,zero,4405aac <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 4405a9c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 4405aa0:	010110f4 	movhi	r4,1091
 4405aa4:	2112a904 	addi	r4,r4,19108
 4405aa8:	4406ad40 	call	4406ad4 <myprintf>
    }    
    if (bSuccess)        
 4405aac:	e0bffa17 	ldw	r2,-24(fp)
 4405ab0:	10000326 	beq	r2,zero,4405ac0 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 4405ab4:	e17ffc17 	ldw	r5,-16(fp)
 4405ab8:	e13ffb17 	ldw	r4,-20(fp)
 4405abc:	4405b880 	call	4405b88 <i2c_start>
    DeviceAddr |= 1; // Read
 4405ac0:	e0bffd03 	ldbu	r2,-12(fp)
 4405ac4:	10800054 	ori	r2,r2,1
 4405ac8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4405acc:	e0bffa17 	ldw	r2,-24(fp)
 4405ad0:	10000b26 	beq	r2,zero,4405b00 <I2C_MultipleRead+0xf4>
 4405ad4:	e0bffd03 	ldbu	r2,-12(fp)
 4405ad8:	10803fcc 	andi	r2,r2,255
 4405adc:	100d883a 	mov	r6,r2
 4405ae0:	e17ffc17 	ldw	r5,-16(fp)
 4405ae4:	e13ffb17 	ldw	r4,-20(fp)
 4405ae8:	4405c8c0 	call	4405c8c <i2c_write>
 4405aec:	1000041e 	bne	r2,zero,4405b00 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 4405af0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 4405af4:	010110f4 	movhi	r4,1091
 4405af8:	2112b404 	addi	r4,r4,19152
 4405afc:	4406ad40 	call	4406ad4 <myprintf>
    }
    
    if (bSuccess){
 4405b00:	e0bffa17 	ldw	r2,-24(fp)
 4405b04:	10001726 	beq	r2,zero,4405b64 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 4405b08:	e03ff915 	stw	zero,-28(fp)
 4405b0c:	00001006 	br	4405b50 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 4405b10:	e0bfff0b 	ldhu	r2,-4(fp)
 4405b14:	10ffffc4 	addi	r3,r2,-1
 4405b18:	e0bff917 	ldw	r2,-28(fp)
 4405b1c:	1884c03a 	cmpne	r2,r3,r2
 4405b20:	10803fcc 	andi	r2,r2,255
 4405b24:	100f883a 	mov	r7,r2
 4405b28:	e1800217 	ldw	r6,8(fp)
 4405b2c:	e17ffc17 	ldw	r5,-16(fp)
 4405b30:	e13ffb17 	ldw	r4,-20(fp)
 4405b34:	4405df00 	call	4405df0 <i2c_read>
            pBuf++;
 4405b38:	e0800217 	ldw	r2,8(fp)
 4405b3c:	10800044 	addi	r2,r2,1
 4405b40:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4405b44:	e0bff917 	ldw	r2,-28(fp)
 4405b48:	10800044 	addi	r2,r2,1
 4405b4c:	e0bff915 	stw	r2,-28(fp)
 4405b50:	e0bfff0b 	ldhu	r2,-4(fp)
 4405b54:	e0fff917 	ldw	r3,-28(fp)
 4405b58:	1880020e 	bge	r3,r2,4405b64 <I2C_MultipleRead+0x158>
 4405b5c:	e0bffa17 	ldw	r2,-24(fp)
 4405b60:	103feb1e 	bne	r2,zero,4405b10 <__reset+0xfb401b10>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 4405b64:	e17ffc17 	ldw	r5,-16(fp)
 4405b68:	e13ffb17 	ldw	r4,-20(fp)
 4405b6c:	4405c140 	call	4405c14 <i2c_stop>
    
    return bSuccess;    
 4405b70:	e0bffa17 	ldw	r2,-24(fp)
    
}
 4405b74:	e037883a 	mov	sp,fp
 4405b78:	dfc00117 	ldw	ra,4(sp)
 4405b7c:	df000017 	ldw	fp,0(sp)
 4405b80:	dec00204 	addi	sp,sp,8
 4405b84:	f800283a 	ret

04405b88 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 4405b88:	defffc04 	addi	sp,sp,-16
 4405b8c:	dfc00315 	stw	ra,12(sp)
 4405b90:	df000215 	stw	fp,8(sp)
 4405b94:	df000204 	addi	fp,sp,8
 4405b98:	e13ffe15 	stw	r4,-8(fp)
 4405b9c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 4405ba0:	e0bfff17 	ldw	r2,-4(fp)
 4405ba4:	10800104 	addi	r2,r2,4
 4405ba8:	1007883a 	mov	r3,r2
 4405bac:	00800044 	movi	r2,1
 4405bb0:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 4405bb4:	e0bfff17 	ldw	r2,-4(fp)
 4405bb8:	00c00044 	movi	r3,1
 4405bbc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 4405bc0:	e0bffe17 	ldw	r2,-8(fp)
 4405bc4:	00c00044 	movi	r3,1
 4405bc8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4405bcc:	01000584 	movi	r4,22
 4405bd0:	44054f00 	call	44054f0 <my_wait>
     
    SDA_LOW(data_base); // data low
 4405bd4:	e0bfff17 	ldw	r2,-4(fp)
 4405bd8:	0007883a 	mov	r3,zero
 4405bdc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 4405be0:	01000584 	movi	r4,22
 4405be4:	44054f00 	call	44054f0 <my_wait>
    SCL_LOW(clk_base); // clock low
 4405be8:	e0bffe17 	ldw	r2,-8(fp)
 4405bec:	0007883a 	mov	r3,zero
 4405bf0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4405bf4:	01000584 	movi	r4,22
 4405bf8:	44054f00 	call	44054f0 <my_wait>
}
 4405bfc:	0001883a 	nop
 4405c00:	e037883a 	mov	sp,fp
 4405c04:	dfc00117 	ldw	ra,4(sp)
 4405c08:	df000017 	ldw	fp,0(sp)
 4405c0c:	dec00204 	addi	sp,sp,8
 4405c10:	f800283a 	ret

04405c14 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 4405c14:	defffc04 	addi	sp,sp,-16
 4405c18:	dfc00315 	stw	ra,12(sp)
 4405c1c:	df000215 	stw	fp,8(sp)
 4405c20:	df000204 	addi	fp,sp,8
 4405c24:	e13ffe15 	stw	r4,-8(fp)
 4405c28:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 4405c2c:	e0bfff17 	ldw	r2,-4(fp)
 4405c30:	10800104 	addi	r2,r2,4
 4405c34:	1007883a 	mov	r3,r2
 4405c38:	00800044 	movi	r2,1
 4405c3c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 4405c40:	e0bfff17 	ldw	r2,-4(fp)
 4405c44:	0007883a 	mov	r3,zero
 4405c48:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 4405c4c:	e0bffe17 	ldw	r2,-8(fp)
 4405c50:	00c00044 	movi	r3,1
 4405c54:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 4405c58:	01000584 	movi	r4,22
 4405c5c:	44054f00 	call	44054f0 <my_wait>
    SDA_HIGH(data_base); // data high
 4405c60:	e0bfff17 	ldw	r2,-4(fp)
 4405c64:	00c00044 	movi	r3,1
 4405c68:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 4405c6c:	01000584 	movi	r4,22
 4405c70:	44054f00 	call	44054f0 <my_wait>
    

    
}
 4405c74:	0001883a 	nop
 4405c78:	e037883a 	mov	sp,fp
 4405c7c:	dfc00117 	ldw	ra,4(sp)
 4405c80:	df000017 	ldw	fp,0(sp)
 4405c84:	dec00204 	addi	sp,sp,8
 4405c88:	f800283a 	ret

04405c8c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 4405c8c:	defff704 	addi	sp,sp,-36
 4405c90:	dfc00815 	stw	ra,32(sp)
 4405c94:	df000715 	stw	fp,28(sp)
 4405c98:	df000704 	addi	fp,sp,28
 4405c9c:	e13ffd15 	stw	r4,-12(fp)
 4405ca0:	e17ffe15 	stw	r5,-8(fp)
 4405ca4:	3005883a 	mov	r2,r6
 4405ca8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 4405cac:	00bfe004 	movi	r2,-128
 4405cb0:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 4405cb4:	e0bffe17 	ldw	r2,-8(fp)
 4405cb8:	10800104 	addi	r2,r2,4
 4405cbc:	1007883a 	mov	r3,r2
 4405cc0:	00800044 	movi	r2,1
 4405cc4:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 4405cc8:	e03ffa15 	stw	zero,-24(fp)
 4405ccc:	00001f06 	br	4405d4c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 4405cd0:	e0bffd17 	ldw	r2,-12(fp)
 4405cd4:	0007883a 	mov	r3,zero
 4405cd8:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 4405cdc:	e0ffff03 	ldbu	r3,-4(fp)
 4405ce0:	e0bff903 	ldbu	r2,-28(fp)
 4405ce4:	1884703a 	and	r2,r3,r2
 4405ce8:	10803fcc 	andi	r2,r2,255
 4405cec:	10000426 	beq	r2,zero,4405d00 <i2c_write+0x74>
            SDA_HIGH(data_base);
 4405cf0:	e0bffe17 	ldw	r2,-8(fp)
 4405cf4:	00c00044 	movi	r3,1
 4405cf8:	10c00035 	stwio	r3,0(r2)
 4405cfc:	00000306 	br	4405d0c <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 4405d00:	e0bffe17 	ldw	r2,-8(fp)
 4405d04:	0007883a 	mov	r3,zero
 4405d08:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 4405d0c:	e0bff903 	ldbu	r2,-28(fp)
 4405d10:	1004d07a 	srli	r2,r2,1
 4405d14:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
 4405d18:	e0bffd17 	ldw	r2,-12(fp)
 4405d1c:	00c00044 	movi	r3,1
 4405d20:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4405d24:	01000584 	movi	r4,22
 4405d28:	44054f00 	call	44054f0 <my_wait>
        SCL_LOW(clk_base);
 4405d2c:	e0bffd17 	ldw	r2,-12(fp)
 4405d30:	0007883a 	mov	r3,zero
 4405d34:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4405d38:	01000584 	movi	r4,22
 4405d3c:	44054f00 	call	44054f0 <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 4405d40:	e0bffa17 	ldw	r2,-24(fp)
 4405d44:	10800044 	addi	r2,r2,1
 4405d48:	e0bffa15 	stw	r2,-24(fp)
 4405d4c:	e0bffa17 	ldw	r2,-24(fp)
 4405d50:	10800210 	cmplti	r2,r2,8
 4405d54:	103fde1e 	bne	r2,zero,4405cd0 <__reset+0xfb401cd0>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 4405d58:	e0bffe17 	ldw	r2,-8(fp)
 4405d5c:	10800104 	addi	r2,r2,4
 4405d60:	0007883a 	mov	r3,zero
 4405d64:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
 4405d68:	01000584 	movi	r4,22
 4405d6c:	44054f00 	call	44054f0 <my_wait>
w = 0;
 4405d70:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
 4405d74:	0001883a 	nop
 4405d78:	e0bffe17 	ldw	r2,-8(fp)
 4405d7c:	10800037 	ldwio	r2,0(r2)
 4405d80:	10000626 	beq	r2,zero,4405d9c <i2c_write+0x110>
 4405d84:	e0fffb17 	ldw	r3,-20(fp)
 4405d88:	18800044 	addi	r2,r3,1
 4405d8c:	e0bffb15 	stw	r2,-20(fp)
 4405d90:	008003f4 	movhi	r2,15
 4405d94:	10908fc4 	addi	r2,r2,16959
 4405d98:	10fff70e 	bge	r2,r3,4405d78 <__reset+0xfb401d78>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
 4405d9c:	e0bffd17 	ldw	r2,-12(fp)
 4405da0:	00c00044 	movi	r3,1
 4405da4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 4405da8:	01000584 	movi	r4,22
 4405dac:	44054f00 	call	44054f0 <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 4405db0:	e0bffe17 	ldw	r2,-8(fp)
 4405db4:	10800037 	ldwio	r2,0(r2)
 4405db8:	1005003a 	cmpeq	r2,r2,zero
 4405dbc:	10803fcc 	andi	r2,r2,255
 4405dc0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 4405dc4:	e0bffd17 	ldw	r2,-12(fp)
 4405dc8:	0007883a 	mov	r3,zero
 4405dcc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4405dd0:	01000584 	movi	r4,22
 4405dd4:	44054f00 	call	44054f0 <my_wait>
    return bAck;
 4405dd8:	e0bffc17 	ldw	r2,-16(fp)
}    
 4405ddc:	e037883a 	mov	sp,fp
 4405de0:	dfc00117 	ldw	ra,4(sp)
 4405de4:	df000017 	ldw	fp,0(sp)
 4405de8:	dec00204 	addi	sp,sp,8
 4405dec:	f800283a 	ret

04405df0 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 4405df0:	defff804 	addi	sp,sp,-32
 4405df4:	dfc00715 	stw	ra,28(sp)
 4405df8:	df000615 	stw	fp,24(sp)
 4405dfc:	df000604 	addi	fp,sp,24
 4405e00:	e13ffc15 	stw	r4,-16(fp)
 4405e04:	e17ffd15 	stw	r5,-12(fp)
 4405e08:	e1bffe15 	stw	r6,-8(fp)
 4405e0c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 4405e10:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 4405e14:	e0bffd17 	ldw	r2,-12(fp)
 4405e18:	10800104 	addi	r2,r2,4
 4405e1c:	0007883a 	mov	r3,zero
 4405e20:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 4405e24:	e0bffc17 	ldw	r2,-16(fp)
 4405e28:	0007883a 	mov	r3,zero
 4405e2c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4405e30:	01000584 	movi	r4,22
 4405e34:	44054f00 	call	44054f0 <my_wait>

    for(i=0;i<8;i++){
 4405e38:	e03ffb15 	stw	zero,-20(fp)
 4405e3c:	00001606 	br	4405e98 <i2c_read+0xa8>
        Data <<= 1;
 4405e40:	e0bffa03 	ldbu	r2,-24(fp)
 4405e44:	1085883a 	add	r2,r2,r2
 4405e48:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 4405e4c:	e0bffc17 	ldw	r2,-16(fp)
 4405e50:	00c00044 	movi	r3,1
 4405e54:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4405e58:	01000584 	movi	r4,22
 4405e5c:	44054f00 	call	44054f0 <my_wait>
        if (SDA_READ(data_base))  // read data   
 4405e60:	e0bffd17 	ldw	r2,-12(fp)
 4405e64:	10800037 	ldwio	r2,0(r2)
 4405e68:	10000326 	beq	r2,zero,4405e78 <i2c_read+0x88>
            Data |= 0x01;
 4405e6c:	e0bffa03 	ldbu	r2,-24(fp)
 4405e70:	10800054 	ori	r2,r2,1
 4405e74:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 4405e78:	e0bffc17 	ldw	r2,-16(fp)
 4405e7c:	0007883a 	mov	r3,zero
 4405e80:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4405e84:	01000584 	movi	r4,22
 4405e88:	44054f00 	call	44054f0 <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 4405e8c:	e0bffb17 	ldw	r2,-20(fp)
 4405e90:	10800044 	addi	r2,r2,1
 4405e94:	e0bffb15 	stw	r2,-20(fp)
 4405e98:	e0bffb17 	ldw	r2,-20(fp)
 4405e9c:	10800210 	cmplti	r2,r2,8
 4405ea0:	103fe71e 	bne	r2,zero,4405e40 <__reset+0xfb401e40>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 4405ea4:	e0bffc17 	ldw	r2,-16(fp)
 4405ea8:	0007883a 	mov	r3,zero
 4405eac:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 4405eb0:	e0bffd17 	ldw	r2,-12(fp)
 4405eb4:	10800104 	addi	r2,r2,4
 4405eb8:	1007883a 	mov	r3,r2
 4405ebc:	00800044 	movi	r2,1
 4405ec0:	18800035 	stwio	r2,0(r3)
    if (bAck)
 4405ec4:	e0bfff17 	ldw	r2,-4(fp)
 4405ec8:	10000426 	beq	r2,zero,4405edc <i2c_read+0xec>
        SDA_LOW(data_base);
 4405ecc:	e0bffd17 	ldw	r2,-12(fp)
 4405ed0:	0007883a 	mov	r3,zero
 4405ed4:	10c00035 	stwio	r3,0(r2)
 4405ed8:	00000306 	br	4405ee8 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 4405edc:	e0bffd17 	ldw	r2,-12(fp)
 4405ee0:	00c00044 	movi	r3,1
 4405ee4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 4405ee8:	e0bffc17 	ldw	r2,-16(fp)
 4405eec:	00c00044 	movi	r3,1
 4405ef0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 4405ef4:	01000584 	movi	r4,22
 4405ef8:	44054f00 	call	44054f0 <my_wait>
    SCL_LOW(clk_base); // clock low
 4405efc:	e0bffc17 	ldw	r2,-16(fp)
 4405f00:	0007883a 	mov	r3,zero
 4405f04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4405f08:	01000584 	movi	r4,22
 4405f0c:	44054f00 	call	44054f0 <my_wait>
    SDA_LOW(data_base);  // data low
 4405f10:	e0bffd17 	ldw	r2,-12(fp)
 4405f14:	0007883a 	mov	r3,zero
 4405f18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 4405f1c:	01000584 	movi	r4,22
 4405f20:	44054f00 	call	44054f0 <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 4405f24:	e0bffe17 	ldw	r2,-8(fp)
 4405f28:	e0fffa03 	ldbu	r3,-24(fp)
 4405f2c:	10c00005 	stb	r3,0(r2)
}
 4405f30:	0001883a 	nop
 4405f34:	e037883a 	mov	sp,fp
 4405f38:	dfc00117 	ldw	ra,4(sp)
 4405f3c:	df000017 	ldw	fp,0(sp)
 4405f40:	dec00204 	addi	sp,sp,8
 4405f44:	f800283a 	ret

04405f48 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 4405f48:	defff704 	addi	sp,sp,-36
 4405f4c:	dfc00815 	stw	ra,32(sp)
 4405f50:	df000715 	stw	fp,28(sp)
 4405f54:	df000704 	addi	fp,sp,28
 4405f58:	e13ffb15 	stw	r4,-20(fp)
 4405f5c:	e17ffc15 	stw	r5,-16(fp)
 4405f60:	3009883a 	mov	r4,r6
 4405f64:	3807883a 	mov	r3,r7
 4405f68:	e0800217 	ldw	r2,8(fp)
 4405f6c:	e13ffd05 	stb	r4,-12(fp)
 4405f70:	e0fffe0d 	sth	r3,-8(fp)
 4405f74:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4405f78:	00800044 	movi	r2,1
 4405f7c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4405f80:	e0bffe0b 	ldhu	r2,-8(fp)
 4405f84:	1004d23a 	srli	r2,r2,8
 4405f88:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4405f8c:	e0bffe0b 	ldhu	r2,-8(fp)
 4405f90:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4405f94:	e17ffc17 	ldw	r5,-16(fp)
 4405f98:	e13ffb17 	ldw	r4,-20(fp)
 4405f9c:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4405fa0:	e0bffd03 	ldbu	r2,-12(fp)
 4405fa4:	10803fcc 	andi	r2,r2,255
 4405fa8:	100d883a 	mov	r6,r2
 4405fac:	e17ffc17 	ldw	r5,-16(fp)
 4405fb0:	e13ffb17 	ldw	r4,-20(fp)
 4405fb4:	4405c8c0 	call	4405c8c <i2c_write>
 4405fb8:	1000041e 	bne	r2,zero,4405fcc <I2CL_Write+0x84>
        bSuccess = FALSE;
 4405fbc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4405fc0:	010110f4 	movhi	r4,1091
 4405fc4:	21126104 	addi	r4,r4,18820
 4405fc8:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4405fcc:	e0bff917 	ldw	r2,-28(fp)
 4405fd0:	10000a26 	beq	r2,zero,4405ffc <I2CL_Write+0xb4>
 4405fd4:	e0bffa03 	ldbu	r2,-24(fp)
 4405fd8:	100d883a 	mov	r6,r2
 4405fdc:	e17ffc17 	ldw	r5,-16(fp)
 4405fe0:	e13ffb17 	ldw	r4,-20(fp)
 4405fe4:	4405c8c0 	call	4405c8c <i2c_write>
 4405fe8:	1000041e 	bne	r2,zero,4405ffc <I2CL_Write+0xb4>
        bSuccess = FALSE;
 4405fec:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4405ff0:	010110f4 	movhi	r4,1091
 4405ff4:	2112bf04 	addi	r4,r4,19196
 4405ff8:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4405ffc:	e0bff917 	ldw	r2,-28(fp)
 4406000:	10000a26 	beq	r2,zero,440602c <I2CL_Write+0xe4>
 4406004:	e0bffa43 	ldbu	r2,-23(fp)
 4406008:	100d883a 	mov	r6,r2
 440600c:	e17ffc17 	ldw	r5,-16(fp)
 4406010:	e13ffb17 	ldw	r4,-20(fp)
 4406014:	4405c8c0 	call	4405c8c <i2c_write>
 4406018:	1000041e 	bne	r2,zero,440602c <I2CL_Write+0xe4>
        bSuccess = FALSE;
 440601c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4406020:	010110f4 	movhi	r4,1091
 4406024:	2112c904 	addi	r4,r4,19236
 4406028:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 440602c:	e0bff917 	ldw	r2,-28(fp)
 4406030:	10000a26 	beq	r2,zero,440605c <I2CL_Write+0x114>
 4406034:	e0bfff03 	ldbu	r2,-4(fp)
 4406038:	100d883a 	mov	r6,r2
 440603c:	e17ffc17 	ldw	r5,-16(fp)
 4406040:	e13ffb17 	ldw	r4,-20(fp)
 4406044:	4405c8c0 	call	4405c8c <i2c_write>
 4406048:	1000041e 	bne	r2,zero,440605c <I2CL_Write+0x114>
        bSuccess = FALSE;
 440604c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4406050:	010110f4 	movhi	r4,1091
 4406054:	21127204 	addi	r4,r4,18888
 4406058:	4406ad40 	call	4406ad4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 440605c:	e17ffc17 	ldw	r5,-16(fp)
 4406060:	e13ffb17 	ldw	r4,-20(fp)
 4406064:	4405c140 	call	4405c14 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4406068:	0106d604 	movi	r4,7000
 440606c:	4418d100 	call	4418d10 <usleep>
    
    return bSuccess;
 4406070:	e0bff917 	ldw	r2,-28(fp)
    
}
 4406074:	e037883a 	mov	sp,fp
 4406078:	dfc00117 	ldw	ra,4(sp)
 440607c:	df000017 	ldw	fp,0(sp)
 4406080:	dec00204 	addi	sp,sp,8
 4406084:	f800283a 	ret

04406088 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 4406088:	defff804 	addi	sp,sp,-32
 440608c:	dfc00715 	stw	ra,28(sp)
 4406090:	df000615 	stw	fp,24(sp)
 4406094:	df000604 	addi	fp,sp,24
 4406098:	e13ffc15 	stw	r4,-16(fp)
 440609c:	e17ffd15 	stw	r5,-12(fp)
 44060a0:	3007883a 	mov	r3,r6
 44060a4:	3805883a 	mov	r2,r7
 44060a8:	e0fffe05 	stb	r3,-8(fp)
 44060ac:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 44060b0:	00800044 	movi	r2,1
 44060b4:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 44060b8:	e0bfff0b 	ldhu	r2,-4(fp)
 44060bc:	1004d23a 	srli	r2,r2,8
 44060c0:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 44060c4:	e0bfff0b 	ldhu	r2,-4(fp)
 44060c8:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 44060cc:	e17ffd17 	ldw	r5,-12(fp)
 44060d0:	e13ffc17 	ldw	r4,-16(fp)
 44060d4:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 44060d8:	e0bffe03 	ldbu	r2,-8(fp)
 44060dc:	10803fcc 	andi	r2,r2,255
 44060e0:	100d883a 	mov	r6,r2
 44060e4:	e17ffd17 	ldw	r5,-12(fp)
 44060e8:	e13ffc17 	ldw	r4,-16(fp)
 44060ec:	4405c8c0 	call	4405c8c <i2c_write>
 44060f0:	1000041e 	bne	r2,zero,4406104 <I2CL_Read+0x7c>
        bSuccess = FALSE;
 44060f4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 44060f8:	010110f4 	movhi	r4,1091
 44060fc:	21126104 	addi	r4,r4,18820
 4406100:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4406104:	e0bffa17 	ldw	r2,-24(fp)
 4406108:	10000a26 	beq	r2,zero,4406134 <I2CL_Read+0xac>
 440610c:	e0bffb03 	ldbu	r2,-20(fp)
 4406110:	100d883a 	mov	r6,r2
 4406114:	e17ffd17 	ldw	r5,-12(fp)
 4406118:	e13ffc17 	ldw	r4,-16(fp)
 440611c:	4405c8c0 	call	4405c8c <i2c_write>
 4406120:	1000041e 	bne	r2,zero,4406134 <I2CL_Read+0xac>
        bSuccess = FALSE;
 4406124:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4406128:	010110f4 	movhi	r4,1091
 440612c:	2112bf04 	addi	r4,r4,19196
 4406130:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4406134:	e0bffa17 	ldw	r2,-24(fp)
 4406138:	10000a26 	beq	r2,zero,4406164 <I2CL_Read+0xdc>
 440613c:	e0bffb43 	ldbu	r2,-19(fp)
 4406140:	100d883a 	mov	r6,r2
 4406144:	e17ffd17 	ldw	r5,-12(fp)
 4406148:	e13ffc17 	ldw	r4,-16(fp)
 440614c:	4405c8c0 	call	4405c8c <i2c_write>
 4406150:	1000041e 	bne	r2,zero,4406164 <I2CL_Read+0xdc>
        bSuccess = FALSE;
 4406154:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4406158:	010110f4 	movhi	r4,1091
 440615c:	2112c904 	addi	r4,r4,19236
 4406160:	4406ad40 	call	4406ad4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4406164:	e17ffd17 	ldw	r5,-12(fp)
 4406168:	e13ffc17 	ldw	r4,-16(fp)
 440616c:	4405b880 	call	4405b88 <i2c_start>
    DeviceAddr |= 1; // Read
 4406170:	e0bffe03 	ldbu	r2,-8(fp)
 4406174:	10800054 	ori	r2,r2,1
 4406178:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 440617c:	e0bffa17 	ldw	r2,-24(fp)
 4406180:	10000b26 	beq	r2,zero,44061b0 <I2CL_Read+0x128>
 4406184:	e0bffe03 	ldbu	r2,-8(fp)
 4406188:	10803fcc 	andi	r2,r2,255
 440618c:	100d883a 	mov	r6,r2
 4406190:	e17ffd17 	ldw	r5,-12(fp)
 4406194:	e13ffc17 	ldw	r4,-16(fp)
 4406198:	4405c8c0 	call	4405c8c <i2c_write>
 440619c:	1000041e 	bne	r2,zero,44061b0 <I2CL_Read+0x128>
        bSuccess = FALSE;
 44061a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 44061a4:	010110f4 	movhi	r4,1091
 44061a8:	21129504 	addi	r4,r4,19028
 44061ac:	4406ad40 	call	4406ad4 <myprintf>
    }
    
    if (bSuccess){
 44061b0:	e0bffa17 	ldw	r2,-24(fp)
 44061b4:	10000526 	beq	r2,zero,44061cc <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 44061b8:	000f883a 	mov	r7,zero
 44061bc:	e1800217 	ldw	r6,8(fp)
 44061c0:	e17ffd17 	ldw	r5,-12(fp)
 44061c4:	e13ffc17 	ldw	r4,-16(fp)
 44061c8:	4405df00 	call	4405df0 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 44061cc:	e17ffd17 	ldw	r5,-12(fp)
 44061d0:	e13ffc17 	ldw	r4,-16(fp)
 44061d4:	4405c140 	call	4405c14 <i2c_stop>
    
    return bSuccess;    
 44061d8:	e0bffa17 	ldw	r2,-24(fp)
}
 44061dc:	e037883a 	mov	sp,fp
 44061e0:	dfc00117 	ldw	ra,4(sp)
 44061e4:	df000017 	ldw	fp,0(sp)
 44061e8:	dec00204 	addi	sp,sp,8
 44061ec:	f800283a 	ret

044061f0 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 44061f0:	defff604 	addi	sp,sp,-40
 44061f4:	dfc00915 	stw	ra,36(sp)
 44061f8:	df000815 	stw	fp,32(sp)
 44061fc:	df000804 	addi	fp,sp,32
 4406200:	e13ffb15 	stw	r4,-20(fp)
 4406204:	e17ffc15 	stw	r5,-16(fp)
 4406208:	3009883a 	mov	r4,r6
 440620c:	3807883a 	mov	r3,r7
 4406210:	e0800317 	ldw	r2,12(fp)
 4406214:	e13ffd05 	stb	r4,-12(fp)
 4406218:	e0fffe0d 	sth	r3,-8(fp)
 440621c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4406220:	00800044 	movi	r2,1
 4406224:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4406228:	e0bffe0b 	ldhu	r2,-8(fp)
 440622c:	1004d23a 	srli	r2,r2,8
 4406230:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 4406234:	e0bffe0b 	ldhu	r2,-8(fp)
 4406238:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 440623c:	e17ffc17 	ldw	r5,-16(fp)
 4406240:	e13ffb17 	ldw	r4,-20(fp)
 4406244:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4406248:	e0bffd03 	ldbu	r2,-12(fp)
 440624c:	10803fcc 	andi	r2,r2,255
 4406250:	100d883a 	mov	r6,r2
 4406254:	e17ffc17 	ldw	r5,-16(fp)
 4406258:	e13ffb17 	ldw	r4,-20(fp)
 440625c:	4405c8c0 	call	4405c8c <i2c_write>
 4406260:	1000041e 	bne	r2,zero,4406274 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 4406264:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4406268:	010110f4 	movhi	r4,1091
 440626c:	21126104 	addi	r4,r4,18820
 4406270:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4406274:	e0bff917 	ldw	r2,-28(fp)
 4406278:	10000a26 	beq	r2,zero,44062a4 <I2CL_MultipleRead+0xb4>
 440627c:	e0bffa03 	ldbu	r2,-24(fp)
 4406280:	100d883a 	mov	r6,r2
 4406284:	e17ffc17 	ldw	r5,-16(fp)
 4406288:	e13ffb17 	ldw	r4,-20(fp)
 440628c:	4405c8c0 	call	4405c8c <i2c_write>
 4406290:	1000041e 	bne	r2,zero,44062a4 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 4406294:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4406298:	010110f4 	movhi	r4,1091
 440629c:	2112bf04 	addi	r4,r4,19196
 44062a0:	4406ad40 	call	4406ad4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 44062a4:	e0bff917 	ldw	r2,-28(fp)
 44062a8:	10000a26 	beq	r2,zero,44062d4 <I2CL_MultipleRead+0xe4>
 44062ac:	e0bffa43 	ldbu	r2,-23(fp)
 44062b0:	100d883a 	mov	r6,r2
 44062b4:	e17ffc17 	ldw	r5,-16(fp)
 44062b8:	e13ffb17 	ldw	r4,-20(fp)
 44062bc:	4405c8c0 	call	4405c8c <i2c_write>
 44062c0:	1000041e 	bne	r2,zero,44062d4 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 44062c4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 44062c8:	010110f4 	movhi	r4,1091
 44062cc:	2112c904 	addi	r4,r4,19236
 44062d0:	4406ad40 	call	4406ad4 <myprintf>
    }    
    if (bSuccess)        
 44062d4:	e0bff917 	ldw	r2,-28(fp)
 44062d8:	10000326 	beq	r2,zero,44062e8 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 44062dc:	e17ffc17 	ldw	r5,-16(fp)
 44062e0:	e13ffb17 	ldw	r4,-20(fp)
 44062e4:	4405b880 	call	4405b88 <i2c_start>
    DeviceAddr |= 1; // Read
 44062e8:	e0bffd03 	ldbu	r2,-12(fp)
 44062ec:	10800054 	ori	r2,r2,1
 44062f0:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 44062f4:	e0bff917 	ldw	r2,-28(fp)
 44062f8:	10000b26 	beq	r2,zero,4406328 <I2CL_MultipleRead+0x138>
 44062fc:	e0bffd03 	ldbu	r2,-12(fp)
 4406300:	10803fcc 	andi	r2,r2,255
 4406304:	100d883a 	mov	r6,r2
 4406308:	e17ffc17 	ldw	r5,-16(fp)
 440630c:	e13ffb17 	ldw	r4,-20(fp)
 4406310:	4405c8c0 	call	4405c8c <i2c_write>
 4406314:	1000041e 	bne	r2,zero,4406328 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 4406318:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 440631c:	010110f4 	movhi	r4,1091
 4406320:	2112d304 	addi	r4,r4,19276
 4406324:	4406ad40 	call	4406ad4 <myprintf>
    }
    
    if (bSuccess){
 4406328:	e0bff917 	ldw	r2,-28(fp)
 440632c:	10001726 	beq	r2,zero,440638c <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 4406330:	e03ff815 	stw	zero,-32(fp)
 4406334:	00001006 	br	4406378 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 4406338:	e0bff817 	ldw	r2,-32(fp)
 440633c:	e0c00217 	ldw	r3,8(fp)
 4406340:	1889883a 	add	r4,r3,r2
 4406344:	e0bfff0b 	ldhu	r2,-4(fp)
 4406348:	10ffffc4 	addi	r3,r2,-1
 440634c:	e0bff817 	ldw	r2,-32(fp)
 4406350:	1884c03a 	cmpne	r2,r3,r2
 4406354:	10803fcc 	andi	r2,r2,255
 4406358:	100f883a 	mov	r7,r2
 440635c:	200d883a 	mov	r6,r4
 4406360:	e17ffc17 	ldw	r5,-16(fp)
 4406364:	e13ffb17 	ldw	r4,-20(fp)
 4406368:	4405df00 	call	4405df0 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 440636c:	e0bff817 	ldw	r2,-32(fp)
 4406370:	10800044 	addi	r2,r2,1
 4406374:	e0bff815 	stw	r2,-32(fp)
 4406378:	e0bfff0b 	ldhu	r2,-4(fp)
 440637c:	e0fff817 	ldw	r3,-32(fp)
 4406380:	1880020e 	bge	r3,r2,440638c <I2CL_MultipleRead+0x19c>
 4406384:	e0bff917 	ldw	r2,-28(fp)
 4406388:	103feb1e 	bne	r2,zero,4406338 <__reset+0xfb402338>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 440638c:	e17ffc17 	ldw	r5,-16(fp)
 4406390:	e13ffb17 	ldw	r4,-20(fp)
 4406394:	4405c140 	call	4405c14 <i2c_stop>
    
    return bSuccess;    
 4406398:	e0bff917 	ldw	r2,-28(fp)
    
} 
 440639c:	e037883a 	mov	sp,fp
 44063a0:	dfc00117 	ldw	ra,4(sp)
 44063a4:	df000017 	ldw	fp,0(sp)
 44063a8:	dec00204 	addi	sp,sp,8
 44063ac:	f800283a 	ret

044063b0 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 44063b0:	defff604 	addi	sp,sp,-40
 44063b4:	dfc00915 	stw	ra,36(sp)
 44063b8:	df000815 	stw	fp,32(sp)
 44063bc:	df000804 	addi	fp,sp,32
 44063c0:	e13ffb15 	stw	r4,-20(fp)
 44063c4:	e17ffc15 	stw	r5,-16(fp)
 44063c8:	3009883a 	mov	r4,r6
 44063cc:	3807883a 	mov	r3,r7
 44063d0:	e0800317 	ldw	r2,12(fp)
 44063d4:	e13ffd05 	stb	r4,-12(fp)
 44063d8:	e0fffe0d 	sth	r3,-8(fp)
 44063dc:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 44063e0:	00800044 	movi	r2,1
 44063e4:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 44063e8:	e0bffe0b 	ldhu	r2,-8(fp)
 44063ec:	1004d23a 	srli	r2,r2,8
 44063f0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 44063f4:	e0bffe0b 	ldhu	r2,-8(fp)
 44063f8:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 44063fc:	e17ffc17 	ldw	r5,-16(fp)
 4406400:	e13ffb17 	ldw	r4,-20(fp)
 4406404:	4405b880 	call	4405b88 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4406408:	e0bffd03 	ldbu	r2,-12(fp)
 440640c:	10803fcc 	andi	r2,r2,255
 4406410:	100d883a 	mov	r6,r2
 4406414:	e17ffc17 	ldw	r5,-16(fp)
 4406418:	e13ffb17 	ldw	r4,-20(fp)
 440641c:	4405c8c0 	call	4405c8c <i2c_write>
 4406420:	1000041e 	bne	r2,zero,4406434 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 4406424:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4406428:	010110f4 	movhi	r4,1091
 440642c:	21126104 	addi	r4,r4,18820
 4406430:	4406ad40 	call	4406ad4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4406434:	e0bff817 	ldw	r2,-32(fp)
 4406438:	10000a26 	beq	r2,zero,4406464 <I2CL_MultipleWrite+0xb4>
 440643c:	e0bffa03 	ldbu	r2,-24(fp)
 4406440:	100d883a 	mov	r6,r2
 4406444:	e17ffc17 	ldw	r5,-16(fp)
 4406448:	e13ffb17 	ldw	r4,-20(fp)
 440644c:	4405c8c0 	call	4405c8c <i2c_write>
 4406450:	1000041e 	bne	r2,zero,4406464 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 4406454:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4406458:	010110f4 	movhi	r4,1091
 440645c:	2112bf04 	addi	r4,r4,19196
 4406460:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4406464:	e0bff817 	ldw	r2,-32(fp)
 4406468:	10000a26 	beq	r2,zero,4406494 <I2CL_MultipleWrite+0xe4>
 440646c:	e0bffa43 	ldbu	r2,-23(fp)
 4406470:	100d883a 	mov	r6,r2
 4406474:	e17ffc17 	ldw	r5,-16(fp)
 4406478:	e13ffb17 	ldw	r4,-20(fp)
 440647c:	4405c8c0 	call	4405c8c <i2c_write>
 4406480:	1000041e 	bne	r2,zero,4406494 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 4406484:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4406488:	010110f4 	movhi	r4,1091
 440648c:	2112c904 	addi	r4,r4,19236
 4406490:	4406ad40 	call	4406ad4 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 4406494:	e0bff817 	ldw	r2,-32(fp)
 4406498:	10001926 	beq	r2,zero,4406500 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 440649c:	e03ff915 	stw	zero,-28(fp)
 44064a0:	00000d06 	br	44064d8 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 44064a4:	e0bff917 	ldw	r2,-28(fp)
 44064a8:	e0c00217 	ldw	r3,8(fp)
 44064ac:	1885883a 	add	r2,r3,r2
 44064b0:	10800003 	ldbu	r2,0(r2)
 44064b4:	10803fcc 	andi	r2,r2,255
 44064b8:	100d883a 	mov	r6,r2
 44064bc:	e17ffc17 	ldw	r5,-16(fp)
 44064c0:	e13ffb17 	ldw	r4,-20(fp)
 44064c4:	4405c8c0 	call	4405c8c <i2c_write>
 44064c8:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 44064cc:	e0bff917 	ldw	r2,-28(fp)
 44064d0:	10800044 	addi	r2,r2,1
 44064d4:	e0bff915 	stw	r2,-28(fp)
 44064d8:	e0bfff0b 	ldhu	r2,-4(fp)
 44064dc:	e0fff917 	ldw	r3,-28(fp)
 44064e0:	1880020e 	bge	r3,r2,44064ec <I2CL_MultipleWrite+0x13c>
 44064e4:	e0bff817 	ldw	r2,-32(fp)
 44064e8:	103fee1e 	bne	r2,zero,44064a4 <__reset+0xfb4024a4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 44064ec:	e0bff817 	ldw	r2,-32(fp)
 44064f0:	1000031e 	bne	r2,zero,4406500 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 44064f4:	010110f4 	movhi	r4,1091
 44064f8:	21127204 	addi	r4,r4,18888
 44064fc:	4406ad40 	call	4406ad4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4406500:	e17ffc17 	ldw	r5,-16(fp)
 4406504:	e13ffb17 	ldw	r4,-20(fp)
 4406508:	4405c140 	call	4405c14 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 440650c:	0106d604 	movi	r4,7000
 4406510:	4418d100 	call	4418d10 <usleep>
    
    return bSuccess;
 4406514:	e0bff817 	ldw	r2,-32(fp)
    
}
 4406518:	e037883a 	mov	sp,fp
 440651c:	dfc00117 	ldw	ra,4(sp)
 4406520:	df000017 	ldw	fp,0(sp)
 4406524:	dec00204 	addi	sp,sp,8
 4406528:	f800283a 	ret

0440652c <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 440652c:	defff604 	addi	sp,sp,-40
 4406530:	dfc00915 	stw	ra,36(sp)
 4406534:	df000815 	stw	fp,32(sp)
 4406538:	df000804 	addi	fp,sp,32
 440653c:	e13ffc15 	stw	r4,-16(fp)
 4406540:	e17ffd15 	stw	r5,-12(fp)
 4406544:	3007883a 	mov	r3,r6
 4406548:	3805883a 	mov	r2,r7
 440654c:	e0fffe05 	stb	r3,-8(fp)
 4406550:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4406554:	e0fffe07 	ldb	r3,-8(fp)
 4406558:	e13fff0b 	ldhu	r4,-4(fp)
 440655c:	00800084 	movi	r2,2
 4406560:	d8800115 	stw	r2,4(sp)
 4406564:	e0bffb04 	addi	r2,fp,-20
 4406568:	d8800015 	stw	r2,0(sp)
 440656c:	200f883a 	mov	r7,r4
 4406570:	180d883a 	mov	r6,r3
 4406574:	e17ffd17 	ldw	r5,-12(fp)
 4406578:	e13ffc17 	ldw	r4,-16(fp)
 440657c:	44061f00 	call	44061f0 <I2CL_MultipleRead>
 4406580:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 4406584:	e0bffa17 	ldw	r2,-24(fp)
 4406588:	10000a26 	beq	r2,zero,44065b4 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 440658c:	e0bffb03 	ldbu	r2,-20(fp)
 4406590:	10803fcc 	andi	r2,r2,255
 4406594:	1004923a 	slli	r2,r2,8
 4406598:	1007883a 	mov	r3,r2
 440659c:	e0bffb43 	ldbu	r2,-19(fp)
 44065a0:	10803fcc 	andi	r2,r2,255
 44065a4:	1884b03a 	or	r2,r3,r2
 44065a8:	1007883a 	mov	r3,r2
 44065ac:	e0800217 	ldw	r2,8(fp)
 44065b0:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 44065b4:	e0bffa17 	ldw	r2,-24(fp)
}
 44065b8:	e037883a 	mov	sp,fp
 44065bc:	dfc00117 	ldw	ra,4(sp)
 44065c0:	df000017 	ldw	fp,0(sp)
 44065c4:	dec00204 	addi	sp,sp,8
 44065c8:	f800283a 	ret

044065cc <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 44065cc:	defff504 	addi	sp,sp,-44
 44065d0:	dfc00a15 	stw	ra,40(sp)
 44065d4:	df000915 	stw	fp,36(sp)
 44065d8:	df000904 	addi	fp,sp,36
 44065dc:	e13ffb15 	stw	r4,-20(fp)
 44065e0:	e17ffc15 	stw	r5,-16(fp)
 44065e4:	3009883a 	mov	r4,r6
 44065e8:	3807883a 	mov	r3,r7
 44065ec:	e0800217 	ldw	r2,8(fp)
 44065f0:	e13ffd05 	stb	r4,-12(fp)
 44065f4:	e0fffe0d 	sth	r3,-8(fp)
 44065f8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 44065fc:	e0bfff0b 	ldhu	r2,-4(fp)
 4406600:	1004d23a 	srli	r2,r2,8
 4406604:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 4406608:	e0bfff0b 	ldhu	r2,-4(fp)
 440660c:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4406610:	e0fffd07 	ldb	r3,-12(fp)
 4406614:	e13ffe0b 	ldhu	r4,-8(fp)
 4406618:	00800084 	movi	r2,2
 440661c:	d8800115 	stw	r2,4(sp)
 4406620:	e0bffa04 	addi	r2,fp,-24
 4406624:	d8800015 	stw	r2,0(sp)
 4406628:	200f883a 	mov	r7,r4
 440662c:	180d883a 	mov	r6,r3
 4406630:	e17ffc17 	ldw	r5,-16(fp)
 4406634:	e13ffb17 	ldw	r4,-20(fp)
 4406638:	44063b00 	call	44063b0 <I2CL_MultipleWrite>
 440663c:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 4406640:	e0bff917 	ldw	r2,-28(fp)
}
 4406644:	e037883a 	mov	sp,fp
 4406648:	dfc00117 	ldw	ra,4(sp)
 440664c:	df000017 	ldw	fp,0(sp)
 4406650:	dec00204 	addi	sp,sp,8
 4406654:	f800283a 	ret

04406658 <SEG7_Clear>:
static    unsigned char szMap[] = {
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
 4406658:	defffe04 	addi	sp,sp,-8
 440665c:	df000115 	stw	fp,4(sp)
 4406660:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 4406664:	e03fff15 	stw	zero,-4(fp)
 4406668:	00000c06 	br	440669c <SEG7_Clear+0x44>
        SEG7_SET(i, 0x00);
 440666c:	e0bfff17 	ldw	r2,-4(fp)
 4406670:	1085883a 	add	r2,r2,r2
 4406674:	1085883a 	add	r2,r2,r2
 4406678:	1007883a 	mov	r3,r2
 440667c:	00820034 	movhi	r2,2048
 4406680:	10801004 	addi	r2,r2,64
 4406684:	1885883a 	add	r2,r3,r2
 4406688:	0007883a 	mov	r3,zero
 440668c:	10c00035 	stwio	r3,0(r2)
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 4406690:	e0bfff17 	ldw	r2,-4(fp)
 4406694:	10800044 	addi	r2,r2,1
 4406698:	e0bfff15 	stw	r2,-4(fp)
 440669c:	e0bfff17 	ldw	r2,-4(fp)
 44066a0:	10800190 	cmplti	r2,r2,6
 44066a4:	103ff11e 	bne	r2,zero,440666c <__reset+0xfb40266c>
        SEG7_SET(i, 0x00);
    }        
}
 44066a8:	0001883a 	nop
 44066ac:	e037883a 	mov	sp,fp
 44066b0:	df000017 	ldw	fp,0(sp)
 44066b4:	dec00104 	addi	sp,sp,4
 44066b8:	f800283a 	ret

044066bc <SEG7_Full>:
void SEG7_Full(void){
 44066bc:	defffe04 	addi	sp,sp,-8
 44066c0:	df000115 	stw	fp,4(sp)
 44066c4:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 44066c8:	e03fff15 	stw	zero,-4(fp)
 44066cc:	00000c06 	br	4406700 <SEG7_Full+0x44>
        SEG7_SET(i, 0xFF);
 44066d0:	e0bfff17 	ldw	r2,-4(fp)
 44066d4:	1085883a 	add	r2,r2,r2
 44066d8:	1085883a 	add	r2,r2,r2
 44066dc:	1007883a 	mov	r3,r2
 44066e0:	00820034 	movhi	r2,2048
 44066e4:	10801004 	addi	r2,r2,64
 44066e8:	1885883a 	add	r2,r3,r2
 44066ec:	00c03fc4 	movi	r3,255
 44066f0:	10c00035 	stwio	r3,0(r2)
        SEG7_SET(i, 0x00);
    }        
}
void SEG7_Full(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 44066f4:	e0bfff17 	ldw	r2,-4(fp)
 44066f8:	10800044 	addi	r2,r2,1
 44066fc:	e0bfff15 	stw	r2,-4(fp)
 4406700:	e0bfff17 	ldw	r2,-4(fp)
 4406704:	10800190 	cmplti	r2,r2,6
 4406708:	103ff11e 	bne	r2,zero,44066d0 <__reset+0xfb4026d0>
        SEG7_SET(i, 0xFF);
    }        
}
 440670c:	0001883a 	nop
 4406710:	e037883a 	mov	sp,fp
 4406714:	df000017 	ldw	fp,0(sp)
 4406718:	dec00104 	addi	sp,sp,4
 440671c:	f800283a 	ret

04406720 <SEG7_Number>:

void SEG7_Number(void){
 4406720:	defffe04 	addi	sp,sp,-8
 4406724:	df000115 	stw	fp,4(sp)
 4406728:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 440672c:	e03fff15 	stw	zero,-4(fp)
 4406730:	00001106 	br	4406778 <SEG7_Number+0x58>
        SEG7_SET(i, szMap[i]);
 4406734:	e0bfff17 	ldw	r2,-4(fp)
 4406738:	1085883a 	add	r2,r2,r2
 440673c:	1085883a 	add	r2,r2,r2
 4406740:	1007883a 	mov	r3,r2
 4406744:	00820034 	movhi	r2,2048
 4406748:	10801004 	addi	r2,r2,64
 440674c:	1887883a 	add	r3,r3,r2
 4406750:	008110f4 	movhi	r2,1091
 4406754:	109a9d04 	addi	r2,r2,27252
 4406758:	e13fff17 	ldw	r4,-4(fp)
 440675c:	1105883a 	add	r2,r2,r4
 4406760:	10800003 	ldbu	r2,0(r2)
 4406764:	10803fcc 	andi	r2,r2,255
 4406768:	18800035 	stwio	r2,0(r3)
    }        
}

void SEG7_Number(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 440676c:	e0bfff17 	ldw	r2,-4(fp)
 4406770:	10800044 	addi	r2,r2,1
 4406774:	e0bfff15 	stw	r2,-4(fp)
 4406778:	e0bfff17 	ldw	r2,-4(fp)
 440677c:	10800190 	cmplti	r2,r2,6
 4406780:	103fec1e 	bne	r2,zero,4406734 <__reset+0xfb402734>
        SEG7_SET(i, szMap[i]);
    }        
}
 4406784:	0001883a 	nop
 4406788:	e037883a 	mov	sp,fp
 440678c:	df000017 	ldw	fp,0(sp)
 4406790:	dec00104 	addi	sp,sp,4
 4406794:	f800283a 	ret

04406798 <SEG7_All_Number>:


void SEG7_All_Number(void){
 4406798:	defffc04 	addi	sp,sp,-16
 440679c:	dfc00315 	stw	ra,12(sp)
 44067a0:	df000215 	stw	fp,8(sp)
 44067a4:	df000204 	addi	fp,sp,8
    int i,j;
    for(j=0;j<16;j++)
 44067a8:	e03fff15 	stw	zero,-4(fp)
 44067ac:	00001c06 	br	4406820 <SEG7_All_Number+0x88>
    {
       for(i=0;i<SEG7_NUM;i++){
 44067b0:	e03ffe15 	stw	zero,-8(fp)
 44067b4:	00001106 	br	44067fc <SEG7_All_Number+0x64>
        SEG7_SET(i, szMap[j]);
 44067b8:	e0bffe17 	ldw	r2,-8(fp)
 44067bc:	1085883a 	add	r2,r2,r2
 44067c0:	1085883a 	add	r2,r2,r2
 44067c4:	1007883a 	mov	r3,r2
 44067c8:	00820034 	movhi	r2,2048
 44067cc:	10801004 	addi	r2,r2,64
 44067d0:	1887883a 	add	r3,r3,r2
 44067d4:	008110f4 	movhi	r2,1091
 44067d8:	109a9d04 	addi	r2,r2,27252
 44067dc:	e13fff17 	ldw	r4,-4(fp)
 44067e0:	1105883a 	add	r2,r2,r4
 44067e4:	10800003 	ldbu	r2,0(r2)
 44067e8:	10803fcc 	andi	r2,r2,255
 44067ec:	18800035 	stwio	r2,0(r3)

void SEG7_All_Number(void){
    int i,j;
    for(j=0;j<16;j++)
    {
       for(i=0;i<SEG7_NUM;i++){
 44067f0:	e0bffe17 	ldw	r2,-8(fp)
 44067f4:	10800044 	addi	r2,r2,1
 44067f8:	e0bffe15 	stw	r2,-8(fp)
 44067fc:	e0bffe17 	ldw	r2,-8(fp)
 4406800:	10800190 	cmplti	r2,r2,6
 4406804:	103fec1e 	bne	r2,zero,44067b8 <__reset+0xfb4027b8>
        SEG7_SET(i, szMap[j]);
       }
       usleep(500*1000);
 4406808:	01000234 	movhi	r4,8
 440680c:	21284804 	addi	r4,r4,-24288
 4406810:	4418d100 	call	4418d10 <usleep>
}


void SEG7_All_Number(void){
    int i,j;
    for(j=0;j<16;j++)
 4406814:	e0bfff17 	ldw	r2,-4(fp)
 4406818:	10800044 	addi	r2,r2,1
 440681c:	e0bfff15 	stw	r2,-4(fp)
 4406820:	e0bfff17 	ldw	r2,-4(fp)
 4406824:	10800410 	cmplti	r2,r2,16
 4406828:	103fe11e 	bne	r2,zero,44067b0 <__reset+0xfb4027b0>
       for(i=0;i<SEG7_NUM;i++){
        SEG7_SET(i, szMap[j]);
       }
       usleep(500*1000);
    }
}
 440682c:	0001883a 	nop
 4406830:	e037883a 	mov	sp,fp
 4406834:	dfc00117 	ldw	ra,4(sp)
 4406838:	df000017 	ldw	fp,0(sp)
 440683c:	dec00204 	addi	sp,sp,8
 4406840:	f800283a 	ret

04406844 <SEG7_Seg>:


void SEG7_Seg(alt_u64 Data){
 4406844:	defffb04 	addi	sp,sp,-20
 4406848:	df000415 	stw	fp,16(sp)
 440684c:	df000404 	addi	fp,sp,16
 4406850:	e13ffe15 	stw	r4,-8(fp)
 4406854:	e17fff15 	stw	r5,-4(fp)
    alt_u8 seg_mask;
    int i;

    //
    for(i=0;i<SEG7_NUM;i++){
 4406858:	e03ffc15 	stw	zero,-16(fp)
 440685c:	00001706 	br	44068bc <SEG7_Seg+0x78>
        seg_mask = Data & 0xFF;
 4406860:	e0bffe17 	ldw	r2,-8(fp)
 4406864:	e0bffd05 	stb	r2,-12(fp)
        Data >>= 8;
 4406868:	e0bfff17 	ldw	r2,-4(fp)
 440686c:	1004963a 	slli	r2,r2,24
 4406870:	e0fffe17 	ldw	r3,-8(fp)
 4406874:	1806d23a 	srli	r3,r3,8
 4406878:	1884b03a 	or	r2,r3,r2
 440687c:	e0bffe15 	stw	r2,-8(fp)
 4406880:	e0bfff17 	ldw	r2,-4(fp)
 4406884:	1004d23a 	srli	r2,r2,8
 4406888:	e0bfff15 	stw	r2,-4(fp)
        SEG7_SET(i, seg_mask);
 440688c:	e0bffc17 	ldw	r2,-16(fp)
 4406890:	1085883a 	add	r2,r2,r2
 4406894:	1085883a 	add	r2,r2,r2
 4406898:	1007883a 	mov	r3,r2
 440689c:	00820034 	movhi	r2,2048
 44068a0:	10801004 	addi	r2,r2,64
 44068a4:	1885883a 	add	r2,r3,r2
 44068a8:	e0fffd03 	ldbu	r3,-12(fp)
 44068ac:	10c00035 	stwio	r3,0(r2)
void SEG7_Seg(alt_u64 Data){
    alt_u8 seg_mask;
    int i;

    //
    for(i=0;i<SEG7_NUM;i++){
 44068b0:	e0bffc17 	ldw	r2,-16(fp)
 44068b4:	10800044 	addi	r2,r2,1
 44068b8:	e0bffc15 	stw	r2,-16(fp)
 44068bc:	e0bffc17 	ldw	r2,-16(fp)
 44068c0:	10800190 	cmplti	r2,r2,6
 44068c4:	103fe61e 	bne	r2,zero,4406860 <__reset+0xfb402860>
        seg_mask = Data & 0xFF;
        Data >>= 8;
        SEG7_SET(i, seg_mask);
    }
}
 44068c8:	0001883a 	nop
 44068cc:	e037883a 	mov	sp,fp
 44068d0:	df000017 	ldw	fp,0(sp)
 44068d4:	dec00104 	addi	sp,sp,4
 44068d8:	f800283a 	ret

044068dc <SEG7_Hex>:

void SEG7_Hex( alt_u32 Data, alt_u8 point_mask){
 44068dc:	defffb04 	addi	sp,sp,-20
 44068e0:	df000415 	stw	fp,16(sp)
 44068e4:	df000404 	addi	fp,sp,16
 44068e8:	e13ffe15 	stw	r4,-8(fp)
 44068ec:	2805883a 	mov	r2,r5
 44068f0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 44068f4:	00800044 	movi	r2,1
 44068f8:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 44068fc:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 4406900:	e03ffd15 	stw	zero,-12(fp)
 4406904:	00002206 	br	4406990 <SEG7_Hex+0xb4>
        seg_mask = szMap[Data & 0x0F];
 4406908:	e0bffe17 	ldw	r2,-8(fp)
 440690c:	10c003cc 	andi	r3,r2,15
 4406910:	008110f4 	movhi	r2,1091
 4406914:	109a9d04 	addi	r2,r2,27252
 4406918:	10c5883a 	add	r2,r2,r3
 440691c:	10800003 	ldbu	r2,0(r2)
 4406920:	e0bffc45 	stb	r2,-15(fp)
        Data >>= 4;
 4406924:	e0bffe17 	ldw	r2,-8(fp)
 4406928:	1004d13a 	srli	r2,r2,4
 440692c:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 4406930:	e0ffff03 	ldbu	r3,-4(fp)
 4406934:	e0bffc03 	ldbu	r2,-16(fp)
 4406938:	1884703a 	and	r2,r3,r2
 440693c:	10803fcc 	andi	r2,r2,255
 4406940:	10000426 	beq	r2,zero,4406954 <SEG7_Hex+0x78>
            seg_mask |= 0x80;
 4406944:	e0fffc43 	ldbu	r3,-15(fp)
 4406948:	00bfe004 	movi	r2,-128
 440694c:	1884b03a 	or	r2,r3,r2
 4406950:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;     
 4406954:	e0bffc03 	ldbu	r2,-16(fp)
 4406958:	1085883a 	add	r2,r2,r2
 440695c:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 4406960:	e0bffd17 	ldw	r2,-12(fp)
 4406964:	1085883a 	add	r2,r2,r2
 4406968:	1085883a 	add	r2,r2,r2
 440696c:	1007883a 	mov	r3,r2
 4406970:	00820034 	movhi	r2,2048
 4406974:	10801004 	addi	r2,r2,64
 4406978:	1885883a 	add	r2,r3,r2
 440697c:	e0fffc43 	ldbu	r3,-15(fp)
 4406980:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 4406984:	e0bffd17 	ldw	r2,-12(fp)
 4406988:	10800044 	addi	r2,r2,1
 440698c:	e0bffd15 	stw	r2,-12(fp)
 4406990:	e0bffd17 	ldw	r2,-12(fp)
 4406994:	10800190 	cmplti	r2,r2,6
 4406998:	103fdb1e 	bne	r2,zero,4406908 <__reset+0xfb402908>
        if (point_mask & mask)
            seg_mask |= 0x80;
        mask <<= 1;     
        SEG7_SET(i, seg_mask);
    }        
}
 440699c:	0001883a 	nop
 44069a0:	e037883a 	mov	sp,fp
 44069a4:	df000017 	ldw	fp,0(sp)
 44069a8:	dec00104 	addi	sp,sp,4
 44069ac:	f800283a 	ret

044069b0 <SEG7_Decimal>:

void SEG7_Decimal( alt_u32 Data, alt_u8 point_mask){
 44069b0:	defffa04 	addi	sp,sp,-24
 44069b4:	dfc00515 	stw	ra,20(sp)
 44069b8:	df000415 	stw	fp,16(sp)
 44069bc:	df000404 	addi	fp,sp,16
 44069c0:	e13ffe15 	stw	r4,-8(fp)
 44069c4:	2805883a 	mov	r2,r5
 44069c8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 44069cc:	00800044 	movi	r2,1
 44069d0:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 44069d4:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 44069d8:	e03ffd15 	stw	zero,-12(fp)
 44069dc:	00002706 	br	4406a7c <SEG7_Decimal+0xcc>
        seg_mask = szMap[Data%10];
 44069e0:	e0bffe17 	ldw	r2,-8(fp)
 44069e4:	01400284 	movi	r5,10
 44069e8:	1009883a 	mov	r4,r2
 44069ec:	4407f040 	call	4407f04 <__umodsi3>
 44069f0:	1007883a 	mov	r3,r2
 44069f4:	008110f4 	movhi	r2,1091
 44069f8:	109a9d04 	addi	r2,r2,27252
 44069fc:	10c5883a 	add	r2,r2,r3
 4406a00:	10800003 	ldbu	r2,0(r2)
 4406a04:	e0bffc45 	stb	r2,-15(fp)
        Data /= 10;
 4406a08:	e0bffe17 	ldw	r2,-8(fp)
 4406a0c:	01400284 	movi	r5,10
 4406a10:	1009883a 	mov	r4,r2
 4406a14:	4407ea00 	call	4407ea0 <__udivsi3>
 4406a18:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 4406a1c:	e0ffff03 	ldbu	r3,-4(fp)
 4406a20:	e0bffc03 	ldbu	r2,-16(fp)
 4406a24:	1884703a 	and	r2,r3,r2
 4406a28:	10803fcc 	andi	r2,r2,255
 4406a2c:	10000426 	beq	r2,zero,4406a40 <SEG7_Decimal+0x90>
            seg_mask |= 0x80;
 4406a30:	e0fffc43 	ldbu	r3,-15(fp)
 4406a34:	00bfe004 	movi	r2,-128
 4406a38:	1884b03a 	or	r2,r3,r2
 4406a3c:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;   
 4406a40:	e0bffc03 	ldbu	r2,-16(fp)
 4406a44:	1085883a 	add	r2,r2,r2
 4406a48:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 4406a4c:	e0bffd17 	ldw	r2,-12(fp)
 4406a50:	1085883a 	add	r2,r2,r2
 4406a54:	1085883a 	add	r2,r2,r2
 4406a58:	1007883a 	mov	r3,r2
 4406a5c:	00820034 	movhi	r2,2048
 4406a60:	10801004 	addi	r2,r2,64
 4406a64:	1885883a 	add	r2,r3,r2
 4406a68:	e0fffc43 	ldbu	r3,-15(fp)
 4406a6c:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 4406a70:	e0bffd17 	ldw	r2,-12(fp)
 4406a74:	10800044 	addi	r2,r2,1
 4406a78:	e0bffd15 	stw	r2,-12(fp)
 4406a7c:	e0bffd17 	ldw	r2,-12(fp)
 4406a80:	10800190 	cmplti	r2,r2,6
 4406a84:	103fd61e 	bne	r2,zero,44069e0 <__reset+0xfb4029e0>
            seg_mask |= 0x80;
        mask <<= 1;   
        SEG7_SET(i, seg_mask);
    }        
  
} 
 4406a88:	0001883a 	nop
 4406a8c:	e037883a 	mov	sp,fp
 4406a90:	dfc00117 	ldw	ra,4(sp)
 4406a94:	df000017 	ldw	fp,0(sp)
 4406a98:	dec00204 	addi	sp,sp,8
 4406a9c:	f800283a 	ret

04406aa0 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 4406aa0:	defffd04 	addi	sp,sp,-12
 4406aa4:	dfc00215 	stw	ra,8(sp)
 4406aa8:	df000115 	stw	fp,4(sp)
 4406aac:	df000104 	addi	fp,sp,4
 4406ab0:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 4406ab4:	e13fff17 	ldw	r4,-4(fp)
 4406ab8:	440ae9c0 	call	440ae9c <printf>
}
 4406abc:	0001883a 	nop
 4406ac0:	e037883a 	mov	sp,fp
 4406ac4:	dfc00117 	ldw	ra,4(sp)
 4406ac8:	df000017 	ldw	fp,0(sp)
 4406acc:	dec00204 	addi	sp,sp,8
 4406ad0:	f800283a 	ret

04406ad4 <myprintf>:





int myprintf(char *format, ...){
 4406ad4:	deff7804 	addi	sp,sp,-544
 4406ad8:	dfc08415 	stw	ra,528(sp)
 4406adc:	df008315 	stw	fp,524(sp)
 4406ae0:	df008304 	addi	fp,sp,524
 4406ae4:	e13fff15 	stw	r4,-4(fp)
 4406ae8:	e1400215 	stw	r5,8(fp)
 4406aec:	e1800315 	stw	r6,12(fp)
 4406af0:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 4406af4:	e0800204 	addi	r2,fp,8
 4406af8:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 4406afc:	e0fffe17 	ldw	r3,-8(fp)
 4406b00:	e0bf7e04 	addi	r2,fp,-520
 4406b04:	180f883a 	mov	r7,r3
 4406b08:	e1bfff17 	ldw	r6,-4(fp)
 4406b0c:	01408004 	movi	r5,512
 4406b10:	1009883a 	mov	r4,r2
 4406b14:	440f7840 	call	440f784 <vsnprintf>
 4406b18:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 4406b1c:	e0bf7e04 	addi	r2,fp,-520
 4406b20:	1009883a 	mov	r4,r2
 4406b24:	4406aa00 	call	4406aa0 <debug_output>

    return rc;    
 4406b28:	e0bf7d17 	ldw	r2,-524(fp)
}
 4406b2c:	e037883a 	mov	sp,fp
 4406b30:	dfc00117 	ldw	ra,4(sp)
 4406b34:	df000017 	ldw	fp,0(sp)
 4406b38:	dec00504 	addi	sp,sp,20
 4406b3c:	f800283a 	ret

04406b40 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 4406b40:	defff704 	addi	sp,sp,-36
 4406b44:	dfc00815 	stw	ra,32(sp)
 4406b48:	df000715 	stw	fp,28(sp)
 4406b4c:	df000704 	addi	fp,sp,28
 4406b50:	e13ffe15 	stw	r4,-8(fp)
 4406b54:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4406b58:	e03ff915 	stw	zero,-28(fp)
 4406b5c:	00001106 	br	4406ba4 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 4406b60:	e0bff917 	ldw	r2,-28(fp)
 4406b64:	e0fffe17 	ldw	r3,-8(fp)
 4406b68:	1885883a 	add	r2,r3,r2
 4406b6c:	10800003 	ldbu	r2,0(r2)
 4406b70:	10c03fcc 	andi	r3,r2,255
 4406b74:	e0bffa04 	addi	r2,fp,-24
 4406b78:	180d883a 	mov	r6,r3
 4406b7c:	014110f4 	movhi	r5,1091
 4406b80:	2952de04 	addi	r5,r5,19320
 4406b84:	1009883a 	mov	r4,r2
 4406b88:	440b0580 	call	440b058 <sprintf>
        DEBUG((szText));
 4406b8c:	e0bffa04 	addi	r2,fp,-24
 4406b90:	1009883a 	mov	r4,r2
 4406b94:	4406ad40 	call	4406ad4 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4406b98:	e0bff917 	ldw	r2,-28(fp)
 4406b9c:	10800044 	addi	r2,r2,1
 4406ba0:	e0bff915 	stw	r2,-28(fp)
 4406ba4:	e0fff917 	ldw	r3,-28(fp)
 4406ba8:	e0bfff17 	ldw	r2,-4(fp)
 4406bac:	18bfec16 	blt	r3,r2,4406b60 <__reset+0xfb402b60>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 4406bb0:	e0bfff17 	ldw	r2,-4(fp)
}
 4406bb4:	e037883a 	mov	sp,fp
 4406bb8:	dfc00117 	ldw	ra,4(sp)
 4406bbc:	df000017 	ldw	fp,0(sp)
 4406bc0:	dec00204 	addi	sp,sp,8
 4406bc4:	f800283a 	ret

04406bc8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 4406bc8:	defff704 	addi	sp,sp,-36
 4406bcc:	dfc00815 	stw	ra,32(sp)
 4406bd0:	df000715 	stw	fp,28(sp)
 4406bd4:	df000704 	addi	fp,sp,28
 4406bd8:	e13ffe15 	stw	r4,-8(fp)
 4406bdc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4406be0:	e03ff915 	stw	zero,-28(fp)
 4406be4:	00001306 	br	4406c34 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 4406be8:	e0bff917 	ldw	r2,-28(fp)
 4406bec:	1085883a 	add	r2,r2,r2
 4406bf0:	1085883a 	add	r2,r2,r2
 4406bf4:	1007883a 	mov	r3,r2
 4406bf8:	e0bffe17 	ldw	r2,-8(fp)
 4406bfc:	10c5883a 	add	r2,r2,r3
 4406c00:	10c00017 	ldw	r3,0(r2)
 4406c04:	e0bffa04 	addi	r2,fp,-24
 4406c08:	180d883a 	mov	r6,r3
 4406c0c:	014110f4 	movhi	r5,1091
 4406c10:	2952e004 	addi	r5,r5,19328
 4406c14:	1009883a 	mov	r4,r2
 4406c18:	440b0580 	call	440b058 <sprintf>
        DEBUG((szText));
 4406c1c:	e0bffa04 	addi	r2,fp,-24
 4406c20:	1009883a 	mov	r4,r2
 4406c24:	4406ad40 	call	4406ad4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4406c28:	e0bff917 	ldw	r2,-28(fp)
 4406c2c:	10800044 	addi	r2,r2,1
 4406c30:	e0bff915 	stw	r2,-28(fp)
 4406c34:	e0fff917 	ldw	r3,-28(fp)
 4406c38:	e0bfff17 	ldw	r2,-4(fp)
 4406c3c:	18bfea16 	blt	r3,r2,4406be8 <__reset+0xfb402be8>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 4406c40:	e0bfff17 	ldw	r2,-4(fp)
}
 4406c44:	e037883a 	mov	sp,fp
 4406c48:	dfc00117 	ldw	ra,4(sp)
 4406c4c:	df000017 	ldw	fp,0(sp)
 4406c50:	dec00204 	addi	sp,sp,8
 4406c54:	f800283a 	ret

04406c58 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 4406c58:	defffb04 	addi	sp,sp,-20
 4406c5c:	dfc00415 	stw	ra,16(sp)
 4406c60:	df000315 	stw	fp,12(sp)
 4406c64:	df000304 	addi	fp,sp,12
 4406c68:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 4406c6c:	e0bfff17 	ldw	r2,-4(fp)
 4406c70:	10800144 	addi	r2,r2,5
 4406c74:	1085883a 	add	r2,r2,r2
 4406c78:	1085883a 	add	r2,r2,r2
 4406c7c:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 4406c80:	e0bffd17 	ldw	r2,-12(fp)
 4406c84:	1009883a 	mov	r4,r2
 4406c88:	440a3c80 	call	440a3c8 <malloc>
 4406c8c:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 4406c90:	e0bffd17 	ldw	r2,-12(fp)
 4406c94:	100d883a 	mov	r6,r2
 4406c98:	000b883a 	mov	r5,zero
 4406c9c:	e13ffe17 	ldw	r4,-8(fp)
 4406ca0:	440ad440 	call	440ad44 <memset>
    pQueue->num = nQueueNum;
 4406ca4:	e0ffff17 	ldw	r3,-4(fp)
 4406ca8:	e0bffe17 	ldw	r2,-8(fp)
 4406cac:	10c00015 	stw	r3,0(r2)
    return pQueue;
 4406cb0:	e0bffe17 	ldw	r2,-8(fp)
}
 4406cb4:	e037883a 	mov	sp,fp
 4406cb8:	dfc00117 	ldw	ra,4(sp)
 4406cbc:	df000017 	ldw	fp,0(sp)
 4406cc0:	dec00204 	addi	sp,sp,8
 4406cc4:	f800283a 	ret

04406cc8 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 4406cc8:	defffd04 	addi	sp,sp,-12
 4406ccc:	dfc00215 	stw	ra,8(sp)
 4406cd0:	df000115 	stw	fp,4(sp)
 4406cd4:	df000104 	addi	fp,sp,4
 4406cd8:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 4406cdc:	e13fff17 	ldw	r4,-4(fp)
 4406ce0:	440a3dc0 	call	440a3dc <free>
}
 4406ce4:	0001883a 	nop
 4406ce8:	e037883a 	mov	sp,fp
 4406cec:	dfc00117 	ldw	ra,4(sp)
 4406cf0:	df000017 	ldw	fp,0(sp)
 4406cf4:	dec00204 	addi	sp,sp,8
 4406cf8:	f800283a 	ret

04406cfc <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 4406cfc:	defffe04 	addi	sp,sp,-8
 4406d00:	df000115 	stw	fp,4(sp)
 4406d04:	df000104 	addi	fp,sp,4
 4406d08:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 4406d0c:	e0bfff17 	ldw	r2,-4(fp)
 4406d10:	10c00117 	ldw	r3,4(r2)
 4406d14:	e0bfff17 	ldw	r2,-4(fp)
 4406d18:	10800217 	ldw	r2,8(r2)
 4406d1c:	1880021e 	bne	r3,r2,4406d28 <QUEUE_IsEmpty+0x2c>
        return TRUE;
 4406d20:	00800044 	movi	r2,1
 4406d24:	00000106 	br	4406d2c <QUEUE_IsEmpty+0x30>
    return FALSE;
 4406d28:	0005883a 	mov	r2,zero
}
 4406d2c:	e037883a 	mov	sp,fp
 4406d30:	df000017 	ldw	fp,0(sp)
 4406d34:	dec00104 	addi	sp,sp,4
 4406d38:	f800283a 	ret

04406d3c <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 4406d3c:	defffd04 	addi	sp,sp,-12
 4406d40:	dfc00215 	stw	ra,8(sp)
 4406d44:	df000115 	stw	fp,4(sp)
 4406d48:	df000104 	addi	fp,sp,4
 4406d4c:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 4406d50:	e0bfff17 	ldw	r2,-4(fp)
 4406d54:	10800117 	ldw	r2,4(r2)
 4406d58:	10c00044 	addi	r3,r2,1
 4406d5c:	e0bfff17 	ldw	r2,-4(fp)
 4406d60:	10800017 	ldw	r2,0(r2)
 4406d64:	100b883a 	mov	r5,r2
 4406d68:	1809883a 	mov	r4,r3
 4406d6c:	4407f040 	call	4407f04 <__umodsi3>
 4406d70:	1007883a 	mov	r3,r2
 4406d74:	e0bfff17 	ldw	r2,-4(fp)
 4406d78:	10800217 	ldw	r2,8(r2)
 4406d7c:	1880021e 	bne	r3,r2,4406d88 <QUEUE_IsFull+0x4c>
        return TRUE;
 4406d80:	00800044 	movi	r2,1
 4406d84:	00000106 	br	4406d8c <QUEUE_IsFull+0x50>
    return FALSE;
 4406d88:	0005883a 	mov	r2,zero
}
 4406d8c:	e037883a 	mov	sp,fp
 4406d90:	dfc00117 	ldw	ra,4(sp)
 4406d94:	df000017 	ldw	fp,0(sp)
 4406d98:	dec00204 	addi	sp,sp,8
 4406d9c:	f800283a 	ret

04406da0 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 4406da0:	defffc04 	addi	sp,sp,-16
 4406da4:	dfc00315 	stw	ra,12(sp)
 4406da8:	df000215 	stw	fp,8(sp)
 4406dac:	df000204 	addi	fp,sp,8
 4406db0:	e13ffe15 	stw	r4,-8(fp)
 4406db4:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 4406db8:	e13ffe17 	ldw	r4,-8(fp)
 4406dbc:	4406d3c0 	call	4406d3c <QUEUE_IsFull>
 4406dc0:	10000226 	beq	r2,zero,4406dcc <QUEUE_Push+0x2c>
        return FALSE;
 4406dc4:	0005883a 	mov	r2,zero
 4406dc8:	00001506 	br	4406e20 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 4406dcc:	e0bffe17 	ldw	r2,-8(fp)
 4406dd0:	10800117 	ldw	r2,4(r2)
 4406dd4:	e0fffe17 	ldw	r3,-8(fp)
 4406dd8:	108000c4 	addi	r2,r2,3
 4406ddc:	1085883a 	add	r2,r2,r2
 4406de0:	1085883a 	add	r2,r2,r2
 4406de4:	1885883a 	add	r2,r3,r2
 4406de8:	e0ffff17 	ldw	r3,-4(fp)
 4406dec:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 4406df0:	e0bffe17 	ldw	r2,-8(fp)
 4406df4:	10800117 	ldw	r2,4(r2)
 4406df8:	10c00044 	addi	r3,r2,1
 4406dfc:	e0bffe17 	ldw	r2,-8(fp)
 4406e00:	10800017 	ldw	r2,0(r2)
 4406e04:	100b883a 	mov	r5,r2
 4406e08:	1809883a 	mov	r4,r3
 4406e0c:	4407f040 	call	4407f04 <__umodsi3>
 4406e10:	1007883a 	mov	r3,r2
 4406e14:	e0bffe17 	ldw	r2,-8(fp)
 4406e18:	10c00115 	stw	r3,4(r2)
    return TRUE;
 4406e1c:	00800044 	movi	r2,1
}
 4406e20:	e037883a 	mov	sp,fp
 4406e24:	dfc00117 	ldw	ra,4(sp)
 4406e28:	df000017 	ldw	fp,0(sp)
 4406e2c:	dec00204 	addi	sp,sp,8
 4406e30:	f800283a 	ret

04406e34 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 4406e34:	defffc04 	addi	sp,sp,-16
 4406e38:	dfc00315 	stw	ra,12(sp)
 4406e3c:	df000215 	stw	fp,8(sp)
 4406e40:	df000204 	addi	fp,sp,8
 4406e44:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 4406e48:	e13fff17 	ldw	r4,-4(fp)
 4406e4c:	4406cfc0 	call	4406cfc <QUEUE_IsEmpty>
 4406e50:	10000226 	beq	r2,zero,4406e5c <QUEUE_Pop+0x28>
        return 0;
 4406e54:	0005883a 	mov	r2,zero
 4406e58:	00001506 	br	4406eb0 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 4406e5c:	e0bfff17 	ldw	r2,-4(fp)
 4406e60:	10800217 	ldw	r2,8(r2)
 4406e64:	e0ffff17 	ldw	r3,-4(fp)
 4406e68:	108000c4 	addi	r2,r2,3
 4406e6c:	1085883a 	add	r2,r2,r2
 4406e70:	1085883a 	add	r2,r2,r2
 4406e74:	1885883a 	add	r2,r3,r2
 4406e78:	10800017 	ldw	r2,0(r2)
 4406e7c:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 4406e80:	e0bfff17 	ldw	r2,-4(fp)
 4406e84:	10800217 	ldw	r2,8(r2)
 4406e88:	10c00044 	addi	r3,r2,1
 4406e8c:	e0bfff17 	ldw	r2,-4(fp)
 4406e90:	10800017 	ldw	r2,0(r2)
 4406e94:	100b883a 	mov	r5,r2
 4406e98:	1809883a 	mov	r4,r3
 4406e9c:	4407f040 	call	4407f04 <__umodsi3>
 4406ea0:	1007883a 	mov	r3,r2
 4406ea4:	e0bfff17 	ldw	r2,-4(fp)
 4406ea8:	10c00215 	stw	r3,8(r2)
    return data32;
 4406eac:	e0bffe17 	ldw	r2,-8(fp)
}
 4406eb0:	e037883a 	mov	sp,fp
 4406eb4:	dfc00117 	ldw	ra,4(sp)
 4406eb8:	df000017 	ldw	fp,0(sp)
 4406ebc:	dec00204 	addi	sp,sp,8
 4406ec0:	f800283a 	ret

04406ec4 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 4406ec4:	defffe04 	addi	sp,sp,-8
 4406ec8:	df000115 	stw	fp,4(sp)
 4406ecc:	df000104 	addi	fp,sp,4
 4406ed0:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 4406ed4:	e0bfff17 	ldw	r2,-4(fp)
 4406ed8:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 4406edc:	e0bfff17 	ldw	r2,-4(fp)
 4406ee0:	10000215 	stw	zero,8(r2)
}
 4406ee4:	0001883a 	nop
 4406ee8:	e037883a 	mov	sp,fp
 4406eec:	df000017 	ldw	fp,0(sp)
 4406ef0:	dec00104 	addi	sp,sp,4
 4406ef4:	f800283a 	ret

04406ef8 <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
 4406ef8:	defff804 	addi	sp,sp,-32
 4406efc:	dfc00715 	stw	ra,28(sp)
 4406f00:	df000615 	stw	fp,24(sp)
 4406f04:	df000604 	addi	fp,sp,24
 4406f08:	e13ffd15 	stw	r4,-12(fp)
 4406f0c:	e17ffe15 	stw	r5,-8(fp)
 4406f10:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
 4406f14:	00800044 	movi	r2,1
 4406f18:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
 4406f1c:	01001804 	movi	r4,96
 4406f20:	440a3c80 	call	440a3c8 <malloc>
 4406f24:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
 4406f28:	e0bffc17 	ldw	r2,-16(fp)
 4406f2c:	1000021e 	bne	r2,zero,4406f38 <Touch_Init+0x40>
        return p;
 4406f30:	e0bffc17 	ldw	r2,-16(fp)
 4406f34:	00004806 	br	4407058 <Touch_Init+0x160>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
 4406f38:	01801804 	movi	r6,96
 4406f3c:	000b883a 	mov	r5,zero
 4406f40:	e13ffc17 	ldw	r4,-16(fp)
 4406f44:	440ad440 	call	440ad44 <memset>
    p->spi_base = spi_base;
 4406f48:	e0bffc17 	ldw	r2,-16(fp)
 4406f4c:	e0fffd17 	ldw	r3,-12(fp)
 4406f50:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
 4406f54:	e0bffc17 	ldw	r2,-16(fp)
 4406f58:	e0fffe17 	ldw	r3,-8(fp)
 4406f5c:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
 4406f60:	e0bffc17 	ldw	r2,-16(fp)
 4406f64:	00c00044 	movi	r3,1
 4406f68:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
 4406f6c:	e0bffc17 	ldw	r2,-16(fp)
 4406f70:	e0ffff17 	ldw	r3,-4(fp)
 4406f74:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4406f78:	00811134 	movhi	r2,1092
 4406f7c:	10af1804 	addi	r2,r2,-17312
 4406f80:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
 4406f84:	01400f04 	movi	r5,60
 4406f88:	1009883a 	mov	r4,r2
 4406f8c:	4407ea00 	call	4407ea0 <__udivsi3>
 4406f90:	1007883a 	mov	r3,r2
 4406f94:	e0bffc17 	ldw	r2,-16(fp)
 4406f98:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
 4406f9c:	e13ffc17 	ldw	r4,-16(fp)
 4406fa0:	440734c0 	call	440734c <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
 4406fa4:	e0bffc17 	ldw	r2,-16(fp)
 4406fa8:	10800117 	ldw	r2,4(r2)
 4406fac:	10800204 	addi	r2,r2,8
 4406fb0:	1007883a 	mov	r3,r2
 4406fb4:	e0bffc17 	ldw	r2,-16(fp)
 4406fb8:	10800317 	ldw	r2,12(r2)
 4406fbc:	18800035 	stwio	r2,0(r3)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
 4406fc0:	e0bffc17 	ldw	r2,-16(fp)
 4406fc4:	10800117 	ldw	r2,4(r2)
 4406fc8:	10800304 	addi	r2,r2,12
 4406fcc:	0007883a 	mov	r3,zero
 4406fd0:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
 4406fd4:	e0bffc17 	ldw	r2,-16(fp)
 4406fd8:	10800217 	ldw	r2,8(r2)
 4406fdc:	d8000015 	stw	zero,0(sp)
 4406fe0:	e1fffc17 	ldw	r7,-16(fp)
 4406fe4:	01811034 	movhi	r6,1088
 4406fe8:	319c9704 	addi	r6,r6,29276
 4406fec:	100b883a 	mov	r5,r2
 4406ff0:	0009883a 	mov	r4,zero
 4406ff4:	44182740 	call	4418274 <alt_ic_isr_register>
 4406ff8:	10000126 	beq	r2,zero,4407000 <Touch_Init+0x108>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
 4406ffc:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
 4407000:	e0bffb17 	ldw	r2,-20(fp)
 4407004:	10000c26 	beq	r2,zero,4407038 <Touch_Init+0x140>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
 4407008:	e0bffc17 	ldw	r2,-16(fp)
 440700c:	10c01004 	addi	r3,r2,64
 4407010:	e0bffc17 	ldw	r2,-16(fp)
 4407014:	10801617 	ldw	r2,88(r2)
 4407018:	e1fffc17 	ldw	r7,-16(fp)
 440701c:	01811034 	movhi	r6,1088
 4407020:	319e0704 	addi	r6,r6,30748
 4407024:	100b883a 	mov	r5,r2
 4407028:	1809883a 	mov	r4,r3
 440702c:	4417ee80 	call	4417ee8 <alt_alarm_start>
 4407030:	10000126 	beq	r2,zero,4407038 <Touch_Init+0x140>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
 4407034:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
 4407038:	e0bffb17 	ldw	r2,-20(fp)
 440703c:	1000051e 	bne	r2,zero,4407054 <Touch_Init+0x15c>
 4407040:	e0bffc17 	ldw	r2,-16(fp)
 4407044:	10000326 	beq	r2,zero,4407054 <Touch_Init+0x15c>
        free(p);
 4407048:	e13ffc17 	ldw	r4,-16(fp)
 440704c:	440a3dc0 	call	440a3dc <free>
        p = NULL;
 4407050:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
 4407054:	e0bffc17 	ldw	r2,-16(fp)
    

}
 4407058:	e037883a 	mov	sp,fp
 440705c:	dfc00117 	ldw	ra,4(sp)
 4407060:	df000017 	ldw	fp,0(sp)
 4407064:	dec00204 	addi	sp,sp,8
 4407068:	f800283a 	ret

0440706c <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
 440706c:	defffc04 	addi	sp,sp,-16
 4407070:	dfc00315 	stw	ra,12(sp)
 4407074:	df000215 	stw	fp,8(sp)
 4407078:	df000204 	addi	fp,sp,8
 440707c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 4407080:	e0bfff17 	ldw	r2,-4(fp)
 4407084:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
 4407088:	e0bffe17 	ldw	r2,-8(fp)
 440708c:	10000c26 	beq	r2,zero,44070c0 <Touch_UnInit+0x54>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
 4407090:	e0bffe17 	ldw	r2,-8(fp)
 4407094:	10801004 	addi	r2,r2,64
 4407098:	1009883a 	mov	r4,r2
 440709c:	4418b6c0 	call	4418b6c <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
 44070a0:	e0bffe17 	ldw	r2,-8(fp)
 44070a4:	10800117 	ldw	r2,4(r2)
 44070a8:	10800204 	addi	r2,r2,8
 44070ac:	0007883a 	mov	r3,zero
 44070b0:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
 44070b4:	e13ffe17 	ldw	r4,-8(fp)
 44070b8:	440a3dc0 	call	440a3dc <free>
 44070bc:	00000106 	br	44070c4 <Touch_UnInit+0x58>

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
    if (!p)
        return;
 44070c0:	0001883a 	nop
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
    
    // zero varialbe
    free(p);
}
 44070c4:	e037883a 	mov	sp,fp
 44070c8:	dfc00117 	ldw	ra,4(sp)
 44070cc:	df000017 	ldw	fp,0(sp)
 44070d0:	dec00204 	addi	sp,sp,8
 44070d4:	f800283a 	ret

044070d8 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
 44070d8:	defffc04 	addi	sp,sp,-16
 44070dc:	dfc00315 	stw	ra,12(sp)
 44070e0:	df000215 	stw	fp,8(sp)
 44070e4:	df000204 	addi	fp,sp,8
 44070e8:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 44070ec:	e0bfff17 	ldw	r2,-4(fp)
 44070f0:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
 44070f4:	e13ffe17 	ldw	r4,-8(fp)
 44070f8:	44072d80 	call	44072d8 <touch_empty_fifo>
}
 44070fc:	0001883a 	nop
 4407100:	e037883a 	mov	sp,fp
 4407104:	dfc00117 	ldw	ra,4(sp)
 4407108:	df000017 	ldw	fp,0(sp)
 440710c:	dec00204 	addi	sp,sp,8
 4407110:	f800283a 	ret

04407114 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
 4407114:	defff904 	addi	sp,sp,-28
 4407118:	dfc00615 	stw	ra,24(sp)
 440711c:	df000515 	stw	fp,20(sp)
 4407120:	dc000415 	stw	r16,16(sp)
 4407124:	df000504 	addi	fp,sp,20
 4407128:	e13ffc15 	stw	r4,-16(fp)
 440712c:	e17ffd15 	stw	r5,-12(fp)
 4407130:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 4407134:	e0bffc17 	ldw	r2,-16(fp)
 4407138:	e0bffb15 	stw	r2,-20(fp)
    if (!p)
 440713c:	e0bffb17 	ldw	r2,-20(fp)
 4407140:	1000021e 	bne	r2,zero,440714c <Touch_GetXY+0x38>
        return FALSE;    
 4407144:	0005883a 	mov	r2,zero
 4407148:	00003e06 	br	4407244 <Touch_GetXY+0x130>
    
    if (p->fifo_front == p->fifo_rear){
 440714c:	e0bffb17 	ldw	r2,-20(fp)
 4407150:	10c0040b 	ldhu	r3,16(r2)
 4407154:	e0bffb17 	ldw	r2,-20(fp)
 4407158:	1080048b 	ldhu	r2,18(r2)
 440715c:	18ffffcc 	andi	r3,r3,65535
 4407160:	10bfffcc 	andi	r2,r2,65535
 4407164:	1880021e 	bne	r3,r2,4407170 <Touch_GetXY+0x5c>
        // empty
        return FALSE;
 4407168:	0005883a 	mov	r2,zero
 440716c:	00003506 	br	4407244 <Touch_GetXY+0x130>
    }
    *x = p->fifo_x[p->fifo_rear];
 4407170:	e0bffb17 	ldw	r2,-20(fp)
 4407174:	1080048b 	ldhu	r2,18(r2)
 4407178:	10bfffcc 	andi	r2,r2,65535
 440717c:	e0fffb17 	ldw	r3,-20(fp)
 4407180:	10800284 	addi	r2,r2,10
 4407184:	1085883a 	add	r2,r2,r2
 4407188:	1885883a 	add	r2,r3,r2
 440718c:	1080000b 	ldhu	r2,0(r2)
 4407190:	10ffffcc 	andi	r3,r2,65535
 4407194:	e0bffd17 	ldw	r2,-12(fp)
 4407198:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
 440719c:	e0bffb17 	ldw	r2,-20(fp)
 44071a0:	1080048b 	ldhu	r2,18(r2)
 44071a4:	10bfffcc 	andi	r2,r2,65535
 44071a8:	e0fffb17 	ldw	r3,-20(fp)
 44071ac:	10800504 	addi	r2,r2,20
 44071b0:	1085883a 	add	r2,r2,r2
 44071b4:	1885883a 	add	r2,r3,r2
 44071b8:	1080000b 	ldhu	r2,0(r2)
 44071bc:	10ffffcc 	andi	r3,r2,65535
 44071c0:	e0bffe17 	ldw	r2,-8(fp)
 44071c4:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
 44071c8:	e0bffb17 	ldw	r2,-20(fp)
 44071cc:	1080048b 	ldhu	r2,18(r2)
 44071d0:	10800044 	addi	r2,r2,1
 44071d4:	1007883a 	mov	r3,r2
 44071d8:	e0bffb17 	ldw	r2,-20(fp)
 44071dc:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
 44071e0:	e0bffb17 	ldw	r2,-20(fp)
 44071e4:	1080048b 	ldhu	r2,18(r2)
 44071e8:	10bfffcc 	andi	r2,r2,65535
 44071ec:	01400284 	movi	r5,10
 44071f0:	1009883a 	mov	r4,r2
 44071f4:	4407f040 	call	4407f04 <__umodsi3>
 44071f8:	1007883a 	mov	r3,r2
 44071fc:	e0bffb17 	ldw	r2,-20(fp)
 4407200:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
 4407204:	e17ffe17 	ldw	r5,-8(fp)
 4407208:	e13ffd17 	ldw	r4,-12(fp)
 440720c:	44078940 	call	4407894 <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4407210:	00811134 	movhi	r2,1092
 4407214:	10af1904 	addi	r2,r2,-17308
 4407218:	14000017 	ldw	r16,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 440721c:	00811134 	movhi	r2,1092
 4407220:	10af1804 	addi	r2,r2,-17312
 4407224:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 4407228:	01400f04 	movi	r5,60
 440722c:	1009883a 	mov	r4,r2
 4407230:	4407ea00 	call	4407ea0 <__udivsi3>
 4407234:	8087883a 	add	r3,r16,r2
 4407238:	e0bffb17 	ldw	r2,-20(fp)
 440723c:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
 4407240:	00800044 	movi	r2,1
}
 4407244:	e6ffff04 	addi	sp,fp,-4
 4407248:	dfc00217 	ldw	ra,8(sp)
 440724c:	df000117 	ldw	fp,4(sp)
 4407250:	dc000017 	ldw	r16,0(sp)
 4407254:	dec00304 	addi	sp,sp,12
 4407258:	f800283a 	ret

0440725c <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
 440725c:	defffb04 	addi	sp,sp,-20
 4407260:	dfc00415 	stw	ra,16(sp)
 4407264:	df000315 	stw	fp,12(sp)
 4407268:	df000304 	addi	fp,sp,12
 440726c:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 4407270:	e0bfff17 	ldw	r2,-4(fp)
 4407274:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4407278:	014000c4 	movi	r5,3
 440727c:	0009883a 	mov	r4,zero
 4407280:	44183640 	call	4418364 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
 4407284:	e0bffd17 	ldw	r2,-12(fp)
 4407288:	10800117 	ldw	r2,4(r2)
 440728c:	10800304 	addi	r2,r2,12
 4407290:	10800037 	ldwio	r2,0(r2)
 4407294:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
 4407298:	0100fa04 	movi	r4,1000
 440729c:	4418d100 	call	4418d10 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
 44072a0:	e0bffd17 	ldw	r2,-12(fp)
 44072a4:	10800117 	ldw	r2,4(r2)
 44072a8:	10800304 	addi	r2,r2,12
 44072ac:	0007883a 	mov	r3,zero
 44072b0:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 44072b4:	014000c4 	movi	r5,3
 44072b8:	0009883a 	mov	r4,zero
 44072bc:	44182c40 	call	44182c4 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
 44072c0:	0001883a 	nop
 44072c4:	e037883a 	mov	sp,fp
 44072c8:	dfc00117 	ldw	ra,4(sp)
 44072cc:	df000017 	ldw	fp,0(sp)
 44072d0:	dec00204 	addi	sp,sp,8
 44072d4:	f800283a 	ret

044072d8 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
 44072d8:	defffe04 	addi	sp,sp,-8
 44072dc:	df000115 	stw	fp,4(sp)
 44072e0:	df000104 	addi	fp,sp,4
 44072e4:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
 44072e8:	e0bfff17 	ldw	r2,-4(fp)
 44072ec:	10c0040b 	ldhu	r3,16(r2)
 44072f0:	e0bfff17 	ldw	r2,-4(fp)
 44072f4:	10c0048d 	sth	r3,18(r2)
}
 44072f8:	0001883a 	nop
 44072fc:	e037883a 	mov	sp,fp
 4407300:	df000017 	ldw	fp,0(sp)
 4407304:	dec00104 	addi	sp,sp,4
 4407308:	f800283a 	ret

0440730c <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
 440730c:	defffd04 	addi	sp,sp,-12
 4407310:	df000215 	stw	fp,8(sp)
 4407314:	df000204 	addi	fp,sp,8
 4407318:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
 440731c:	e0bfff17 	ldw	r2,-4(fp)
 4407320:	10800117 	ldw	r2,4(r2)
 4407324:	10800037 	ldwio	r2,0(r2)
 4407328:	1080004c 	andi	r2,r2,1
 440732c:	1005003a 	cmpeq	r2,r2,zero
 4407330:	10803fcc 	andi	r2,r2,255
 4407334:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
 4407338:	e0bffe17 	ldw	r2,-8(fp)
}
 440733c:	e037883a 	mov	sp,fp
 4407340:	df000017 	ldw	fp,0(sp)
 4407344:	dec00104 	addi	sp,sp,4
 4407348:	f800283a 	ret

0440734c <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
 440734c:	defff904 	addi	sp,sp,-28
 4407350:	dfc00615 	stw	ra,24(sp)
 4407354:	df000515 	stw	fp,20(sp)
 4407358:	df000504 	addi	fp,sp,20
 440735c:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
 4407360:	00bfe084 	movi	r2,-126
 4407364:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4407368:	00bff484 	movi	r2,-46
 440736c:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4407370:	e0bfff17 	ldw	r2,-4(fp)
 4407374:	10c00017 	ldw	r3,0(r2)
 4407378:	00800044 	movi	r2,1
 440737c:	d8800215 	stw	r2,8(sp)
 4407380:	d8000115 	stw	zero,4(sp)
 4407384:	d8000015 	stw	zero,0(sp)
 4407388:	e1fffe04 	addi	r7,fp,-8
 440738c:	01800044 	movi	r6,1
 4407390:	000b883a 	mov	r5,zero
 4407394:	1809883a 	mov	r4,r3
 4407398:	44199d80 	call	44199d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 440739c:	e0bfff17 	ldw	r2,-4(fp)
 44073a0:	10c00017 	ldw	r3,0(r2)
 44073a4:	00800044 	movi	r2,1
 44073a8:	d8800215 	stw	r2,8(sp)
 44073ac:	e0bffe84 	addi	r2,fp,-6
 44073b0:	d8800115 	stw	r2,4(sp)
 44073b4:	00800044 	movi	r2,1
 44073b8:	d8800015 	stw	r2,0(sp)
 44073bc:	000f883a 	mov	r7,zero
 44073c0:	000d883a 	mov	r6,zero
 44073c4:	000b883a 	mov	r5,zero
 44073c8:	1809883a 	mov	r4,r3
 44073cc:	44199d80 	call	44199d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 44073d0:	e0bfff17 	ldw	r2,-4(fp)
 44073d4:	10c00017 	ldw	r3,0(r2)
 44073d8:	00800084 	movi	r2,2
 44073dc:	d8800215 	stw	r2,8(sp)
 44073e0:	e0bffe84 	addi	r2,fp,-6
 44073e4:	d8800115 	stw	r2,4(sp)
 44073e8:	00800044 	movi	r2,1
 44073ec:	d8800015 	stw	r2,0(sp)
 44073f0:	000f883a 	mov	r7,zero
 44073f4:	000d883a 	mov	r6,zero
 44073f8:	000b883a 	mov	r5,zero
 44073fc:	1809883a 	mov	r4,r3
 4407400:	44199d80 	call	44199d8 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4407404:	e0bfff17 	ldw	r2,-4(fp)
 4407408:	10c00017 	ldw	r3,0(r2)
 440740c:	e13ffe44 	addi	r4,fp,-7
 4407410:	00800044 	movi	r2,1
 4407414:	d8800215 	stw	r2,8(sp)
 4407418:	d8000115 	stw	zero,4(sp)
 440741c:	d8000015 	stw	zero,0(sp)
 4407420:	200f883a 	mov	r7,r4
 4407424:	01800044 	movi	r6,1
 4407428:	000b883a 	mov	r5,zero
 440742c:	1809883a 	mov	r4,r3
 4407430:	44199d80 	call	44199d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 4407434:	e0bfff17 	ldw	r2,-4(fp)
 4407438:	10c00017 	ldw	r3,0(r2)
 440743c:	00800044 	movi	r2,1
 4407440:	d8800215 	stw	r2,8(sp)
 4407444:	e0bffe84 	addi	r2,fp,-6
 4407448:	d8800115 	stw	r2,4(sp)
 440744c:	00800044 	movi	r2,1
 4407450:	d8800015 	stw	r2,0(sp)
 4407454:	000f883a 	mov	r7,zero
 4407458:	000d883a 	mov	r6,zero
 440745c:	000b883a 	mov	r5,zero
 4407460:	1809883a 	mov	r4,r3
 4407464:	44199d80 	call	44199d8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4407468:	e0bfff17 	ldw	r2,-4(fp)
 440746c:	10c00017 	ldw	r3,0(r2)
 4407470:	00800084 	movi	r2,2
 4407474:	d8800215 	stw	r2,8(sp)
 4407478:	e0bffe84 	addi	r2,fp,-6
 440747c:	d8800115 	stw	r2,4(sp)
 4407480:	00800044 	movi	r2,1
 4407484:	d8800015 	stw	r2,0(sp)
 4407488:	000f883a 	mov	r7,zero
 440748c:	000d883a 	mov	r6,zero
 4407490:	000b883a 	mov	r5,zero
 4407494:	1809883a 	mov	r4,r3
 4407498:	44199d80 	call	44199d8 <alt_avalon_spi_command>
}
 440749c:	0001883a 	nop
 44074a0:	e037883a 	mov	sp,fp
 44074a4:	dfc00117 	ldw	ra,4(sp)
 44074a8:	df000017 	ldw	fp,0(sp)
 44074ac:	dec00204 	addi	sp,sp,8
 44074b0:	f800283a 	ret

044074b4 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
 44074b4:	defffd04 	addi	sp,sp,-12
 44074b8:	dfc00215 	stw	ra,8(sp)
 44074bc:	df000115 	stw	fp,4(sp)
 44074c0:	df000104 	addi	fp,sp,4
 44074c4:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
 44074c8:	e13fff17 	ldw	r4,-4(fp)
 44074cc:	440734c0 	call	440734c <touch_enable_penirq>
}
 44074d0:	0001883a 	nop
 44074d4:	e037883a 	mov	sp,fp
 44074d8:	dfc00117 	ldw	ra,4(sp)
 44074dc:	df000017 	ldw	fp,0(sp)
 44074e0:	dec00204 	addi	sp,sp,8
 44074e4:	f800283a 	ret

044074e8 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
 44074e8:	defff604 	addi	sp,sp,-40
 44074ec:	dfc00915 	stw	ra,36(sp)
 44074f0:	df000815 	stw	fp,32(sp)
 44074f4:	df000804 	addi	fp,sp,32
 44074f8:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
 44074fc:	00bfe484 	movi	r2,-110
 4407500:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4407504:	00bff484 	movi	r2,-46
 4407508:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 440750c:	e0bfff17 	ldw	r2,-4(fp)
 4407510:	10c00017 	ldw	r3,0(r2)
 4407514:	e13ffe04 	addi	r4,fp,-8
 4407518:	00800044 	movi	r2,1
 440751c:	d8800215 	stw	r2,8(sp)
 4407520:	d8000115 	stw	zero,4(sp)
 4407524:	d8000015 	stw	zero,0(sp)
 4407528:	200f883a 	mov	r7,r4
 440752c:	01800044 	movi	r6,1
 4407530:	000b883a 	mov	r5,zero
 4407534:	1809883a 	mov	r4,r3
 4407538:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 440753c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4407540:	e0bfff17 	ldw	r2,-4(fp)
 4407544:	10c00017 	ldw	r3,0(r2)
 4407548:	00800044 	movi	r2,1
 440754c:	d8800215 	stw	r2,8(sp)
 4407550:	e0bffe84 	addi	r2,fp,-6
 4407554:	d8800115 	stw	r2,4(sp)
 4407558:	00800044 	movi	r2,1
 440755c:	d8800015 	stw	r2,0(sp)
 4407560:	000f883a 	mov	r7,zero
 4407564:	000d883a 	mov	r6,zero
 4407568:	000b883a 	mov	r5,zero
 440756c:	1809883a 	mov	r4,r3
 4407570:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 4407574:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 4407578:	e0bffb17 	ldw	r2,-20(fp)
 440757c:	10800060 	cmpeqi	r2,r2,1
 4407580:	10009826 	beq	r2,zero,44077e4 <touch_get_xy+0x2fc>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4407584:	e0bfff17 	ldw	r2,-4(fp)
 4407588:	10c00017 	ldw	r3,0(r2)
 440758c:	00800084 	movi	r2,2
 4407590:	d8800215 	stw	r2,8(sp)
 4407594:	e0bffec4 	addi	r2,fp,-5
 4407598:	d8800115 	stw	r2,4(sp)
 440759c:	00800044 	movi	r2,1
 44075a0:	d8800015 	stw	r2,0(sp)
 44075a4:	000f883a 	mov	r7,zero
 44075a8:	000d883a 	mov	r6,zero
 44075ac:	000b883a 	mov	r5,zero
 44075b0:	1809883a 	mov	r4,r3
 44075b4:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 44075b8:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 44075bc:	e0bffb17 	ldw	r2,-20(fp)
 44075c0:	10800060 	cmpeqi	r2,r2,1
 44075c4:	10008926 	beq	r2,zero,44077ec <touch_get_xy+0x304>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
 44075c8:	e0bffe83 	ldbu	r2,-6(fp)
 44075cc:	10803fcc 	andi	r2,r2,255
 44075d0:	1004923a 	slli	r2,r2,8
 44075d4:	1007883a 	mov	r3,r2
 44075d8:	e0bffec3 	ldbu	r2,-5(fp)
 44075dc:	10803fcc 	andi	r2,r2,255
 44075e0:	1884b03a 	or	r2,r3,r2
 44075e4:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 44075e8:	e0bfff17 	ldw	r2,-4(fp)
 44075ec:	10c00017 	ldw	r3,0(r2)
 44075f0:	e13ffe44 	addi	r4,fp,-7
 44075f4:	00800044 	movi	r2,1
 44075f8:	d8800215 	stw	r2,8(sp)
 44075fc:	d8000115 	stw	zero,4(sp)
 4407600:	d8000015 	stw	zero,0(sp)
 4407604:	200f883a 	mov	r7,r4
 4407608:	01800044 	movi	r6,1
 440760c:	000b883a 	mov	r5,zero
 4407610:	1809883a 	mov	r4,r3
 4407614:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 4407618:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 440761c:	e0bfff17 	ldw	r2,-4(fp)
 4407620:	10c00017 	ldw	r3,0(r2)
 4407624:	00800044 	movi	r2,1
 4407628:	d8800215 	stw	r2,8(sp)
 440762c:	e0bffe84 	addi	r2,fp,-6
 4407630:	d8800115 	stw	r2,4(sp)
 4407634:	00800044 	movi	r2,1
 4407638:	d8800015 	stw	r2,0(sp)
 440763c:	000f883a 	mov	r7,zero
 4407640:	000d883a 	mov	r6,zero
 4407644:	000b883a 	mov	r5,zero
 4407648:	1809883a 	mov	r4,r3
 440764c:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 4407650:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 4407654:	e0bffb17 	ldw	r2,-20(fp)
 4407658:	10800060 	cmpeqi	r2,r2,1
 440765c:	10006526 	beq	r2,zero,44077f4 <touch_get_xy+0x30c>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4407660:	e0bfff17 	ldw	r2,-4(fp)
 4407664:	10c00017 	ldw	r3,0(r2)
 4407668:	00800084 	movi	r2,2
 440766c:	d8800215 	stw	r2,8(sp)
 4407670:	e0bffec4 	addi	r2,fp,-5
 4407674:	d8800115 	stw	r2,4(sp)
 4407678:	00800044 	movi	r2,1
 440767c:	d8800015 	stw	r2,0(sp)
 4407680:	000f883a 	mov	r7,zero
 4407684:	000d883a 	mov	r6,zero
 4407688:	000b883a 	mov	r5,zero
 440768c:	1809883a 	mov	r4,r3
 4407690:	44199d80 	call	44199d8 <alt_avalon_spi_command>
 4407694:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 4407698:	e0bffb17 	ldw	r2,-20(fp)
 440769c:	10800060 	cmpeqi	r2,r2,1
 44076a0:	10005626 	beq	r2,zero,44077fc <touch_get_xy+0x314>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
 44076a4:	e0bffe83 	ldbu	r2,-6(fp)
 44076a8:	10803fcc 	andi	r2,r2,255
 44076ac:	1004923a 	slli	r2,r2,8
 44076b0:	1007883a 	mov	r3,r2
 44076b4:	e0bffec3 	ldbu	r2,-5(fp)
 44076b8:	10803fcc 	andi	r2,r2,255
 44076bc:	1884b03a 	or	r2,r3,r2
 44076c0:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
 44076c4:	e13fff17 	ldw	r4,-4(fp)
 44076c8:	440730c0 	call	440730c <touch_is_pen_pressed>
 44076cc:	10004d26 	beq	r2,zero,4407804 <touch_get_xy+0x31c>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
 44076d0:	e0bffc0b 	ldhu	r2,-16(fp)
 44076d4:	1004d0fa 	srli	r2,r2,3
 44076d8:	1083ffcc 	andi	r2,r2,4095
 44076dc:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 44076e0:	e0bffc8b 	ldhu	r2,-14(fp)
 44076e4:	1004d0fa 	srli	r2,r2,3
 44076e8:	1083ffcc 	andi	r2,r2,4095
 44076ec:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
 44076f0:	e0bfff17 	ldw	r2,-4(fp)
 44076f4:	1080040b 	ldhu	r2,16(r2)
 44076f8:	10bfffcc 	andi	r2,r2,65535
 44076fc:	10800044 	addi	r2,r2,1
 4407700:	01400284 	movi	r5,10
 4407704:	1009883a 	mov	r4,r2
 4407708:	4407e2c0 	call	4407e2c <__modsi3>
 440770c:	1007883a 	mov	r3,r2
 4407710:	e0bfff17 	ldw	r2,-4(fp)
 4407714:	1080048b 	ldhu	r2,18(r2)
 4407718:	10bfffcc 	andi	r2,r2,65535
 440771c:	18800f1e 	bne	r3,r2,440775c <touch_get_xy+0x274>
        // full, pop an old one
        p->fifo_rear++;
 4407720:	e0bfff17 	ldw	r2,-4(fp)
 4407724:	1080048b 	ldhu	r2,18(r2)
 4407728:	10800044 	addi	r2,r2,1
 440772c:	1007883a 	mov	r3,r2
 4407730:	e0bfff17 	ldw	r2,-4(fp)
 4407734:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
 4407738:	e0bfff17 	ldw	r2,-4(fp)
 440773c:	1080048b 	ldhu	r2,18(r2)
 4407740:	10bfffcc 	andi	r2,r2,65535
 4407744:	01400284 	movi	r5,10
 4407748:	1009883a 	mov	r4,r2
 440774c:	4407f040 	call	4407f04 <__umodsi3>
 4407750:	1007883a 	mov	r3,r2
 4407754:	e0bfff17 	ldw	r2,-4(fp)
 4407758:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
 440775c:	e0bfff17 	ldw	r2,-4(fp)
 4407760:	1080040b 	ldhu	r2,16(r2)
 4407764:	10bfffcc 	andi	r2,r2,65535
 4407768:	e0ffff17 	ldw	r3,-4(fp)
 440776c:	10800284 	addi	r2,r2,10
 4407770:	1085883a 	add	r2,r2,r2
 4407774:	1885883a 	add	r2,r3,r2
 4407778:	e0fffd0b 	ldhu	r3,-12(fp)
 440777c:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
 4407780:	e0bfff17 	ldw	r2,-4(fp)
 4407784:	1080040b 	ldhu	r2,16(r2)
 4407788:	10bfffcc 	andi	r2,r2,65535
 440778c:	e0ffff17 	ldw	r3,-4(fp)
 4407790:	10800504 	addi	r2,r2,20
 4407794:	1085883a 	add	r2,r2,r2
 4407798:	1885883a 	add	r2,r3,r2
 440779c:	e0fffd8b 	ldhu	r3,-10(fp)
 44077a0:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
 44077a4:	e0bfff17 	ldw	r2,-4(fp)
 44077a8:	1080040b 	ldhu	r2,16(r2)
 44077ac:	10800044 	addi	r2,r2,1
 44077b0:	1007883a 	mov	r3,r2
 44077b4:	e0bfff17 	ldw	r2,-4(fp)
 44077b8:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
 44077bc:	e0bfff17 	ldw	r2,-4(fp)
 44077c0:	1080040b 	ldhu	r2,16(r2)
 44077c4:	10bfffcc 	andi	r2,r2,65535
 44077c8:	01400284 	movi	r5,10
 44077cc:	1009883a 	mov	r4,r2
 44077d0:	4407f040 	call	4407f04 <__umodsi3>
 44077d4:	1007883a 	mov	r3,r2
 44077d8:	e0bfff17 	ldw	r2,-4(fp)
 44077dc:	10c0040d 	sth	r3,16(r2)
 44077e0:	00000906 	br	4407808 <touch_get_xy+0x320>
    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
    if (result != sizeof(high_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 44077e4:	0001883a 	nop
 44077e8:	00000706 	br	4407808 <touch_get_xy+0x320>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
    if (result != sizeof(low_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 44077ec:	0001883a 	nop
 44077f0:	00000506 	br	4407808 <touch_get_xy+0x320>
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
    if (result != sizeof(high_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 44077f4:	0001883a 	nop
 44077f8:	00000306 	br	4407808 <touch_get_xy+0x320>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
    if (result != sizeof(low_byte)){
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
 44077fc:	0001883a 	nop
 4407800:	00000106 	br	4407808 <touch_get_xy+0x320>
    }  
    ResponseY = (high_byte << 8) | low_byte;        

    if (!touch_is_pen_pressed(p))
        return; // do not use this data    
 4407804:	0001883a 	nop
    p->fifo_x[p->fifo_front] = x;
    p->fifo_y[p->fifo_front] = y;    
    p->fifo_front++;
    p->fifo_front %= FIFO_SIZE;   
    
}
 4407808:	e037883a 	mov	sp,fp
 440780c:	dfc00117 	ldw	ra,4(sp)
 4407810:	df000017 	ldw	fp,0(sp)
 4407814:	dec00204 	addi	sp,sp,8
 4407818:	f800283a 	ret

0440781c <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
 440781c:	defffc04 	addi	sp,sp,-16
 4407820:	dfc00315 	stw	ra,12(sp)
 4407824:	df000215 	stw	fp,8(sp)
 4407828:	df000204 	addi	fp,sp,8
 440782c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 4407830:	e0bfff17 	ldw	r2,-4(fp)
 4407834:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
 4407838:	e13ffe17 	ldw	r4,-8(fp)
 440783c:	440730c0 	call	440730c <touch_is_pen_pressed>
 4407840:	10000926 	beq	r2,zero,4407868 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4407844:	00811134 	movhi	r2,1092
 4407848:	10af1904 	addi	r2,r2,-17308
 440784c:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
 4407850:	e0fffe17 	ldw	r3,-8(fp)
 4407854:	18c01717 	ldw	r3,92(r3)
 4407858:	1880072e 	bgeu	r3,r2,4407878 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
 440785c:	e13ffe17 	ldw	r4,-8(fp)
 4407860:	44074e80 	call	44074e8 <touch_get_xy>
 4407864:	00000406 	br	4407878 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
 4407868:	e13ffe17 	ldw	r4,-8(fp)
 440786c:	440734c0 	call	440734c <touch_enable_penirq>
         touch_clear_input(p);
 4407870:	e13ffe17 	ldw	r4,-8(fp)
 4407874:	44074b40 	call	44074b4 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
 4407878:	e0bffe17 	ldw	r2,-8(fp)
 440787c:	10801617 	ldw	r2,88(r2)
}
 4407880:	e037883a 	mov	sp,fp
 4407884:	dfc00117 	ldw	ra,4(sp)
 4407888:	df000017 	ldw	fp,0(sp)
 440788c:	dec00204 	addi	sp,sp,8
 4407890:	f800283a 	ret

04407894 <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
 4407894:	defff904 	addi	sp,sp,-28
 4407898:	dfc00615 	stw	ra,24(sp)
 440789c:	df000515 	stw	fp,20(sp)
 44078a0:	df000504 	addi	fp,sp,20
 44078a4:	e13ffe15 	stw	r4,-8(fp)
 44078a8:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
 44078ac:	00803204 	movi	r2,200
 44078b0:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
 44078b4:	e0bfff17 	ldw	r2,-4(fp)
 44078b8:	10800017 	ldw	r2,0(r2)
 44078bc:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
 44078c0:	e0bffe17 	ldw	r2,-8(fp)
 44078c4:	10800017 	ldw	r2,0(r2)
 44078c8:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
 44078cc:	e0bffd17 	ldw	r2,-12(fp)
 44078d0:	10803c24 	muli	r2,r2,240
 44078d4:	1000010e 	bge	r2,zero,44078dc <touch_xy_transform+0x48>
 44078d8:	1083ffc4 	addi	r2,r2,4095
 44078dc:	1005d33a 	srai	r2,r2,12
 44078e0:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
 44078e4:	00c40004 	movi	r3,4096
 44078e8:	e0bffc17 	ldw	r2,-16(fp)
 44078ec:	1887c83a 	sub	r3,r3,r2
 44078f0:	e0bffb17 	ldw	r2,-20(fp)
 44078f4:	1880040e 	bge	r3,r2,4407908 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
 44078f8:	00c40004 	movi	r3,4096
 44078fc:	e0bffc17 	ldw	r2,-16(fp)
 4407900:	1885c83a 	sub	r2,r3,r2
 4407904:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
 4407908:	e0bffb17 	ldw	r2,-20(fp)
 440790c:	1103ffe4 	muli	r4,r2,4095
 4407910:	00c40004 	movi	r3,4096
 4407914:	e0bffc17 	ldw	r2,-16(fp)
 4407918:	1885c83a 	sub	r2,r3,r2
 440791c:	100b883a 	mov	r5,r2
 4407920:	4407da80 	call	4407da8 <__divsi3>
 4407924:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
 4407928:	e0bffb17 	ldw	r2,-20(fp)
 440792c:	10805024 	muli	r2,r2,320
 4407930:	1000010e 	bge	r2,zero,4407938 <touch_xy_transform+0xa4>
 4407934:	1083ffc4 	addi	r2,r2,4095
 4407938:	1005d33a 	srai	r2,r2,12
 440793c:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
 4407940:	e0bffe17 	ldw	r2,-8(fp)
 4407944:	e0fffd17 	ldw	r3,-12(fp)
 4407948:	10c00015 	stw	r3,0(r2)
    *y = yy;    
 440794c:	e0bfff17 	ldw	r2,-4(fp)
 4407950:	e0fffb17 	ldw	r3,-20(fp)
 4407954:	10c00015 	stw	r3,0(r2)
    
}
 4407958:	0001883a 	nop
 440795c:	e037883a 	mov	sp,fp
 4407960:	dfc00117 	ldw	ra,4(sp)
 4407964:	df000017 	ldw	fp,0(sp)
 4407968:	dec00204 	addi	sp,sp,8
 440796c:	f800283a 	ret

04407970 <sqrt>:
 4407970:	defff104 	addi	sp,sp,-60
 4407974:	dd000d15 	stw	r20,52(sp)
 4407978:	05011134 	movhi	r20,1092
 440797c:	dcc00c15 	stw	r19,48(sp)
 4407980:	dc800b15 	stw	r18,44(sp)
 4407984:	dc400a15 	stw	r17,40(sp)
 4407988:	dc000915 	stw	r16,36(sp)
 440798c:	dfc00e15 	stw	ra,56(sp)
 4407990:	a5214e04 	addi	r20,r20,-31432
 4407994:	2027883a 	mov	r19,r4
 4407998:	2825883a 	mov	r18,r5
 440799c:	4407aa00 	call	4407aa0 <__ieee754_sqrt>
 44079a0:	1821883a 	mov	r16,r3
 44079a4:	a0c00017 	ldw	r3,0(r20)
 44079a8:	1023883a 	mov	r17,r2
 44079ac:	00bfffc4 	movi	r2,-1
 44079b0:	18800a26 	beq	r3,r2,44079dc <sqrt+0x6c>
 44079b4:	9809883a 	mov	r4,r19
 44079b8:	900b883a 	mov	r5,r18
 44079bc:	4407d2c0 	call	4407d2c <__fpclassifyd>
 44079c0:	10000626 	beq	r2,zero,44079dc <sqrt+0x6c>
 44079c4:	000d883a 	mov	r6,zero
 44079c8:	000f883a 	mov	r7,zero
 44079cc:	9809883a 	mov	r4,r19
 44079d0:	900b883a 	mov	r5,r18
 44079d4:	44090f00 	call	44090f0 <__ledf2>
 44079d8:	10000a16 	blt	r2,zero,4407a04 <sqrt+0x94>
 44079dc:	8805883a 	mov	r2,r17
 44079e0:	8007883a 	mov	r3,r16
 44079e4:	dfc00e17 	ldw	ra,56(sp)
 44079e8:	dd000d17 	ldw	r20,52(sp)
 44079ec:	dcc00c17 	ldw	r19,48(sp)
 44079f0:	dc800b17 	ldw	r18,44(sp)
 44079f4:	dc400a17 	ldw	r17,40(sp)
 44079f8:	dc000917 	ldw	r16,36(sp)
 44079fc:	dec00f04 	addi	sp,sp,60
 4407a00:	f800283a 	ret
 4407a04:	00800044 	movi	r2,1
 4407a08:	d8800015 	stw	r2,0(sp)
 4407a0c:	a4000017 	ldw	r16,0(r20)
 4407a10:	008110f4 	movhi	r2,1091
 4407a14:	1092e204 	addi	r2,r2,19336
 4407a18:	d8800115 	stw	r2,4(sp)
 4407a1c:	d8000815 	stw	zero,32(sp)
 4407a20:	dcc00415 	stw	r19,16(sp)
 4407a24:	dc800515 	stw	r18,20(sp)
 4407a28:	dcc00215 	stw	r19,8(sp)
 4407a2c:	dc800315 	stw	r18,12(sp)
 4407a30:	80000a1e 	bne	r16,zero,4407a5c <sqrt+0xec>
 4407a34:	d8000615 	stw	zero,24(sp)
 4407a38:	d8000715 	stw	zero,28(sp)
 4407a3c:	d809883a 	mov	r4,sp
 4407a40:	4407da00 	call	4407da0 <matherr>
 4407a44:	10000e26 	beq	r2,zero,4407a80 <sqrt+0x110>
 4407a48:	d8800817 	ldw	r2,32(sp)
 4407a4c:	1000101e 	bne	r2,zero,4407a90 <sqrt+0x120>
 4407a50:	d8800617 	ldw	r2,24(sp)
 4407a54:	d8c00717 	ldw	r3,28(sp)
 4407a58:	003fe206 	br	44079e4 <__reset+0xfb4039e4>
 4407a5c:	000d883a 	mov	r6,zero
 4407a60:	000f883a 	mov	r7,zero
 4407a64:	0009883a 	mov	r4,zero
 4407a68:	000b883a 	mov	r5,zero
 4407a6c:	44088080 	call	4408808 <__divdf3>
 4407a70:	d8800615 	stw	r2,24(sp)
 4407a74:	d8c00715 	stw	r3,28(sp)
 4407a78:	00800084 	movi	r2,2
 4407a7c:	80bfef1e 	bne	r16,r2,4407a3c <__reset+0xfb403a3c>
 4407a80:	440a3b80 	call	440a3b8 <__errno>
 4407a84:	00c00844 	movi	r3,33
 4407a88:	10c00015 	stw	r3,0(r2)
 4407a8c:	003fee06 	br	4407a48 <__reset+0xfb403a48>
 4407a90:	440a3b80 	call	440a3b8 <__errno>
 4407a94:	d8c00817 	ldw	r3,32(sp)
 4407a98:	10c00015 	stw	r3,0(r2)
 4407a9c:	003fec06 	br	4407a50 <__reset+0xfb403a50>

04407aa0 <__ieee754_sqrt>:
 4407aa0:	defffd04 	addi	sp,sp,-12
 4407aa4:	dc400115 	stw	r17,4(sp)
 4407aa8:	dc000015 	stw	r16,0(sp)
 4407aac:	dfc00215 	stw	ra,8(sp)
 4407ab0:	28dffc2c 	andhi	r3,r5,32752
 4407ab4:	009ffc34 	movhi	r2,32752
 4407ab8:	2821883a 	mov	r16,r5
 4407abc:	2023883a 	mov	r17,r4
 4407ac0:	200d883a 	mov	r6,r4
 4407ac4:	18807c26 	beq	r3,r2,4407cb8 <__ieee754_sqrt+0x218>
 4407ac8:	01405f0e 	bge	zero,r5,4407c48 <__ieee754_sqrt+0x1a8>
 4407acc:	2815d53a 	srai	r10,r5,20
 4407ad0:	50006a26 	beq	r10,zero,4407c7c <__ieee754_sqrt+0x1dc>
 4407ad4:	00c00434 	movhi	r3,16
 4407ad8:	52bf0044 	addi	r10,r10,-1023
 4407adc:	18ffffc4 	addi	r3,r3,-1
 4407ae0:	80c6703a 	and	r3,r16,r3
 4407ae4:	5080004c 	andi	r2,r10,1
 4407ae8:	18c00434 	orhi	r3,r3,16
 4407aec:	1000511e 	bne	r2,zero,4407c34 <__ieee754_sqrt+0x194>
 4407af0:	3004d7fa 	srli	r2,r6,31
 4407af4:	5015d07a 	srai	r10,r10,1
 4407af8:	18c7883a 	add	r3,r3,r3
 4407afc:	10c5883a 	add	r2,r2,r3
 4407b00:	01400584 	movi	r5,22
 4407b04:	3187883a 	add	r3,r6,r6
 4407b08:	0013883a 	mov	r9,zero
 4407b0c:	000f883a 	mov	r7,zero
 4407b10:	01000834 	movhi	r4,32
 4407b14:	390d883a 	add	r6,r7,r4
 4407b18:	1810d7fa 	srli	r8,r3,31
 4407b1c:	297fffc4 	addi	r5,r5,-1
 4407b20:	11800316 	blt	r2,r6,4407b30 <__ieee754_sqrt+0x90>
 4407b24:	1185c83a 	sub	r2,r2,r6
 4407b28:	310f883a 	add	r7,r6,r4
 4407b2c:	4913883a 	add	r9,r9,r4
 4407b30:	1085883a 	add	r2,r2,r2
 4407b34:	4085883a 	add	r2,r8,r2
 4407b38:	18c7883a 	add	r3,r3,r3
 4407b3c:	2008d07a 	srli	r4,r4,1
 4407b40:	283ff41e 	bne	r5,zero,4407b14 <__reset+0xfb403b14>
 4407b44:	01200034 	movhi	r4,32768
 4407b48:	01800804 	movi	r6,32
 4407b4c:	0011883a 	mov	r8,zero
 4407b50:	0019883a 	mov	r12,zero
 4407b54:	201b883a 	mov	r13,r4
 4407b58:	00000806 	br	4407b7c <__ieee754_sqrt+0xdc>
 4407b5c:	38801726 	beq	r7,r2,4407bbc <__ieee754_sqrt+0x11c>
 4407b60:	180ad7fa 	srli	r5,r3,31
 4407b64:	1085883a 	add	r2,r2,r2
 4407b68:	31bfffc4 	addi	r6,r6,-1
 4407b6c:	2885883a 	add	r2,r5,r2
 4407b70:	18c7883a 	add	r3,r3,r3
 4407b74:	2008d07a 	srli	r4,r4,1
 4407b78:	30001726 	beq	r6,zero,4407bd8 <__ieee754_sqrt+0x138>
 4407b7c:	230b883a 	add	r5,r4,r12
 4407b80:	38bff60e 	bge	r7,r2,4407b5c <__reset+0xfb403b5c>
 4407b84:	2ae0002c 	andhi	r11,r5,32768
 4407b88:	2919883a 	add	r12,r5,r4
 4407b8c:	5b400826 	beq	r11,r13,4407bb0 <__ieee754_sqrt+0x110>
 4407b90:	3817883a 	mov	r11,r7
 4407b94:	11c5c83a 	sub	r2,r2,r7
 4407b98:	1940012e 	bgeu	r3,r5,4407ba0 <__ieee754_sqrt+0x100>
 4407b9c:	10bfffc4 	addi	r2,r2,-1
 4407ba0:	1947c83a 	sub	r3,r3,r5
 4407ba4:	4111883a 	add	r8,r8,r4
 4407ba8:	580f883a 	mov	r7,r11
 4407bac:	003fec06 	br	4407b60 <__reset+0xfb403b60>
 4407bb0:	603ff716 	blt	r12,zero,4407b90 <__reset+0xfb403b90>
 4407bb4:	3ac00044 	addi	r11,r7,1
 4407bb8:	003ff606 	br	4407b94 <__reset+0xfb403b94>
 4407bbc:	19401936 	bltu	r3,r5,4407c24 <__ieee754_sqrt+0x184>
 4407bc0:	2ae0002c 	andhi	r11,r5,32768
 4407bc4:	2919883a 	add	r12,r5,r4
 4407bc8:	5b404626 	beq	r11,r13,4407ce4 <__ieee754_sqrt+0x244>
 4407bcc:	1017883a 	mov	r11,r2
 4407bd0:	0005883a 	mov	r2,zero
 4407bd4:	003ff206 	br	4407ba0 <__reset+0xfb403ba0>
 4407bd8:	10c4b03a 	or	r2,r2,r3
 4407bdc:	10000426 	beq	r2,zero,4407bf0 <__ieee754_sqrt+0x150>
 4407be0:	00bfffc4 	movi	r2,-1
 4407be4:	40804126 	beq	r8,r2,4407cec <__ieee754_sqrt+0x24c>
 4407be8:	4080004c 	andi	r2,r8,1
 4407bec:	4091883a 	add	r8,r8,r2
 4407bf0:	4004d07a 	srli	r2,r8,1
 4407bf4:	4807d07a 	srai	r3,r9,1
 4407bf8:	010ff834 	movhi	r4,16352
 4407bfc:	4a40004c 	andi	r9,r9,1
 4407c00:	1909883a 	add	r4,r3,r4
 4407c04:	4800091e 	bne	r9,zero,4407c2c <__ieee754_sqrt+0x18c>
 4407c08:	5006953a 	slli	r3,r10,20
 4407c0c:	1907883a 	add	r3,r3,r4
 4407c10:	dfc00217 	ldw	ra,8(sp)
 4407c14:	dc400117 	ldw	r17,4(sp)
 4407c18:	dc000017 	ldw	r16,0(sp)
 4407c1c:	dec00304 	addi	sp,sp,12
 4407c20:	f800283a 	ret
 4407c24:	3805883a 	mov	r2,r7
 4407c28:	003fcd06 	br	4407b60 <__reset+0xfb403b60>
 4407c2c:	10a00034 	orhi	r2,r2,32768
 4407c30:	003ff506 	br	4407c08 <__reset+0xfb403c08>
 4407c34:	3004d7fa 	srli	r2,r6,31
 4407c38:	18c7883a 	add	r3,r3,r3
 4407c3c:	318d883a 	add	r6,r6,r6
 4407c40:	10c7883a 	add	r3,r2,r3
 4407c44:	003faa06 	br	4407af0 <__reset+0xfb403af0>
 4407c48:	00a00034 	movhi	r2,32768
 4407c4c:	10bfffc4 	addi	r2,r2,-1
 4407c50:	2884703a 	and	r2,r5,r2
 4407c54:	1104b03a 	or	r2,r2,r4
 4407c58:	10001f26 	beq	r2,zero,4407cd8 <__ieee754_sqrt+0x238>
 4407c5c:	28002a1e 	bne	r5,zero,4407d08 <__ieee754_sqrt+0x268>
 4407c60:	0015883a 	mov	r10,zero
 4407c64:	3020d2fa 	srli	r16,r6,11
 4407c68:	52bffac4 	addi	r10,r10,-21
 4407c6c:	300c957a 	slli	r6,r6,21
 4407c70:	803ffc26 	beq	r16,zero,4407c64 <__reset+0xfb403c64>
 4407c74:	8080042c 	andhi	r2,r16,16
 4407c78:	10001f1e 	bne	r2,zero,4407cf8 <__ieee754_sqrt+0x258>
 4407c7c:	0005883a 	mov	r2,zero
 4407c80:	00000106 	br	4407c88 <__ieee754_sqrt+0x1e8>
 4407c84:	1805883a 	mov	r2,r3
 4407c88:	8421883a 	add	r16,r16,r16
 4407c8c:	8100042c 	andhi	r4,r16,16
 4407c90:	10c00044 	addi	r3,r2,1
 4407c94:	203ffb26 	beq	r4,zero,4407c84 <__reset+0xfb403c84>
 4407c98:	01000804 	movi	r4,32
 4407c9c:	0085c83a 	sub	r2,zero,r2
 4407ca0:	20c9c83a 	sub	r4,r4,r3
 4407ca4:	3108d83a 	srl	r4,r6,r4
 4407ca8:	5095883a 	add	r10,r10,r2
 4407cac:	30cc983a 	sll	r6,r6,r3
 4407cb0:	2420b03a 	or	r16,r4,r16
 4407cb4:	003f8706 	br	4407ad4 <__reset+0xfb403ad4>
 4407cb8:	280f883a 	mov	r7,r5
 4407cbc:	44091e40 	call	44091e4 <__muldf3>
 4407cc0:	880d883a 	mov	r6,r17
 4407cc4:	800f883a 	mov	r7,r16
 4407cc8:	1009883a 	mov	r4,r2
 4407ccc:	180b883a 	mov	r5,r3
 4407cd0:	4407f5c0 	call	4407f5c <__adddf3>
 4407cd4:	003fce06 	br	4407c10 <__reset+0xfb403c10>
 4407cd8:	2005883a 	mov	r2,r4
 4407cdc:	2807883a 	mov	r3,r5
 4407ce0:	003fcb06 	br	4407c10 <__reset+0xfb403c10>
 4407ce4:	603fb916 	blt	r12,zero,4407bcc <__reset+0xfb403bcc>
 4407ce8:	003fb206 	br	4407bb4 <__reset+0xfb403bb4>
 4407cec:	4a400044 	addi	r9,r9,1
 4407cf0:	0005883a 	mov	r2,zero
 4407cf4:	003fbf06 	br	4407bf4 <__reset+0xfb403bf4>
 4407cf8:	01000804 	movi	r4,32
 4407cfc:	00800044 	movi	r2,1
 4407d00:	0007883a 	mov	r3,zero
 4407d04:	003fe706 	br	4407ca4 <__reset+0xfb403ca4>
 4407d08:	200d883a 	mov	r6,r4
 4407d0c:	280f883a 	mov	r7,r5
 4407d10:	44098fc0 	call	44098fc <__subdf3>
 4407d14:	100d883a 	mov	r6,r2
 4407d18:	180f883a 	mov	r7,r3
 4407d1c:	1009883a 	mov	r4,r2
 4407d20:	180b883a 	mov	r5,r3
 4407d24:	44088080 	call	4408808 <__divdf3>
 4407d28:	003fb906 	br	4407c10 <__reset+0xfb403c10>

04407d2c <__fpclassifyd>:
 4407d2c:	00a00034 	movhi	r2,32768
 4407d30:	10bfffc4 	addi	r2,r2,-1
 4407d34:	2884703a 	and	r2,r5,r2
 4407d38:	10000726 	beq	r2,zero,4407d58 <__fpclassifyd+0x2c>
 4407d3c:	00fffc34 	movhi	r3,65520
 4407d40:	019ff834 	movhi	r6,32736
 4407d44:	28c7883a 	add	r3,r5,r3
 4407d48:	31bfffc4 	addi	r6,r6,-1
 4407d4c:	30c00536 	bltu	r6,r3,4407d64 <__fpclassifyd+0x38>
 4407d50:	00800104 	movi	r2,4
 4407d54:	f800283a 	ret
 4407d58:	2000021e 	bne	r4,zero,4407d64 <__fpclassifyd+0x38>
 4407d5c:	00800084 	movi	r2,2
 4407d60:	f800283a 	ret
 4407d64:	00dffc34 	movhi	r3,32752
 4407d68:	019ff834 	movhi	r6,32736
 4407d6c:	28cb883a 	add	r5,r5,r3
 4407d70:	31bfffc4 	addi	r6,r6,-1
 4407d74:	317ff62e 	bgeu	r6,r5,4407d50 <__reset+0xfb403d50>
 4407d78:	01400434 	movhi	r5,16
 4407d7c:	297fffc4 	addi	r5,r5,-1
 4407d80:	28800236 	bltu	r5,r2,4407d8c <__fpclassifyd+0x60>
 4407d84:	008000c4 	movi	r2,3
 4407d88:	f800283a 	ret
 4407d8c:	10c00226 	beq	r2,r3,4407d98 <__fpclassifyd+0x6c>
 4407d90:	0005883a 	mov	r2,zero
 4407d94:	f800283a 	ret
 4407d98:	2005003a 	cmpeq	r2,r4,zero
 4407d9c:	f800283a 	ret

04407da0 <matherr>:
 4407da0:	0005883a 	mov	r2,zero
 4407da4:	f800283a 	ret

04407da8 <__divsi3>:
 4407da8:	20001b16 	blt	r4,zero,4407e18 <__divsi3+0x70>
 4407dac:	000f883a 	mov	r7,zero
 4407db0:	28001616 	blt	r5,zero,4407e0c <__divsi3+0x64>
 4407db4:	200d883a 	mov	r6,r4
 4407db8:	29001a2e 	bgeu	r5,r4,4407e24 <__divsi3+0x7c>
 4407dbc:	00800804 	movi	r2,32
 4407dc0:	00c00044 	movi	r3,1
 4407dc4:	00000106 	br	4407dcc <__divsi3+0x24>
 4407dc8:	10000d26 	beq	r2,zero,4407e00 <__divsi3+0x58>
 4407dcc:	294b883a 	add	r5,r5,r5
 4407dd0:	10bfffc4 	addi	r2,r2,-1
 4407dd4:	18c7883a 	add	r3,r3,r3
 4407dd8:	293ffb36 	bltu	r5,r4,4407dc8 <__reset+0xfb403dc8>
 4407ddc:	0005883a 	mov	r2,zero
 4407de0:	18000726 	beq	r3,zero,4407e00 <__divsi3+0x58>
 4407de4:	0005883a 	mov	r2,zero
 4407de8:	31400236 	bltu	r6,r5,4407df4 <__divsi3+0x4c>
 4407dec:	314dc83a 	sub	r6,r6,r5
 4407df0:	10c4b03a 	or	r2,r2,r3
 4407df4:	1806d07a 	srli	r3,r3,1
 4407df8:	280ad07a 	srli	r5,r5,1
 4407dfc:	183ffa1e 	bne	r3,zero,4407de8 <__reset+0xfb403de8>
 4407e00:	38000126 	beq	r7,zero,4407e08 <__divsi3+0x60>
 4407e04:	0085c83a 	sub	r2,zero,r2
 4407e08:	f800283a 	ret
 4407e0c:	014bc83a 	sub	r5,zero,r5
 4407e10:	39c0005c 	xori	r7,r7,1
 4407e14:	003fe706 	br	4407db4 <__reset+0xfb403db4>
 4407e18:	0109c83a 	sub	r4,zero,r4
 4407e1c:	01c00044 	movi	r7,1
 4407e20:	003fe306 	br	4407db0 <__reset+0xfb403db0>
 4407e24:	00c00044 	movi	r3,1
 4407e28:	003fee06 	br	4407de4 <__reset+0xfb403de4>

04407e2c <__modsi3>:
 4407e2c:	20001716 	blt	r4,zero,4407e8c <__modsi3+0x60>
 4407e30:	000f883a 	mov	r7,zero
 4407e34:	2005883a 	mov	r2,r4
 4407e38:	28001216 	blt	r5,zero,4407e84 <__modsi3+0x58>
 4407e3c:	2900162e 	bgeu	r5,r4,4407e98 <__modsi3+0x6c>
 4407e40:	01800804 	movi	r6,32
 4407e44:	00c00044 	movi	r3,1
 4407e48:	00000106 	br	4407e50 <__modsi3+0x24>
 4407e4c:	30000a26 	beq	r6,zero,4407e78 <__modsi3+0x4c>
 4407e50:	294b883a 	add	r5,r5,r5
 4407e54:	31bfffc4 	addi	r6,r6,-1
 4407e58:	18c7883a 	add	r3,r3,r3
 4407e5c:	293ffb36 	bltu	r5,r4,4407e4c <__reset+0xfb403e4c>
 4407e60:	18000526 	beq	r3,zero,4407e78 <__modsi3+0x4c>
 4407e64:	1806d07a 	srli	r3,r3,1
 4407e68:	11400136 	bltu	r2,r5,4407e70 <__modsi3+0x44>
 4407e6c:	1145c83a 	sub	r2,r2,r5
 4407e70:	280ad07a 	srli	r5,r5,1
 4407e74:	183ffb1e 	bne	r3,zero,4407e64 <__reset+0xfb403e64>
 4407e78:	38000126 	beq	r7,zero,4407e80 <__modsi3+0x54>
 4407e7c:	0085c83a 	sub	r2,zero,r2
 4407e80:	f800283a 	ret
 4407e84:	014bc83a 	sub	r5,zero,r5
 4407e88:	003fec06 	br	4407e3c <__reset+0xfb403e3c>
 4407e8c:	0109c83a 	sub	r4,zero,r4
 4407e90:	01c00044 	movi	r7,1
 4407e94:	003fe706 	br	4407e34 <__reset+0xfb403e34>
 4407e98:	00c00044 	movi	r3,1
 4407e9c:	003ff106 	br	4407e64 <__reset+0xfb403e64>

04407ea0 <__udivsi3>:
 4407ea0:	200d883a 	mov	r6,r4
 4407ea4:	2900152e 	bgeu	r5,r4,4407efc <__udivsi3+0x5c>
 4407ea8:	28001416 	blt	r5,zero,4407efc <__udivsi3+0x5c>
 4407eac:	00800804 	movi	r2,32
 4407eb0:	00c00044 	movi	r3,1
 4407eb4:	00000206 	br	4407ec0 <__udivsi3+0x20>
 4407eb8:	10000e26 	beq	r2,zero,4407ef4 <__udivsi3+0x54>
 4407ebc:	28000516 	blt	r5,zero,4407ed4 <__udivsi3+0x34>
 4407ec0:	294b883a 	add	r5,r5,r5
 4407ec4:	10bfffc4 	addi	r2,r2,-1
 4407ec8:	18c7883a 	add	r3,r3,r3
 4407ecc:	293ffa36 	bltu	r5,r4,4407eb8 <__reset+0xfb403eb8>
 4407ed0:	18000826 	beq	r3,zero,4407ef4 <__udivsi3+0x54>
 4407ed4:	0005883a 	mov	r2,zero
 4407ed8:	31400236 	bltu	r6,r5,4407ee4 <__udivsi3+0x44>
 4407edc:	314dc83a 	sub	r6,r6,r5
 4407ee0:	10c4b03a 	or	r2,r2,r3
 4407ee4:	1806d07a 	srli	r3,r3,1
 4407ee8:	280ad07a 	srli	r5,r5,1
 4407eec:	183ffa1e 	bne	r3,zero,4407ed8 <__reset+0xfb403ed8>
 4407ef0:	f800283a 	ret
 4407ef4:	0005883a 	mov	r2,zero
 4407ef8:	f800283a 	ret
 4407efc:	00c00044 	movi	r3,1
 4407f00:	003ff406 	br	4407ed4 <__reset+0xfb403ed4>

04407f04 <__umodsi3>:
 4407f04:	2005883a 	mov	r2,r4
 4407f08:	2900122e 	bgeu	r5,r4,4407f54 <__umodsi3+0x50>
 4407f0c:	28001116 	blt	r5,zero,4407f54 <__umodsi3+0x50>
 4407f10:	01800804 	movi	r6,32
 4407f14:	00c00044 	movi	r3,1
 4407f18:	00000206 	br	4407f24 <__umodsi3+0x20>
 4407f1c:	30000c26 	beq	r6,zero,4407f50 <__umodsi3+0x4c>
 4407f20:	28000516 	blt	r5,zero,4407f38 <__umodsi3+0x34>
 4407f24:	294b883a 	add	r5,r5,r5
 4407f28:	31bfffc4 	addi	r6,r6,-1
 4407f2c:	18c7883a 	add	r3,r3,r3
 4407f30:	293ffa36 	bltu	r5,r4,4407f1c <__reset+0xfb403f1c>
 4407f34:	18000626 	beq	r3,zero,4407f50 <__umodsi3+0x4c>
 4407f38:	1806d07a 	srli	r3,r3,1
 4407f3c:	11400136 	bltu	r2,r5,4407f44 <__umodsi3+0x40>
 4407f40:	1145c83a 	sub	r2,r2,r5
 4407f44:	280ad07a 	srli	r5,r5,1
 4407f48:	183ffb1e 	bne	r3,zero,4407f38 <__reset+0xfb403f38>
 4407f4c:	f800283a 	ret
 4407f50:	f800283a 	ret
 4407f54:	00c00044 	movi	r3,1
 4407f58:	003ff706 	br	4407f38 <__reset+0xfb403f38>

04407f5c <__adddf3>:
 4407f5c:	02c00434 	movhi	r11,16
 4407f60:	5affffc4 	addi	r11,r11,-1
 4407f64:	2806d7fa 	srli	r3,r5,31
 4407f68:	2ad4703a 	and	r10,r5,r11
 4407f6c:	3ad2703a 	and	r9,r7,r11
 4407f70:	3804d53a 	srli	r2,r7,20
 4407f74:	3018d77a 	srli	r12,r6,29
 4407f78:	280ad53a 	srli	r5,r5,20
 4407f7c:	501490fa 	slli	r10,r10,3
 4407f80:	2010d77a 	srli	r8,r4,29
 4407f84:	481290fa 	slli	r9,r9,3
 4407f88:	380ed7fa 	srli	r7,r7,31
 4407f8c:	defffb04 	addi	sp,sp,-20
 4407f90:	dc800215 	stw	r18,8(sp)
 4407f94:	dc400115 	stw	r17,4(sp)
 4407f98:	dc000015 	stw	r16,0(sp)
 4407f9c:	dfc00415 	stw	ra,16(sp)
 4407fa0:	dcc00315 	stw	r19,12(sp)
 4407fa4:	1c803fcc 	andi	r18,r3,255
 4407fa8:	2c01ffcc 	andi	r16,r5,2047
 4407fac:	5210b03a 	or	r8,r10,r8
 4407fb0:	202290fa 	slli	r17,r4,3
 4407fb4:	1081ffcc 	andi	r2,r2,2047
 4407fb8:	4b12b03a 	or	r9,r9,r12
 4407fbc:	300c90fa 	slli	r6,r6,3
 4407fc0:	91c07526 	beq	r18,r7,4408198 <__adddf3+0x23c>
 4407fc4:	8087c83a 	sub	r3,r16,r2
 4407fc8:	00c0ab0e 	bge	zero,r3,4408278 <__adddf3+0x31c>
 4407fcc:	10002a1e 	bne	r2,zero,4408078 <__adddf3+0x11c>
 4407fd0:	4984b03a 	or	r2,r9,r6
 4407fd4:	1000961e 	bne	r2,zero,4408230 <__adddf3+0x2d4>
 4407fd8:	888001cc 	andi	r2,r17,7
 4407fdc:	10000726 	beq	r2,zero,4407ffc <__adddf3+0xa0>
 4407fe0:	888003cc 	andi	r2,r17,15
 4407fe4:	00c00104 	movi	r3,4
 4407fe8:	10c00426 	beq	r2,r3,4407ffc <__adddf3+0xa0>
 4407fec:	88c7883a 	add	r3,r17,r3
 4407ff0:	1c63803a 	cmpltu	r17,r3,r17
 4407ff4:	4451883a 	add	r8,r8,r17
 4407ff8:	1823883a 	mov	r17,r3
 4407ffc:	4080202c 	andhi	r2,r8,128
 4408000:	10005926 	beq	r2,zero,4408168 <__adddf3+0x20c>
 4408004:	84000044 	addi	r16,r16,1
 4408008:	0081ffc4 	movi	r2,2047
 440800c:	8080ba26 	beq	r16,r2,44082f8 <__adddf3+0x39c>
 4408010:	00bfe034 	movhi	r2,65408
 4408014:	10bfffc4 	addi	r2,r2,-1
 4408018:	4090703a 	and	r8,r8,r2
 440801c:	4004977a 	slli	r2,r8,29
 4408020:	4010927a 	slli	r8,r8,9
 4408024:	8822d0fa 	srli	r17,r17,3
 4408028:	8401ffcc 	andi	r16,r16,2047
 440802c:	4010d33a 	srli	r8,r8,12
 4408030:	9007883a 	mov	r3,r18
 4408034:	1444b03a 	or	r2,r2,r17
 4408038:	8401ffcc 	andi	r16,r16,2047
 440803c:	8020953a 	slli	r16,r16,20
 4408040:	18c03fcc 	andi	r3,r3,255
 4408044:	01000434 	movhi	r4,16
 4408048:	213fffc4 	addi	r4,r4,-1
 440804c:	180697fa 	slli	r3,r3,31
 4408050:	4110703a 	and	r8,r8,r4
 4408054:	4410b03a 	or	r8,r8,r16
 4408058:	40c6b03a 	or	r3,r8,r3
 440805c:	dfc00417 	ldw	ra,16(sp)
 4408060:	dcc00317 	ldw	r19,12(sp)
 4408064:	dc800217 	ldw	r18,8(sp)
 4408068:	dc400117 	ldw	r17,4(sp)
 440806c:	dc000017 	ldw	r16,0(sp)
 4408070:	dec00504 	addi	sp,sp,20
 4408074:	f800283a 	ret
 4408078:	0081ffc4 	movi	r2,2047
 440807c:	80bfd626 	beq	r16,r2,4407fd8 <__reset+0xfb403fd8>
 4408080:	4a402034 	orhi	r9,r9,128
 4408084:	00800e04 	movi	r2,56
 4408088:	10c09f16 	blt	r2,r3,4408308 <__adddf3+0x3ac>
 440808c:	008007c4 	movi	r2,31
 4408090:	10c0c216 	blt	r2,r3,440839c <__adddf3+0x440>
 4408094:	00800804 	movi	r2,32
 4408098:	10c5c83a 	sub	r2,r2,r3
 440809c:	488a983a 	sll	r5,r9,r2
 44080a0:	30c8d83a 	srl	r4,r6,r3
 44080a4:	3084983a 	sll	r2,r6,r2
 44080a8:	48c6d83a 	srl	r3,r9,r3
 44080ac:	290cb03a 	or	r6,r5,r4
 44080b0:	1004c03a 	cmpne	r2,r2,zero
 44080b4:	308cb03a 	or	r6,r6,r2
 44080b8:	898dc83a 	sub	r6,r17,r6
 44080bc:	89a3803a 	cmpltu	r17,r17,r6
 44080c0:	40d1c83a 	sub	r8,r8,r3
 44080c4:	4451c83a 	sub	r8,r8,r17
 44080c8:	3023883a 	mov	r17,r6
 44080cc:	4080202c 	andhi	r2,r8,128
 44080d0:	10002326 	beq	r2,zero,4408160 <__adddf3+0x204>
 44080d4:	04c02034 	movhi	r19,128
 44080d8:	9cffffc4 	addi	r19,r19,-1
 44080dc:	44e6703a 	and	r19,r8,r19
 44080e0:	98007626 	beq	r19,zero,44082bc <__adddf3+0x360>
 44080e4:	9809883a 	mov	r4,r19
 44080e8:	440a3540 	call	440a354 <__clzsi2>
 44080ec:	10fffe04 	addi	r3,r2,-8
 44080f0:	010007c4 	movi	r4,31
 44080f4:	20c07716 	blt	r4,r3,44082d4 <__adddf3+0x378>
 44080f8:	00800804 	movi	r2,32
 44080fc:	10c5c83a 	sub	r2,r2,r3
 4408100:	8884d83a 	srl	r2,r17,r2
 4408104:	98d0983a 	sll	r8,r19,r3
 4408108:	88e2983a 	sll	r17,r17,r3
 440810c:	1204b03a 	or	r2,r2,r8
 4408110:	1c007416 	blt	r3,r16,44082e4 <__adddf3+0x388>
 4408114:	1c21c83a 	sub	r16,r3,r16
 4408118:	82000044 	addi	r8,r16,1
 440811c:	00c007c4 	movi	r3,31
 4408120:	1a009116 	blt	r3,r8,4408368 <__adddf3+0x40c>
 4408124:	00c00804 	movi	r3,32
 4408128:	1a07c83a 	sub	r3,r3,r8
 440812c:	8a08d83a 	srl	r4,r17,r8
 4408130:	88e2983a 	sll	r17,r17,r3
 4408134:	10c6983a 	sll	r3,r2,r3
 4408138:	1210d83a 	srl	r8,r2,r8
 440813c:	8804c03a 	cmpne	r2,r17,zero
 4408140:	1906b03a 	or	r3,r3,r4
 4408144:	18a2b03a 	or	r17,r3,r2
 4408148:	0021883a 	mov	r16,zero
 440814c:	003fa206 	br	4407fd8 <__reset+0xfb403fd8>
 4408150:	1890b03a 	or	r8,r3,r2
 4408154:	40017d26 	beq	r8,zero,440874c <__adddf3+0x7f0>
 4408158:	1011883a 	mov	r8,r2
 440815c:	1823883a 	mov	r17,r3
 4408160:	888001cc 	andi	r2,r17,7
 4408164:	103f9e1e 	bne	r2,zero,4407fe0 <__reset+0xfb403fe0>
 4408168:	4004977a 	slli	r2,r8,29
 440816c:	8822d0fa 	srli	r17,r17,3
 4408170:	4010d0fa 	srli	r8,r8,3
 4408174:	9007883a 	mov	r3,r18
 4408178:	1444b03a 	or	r2,r2,r17
 440817c:	0101ffc4 	movi	r4,2047
 4408180:	81002426 	beq	r16,r4,4408214 <__adddf3+0x2b8>
 4408184:	8120703a 	and	r16,r16,r4
 4408188:	01000434 	movhi	r4,16
 440818c:	213fffc4 	addi	r4,r4,-1
 4408190:	4110703a 	and	r8,r8,r4
 4408194:	003fa806 	br	4408038 <__reset+0xfb404038>
 4408198:	8089c83a 	sub	r4,r16,r2
 440819c:	01005e0e 	bge	zero,r4,4408318 <__adddf3+0x3bc>
 44081a0:	10002b26 	beq	r2,zero,4408250 <__adddf3+0x2f4>
 44081a4:	0081ffc4 	movi	r2,2047
 44081a8:	80bf8b26 	beq	r16,r2,4407fd8 <__reset+0xfb403fd8>
 44081ac:	4a402034 	orhi	r9,r9,128
 44081b0:	00800e04 	movi	r2,56
 44081b4:	1100a40e 	bge	r2,r4,4408448 <__adddf3+0x4ec>
 44081b8:	498cb03a 	or	r6,r9,r6
 44081bc:	300ac03a 	cmpne	r5,r6,zero
 44081c0:	0013883a 	mov	r9,zero
 44081c4:	2c4b883a 	add	r5,r5,r17
 44081c8:	2c63803a 	cmpltu	r17,r5,r17
 44081cc:	4a11883a 	add	r8,r9,r8
 44081d0:	8a11883a 	add	r8,r17,r8
 44081d4:	2823883a 	mov	r17,r5
 44081d8:	4080202c 	andhi	r2,r8,128
 44081dc:	103fe026 	beq	r2,zero,4408160 <__reset+0xfb404160>
 44081e0:	84000044 	addi	r16,r16,1
 44081e4:	0081ffc4 	movi	r2,2047
 44081e8:	8080d226 	beq	r16,r2,4408534 <__adddf3+0x5d8>
 44081ec:	00bfe034 	movhi	r2,65408
 44081f0:	10bfffc4 	addi	r2,r2,-1
 44081f4:	4090703a 	and	r8,r8,r2
 44081f8:	880ad07a 	srli	r5,r17,1
 44081fc:	400897fa 	slli	r4,r8,31
 4408200:	88c0004c 	andi	r3,r17,1
 4408204:	28e2b03a 	or	r17,r5,r3
 4408208:	4010d07a 	srli	r8,r8,1
 440820c:	2462b03a 	or	r17,r4,r17
 4408210:	003f7106 	br	4407fd8 <__reset+0xfb403fd8>
 4408214:	4088b03a 	or	r4,r8,r2
 4408218:	20014526 	beq	r4,zero,4408730 <__adddf3+0x7d4>
 440821c:	01000434 	movhi	r4,16
 4408220:	42000234 	orhi	r8,r8,8
 4408224:	213fffc4 	addi	r4,r4,-1
 4408228:	4110703a 	and	r8,r8,r4
 440822c:	003f8206 	br	4408038 <__reset+0xfb404038>
 4408230:	18ffffc4 	addi	r3,r3,-1
 4408234:	1800491e 	bne	r3,zero,440835c <__adddf3+0x400>
 4408238:	898bc83a 	sub	r5,r17,r6
 440823c:	8963803a 	cmpltu	r17,r17,r5
 4408240:	4251c83a 	sub	r8,r8,r9
 4408244:	4451c83a 	sub	r8,r8,r17
 4408248:	2823883a 	mov	r17,r5
 440824c:	003f9f06 	br	44080cc <__reset+0xfb4040cc>
 4408250:	4984b03a 	or	r2,r9,r6
 4408254:	103f6026 	beq	r2,zero,4407fd8 <__reset+0xfb403fd8>
 4408258:	213fffc4 	addi	r4,r4,-1
 440825c:	2000931e 	bne	r4,zero,44084ac <__adddf3+0x550>
 4408260:	898d883a 	add	r6,r17,r6
 4408264:	3463803a 	cmpltu	r17,r6,r17
 4408268:	4251883a 	add	r8,r8,r9
 440826c:	8a11883a 	add	r8,r17,r8
 4408270:	3023883a 	mov	r17,r6
 4408274:	003fd806 	br	44081d8 <__reset+0xfb4041d8>
 4408278:	1800541e 	bne	r3,zero,44083cc <__adddf3+0x470>
 440827c:	80800044 	addi	r2,r16,1
 4408280:	1081ffcc 	andi	r2,r2,2047
 4408284:	00c00044 	movi	r3,1
 4408288:	1880a00e 	bge	r3,r2,440850c <__adddf3+0x5b0>
 440828c:	8989c83a 	sub	r4,r17,r6
 4408290:	8905803a 	cmpltu	r2,r17,r4
 4408294:	4267c83a 	sub	r19,r8,r9
 4408298:	98a7c83a 	sub	r19,r19,r2
 440829c:	9880202c 	andhi	r2,r19,128
 44082a0:	10006326 	beq	r2,zero,4408430 <__adddf3+0x4d4>
 44082a4:	3463c83a 	sub	r17,r6,r17
 44082a8:	4a07c83a 	sub	r3,r9,r8
 44082ac:	344d803a 	cmpltu	r6,r6,r17
 44082b0:	19a7c83a 	sub	r19,r3,r6
 44082b4:	3825883a 	mov	r18,r7
 44082b8:	983f8a1e 	bne	r19,zero,44080e4 <__reset+0xfb4040e4>
 44082bc:	8809883a 	mov	r4,r17
 44082c0:	440a3540 	call	440a354 <__clzsi2>
 44082c4:	10800804 	addi	r2,r2,32
 44082c8:	10fffe04 	addi	r3,r2,-8
 44082cc:	010007c4 	movi	r4,31
 44082d0:	20ff890e 	bge	r4,r3,44080f8 <__reset+0xfb4040f8>
 44082d4:	10bff604 	addi	r2,r2,-40
 44082d8:	8884983a 	sll	r2,r17,r2
 44082dc:	0023883a 	mov	r17,zero
 44082e0:	1c3f8c0e 	bge	r3,r16,4408114 <__reset+0xfb404114>
 44082e4:	023fe034 	movhi	r8,65408
 44082e8:	423fffc4 	addi	r8,r8,-1
 44082ec:	80e1c83a 	sub	r16,r16,r3
 44082f0:	1210703a 	and	r8,r2,r8
 44082f4:	003f3806 	br	4407fd8 <__reset+0xfb403fd8>
 44082f8:	9007883a 	mov	r3,r18
 44082fc:	0011883a 	mov	r8,zero
 4408300:	0005883a 	mov	r2,zero
 4408304:	003f4c06 	br	4408038 <__reset+0xfb404038>
 4408308:	498cb03a 	or	r6,r9,r6
 440830c:	300cc03a 	cmpne	r6,r6,zero
 4408310:	0007883a 	mov	r3,zero
 4408314:	003f6806 	br	44080b8 <__reset+0xfb4040b8>
 4408318:	20009c1e 	bne	r4,zero,440858c <__adddf3+0x630>
 440831c:	80800044 	addi	r2,r16,1
 4408320:	1141ffcc 	andi	r5,r2,2047
 4408324:	01000044 	movi	r4,1
 4408328:	2140670e 	bge	r4,r5,44084c8 <__adddf3+0x56c>
 440832c:	0101ffc4 	movi	r4,2047
 4408330:	11007f26 	beq	r2,r4,4408530 <__adddf3+0x5d4>
 4408334:	898d883a 	add	r6,r17,r6
 4408338:	4247883a 	add	r3,r8,r9
 440833c:	3451803a 	cmpltu	r8,r6,r17
 4408340:	40d1883a 	add	r8,r8,r3
 4408344:	402297fa 	slli	r17,r8,31
 4408348:	300cd07a 	srli	r6,r6,1
 440834c:	4010d07a 	srli	r8,r8,1
 4408350:	1021883a 	mov	r16,r2
 4408354:	89a2b03a 	or	r17,r17,r6
 4408358:	003f1f06 	br	4407fd8 <__reset+0xfb403fd8>
 440835c:	0081ffc4 	movi	r2,2047
 4408360:	80bf481e 	bne	r16,r2,4408084 <__reset+0xfb404084>
 4408364:	003f1c06 	br	4407fd8 <__reset+0xfb403fd8>
 4408368:	843ff844 	addi	r16,r16,-31
 440836c:	01000804 	movi	r4,32
 4408370:	1406d83a 	srl	r3,r2,r16
 4408374:	41005026 	beq	r8,r4,44084b8 <__adddf3+0x55c>
 4408378:	01001004 	movi	r4,64
 440837c:	2211c83a 	sub	r8,r4,r8
 4408380:	1204983a 	sll	r2,r2,r8
 4408384:	88a2b03a 	or	r17,r17,r2
 4408388:	8822c03a 	cmpne	r17,r17,zero
 440838c:	1c62b03a 	or	r17,r3,r17
 4408390:	0011883a 	mov	r8,zero
 4408394:	0021883a 	mov	r16,zero
 4408398:	003f7106 	br	4408160 <__reset+0xfb404160>
 440839c:	193ff804 	addi	r4,r3,-32
 44083a0:	00800804 	movi	r2,32
 44083a4:	4908d83a 	srl	r4,r9,r4
 44083a8:	18804526 	beq	r3,r2,44084c0 <__adddf3+0x564>
 44083ac:	00801004 	movi	r2,64
 44083b0:	10c5c83a 	sub	r2,r2,r3
 44083b4:	4886983a 	sll	r3,r9,r2
 44083b8:	198cb03a 	or	r6,r3,r6
 44083bc:	300cc03a 	cmpne	r6,r6,zero
 44083c0:	218cb03a 	or	r6,r4,r6
 44083c4:	0007883a 	mov	r3,zero
 44083c8:	003f3b06 	br	44080b8 <__reset+0xfb4040b8>
 44083cc:	80002a26 	beq	r16,zero,4408478 <__adddf3+0x51c>
 44083d0:	0101ffc4 	movi	r4,2047
 44083d4:	11006826 	beq	r2,r4,4408578 <__adddf3+0x61c>
 44083d8:	00c7c83a 	sub	r3,zero,r3
 44083dc:	42002034 	orhi	r8,r8,128
 44083e0:	01000e04 	movi	r4,56
 44083e4:	20c07c16 	blt	r4,r3,44085d8 <__adddf3+0x67c>
 44083e8:	010007c4 	movi	r4,31
 44083ec:	20c0da16 	blt	r4,r3,4408758 <__adddf3+0x7fc>
 44083f0:	01000804 	movi	r4,32
 44083f4:	20c9c83a 	sub	r4,r4,r3
 44083f8:	4114983a 	sll	r10,r8,r4
 44083fc:	88cad83a 	srl	r5,r17,r3
 4408400:	8908983a 	sll	r4,r17,r4
 4408404:	40c6d83a 	srl	r3,r8,r3
 4408408:	5162b03a 	or	r17,r10,r5
 440840c:	2008c03a 	cmpne	r4,r4,zero
 4408410:	8922b03a 	or	r17,r17,r4
 4408414:	3463c83a 	sub	r17,r6,r17
 4408418:	48c7c83a 	sub	r3,r9,r3
 440841c:	344d803a 	cmpltu	r6,r6,r17
 4408420:	1991c83a 	sub	r8,r3,r6
 4408424:	1021883a 	mov	r16,r2
 4408428:	3825883a 	mov	r18,r7
 440842c:	003f2706 	br	44080cc <__reset+0xfb4040cc>
 4408430:	24d0b03a 	or	r8,r4,r19
 4408434:	40001b1e 	bne	r8,zero,44084a4 <__adddf3+0x548>
 4408438:	0005883a 	mov	r2,zero
 440843c:	0007883a 	mov	r3,zero
 4408440:	0021883a 	mov	r16,zero
 4408444:	003f4d06 	br	440817c <__reset+0xfb40417c>
 4408448:	008007c4 	movi	r2,31
 440844c:	11003c16 	blt	r2,r4,4408540 <__adddf3+0x5e4>
 4408450:	00800804 	movi	r2,32
 4408454:	1105c83a 	sub	r2,r2,r4
 4408458:	488e983a 	sll	r7,r9,r2
 440845c:	310ad83a 	srl	r5,r6,r4
 4408460:	3084983a 	sll	r2,r6,r2
 4408464:	4912d83a 	srl	r9,r9,r4
 4408468:	394ab03a 	or	r5,r7,r5
 440846c:	1004c03a 	cmpne	r2,r2,zero
 4408470:	288ab03a 	or	r5,r5,r2
 4408474:	003f5306 	br	44081c4 <__reset+0xfb4041c4>
 4408478:	4448b03a 	or	r4,r8,r17
 440847c:	20003e26 	beq	r4,zero,4408578 <__adddf3+0x61c>
 4408480:	00c6303a 	nor	r3,zero,r3
 4408484:	18003a1e 	bne	r3,zero,4408570 <__adddf3+0x614>
 4408488:	3463c83a 	sub	r17,r6,r17
 440848c:	4a07c83a 	sub	r3,r9,r8
 4408490:	344d803a 	cmpltu	r6,r6,r17
 4408494:	1991c83a 	sub	r8,r3,r6
 4408498:	1021883a 	mov	r16,r2
 440849c:	3825883a 	mov	r18,r7
 44084a0:	003f0a06 	br	44080cc <__reset+0xfb4040cc>
 44084a4:	2023883a 	mov	r17,r4
 44084a8:	003f0d06 	br	44080e0 <__reset+0xfb4040e0>
 44084ac:	0081ffc4 	movi	r2,2047
 44084b0:	80bf3f1e 	bne	r16,r2,44081b0 <__reset+0xfb4041b0>
 44084b4:	003ec806 	br	4407fd8 <__reset+0xfb403fd8>
 44084b8:	0005883a 	mov	r2,zero
 44084bc:	003fb106 	br	4408384 <__reset+0xfb404384>
 44084c0:	0007883a 	mov	r3,zero
 44084c4:	003fbc06 	br	44083b8 <__reset+0xfb4043b8>
 44084c8:	4444b03a 	or	r2,r8,r17
 44084cc:	8000871e 	bne	r16,zero,44086ec <__adddf3+0x790>
 44084d0:	1000ba26 	beq	r2,zero,44087bc <__adddf3+0x860>
 44084d4:	4984b03a 	or	r2,r9,r6
 44084d8:	103ebf26 	beq	r2,zero,4407fd8 <__reset+0xfb403fd8>
 44084dc:	8985883a 	add	r2,r17,r6
 44084e0:	4247883a 	add	r3,r8,r9
 44084e4:	1451803a 	cmpltu	r8,r2,r17
 44084e8:	40d1883a 	add	r8,r8,r3
 44084ec:	40c0202c 	andhi	r3,r8,128
 44084f0:	1023883a 	mov	r17,r2
 44084f4:	183f1a26 	beq	r3,zero,4408160 <__reset+0xfb404160>
 44084f8:	00bfe034 	movhi	r2,65408
 44084fc:	10bfffc4 	addi	r2,r2,-1
 4408500:	2021883a 	mov	r16,r4
 4408504:	4090703a 	and	r8,r8,r2
 4408508:	003eb306 	br	4407fd8 <__reset+0xfb403fd8>
 440850c:	4444b03a 	or	r2,r8,r17
 4408510:	8000291e 	bne	r16,zero,44085b8 <__adddf3+0x65c>
 4408514:	10004b1e 	bne	r2,zero,4408644 <__adddf3+0x6e8>
 4408518:	4990b03a 	or	r8,r9,r6
 440851c:	40008b26 	beq	r8,zero,440874c <__adddf3+0x7f0>
 4408520:	4811883a 	mov	r8,r9
 4408524:	3023883a 	mov	r17,r6
 4408528:	3825883a 	mov	r18,r7
 440852c:	003eaa06 	br	4407fd8 <__reset+0xfb403fd8>
 4408530:	1021883a 	mov	r16,r2
 4408534:	0011883a 	mov	r8,zero
 4408538:	0005883a 	mov	r2,zero
 440853c:	003f0f06 	br	440817c <__reset+0xfb40417c>
 4408540:	217ff804 	addi	r5,r4,-32
 4408544:	00800804 	movi	r2,32
 4408548:	494ad83a 	srl	r5,r9,r5
 440854c:	20807d26 	beq	r4,r2,4408744 <__adddf3+0x7e8>
 4408550:	00801004 	movi	r2,64
 4408554:	1109c83a 	sub	r4,r2,r4
 4408558:	4912983a 	sll	r9,r9,r4
 440855c:	498cb03a 	or	r6,r9,r6
 4408560:	300cc03a 	cmpne	r6,r6,zero
 4408564:	298ab03a 	or	r5,r5,r6
 4408568:	0013883a 	mov	r9,zero
 440856c:	003f1506 	br	44081c4 <__reset+0xfb4041c4>
 4408570:	0101ffc4 	movi	r4,2047
 4408574:	113f9a1e 	bne	r2,r4,44083e0 <__reset+0xfb4043e0>
 4408578:	4811883a 	mov	r8,r9
 440857c:	3023883a 	mov	r17,r6
 4408580:	1021883a 	mov	r16,r2
 4408584:	3825883a 	mov	r18,r7
 4408588:	003e9306 	br	4407fd8 <__reset+0xfb403fd8>
 440858c:	8000161e 	bne	r16,zero,44085e8 <__adddf3+0x68c>
 4408590:	444ab03a 	or	r5,r8,r17
 4408594:	28005126 	beq	r5,zero,44086dc <__adddf3+0x780>
 4408598:	0108303a 	nor	r4,zero,r4
 440859c:	20004d1e 	bne	r4,zero,44086d4 <__adddf3+0x778>
 44085a0:	89a3883a 	add	r17,r17,r6
 44085a4:	4253883a 	add	r9,r8,r9
 44085a8:	898d803a 	cmpltu	r6,r17,r6
 44085ac:	3251883a 	add	r8,r6,r9
 44085b0:	1021883a 	mov	r16,r2
 44085b4:	003f0806 	br	44081d8 <__reset+0xfb4041d8>
 44085b8:	1000301e 	bne	r2,zero,440867c <__adddf3+0x720>
 44085bc:	4984b03a 	or	r2,r9,r6
 44085c0:	10007126 	beq	r2,zero,4408788 <__adddf3+0x82c>
 44085c4:	4811883a 	mov	r8,r9
 44085c8:	3023883a 	mov	r17,r6
 44085cc:	3825883a 	mov	r18,r7
 44085d0:	0401ffc4 	movi	r16,2047
 44085d4:	003e8006 	br	4407fd8 <__reset+0xfb403fd8>
 44085d8:	4462b03a 	or	r17,r8,r17
 44085dc:	8822c03a 	cmpne	r17,r17,zero
 44085e0:	0007883a 	mov	r3,zero
 44085e4:	003f8b06 	br	4408414 <__reset+0xfb404414>
 44085e8:	0141ffc4 	movi	r5,2047
 44085ec:	11403b26 	beq	r2,r5,44086dc <__adddf3+0x780>
 44085f0:	0109c83a 	sub	r4,zero,r4
 44085f4:	42002034 	orhi	r8,r8,128
 44085f8:	01400e04 	movi	r5,56
 44085fc:	29006716 	blt	r5,r4,440879c <__adddf3+0x840>
 4408600:	014007c4 	movi	r5,31
 4408604:	29007016 	blt	r5,r4,44087c8 <__adddf3+0x86c>
 4408608:	01400804 	movi	r5,32
 440860c:	290bc83a 	sub	r5,r5,r4
 4408610:	4154983a 	sll	r10,r8,r5
 4408614:	890ed83a 	srl	r7,r17,r4
 4408618:	894a983a 	sll	r5,r17,r5
 440861c:	4108d83a 	srl	r4,r8,r4
 4408620:	51e2b03a 	or	r17,r10,r7
 4408624:	280ac03a 	cmpne	r5,r5,zero
 4408628:	8962b03a 	or	r17,r17,r5
 440862c:	89a3883a 	add	r17,r17,r6
 4408630:	2253883a 	add	r9,r4,r9
 4408634:	898d803a 	cmpltu	r6,r17,r6
 4408638:	3251883a 	add	r8,r6,r9
 440863c:	1021883a 	mov	r16,r2
 4408640:	003ee506 	br	44081d8 <__reset+0xfb4041d8>
 4408644:	4984b03a 	or	r2,r9,r6
 4408648:	103e6326 	beq	r2,zero,4407fd8 <__reset+0xfb403fd8>
 440864c:	8987c83a 	sub	r3,r17,r6
 4408650:	88c9803a 	cmpltu	r4,r17,r3
 4408654:	4245c83a 	sub	r2,r8,r9
 4408658:	1105c83a 	sub	r2,r2,r4
 440865c:	1100202c 	andhi	r4,r2,128
 4408660:	203ebb26 	beq	r4,zero,4408150 <__reset+0xfb404150>
 4408664:	3463c83a 	sub	r17,r6,r17
 4408668:	4a07c83a 	sub	r3,r9,r8
 440866c:	344d803a 	cmpltu	r6,r6,r17
 4408670:	1991c83a 	sub	r8,r3,r6
 4408674:	3825883a 	mov	r18,r7
 4408678:	003e5706 	br	4407fd8 <__reset+0xfb403fd8>
 440867c:	4984b03a 	or	r2,r9,r6
 4408680:	10002e26 	beq	r2,zero,440873c <__adddf3+0x7e0>
 4408684:	4004d0fa 	srli	r2,r8,3
 4408688:	8822d0fa 	srli	r17,r17,3
 440868c:	4010977a 	slli	r8,r8,29
 4408690:	10c0022c 	andhi	r3,r2,8
 4408694:	4462b03a 	or	r17,r8,r17
 4408698:	18000826 	beq	r3,zero,44086bc <__adddf3+0x760>
 440869c:	4808d0fa 	srli	r4,r9,3
 44086a0:	20c0022c 	andhi	r3,r4,8
 44086a4:	1800051e 	bne	r3,zero,44086bc <__adddf3+0x760>
 44086a8:	300cd0fa 	srli	r6,r6,3
 44086ac:	4806977a 	slli	r3,r9,29
 44086b0:	2005883a 	mov	r2,r4
 44086b4:	3825883a 	mov	r18,r7
 44086b8:	19a2b03a 	or	r17,r3,r6
 44086bc:	8810d77a 	srli	r8,r17,29
 44086c0:	100490fa 	slli	r2,r2,3
 44086c4:	882290fa 	slli	r17,r17,3
 44086c8:	0401ffc4 	movi	r16,2047
 44086cc:	4090b03a 	or	r8,r8,r2
 44086d0:	003e4106 	br	4407fd8 <__reset+0xfb403fd8>
 44086d4:	0141ffc4 	movi	r5,2047
 44086d8:	117fc71e 	bne	r2,r5,44085f8 <__reset+0xfb4045f8>
 44086dc:	4811883a 	mov	r8,r9
 44086e0:	3023883a 	mov	r17,r6
 44086e4:	1021883a 	mov	r16,r2
 44086e8:	003e3b06 	br	4407fd8 <__reset+0xfb403fd8>
 44086ec:	10002f26 	beq	r2,zero,44087ac <__adddf3+0x850>
 44086f0:	4984b03a 	or	r2,r9,r6
 44086f4:	10001126 	beq	r2,zero,440873c <__adddf3+0x7e0>
 44086f8:	4004d0fa 	srli	r2,r8,3
 44086fc:	8822d0fa 	srli	r17,r17,3
 4408700:	4010977a 	slli	r8,r8,29
 4408704:	10c0022c 	andhi	r3,r2,8
 4408708:	4462b03a 	or	r17,r8,r17
 440870c:	183feb26 	beq	r3,zero,44086bc <__reset+0xfb4046bc>
 4408710:	4808d0fa 	srli	r4,r9,3
 4408714:	20c0022c 	andhi	r3,r4,8
 4408718:	183fe81e 	bne	r3,zero,44086bc <__reset+0xfb4046bc>
 440871c:	300cd0fa 	srli	r6,r6,3
 4408720:	4806977a 	slli	r3,r9,29
 4408724:	2005883a 	mov	r2,r4
 4408728:	19a2b03a 	or	r17,r3,r6
 440872c:	003fe306 	br	44086bc <__reset+0xfb4046bc>
 4408730:	0011883a 	mov	r8,zero
 4408734:	0005883a 	mov	r2,zero
 4408738:	003e3f06 	br	4408038 <__reset+0xfb404038>
 440873c:	0401ffc4 	movi	r16,2047
 4408740:	003e2506 	br	4407fd8 <__reset+0xfb403fd8>
 4408744:	0013883a 	mov	r9,zero
 4408748:	003f8406 	br	440855c <__reset+0xfb40455c>
 440874c:	0005883a 	mov	r2,zero
 4408750:	0007883a 	mov	r3,zero
 4408754:	003e8906 	br	440817c <__reset+0xfb40417c>
 4408758:	197ff804 	addi	r5,r3,-32
 440875c:	01000804 	movi	r4,32
 4408760:	414ad83a 	srl	r5,r8,r5
 4408764:	19002426 	beq	r3,r4,44087f8 <__adddf3+0x89c>
 4408768:	01001004 	movi	r4,64
 440876c:	20c7c83a 	sub	r3,r4,r3
 4408770:	40c6983a 	sll	r3,r8,r3
 4408774:	1c46b03a 	or	r3,r3,r17
 4408778:	1806c03a 	cmpne	r3,r3,zero
 440877c:	28e2b03a 	or	r17,r5,r3
 4408780:	0007883a 	mov	r3,zero
 4408784:	003f2306 	br	4408414 <__reset+0xfb404414>
 4408788:	0007883a 	mov	r3,zero
 440878c:	5811883a 	mov	r8,r11
 4408790:	00bfffc4 	movi	r2,-1
 4408794:	0401ffc4 	movi	r16,2047
 4408798:	003e7806 	br	440817c <__reset+0xfb40417c>
 440879c:	4462b03a 	or	r17,r8,r17
 44087a0:	8822c03a 	cmpne	r17,r17,zero
 44087a4:	0009883a 	mov	r4,zero
 44087a8:	003fa006 	br	440862c <__reset+0xfb40462c>
 44087ac:	4811883a 	mov	r8,r9
 44087b0:	3023883a 	mov	r17,r6
 44087b4:	0401ffc4 	movi	r16,2047
 44087b8:	003e0706 	br	4407fd8 <__reset+0xfb403fd8>
 44087bc:	4811883a 	mov	r8,r9
 44087c0:	3023883a 	mov	r17,r6
 44087c4:	003e0406 	br	4407fd8 <__reset+0xfb403fd8>
 44087c8:	21fff804 	addi	r7,r4,-32
 44087cc:	01400804 	movi	r5,32
 44087d0:	41ced83a 	srl	r7,r8,r7
 44087d4:	21400a26 	beq	r4,r5,4408800 <__adddf3+0x8a4>
 44087d8:	01401004 	movi	r5,64
 44087dc:	2909c83a 	sub	r4,r5,r4
 44087e0:	4108983a 	sll	r4,r8,r4
 44087e4:	2448b03a 	or	r4,r4,r17
 44087e8:	2008c03a 	cmpne	r4,r4,zero
 44087ec:	3922b03a 	or	r17,r7,r4
 44087f0:	0009883a 	mov	r4,zero
 44087f4:	003f8d06 	br	440862c <__reset+0xfb40462c>
 44087f8:	0007883a 	mov	r3,zero
 44087fc:	003fdd06 	br	4408774 <__reset+0xfb404774>
 4408800:	0009883a 	mov	r4,zero
 4408804:	003ff706 	br	44087e4 <__reset+0xfb4047e4>

04408808 <__divdf3>:
 4408808:	defff204 	addi	sp,sp,-56
 440880c:	dd400915 	stw	r21,36(sp)
 4408810:	282ad53a 	srli	r21,r5,20
 4408814:	dd000815 	stw	r20,32(sp)
 4408818:	2828d7fa 	srli	r20,r5,31
 440881c:	dc000415 	stw	r16,16(sp)
 4408820:	04000434 	movhi	r16,16
 4408824:	df000c15 	stw	fp,48(sp)
 4408828:	843fffc4 	addi	r16,r16,-1
 440882c:	dfc00d15 	stw	ra,52(sp)
 4408830:	ddc00b15 	stw	r23,44(sp)
 4408834:	dd800a15 	stw	r22,40(sp)
 4408838:	dcc00715 	stw	r19,28(sp)
 440883c:	dc800615 	stw	r18,24(sp)
 4408840:	dc400515 	stw	r17,20(sp)
 4408844:	ad41ffcc 	andi	r21,r21,2047
 4408848:	2c20703a 	and	r16,r5,r16
 440884c:	a7003fcc 	andi	fp,r20,255
 4408850:	a8006126 	beq	r21,zero,44089d8 <__divdf3+0x1d0>
 4408854:	0081ffc4 	movi	r2,2047
 4408858:	2025883a 	mov	r18,r4
 440885c:	a8803726 	beq	r21,r2,440893c <__divdf3+0x134>
 4408860:	80c00434 	orhi	r3,r16,16
 4408864:	180690fa 	slli	r3,r3,3
 4408868:	2020d77a 	srli	r16,r4,29
 440886c:	202490fa 	slli	r18,r4,3
 4408870:	ad7f0044 	addi	r21,r21,-1023
 4408874:	80e0b03a 	or	r16,r16,r3
 4408878:	0027883a 	mov	r19,zero
 440887c:	0013883a 	mov	r9,zero
 4408880:	3808d53a 	srli	r4,r7,20
 4408884:	382cd7fa 	srli	r22,r7,31
 4408888:	04400434 	movhi	r17,16
 440888c:	8c7fffc4 	addi	r17,r17,-1
 4408890:	2101ffcc 	andi	r4,r4,2047
 4408894:	3011883a 	mov	r8,r6
 4408898:	3c62703a 	and	r17,r7,r17
 440889c:	b5c03fcc 	andi	r23,r22,255
 44088a0:	20006c26 	beq	r4,zero,4408a54 <__divdf3+0x24c>
 44088a4:	0081ffc4 	movi	r2,2047
 44088a8:	20806426 	beq	r4,r2,4408a3c <__divdf3+0x234>
 44088ac:	88c00434 	orhi	r3,r17,16
 44088b0:	180690fa 	slli	r3,r3,3
 44088b4:	3022d77a 	srli	r17,r6,29
 44088b8:	301090fa 	slli	r8,r6,3
 44088bc:	213f0044 	addi	r4,r4,-1023
 44088c0:	88e2b03a 	or	r17,r17,r3
 44088c4:	000d883a 	mov	r6,zero
 44088c8:	a584f03a 	xor	r2,r20,r22
 44088cc:	34cab03a 	or	r5,r6,r19
 44088d0:	1007883a 	mov	r3,r2
 44088d4:	14c03fcc 	andi	r19,r2,255
 44088d8:	008003c4 	movi	r2,15
 44088dc:	a92bc83a 	sub	r21,r21,r4
 44088e0:	11409036 	bltu	r2,r5,4408b24 <__divdf3+0x31c>
 44088e4:	280a90ba 	slli	r5,r5,2
 44088e8:	00811074 	movhi	r2,1089
 44088ec:	10a23f04 	addi	r2,r2,-30468
 44088f0:	288b883a 	add	r5,r5,r2
 44088f4:	28800017 	ldw	r2,0(r5)
 44088f8:	1000683a 	jmp	r2
 44088fc:	04408b24 	muli	r17,zero,556
 4408900:	04408974 	movhi	r17,549
 4408904:	04408b14 	movui	r17,556
 4408908:	04408968 	cmpgeui	r17,zero,549
 440890c:	04408b14 	movui	r17,556
 4408910:	04408ae8 	cmpgeui	r17,zero,555
 4408914:	04408b14 	movui	r17,556
 4408918:	04408968 	cmpgeui	r17,zero,549
 440891c:	04408974 	movhi	r17,549
 4408920:	04408974 	movhi	r17,549
 4408924:	04408ae8 	cmpgeui	r17,zero,555
 4408928:	04408968 	cmpgeui	r17,zero,549
 440892c:	04408958 	cmpnei	r17,zero,549
 4408930:	04408958 	cmpnei	r17,zero,549
 4408934:	04408958 	cmpnei	r17,zero,549
 4408938:	04408e08 	cmpgei	r17,zero,568
 440893c:	2404b03a 	or	r2,r4,r16
 4408940:	1000661e 	bne	r2,zero,4408adc <__divdf3+0x2d4>
 4408944:	04c00204 	movi	r19,8
 4408948:	0021883a 	mov	r16,zero
 440894c:	0025883a 	mov	r18,zero
 4408950:	02400084 	movi	r9,2
 4408954:	003fca06 	br	4408880 <__reset+0xfb404880>
 4408958:	8023883a 	mov	r17,r16
 440895c:	9011883a 	mov	r8,r18
 4408960:	e02f883a 	mov	r23,fp
 4408964:	480d883a 	mov	r6,r9
 4408968:	00800084 	movi	r2,2
 440896c:	3081311e 	bne	r6,r2,4408e34 <__divdf3+0x62c>
 4408970:	b827883a 	mov	r19,r23
 4408974:	98c0004c 	andi	r3,r19,1
 4408978:	0081ffc4 	movi	r2,2047
 440897c:	000b883a 	mov	r5,zero
 4408980:	0025883a 	mov	r18,zero
 4408984:	1004953a 	slli	r2,r2,20
 4408988:	18c03fcc 	andi	r3,r3,255
 440898c:	04400434 	movhi	r17,16
 4408990:	8c7fffc4 	addi	r17,r17,-1
 4408994:	180697fa 	slli	r3,r3,31
 4408998:	2c4a703a 	and	r5,r5,r17
 440899c:	288ab03a 	or	r5,r5,r2
 44089a0:	28c6b03a 	or	r3,r5,r3
 44089a4:	9005883a 	mov	r2,r18
 44089a8:	dfc00d17 	ldw	ra,52(sp)
 44089ac:	df000c17 	ldw	fp,48(sp)
 44089b0:	ddc00b17 	ldw	r23,44(sp)
 44089b4:	dd800a17 	ldw	r22,40(sp)
 44089b8:	dd400917 	ldw	r21,36(sp)
 44089bc:	dd000817 	ldw	r20,32(sp)
 44089c0:	dcc00717 	ldw	r19,28(sp)
 44089c4:	dc800617 	ldw	r18,24(sp)
 44089c8:	dc400517 	ldw	r17,20(sp)
 44089cc:	dc000417 	ldw	r16,16(sp)
 44089d0:	dec00e04 	addi	sp,sp,56
 44089d4:	f800283a 	ret
 44089d8:	2404b03a 	or	r2,r4,r16
 44089dc:	2027883a 	mov	r19,r4
 44089e0:	10003926 	beq	r2,zero,4408ac8 <__divdf3+0x2c0>
 44089e4:	80012e26 	beq	r16,zero,4408ea0 <__divdf3+0x698>
 44089e8:	8009883a 	mov	r4,r16
 44089ec:	d9800315 	stw	r6,12(sp)
 44089f0:	d9c00215 	stw	r7,8(sp)
 44089f4:	440a3540 	call	440a354 <__clzsi2>
 44089f8:	d9800317 	ldw	r6,12(sp)
 44089fc:	d9c00217 	ldw	r7,8(sp)
 4408a00:	10fffd44 	addi	r3,r2,-11
 4408a04:	01000704 	movi	r4,28
 4408a08:	20c12116 	blt	r4,r3,4408e90 <__divdf3+0x688>
 4408a0c:	01000744 	movi	r4,29
 4408a10:	147ffe04 	addi	r17,r2,-8
 4408a14:	20c9c83a 	sub	r4,r4,r3
 4408a18:	8460983a 	sll	r16,r16,r17
 4408a1c:	9908d83a 	srl	r4,r19,r4
 4408a20:	9c64983a 	sll	r18,r19,r17
 4408a24:	2420b03a 	or	r16,r4,r16
 4408a28:	057f0084 	movi	r21,-1022
 4408a2c:	a8ebc83a 	sub	r21,r21,r3
 4408a30:	0027883a 	mov	r19,zero
 4408a34:	0013883a 	mov	r9,zero
 4408a38:	003f9106 	br	4408880 <__reset+0xfb404880>
 4408a3c:	3444b03a 	or	r2,r6,r17
 4408a40:	10001f1e 	bne	r2,zero,4408ac0 <__divdf3+0x2b8>
 4408a44:	0023883a 	mov	r17,zero
 4408a48:	0011883a 	mov	r8,zero
 4408a4c:	01800084 	movi	r6,2
 4408a50:	003f9d06 	br	44088c8 <__reset+0xfb4048c8>
 4408a54:	3444b03a 	or	r2,r6,r17
 4408a58:	10001526 	beq	r2,zero,4408ab0 <__divdf3+0x2a8>
 4408a5c:	88011b26 	beq	r17,zero,4408ecc <__divdf3+0x6c4>
 4408a60:	8809883a 	mov	r4,r17
 4408a64:	d9800315 	stw	r6,12(sp)
 4408a68:	da400115 	stw	r9,4(sp)
 4408a6c:	440a3540 	call	440a354 <__clzsi2>
 4408a70:	d9800317 	ldw	r6,12(sp)
 4408a74:	da400117 	ldw	r9,4(sp)
 4408a78:	10fffd44 	addi	r3,r2,-11
 4408a7c:	01000704 	movi	r4,28
 4408a80:	20c10e16 	blt	r4,r3,4408ebc <__divdf3+0x6b4>
 4408a84:	01000744 	movi	r4,29
 4408a88:	123ffe04 	addi	r8,r2,-8
 4408a8c:	20c9c83a 	sub	r4,r4,r3
 4408a90:	8a22983a 	sll	r17,r17,r8
 4408a94:	3108d83a 	srl	r4,r6,r4
 4408a98:	3210983a 	sll	r8,r6,r8
 4408a9c:	2462b03a 	or	r17,r4,r17
 4408aa0:	013f0084 	movi	r4,-1022
 4408aa4:	20c9c83a 	sub	r4,r4,r3
 4408aa8:	000d883a 	mov	r6,zero
 4408aac:	003f8606 	br	44088c8 <__reset+0xfb4048c8>
 4408ab0:	0023883a 	mov	r17,zero
 4408ab4:	0011883a 	mov	r8,zero
 4408ab8:	01800044 	movi	r6,1
 4408abc:	003f8206 	br	44088c8 <__reset+0xfb4048c8>
 4408ac0:	018000c4 	movi	r6,3
 4408ac4:	003f8006 	br	44088c8 <__reset+0xfb4048c8>
 4408ac8:	04c00104 	movi	r19,4
 4408acc:	0021883a 	mov	r16,zero
 4408ad0:	0025883a 	mov	r18,zero
 4408ad4:	02400044 	movi	r9,1
 4408ad8:	003f6906 	br	4408880 <__reset+0xfb404880>
 4408adc:	04c00304 	movi	r19,12
 4408ae0:	024000c4 	movi	r9,3
 4408ae4:	003f6606 	br	4408880 <__reset+0xfb404880>
 4408ae8:	01400434 	movhi	r5,16
 4408aec:	0007883a 	mov	r3,zero
 4408af0:	297fffc4 	addi	r5,r5,-1
 4408af4:	04bfffc4 	movi	r18,-1
 4408af8:	0081ffc4 	movi	r2,2047
 4408afc:	003fa106 	br	4408984 <__reset+0xfb404984>
 4408b00:	00c00044 	movi	r3,1
 4408b04:	1887c83a 	sub	r3,r3,r2
 4408b08:	01000e04 	movi	r4,56
 4408b0c:	20c1210e 	bge	r4,r3,4408f94 <__divdf3+0x78c>
 4408b10:	98c0004c 	andi	r3,r19,1
 4408b14:	0005883a 	mov	r2,zero
 4408b18:	000b883a 	mov	r5,zero
 4408b1c:	0025883a 	mov	r18,zero
 4408b20:	003f9806 	br	4408984 <__reset+0xfb404984>
 4408b24:	8c00fd36 	bltu	r17,r16,4408f1c <__divdf3+0x714>
 4408b28:	8440fb26 	beq	r16,r17,4408f18 <__divdf3+0x710>
 4408b2c:	8007883a 	mov	r3,r16
 4408b30:	ad7fffc4 	addi	r21,r21,-1
 4408b34:	0021883a 	mov	r16,zero
 4408b38:	400ad63a 	srli	r5,r8,24
 4408b3c:	8822923a 	slli	r17,r17,8
 4408b40:	1809883a 	mov	r4,r3
 4408b44:	402c923a 	slli	r22,r8,8
 4408b48:	8978b03a 	or	fp,r17,r5
 4408b4c:	e028d43a 	srli	r20,fp,16
 4408b50:	d8c00015 	stw	r3,0(sp)
 4408b54:	e5ffffcc 	andi	r23,fp,65535
 4408b58:	a00b883a 	mov	r5,r20
 4408b5c:	4407ea00 	call	4407ea0 <__udivsi3>
 4408b60:	d8c00017 	ldw	r3,0(sp)
 4408b64:	a00b883a 	mov	r5,r20
 4408b68:	d8800315 	stw	r2,12(sp)
 4408b6c:	1809883a 	mov	r4,r3
 4408b70:	4407f040 	call	4407f04 <__umodsi3>
 4408b74:	d9800317 	ldw	r6,12(sp)
 4408b78:	1006943a 	slli	r3,r2,16
 4408b7c:	9004d43a 	srli	r2,r18,16
 4408b80:	b9a3383a 	mul	r17,r23,r6
 4408b84:	10c4b03a 	or	r2,r2,r3
 4408b88:	1440062e 	bgeu	r2,r17,4408ba4 <__divdf3+0x39c>
 4408b8c:	1705883a 	add	r2,r2,fp
 4408b90:	30ffffc4 	addi	r3,r6,-1
 4408b94:	1700ee36 	bltu	r2,fp,4408f50 <__divdf3+0x748>
 4408b98:	1440ed2e 	bgeu	r2,r17,4408f50 <__divdf3+0x748>
 4408b9c:	31bfff84 	addi	r6,r6,-2
 4408ba0:	1705883a 	add	r2,r2,fp
 4408ba4:	1463c83a 	sub	r17,r2,r17
 4408ba8:	a00b883a 	mov	r5,r20
 4408bac:	8809883a 	mov	r4,r17
 4408bb0:	d9800315 	stw	r6,12(sp)
 4408bb4:	4407ea00 	call	4407ea0 <__udivsi3>
 4408bb8:	a00b883a 	mov	r5,r20
 4408bbc:	8809883a 	mov	r4,r17
 4408bc0:	d8800215 	stw	r2,8(sp)
 4408bc4:	4407f040 	call	4407f04 <__umodsi3>
 4408bc8:	d9c00217 	ldw	r7,8(sp)
 4408bcc:	1004943a 	slli	r2,r2,16
 4408bd0:	94bfffcc 	andi	r18,r18,65535
 4408bd4:	b9d1383a 	mul	r8,r23,r7
 4408bd8:	90a4b03a 	or	r18,r18,r2
 4408bdc:	d9800317 	ldw	r6,12(sp)
 4408be0:	9200062e 	bgeu	r18,r8,4408bfc <__divdf3+0x3f4>
 4408be4:	9725883a 	add	r18,r18,fp
 4408be8:	38bfffc4 	addi	r2,r7,-1
 4408bec:	9700d636 	bltu	r18,fp,4408f48 <__divdf3+0x740>
 4408bf0:	9200d52e 	bgeu	r18,r8,4408f48 <__divdf3+0x740>
 4408bf4:	39ffff84 	addi	r7,r7,-2
 4408bf8:	9725883a 	add	r18,r18,fp
 4408bfc:	3004943a 	slli	r2,r6,16
 4408c00:	b012d43a 	srli	r9,r22,16
 4408c04:	b1bfffcc 	andi	r6,r22,65535
 4408c08:	11e2b03a 	or	r17,r2,r7
 4408c0c:	8806d43a 	srli	r3,r17,16
 4408c10:	893fffcc 	andi	r4,r17,65535
 4408c14:	218b383a 	mul	r5,r4,r6
 4408c18:	30c5383a 	mul	r2,r6,r3
 4408c1c:	2249383a 	mul	r4,r4,r9
 4408c20:	280ed43a 	srli	r7,r5,16
 4408c24:	9225c83a 	sub	r18,r18,r8
 4408c28:	2089883a 	add	r4,r4,r2
 4408c2c:	3909883a 	add	r4,r7,r4
 4408c30:	1a47383a 	mul	r3,r3,r9
 4408c34:	2080022e 	bgeu	r4,r2,4408c40 <__divdf3+0x438>
 4408c38:	00800074 	movhi	r2,1
 4408c3c:	1887883a 	add	r3,r3,r2
 4408c40:	2004d43a 	srli	r2,r4,16
 4408c44:	2008943a 	slli	r4,r4,16
 4408c48:	297fffcc 	andi	r5,r5,65535
 4408c4c:	10c7883a 	add	r3,r2,r3
 4408c50:	2149883a 	add	r4,r4,r5
 4408c54:	90c0a536 	bltu	r18,r3,4408eec <__divdf3+0x6e4>
 4408c58:	90c0bf26 	beq	r18,r3,4408f58 <__divdf3+0x750>
 4408c5c:	90c7c83a 	sub	r3,r18,r3
 4408c60:	810fc83a 	sub	r7,r16,r4
 4408c64:	81e5803a 	cmpltu	r18,r16,r7
 4408c68:	1ca5c83a 	sub	r18,r3,r18
 4408c6c:	e480c126 	beq	fp,r18,4408f74 <__divdf3+0x76c>
 4408c70:	a00b883a 	mov	r5,r20
 4408c74:	9009883a 	mov	r4,r18
 4408c78:	d9800315 	stw	r6,12(sp)
 4408c7c:	d9c00215 	stw	r7,8(sp)
 4408c80:	da400115 	stw	r9,4(sp)
 4408c84:	4407ea00 	call	4407ea0 <__udivsi3>
 4408c88:	a00b883a 	mov	r5,r20
 4408c8c:	9009883a 	mov	r4,r18
 4408c90:	d8800015 	stw	r2,0(sp)
 4408c94:	4407f040 	call	4407f04 <__umodsi3>
 4408c98:	d9c00217 	ldw	r7,8(sp)
 4408c9c:	da000017 	ldw	r8,0(sp)
 4408ca0:	1006943a 	slli	r3,r2,16
 4408ca4:	3804d43a 	srli	r2,r7,16
 4408ca8:	ba21383a 	mul	r16,r23,r8
 4408cac:	d9800317 	ldw	r6,12(sp)
 4408cb0:	10c4b03a 	or	r2,r2,r3
 4408cb4:	da400117 	ldw	r9,4(sp)
 4408cb8:	1400062e 	bgeu	r2,r16,4408cd4 <__divdf3+0x4cc>
 4408cbc:	1705883a 	add	r2,r2,fp
 4408cc0:	40ffffc4 	addi	r3,r8,-1
 4408cc4:	1700ad36 	bltu	r2,fp,4408f7c <__divdf3+0x774>
 4408cc8:	1400ac2e 	bgeu	r2,r16,4408f7c <__divdf3+0x774>
 4408ccc:	423fff84 	addi	r8,r8,-2
 4408cd0:	1705883a 	add	r2,r2,fp
 4408cd4:	1421c83a 	sub	r16,r2,r16
 4408cd8:	a00b883a 	mov	r5,r20
 4408cdc:	8009883a 	mov	r4,r16
 4408ce0:	d9800315 	stw	r6,12(sp)
 4408ce4:	d9c00215 	stw	r7,8(sp)
 4408ce8:	da000015 	stw	r8,0(sp)
 4408cec:	da400115 	stw	r9,4(sp)
 4408cf0:	4407ea00 	call	4407ea0 <__udivsi3>
 4408cf4:	8009883a 	mov	r4,r16
 4408cf8:	a00b883a 	mov	r5,r20
 4408cfc:	1025883a 	mov	r18,r2
 4408d00:	4407f040 	call	4407f04 <__umodsi3>
 4408d04:	d9c00217 	ldw	r7,8(sp)
 4408d08:	1004943a 	slli	r2,r2,16
 4408d0c:	bcaf383a 	mul	r23,r23,r18
 4408d10:	393fffcc 	andi	r4,r7,65535
 4408d14:	2088b03a 	or	r4,r4,r2
 4408d18:	d9800317 	ldw	r6,12(sp)
 4408d1c:	da000017 	ldw	r8,0(sp)
 4408d20:	da400117 	ldw	r9,4(sp)
 4408d24:	25c0062e 	bgeu	r4,r23,4408d40 <__divdf3+0x538>
 4408d28:	2709883a 	add	r4,r4,fp
 4408d2c:	90bfffc4 	addi	r2,r18,-1
 4408d30:	27009436 	bltu	r4,fp,4408f84 <__divdf3+0x77c>
 4408d34:	25c0932e 	bgeu	r4,r23,4408f84 <__divdf3+0x77c>
 4408d38:	94bfff84 	addi	r18,r18,-2
 4408d3c:	2709883a 	add	r4,r4,fp
 4408d40:	4004943a 	slli	r2,r8,16
 4408d44:	25efc83a 	sub	r23,r4,r23
 4408d48:	1490b03a 	or	r8,r2,r18
 4408d4c:	4008d43a 	srli	r4,r8,16
 4408d50:	40ffffcc 	andi	r3,r8,65535
 4408d54:	30c5383a 	mul	r2,r6,r3
 4408d58:	1a47383a 	mul	r3,r3,r9
 4408d5c:	310d383a 	mul	r6,r6,r4
 4408d60:	100ad43a 	srli	r5,r2,16
 4408d64:	4913383a 	mul	r9,r9,r4
 4408d68:	1987883a 	add	r3,r3,r6
 4408d6c:	28c7883a 	add	r3,r5,r3
 4408d70:	1980022e 	bgeu	r3,r6,4408d7c <__divdf3+0x574>
 4408d74:	01000074 	movhi	r4,1
 4408d78:	4913883a 	add	r9,r9,r4
 4408d7c:	1808d43a 	srli	r4,r3,16
 4408d80:	1806943a 	slli	r3,r3,16
 4408d84:	10bfffcc 	andi	r2,r2,65535
 4408d88:	2253883a 	add	r9,r4,r9
 4408d8c:	1887883a 	add	r3,r3,r2
 4408d90:	ba403836 	bltu	r23,r9,4408e74 <__divdf3+0x66c>
 4408d94:	ba403626 	beq	r23,r9,4408e70 <__divdf3+0x668>
 4408d98:	42000054 	ori	r8,r8,1
 4408d9c:	a880ffc4 	addi	r2,r21,1023
 4408da0:	00bf570e 	bge	zero,r2,4408b00 <__reset+0xfb404b00>
 4408da4:	40c001cc 	andi	r3,r8,7
 4408da8:	18000726 	beq	r3,zero,4408dc8 <__divdf3+0x5c0>
 4408dac:	40c003cc 	andi	r3,r8,15
 4408db0:	01000104 	movi	r4,4
 4408db4:	19000426 	beq	r3,r4,4408dc8 <__divdf3+0x5c0>
 4408db8:	4107883a 	add	r3,r8,r4
 4408dbc:	1a11803a 	cmpltu	r8,r3,r8
 4408dc0:	8a23883a 	add	r17,r17,r8
 4408dc4:	1811883a 	mov	r8,r3
 4408dc8:	88c0402c 	andhi	r3,r17,256
 4408dcc:	18000426 	beq	r3,zero,4408de0 <__divdf3+0x5d8>
 4408dd0:	00ffc034 	movhi	r3,65280
 4408dd4:	18ffffc4 	addi	r3,r3,-1
 4408dd8:	a8810004 	addi	r2,r21,1024
 4408ddc:	88e2703a 	and	r17,r17,r3
 4408de0:	00c1ff84 	movi	r3,2046
 4408de4:	18bee316 	blt	r3,r2,4408974 <__reset+0xfb404974>
 4408de8:	8824977a 	slli	r18,r17,29
 4408dec:	4010d0fa 	srli	r8,r8,3
 4408df0:	8822927a 	slli	r17,r17,9
 4408df4:	1081ffcc 	andi	r2,r2,2047
 4408df8:	9224b03a 	or	r18,r18,r8
 4408dfc:	880ad33a 	srli	r5,r17,12
 4408e00:	98c0004c 	andi	r3,r19,1
 4408e04:	003edf06 	br	4408984 <__reset+0xfb404984>
 4408e08:	8080022c 	andhi	r2,r16,8
 4408e0c:	10001226 	beq	r2,zero,4408e58 <__divdf3+0x650>
 4408e10:	8880022c 	andhi	r2,r17,8
 4408e14:	1000101e 	bne	r2,zero,4408e58 <__divdf3+0x650>
 4408e18:	00800434 	movhi	r2,16
 4408e1c:	89400234 	orhi	r5,r17,8
 4408e20:	10bfffc4 	addi	r2,r2,-1
 4408e24:	b007883a 	mov	r3,r22
 4408e28:	288a703a 	and	r5,r5,r2
 4408e2c:	4025883a 	mov	r18,r8
 4408e30:	003f3106 	br	4408af8 <__reset+0xfb404af8>
 4408e34:	008000c4 	movi	r2,3
 4408e38:	3080a626 	beq	r6,r2,44090d4 <__divdf3+0x8cc>
 4408e3c:	00800044 	movi	r2,1
 4408e40:	3080521e 	bne	r6,r2,4408f8c <__divdf3+0x784>
 4408e44:	b807883a 	mov	r3,r23
 4408e48:	0005883a 	mov	r2,zero
 4408e4c:	000b883a 	mov	r5,zero
 4408e50:	0025883a 	mov	r18,zero
 4408e54:	003ecb06 	br	4408984 <__reset+0xfb404984>
 4408e58:	00800434 	movhi	r2,16
 4408e5c:	81400234 	orhi	r5,r16,8
 4408e60:	10bfffc4 	addi	r2,r2,-1
 4408e64:	a007883a 	mov	r3,r20
 4408e68:	288a703a 	and	r5,r5,r2
 4408e6c:	003f2206 	br	4408af8 <__reset+0xfb404af8>
 4408e70:	183fca26 	beq	r3,zero,4408d9c <__reset+0xfb404d9c>
 4408e74:	e5ef883a 	add	r23,fp,r23
 4408e78:	40bfffc4 	addi	r2,r8,-1
 4408e7c:	bf00392e 	bgeu	r23,fp,4408f64 <__divdf3+0x75c>
 4408e80:	1011883a 	mov	r8,r2
 4408e84:	ba7fc41e 	bne	r23,r9,4408d98 <__reset+0xfb404d98>
 4408e88:	b0ffc31e 	bne	r22,r3,4408d98 <__reset+0xfb404d98>
 4408e8c:	003fc306 	br	4408d9c <__reset+0xfb404d9c>
 4408e90:	10bff604 	addi	r2,r2,-40
 4408e94:	98a0983a 	sll	r16,r19,r2
 4408e98:	0025883a 	mov	r18,zero
 4408e9c:	003ee206 	br	4408a28 <__reset+0xfb404a28>
 4408ea0:	d9800315 	stw	r6,12(sp)
 4408ea4:	d9c00215 	stw	r7,8(sp)
 4408ea8:	440a3540 	call	440a354 <__clzsi2>
 4408eac:	10800804 	addi	r2,r2,32
 4408eb0:	d9c00217 	ldw	r7,8(sp)
 4408eb4:	d9800317 	ldw	r6,12(sp)
 4408eb8:	003ed106 	br	4408a00 <__reset+0xfb404a00>
 4408ebc:	10bff604 	addi	r2,r2,-40
 4408ec0:	30a2983a 	sll	r17,r6,r2
 4408ec4:	0011883a 	mov	r8,zero
 4408ec8:	003ef506 	br	4408aa0 <__reset+0xfb404aa0>
 4408ecc:	3009883a 	mov	r4,r6
 4408ed0:	d9800315 	stw	r6,12(sp)
 4408ed4:	da400115 	stw	r9,4(sp)
 4408ed8:	440a3540 	call	440a354 <__clzsi2>
 4408edc:	10800804 	addi	r2,r2,32
 4408ee0:	da400117 	ldw	r9,4(sp)
 4408ee4:	d9800317 	ldw	r6,12(sp)
 4408ee8:	003ee306 	br	4408a78 <__reset+0xfb404a78>
 4408eec:	85a1883a 	add	r16,r16,r22
 4408ef0:	8585803a 	cmpltu	r2,r16,r22
 4408ef4:	1705883a 	add	r2,r2,fp
 4408ef8:	14a5883a 	add	r18,r2,r18
 4408efc:	88bfffc4 	addi	r2,r17,-1
 4408f00:	e4800c2e 	bgeu	fp,r18,4408f34 <__divdf3+0x72c>
 4408f04:	90c03e36 	bltu	r18,r3,4409000 <__divdf3+0x7f8>
 4408f08:	1c806926 	beq	r3,r18,44090b0 <__divdf3+0x8a8>
 4408f0c:	90c7c83a 	sub	r3,r18,r3
 4408f10:	1023883a 	mov	r17,r2
 4408f14:	003f5206 	br	4408c60 <__reset+0xfb404c60>
 4408f18:	923f0436 	bltu	r18,r8,4408b2c <__reset+0xfb404b2c>
 4408f1c:	800897fa 	slli	r4,r16,31
 4408f20:	9004d07a 	srli	r2,r18,1
 4408f24:	8006d07a 	srli	r3,r16,1
 4408f28:	902097fa 	slli	r16,r18,31
 4408f2c:	20a4b03a 	or	r18,r4,r2
 4408f30:	003f0106 	br	4408b38 <__reset+0xfb404b38>
 4408f34:	e4bff51e 	bne	fp,r18,4408f0c <__reset+0xfb404f0c>
 4408f38:	85bff22e 	bgeu	r16,r22,4408f04 <__reset+0xfb404f04>
 4408f3c:	e0c7c83a 	sub	r3,fp,r3
 4408f40:	1023883a 	mov	r17,r2
 4408f44:	003f4606 	br	4408c60 <__reset+0xfb404c60>
 4408f48:	100f883a 	mov	r7,r2
 4408f4c:	003f2b06 	br	4408bfc <__reset+0xfb404bfc>
 4408f50:	180d883a 	mov	r6,r3
 4408f54:	003f1306 	br	4408ba4 <__reset+0xfb404ba4>
 4408f58:	813fe436 	bltu	r16,r4,4408eec <__reset+0xfb404eec>
 4408f5c:	0007883a 	mov	r3,zero
 4408f60:	003f3f06 	br	4408c60 <__reset+0xfb404c60>
 4408f64:	ba402c36 	bltu	r23,r9,4409018 <__divdf3+0x810>
 4408f68:	4dc05426 	beq	r9,r23,44090bc <__divdf3+0x8b4>
 4408f6c:	1011883a 	mov	r8,r2
 4408f70:	003f8906 	br	4408d98 <__reset+0xfb404d98>
 4408f74:	023fffc4 	movi	r8,-1
 4408f78:	003f8806 	br	4408d9c <__reset+0xfb404d9c>
 4408f7c:	1811883a 	mov	r8,r3
 4408f80:	003f5406 	br	4408cd4 <__reset+0xfb404cd4>
 4408f84:	1025883a 	mov	r18,r2
 4408f88:	003f6d06 	br	4408d40 <__reset+0xfb404d40>
 4408f8c:	b827883a 	mov	r19,r23
 4408f90:	003f8206 	br	4408d9c <__reset+0xfb404d9c>
 4408f94:	010007c4 	movi	r4,31
 4408f98:	20c02616 	blt	r4,r3,4409034 <__divdf3+0x82c>
 4408f9c:	00800804 	movi	r2,32
 4408fa0:	10c5c83a 	sub	r2,r2,r3
 4408fa4:	888a983a 	sll	r5,r17,r2
 4408fa8:	40c8d83a 	srl	r4,r8,r3
 4408fac:	4084983a 	sll	r2,r8,r2
 4408fb0:	88e2d83a 	srl	r17,r17,r3
 4408fb4:	2906b03a 	or	r3,r5,r4
 4408fb8:	1004c03a 	cmpne	r2,r2,zero
 4408fbc:	1886b03a 	or	r3,r3,r2
 4408fc0:	188001cc 	andi	r2,r3,7
 4408fc4:	10000726 	beq	r2,zero,4408fe4 <__divdf3+0x7dc>
 4408fc8:	188003cc 	andi	r2,r3,15
 4408fcc:	01000104 	movi	r4,4
 4408fd0:	11000426 	beq	r2,r4,4408fe4 <__divdf3+0x7dc>
 4408fd4:	1805883a 	mov	r2,r3
 4408fd8:	10c00104 	addi	r3,r2,4
 4408fdc:	1885803a 	cmpltu	r2,r3,r2
 4408fe0:	88a3883a 	add	r17,r17,r2
 4408fe4:	8880202c 	andhi	r2,r17,128
 4408fe8:	10002726 	beq	r2,zero,4409088 <__divdf3+0x880>
 4408fec:	98c0004c 	andi	r3,r19,1
 4408ff0:	00800044 	movi	r2,1
 4408ff4:	000b883a 	mov	r5,zero
 4408ff8:	0025883a 	mov	r18,zero
 4408ffc:	003e6106 	br	4408984 <__reset+0xfb404984>
 4409000:	85a1883a 	add	r16,r16,r22
 4409004:	8585803a 	cmpltu	r2,r16,r22
 4409008:	1705883a 	add	r2,r2,fp
 440900c:	14a5883a 	add	r18,r2,r18
 4409010:	8c7fff84 	addi	r17,r17,-2
 4409014:	003f1106 	br	4408c5c <__reset+0xfb404c5c>
 4409018:	b589883a 	add	r4,r22,r22
 440901c:	25ad803a 	cmpltu	r22,r4,r22
 4409020:	b739883a 	add	fp,r22,fp
 4409024:	40bfff84 	addi	r2,r8,-2
 4409028:	bf2f883a 	add	r23,r23,fp
 440902c:	202d883a 	mov	r22,r4
 4409030:	003f9306 	br	4408e80 <__reset+0xfb404e80>
 4409034:	013ff844 	movi	r4,-31
 4409038:	2085c83a 	sub	r2,r4,r2
 440903c:	8888d83a 	srl	r4,r17,r2
 4409040:	00800804 	movi	r2,32
 4409044:	18802126 	beq	r3,r2,44090cc <__divdf3+0x8c4>
 4409048:	00801004 	movi	r2,64
 440904c:	10c5c83a 	sub	r2,r2,r3
 4409050:	8884983a 	sll	r2,r17,r2
 4409054:	1204b03a 	or	r2,r2,r8
 4409058:	1004c03a 	cmpne	r2,r2,zero
 440905c:	2084b03a 	or	r2,r4,r2
 4409060:	144001cc 	andi	r17,r2,7
 4409064:	88000d1e 	bne	r17,zero,440909c <__divdf3+0x894>
 4409068:	000b883a 	mov	r5,zero
 440906c:	1024d0fa 	srli	r18,r2,3
 4409070:	98c0004c 	andi	r3,r19,1
 4409074:	0005883a 	mov	r2,zero
 4409078:	9464b03a 	or	r18,r18,r17
 440907c:	003e4106 	br	4408984 <__reset+0xfb404984>
 4409080:	1007883a 	mov	r3,r2
 4409084:	0023883a 	mov	r17,zero
 4409088:	880a927a 	slli	r5,r17,9
 440908c:	1805883a 	mov	r2,r3
 4409090:	8822977a 	slli	r17,r17,29
 4409094:	280ad33a 	srli	r5,r5,12
 4409098:	003ff406 	br	440906c <__reset+0xfb40506c>
 440909c:	10c003cc 	andi	r3,r2,15
 44090a0:	01000104 	movi	r4,4
 44090a4:	193ff626 	beq	r3,r4,4409080 <__reset+0xfb405080>
 44090a8:	0023883a 	mov	r17,zero
 44090ac:	003fca06 	br	4408fd8 <__reset+0xfb404fd8>
 44090b0:	813fd336 	bltu	r16,r4,4409000 <__reset+0xfb405000>
 44090b4:	1023883a 	mov	r17,r2
 44090b8:	003fa806 	br	4408f5c <__reset+0xfb404f5c>
 44090bc:	b0ffd636 	bltu	r22,r3,4409018 <__reset+0xfb405018>
 44090c0:	1011883a 	mov	r8,r2
 44090c4:	b0ff341e 	bne	r22,r3,4408d98 <__reset+0xfb404d98>
 44090c8:	003f3406 	br	4408d9c <__reset+0xfb404d9c>
 44090cc:	0005883a 	mov	r2,zero
 44090d0:	003fe006 	br	4409054 <__reset+0xfb405054>
 44090d4:	00800434 	movhi	r2,16
 44090d8:	89400234 	orhi	r5,r17,8
 44090dc:	10bfffc4 	addi	r2,r2,-1
 44090e0:	b807883a 	mov	r3,r23
 44090e4:	288a703a 	and	r5,r5,r2
 44090e8:	4025883a 	mov	r18,r8
 44090ec:	003e8206 	br	4408af8 <__reset+0xfb404af8>

044090f0 <__ledf2>:
 44090f0:	2804d53a 	srli	r2,r5,20
 44090f4:	3810d53a 	srli	r8,r7,20
 44090f8:	00c00434 	movhi	r3,16
 44090fc:	18ffffc4 	addi	r3,r3,-1
 4409100:	1081ffcc 	andi	r2,r2,2047
 4409104:	0241ffc4 	movi	r9,2047
 4409108:	28d4703a 	and	r10,r5,r3
 440910c:	4201ffcc 	andi	r8,r8,2047
 4409110:	38c6703a 	and	r3,r7,r3
 4409114:	280ad7fa 	srli	r5,r5,31
 4409118:	380ed7fa 	srli	r7,r7,31
 440911c:	12401f26 	beq	r2,r9,440919c <__ledf2+0xac>
 4409120:	0241ffc4 	movi	r9,2047
 4409124:	42401426 	beq	r8,r9,4409178 <__ledf2+0x88>
 4409128:	1000091e 	bne	r2,zero,4409150 <__ledf2+0x60>
 440912c:	2296b03a 	or	r11,r4,r10
 4409130:	5813003a 	cmpeq	r9,r11,zero
 4409134:	29403fcc 	andi	r5,r5,255
 4409138:	40000a1e 	bne	r8,zero,4409164 <__ledf2+0x74>
 440913c:	30d8b03a 	or	r12,r6,r3
 4409140:	6000081e 	bne	r12,zero,4409164 <__ledf2+0x74>
 4409144:	0005883a 	mov	r2,zero
 4409148:	5800111e 	bne	r11,zero,4409190 <__ledf2+0xa0>
 440914c:	f800283a 	ret
 4409150:	29403fcc 	andi	r5,r5,255
 4409154:	40000c1e 	bne	r8,zero,4409188 <__ledf2+0x98>
 4409158:	30d2b03a 	or	r9,r6,r3
 440915c:	48000c26 	beq	r9,zero,4409190 <__ledf2+0xa0>
 4409160:	0013883a 	mov	r9,zero
 4409164:	39c03fcc 	andi	r7,r7,255
 4409168:	48000826 	beq	r9,zero,440918c <__ledf2+0x9c>
 440916c:	38001126 	beq	r7,zero,44091b4 <__ledf2+0xc4>
 4409170:	00800044 	movi	r2,1
 4409174:	f800283a 	ret
 4409178:	30d2b03a 	or	r9,r6,r3
 440917c:	483fea26 	beq	r9,zero,4409128 <__reset+0xfb405128>
 4409180:	00800084 	movi	r2,2
 4409184:	f800283a 	ret
 4409188:	39c03fcc 	andi	r7,r7,255
 440918c:	39400726 	beq	r7,r5,44091ac <__ledf2+0xbc>
 4409190:	2800081e 	bne	r5,zero,44091b4 <__ledf2+0xc4>
 4409194:	00800044 	movi	r2,1
 4409198:	f800283a 	ret
 440919c:	2292b03a 	or	r9,r4,r10
 44091a0:	483fdf26 	beq	r9,zero,4409120 <__reset+0xfb405120>
 44091a4:	00800084 	movi	r2,2
 44091a8:	f800283a 	ret
 44091ac:	4080030e 	bge	r8,r2,44091bc <__ledf2+0xcc>
 44091b0:	383fef26 	beq	r7,zero,4409170 <__reset+0xfb405170>
 44091b4:	00bfffc4 	movi	r2,-1
 44091b8:	f800283a 	ret
 44091bc:	123feb16 	blt	r2,r8,440916c <__reset+0xfb40516c>
 44091c0:	1abff336 	bltu	r3,r10,4409190 <__reset+0xfb405190>
 44091c4:	50c00326 	beq	r10,r3,44091d4 <__ledf2+0xe4>
 44091c8:	50c0042e 	bgeu	r10,r3,44091dc <__ledf2+0xec>
 44091cc:	283fe81e 	bne	r5,zero,4409170 <__reset+0xfb405170>
 44091d0:	003ff806 	br	44091b4 <__reset+0xfb4051b4>
 44091d4:	313fee36 	bltu	r6,r4,4409190 <__reset+0xfb405190>
 44091d8:	21bffc36 	bltu	r4,r6,44091cc <__reset+0xfb4051cc>
 44091dc:	0005883a 	mov	r2,zero
 44091e0:	f800283a 	ret

044091e4 <__muldf3>:
 44091e4:	defff304 	addi	sp,sp,-52
 44091e8:	dd400815 	stw	r21,32(sp)
 44091ec:	282ad53a 	srli	r21,r5,20
 44091f0:	dd800915 	stw	r22,36(sp)
 44091f4:	282cd7fa 	srli	r22,r5,31
 44091f8:	dc000315 	stw	r16,12(sp)
 44091fc:	04000434 	movhi	r16,16
 4409200:	dd000715 	stw	r20,28(sp)
 4409204:	843fffc4 	addi	r16,r16,-1
 4409208:	dfc00c15 	stw	ra,48(sp)
 440920c:	df000b15 	stw	fp,44(sp)
 4409210:	ddc00a15 	stw	r23,40(sp)
 4409214:	dcc00615 	stw	r19,24(sp)
 4409218:	dc800515 	stw	r18,20(sp)
 440921c:	dc400415 	stw	r17,16(sp)
 4409220:	ad41ffcc 	andi	r21,r21,2047
 4409224:	2c20703a 	and	r16,r5,r16
 4409228:	b029883a 	mov	r20,r22
 440922c:	b2403fcc 	andi	r9,r22,255
 4409230:	a8006026 	beq	r21,zero,44093b4 <__muldf3+0x1d0>
 4409234:	0081ffc4 	movi	r2,2047
 4409238:	2027883a 	mov	r19,r4
 440923c:	a8803626 	beq	r21,r2,4409318 <__muldf3+0x134>
 4409240:	80c00434 	orhi	r3,r16,16
 4409244:	180690fa 	slli	r3,r3,3
 4409248:	2020d77a 	srli	r16,r4,29
 440924c:	202690fa 	slli	r19,r4,3
 4409250:	ad7f0044 	addi	r21,r21,-1023
 4409254:	80e0b03a 	or	r16,r16,r3
 4409258:	0025883a 	mov	r18,zero
 440925c:	0039883a 	mov	fp,zero
 4409260:	3808d53a 	srli	r4,r7,20
 4409264:	382ed7fa 	srli	r23,r7,31
 4409268:	04400434 	movhi	r17,16
 440926c:	8c7fffc4 	addi	r17,r17,-1
 4409270:	2101ffcc 	andi	r4,r4,2047
 4409274:	3011883a 	mov	r8,r6
 4409278:	3c62703a 	and	r17,r7,r17
 440927c:	ba803fcc 	andi	r10,r23,255
 4409280:	20006d26 	beq	r4,zero,4409438 <__muldf3+0x254>
 4409284:	0081ffc4 	movi	r2,2047
 4409288:	20806526 	beq	r4,r2,4409420 <__muldf3+0x23c>
 440928c:	88c00434 	orhi	r3,r17,16
 4409290:	180690fa 	slli	r3,r3,3
 4409294:	3022d77a 	srli	r17,r6,29
 4409298:	301090fa 	slli	r8,r6,3
 440929c:	213f0044 	addi	r4,r4,-1023
 44092a0:	88e2b03a 	or	r17,r17,r3
 44092a4:	000b883a 	mov	r5,zero
 44092a8:	a909883a 	add	r4,r21,r4
 44092ac:	2c84b03a 	or	r2,r5,r18
 44092b0:	00c003c4 	movi	r3,15
 44092b4:	bdacf03a 	xor	r22,r23,r22
 44092b8:	22c00044 	addi	r11,r4,1
 44092bc:	18809936 	bltu	r3,r2,4409524 <__muldf3+0x340>
 44092c0:	100490ba 	slli	r2,r2,2
 44092c4:	00c11074 	movhi	r3,1089
 44092c8:	18e4b604 	addi	r3,r3,-27944
 44092cc:	10c5883a 	add	r2,r2,r3
 44092d0:	10800017 	ldw	r2,0(r2)
 44092d4:	1000683a 	jmp	r2
 44092d8:	04409524 	muli	r17,zero,596
 44092dc:	04409338 	rdprs	r17,zero,588
 44092e0:	04409338 	rdprs	r17,zero,588
 44092e4:	04409334 	movhi	r17,588
 44092e8:	04409500 	call	440950 <__alt_mem_sdram-0x3bbf6b0>
 44092ec:	04409500 	call	440950 <__alt_mem_sdram-0x3bbf6b0>
 44092f0:	044094e8 	cmpgeui	r17,zero,595
 44092f4:	04409334 	movhi	r17,588
 44092f8:	04409500 	call	440950 <__alt_mem_sdram-0x3bbf6b0>
 44092fc:	044094e8 	cmpgeui	r17,zero,595
 4409300:	04409500 	call	440950 <__alt_mem_sdram-0x3bbf6b0>
 4409304:	04409334 	movhi	r17,588
 4409308:	04409510 	cmplti	r17,zero,596
 440930c:	04409510 	cmplti	r17,zero,596
 4409310:	04409510 	cmplti	r17,zero,596
 4409314:	0440972c 	andhi	r17,zero,604
 4409318:	2404b03a 	or	r2,r4,r16
 440931c:	10006f1e 	bne	r2,zero,44094dc <__muldf3+0x2f8>
 4409320:	04800204 	movi	r18,8
 4409324:	0021883a 	mov	r16,zero
 4409328:	0027883a 	mov	r19,zero
 440932c:	07000084 	movi	fp,2
 4409330:	003fcb06 	br	4409260 <__reset+0xfb405260>
 4409334:	502d883a 	mov	r22,r10
 4409338:	00800084 	movi	r2,2
 440933c:	28805726 	beq	r5,r2,440949c <__muldf3+0x2b8>
 4409340:	008000c4 	movi	r2,3
 4409344:	28816626 	beq	r5,r2,44098e0 <__muldf3+0x6fc>
 4409348:	00800044 	movi	r2,1
 440934c:	2881411e 	bne	r5,r2,4409854 <__muldf3+0x670>
 4409350:	b029883a 	mov	r20,r22
 4409354:	0005883a 	mov	r2,zero
 4409358:	000b883a 	mov	r5,zero
 440935c:	0027883a 	mov	r19,zero
 4409360:	1004953a 	slli	r2,r2,20
 4409364:	a0c03fcc 	andi	r3,r20,255
 4409368:	04400434 	movhi	r17,16
 440936c:	8c7fffc4 	addi	r17,r17,-1
 4409370:	180697fa 	slli	r3,r3,31
 4409374:	2c4a703a 	and	r5,r5,r17
 4409378:	288ab03a 	or	r5,r5,r2
 440937c:	28c6b03a 	or	r3,r5,r3
 4409380:	9805883a 	mov	r2,r19
 4409384:	dfc00c17 	ldw	ra,48(sp)
 4409388:	df000b17 	ldw	fp,44(sp)
 440938c:	ddc00a17 	ldw	r23,40(sp)
 4409390:	dd800917 	ldw	r22,36(sp)
 4409394:	dd400817 	ldw	r21,32(sp)
 4409398:	dd000717 	ldw	r20,28(sp)
 440939c:	dcc00617 	ldw	r19,24(sp)
 44093a0:	dc800517 	ldw	r18,20(sp)
 44093a4:	dc400417 	ldw	r17,16(sp)
 44093a8:	dc000317 	ldw	r16,12(sp)
 44093ac:	dec00d04 	addi	sp,sp,52
 44093b0:	f800283a 	ret
 44093b4:	2404b03a 	or	r2,r4,r16
 44093b8:	2025883a 	mov	r18,r4
 44093bc:	10004226 	beq	r2,zero,44094c8 <__muldf3+0x2e4>
 44093c0:	8000fc26 	beq	r16,zero,44097b4 <__muldf3+0x5d0>
 44093c4:	8009883a 	mov	r4,r16
 44093c8:	d9800215 	stw	r6,8(sp)
 44093cc:	d9c00015 	stw	r7,0(sp)
 44093d0:	da400115 	stw	r9,4(sp)
 44093d4:	440a3540 	call	440a354 <__clzsi2>
 44093d8:	d9800217 	ldw	r6,8(sp)
 44093dc:	d9c00017 	ldw	r7,0(sp)
 44093e0:	da400117 	ldw	r9,4(sp)
 44093e4:	10fffd44 	addi	r3,r2,-11
 44093e8:	01000704 	movi	r4,28
 44093ec:	20c0ed16 	blt	r4,r3,44097a4 <__muldf3+0x5c0>
 44093f0:	01000744 	movi	r4,29
 44093f4:	147ffe04 	addi	r17,r2,-8
 44093f8:	20c9c83a 	sub	r4,r4,r3
 44093fc:	8460983a 	sll	r16,r16,r17
 4409400:	9108d83a 	srl	r4,r18,r4
 4409404:	9466983a 	sll	r19,r18,r17
 4409408:	2420b03a 	or	r16,r4,r16
 440940c:	013f0084 	movi	r4,-1022
 4409410:	20ebc83a 	sub	r21,r4,r3
 4409414:	0025883a 	mov	r18,zero
 4409418:	0039883a 	mov	fp,zero
 440941c:	003f9006 	br	4409260 <__reset+0xfb405260>
 4409420:	3444b03a 	or	r2,r6,r17
 4409424:	1000261e 	bne	r2,zero,44094c0 <__muldf3+0x2dc>
 4409428:	0023883a 	mov	r17,zero
 440942c:	0011883a 	mov	r8,zero
 4409430:	01400084 	movi	r5,2
 4409434:	003f9c06 	br	44092a8 <__reset+0xfb4052a8>
 4409438:	3444b03a 	or	r2,r6,r17
 440943c:	10001c26 	beq	r2,zero,44094b0 <__muldf3+0x2cc>
 4409440:	8800ce26 	beq	r17,zero,440977c <__muldf3+0x598>
 4409444:	8809883a 	mov	r4,r17
 4409448:	d9800215 	stw	r6,8(sp)
 440944c:	da400115 	stw	r9,4(sp)
 4409450:	da800015 	stw	r10,0(sp)
 4409454:	440a3540 	call	440a354 <__clzsi2>
 4409458:	d9800217 	ldw	r6,8(sp)
 440945c:	da400117 	ldw	r9,4(sp)
 4409460:	da800017 	ldw	r10,0(sp)
 4409464:	113ffd44 	addi	r4,r2,-11
 4409468:	00c00704 	movi	r3,28
 440946c:	1900bf16 	blt	r3,r4,440976c <__muldf3+0x588>
 4409470:	00c00744 	movi	r3,29
 4409474:	123ffe04 	addi	r8,r2,-8
 4409478:	1907c83a 	sub	r3,r3,r4
 440947c:	8a22983a 	sll	r17,r17,r8
 4409480:	30c6d83a 	srl	r3,r6,r3
 4409484:	3210983a 	sll	r8,r6,r8
 4409488:	1c62b03a 	or	r17,r3,r17
 440948c:	017f0084 	movi	r5,-1022
 4409490:	2909c83a 	sub	r4,r5,r4
 4409494:	000b883a 	mov	r5,zero
 4409498:	003f8306 	br	44092a8 <__reset+0xfb4052a8>
 440949c:	b029883a 	mov	r20,r22
 44094a0:	0081ffc4 	movi	r2,2047
 44094a4:	000b883a 	mov	r5,zero
 44094a8:	0027883a 	mov	r19,zero
 44094ac:	003fac06 	br	4409360 <__reset+0xfb405360>
 44094b0:	0023883a 	mov	r17,zero
 44094b4:	0011883a 	mov	r8,zero
 44094b8:	01400044 	movi	r5,1
 44094bc:	003f7a06 	br	44092a8 <__reset+0xfb4052a8>
 44094c0:	014000c4 	movi	r5,3
 44094c4:	003f7806 	br	44092a8 <__reset+0xfb4052a8>
 44094c8:	04800104 	movi	r18,4
 44094cc:	0021883a 	mov	r16,zero
 44094d0:	0027883a 	mov	r19,zero
 44094d4:	07000044 	movi	fp,1
 44094d8:	003f6106 	br	4409260 <__reset+0xfb405260>
 44094dc:	04800304 	movi	r18,12
 44094e0:	070000c4 	movi	fp,3
 44094e4:	003f5e06 	br	4409260 <__reset+0xfb405260>
 44094e8:	01400434 	movhi	r5,16
 44094ec:	0029883a 	mov	r20,zero
 44094f0:	297fffc4 	addi	r5,r5,-1
 44094f4:	04ffffc4 	movi	r19,-1
 44094f8:	0081ffc4 	movi	r2,2047
 44094fc:	003f9806 	br	4409360 <__reset+0xfb405360>
 4409500:	8023883a 	mov	r17,r16
 4409504:	9811883a 	mov	r8,r19
 4409508:	e00b883a 	mov	r5,fp
 440950c:	003f8a06 	br	4409338 <__reset+0xfb405338>
 4409510:	8023883a 	mov	r17,r16
 4409514:	9811883a 	mov	r8,r19
 4409518:	482d883a 	mov	r22,r9
 440951c:	e00b883a 	mov	r5,fp
 4409520:	003f8506 	br	4409338 <__reset+0xfb405338>
 4409524:	980ad43a 	srli	r5,r19,16
 4409528:	401ad43a 	srli	r13,r8,16
 440952c:	9cffffcc 	andi	r19,r19,65535
 4409530:	423fffcc 	andi	r8,r8,65535
 4409534:	44d9383a 	mul	r12,r8,r19
 4409538:	4145383a 	mul	r2,r8,r5
 440953c:	6ccd383a 	mul	r6,r13,r19
 4409540:	6006d43a 	srli	r3,r12,16
 4409544:	2b5d383a 	mul	r14,r5,r13
 4409548:	308d883a 	add	r6,r6,r2
 440954c:	198d883a 	add	r6,r3,r6
 4409550:	3080022e 	bgeu	r6,r2,440955c <__muldf3+0x378>
 4409554:	00800074 	movhi	r2,1
 4409558:	709d883a 	add	r14,r14,r2
 440955c:	8828d43a 	srli	r20,r17,16
 4409560:	8bffffcc 	andi	r15,r17,65535
 4409564:	7ce3383a 	mul	r17,r15,r19
 4409568:	7945383a 	mul	r2,r15,r5
 440956c:	a4e7383a 	mul	r19,r20,r19
 4409570:	8814d43a 	srli	r10,r17,16
 4409574:	3012943a 	slli	r9,r6,16
 4409578:	98a7883a 	add	r19,r19,r2
 440957c:	633fffcc 	andi	r12,r12,65535
 4409580:	54d5883a 	add	r10,r10,r19
 4409584:	3006d43a 	srli	r3,r6,16
 4409588:	4b13883a 	add	r9,r9,r12
 440958c:	2d0b383a 	mul	r5,r5,r20
 4409590:	5080022e 	bgeu	r10,r2,440959c <__muldf3+0x3b8>
 4409594:	00800074 	movhi	r2,1
 4409598:	288b883a 	add	r5,r5,r2
 440959c:	802ad43a 	srli	r21,r16,16
 44095a0:	843fffcc 	andi	r16,r16,65535
 44095a4:	440d383a 	mul	r6,r8,r16
 44095a8:	4565383a 	mul	r18,r8,r21
 44095ac:	8359383a 	mul	r12,r16,r13
 44095b0:	500e943a 	slli	r7,r10,16
 44095b4:	3010d43a 	srli	r8,r6,16
 44095b8:	5026d43a 	srli	r19,r10,16
 44095bc:	6499883a 	add	r12,r12,r18
 44095c0:	8abfffcc 	andi	r10,r17,65535
 44095c4:	3a95883a 	add	r10,r7,r10
 44095c8:	4319883a 	add	r12,r8,r12
 44095cc:	9967883a 	add	r19,r19,r5
 44095d0:	1a87883a 	add	r3,r3,r10
 44095d4:	6d5b383a 	mul	r13,r13,r21
 44095d8:	6480022e 	bgeu	r12,r18,44095e4 <__muldf3+0x400>
 44095dc:	00800074 	movhi	r2,1
 44095e0:	689b883a 	add	r13,r13,r2
 44095e4:	7c25383a 	mul	r18,r15,r16
 44095e8:	7d4b383a 	mul	r5,r15,r21
 44095ec:	850f383a 	mul	r7,r16,r20
 44095f0:	901ed43a 	srli	r15,r18,16
 44095f4:	6004d43a 	srli	r2,r12,16
 44095f8:	6010943a 	slli	r8,r12,16
 44095fc:	394f883a 	add	r7,r7,r5
 4409600:	333fffcc 	andi	r12,r6,65535
 4409604:	79df883a 	add	r15,r15,r7
 4409608:	135b883a 	add	r13,r2,r13
 440960c:	a563383a 	mul	r17,r20,r21
 4409610:	4305883a 	add	r2,r8,r12
 4409614:	7940022e 	bgeu	r15,r5,4409620 <__muldf3+0x43c>
 4409618:	01400074 	movhi	r5,1
 440961c:	8963883a 	add	r17,r17,r5
 4409620:	780a943a 	slli	r5,r15,16
 4409624:	91bfffcc 	andi	r6,r18,65535
 4409628:	70c7883a 	add	r3,r14,r3
 440962c:	298d883a 	add	r6,r5,r6
 4409630:	1a8f803a 	cmpltu	r7,r3,r10
 4409634:	34cb883a 	add	r5,r6,r19
 4409638:	10c7883a 	add	r3,r2,r3
 440963c:	3955883a 	add	r10,r7,r5
 4409640:	1885803a 	cmpltu	r2,r3,r2
 4409644:	6a91883a 	add	r8,r13,r10
 4409648:	780cd43a 	srli	r6,r15,16
 440964c:	1219883a 	add	r12,r2,r8
 4409650:	2ccb803a 	cmpltu	r5,r5,r19
 4409654:	51cf803a 	cmpltu	r7,r10,r7
 4409658:	29ceb03a 	or	r7,r5,r7
 440965c:	4351803a 	cmpltu	r8,r8,r13
 4409660:	608b803a 	cmpltu	r5,r12,r2
 4409664:	4144b03a 	or	r2,r8,r5
 4409668:	398f883a 	add	r7,r7,r6
 440966c:	3885883a 	add	r2,r7,r2
 4409670:	1810927a 	slli	r8,r3,9
 4409674:	1445883a 	add	r2,r2,r17
 4409678:	1004927a 	slli	r2,r2,9
 440967c:	6022d5fa 	srli	r17,r12,23
 4409680:	1806d5fa 	srli	r3,r3,23
 4409684:	4252b03a 	or	r9,r8,r9
 4409688:	600a927a 	slli	r5,r12,9
 440968c:	4810c03a 	cmpne	r8,r9,zero
 4409690:	1462b03a 	or	r17,r2,r17
 4409694:	40c6b03a 	or	r3,r8,r3
 4409698:	8880402c 	andhi	r2,r17,256
 440969c:	1950b03a 	or	r8,r3,r5
 44096a0:	10000726 	beq	r2,zero,44096c0 <__muldf3+0x4dc>
 44096a4:	4006d07a 	srli	r3,r8,1
 44096a8:	880497fa 	slli	r2,r17,31
 44096ac:	4200004c 	andi	r8,r8,1
 44096b0:	8822d07a 	srli	r17,r17,1
 44096b4:	1a10b03a 	or	r8,r3,r8
 44096b8:	1210b03a 	or	r8,r2,r8
 44096bc:	5809883a 	mov	r4,r11
 44096c0:	2080ffc4 	addi	r2,r4,1023
 44096c4:	0080440e 	bge	zero,r2,44097d8 <__muldf3+0x5f4>
 44096c8:	40c001cc 	andi	r3,r8,7
 44096cc:	18000726 	beq	r3,zero,44096ec <__muldf3+0x508>
 44096d0:	40c003cc 	andi	r3,r8,15
 44096d4:	01400104 	movi	r5,4
 44096d8:	19400426 	beq	r3,r5,44096ec <__muldf3+0x508>
 44096dc:	4147883a 	add	r3,r8,r5
 44096e0:	1a11803a 	cmpltu	r8,r3,r8
 44096e4:	8a23883a 	add	r17,r17,r8
 44096e8:	1811883a 	mov	r8,r3
 44096ec:	88c0402c 	andhi	r3,r17,256
 44096f0:	18000426 	beq	r3,zero,4409704 <__muldf3+0x520>
 44096f4:	00ffc034 	movhi	r3,65280
 44096f8:	18ffffc4 	addi	r3,r3,-1
 44096fc:	20810004 	addi	r2,r4,1024
 4409700:	88e2703a 	and	r17,r17,r3
 4409704:	00c1ff84 	movi	r3,2046
 4409708:	18bf6416 	blt	r3,r2,440949c <__reset+0xfb40549c>
 440970c:	8826977a 	slli	r19,r17,29
 4409710:	4010d0fa 	srli	r8,r8,3
 4409714:	8822927a 	slli	r17,r17,9
 4409718:	1081ffcc 	andi	r2,r2,2047
 440971c:	9a26b03a 	or	r19,r19,r8
 4409720:	880ad33a 	srli	r5,r17,12
 4409724:	b029883a 	mov	r20,r22
 4409728:	003f0d06 	br	4409360 <__reset+0xfb405360>
 440972c:	8080022c 	andhi	r2,r16,8
 4409730:	10000926 	beq	r2,zero,4409758 <__muldf3+0x574>
 4409734:	8880022c 	andhi	r2,r17,8
 4409738:	1000071e 	bne	r2,zero,4409758 <__muldf3+0x574>
 440973c:	00800434 	movhi	r2,16
 4409740:	89400234 	orhi	r5,r17,8
 4409744:	10bfffc4 	addi	r2,r2,-1
 4409748:	b829883a 	mov	r20,r23
 440974c:	288a703a 	and	r5,r5,r2
 4409750:	4027883a 	mov	r19,r8
 4409754:	003f6806 	br	44094f8 <__reset+0xfb4054f8>
 4409758:	00800434 	movhi	r2,16
 440975c:	81400234 	orhi	r5,r16,8
 4409760:	10bfffc4 	addi	r2,r2,-1
 4409764:	288a703a 	and	r5,r5,r2
 4409768:	003f6306 	br	44094f8 <__reset+0xfb4054f8>
 440976c:	10bff604 	addi	r2,r2,-40
 4409770:	30a2983a 	sll	r17,r6,r2
 4409774:	0011883a 	mov	r8,zero
 4409778:	003f4406 	br	440948c <__reset+0xfb40548c>
 440977c:	3009883a 	mov	r4,r6
 4409780:	d9800215 	stw	r6,8(sp)
 4409784:	da400115 	stw	r9,4(sp)
 4409788:	da800015 	stw	r10,0(sp)
 440978c:	440a3540 	call	440a354 <__clzsi2>
 4409790:	10800804 	addi	r2,r2,32
 4409794:	da800017 	ldw	r10,0(sp)
 4409798:	da400117 	ldw	r9,4(sp)
 440979c:	d9800217 	ldw	r6,8(sp)
 44097a0:	003f3006 	br	4409464 <__reset+0xfb405464>
 44097a4:	10bff604 	addi	r2,r2,-40
 44097a8:	90a0983a 	sll	r16,r18,r2
 44097ac:	0027883a 	mov	r19,zero
 44097b0:	003f1606 	br	440940c <__reset+0xfb40540c>
 44097b4:	d9800215 	stw	r6,8(sp)
 44097b8:	d9c00015 	stw	r7,0(sp)
 44097bc:	da400115 	stw	r9,4(sp)
 44097c0:	440a3540 	call	440a354 <__clzsi2>
 44097c4:	10800804 	addi	r2,r2,32
 44097c8:	da400117 	ldw	r9,4(sp)
 44097cc:	d9c00017 	ldw	r7,0(sp)
 44097d0:	d9800217 	ldw	r6,8(sp)
 44097d4:	003f0306 	br	44093e4 <__reset+0xfb4053e4>
 44097d8:	00c00044 	movi	r3,1
 44097dc:	1887c83a 	sub	r3,r3,r2
 44097e0:	01000e04 	movi	r4,56
 44097e4:	20feda16 	blt	r4,r3,4409350 <__reset+0xfb405350>
 44097e8:	010007c4 	movi	r4,31
 44097ec:	20c01b16 	blt	r4,r3,440985c <__muldf3+0x678>
 44097f0:	00800804 	movi	r2,32
 44097f4:	10c5c83a 	sub	r2,r2,r3
 44097f8:	888a983a 	sll	r5,r17,r2
 44097fc:	40c8d83a 	srl	r4,r8,r3
 4409800:	4084983a 	sll	r2,r8,r2
 4409804:	88e2d83a 	srl	r17,r17,r3
 4409808:	2906b03a 	or	r3,r5,r4
 440980c:	1004c03a 	cmpne	r2,r2,zero
 4409810:	1886b03a 	or	r3,r3,r2
 4409814:	188001cc 	andi	r2,r3,7
 4409818:	10000726 	beq	r2,zero,4409838 <__muldf3+0x654>
 440981c:	188003cc 	andi	r2,r3,15
 4409820:	01000104 	movi	r4,4
 4409824:	11000426 	beq	r2,r4,4409838 <__muldf3+0x654>
 4409828:	1805883a 	mov	r2,r3
 440982c:	10c00104 	addi	r3,r2,4
 4409830:	1885803a 	cmpltu	r2,r3,r2
 4409834:	88a3883a 	add	r17,r17,r2
 4409838:	8880202c 	andhi	r2,r17,128
 440983c:	10001c26 	beq	r2,zero,44098b0 <__muldf3+0x6cc>
 4409840:	b029883a 	mov	r20,r22
 4409844:	00800044 	movi	r2,1
 4409848:	000b883a 	mov	r5,zero
 440984c:	0027883a 	mov	r19,zero
 4409850:	003ec306 	br	4409360 <__reset+0xfb405360>
 4409854:	5809883a 	mov	r4,r11
 4409858:	003f9906 	br	44096c0 <__reset+0xfb4056c0>
 440985c:	013ff844 	movi	r4,-31
 4409860:	2085c83a 	sub	r2,r4,r2
 4409864:	8888d83a 	srl	r4,r17,r2
 4409868:	00800804 	movi	r2,32
 440986c:	18801a26 	beq	r3,r2,44098d8 <__muldf3+0x6f4>
 4409870:	00801004 	movi	r2,64
 4409874:	10c5c83a 	sub	r2,r2,r3
 4409878:	8884983a 	sll	r2,r17,r2
 440987c:	1204b03a 	or	r2,r2,r8
 4409880:	1004c03a 	cmpne	r2,r2,zero
 4409884:	2084b03a 	or	r2,r4,r2
 4409888:	144001cc 	andi	r17,r2,7
 440988c:	88000d1e 	bne	r17,zero,44098c4 <__muldf3+0x6e0>
 4409890:	000b883a 	mov	r5,zero
 4409894:	1026d0fa 	srli	r19,r2,3
 4409898:	b029883a 	mov	r20,r22
 440989c:	0005883a 	mov	r2,zero
 44098a0:	9c66b03a 	or	r19,r19,r17
 44098a4:	003eae06 	br	4409360 <__reset+0xfb405360>
 44098a8:	1007883a 	mov	r3,r2
 44098ac:	0023883a 	mov	r17,zero
 44098b0:	880a927a 	slli	r5,r17,9
 44098b4:	1805883a 	mov	r2,r3
 44098b8:	8822977a 	slli	r17,r17,29
 44098bc:	280ad33a 	srli	r5,r5,12
 44098c0:	003ff406 	br	4409894 <__reset+0xfb405894>
 44098c4:	10c003cc 	andi	r3,r2,15
 44098c8:	01000104 	movi	r4,4
 44098cc:	193ff626 	beq	r3,r4,44098a8 <__reset+0xfb4058a8>
 44098d0:	0023883a 	mov	r17,zero
 44098d4:	003fd506 	br	440982c <__reset+0xfb40582c>
 44098d8:	0005883a 	mov	r2,zero
 44098dc:	003fe706 	br	440987c <__reset+0xfb40587c>
 44098e0:	00800434 	movhi	r2,16
 44098e4:	89400234 	orhi	r5,r17,8
 44098e8:	10bfffc4 	addi	r2,r2,-1
 44098ec:	b029883a 	mov	r20,r22
 44098f0:	288a703a 	and	r5,r5,r2
 44098f4:	4027883a 	mov	r19,r8
 44098f8:	003eff06 	br	44094f8 <__reset+0xfb4054f8>

044098fc <__subdf3>:
 44098fc:	02000434 	movhi	r8,16
 4409900:	423fffc4 	addi	r8,r8,-1
 4409904:	defffb04 	addi	sp,sp,-20
 4409908:	2a14703a 	and	r10,r5,r8
 440990c:	3812d53a 	srli	r9,r7,20
 4409910:	3a10703a 	and	r8,r7,r8
 4409914:	2006d77a 	srli	r3,r4,29
 4409918:	3004d77a 	srli	r2,r6,29
 440991c:	dc000015 	stw	r16,0(sp)
 4409920:	501490fa 	slli	r10,r10,3
 4409924:	2820d53a 	srli	r16,r5,20
 4409928:	401090fa 	slli	r8,r8,3
 440992c:	dc800215 	stw	r18,8(sp)
 4409930:	dc400115 	stw	r17,4(sp)
 4409934:	dfc00415 	stw	ra,16(sp)
 4409938:	202290fa 	slli	r17,r4,3
 440993c:	dcc00315 	stw	r19,12(sp)
 4409940:	4a41ffcc 	andi	r9,r9,2047
 4409944:	0101ffc4 	movi	r4,2047
 4409948:	2824d7fa 	srli	r18,r5,31
 440994c:	8401ffcc 	andi	r16,r16,2047
 4409950:	50c6b03a 	or	r3,r10,r3
 4409954:	380ed7fa 	srli	r7,r7,31
 4409958:	408ab03a 	or	r5,r8,r2
 440995c:	300c90fa 	slli	r6,r6,3
 4409960:	49009626 	beq	r9,r4,4409bbc <__subdf3+0x2c0>
 4409964:	39c0005c 	xori	r7,r7,1
 4409968:	8245c83a 	sub	r2,r16,r9
 440996c:	3c807426 	beq	r7,r18,4409b40 <__subdf3+0x244>
 4409970:	0080af0e 	bge	zero,r2,4409c30 <__subdf3+0x334>
 4409974:	48002a1e 	bne	r9,zero,4409a20 <__subdf3+0x124>
 4409978:	2988b03a 	or	r4,r5,r6
 440997c:	20009a1e 	bne	r4,zero,4409be8 <__subdf3+0x2ec>
 4409980:	888001cc 	andi	r2,r17,7
 4409984:	10000726 	beq	r2,zero,44099a4 <__subdf3+0xa8>
 4409988:	888003cc 	andi	r2,r17,15
 440998c:	01000104 	movi	r4,4
 4409990:	11000426 	beq	r2,r4,44099a4 <__subdf3+0xa8>
 4409994:	890b883a 	add	r5,r17,r4
 4409998:	2c63803a 	cmpltu	r17,r5,r17
 440999c:	1c47883a 	add	r3,r3,r17
 44099a0:	2823883a 	mov	r17,r5
 44099a4:	1880202c 	andhi	r2,r3,128
 44099a8:	10005926 	beq	r2,zero,4409b10 <__subdf3+0x214>
 44099ac:	84000044 	addi	r16,r16,1
 44099b0:	0081ffc4 	movi	r2,2047
 44099b4:	8080be26 	beq	r16,r2,4409cb0 <__subdf3+0x3b4>
 44099b8:	017fe034 	movhi	r5,65408
 44099bc:	297fffc4 	addi	r5,r5,-1
 44099c0:	1946703a 	and	r3,r3,r5
 44099c4:	1804977a 	slli	r2,r3,29
 44099c8:	1806927a 	slli	r3,r3,9
 44099cc:	8822d0fa 	srli	r17,r17,3
 44099d0:	8401ffcc 	andi	r16,r16,2047
 44099d4:	180ad33a 	srli	r5,r3,12
 44099d8:	9100004c 	andi	r4,r18,1
 44099dc:	1444b03a 	or	r2,r2,r17
 44099e0:	80c1ffcc 	andi	r3,r16,2047
 44099e4:	1820953a 	slli	r16,r3,20
 44099e8:	20c03fcc 	andi	r3,r4,255
 44099ec:	180897fa 	slli	r4,r3,31
 44099f0:	00c00434 	movhi	r3,16
 44099f4:	18ffffc4 	addi	r3,r3,-1
 44099f8:	28c6703a 	and	r3,r5,r3
 44099fc:	1c06b03a 	or	r3,r3,r16
 4409a00:	1906b03a 	or	r3,r3,r4
 4409a04:	dfc00417 	ldw	ra,16(sp)
 4409a08:	dcc00317 	ldw	r19,12(sp)
 4409a0c:	dc800217 	ldw	r18,8(sp)
 4409a10:	dc400117 	ldw	r17,4(sp)
 4409a14:	dc000017 	ldw	r16,0(sp)
 4409a18:	dec00504 	addi	sp,sp,20
 4409a1c:	f800283a 	ret
 4409a20:	0101ffc4 	movi	r4,2047
 4409a24:	813fd626 	beq	r16,r4,4409980 <__reset+0xfb405980>
 4409a28:	29402034 	orhi	r5,r5,128
 4409a2c:	01000e04 	movi	r4,56
 4409a30:	2080a316 	blt	r4,r2,4409cc0 <__subdf3+0x3c4>
 4409a34:	010007c4 	movi	r4,31
 4409a38:	2080c616 	blt	r4,r2,4409d54 <__subdf3+0x458>
 4409a3c:	01000804 	movi	r4,32
 4409a40:	2089c83a 	sub	r4,r4,r2
 4409a44:	2910983a 	sll	r8,r5,r4
 4409a48:	308ed83a 	srl	r7,r6,r2
 4409a4c:	3108983a 	sll	r4,r6,r4
 4409a50:	2884d83a 	srl	r2,r5,r2
 4409a54:	41ccb03a 	or	r6,r8,r7
 4409a58:	2008c03a 	cmpne	r4,r4,zero
 4409a5c:	310cb03a 	or	r6,r6,r4
 4409a60:	898dc83a 	sub	r6,r17,r6
 4409a64:	89a3803a 	cmpltu	r17,r17,r6
 4409a68:	1887c83a 	sub	r3,r3,r2
 4409a6c:	1c47c83a 	sub	r3,r3,r17
 4409a70:	3023883a 	mov	r17,r6
 4409a74:	1880202c 	andhi	r2,r3,128
 4409a78:	10002326 	beq	r2,zero,4409b08 <__subdf3+0x20c>
 4409a7c:	04c02034 	movhi	r19,128
 4409a80:	9cffffc4 	addi	r19,r19,-1
 4409a84:	1ce6703a 	and	r19,r3,r19
 4409a88:	98007a26 	beq	r19,zero,4409c74 <__subdf3+0x378>
 4409a8c:	9809883a 	mov	r4,r19
 4409a90:	440a3540 	call	440a354 <__clzsi2>
 4409a94:	113ffe04 	addi	r4,r2,-8
 4409a98:	00c007c4 	movi	r3,31
 4409a9c:	19007b16 	blt	r3,r4,4409c8c <__subdf3+0x390>
 4409aa0:	00800804 	movi	r2,32
 4409aa4:	1105c83a 	sub	r2,r2,r4
 4409aa8:	8884d83a 	srl	r2,r17,r2
 4409aac:	9906983a 	sll	r3,r19,r4
 4409ab0:	8922983a 	sll	r17,r17,r4
 4409ab4:	10c4b03a 	or	r2,r2,r3
 4409ab8:	24007816 	blt	r4,r16,4409c9c <__subdf3+0x3a0>
 4409abc:	2421c83a 	sub	r16,r4,r16
 4409ac0:	80c00044 	addi	r3,r16,1
 4409ac4:	010007c4 	movi	r4,31
 4409ac8:	20c09516 	blt	r4,r3,4409d20 <__subdf3+0x424>
 4409acc:	01400804 	movi	r5,32
 4409ad0:	28cbc83a 	sub	r5,r5,r3
 4409ad4:	88c8d83a 	srl	r4,r17,r3
 4409ad8:	8962983a 	sll	r17,r17,r5
 4409adc:	114a983a 	sll	r5,r2,r5
 4409ae0:	10c6d83a 	srl	r3,r2,r3
 4409ae4:	8804c03a 	cmpne	r2,r17,zero
 4409ae8:	290ab03a 	or	r5,r5,r4
 4409aec:	28a2b03a 	or	r17,r5,r2
 4409af0:	0021883a 	mov	r16,zero
 4409af4:	003fa206 	br	4409980 <__reset+0xfb405980>
 4409af8:	2090b03a 	or	r8,r4,r2
 4409afc:	40018e26 	beq	r8,zero,440a138 <__subdf3+0x83c>
 4409b00:	1007883a 	mov	r3,r2
 4409b04:	2023883a 	mov	r17,r4
 4409b08:	888001cc 	andi	r2,r17,7
 4409b0c:	103f9e1e 	bne	r2,zero,4409988 <__reset+0xfb405988>
 4409b10:	1804977a 	slli	r2,r3,29
 4409b14:	8822d0fa 	srli	r17,r17,3
 4409b18:	1810d0fa 	srli	r8,r3,3
 4409b1c:	9100004c 	andi	r4,r18,1
 4409b20:	1444b03a 	or	r2,r2,r17
 4409b24:	00c1ffc4 	movi	r3,2047
 4409b28:	80c02826 	beq	r16,r3,4409bcc <__subdf3+0x2d0>
 4409b2c:	01400434 	movhi	r5,16
 4409b30:	297fffc4 	addi	r5,r5,-1
 4409b34:	80e0703a 	and	r16,r16,r3
 4409b38:	414a703a 	and	r5,r8,r5
 4409b3c:	003fa806 	br	44099e0 <__reset+0xfb4059e0>
 4409b40:	0080630e 	bge	zero,r2,4409cd0 <__subdf3+0x3d4>
 4409b44:	48003026 	beq	r9,zero,4409c08 <__subdf3+0x30c>
 4409b48:	0101ffc4 	movi	r4,2047
 4409b4c:	813f8c26 	beq	r16,r4,4409980 <__reset+0xfb405980>
 4409b50:	29402034 	orhi	r5,r5,128
 4409b54:	01000e04 	movi	r4,56
 4409b58:	2080a90e 	bge	r4,r2,4409e00 <__subdf3+0x504>
 4409b5c:	298cb03a 	or	r6,r5,r6
 4409b60:	3012c03a 	cmpne	r9,r6,zero
 4409b64:	0005883a 	mov	r2,zero
 4409b68:	4c53883a 	add	r9,r9,r17
 4409b6c:	4c63803a 	cmpltu	r17,r9,r17
 4409b70:	10c7883a 	add	r3,r2,r3
 4409b74:	88c7883a 	add	r3,r17,r3
 4409b78:	4823883a 	mov	r17,r9
 4409b7c:	1880202c 	andhi	r2,r3,128
 4409b80:	1000d026 	beq	r2,zero,4409ec4 <__subdf3+0x5c8>
 4409b84:	84000044 	addi	r16,r16,1
 4409b88:	0081ffc4 	movi	r2,2047
 4409b8c:	8080fe26 	beq	r16,r2,4409f88 <__subdf3+0x68c>
 4409b90:	00bfe034 	movhi	r2,65408
 4409b94:	10bfffc4 	addi	r2,r2,-1
 4409b98:	1886703a 	and	r3,r3,r2
 4409b9c:	880ad07a 	srli	r5,r17,1
 4409ba0:	180497fa 	slli	r2,r3,31
 4409ba4:	8900004c 	andi	r4,r17,1
 4409ba8:	2922b03a 	or	r17,r5,r4
 4409bac:	1806d07a 	srli	r3,r3,1
 4409bb0:	1462b03a 	or	r17,r2,r17
 4409bb4:	3825883a 	mov	r18,r7
 4409bb8:	003f7106 	br	4409980 <__reset+0xfb405980>
 4409bbc:	2984b03a 	or	r2,r5,r6
 4409bc0:	103f6826 	beq	r2,zero,4409964 <__reset+0xfb405964>
 4409bc4:	39c03fcc 	andi	r7,r7,255
 4409bc8:	003f6706 	br	4409968 <__reset+0xfb405968>
 4409bcc:	4086b03a 	or	r3,r8,r2
 4409bd0:	18015226 	beq	r3,zero,440a11c <__subdf3+0x820>
 4409bd4:	00c00434 	movhi	r3,16
 4409bd8:	41400234 	orhi	r5,r8,8
 4409bdc:	18ffffc4 	addi	r3,r3,-1
 4409be0:	28ca703a 	and	r5,r5,r3
 4409be4:	003f7e06 	br	44099e0 <__reset+0xfb4059e0>
 4409be8:	10bfffc4 	addi	r2,r2,-1
 4409bec:	1000491e 	bne	r2,zero,4409d14 <__subdf3+0x418>
 4409bf0:	898fc83a 	sub	r7,r17,r6
 4409bf4:	89e3803a 	cmpltu	r17,r17,r7
 4409bf8:	1947c83a 	sub	r3,r3,r5
 4409bfc:	1c47c83a 	sub	r3,r3,r17
 4409c00:	3823883a 	mov	r17,r7
 4409c04:	003f9b06 	br	4409a74 <__reset+0xfb405a74>
 4409c08:	2988b03a 	or	r4,r5,r6
 4409c0c:	203f5c26 	beq	r4,zero,4409980 <__reset+0xfb405980>
 4409c10:	10bfffc4 	addi	r2,r2,-1
 4409c14:	1000931e 	bne	r2,zero,4409e64 <__subdf3+0x568>
 4409c18:	898d883a 	add	r6,r17,r6
 4409c1c:	3463803a 	cmpltu	r17,r6,r17
 4409c20:	1947883a 	add	r3,r3,r5
 4409c24:	88c7883a 	add	r3,r17,r3
 4409c28:	3023883a 	mov	r17,r6
 4409c2c:	003fd306 	br	4409b7c <__reset+0xfb405b7c>
 4409c30:	1000541e 	bne	r2,zero,4409d84 <__subdf3+0x488>
 4409c34:	80800044 	addi	r2,r16,1
 4409c38:	1081ffcc 	andi	r2,r2,2047
 4409c3c:	01000044 	movi	r4,1
 4409c40:	2080a20e 	bge	r4,r2,4409ecc <__subdf3+0x5d0>
 4409c44:	8989c83a 	sub	r4,r17,r6
 4409c48:	8905803a 	cmpltu	r2,r17,r4
 4409c4c:	1967c83a 	sub	r19,r3,r5
 4409c50:	98a7c83a 	sub	r19,r19,r2
 4409c54:	9880202c 	andhi	r2,r19,128
 4409c58:	10006326 	beq	r2,zero,4409de8 <__subdf3+0x4ec>
 4409c5c:	3463c83a 	sub	r17,r6,r17
 4409c60:	28c7c83a 	sub	r3,r5,r3
 4409c64:	344d803a 	cmpltu	r6,r6,r17
 4409c68:	19a7c83a 	sub	r19,r3,r6
 4409c6c:	3825883a 	mov	r18,r7
 4409c70:	983f861e 	bne	r19,zero,4409a8c <__reset+0xfb405a8c>
 4409c74:	8809883a 	mov	r4,r17
 4409c78:	440a3540 	call	440a354 <__clzsi2>
 4409c7c:	10800804 	addi	r2,r2,32
 4409c80:	113ffe04 	addi	r4,r2,-8
 4409c84:	00c007c4 	movi	r3,31
 4409c88:	193f850e 	bge	r3,r4,4409aa0 <__reset+0xfb405aa0>
 4409c8c:	10bff604 	addi	r2,r2,-40
 4409c90:	8884983a 	sll	r2,r17,r2
 4409c94:	0023883a 	mov	r17,zero
 4409c98:	243f880e 	bge	r4,r16,4409abc <__reset+0xfb405abc>
 4409c9c:	00ffe034 	movhi	r3,65408
 4409ca0:	18ffffc4 	addi	r3,r3,-1
 4409ca4:	8121c83a 	sub	r16,r16,r4
 4409ca8:	10c6703a 	and	r3,r2,r3
 4409cac:	003f3406 	br	4409980 <__reset+0xfb405980>
 4409cb0:	9100004c 	andi	r4,r18,1
 4409cb4:	000b883a 	mov	r5,zero
 4409cb8:	0005883a 	mov	r2,zero
 4409cbc:	003f4806 	br	44099e0 <__reset+0xfb4059e0>
 4409cc0:	298cb03a 	or	r6,r5,r6
 4409cc4:	300cc03a 	cmpne	r6,r6,zero
 4409cc8:	0005883a 	mov	r2,zero
 4409ccc:	003f6406 	br	4409a60 <__reset+0xfb405a60>
 4409cd0:	10009a1e 	bne	r2,zero,4409f3c <__subdf3+0x640>
 4409cd4:	82400044 	addi	r9,r16,1
 4409cd8:	4881ffcc 	andi	r2,r9,2047
 4409cdc:	02800044 	movi	r10,1
 4409ce0:	5080670e 	bge	r10,r2,4409e80 <__subdf3+0x584>
 4409ce4:	0081ffc4 	movi	r2,2047
 4409ce8:	4880af26 	beq	r9,r2,4409fa8 <__subdf3+0x6ac>
 4409cec:	898d883a 	add	r6,r17,r6
 4409cf0:	1945883a 	add	r2,r3,r5
 4409cf4:	3447803a 	cmpltu	r3,r6,r17
 4409cf8:	1887883a 	add	r3,r3,r2
 4409cfc:	182297fa 	slli	r17,r3,31
 4409d00:	300cd07a 	srli	r6,r6,1
 4409d04:	1806d07a 	srli	r3,r3,1
 4409d08:	4821883a 	mov	r16,r9
 4409d0c:	89a2b03a 	or	r17,r17,r6
 4409d10:	003f1b06 	br	4409980 <__reset+0xfb405980>
 4409d14:	0101ffc4 	movi	r4,2047
 4409d18:	813f441e 	bne	r16,r4,4409a2c <__reset+0xfb405a2c>
 4409d1c:	003f1806 	br	4409980 <__reset+0xfb405980>
 4409d20:	843ff844 	addi	r16,r16,-31
 4409d24:	01400804 	movi	r5,32
 4409d28:	1408d83a 	srl	r4,r2,r16
 4409d2c:	19405026 	beq	r3,r5,4409e70 <__subdf3+0x574>
 4409d30:	01401004 	movi	r5,64
 4409d34:	28c7c83a 	sub	r3,r5,r3
 4409d38:	10c4983a 	sll	r2,r2,r3
 4409d3c:	88a2b03a 	or	r17,r17,r2
 4409d40:	8822c03a 	cmpne	r17,r17,zero
 4409d44:	2462b03a 	or	r17,r4,r17
 4409d48:	0007883a 	mov	r3,zero
 4409d4c:	0021883a 	mov	r16,zero
 4409d50:	003f6d06 	br	4409b08 <__reset+0xfb405b08>
 4409d54:	11fff804 	addi	r7,r2,-32
 4409d58:	01000804 	movi	r4,32
 4409d5c:	29ced83a 	srl	r7,r5,r7
 4409d60:	11004526 	beq	r2,r4,4409e78 <__subdf3+0x57c>
 4409d64:	01001004 	movi	r4,64
 4409d68:	2089c83a 	sub	r4,r4,r2
 4409d6c:	2904983a 	sll	r2,r5,r4
 4409d70:	118cb03a 	or	r6,r2,r6
 4409d74:	300cc03a 	cmpne	r6,r6,zero
 4409d78:	398cb03a 	or	r6,r7,r6
 4409d7c:	0005883a 	mov	r2,zero
 4409d80:	003f3706 	br	4409a60 <__reset+0xfb405a60>
 4409d84:	80002a26 	beq	r16,zero,4409e30 <__subdf3+0x534>
 4409d88:	0101ffc4 	movi	r4,2047
 4409d8c:	49006626 	beq	r9,r4,4409f28 <__subdf3+0x62c>
 4409d90:	0085c83a 	sub	r2,zero,r2
 4409d94:	18c02034 	orhi	r3,r3,128
 4409d98:	01000e04 	movi	r4,56
 4409d9c:	20807e16 	blt	r4,r2,4409f98 <__subdf3+0x69c>
 4409da0:	010007c4 	movi	r4,31
 4409da4:	2080e716 	blt	r4,r2,440a144 <__subdf3+0x848>
 4409da8:	01000804 	movi	r4,32
 4409dac:	2089c83a 	sub	r4,r4,r2
 4409db0:	1914983a 	sll	r10,r3,r4
 4409db4:	8890d83a 	srl	r8,r17,r2
 4409db8:	8908983a 	sll	r4,r17,r4
 4409dbc:	1884d83a 	srl	r2,r3,r2
 4409dc0:	5222b03a 	or	r17,r10,r8
 4409dc4:	2006c03a 	cmpne	r3,r4,zero
 4409dc8:	88e2b03a 	or	r17,r17,r3
 4409dcc:	3463c83a 	sub	r17,r6,r17
 4409dd0:	2885c83a 	sub	r2,r5,r2
 4409dd4:	344d803a 	cmpltu	r6,r6,r17
 4409dd8:	1187c83a 	sub	r3,r2,r6
 4409ddc:	4821883a 	mov	r16,r9
 4409de0:	3825883a 	mov	r18,r7
 4409de4:	003f2306 	br	4409a74 <__reset+0xfb405a74>
 4409de8:	24d0b03a 	or	r8,r4,r19
 4409dec:	40001b1e 	bne	r8,zero,4409e5c <__subdf3+0x560>
 4409df0:	0005883a 	mov	r2,zero
 4409df4:	0009883a 	mov	r4,zero
 4409df8:	0021883a 	mov	r16,zero
 4409dfc:	003f4906 	br	4409b24 <__reset+0xfb405b24>
 4409e00:	010007c4 	movi	r4,31
 4409e04:	20803a16 	blt	r4,r2,4409ef0 <__subdf3+0x5f4>
 4409e08:	01000804 	movi	r4,32
 4409e0c:	2089c83a 	sub	r4,r4,r2
 4409e10:	2912983a 	sll	r9,r5,r4
 4409e14:	3090d83a 	srl	r8,r6,r2
 4409e18:	3108983a 	sll	r4,r6,r4
 4409e1c:	2884d83a 	srl	r2,r5,r2
 4409e20:	4a12b03a 	or	r9,r9,r8
 4409e24:	2008c03a 	cmpne	r4,r4,zero
 4409e28:	4912b03a 	or	r9,r9,r4
 4409e2c:	003f4e06 	br	4409b68 <__reset+0xfb405b68>
 4409e30:	1c48b03a 	or	r4,r3,r17
 4409e34:	20003c26 	beq	r4,zero,4409f28 <__subdf3+0x62c>
 4409e38:	0084303a 	nor	r2,zero,r2
 4409e3c:	1000381e 	bne	r2,zero,4409f20 <__subdf3+0x624>
 4409e40:	3463c83a 	sub	r17,r6,r17
 4409e44:	28c5c83a 	sub	r2,r5,r3
 4409e48:	344d803a 	cmpltu	r6,r6,r17
 4409e4c:	1187c83a 	sub	r3,r2,r6
 4409e50:	4821883a 	mov	r16,r9
 4409e54:	3825883a 	mov	r18,r7
 4409e58:	003f0606 	br	4409a74 <__reset+0xfb405a74>
 4409e5c:	2023883a 	mov	r17,r4
 4409e60:	003f0906 	br	4409a88 <__reset+0xfb405a88>
 4409e64:	0101ffc4 	movi	r4,2047
 4409e68:	813f3a1e 	bne	r16,r4,4409b54 <__reset+0xfb405b54>
 4409e6c:	003ec406 	br	4409980 <__reset+0xfb405980>
 4409e70:	0005883a 	mov	r2,zero
 4409e74:	003fb106 	br	4409d3c <__reset+0xfb405d3c>
 4409e78:	0005883a 	mov	r2,zero
 4409e7c:	003fbc06 	br	4409d70 <__reset+0xfb405d70>
 4409e80:	1c44b03a 	or	r2,r3,r17
 4409e84:	80008e1e 	bne	r16,zero,440a0c0 <__subdf3+0x7c4>
 4409e88:	1000c826 	beq	r2,zero,440a1ac <__subdf3+0x8b0>
 4409e8c:	2984b03a 	or	r2,r5,r6
 4409e90:	103ebb26 	beq	r2,zero,4409980 <__reset+0xfb405980>
 4409e94:	8989883a 	add	r4,r17,r6
 4409e98:	1945883a 	add	r2,r3,r5
 4409e9c:	2447803a 	cmpltu	r3,r4,r17
 4409ea0:	1887883a 	add	r3,r3,r2
 4409ea4:	1880202c 	andhi	r2,r3,128
 4409ea8:	2023883a 	mov	r17,r4
 4409eac:	103f1626 	beq	r2,zero,4409b08 <__reset+0xfb405b08>
 4409eb0:	00bfe034 	movhi	r2,65408
 4409eb4:	10bfffc4 	addi	r2,r2,-1
 4409eb8:	5021883a 	mov	r16,r10
 4409ebc:	1886703a 	and	r3,r3,r2
 4409ec0:	003eaf06 	br	4409980 <__reset+0xfb405980>
 4409ec4:	3825883a 	mov	r18,r7
 4409ec8:	003f0f06 	br	4409b08 <__reset+0xfb405b08>
 4409ecc:	1c44b03a 	or	r2,r3,r17
 4409ed0:	8000251e 	bne	r16,zero,4409f68 <__subdf3+0x66c>
 4409ed4:	1000661e 	bne	r2,zero,440a070 <__subdf3+0x774>
 4409ed8:	2990b03a 	or	r8,r5,r6
 4409edc:	40009626 	beq	r8,zero,440a138 <__subdf3+0x83c>
 4409ee0:	2807883a 	mov	r3,r5
 4409ee4:	3023883a 	mov	r17,r6
 4409ee8:	3825883a 	mov	r18,r7
 4409eec:	003ea406 	br	4409980 <__reset+0xfb405980>
 4409ef0:	127ff804 	addi	r9,r2,-32
 4409ef4:	01000804 	movi	r4,32
 4409ef8:	2a52d83a 	srl	r9,r5,r9
 4409efc:	11008c26 	beq	r2,r4,440a130 <__subdf3+0x834>
 4409f00:	01001004 	movi	r4,64
 4409f04:	2085c83a 	sub	r2,r4,r2
 4409f08:	2884983a 	sll	r2,r5,r2
 4409f0c:	118cb03a 	or	r6,r2,r6
 4409f10:	300cc03a 	cmpne	r6,r6,zero
 4409f14:	4992b03a 	or	r9,r9,r6
 4409f18:	0005883a 	mov	r2,zero
 4409f1c:	003f1206 	br	4409b68 <__reset+0xfb405b68>
 4409f20:	0101ffc4 	movi	r4,2047
 4409f24:	493f9c1e 	bne	r9,r4,4409d98 <__reset+0xfb405d98>
 4409f28:	2807883a 	mov	r3,r5
 4409f2c:	3023883a 	mov	r17,r6
 4409f30:	4821883a 	mov	r16,r9
 4409f34:	3825883a 	mov	r18,r7
 4409f38:	003e9106 	br	4409980 <__reset+0xfb405980>
 4409f3c:	80001f1e 	bne	r16,zero,4409fbc <__subdf3+0x6c0>
 4409f40:	1c48b03a 	or	r4,r3,r17
 4409f44:	20005a26 	beq	r4,zero,440a0b0 <__subdf3+0x7b4>
 4409f48:	0084303a 	nor	r2,zero,r2
 4409f4c:	1000561e 	bne	r2,zero,440a0a8 <__subdf3+0x7ac>
 4409f50:	89a3883a 	add	r17,r17,r6
 4409f54:	1945883a 	add	r2,r3,r5
 4409f58:	898d803a 	cmpltu	r6,r17,r6
 4409f5c:	3087883a 	add	r3,r6,r2
 4409f60:	4821883a 	mov	r16,r9
 4409f64:	003f0506 	br	4409b7c <__reset+0xfb405b7c>
 4409f68:	10002b1e 	bne	r2,zero,440a018 <__subdf3+0x71c>
 4409f6c:	2984b03a 	or	r2,r5,r6
 4409f70:	10008026 	beq	r2,zero,440a174 <__subdf3+0x878>
 4409f74:	2807883a 	mov	r3,r5
 4409f78:	3023883a 	mov	r17,r6
 4409f7c:	3825883a 	mov	r18,r7
 4409f80:	0401ffc4 	movi	r16,2047
 4409f84:	003e7e06 	br	4409980 <__reset+0xfb405980>
 4409f88:	3809883a 	mov	r4,r7
 4409f8c:	0011883a 	mov	r8,zero
 4409f90:	0005883a 	mov	r2,zero
 4409f94:	003ee306 	br	4409b24 <__reset+0xfb405b24>
 4409f98:	1c62b03a 	or	r17,r3,r17
 4409f9c:	8822c03a 	cmpne	r17,r17,zero
 4409fa0:	0005883a 	mov	r2,zero
 4409fa4:	003f8906 	br	4409dcc <__reset+0xfb405dcc>
 4409fa8:	3809883a 	mov	r4,r7
 4409fac:	4821883a 	mov	r16,r9
 4409fb0:	0011883a 	mov	r8,zero
 4409fb4:	0005883a 	mov	r2,zero
 4409fb8:	003eda06 	br	4409b24 <__reset+0xfb405b24>
 4409fbc:	0101ffc4 	movi	r4,2047
 4409fc0:	49003b26 	beq	r9,r4,440a0b0 <__subdf3+0x7b4>
 4409fc4:	0085c83a 	sub	r2,zero,r2
 4409fc8:	18c02034 	orhi	r3,r3,128
 4409fcc:	01000e04 	movi	r4,56
 4409fd0:	20806e16 	blt	r4,r2,440a18c <__subdf3+0x890>
 4409fd4:	010007c4 	movi	r4,31
 4409fd8:	20807716 	blt	r4,r2,440a1b8 <__subdf3+0x8bc>
 4409fdc:	01000804 	movi	r4,32
 4409fe0:	2089c83a 	sub	r4,r4,r2
 4409fe4:	1914983a 	sll	r10,r3,r4
 4409fe8:	8890d83a 	srl	r8,r17,r2
 4409fec:	8908983a 	sll	r4,r17,r4
 4409ff0:	1884d83a 	srl	r2,r3,r2
 4409ff4:	5222b03a 	or	r17,r10,r8
 4409ff8:	2006c03a 	cmpne	r3,r4,zero
 4409ffc:	88e2b03a 	or	r17,r17,r3
 440a000:	89a3883a 	add	r17,r17,r6
 440a004:	1145883a 	add	r2,r2,r5
 440a008:	898d803a 	cmpltu	r6,r17,r6
 440a00c:	3087883a 	add	r3,r6,r2
 440a010:	4821883a 	mov	r16,r9
 440a014:	003ed906 	br	4409b7c <__reset+0xfb405b7c>
 440a018:	2984b03a 	or	r2,r5,r6
 440a01c:	10004226 	beq	r2,zero,440a128 <__subdf3+0x82c>
 440a020:	1808d0fa 	srli	r4,r3,3
 440a024:	8822d0fa 	srli	r17,r17,3
 440a028:	1806977a 	slli	r3,r3,29
 440a02c:	2080022c 	andhi	r2,r4,8
 440a030:	1c62b03a 	or	r17,r3,r17
 440a034:	10000826 	beq	r2,zero,440a058 <__subdf3+0x75c>
 440a038:	2812d0fa 	srli	r9,r5,3
 440a03c:	4880022c 	andhi	r2,r9,8
 440a040:	1000051e 	bne	r2,zero,440a058 <__subdf3+0x75c>
 440a044:	300cd0fa 	srli	r6,r6,3
 440a048:	2804977a 	slli	r2,r5,29
 440a04c:	4809883a 	mov	r4,r9
 440a050:	3825883a 	mov	r18,r7
 440a054:	11a2b03a 	or	r17,r2,r6
 440a058:	8806d77a 	srli	r3,r17,29
 440a05c:	200890fa 	slli	r4,r4,3
 440a060:	882290fa 	slli	r17,r17,3
 440a064:	0401ffc4 	movi	r16,2047
 440a068:	1906b03a 	or	r3,r3,r4
 440a06c:	003e4406 	br	4409980 <__reset+0xfb405980>
 440a070:	2984b03a 	or	r2,r5,r6
 440a074:	103e4226 	beq	r2,zero,4409980 <__reset+0xfb405980>
 440a078:	8989c83a 	sub	r4,r17,r6
 440a07c:	8911803a 	cmpltu	r8,r17,r4
 440a080:	1945c83a 	sub	r2,r3,r5
 440a084:	1205c83a 	sub	r2,r2,r8
 440a088:	1200202c 	andhi	r8,r2,128
 440a08c:	403e9a26 	beq	r8,zero,4409af8 <__reset+0xfb405af8>
 440a090:	3463c83a 	sub	r17,r6,r17
 440a094:	28c5c83a 	sub	r2,r5,r3
 440a098:	344d803a 	cmpltu	r6,r6,r17
 440a09c:	1187c83a 	sub	r3,r2,r6
 440a0a0:	3825883a 	mov	r18,r7
 440a0a4:	003e3606 	br	4409980 <__reset+0xfb405980>
 440a0a8:	0101ffc4 	movi	r4,2047
 440a0ac:	493fc71e 	bne	r9,r4,4409fcc <__reset+0xfb405fcc>
 440a0b0:	2807883a 	mov	r3,r5
 440a0b4:	3023883a 	mov	r17,r6
 440a0b8:	4821883a 	mov	r16,r9
 440a0bc:	003e3006 	br	4409980 <__reset+0xfb405980>
 440a0c0:	10003626 	beq	r2,zero,440a19c <__subdf3+0x8a0>
 440a0c4:	2984b03a 	or	r2,r5,r6
 440a0c8:	10001726 	beq	r2,zero,440a128 <__subdf3+0x82c>
 440a0cc:	1808d0fa 	srli	r4,r3,3
 440a0d0:	8822d0fa 	srli	r17,r17,3
 440a0d4:	1806977a 	slli	r3,r3,29
 440a0d8:	2080022c 	andhi	r2,r4,8
 440a0dc:	1c62b03a 	or	r17,r3,r17
 440a0e0:	10000726 	beq	r2,zero,440a100 <__subdf3+0x804>
 440a0e4:	2812d0fa 	srli	r9,r5,3
 440a0e8:	4880022c 	andhi	r2,r9,8
 440a0ec:	1000041e 	bne	r2,zero,440a100 <__subdf3+0x804>
 440a0f0:	300cd0fa 	srli	r6,r6,3
 440a0f4:	2804977a 	slli	r2,r5,29
 440a0f8:	4809883a 	mov	r4,r9
 440a0fc:	11a2b03a 	or	r17,r2,r6
 440a100:	8806d77a 	srli	r3,r17,29
 440a104:	200890fa 	slli	r4,r4,3
 440a108:	882290fa 	slli	r17,r17,3
 440a10c:	3825883a 	mov	r18,r7
 440a110:	1906b03a 	or	r3,r3,r4
 440a114:	0401ffc4 	movi	r16,2047
 440a118:	003e1906 	br	4409980 <__reset+0xfb405980>
 440a11c:	000b883a 	mov	r5,zero
 440a120:	0005883a 	mov	r2,zero
 440a124:	003e2e06 	br	44099e0 <__reset+0xfb4059e0>
 440a128:	0401ffc4 	movi	r16,2047
 440a12c:	003e1406 	br	4409980 <__reset+0xfb405980>
 440a130:	0005883a 	mov	r2,zero
 440a134:	003f7506 	br	4409f0c <__reset+0xfb405f0c>
 440a138:	0005883a 	mov	r2,zero
 440a13c:	0009883a 	mov	r4,zero
 440a140:	003e7806 	br	4409b24 <__reset+0xfb405b24>
 440a144:	123ff804 	addi	r8,r2,-32
 440a148:	01000804 	movi	r4,32
 440a14c:	1a10d83a 	srl	r8,r3,r8
 440a150:	11002526 	beq	r2,r4,440a1e8 <__subdf3+0x8ec>
 440a154:	01001004 	movi	r4,64
 440a158:	2085c83a 	sub	r2,r4,r2
 440a15c:	1884983a 	sll	r2,r3,r2
 440a160:	1444b03a 	or	r2,r2,r17
 440a164:	1004c03a 	cmpne	r2,r2,zero
 440a168:	40a2b03a 	or	r17,r8,r2
 440a16c:	0005883a 	mov	r2,zero
 440a170:	003f1606 	br	4409dcc <__reset+0xfb405dcc>
 440a174:	02000434 	movhi	r8,16
 440a178:	0009883a 	mov	r4,zero
 440a17c:	423fffc4 	addi	r8,r8,-1
 440a180:	00bfffc4 	movi	r2,-1
 440a184:	0401ffc4 	movi	r16,2047
 440a188:	003e6606 	br	4409b24 <__reset+0xfb405b24>
 440a18c:	1c62b03a 	or	r17,r3,r17
 440a190:	8822c03a 	cmpne	r17,r17,zero
 440a194:	0005883a 	mov	r2,zero
 440a198:	003f9906 	br	440a000 <__reset+0xfb406000>
 440a19c:	2807883a 	mov	r3,r5
 440a1a0:	3023883a 	mov	r17,r6
 440a1a4:	0401ffc4 	movi	r16,2047
 440a1a8:	003df506 	br	4409980 <__reset+0xfb405980>
 440a1ac:	2807883a 	mov	r3,r5
 440a1b0:	3023883a 	mov	r17,r6
 440a1b4:	003df206 	br	4409980 <__reset+0xfb405980>
 440a1b8:	123ff804 	addi	r8,r2,-32
 440a1bc:	01000804 	movi	r4,32
 440a1c0:	1a10d83a 	srl	r8,r3,r8
 440a1c4:	11000a26 	beq	r2,r4,440a1f0 <__subdf3+0x8f4>
 440a1c8:	01001004 	movi	r4,64
 440a1cc:	2085c83a 	sub	r2,r4,r2
 440a1d0:	1884983a 	sll	r2,r3,r2
 440a1d4:	1444b03a 	or	r2,r2,r17
 440a1d8:	1004c03a 	cmpne	r2,r2,zero
 440a1dc:	40a2b03a 	or	r17,r8,r2
 440a1e0:	0005883a 	mov	r2,zero
 440a1e4:	003f8606 	br	440a000 <__reset+0xfb406000>
 440a1e8:	0005883a 	mov	r2,zero
 440a1ec:	003fdc06 	br	440a160 <__reset+0xfb406160>
 440a1f0:	0005883a 	mov	r2,zero
 440a1f4:	003ff706 	br	440a1d4 <__reset+0xfb4061d4>

0440a1f8 <__fixdfsi>:
 440a1f8:	280cd53a 	srli	r6,r5,20
 440a1fc:	00c00434 	movhi	r3,16
 440a200:	18ffffc4 	addi	r3,r3,-1
 440a204:	3181ffcc 	andi	r6,r6,2047
 440a208:	01c0ff84 	movi	r7,1022
 440a20c:	28c6703a 	and	r3,r5,r3
 440a210:	280ad7fa 	srli	r5,r5,31
 440a214:	3980120e 	bge	r7,r6,440a260 <__fixdfsi+0x68>
 440a218:	00810744 	movi	r2,1053
 440a21c:	11800c16 	blt	r2,r6,440a250 <__fixdfsi+0x58>
 440a220:	00810cc4 	movi	r2,1075
 440a224:	1185c83a 	sub	r2,r2,r6
 440a228:	01c007c4 	movi	r7,31
 440a22c:	18c00434 	orhi	r3,r3,16
 440a230:	38800d16 	blt	r7,r2,440a268 <__fixdfsi+0x70>
 440a234:	31befb44 	addi	r6,r6,-1043
 440a238:	2084d83a 	srl	r2,r4,r2
 440a23c:	1986983a 	sll	r3,r3,r6
 440a240:	1884b03a 	or	r2,r3,r2
 440a244:	28000726 	beq	r5,zero,440a264 <__fixdfsi+0x6c>
 440a248:	0085c83a 	sub	r2,zero,r2
 440a24c:	f800283a 	ret
 440a250:	00a00034 	movhi	r2,32768
 440a254:	10bfffc4 	addi	r2,r2,-1
 440a258:	2885883a 	add	r2,r5,r2
 440a25c:	f800283a 	ret
 440a260:	0005883a 	mov	r2,zero
 440a264:	f800283a 	ret
 440a268:	008104c4 	movi	r2,1043
 440a26c:	1185c83a 	sub	r2,r2,r6
 440a270:	1884d83a 	srl	r2,r3,r2
 440a274:	003ff306 	br	440a244 <__reset+0xfb406244>

0440a278 <__floatsidf>:
 440a278:	defffd04 	addi	sp,sp,-12
 440a27c:	dfc00215 	stw	ra,8(sp)
 440a280:	dc400115 	stw	r17,4(sp)
 440a284:	dc000015 	stw	r16,0(sp)
 440a288:	20002b26 	beq	r4,zero,440a338 <__floatsidf+0xc0>
 440a28c:	2023883a 	mov	r17,r4
 440a290:	2020d7fa 	srli	r16,r4,31
 440a294:	20002d16 	blt	r4,zero,440a34c <__floatsidf+0xd4>
 440a298:	8809883a 	mov	r4,r17
 440a29c:	440a3540 	call	440a354 <__clzsi2>
 440a2a0:	01410784 	movi	r5,1054
 440a2a4:	288bc83a 	sub	r5,r5,r2
 440a2a8:	01010cc4 	movi	r4,1075
 440a2ac:	2149c83a 	sub	r4,r4,r5
 440a2b0:	00c007c4 	movi	r3,31
 440a2b4:	1900160e 	bge	r3,r4,440a310 <__floatsidf+0x98>
 440a2b8:	00c104c4 	movi	r3,1043
 440a2bc:	1947c83a 	sub	r3,r3,r5
 440a2c0:	88c6983a 	sll	r3,r17,r3
 440a2c4:	00800434 	movhi	r2,16
 440a2c8:	10bfffc4 	addi	r2,r2,-1
 440a2cc:	1886703a 	and	r3,r3,r2
 440a2d0:	2941ffcc 	andi	r5,r5,2047
 440a2d4:	800d883a 	mov	r6,r16
 440a2d8:	0005883a 	mov	r2,zero
 440a2dc:	280a953a 	slli	r5,r5,20
 440a2e0:	31803fcc 	andi	r6,r6,255
 440a2e4:	01000434 	movhi	r4,16
 440a2e8:	300c97fa 	slli	r6,r6,31
 440a2ec:	213fffc4 	addi	r4,r4,-1
 440a2f0:	1906703a 	and	r3,r3,r4
 440a2f4:	1946b03a 	or	r3,r3,r5
 440a2f8:	1986b03a 	or	r3,r3,r6
 440a2fc:	dfc00217 	ldw	ra,8(sp)
 440a300:	dc400117 	ldw	r17,4(sp)
 440a304:	dc000017 	ldw	r16,0(sp)
 440a308:	dec00304 	addi	sp,sp,12
 440a30c:	f800283a 	ret
 440a310:	00c002c4 	movi	r3,11
 440a314:	1887c83a 	sub	r3,r3,r2
 440a318:	88c6d83a 	srl	r3,r17,r3
 440a31c:	8904983a 	sll	r2,r17,r4
 440a320:	01000434 	movhi	r4,16
 440a324:	213fffc4 	addi	r4,r4,-1
 440a328:	2941ffcc 	andi	r5,r5,2047
 440a32c:	1906703a 	and	r3,r3,r4
 440a330:	800d883a 	mov	r6,r16
 440a334:	003fe906 	br	440a2dc <__reset+0xfb4062dc>
 440a338:	000d883a 	mov	r6,zero
 440a33c:	000b883a 	mov	r5,zero
 440a340:	0007883a 	mov	r3,zero
 440a344:	0005883a 	mov	r2,zero
 440a348:	003fe406 	br	440a2dc <__reset+0xfb4062dc>
 440a34c:	0123c83a 	sub	r17,zero,r4
 440a350:	003fd106 	br	440a298 <__reset+0xfb406298>

0440a354 <__clzsi2>:
 440a354:	00bfffd4 	movui	r2,65535
 440a358:	11000536 	bltu	r2,r4,440a370 <__clzsi2+0x1c>
 440a35c:	00803fc4 	movi	r2,255
 440a360:	11000f36 	bltu	r2,r4,440a3a0 <__clzsi2+0x4c>
 440a364:	00800804 	movi	r2,32
 440a368:	0007883a 	mov	r3,zero
 440a36c:	00000506 	br	440a384 <__clzsi2+0x30>
 440a370:	00804034 	movhi	r2,256
 440a374:	10bfffc4 	addi	r2,r2,-1
 440a378:	11000c2e 	bgeu	r2,r4,440a3ac <__clzsi2+0x58>
 440a37c:	00800204 	movi	r2,8
 440a380:	00c00604 	movi	r3,24
 440a384:	20c8d83a 	srl	r4,r4,r3
 440a388:	00c110f4 	movhi	r3,1091
 440a38c:	18d2e344 	addi	r3,r3,19341
 440a390:	1909883a 	add	r4,r3,r4
 440a394:	20c00003 	ldbu	r3,0(r4)
 440a398:	10c5c83a 	sub	r2,r2,r3
 440a39c:	f800283a 	ret
 440a3a0:	00800604 	movi	r2,24
 440a3a4:	00c00204 	movi	r3,8
 440a3a8:	003ff606 	br	440a384 <__reset+0xfb406384>
 440a3ac:	00800404 	movi	r2,16
 440a3b0:	1007883a 	mov	r3,r2
 440a3b4:	003ff306 	br	440a384 <__reset+0xfb406384>

0440a3b8 <__errno>:
 440a3b8:	00811134 	movhi	r2,1092
 440a3bc:	10a15004 	addi	r2,r2,-31424
 440a3c0:	10800017 	ldw	r2,0(r2)
 440a3c4:	f800283a 	ret

0440a3c8 <malloc>:
 440a3c8:	00811134 	movhi	r2,1092
 440a3cc:	10a15004 	addi	r2,r2,-31424
 440a3d0:	200b883a 	mov	r5,r4
 440a3d4:	11000017 	ldw	r4,0(r2)
 440a3d8:	440a3f01 	jmpi	440a3f0 <_malloc_r>

0440a3dc <free>:
 440a3dc:	00811134 	movhi	r2,1092
 440a3e0:	10a15004 	addi	r2,r2,-31424
 440a3e4:	200b883a 	mov	r5,r4
 440a3e8:	11000017 	ldw	r4,0(r2)
 440a3ec:	44119001 	jmpi	4411900 <_free_r>

0440a3f0 <_malloc_r>:
 440a3f0:	defff504 	addi	sp,sp,-44
 440a3f4:	dc800315 	stw	r18,12(sp)
 440a3f8:	dfc00a15 	stw	ra,40(sp)
 440a3fc:	df000915 	stw	fp,36(sp)
 440a400:	ddc00815 	stw	r23,32(sp)
 440a404:	dd800715 	stw	r22,28(sp)
 440a408:	dd400615 	stw	r21,24(sp)
 440a40c:	dd000515 	stw	r20,20(sp)
 440a410:	dcc00415 	stw	r19,16(sp)
 440a414:	dc400215 	stw	r17,8(sp)
 440a418:	dc000115 	stw	r16,4(sp)
 440a41c:	288002c4 	addi	r2,r5,11
 440a420:	00c00584 	movi	r3,22
 440a424:	2025883a 	mov	r18,r4
 440a428:	18807f2e 	bgeu	r3,r2,440a628 <_malloc_r+0x238>
 440a42c:	047ffe04 	movi	r17,-8
 440a430:	1462703a 	and	r17,r2,r17
 440a434:	8800a316 	blt	r17,zero,440a6c4 <_malloc_r+0x2d4>
 440a438:	8940a236 	bltu	r17,r5,440a6c4 <_malloc_r+0x2d4>
 440a43c:	44188c40 	call	44188c4 <__malloc_lock>
 440a440:	00807dc4 	movi	r2,503
 440a444:	1441e92e 	bgeu	r2,r17,440abec <_malloc_r+0x7fc>
 440a448:	8804d27a 	srli	r2,r17,9
 440a44c:	1000a126 	beq	r2,zero,440a6d4 <_malloc_r+0x2e4>
 440a450:	00c00104 	movi	r3,4
 440a454:	18811e36 	bltu	r3,r2,440a8d0 <_malloc_r+0x4e0>
 440a458:	8804d1ba 	srli	r2,r17,6
 440a45c:	12000e44 	addi	r8,r2,57
 440a460:	11c00e04 	addi	r7,r2,56
 440a464:	4209883a 	add	r4,r8,r8
 440a468:	04c110f4 	movhi	r19,1091
 440a46c:	2109883a 	add	r4,r4,r4
 440a470:	9cdbaa04 	addi	r19,r19,28328
 440a474:	2109883a 	add	r4,r4,r4
 440a478:	9909883a 	add	r4,r19,r4
 440a47c:	24000117 	ldw	r16,4(r4)
 440a480:	213ffe04 	addi	r4,r4,-8
 440a484:	24009726 	beq	r4,r16,440a6e4 <_malloc_r+0x2f4>
 440a488:	80800117 	ldw	r2,4(r16)
 440a48c:	01bfff04 	movi	r6,-4
 440a490:	014003c4 	movi	r5,15
 440a494:	1184703a 	and	r2,r2,r6
 440a498:	1447c83a 	sub	r3,r2,r17
 440a49c:	28c00716 	blt	r5,r3,440a4bc <_malloc_r+0xcc>
 440a4a0:	1800920e 	bge	r3,zero,440a6ec <_malloc_r+0x2fc>
 440a4a4:	84000317 	ldw	r16,12(r16)
 440a4a8:	24008e26 	beq	r4,r16,440a6e4 <_malloc_r+0x2f4>
 440a4ac:	80800117 	ldw	r2,4(r16)
 440a4b0:	1184703a 	and	r2,r2,r6
 440a4b4:	1447c83a 	sub	r3,r2,r17
 440a4b8:	28fff90e 	bge	r5,r3,440a4a0 <__reset+0xfb4064a0>
 440a4bc:	3809883a 	mov	r4,r7
 440a4c0:	018110f4 	movhi	r6,1091
 440a4c4:	9c000417 	ldw	r16,16(r19)
 440a4c8:	319baa04 	addi	r6,r6,28328
 440a4cc:	32000204 	addi	r8,r6,8
 440a4d0:	82013426 	beq	r16,r8,440a9a4 <_malloc_r+0x5b4>
 440a4d4:	80c00117 	ldw	r3,4(r16)
 440a4d8:	00bfff04 	movi	r2,-4
 440a4dc:	188e703a 	and	r7,r3,r2
 440a4e0:	3c45c83a 	sub	r2,r7,r17
 440a4e4:	00c003c4 	movi	r3,15
 440a4e8:	18811f16 	blt	r3,r2,440a968 <_malloc_r+0x578>
 440a4ec:	32000515 	stw	r8,20(r6)
 440a4f0:	32000415 	stw	r8,16(r6)
 440a4f4:	10007f0e 	bge	r2,zero,440a6f4 <_malloc_r+0x304>
 440a4f8:	00807fc4 	movi	r2,511
 440a4fc:	11c0fd36 	bltu	r2,r7,440a8f4 <_malloc_r+0x504>
 440a500:	3806d0fa 	srli	r3,r7,3
 440a504:	01c00044 	movi	r7,1
 440a508:	30800117 	ldw	r2,4(r6)
 440a50c:	19400044 	addi	r5,r3,1
 440a510:	294b883a 	add	r5,r5,r5
 440a514:	1807d0ba 	srai	r3,r3,2
 440a518:	294b883a 	add	r5,r5,r5
 440a51c:	294b883a 	add	r5,r5,r5
 440a520:	298b883a 	add	r5,r5,r6
 440a524:	38c6983a 	sll	r3,r7,r3
 440a528:	29c00017 	ldw	r7,0(r5)
 440a52c:	2a7ffe04 	addi	r9,r5,-8
 440a530:	1886b03a 	or	r3,r3,r2
 440a534:	82400315 	stw	r9,12(r16)
 440a538:	81c00215 	stw	r7,8(r16)
 440a53c:	30c00115 	stw	r3,4(r6)
 440a540:	2c000015 	stw	r16,0(r5)
 440a544:	3c000315 	stw	r16,12(r7)
 440a548:	2005d0ba 	srai	r2,r4,2
 440a54c:	01400044 	movi	r5,1
 440a550:	288a983a 	sll	r5,r5,r2
 440a554:	19406f36 	bltu	r3,r5,440a714 <_malloc_r+0x324>
 440a558:	28c4703a 	and	r2,r5,r3
 440a55c:	10000a1e 	bne	r2,zero,440a588 <_malloc_r+0x198>
 440a560:	00bfff04 	movi	r2,-4
 440a564:	294b883a 	add	r5,r5,r5
 440a568:	2088703a 	and	r4,r4,r2
 440a56c:	28c4703a 	and	r2,r5,r3
 440a570:	21000104 	addi	r4,r4,4
 440a574:	1000041e 	bne	r2,zero,440a588 <_malloc_r+0x198>
 440a578:	294b883a 	add	r5,r5,r5
 440a57c:	28c4703a 	and	r2,r5,r3
 440a580:	21000104 	addi	r4,r4,4
 440a584:	103ffc26 	beq	r2,zero,440a578 <__reset+0xfb406578>
 440a588:	02bfff04 	movi	r10,-4
 440a58c:	024003c4 	movi	r9,15
 440a590:	21800044 	addi	r6,r4,1
 440a594:	318d883a 	add	r6,r6,r6
 440a598:	318d883a 	add	r6,r6,r6
 440a59c:	318d883a 	add	r6,r6,r6
 440a5a0:	998d883a 	add	r6,r19,r6
 440a5a4:	333ffe04 	addi	r12,r6,-8
 440a5a8:	2017883a 	mov	r11,r4
 440a5ac:	31800104 	addi	r6,r6,4
 440a5b0:	34000017 	ldw	r16,0(r6)
 440a5b4:	31fffd04 	addi	r7,r6,-12
 440a5b8:	81c0041e 	bne	r16,r7,440a5cc <_malloc_r+0x1dc>
 440a5bc:	0000fb06 	br	440a9ac <_malloc_r+0x5bc>
 440a5c0:	1801030e 	bge	r3,zero,440a9d0 <_malloc_r+0x5e0>
 440a5c4:	84000317 	ldw	r16,12(r16)
 440a5c8:	81c0f826 	beq	r16,r7,440a9ac <_malloc_r+0x5bc>
 440a5cc:	80800117 	ldw	r2,4(r16)
 440a5d0:	1284703a 	and	r2,r2,r10
 440a5d4:	1447c83a 	sub	r3,r2,r17
 440a5d8:	48fff90e 	bge	r9,r3,440a5c0 <__reset+0xfb4065c0>
 440a5dc:	80800317 	ldw	r2,12(r16)
 440a5e0:	81000217 	ldw	r4,8(r16)
 440a5e4:	89400054 	ori	r5,r17,1
 440a5e8:	81400115 	stw	r5,4(r16)
 440a5ec:	20800315 	stw	r2,12(r4)
 440a5f0:	11000215 	stw	r4,8(r2)
 440a5f4:	8463883a 	add	r17,r16,r17
 440a5f8:	9c400515 	stw	r17,20(r19)
 440a5fc:	9c400415 	stw	r17,16(r19)
 440a600:	18800054 	ori	r2,r3,1
 440a604:	88800115 	stw	r2,4(r17)
 440a608:	8a000315 	stw	r8,12(r17)
 440a60c:	8a000215 	stw	r8,8(r17)
 440a610:	88e3883a 	add	r17,r17,r3
 440a614:	88c00015 	stw	r3,0(r17)
 440a618:	9009883a 	mov	r4,r18
 440a61c:	44188e80 	call	44188e8 <__malloc_unlock>
 440a620:	80800204 	addi	r2,r16,8
 440a624:	00001b06 	br	440a694 <_malloc_r+0x2a4>
 440a628:	04400404 	movi	r17,16
 440a62c:	89402536 	bltu	r17,r5,440a6c4 <_malloc_r+0x2d4>
 440a630:	44188c40 	call	44188c4 <__malloc_lock>
 440a634:	00800184 	movi	r2,6
 440a638:	01000084 	movi	r4,2
 440a63c:	04c110f4 	movhi	r19,1091
 440a640:	1085883a 	add	r2,r2,r2
 440a644:	9cdbaa04 	addi	r19,r19,28328
 440a648:	1085883a 	add	r2,r2,r2
 440a64c:	9885883a 	add	r2,r19,r2
 440a650:	14000117 	ldw	r16,4(r2)
 440a654:	10fffe04 	addi	r3,r2,-8
 440a658:	80c0d926 	beq	r16,r3,440a9c0 <_malloc_r+0x5d0>
 440a65c:	80c00117 	ldw	r3,4(r16)
 440a660:	81000317 	ldw	r4,12(r16)
 440a664:	00bfff04 	movi	r2,-4
 440a668:	1884703a 	and	r2,r3,r2
 440a66c:	81400217 	ldw	r5,8(r16)
 440a670:	8085883a 	add	r2,r16,r2
 440a674:	10c00117 	ldw	r3,4(r2)
 440a678:	29000315 	stw	r4,12(r5)
 440a67c:	21400215 	stw	r5,8(r4)
 440a680:	18c00054 	ori	r3,r3,1
 440a684:	10c00115 	stw	r3,4(r2)
 440a688:	9009883a 	mov	r4,r18
 440a68c:	44188e80 	call	44188e8 <__malloc_unlock>
 440a690:	80800204 	addi	r2,r16,8
 440a694:	dfc00a17 	ldw	ra,40(sp)
 440a698:	df000917 	ldw	fp,36(sp)
 440a69c:	ddc00817 	ldw	r23,32(sp)
 440a6a0:	dd800717 	ldw	r22,28(sp)
 440a6a4:	dd400617 	ldw	r21,24(sp)
 440a6a8:	dd000517 	ldw	r20,20(sp)
 440a6ac:	dcc00417 	ldw	r19,16(sp)
 440a6b0:	dc800317 	ldw	r18,12(sp)
 440a6b4:	dc400217 	ldw	r17,8(sp)
 440a6b8:	dc000117 	ldw	r16,4(sp)
 440a6bc:	dec00b04 	addi	sp,sp,44
 440a6c0:	f800283a 	ret
 440a6c4:	00800304 	movi	r2,12
 440a6c8:	90800015 	stw	r2,0(r18)
 440a6cc:	0005883a 	mov	r2,zero
 440a6d0:	003ff006 	br	440a694 <__reset+0xfb406694>
 440a6d4:	01002004 	movi	r4,128
 440a6d8:	02001004 	movi	r8,64
 440a6dc:	01c00fc4 	movi	r7,63
 440a6e0:	003f6106 	br	440a468 <__reset+0xfb406468>
 440a6e4:	4009883a 	mov	r4,r8
 440a6e8:	003f7506 	br	440a4c0 <__reset+0xfb4064c0>
 440a6ec:	81000317 	ldw	r4,12(r16)
 440a6f0:	003fde06 	br	440a66c <__reset+0xfb40666c>
 440a6f4:	81c5883a 	add	r2,r16,r7
 440a6f8:	11400117 	ldw	r5,4(r2)
 440a6fc:	9009883a 	mov	r4,r18
 440a700:	29400054 	ori	r5,r5,1
 440a704:	11400115 	stw	r5,4(r2)
 440a708:	44188e80 	call	44188e8 <__malloc_unlock>
 440a70c:	80800204 	addi	r2,r16,8
 440a710:	003fe006 	br	440a694 <__reset+0xfb406694>
 440a714:	9c000217 	ldw	r16,8(r19)
 440a718:	00bfff04 	movi	r2,-4
 440a71c:	85800117 	ldw	r22,4(r16)
 440a720:	b0ac703a 	and	r22,r22,r2
 440a724:	b4400336 	bltu	r22,r17,440a734 <_malloc_r+0x344>
 440a728:	b445c83a 	sub	r2,r22,r17
 440a72c:	00c003c4 	movi	r3,15
 440a730:	18805d16 	blt	r3,r2,440a8a8 <_malloc_r+0x4b8>
 440a734:	05c11134 	movhi	r23,1092
 440a738:	00811134 	movhi	r2,1092
 440a73c:	10af0f04 	addi	r2,r2,-17348
 440a740:	bde15104 	addi	r23,r23,-31420
 440a744:	15400017 	ldw	r21,0(r2)
 440a748:	b8c00017 	ldw	r3,0(r23)
 440a74c:	00bfffc4 	movi	r2,-1
 440a750:	858d883a 	add	r6,r16,r22
 440a754:	8d6b883a 	add	r21,r17,r21
 440a758:	1880ea26 	beq	r3,r2,440ab04 <_malloc_r+0x714>
 440a75c:	ad4403c4 	addi	r21,r21,4111
 440a760:	00bc0004 	movi	r2,-4096
 440a764:	a8aa703a 	and	r21,r21,r2
 440a768:	a80b883a 	mov	r5,r21
 440a76c:	9009883a 	mov	r4,r18
 440a770:	d9800015 	stw	r6,0(sp)
 440a774:	440afac0 	call	440afac <_sbrk_r>
 440a778:	1029883a 	mov	r20,r2
 440a77c:	00bfffc4 	movi	r2,-1
 440a780:	d9800017 	ldw	r6,0(sp)
 440a784:	a080e826 	beq	r20,r2,440ab28 <_malloc_r+0x738>
 440a788:	a180a636 	bltu	r20,r6,440aa24 <_malloc_r+0x634>
 440a78c:	07011134 	movhi	fp,1092
 440a790:	e72f1b04 	addi	fp,fp,-17300
 440a794:	e0800017 	ldw	r2,0(fp)
 440a798:	a887883a 	add	r3,r21,r2
 440a79c:	e0c00015 	stw	r3,0(fp)
 440a7a0:	3500e626 	beq	r6,r20,440ab3c <_malloc_r+0x74c>
 440a7a4:	b9000017 	ldw	r4,0(r23)
 440a7a8:	00bfffc4 	movi	r2,-1
 440a7ac:	2080ee26 	beq	r4,r2,440ab68 <_malloc_r+0x778>
 440a7b0:	a185c83a 	sub	r2,r20,r6
 440a7b4:	10c5883a 	add	r2,r2,r3
 440a7b8:	e0800015 	stw	r2,0(fp)
 440a7bc:	a0c001cc 	andi	r3,r20,7
 440a7c0:	1800bc26 	beq	r3,zero,440aab4 <_malloc_r+0x6c4>
 440a7c4:	a0e9c83a 	sub	r20,r20,r3
 440a7c8:	00840204 	movi	r2,4104
 440a7cc:	a5000204 	addi	r20,r20,8
 440a7d0:	10c7c83a 	sub	r3,r2,r3
 440a7d4:	a545883a 	add	r2,r20,r21
 440a7d8:	1083ffcc 	andi	r2,r2,4095
 440a7dc:	18abc83a 	sub	r21,r3,r2
 440a7e0:	a80b883a 	mov	r5,r21
 440a7e4:	9009883a 	mov	r4,r18
 440a7e8:	440afac0 	call	440afac <_sbrk_r>
 440a7ec:	00ffffc4 	movi	r3,-1
 440a7f0:	10c0e126 	beq	r2,r3,440ab78 <_malloc_r+0x788>
 440a7f4:	1505c83a 	sub	r2,r2,r20
 440a7f8:	1545883a 	add	r2,r2,r21
 440a7fc:	10800054 	ori	r2,r2,1
 440a800:	e0c00017 	ldw	r3,0(fp)
 440a804:	9d000215 	stw	r20,8(r19)
 440a808:	a0800115 	stw	r2,4(r20)
 440a80c:	a8c7883a 	add	r3,r21,r3
 440a810:	e0c00015 	stw	r3,0(fp)
 440a814:	84c00e26 	beq	r16,r19,440a850 <_malloc_r+0x460>
 440a818:	018003c4 	movi	r6,15
 440a81c:	3580a72e 	bgeu	r6,r22,440aabc <_malloc_r+0x6cc>
 440a820:	81400117 	ldw	r5,4(r16)
 440a824:	013ffe04 	movi	r4,-8
 440a828:	b0bffd04 	addi	r2,r22,-12
 440a82c:	1104703a 	and	r2,r2,r4
 440a830:	2900004c 	andi	r4,r5,1
 440a834:	2088b03a 	or	r4,r4,r2
 440a838:	81000115 	stw	r4,4(r16)
 440a83c:	01400144 	movi	r5,5
 440a840:	8089883a 	add	r4,r16,r2
 440a844:	21400115 	stw	r5,4(r4)
 440a848:	21400215 	stw	r5,8(r4)
 440a84c:	3080cd36 	bltu	r6,r2,440ab84 <_malloc_r+0x794>
 440a850:	00811134 	movhi	r2,1092
 440a854:	10af0e04 	addi	r2,r2,-17352
 440a858:	11000017 	ldw	r4,0(r2)
 440a85c:	20c0012e 	bgeu	r4,r3,440a864 <_malloc_r+0x474>
 440a860:	10c00015 	stw	r3,0(r2)
 440a864:	00811134 	movhi	r2,1092
 440a868:	10af0d04 	addi	r2,r2,-17356
 440a86c:	11000017 	ldw	r4,0(r2)
 440a870:	9c000217 	ldw	r16,8(r19)
 440a874:	20c0012e 	bgeu	r4,r3,440a87c <_malloc_r+0x48c>
 440a878:	10c00015 	stw	r3,0(r2)
 440a87c:	80c00117 	ldw	r3,4(r16)
 440a880:	00bfff04 	movi	r2,-4
 440a884:	1886703a 	and	r3,r3,r2
 440a888:	1c45c83a 	sub	r2,r3,r17
 440a88c:	1c400236 	bltu	r3,r17,440a898 <_malloc_r+0x4a8>
 440a890:	00c003c4 	movi	r3,15
 440a894:	18800416 	blt	r3,r2,440a8a8 <_malloc_r+0x4b8>
 440a898:	9009883a 	mov	r4,r18
 440a89c:	44188e80 	call	44188e8 <__malloc_unlock>
 440a8a0:	0005883a 	mov	r2,zero
 440a8a4:	003f7b06 	br	440a694 <__reset+0xfb406694>
 440a8a8:	88c00054 	ori	r3,r17,1
 440a8ac:	80c00115 	stw	r3,4(r16)
 440a8b0:	8463883a 	add	r17,r16,r17
 440a8b4:	10800054 	ori	r2,r2,1
 440a8b8:	9c400215 	stw	r17,8(r19)
 440a8bc:	88800115 	stw	r2,4(r17)
 440a8c0:	9009883a 	mov	r4,r18
 440a8c4:	44188e80 	call	44188e8 <__malloc_unlock>
 440a8c8:	80800204 	addi	r2,r16,8
 440a8cc:	003f7106 	br	440a694 <__reset+0xfb406694>
 440a8d0:	00c00504 	movi	r3,20
 440a8d4:	18804a2e 	bgeu	r3,r2,440aa00 <_malloc_r+0x610>
 440a8d8:	00c01504 	movi	r3,84
 440a8dc:	18806e36 	bltu	r3,r2,440aa98 <_malloc_r+0x6a8>
 440a8e0:	8804d33a 	srli	r2,r17,12
 440a8e4:	12001bc4 	addi	r8,r2,111
 440a8e8:	11c01b84 	addi	r7,r2,110
 440a8ec:	4209883a 	add	r4,r8,r8
 440a8f0:	003edd06 	br	440a468 <__reset+0xfb406468>
 440a8f4:	3804d27a 	srli	r2,r7,9
 440a8f8:	00c00104 	movi	r3,4
 440a8fc:	1880442e 	bgeu	r3,r2,440aa10 <_malloc_r+0x620>
 440a900:	00c00504 	movi	r3,20
 440a904:	18808136 	bltu	r3,r2,440ab0c <_malloc_r+0x71c>
 440a908:	11401704 	addi	r5,r2,92
 440a90c:	10c016c4 	addi	r3,r2,91
 440a910:	294b883a 	add	r5,r5,r5
 440a914:	294b883a 	add	r5,r5,r5
 440a918:	294b883a 	add	r5,r5,r5
 440a91c:	994b883a 	add	r5,r19,r5
 440a920:	28800017 	ldw	r2,0(r5)
 440a924:	018110f4 	movhi	r6,1091
 440a928:	297ffe04 	addi	r5,r5,-8
 440a92c:	319baa04 	addi	r6,r6,28328
 440a930:	28806526 	beq	r5,r2,440aac8 <_malloc_r+0x6d8>
 440a934:	01bfff04 	movi	r6,-4
 440a938:	10c00117 	ldw	r3,4(r2)
 440a93c:	1986703a 	and	r3,r3,r6
 440a940:	38c0022e 	bgeu	r7,r3,440a94c <_malloc_r+0x55c>
 440a944:	10800217 	ldw	r2,8(r2)
 440a948:	28bffb1e 	bne	r5,r2,440a938 <__reset+0xfb406938>
 440a94c:	11400317 	ldw	r5,12(r2)
 440a950:	98c00117 	ldw	r3,4(r19)
 440a954:	81400315 	stw	r5,12(r16)
 440a958:	80800215 	stw	r2,8(r16)
 440a95c:	2c000215 	stw	r16,8(r5)
 440a960:	14000315 	stw	r16,12(r2)
 440a964:	003ef806 	br	440a548 <__reset+0xfb406548>
 440a968:	88c00054 	ori	r3,r17,1
 440a96c:	80c00115 	stw	r3,4(r16)
 440a970:	8463883a 	add	r17,r16,r17
 440a974:	34400515 	stw	r17,20(r6)
 440a978:	34400415 	stw	r17,16(r6)
 440a97c:	10c00054 	ori	r3,r2,1
 440a980:	8a000315 	stw	r8,12(r17)
 440a984:	8a000215 	stw	r8,8(r17)
 440a988:	88c00115 	stw	r3,4(r17)
 440a98c:	88a3883a 	add	r17,r17,r2
 440a990:	88800015 	stw	r2,0(r17)
 440a994:	9009883a 	mov	r4,r18
 440a998:	44188e80 	call	44188e8 <__malloc_unlock>
 440a99c:	80800204 	addi	r2,r16,8
 440a9a0:	003f3c06 	br	440a694 <__reset+0xfb406694>
 440a9a4:	30c00117 	ldw	r3,4(r6)
 440a9a8:	003ee706 	br	440a548 <__reset+0xfb406548>
 440a9ac:	5ac00044 	addi	r11,r11,1
 440a9b0:	588000cc 	andi	r2,r11,3
 440a9b4:	31800204 	addi	r6,r6,8
 440a9b8:	103efd1e 	bne	r2,zero,440a5b0 <__reset+0xfb4065b0>
 440a9bc:	00002406 	br	440aa50 <_malloc_r+0x660>
 440a9c0:	14000317 	ldw	r16,12(r2)
 440a9c4:	143f251e 	bne	r2,r16,440a65c <__reset+0xfb40665c>
 440a9c8:	21000084 	addi	r4,r4,2
 440a9cc:	003ebc06 	br	440a4c0 <__reset+0xfb4064c0>
 440a9d0:	8085883a 	add	r2,r16,r2
 440a9d4:	10c00117 	ldw	r3,4(r2)
 440a9d8:	81000317 	ldw	r4,12(r16)
 440a9dc:	81400217 	ldw	r5,8(r16)
 440a9e0:	18c00054 	ori	r3,r3,1
 440a9e4:	10c00115 	stw	r3,4(r2)
 440a9e8:	29000315 	stw	r4,12(r5)
 440a9ec:	21400215 	stw	r5,8(r4)
 440a9f0:	9009883a 	mov	r4,r18
 440a9f4:	44188e80 	call	44188e8 <__malloc_unlock>
 440a9f8:	80800204 	addi	r2,r16,8
 440a9fc:	003f2506 	br	440a694 <__reset+0xfb406694>
 440aa00:	12001704 	addi	r8,r2,92
 440aa04:	11c016c4 	addi	r7,r2,91
 440aa08:	4209883a 	add	r4,r8,r8
 440aa0c:	003e9606 	br	440a468 <__reset+0xfb406468>
 440aa10:	3804d1ba 	srli	r2,r7,6
 440aa14:	11400e44 	addi	r5,r2,57
 440aa18:	10c00e04 	addi	r3,r2,56
 440aa1c:	294b883a 	add	r5,r5,r5
 440aa20:	003fbc06 	br	440a914 <__reset+0xfb406914>
 440aa24:	84ff5926 	beq	r16,r19,440a78c <__reset+0xfb40678c>
 440aa28:	008110f4 	movhi	r2,1091
 440aa2c:	109baa04 	addi	r2,r2,28328
 440aa30:	14000217 	ldw	r16,8(r2)
 440aa34:	00bfff04 	movi	r2,-4
 440aa38:	80c00117 	ldw	r3,4(r16)
 440aa3c:	1886703a 	and	r3,r3,r2
 440aa40:	003f9106 	br	440a888 <__reset+0xfb406888>
 440aa44:	60800217 	ldw	r2,8(r12)
 440aa48:	213fffc4 	addi	r4,r4,-1
 440aa4c:	1300651e 	bne	r2,r12,440abe4 <_malloc_r+0x7f4>
 440aa50:	208000cc 	andi	r2,r4,3
 440aa54:	633ffe04 	addi	r12,r12,-8
 440aa58:	103ffa1e 	bne	r2,zero,440aa44 <__reset+0xfb406a44>
 440aa5c:	98800117 	ldw	r2,4(r19)
 440aa60:	0146303a 	nor	r3,zero,r5
 440aa64:	1884703a 	and	r2,r3,r2
 440aa68:	98800115 	stw	r2,4(r19)
 440aa6c:	294b883a 	add	r5,r5,r5
 440aa70:	117f2836 	bltu	r2,r5,440a714 <__reset+0xfb406714>
 440aa74:	283f2726 	beq	r5,zero,440a714 <__reset+0xfb406714>
 440aa78:	2886703a 	and	r3,r5,r2
 440aa7c:	5809883a 	mov	r4,r11
 440aa80:	183ec31e 	bne	r3,zero,440a590 <__reset+0xfb406590>
 440aa84:	294b883a 	add	r5,r5,r5
 440aa88:	2886703a 	and	r3,r5,r2
 440aa8c:	21000104 	addi	r4,r4,4
 440aa90:	183ffc26 	beq	r3,zero,440aa84 <__reset+0xfb406a84>
 440aa94:	003ebe06 	br	440a590 <__reset+0xfb406590>
 440aa98:	00c05504 	movi	r3,340
 440aa9c:	18801236 	bltu	r3,r2,440aae8 <_malloc_r+0x6f8>
 440aaa0:	8804d3fa 	srli	r2,r17,15
 440aaa4:	12001e04 	addi	r8,r2,120
 440aaa8:	11c01dc4 	addi	r7,r2,119
 440aaac:	4209883a 	add	r4,r8,r8
 440aab0:	003e6d06 	br	440a468 <__reset+0xfb406468>
 440aab4:	00c40004 	movi	r3,4096
 440aab8:	003f4606 	br	440a7d4 <__reset+0xfb4067d4>
 440aabc:	00800044 	movi	r2,1
 440aac0:	a0800115 	stw	r2,4(r20)
 440aac4:	003f7406 	br	440a898 <__reset+0xfb406898>
 440aac8:	1805d0ba 	srai	r2,r3,2
 440aacc:	01c00044 	movi	r7,1
 440aad0:	30c00117 	ldw	r3,4(r6)
 440aad4:	388e983a 	sll	r7,r7,r2
 440aad8:	2805883a 	mov	r2,r5
 440aadc:	38c6b03a 	or	r3,r7,r3
 440aae0:	30c00115 	stw	r3,4(r6)
 440aae4:	003f9b06 	br	440a954 <__reset+0xfb406954>
 440aae8:	00c15504 	movi	r3,1364
 440aaec:	18801a36 	bltu	r3,r2,440ab58 <_malloc_r+0x768>
 440aaf0:	8804d4ba 	srli	r2,r17,18
 440aaf4:	12001f44 	addi	r8,r2,125
 440aaf8:	11c01f04 	addi	r7,r2,124
 440aafc:	4209883a 	add	r4,r8,r8
 440ab00:	003e5906 	br	440a468 <__reset+0xfb406468>
 440ab04:	ad400404 	addi	r21,r21,16
 440ab08:	003f1706 	br	440a768 <__reset+0xfb406768>
 440ab0c:	00c01504 	movi	r3,84
 440ab10:	18802336 	bltu	r3,r2,440aba0 <_malloc_r+0x7b0>
 440ab14:	3804d33a 	srli	r2,r7,12
 440ab18:	11401bc4 	addi	r5,r2,111
 440ab1c:	10c01b84 	addi	r3,r2,110
 440ab20:	294b883a 	add	r5,r5,r5
 440ab24:	003f7b06 	br	440a914 <__reset+0xfb406914>
 440ab28:	9c000217 	ldw	r16,8(r19)
 440ab2c:	00bfff04 	movi	r2,-4
 440ab30:	80c00117 	ldw	r3,4(r16)
 440ab34:	1886703a 	and	r3,r3,r2
 440ab38:	003f5306 	br	440a888 <__reset+0xfb406888>
 440ab3c:	3083ffcc 	andi	r2,r6,4095
 440ab40:	103f181e 	bne	r2,zero,440a7a4 <__reset+0xfb4067a4>
 440ab44:	99000217 	ldw	r4,8(r19)
 440ab48:	b545883a 	add	r2,r22,r21
 440ab4c:	10800054 	ori	r2,r2,1
 440ab50:	20800115 	stw	r2,4(r4)
 440ab54:	003f3e06 	br	440a850 <__reset+0xfb406850>
 440ab58:	01003f84 	movi	r4,254
 440ab5c:	02001fc4 	movi	r8,127
 440ab60:	01c01f84 	movi	r7,126
 440ab64:	003e4006 	br	440a468 <__reset+0xfb406468>
 440ab68:	00811134 	movhi	r2,1092
 440ab6c:	10a15104 	addi	r2,r2,-31420
 440ab70:	15000015 	stw	r20,0(r2)
 440ab74:	003f1106 	br	440a7bc <__reset+0xfb4067bc>
 440ab78:	00800044 	movi	r2,1
 440ab7c:	002b883a 	mov	r21,zero
 440ab80:	003f1f06 	br	440a800 <__reset+0xfb406800>
 440ab84:	81400204 	addi	r5,r16,8
 440ab88:	9009883a 	mov	r4,r18
 440ab8c:	44119000 	call	4411900 <_free_r>
 440ab90:	00811134 	movhi	r2,1092
 440ab94:	10af1b04 	addi	r2,r2,-17300
 440ab98:	10c00017 	ldw	r3,0(r2)
 440ab9c:	003f2c06 	br	440a850 <__reset+0xfb406850>
 440aba0:	00c05504 	movi	r3,340
 440aba4:	18800536 	bltu	r3,r2,440abbc <_malloc_r+0x7cc>
 440aba8:	3804d3fa 	srli	r2,r7,15
 440abac:	11401e04 	addi	r5,r2,120
 440abb0:	10c01dc4 	addi	r3,r2,119
 440abb4:	294b883a 	add	r5,r5,r5
 440abb8:	003f5606 	br	440a914 <__reset+0xfb406914>
 440abbc:	00c15504 	movi	r3,1364
 440abc0:	18800536 	bltu	r3,r2,440abd8 <_malloc_r+0x7e8>
 440abc4:	3804d4ba 	srli	r2,r7,18
 440abc8:	11401f44 	addi	r5,r2,125
 440abcc:	10c01f04 	addi	r3,r2,124
 440abd0:	294b883a 	add	r5,r5,r5
 440abd4:	003f4f06 	br	440a914 <__reset+0xfb406914>
 440abd8:	01403f84 	movi	r5,254
 440abdc:	00c01f84 	movi	r3,126
 440abe0:	003f4c06 	br	440a914 <__reset+0xfb406914>
 440abe4:	98800117 	ldw	r2,4(r19)
 440abe8:	003fa006 	br	440aa6c <__reset+0xfb406a6c>
 440abec:	8808d0fa 	srli	r4,r17,3
 440abf0:	20800044 	addi	r2,r4,1
 440abf4:	1085883a 	add	r2,r2,r2
 440abf8:	003e9006 	br	440a63c <__reset+0xfb40663c>

0440abfc <memcpy>:
 440abfc:	defffd04 	addi	sp,sp,-12
 440ac00:	dfc00215 	stw	ra,8(sp)
 440ac04:	dc400115 	stw	r17,4(sp)
 440ac08:	dc000015 	stw	r16,0(sp)
 440ac0c:	00c003c4 	movi	r3,15
 440ac10:	2005883a 	mov	r2,r4
 440ac14:	1980452e 	bgeu	r3,r6,440ad2c <memcpy+0x130>
 440ac18:	2906b03a 	or	r3,r5,r4
 440ac1c:	18c000cc 	andi	r3,r3,3
 440ac20:	1800441e 	bne	r3,zero,440ad34 <memcpy+0x138>
 440ac24:	347ffc04 	addi	r17,r6,-16
 440ac28:	8822d13a 	srli	r17,r17,4
 440ac2c:	28c00104 	addi	r3,r5,4
 440ac30:	23400104 	addi	r13,r4,4
 440ac34:	8820913a 	slli	r16,r17,4
 440ac38:	2b000204 	addi	r12,r5,8
 440ac3c:	22c00204 	addi	r11,r4,8
 440ac40:	84000504 	addi	r16,r16,20
 440ac44:	2a800304 	addi	r10,r5,12
 440ac48:	22400304 	addi	r9,r4,12
 440ac4c:	2c21883a 	add	r16,r5,r16
 440ac50:	2811883a 	mov	r8,r5
 440ac54:	200f883a 	mov	r7,r4
 440ac58:	41000017 	ldw	r4,0(r8)
 440ac5c:	1fc00017 	ldw	ra,0(r3)
 440ac60:	63c00017 	ldw	r15,0(r12)
 440ac64:	39000015 	stw	r4,0(r7)
 440ac68:	53800017 	ldw	r14,0(r10)
 440ac6c:	6fc00015 	stw	ra,0(r13)
 440ac70:	5bc00015 	stw	r15,0(r11)
 440ac74:	4b800015 	stw	r14,0(r9)
 440ac78:	18c00404 	addi	r3,r3,16
 440ac7c:	39c00404 	addi	r7,r7,16
 440ac80:	42000404 	addi	r8,r8,16
 440ac84:	6b400404 	addi	r13,r13,16
 440ac88:	63000404 	addi	r12,r12,16
 440ac8c:	5ac00404 	addi	r11,r11,16
 440ac90:	52800404 	addi	r10,r10,16
 440ac94:	4a400404 	addi	r9,r9,16
 440ac98:	1c3fef1e 	bne	r3,r16,440ac58 <__reset+0xfb406c58>
 440ac9c:	89c00044 	addi	r7,r17,1
 440aca0:	380e913a 	slli	r7,r7,4
 440aca4:	310003cc 	andi	r4,r6,15
 440aca8:	02c000c4 	movi	r11,3
 440acac:	11c7883a 	add	r3,r2,r7
 440acb0:	29cb883a 	add	r5,r5,r7
 440acb4:	5900212e 	bgeu	r11,r4,440ad3c <memcpy+0x140>
 440acb8:	1813883a 	mov	r9,r3
 440acbc:	2811883a 	mov	r8,r5
 440acc0:	200f883a 	mov	r7,r4
 440acc4:	42800017 	ldw	r10,0(r8)
 440acc8:	4a400104 	addi	r9,r9,4
 440accc:	39ffff04 	addi	r7,r7,-4
 440acd0:	4abfff15 	stw	r10,-4(r9)
 440acd4:	42000104 	addi	r8,r8,4
 440acd8:	59fffa36 	bltu	r11,r7,440acc4 <__reset+0xfb406cc4>
 440acdc:	213fff04 	addi	r4,r4,-4
 440ace0:	2008d0ba 	srli	r4,r4,2
 440ace4:	318000cc 	andi	r6,r6,3
 440ace8:	21000044 	addi	r4,r4,1
 440acec:	2109883a 	add	r4,r4,r4
 440acf0:	2109883a 	add	r4,r4,r4
 440acf4:	1907883a 	add	r3,r3,r4
 440acf8:	290b883a 	add	r5,r5,r4
 440acfc:	30000626 	beq	r6,zero,440ad18 <memcpy+0x11c>
 440ad00:	198d883a 	add	r6,r3,r6
 440ad04:	29c00003 	ldbu	r7,0(r5)
 440ad08:	18c00044 	addi	r3,r3,1
 440ad0c:	29400044 	addi	r5,r5,1
 440ad10:	19ffffc5 	stb	r7,-1(r3)
 440ad14:	19bffb1e 	bne	r3,r6,440ad04 <__reset+0xfb406d04>
 440ad18:	dfc00217 	ldw	ra,8(sp)
 440ad1c:	dc400117 	ldw	r17,4(sp)
 440ad20:	dc000017 	ldw	r16,0(sp)
 440ad24:	dec00304 	addi	sp,sp,12
 440ad28:	f800283a 	ret
 440ad2c:	2007883a 	mov	r3,r4
 440ad30:	003ff206 	br	440acfc <__reset+0xfb406cfc>
 440ad34:	2007883a 	mov	r3,r4
 440ad38:	003ff106 	br	440ad00 <__reset+0xfb406d00>
 440ad3c:	200d883a 	mov	r6,r4
 440ad40:	003fee06 	br	440acfc <__reset+0xfb406cfc>

0440ad44 <memset>:
 440ad44:	20c000cc 	andi	r3,r4,3
 440ad48:	2005883a 	mov	r2,r4
 440ad4c:	18004426 	beq	r3,zero,440ae60 <memset+0x11c>
 440ad50:	31ffffc4 	addi	r7,r6,-1
 440ad54:	30004026 	beq	r6,zero,440ae58 <memset+0x114>
 440ad58:	2813883a 	mov	r9,r5
 440ad5c:	200d883a 	mov	r6,r4
 440ad60:	2007883a 	mov	r3,r4
 440ad64:	00000406 	br	440ad78 <memset+0x34>
 440ad68:	3a3fffc4 	addi	r8,r7,-1
 440ad6c:	31800044 	addi	r6,r6,1
 440ad70:	38003926 	beq	r7,zero,440ae58 <memset+0x114>
 440ad74:	400f883a 	mov	r7,r8
 440ad78:	18c00044 	addi	r3,r3,1
 440ad7c:	32400005 	stb	r9,0(r6)
 440ad80:	1a0000cc 	andi	r8,r3,3
 440ad84:	403ff81e 	bne	r8,zero,440ad68 <__reset+0xfb406d68>
 440ad88:	010000c4 	movi	r4,3
 440ad8c:	21c02d2e 	bgeu	r4,r7,440ae44 <memset+0x100>
 440ad90:	29003fcc 	andi	r4,r5,255
 440ad94:	200c923a 	slli	r6,r4,8
 440ad98:	3108b03a 	or	r4,r6,r4
 440ad9c:	200c943a 	slli	r6,r4,16
 440ada0:	218cb03a 	or	r6,r4,r6
 440ada4:	010003c4 	movi	r4,15
 440ada8:	21c0182e 	bgeu	r4,r7,440ae0c <memset+0xc8>
 440adac:	3b3ffc04 	addi	r12,r7,-16
 440adb0:	6018d13a 	srli	r12,r12,4
 440adb4:	1a000104 	addi	r8,r3,4
 440adb8:	1ac00204 	addi	r11,r3,8
 440adbc:	6008913a 	slli	r4,r12,4
 440adc0:	1a800304 	addi	r10,r3,12
 440adc4:	1813883a 	mov	r9,r3
 440adc8:	21000504 	addi	r4,r4,20
 440adcc:	1909883a 	add	r4,r3,r4
 440add0:	49800015 	stw	r6,0(r9)
 440add4:	41800015 	stw	r6,0(r8)
 440add8:	59800015 	stw	r6,0(r11)
 440addc:	51800015 	stw	r6,0(r10)
 440ade0:	42000404 	addi	r8,r8,16
 440ade4:	4a400404 	addi	r9,r9,16
 440ade8:	5ac00404 	addi	r11,r11,16
 440adec:	52800404 	addi	r10,r10,16
 440adf0:	413ff71e 	bne	r8,r4,440add0 <__reset+0xfb406dd0>
 440adf4:	63000044 	addi	r12,r12,1
 440adf8:	6018913a 	slli	r12,r12,4
 440adfc:	39c003cc 	andi	r7,r7,15
 440ae00:	010000c4 	movi	r4,3
 440ae04:	1b07883a 	add	r3,r3,r12
 440ae08:	21c00e2e 	bgeu	r4,r7,440ae44 <memset+0x100>
 440ae0c:	1813883a 	mov	r9,r3
 440ae10:	3811883a 	mov	r8,r7
 440ae14:	010000c4 	movi	r4,3
 440ae18:	49800015 	stw	r6,0(r9)
 440ae1c:	423fff04 	addi	r8,r8,-4
 440ae20:	4a400104 	addi	r9,r9,4
 440ae24:	223ffc36 	bltu	r4,r8,440ae18 <__reset+0xfb406e18>
 440ae28:	393fff04 	addi	r4,r7,-4
 440ae2c:	2008d0ba 	srli	r4,r4,2
 440ae30:	39c000cc 	andi	r7,r7,3
 440ae34:	21000044 	addi	r4,r4,1
 440ae38:	2109883a 	add	r4,r4,r4
 440ae3c:	2109883a 	add	r4,r4,r4
 440ae40:	1907883a 	add	r3,r3,r4
 440ae44:	38000526 	beq	r7,zero,440ae5c <memset+0x118>
 440ae48:	19cf883a 	add	r7,r3,r7
 440ae4c:	19400005 	stb	r5,0(r3)
 440ae50:	18c00044 	addi	r3,r3,1
 440ae54:	38fffd1e 	bne	r7,r3,440ae4c <__reset+0xfb406e4c>
 440ae58:	f800283a 	ret
 440ae5c:	f800283a 	ret
 440ae60:	2007883a 	mov	r3,r4
 440ae64:	300f883a 	mov	r7,r6
 440ae68:	003fc706 	br	440ad88 <__reset+0xfb406d88>

0440ae6c <_printf_r>:
 440ae6c:	defffd04 	addi	sp,sp,-12
 440ae70:	2805883a 	mov	r2,r5
 440ae74:	dfc00015 	stw	ra,0(sp)
 440ae78:	d9800115 	stw	r6,4(sp)
 440ae7c:	d9c00215 	stw	r7,8(sp)
 440ae80:	21400217 	ldw	r5,8(r4)
 440ae84:	d9c00104 	addi	r7,sp,4
 440ae88:	100d883a 	mov	r6,r2
 440ae8c:	440d3c40 	call	440d3c4 <___vfprintf_internal_r>
 440ae90:	dfc00017 	ldw	ra,0(sp)
 440ae94:	dec00304 	addi	sp,sp,12
 440ae98:	f800283a 	ret

0440ae9c <printf>:
 440ae9c:	defffc04 	addi	sp,sp,-16
 440aea0:	dfc00015 	stw	ra,0(sp)
 440aea4:	d9400115 	stw	r5,4(sp)
 440aea8:	d9800215 	stw	r6,8(sp)
 440aeac:	d9c00315 	stw	r7,12(sp)
 440aeb0:	00811134 	movhi	r2,1092
 440aeb4:	10a15004 	addi	r2,r2,-31424
 440aeb8:	10800017 	ldw	r2,0(r2)
 440aebc:	200b883a 	mov	r5,r4
 440aec0:	d9800104 	addi	r6,sp,4
 440aec4:	11000217 	ldw	r4,8(r2)
 440aec8:	440f5bc0 	call	440f5bc <__vfprintf_internal>
 440aecc:	dfc00017 	ldw	ra,0(sp)
 440aed0:	dec00404 	addi	sp,sp,16
 440aed4:	f800283a 	ret

0440aed8 <_puts_r>:
 440aed8:	defff604 	addi	sp,sp,-40
 440aedc:	dc000715 	stw	r16,28(sp)
 440aee0:	2021883a 	mov	r16,r4
 440aee4:	2809883a 	mov	r4,r5
 440aee8:	dc400815 	stw	r17,32(sp)
 440aeec:	dfc00915 	stw	ra,36(sp)
 440aef0:	2823883a 	mov	r17,r5
 440aef4:	440b1540 	call	440b154 <strlen>
 440aef8:	10c00044 	addi	r3,r2,1
 440aefc:	d8800115 	stw	r2,4(sp)
 440af00:	008110f4 	movhi	r2,1091
 440af04:	10932504 	addi	r2,r2,19604
 440af08:	d8800215 	stw	r2,8(sp)
 440af0c:	00800044 	movi	r2,1
 440af10:	d8800315 	stw	r2,12(sp)
 440af14:	00800084 	movi	r2,2
 440af18:	dc400015 	stw	r17,0(sp)
 440af1c:	d8c00615 	stw	r3,24(sp)
 440af20:	dec00415 	stw	sp,16(sp)
 440af24:	d8800515 	stw	r2,20(sp)
 440af28:	80000226 	beq	r16,zero,440af34 <_puts_r+0x5c>
 440af2c:	80800e17 	ldw	r2,56(r16)
 440af30:	10001426 	beq	r2,zero,440af84 <_puts_r+0xac>
 440af34:	81400217 	ldw	r5,8(r16)
 440af38:	2880030b 	ldhu	r2,12(r5)
 440af3c:	10c8000c 	andi	r3,r2,8192
 440af40:	1800061e 	bne	r3,zero,440af5c <_puts_r+0x84>
 440af44:	29001917 	ldw	r4,100(r5)
 440af48:	00f7ffc4 	movi	r3,-8193
 440af4c:	10880014 	ori	r2,r2,8192
 440af50:	20c6703a 	and	r3,r4,r3
 440af54:	2880030d 	sth	r2,12(r5)
 440af58:	28c01915 	stw	r3,100(r5)
 440af5c:	d9800404 	addi	r6,sp,16
 440af60:	8009883a 	mov	r4,r16
 440af64:	4411c100 	call	4411c10 <__sfvwrite_r>
 440af68:	1000091e 	bne	r2,zero,440af90 <_puts_r+0xb8>
 440af6c:	00800284 	movi	r2,10
 440af70:	dfc00917 	ldw	ra,36(sp)
 440af74:	dc400817 	ldw	r17,32(sp)
 440af78:	dc000717 	ldw	r16,28(sp)
 440af7c:	dec00a04 	addi	sp,sp,40
 440af80:	f800283a 	ret
 440af84:	8009883a 	mov	r4,r16
 440af88:	441178c0 	call	441178c <__sinit>
 440af8c:	003fe906 	br	440af34 <__reset+0xfb406f34>
 440af90:	00bfffc4 	movi	r2,-1
 440af94:	003ff606 	br	440af70 <__reset+0xfb406f70>

0440af98 <puts>:
 440af98:	00811134 	movhi	r2,1092
 440af9c:	10a15004 	addi	r2,r2,-31424
 440afa0:	200b883a 	mov	r5,r4
 440afa4:	11000017 	ldw	r4,0(r2)
 440afa8:	440aed81 	jmpi	440aed8 <_puts_r>

0440afac <_sbrk_r>:
 440afac:	defffd04 	addi	sp,sp,-12
 440afb0:	dc000015 	stw	r16,0(sp)
 440afb4:	04011134 	movhi	r16,1092
 440afb8:	dc400115 	stw	r17,4(sp)
 440afbc:	842f1004 	addi	r16,r16,-17344
 440afc0:	2023883a 	mov	r17,r4
 440afc4:	2809883a 	mov	r4,r5
 440afc8:	dfc00215 	stw	ra,8(sp)
 440afcc:	80000015 	stw	zero,0(r16)
 440afd0:	4418abc0 	call	4418abc <sbrk>
 440afd4:	00ffffc4 	movi	r3,-1
 440afd8:	10c00526 	beq	r2,r3,440aff0 <_sbrk_r+0x44>
 440afdc:	dfc00217 	ldw	ra,8(sp)
 440afe0:	dc400117 	ldw	r17,4(sp)
 440afe4:	dc000017 	ldw	r16,0(sp)
 440afe8:	dec00304 	addi	sp,sp,12
 440afec:	f800283a 	ret
 440aff0:	80c00017 	ldw	r3,0(r16)
 440aff4:	183ff926 	beq	r3,zero,440afdc <__reset+0xfb406fdc>
 440aff8:	88c00015 	stw	r3,0(r17)
 440affc:	003ff706 	br	440afdc <__reset+0xfb406fdc>

0440b000 <_sprintf_r>:
 440b000:	deffe404 	addi	sp,sp,-112
 440b004:	2807883a 	mov	r3,r5
 440b008:	dfc01a15 	stw	ra,104(sp)
 440b00c:	d9c01b15 	stw	r7,108(sp)
 440b010:	00a00034 	movhi	r2,32768
 440b014:	10bfffc4 	addi	r2,r2,-1
 440b018:	02008204 	movi	r8,520
 440b01c:	d8800215 	stw	r2,8(sp)
 440b020:	d8800515 	stw	r2,20(sp)
 440b024:	d9c01b04 	addi	r7,sp,108
 440b028:	d80b883a 	mov	r5,sp
 440b02c:	00bfffc4 	movi	r2,-1
 440b030:	d8c00015 	stw	r3,0(sp)
 440b034:	d8c00415 	stw	r3,16(sp)
 440b038:	da00030d 	sth	r8,12(sp)
 440b03c:	d880038d 	sth	r2,14(sp)
 440b040:	440b1ec0 	call	440b1ec <___svfprintf_internal_r>
 440b044:	d8c00017 	ldw	r3,0(sp)
 440b048:	18000005 	stb	zero,0(r3)
 440b04c:	dfc01a17 	ldw	ra,104(sp)
 440b050:	dec01c04 	addi	sp,sp,112
 440b054:	f800283a 	ret

0440b058 <sprintf>:
 440b058:	deffe304 	addi	sp,sp,-116
 440b05c:	2007883a 	mov	r3,r4
 440b060:	dfc01a15 	stw	ra,104(sp)
 440b064:	d9801b15 	stw	r6,108(sp)
 440b068:	d9c01c15 	stw	r7,112(sp)
 440b06c:	01011134 	movhi	r4,1092
 440b070:	21215004 	addi	r4,r4,-31424
 440b074:	21000017 	ldw	r4,0(r4)
 440b078:	00a00034 	movhi	r2,32768
 440b07c:	10bfffc4 	addi	r2,r2,-1
 440b080:	280d883a 	mov	r6,r5
 440b084:	02008204 	movi	r8,520
 440b088:	d8800215 	stw	r2,8(sp)
 440b08c:	d8800515 	stw	r2,20(sp)
 440b090:	d9c01b04 	addi	r7,sp,108
 440b094:	d80b883a 	mov	r5,sp
 440b098:	00bfffc4 	movi	r2,-1
 440b09c:	d8c00015 	stw	r3,0(sp)
 440b0a0:	d8c00415 	stw	r3,16(sp)
 440b0a4:	da00030d 	sth	r8,12(sp)
 440b0a8:	d880038d 	sth	r2,14(sp)
 440b0ac:	440b1ec0 	call	440b1ec <___svfprintf_internal_r>
 440b0b0:	d8c00017 	ldw	r3,0(sp)
 440b0b4:	18000005 	stb	zero,0(r3)
 440b0b8:	dfc01a17 	ldw	ra,104(sp)
 440b0bc:	dec01d04 	addi	sp,sp,116
 440b0c0:	f800283a 	ret

0440b0c4 <strcpy>:
 440b0c4:	2906b03a 	or	r3,r5,r4
 440b0c8:	18c000cc 	andi	r3,r3,3
 440b0cc:	2005883a 	mov	r2,r4
 440b0d0:	1800161e 	bne	r3,zero,440b12c <strcpy+0x68>
 440b0d4:	29c00017 	ldw	r7,0(r5)
 440b0d8:	02ffbff4 	movhi	r11,65279
 440b0dc:	5affbfc4 	addi	r11,r11,-257
 440b0e0:	02a02074 	movhi	r10,32897
 440b0e4:	01c6303a 	nor	r3,zero,r7
 440b0e8:	3ac9883a 	add	r4,r7,r11
 440b0ec:	52a02004 	addi	r10,r10,-32640
 440b0f0:	20c6703a 	and	r3,r4,r3
 440b0f4:	1a86703a 	and	r3,r3,r10
 440b0f8:	18000c1e 	bne	r3,zero,440b12c <strcpy+0x68>
 440b0fc:	1011883a 	mov	r8,r2
 440b100:	41c00015 	stw	r7,0(r8)
 440b104:	29400104 	addi	r5,r5,4
 440b108:	29c00017 	ldw	r7,0(r5)
 440b10c:	41800104 	addi	r6,r8,4
 440b110:	3011883a 	mov	r8,r6
 440b114:	3ad3883a 	add	r9,r7,r11
 440b118:	01c6303a 	nor	r3,zero,r7
 440b11c:	48c6703a 	and	r3,r9,r3
 440b120:	1a86703a 	and	r3,r3,r10
 440b124:	183ff626 	beq	r3,zero,440b100 <__reset+0xfb407100>
 440b128:	00000106 	br	440b130 <strcpy+0x6c>
 440b12c:	100d883a 	mov	r6,r2
 440b130:	28c00003 	ldbu	r3,0(r5)
 440b134:	31800044 	addi	r6,r6,1
 440b138:	29400044 	addi	r5,r5,1
 440b13c:	30ffffc5 	stb	r3,-1(r6)
 440b140:	18c03fcc 	andi	r3,r3,255
 440b144:	18c0201c 	xori	r3,r3,128
 440b148:	18ffe004 	addi	r3,r3,-128
 440b14c:	183ff81e 	bne	r3,zero,440b130 <__reset+0xfb407130>
 440b150:	f800283a 	ret

0440b154 <strlen>:
 440b154:	208000cc 	andi	r2,r4,3
 440b158:	10002026 	beq	r2,zero,440b1dc <strlen+0x88>
 440b15c:	20800007 	ldb	r2,0(r4)
 440b160:	10002026 	beq	r2,zero,440b1e4 <strlen+0x90>
 440b164:	2005883a 	mov	r2,r4
 440b168:	00000206 	br	440b174 <strlen+0x20>
 440b16c:	10c00007 	ldb	r3,0(r2)
 440b170:	18001826 	beq	r3,zero,440b1d4 <strlen+0x80>
 440b174:	10800044 	addi	r2,r2,1
 440b178:	10c000cc 	andi	r3,r2,3
 440b17c:	183ffb1e 	bne	r3,zero,440b16c <__reset+0xfb40716c>
 440b180:	10c00017 	ldw	r3,0(r2)
 440b184:	01ffbff4 	movhi	r7,65279
 440b188:	39ffbfc4 	addi	r7,r7,-257
 440b18c:	00ca303a 	nor	r5,zero,r3
 440b190:	01a02074 	movhi	r6,32897
 440b194:	19c7883a 	add	r3,r3,r7
 440b198:	31a02004 	addi	r6,r6,-32640
 440b19c:	1946703a 	and	r3,r3,r5
 440b1a0:	1986703a 	and	r3,r3,r6
 440b1a4:	1800091e 	bne	r3,zero,440b1cc <strlen+0x78>
 440b1a8:	10800104 	addi	r2,r2,4
 440b1ac:	10c00017 	ldw	r3,0(r2)
 440b1b0:	19cb883a 	add	r5,r3,r7
 440b1b4:	00c6303a 	nor	r3,zero,r3
 440b1b8:	28c6703a 	and	r3,r5,r3
 440b1bc:	1986703a 	and	r3,r3,r6
 440b1c0:	183ff926 	beq	r3,zero,440b1a8 <__reset+0xfb4071a8>
 440b1c4:	00000106 	br	440b1cc <strlen+0x78>
 440b1c8:	10800044 	addi	r2,r2,1
 440b1cc:	10c00007 	ldb	r3,0(r2)
 440b1d0:	183ffd1e 	bne	r3,zero,440b1c8 <__reset+0xfb4071c8>
 440b1d4:	1105c83a 	sub	r2,r2,r4
 440b1d8:	f800283a 	ret
 440b1dc:	2005883a 	mov	r2,r4
 440b1e0:	003fe706 	br	440b180 <__reset+0xfb407180>
 440b1e4:	0005883a 	mov	r2,zero
 440b1e8:	f800283a 	ret

0440b1ec <___svfprintf_internal_r>:
 440b1ec:	deffb704 	addi	sp,sp,-292
 440b1f0:	dfc04815 	stw	ra,288(sp)
 440b1f4:	ddc04615 	stw	r23,280(sp)
 440b1f8:	d9402c15 	stw	r5,176(sp)
 440b1fc:	d9003915 	stw	r4,228(sp)
 440b200:	302f883a 	mov	r23,r6
 440b204:	d9c02d15 	stw	r7,180(sp)
 440b208:	df004715 	stw	fp,284(sp)
 440b20c:	dd804515 	stw	r22,276(sp)
 440b210:	dd404415 	stw	r21,272(sp)
 440b214:	dd004315 	stw	r20,268(sp)
 440b218:	dcc04215 	stw	r19,264(sp)
 440b21c:	dc804115 	stw	r18,260(sp)
 440b220:	dc404015 	stw	r17,256(sp)
 440b224:	dc003f15 	stw	r16,252(sp)
 440b228:	44123000 	call	4412300 <_localeconv_r>
 440b22c:	10800017 	ldw	r2,0(r2)
 440b230:	1009883a 	mov	r4,r2
 440b234:	d8803415 	stw	r2,208(sp)
 440b238:	440b1540 	call	440b154 <strlen>
 440b23c:	d8c02c17 	ldw	r3,176(sp)
 440b240:	d8803815 	stw	r2,224(sp)
 440b244:	1880030b 	ldhu	r2,12(r3)
 440b248:	1080200c 	andi	r2,r2,128
 440b24c:	10000226 	beq	r2,zero,440b258 <___svfprintf_internal_r+0x6c>
 440b250:	18800417 	ldw	r2,16(r3)
 440b254:	10067f26 	beq	r2,zero,440cc54 <___svfprintf_internal_r+0x1a68>
 440b258:	dcc03917 	ldw	r19,228(sp)
 440b25c:	d8c00404 	addi	r3,sp,16
 440b260:	054110f4 	movhi	r21,1091
 440b264:	d9001e04 	addi	r4,sp,120
 440b268:	ad533684 	addi	r21,r21,19674
 440b26c:	d8c01e15 	stw	r3,120(sp)
 440b270:	d8002015 	stw	zero,128(sp)
 440b274:	d8001f15 	stw	zero,124(sp)
 440b278:	d8003315 	stw	zero,204(sp)
 440b27c:	d8003615 	stw	zero,216(sp)
 440b280:	d8003715 	stw	zero,220(sp)
 440b284:	1811883a 	mov	r8,r3
 440b288:	d8003a15 	stw	zero,232(sp)
 440b28c:	d8003b15 	stw	zero,236(sp)
 440b290:	d8002f15 	stw	zero,188(sp)
 440b294:	d9002815 	stw	r4,160(sp)
 440b298:	b8800007 	ldb	r2,0(r23)
 440b29c:	10026726 	beq	r2,zero,440bc3c <___svfprintf_internal_r+0xa50>
 440b2a0:	00c00944 	movi	r3,37
 440b2a4:	b821883a 	mov	r16,r23
 440b2a8:	10c0021e 	bne	r2,r3,440b2b4 <___svfprintf_internal_r+0xc8>
 440b2ac:	00001406 	br	440b300 <___svfprintf_internal_r+0x114>
 440b2b0:	10c00326 	beq	r2,r3,440b2c0 <___svfprintf_internal_r+0xd4>
 440b2b4:	84000044 	addi	r16,r16,1
 440b2b8:	80800007 	ldb	r2,0(r16)
 440b2bc:	103ffc1e 	bne	r2,zero,440b2b0 <__reset+0xfb4072b0>
 440b2c0:	85e3c83a 	sub	r17,r16,r23
 440b2c4:	88000e26 	beq	r17,zero,440b300 <___svfprintf_internal_r+0x114>
 440b2c8:	d8c02017 	ldw	r3,128(sp)
 440b2cc:	d8801f17 	ldw	r2,124(sp)
 440b2d0:	45c00015 	stw	r23,0(r8)
 440b2d4:	1c47883a 	add	r3,r3,r17
 440b2d8:	10800044 	addi	r2,r2,1
 440b2dc:	d8c02015 	stw	r3,128(sp)
 440b2e0:	44400115 	stw	r17,4(r8)
 440b2e4:	d8801f15 	stw	r2,124(sp)
 440b2e8:	00c001c4 	movi	r3,7
 440b2ec:	18809716 	blt	r3,r2,440b54c <___svfprintf_internal_r+0x360>
 440b2f0:	42000204 	addi	r8,r8,8
 440b2f4:	d9402f17 	ldw	r5,188(sp)
 440b2f8:	2c4b883a 	add	r5,r5,r17
 440b2fc:	d9402f15 	stw	r5,188(sp)
 440b300:	80800007 	ldb	r2,0(r16)
 440b304:	10009826 	beq	r2,zero,440b568 <___svfprintf_internal_r+0x37c>
 440b308:	84400047 	ldb	r17,1(r16)
 440b30c:	00bfffc4 	movi	r2,-1
 440b310:	85c00044 	addi	r23,r16,1
 440b314:	d8002785 	stb	zero,158(sp)
 440b318:	0007883a 	mov	r3,zero
 440b31c:	000f883a 	mov	r7,zero
 440b320:	d8802915 	stw	r2,164(sp)
 440b324:	d8003115 	stw	zero,196(sp)
 440b328:	0025883a 	mov	r18,zero
 440b32c:	01401604 	movi	r5,88
 440b330:	01800244 	movi	r6,9
 440b334:	02800a84 	movi	r10,42
 440b338:	02401b04 	movi	r9,108
 440b33c:	bdc00044 	addi	r23,r23,1
 440b340:	88bff804 	addi	r2,r17,-32
 440b344:	2882f036 	bltu	r5,r2,440bf08 <___svfprintf_internal_r+0xd1c>
 440b348:	100490ba 	slli	r2,r2,2
 440b34c:	01011074 	movhi	r4,1089
 440b350:	212cd804 	addi	r4,r4,-19616
 440b354:	1105883a 	add	r2,r2,r4
 440b358:	10800017 	ldw	r2,0(r2)
 440b35c:	1000683a 	jmp	r2
 440b360:	0440be70 	cmpltui	r17,zero,761
 440b364:	0440bf08 	cmpgei	r17,zero,764
 440b368:	0440bf08 	cmpgei	r17,zero,764
 440b36c:	0440be64 	muli	r17,zero,761
 440b370:	0440bf08 	cmpgei	r17,zero,764
 440b374:	0440bf08 	cmpgei	r17,zero,764
 440b378:	0440bf08 	cmpgei	r17,zero,764
 440b37c:	0440bf08 	cmpgei	r17,zero,764
 440b380:	0440bf08 	cmpgei	r17,zero,764
 440b384:	0440bf08 	cmpgei	r17,zero,764
 440b388:	0440b5c4 	movi	r17,727
 440b38c:	0440bda0 	cmpeqi	r17,zero,758
 440b390:	0440bf08 	cmpgei	r17,zero,764
 440b394:	0440b4d4 	movui	r17,723
 440b398:	0440b5ec 	andhi	r17,zero,727
 440b39c:	0440bf08 	cmpgei	r17,zero,764
 440b3a0:	0440b660 	cmpeqi	r17,zero,729
 440b3a4:	0440b62c 	andhi	r17,zero,728
 440b3a8:	0440b62c 	andhi	r17,zero,728
 440b3ac:	0440b62c 	andhi	r17,zero,728
 440b3b0:	0440b62c 	andhi	r17,zero,728
 440b3b4:	0440b62c 	andhi	r17,zero,728
 440b3b8:	0440b62c 	andhi	r17,zero,728
 440b3bc:	0440b62c 	andhi	r17,zero,728
 440b3c0:	0440b62c 	andhi	r17,zero,728
 440b3c4:	0440b62c 	andhi	r17,zero,728
 440b3c8:	0440bf08 	cmpgei	r17,zero,764
 440b3cc:	0440bf08 	cmpgei	r17,zero,764
 440b3d0:	0440bf08 	cmpgei	r17,zero,764
 440b3d4:	0440bf08 	cmpgei	r17,zero,764
 440b3d8:	0440bf08 	cmpgei	r17,zero,764
 440b3dc:	0440bf08 	cmpgei	r17,zero,764
 440b3e0:	0440bf08 	cmpgei	r17,zero,764
 440b3e4:	0440bf08 	cmpgei	r17,zero,764
 440b3e8:	0440bf08 	cmpgei	r17,zero,764
 440b3ec:	0440bf08 	cmpgei	r17,zero,764
 440b3f0:	0440b718 	cmpnei	r17,zero,732
 440b3f4:	0440b66c 	andhi	r17,zero,729
 440b3f8:	0440bf08 	cmpgei	r17,zero,764
 440b3fc:	0440b66c 	andhi	r17,zero,729
 440b400:	0440bf08 	cmpgei	r17,zero,764
 440b404:	0440bf08 	cmpgei	r17,zero,764
 440b408:	0440bf08 	cmpgei	r17,zero,764
 440b40c:	0440bf08 	cmpgei	r17,zero,764
 440b410:	0440b70c 	andi	r17,zero,732
 440b414:	0440bf08 	cmpgei	r17,zero,764
 440b418:	0440bf08 	cmpgei	r17,zero,764
 440b41c:	0440b7d4 	movui	r17,735
 440b420:	0440bf08 	cmpgei	r17,zero,764
 440b424:	0440bf08 	cmpgei	r17,zero,764
 440b428:	0440bf08 	cmpgei	r17,zero,764
 440b42c:	0440bf08 	cmpgei	r17,zero,764
 440b430:	0440bf08 	cmpgei	r17,zero,764
 440b434:	0440bc44 	movi	r17,753
 440b438:	0440bf08 	cmpgei	r17,zero,764
 440b43c:	0440bf08 	cmpgei	r17,zero,764
 440b440:	0440bca4 	muli	r17,zero,754
 440b444:	0440bf08 	cmpgei	r17,zero,764
 440b448:	0440bf08 	cmpgei	r17,zero,764
 440b44c:	0440bf08 	cmpgei	r17,zero,764
 440b450:	0440bf08 	cmpgei	r17,zero,764
 440b454:	0440bf08 	cmpgei	r17,zero,764
 440b458:	0440bf08 	cmpgei	r17,zero,764
 440b45c:	0440bf08 	cmpgei	r17,zero,764
 440b460:	0440bf08 	cmpgei	r17,zero,764
 440b464:	0440bf08 	cmpgei	r17,zero,764
 440b468:	0440bf08 	cmpgei	r17,zero,764
 440b46c:	0440bd54 	movui	r17,757
 440b470:	0440be90 	cmplti	r17,zero,762
 440b474:	0440b66c 	andhi	r17,zero,729
 440b478:	0440b66c 	andhi	r17,zero,729
 440b47c:	0440b66c 	andhi	r17,zero,729
 440b480:	0440bee4 	muli	r17,zero,763
 440b484:	0440be90 	cmplti	r17,zero,762
 440b488:	0440bf08 	cmpgei	r17,zero,764
 440b48c:	0440bf08 	cmpgei	r17,zero,764
 440b490:	0440bea0 	cmpeqi	r17,zero,762
 440b494:	0440bf08 	cmpgei	r17,zero,764
 440b498:	0440beb0 	cmpltui	r17,zero,762
 440b49c:	0440bd90 	cmplti	r17,zero,758
 440b4a0:	0440b4e0 	cmpeqi	r17,zero,723
 440b4a4:	0440bdb0 	cmpltui	r17,zero,758
 440b4a8:	0440bf08 	cmpgei	r17,zero,764
 440b4ac:	0440bdbc 	xorhi	r17,zero,758
 440b4b0:	0440bf08 	cmpgei	r17,zero,764
 440b4b4:	0440be18 	cmpnei	r17,zero,760
 440b4b8:	0440bf08 	cmpgei	r17,zero,764
 440b4bc:	0440bf08 	cmpgei	r17,zero,764
 440b4c0:	0440be28 	cmpgeui	r17,zero,760
 440b4c4:	d9003117 	ldw	r4,196(sp)
 440b4c8:	d8802d15 	stw	r2,180(sp)
 440b4cc:	0109c83a 	sub	r4,zero,r4
 440b4d0:	d9003115 	stw	r4,196(sp)
 440b4d4:	94800114 	ori	r18,r18,4
 440b4d8:	bc400007 	ldb	r17,0(r23)
 440b4dc:	003f9706 	br	440b33c <__reset+0xfb40733c>
 440b4e0:	00800c04 	movi	r2,48
 440b4e4:	d9002d17 	ldw	r4,180(sp)
 440b4e8:	d9402917 	ldw	r5,164(sp)
 440b4ec:	d8802705 	stb	r2,156(sp)
 440b4f0:	00801e04 	movi	r2,120
 440b4f4:	d8802745 	stb	r2,157(sp)
 440b4f8:	d8002785 	stb	zero,158(sp)
 440b4fc:	20c00104 	addi	r3,r4,4
 440b500:	25000017 	ldw	r20,0(r4)
 440b504:	002d883a 	mov	r22,zero
 440b508:	90800094 	ori	r2,r18,2
 440b50c:	28028616 	blt	r5,zero,440bf28 <___svfprintf_internal_r+0xd3c>
 440b510:	00bfdfc4 	movi	r2,-129
 440b514:	90a4703a 	and	r18,r18,r2
 440b518:	d8c02d15 	stw	r3,180(sp)
 440b51c:	94800094 	ori	r18,r18,2
 440b520:	a002731e 	bne	r20,zero,440bef0 <___svfprintf_internal_r+0xd04>
 440b524:	008110f4 	movhi	r2,1091
 440b528:	10932f04 	addi	r2,r2,19644
 440b52c:	d8803a15 	stw	r2,232(sp)
 440b530:	04401e04 	movi	r17,120
 440b534:	d8c02917 	ldw	r3,164(sp)
 440b538:	0039883a 	mov	fp,zero
 440b53c:	1801d526 	beq	r3,zero,440bc94 <___svfprintf_internal_r+0xaa8>
 440b540:	0029883a 	mov	r20,zero
 440b544:	002d883a 	mov	r22,zero
 440b548:	0001f106 	br	440bd10 <___svfprintf_internal_r+0xb24>
 440b54c:	d9402c17 	ldw	r5,176(sp)
 440b550:	d9801e04 	addi	r6,sp,120
 440b554:	9809883a 	mov	r4,r19
 440b558:	4413ea40 	call	4413ea4 <__ssprint_r>
 440b55c:	1000081e 	bne	r2,zero,440b580 <___svfprintf_internal_r+0x394>
 440b560:	da000404 	addi	r8,sp,16
 440b564:	003f6306 	br	440b2f4 <__reset+0xfb4072f4>
 440b568:	d8802017 	ldw	r2,128(sp)
 440b56c:	10000426 	beq	r2,zero,440b580 <___svfprintf_internal_r+0x394>
 440b570:	d9402c17 	ldw	r5,176(sp)
 440b574:	d9003917 	ldw	r4,228(sp)
 440b578:	d9801e04 	addi	r6,sp,120
 440b57c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440b580:	d8802c17 	ldw	r2,176(sp)
 440b584:	10c0030b 	ldhu	r3,12(r2)
 440b588:	d8802f17 	ldw	r2,188(sp)
 440b58c:	18c0100c 	andi	r3,r3,64
 440b590:	1805f51e 	bne	r3,zero,440cd68 <___svfprintf_internal_r+0x1b7c>
 440b594:	dfc04817 	ldw	ra,288(sp)
 440b598:	df004717 	ldw	fp,284(sp)
 440b59c:	ddc04617 	ldw	r23,280(sp)
 440b5a0:	dd804517 	ldw	r22,276(sp)
 440b5a4:	dd404417 	ldw	r21,272(sp)
 440b5a8:	dd004317 	ldw	r20,268(sp)
 440b5ac:	dcc04217 	ldw	r19,264(sp)
 440b5b0:	dc804117 	ldw	r18,260(sp)
 440b5b4:	dc404017 	ldw	r17,256(sp)
 440b5b8:	dc003f17 	ldw	r16,252(sp)
 440b5bc:	dec04904 	addi	sp,sp,292
 440b5c0:	f800283a 	ret
 440b5c4:	d8802d17 	ldw	r2,180(sp)
 440b5c8:	d9002d17 	ldw	r4,180(sp)
 440b5cc:	10800017 	ldw	r2,0(r2)
 440b5d0:	d8803115 	stw	r2,196(sp)
 440b5d4:	20800104 	addi	r2,r4,4
 440b5d8:	d9003117 	ldw	r4,196(sp)
 440b5dc:	203fb916 	blt	r4,zero,440b4c4 <__reset+0xfb4074c4>
 440b5e0:	d8802d15 	stw	r2,180(sp)
 440b5e4:	bc400007 	ldb	r17,0(r23)
 440b5e8:	003f5406 	br	440b33c <__reset+0xfb40733c>
 440b5ec:	bc400007 	ldb	r17,0(r23)
 440b5f0:	bac00044 	addi	r11,r23,1
 440b5f4:	8a873926 	beq	r17,r10,440d2dc <___svfprintf_internal_r+0x20f0>
 440b5f8:	88bff404 	addi	r2,r17,-48
 440b5fc:	0009883a 	mov	r4,zero
 440b600:	30868836 	bltu	r6,r2,440d024 <___svfprintf_internal_r+0x1e38>
 440b604:	5c400007 	ldb	r17,0(r11)
 440b608:	210002a4 	muli	r4,r4,10
 440b60c:	5dc00044 	addi	r23,r11,1
 440b610:	b817883a 	mov	r11,r23
 440b614:	2089883a 	add	r4,r4,r2
 440b618:	88bff404 	addi	r2,r17,-48
 440b61c:	30bff92e 	bgeu	r6,r2,440b604 <__reset+0xfb407604>
 440b620:	2005d716 	blt	r4,zero,440cd80 <___svfprintf_internal_r+0x1b94>
 440b624:	d9002915 	stw	r4,164(sp)
 440b628:	003f4506 	br	440b340 <__reset+0xfb407340>
 440b62c:	b809883a 	mov	r4,r23
 440b630:	d8003115 	stw	zero,196(sp)
 440b634:	88bff404 	addi	r2,r17,-48
 440b638:	0017883a 	mov	r11,zero
 440b63c:	24400007 	ldb	r17,0(r4)
 440b640:	5ac002a4 	muli	r11,r11,10
 440b644:	bdc00044 	addi	r23,r23,1
 440b648:	b809883a 	mov	r4,r23
 440b64c:	12d7883a 	add	r11,r2,r11
 440b650:	88bff404 	addi	r2,r17,-48
 440b654:	30bff92e 	bgeu	r6,r2,440b63c <__reset+0xfb40763c>
 440b658:	dac03115 	stw	r11,196(sp)
 440b65c:	003f3806 	br	440b340 <__reset+0xfb407340>
 440b660:	94802014 	ori	r18,r18,128
 440b664:	bc400007 	ldb	r17,0(r23)
 440b668:	003f3406 	br	440b33c <__reset+0xfb40733c>
 440b66c:	18c03fcc 	andi	r3,r3,255
 440b670:	1807471e 	bne	r3,zero,440d390 <___svfprintf_internal_r+0x21a4>
 440b674:	9080020c 	andi	r2,r18,8
 440b678:	10047d26 	beq	r2,zero,440c870 <___svfprintf_internal_r+0x1684>
 440b67c:	d8c02d17 	ldw	r3,180(sp)
 440b680:	d9002d17 	ldw	r4,180(sp)
 440b684:	d9402d17 	ldw	r5,180(sp)
 440b688:	18c00017 	ldw	r3,0(r3)
 440b68c:	21000117 	ldw	r4,4(r4)
 440b690:	29400204 	addi	r5,r5,8
 440b694:	d8c03615 	stw	r3,216(sp)
 440b698:	d9003715 	stw	r4,220(sp)
 440b69c:	d9402d15 	stw	r5,180(sp)
 440b6a0:	d9003617 	ldw	r4,216(sp)
 440b6a4:	d9403717 	ldw	r5,220(sp)
 440b6a8:	da003e15 	stw	r8,248(sp)
 440b6ac:	04000044 	movi	r16,1
 440b6b0:	4407d2c0 	call	4407d2c <__fpclassifyd>
 440b6b4:	da003e17 	ldw	r8,248(sp)
 440b6b8:	14044b1e 	bne	r2,r16,440c7e8 <___svfprintf_internal_r+0x15fc>
 440b6bc:	d9003617 	ldw	r4,216(sp)
 440b6c0:	d9403717 	ldw	r5,220(sp)
 440b6c4:	000d883a 	mov	r6,zero
 440b6c8:	000f883a 	mov	r7,zero
 440b6cc:	44090f00 	call	44090f0 <__ledf2>
 440b6d0:	da003e17 	ldw	r8,248(sp)
 440b6d4:	1005f316 	blt	r2,zero,440cea4 <___svfprintf_internal_r+0x1cb8>
 440b6d8:	df002783 	ldbu	fp,158(sp)
 440b6dc:	008011c4 	movi	r2,71
 440b6e0:	1445590e 	bge	r2,r17,440cc48 <___svfprintf_internal_r+0x1a5c>
 440b6e4:	040110f4 	movhi	r16,1091
 440b6e8:	84132704 	addi	r16,r16,19612
 440b6ec:	00c000c4 	movi	r3,3
 440b6f0:	00bfdfc4 	movi	r2,-129
 440b6f4:	d8c02a15 	stw	r3,168(sp)
 440b6f8:	90a4703a 	and	r18,r18,r2
 440b6fc:	d8c02e15 	stw	r3,184(sp)
 440b700:	d8002915 	stw	zero,164(sp)
 440b704:	d8003215 	stw	zero,200(sp)
 440b708:	00006606 	br	440b8a4 <___svfprintf_internal_r+0x6b8>
 440b70c:	94800214 	ori	r18,r18,8
 440b710:	bc400007 	ldb	r17,0(r23)
 440b714:	003f0906 	br	440b33c <__reset+0xfb40733c>
 440b718:	18c03fcc 	andi	r3,r3,255
 440b71c:	1807181e 	bne	r3,zero,440d380 <___svfprintf_internal_r+0x2194>
 440b720:	94800414 	ori	r18,r18,16
 440b724:	9080080c 	andi	r2,r18,32
 440b728:	10039626 	beq	r2,zero,440c584 <___svfprintf_internal_r+0x1398>
 440b72c:	d9402d17 	ldw	r5,180(sp)
 440b730:	28800117 	ldw	r2,4(r5)
 440b734:	2d000017 	ldw	r20,0(r5)
 440b738:	29400204 	addi	r5,r5,8
 440b73c:	d9402d15 	stw	r5,180(sp)
 440b740:	102d883a 	mov	r22,r2
 440b744:	10039816 	blt	r2,zero,440c5a8 <___svfprintf_internal_r+0x13bc>
 440b748:	d9402917 	ldw	r5,164(sp)
 440b74c:	df002783 	ldbu	fp,158(sp)
 440b750:	2803ab16 	blt	r5,zero,440c600 <___svfprintf_internal_r+0x1414>
 440b754:	00ffdfc4 	movi	r3,-129
 440b758:	a584b03a 	or	r2,r20,r22
 440b75c:	90e4703a 	and	r18,r18,r3
 440b760:	10014a26 	beq	r2,zero,440bc8c <___svfprintf_internal_r+0xaa0>
 440b764:	b0034b26 	beq	r22,zero,440c494 <___svfprintf_internal_r+0x12a8>
 440b768:	dc402a15 	stw	r17,168(sp)
 440b76c:	dc001e04 	addi	r16,sp,120
 440b770:	b023883a 	mov	r17,r22
 440b774:	402d883a 	mov	r22,r8
 440b778:	a009883a 	mov	r4,r20
 440b77c:	880b883a 	mov	r5,r17
 440b780:	01800284 	movi	r6,10
 440b784:	000f883a 	mov	r7,zero
 440b788:	44177a40 	call	44177a4 <__umoddi3>
 440b78c:	10800c04 	addi	r2,r2,48
 440b790:	843fffc4 	addi	r16,r16,-1
 440b794:	a009883a 	mov	r4,r20
 440b798:	880b883a 	mov	r5,r17
 440b79c:	80800005 	stb	r2,0(r16)
 440b7a0:	01800284 	movi	r6,10
 440b7a4:	000f883a 	mov	r7,zero
 440b7a8:	441722c0 	call	441722c <__udivdi3>
 440b7ac:	1029883a 	mov	r20,r2
 440b7b0:	10c4b03a 	or	r2,r2,r3
 440b7b4:	1823883a 	mov	r17,r3
 440b7b8:	103fef1e 	bne	r2,zero,440b778 <__reset+0xfb407778>
 440b7bc:	d8c02817 	ldw	r3,160(sp)
 440b7c0:	dc402a17 	ldw	r17,168(sp)
 440b7c4:	b011883a 	mov	r8,r22
 440b7c8:	1c07c83a 	sub	r3,r3,r16
 440b7cc:	d8c02e15 	stw	r3,184(sp)
 440b7d0:	00002e06 	br	440b88c <___svfprintf_internal_r+0x6a0>
 440b7d4:	18c03fcc 	andi	r3,r3,255
 440b7d8:	1806e71e 	bne	r3,zero,440d378 <___svfprintf_internal_r+0x218c>
 440b7dc:	94800414 	ori	r18,r18,16
 440b7e0:	9080080c 	andi	r2,r18,32
 440b7e4:	1002d426 	beq	r2,zero,440c338 <___svfprintf_internal_r+0x114c>
 440b7e8:	d9402d17 	ldw	r5,180(sp)
 440b7ec:	d8c02917 	ldw	r3,164(sp)
 440b7f0:	d8002785 	stb	zero,158(sp)
 440b7f4:	28800204 	addi	r2,r5,8
 440b7f8:	2d000017 	ldw	r20,0(r5)
 440b7fc:	2d800117 	ldw	r22,4(r5)
 440b800:	18041516 	blt	r3,zero,440c858 <___svfprintf_internal_r+0x166c>
 440b804:	013fdfc4 	movi	r4,-129
 440b808:	a586b03a 	or	r3,r20,r22
 440b80c:	d8802d15 	stw	r2,180(sp)
 440b810:	9124703a 	and	r18,r18,r4
 440b814:	1802d51e 	bne	r3,zero,440c36c <___svfprintf_internal_r+0x1180>
 440b818:	d9402917 	ldw	r5,164(sp)
 440b81c:	0039883a 	mov	fp,zero
 440b820:	2806be26 	beq	r5,zero,440d31c <___svfprintf_internal_r+0x2130>
 440b824:	0029883a 	mov	r20,zero
 440b828:	002d883a 	mov	r22,zero
 440b82c:	dc001e04 	addi	r16,sp,120
 440b830:	a006d0fa 	srli	r3,r20,3
 440b834:	b008977a 	slli	r4,r22,29
 440b838:	b02cd0fa 	srli	r22,r22,3
 440b83c:	a50001cc 	andi	r20,r20,7
 440b840:	a0800c04 	addi	r2,r20,48
 440b844:	843fffc4 	addi	r16,r16,-1
 440b848:	20e8b03a 	or	r20,r4,r3
 440b84c:	80800005 	stb	r2,0(r16)
 440b850:	a586b03a 	or	r3,r20,r22
 440b854:	183ff61e 	bne	r3,zero,440b830 <__reset+0xfb407830>
 440b858:	90c0004c 	andi	r3,r18,1
 440b85c:	18013926 	beq	r3,zero,440bd44 <___svfprintf_internal_r+0xb58>
 440b860:	10803fcc 	andi	r2,r2,255
 440b864:	1080201c 	xori	r2,r2,128
 440b868:	10bfe004 	addi	r2,r2,-128
 440b86c:	00c00c04 	movi	r3,48
 440b870:	10c13426 	beq	r2,r3,440bd44 <___svfprintf_internal_r+0xb58>
 440b874:	80ffffc5 	stb	r3,-1(r16)
 440b878:	d8c02817 	ldw	r3,160(sp)
 440b87c:	80bfffc4 	addi	r2,r16,-1
 440b880:	1021883a 	mov	r16,r2
 440b884:	1887c83a 	sub	r3,r3,r2
 440b888:	d8c02e15 	stw	r3,184(sp)
 440b88c:	d8802e17 	ldw	r2,184(sp)
 440b890:	d9002917 	ldw	r4,164(sp)
 440b894:	1100010e 	bge	r2,r4,440b89c <___svfprintf_internal_r+0x6b0>
 440b898:	2005883a 	mov	r2,r4
 440b89c:	d8802a15 	stw	r2,168(sp)
 440b8a0:	d8003215 	stw	zero,200(sp)
 440b8a4:	e7003fcc 	andi	fp,fp,255
 440b8a8:	e700201c 	xori	fp,fp,128
 440b8ac:	e73fe004 	addi	fp,fp,-128
 440b8b0:	e0000326 	beq	fp,zero,440b8c0 <___svfprintf_internal_r+0x6d4>
 440b8b4:	d8c02a17 	ldw	r3,168(sp)
 440b8b8:	18c00044 	addi	r3,r3,1
 440b8bc:	d8c02a15 	stw	r3,168(sp)
 440b8c0:	90c0008c 	andi	r3,r18,2
 440b8c4:	d8c02b15 	stw	r3,172(sp)
 440b8c8:	18000326 	beq	r3,zero,440b8d8 <___svfprintf_internal_r+0x6ec>
 440b8cc:	d8c02a17 	ldw	r3,168(sp)
 440b8d0:	18c00084 	addi	r3,r3,2
 440b8d4:	d8c02a15 	stw	r3,168(sp)
 440b8d8:	90c0210c 	andi	r3,r18,132
 440b8dc:	d8c03015 	stw	r3,192(sp)
 440b8e0:	1801a11e 	bne	r3,zero,440bf68 <___svfprintf_internal_r+0xd7c>
 440b8e4:	d9003117 	ldw	r4,196(sp)
 440b8e8:	d8c02a17 	ldw	r3,168(sp)
 440b8ec:	20e9c83a 	sub	r20,r4,r3
 440b8f0:	05019d0e 	bge	zero,r20,440bf68 <___svfprintf_internal_r+0xd7c>
 440b8f4:	02400404 	movi	r9,16
 440b8f8:	d8c02017 	ldw	r3,128(sp)
 440b8fc:	d8801f17 	ldw	r2,124(sp)
 440b900:	4d051b0e 	bge	r9,r20,440cd70 <___svfprintf_internal_r+0x1b84>
 440b904:	014110f4 	movhi	r5,1091
 440b908:	29533a84 	addi	r5,r5,19690
 440b90c:	dc403c15 	stw	r17,240(sp)
 440b910:	d9403515 	stw	r5,212(sp)
 440b914:	a023883a 	mov	r17,r20
 440b918:	482d883a 	mov	r22,r9
 440b91c:	9029883a 	mov	r20,r18
 440b920:	070001c4 	movi	fp,7
 440b924:	8025883a 	mov	r18,r16
 440b928:	dc002c17 	ldw	r16,176(sp)
 440b92c:	00000306 	br	440b93c <___svfprintf_internal_r+0x750>
 440b930:	8c7ffc04 	addi	r17,r17,-16
 440b934:	42000204 	addi	r8,r8,8
 440b938:	b440130e 	bge	r22,r17,440b988 <___svfprintf_internal_r+0x79c>
 440b93c:	010110f4 	movhi	r4,1091
 440b940:	18c00404 	addi	r3,r3,16
 440b944:	10800044 	addi	r2,r2,1
 440b948:	21133a84 	addi	r4,r4,19690
 440b94c:	41000015 	stw	r4,0(r8)
 440b950:	45800115 	stw	r22,4(r8)
 440b954:	d8c02015 	stw	r3,128(sp)
 440b958:	d8801f15 	stw	r2,124(sp)
 440b95c:	e0bff40e 	bge	fp,r2,440b930 <__reset+0xfb407930>
 440b960:	d9801e04 	addi	r6,sp,120
 440b964:	800b883a 	mov	r5,r16
 440b968:	9809883a 	mov	r4,r19
 440b96c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440b970:	103f031e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440b974:	8c7ffc04 	addi	r17,r17,-16
 440b978:	d8c02017 	ldw	r3,128(sp)
 440b97c:	d8801f17 	ldw	r2,124(sp)
 440b980:	da000404 	addi	r8,sp,16
 440b984:	b47fed16 	blt	r22,r17,440b93c <__reset+0xfb40793c>
 440b988:	9021883a 	mov	r16,r18
 440b98c:	a025883a 	mov	r18,r20
 440b990:	8829883a 	mov	r20,r17
 440b994:	dc403c17 	ldw	r17,240(sp)
 440b998:	d9403517 	ldw	r5,212(sp)
 440b99c:	a0c7883a 	add	r3,r20,r3
 440b9a0:	10800044 	addi	r2,r2,1
 440b9a4:	41400015 	stw	r5,0(r8)
 440b9a8:	45000115 	stw	r20,4(r8)
 440b9ac:	d8c02015 	stw	r3,128(sp)
 440b9b0:	d8801f15 	stw	r2,124(sp)
 440b9b4:	010001c4 	movi	r4,7
 440b9b8:	20829f16 	blt	r4,r2,440c438 <___svfprintf_internal_r+0x124c>
 440b9bc:	df002787 	ldb	fp,158(sp)
 440b9c0:	42000204 	addi	r8,r8,8
 440b9c4:	e0000c26 	beq	fp,zero,440b9f8 <___svfprintf_internal_r+0x80c>
 440b9c8:	d8801f17 	ldw	r2,124(sp)
 440b9cc:	d9002784 	addi	r4,sp,158
 440b9d0:	18c00044 	addi	r3,r3,1
 440b9d4:	10800044 	addi	r2,r2,1
 440b9d8:	41000015 	stw	r4,0(r8)
 440b9dc:	01000044 	movi	r4,1
 440b9e0:	41000115 	stw	r4,4(r8)
 440b9e4:	d8c02015 	stw	r3,128(sp)
 440b9e8:	d8801f15 	stw	r2,124(sp)
 440b9ec:	010001c4 	movi	r4,7
 440b9f0:	20823816 	blt	r4,r2,440c2d4 <___svfprintf_internal_r+0x10e8>
 440b9f4:	42000204 	addi	r8,r8,8
 440b9f8:	d8802b17 	ldw	r2,172(sp)
 440b9fc:	10000c26 	beq	r2,zero,440ba30 <___svfprintf_internal_r+0x844>
 440ba00:	d8801f17 	ldw	r2,124(sp)
 440ba04:	d9002704 	addi	r4,sp,156
 440ba08:	18c00084 	addi	r3,r3,2
 440ba0c:	10800044 	addi	r2,r2,1
 440ba10:	41000015 	stw	r4,0(r8)
 440ba14:	01000084 	movi	r4,2
 440ba18:	41000115 	stw	r4,4(r8)
 440ba1c:	d8c02015 	stw	r3,128(sp)
 440ba20:	d8801f15 	stw	r2,124(sp)
 440ba24:	010001c4 	movi	r4,7
 440ba28:	20823216 	blt	r4,r2,440c2f4 <___svfprintf_internal_r+0x1108>
 440ba2c:	42000204 	addi	r8,r8,8
 440ba30:	d9003017 	ldw	r4,192(sp)
 440ba34:	00802004 	movi	r2,128
 440ba38:	20819726 	beq	r4,r2,440c098 <___svfprintf_internal_r+0xeac>
 440ba3c:	d9402917 	ldw	r5,164(sp)
 440ba40:	d8802e17 	ldw	r2,184(sp)
 440ba44:	28adc83a 	sub	r22,r5,r2
 440ba48:	05802f0e 	bge	zero,r22,440bb08 <___svfprintf_internal_r+0x91c>
 440ba4c:	07000404 	movi	fp,16
 440ba50:	d8801f17 	ldw	r2,124(sp)
 440ba54:	e583c00e 	bge	fp,r22,440c958 <___svfprintf_internal_r+0x176c>
 440ba58:	014110f4 	movhi	r5,1091
 440ba5c:	29533684 	addi	r5,r5,19674
 440ba60:	dc402915 	stw	r17,164(sp)
 440ba64:	d9402b15 	stw	r5,172(sp)
 440ba68:	b023883a 	mov	r17,r22
 440ba6c:	050001c4 	movi	r20,7
 440ba70:	902d883a 	mov	r22,r18
 440ba74:	8025883a 	mov	r18,r16
 440ba78:	dc002c17 	ldw	r16,176(sp)
 440ba7c:	00000306 	br	440ba8c <___svfprintf_internal_r+0x8a0>
 440ba80:	8c7ffc04 	addi	r17,r17,-16
 440ba84:	42000204 	addi	r8,r8,8
 440ba88:	e440110e 	bge	fp,r17,440bad0 <___svfprintf_internal_r+0x8e4>
 440ba8c:	18c00404 	addi	r3,r3,16
 440ba90:	10800044 	addi	r2,r2,1
 440ba94:	45400015 	stw	r21,0(r8)
 440ba98:	47000115 	stw	fp,4(r8)
 440ba9c:	d8c02015 	stw	r3,128(sp)
 440baa0:	d8801f15 	stw	r2,124(sp)
 440baa4:	a0bff60e 	bge	r20,r2,440ba80 <__reset+0xfb407a80>
 440baa8:	d9801e04 	addi	r6,sp,120
 440baac:	800b883a 	mov	r5,r16
 440bab0:	9809883a 	mov	r4,r19
 440bab4:	4413ea40 	call	4413ea4 <__ssprint_r>
 440bab8:	103eb11e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440babc:	8c7ffc04 	addi	r17,r17,-16
 440bac0:	d8c02017 	ldw	r3,128(sp)
 440bac4:	d8801f17 	ldw	r2,124(sp)
 440bac8:	da000404 	addi	r8,sp,16
 440bacc:	e47fef16 	blt	fp,r17,440ba8c <__reset+0xfb407a8c>
 440bad0:	9021883a 	mov	r16,r18
 440bad4:	b025883a 	mov	r18,r22
 440bad8:	882d883a 	mov	r22,r17
 440badc:	dc402917 	ldw	r17,164(sp)
 440bae0:	d9002b17 	ldw	r4,172(sp)
 440bae4:	1d87883a 	add	r3,r3,r22
 440bae8:	10800044 	addi	r2,r2,1
 440baec:	41000015 	stw	r4,0(r8)
 440baf0:	45800115 	stw	r22,4(r8)
 440baf4:	d8c02015 	stw	r3,128(sp)
 440baf8:	d8801f15 	stw	r2,124(sp)
 440bafc:	010001c4 	movi	r4,7
 440bb00:	2081ec16 	blt	r4,r2,440c2b4 <___svfprintf_internal_r+0x10c8>
 440bb04:	42000204 	addi	r8,r8,8
 440bb08:	9080400c 	andi	r2,r18,256
 440bb0c:	1001181e 	bne	r2,zero,440bf70 <___svfprintf_internal_r+0xd84>
 440bb10:	d9402e17 	ldw	r5,184(sp)
 440bb14:	d8801f17 	ldw	r2,124(sp)
 440bb18:	44000015 	stw	r16,0(r8)
 440bb1c:	1947883a 	add	r3,r3,r5
 440bb20:	10800044 	addi	r2,r2,1
 440bb24:	41400115 	stw	r5,4(r8)
 440bb28:	d8c02015 	stw	r3,128(sp)
 440bb2c:	d8801f15 	stw	r2,124(sp)
 440bb30:	010001c4 	movi	r4,7
 440bb34:	2081d116 	blt	r4,r2,440c27c <___svfprintf_internal_r+0x1090>
 440bb38:	42000204 	addi	r8,r8,8
 440bb3c:	9480010c 	andi	r18,r18,4
 440bb40:	90003226 	beq	r18,zero,440bc0c <___svfprintf_internal_r+0xa20>
 440bb44:	d9403117 	ldw	r5,196(sp)
 440bb48:	d8802a17 	ldw	r2,168(sp)
 440bb4c:	28a1c83a 	sub	r16,r5,r2
 440bb50:	04002e0e 	bge	zero,r16,440bc0c <___svfprintf_internal_r+0xa20>
 440bb54:	04400404 	movi	r17,16
 440bb58:	d8801f17 	ldw	r2,124(sp)
 440bb5c:	8c04b90e 	bge	r17,r16,440ce44 <___svfprintf_internal_r+0x1c58>
 440bb60:	014110f4 	movhi	r5,1091
 440bb64:	29533a84 	addi	r5,r5,19690
 440bb68:	d9403515 	stw	r5,212(sp)
 440bb6c:	048001c4 	movi	r18,7
 440bb70:	dd002c17 	ldw	r20,176(sp)
 440bb74:	00000306 	br	440bb84 <___svfprintf_internal_r+0x998>
 440bb78:	843ffc04 	addi	r16,r16,-16
 440bb7c:	42000204 	addi	r8,r8,8
 440bb80:	8c00130e 	bge	r17,r16,440bbd0 <___svfprintf_internal_r+0x9e4>
 440bb84:	010110f4 	movhi	r4,1091
 440bb88:	18c00404 	addi	r3,r3,16
 440bb8c:	10800044 	addi	r2,r2,1
 440bb90:	21133a84 	addi	r4,r4,19690
 440bb94:	41000015 	stw	r4,0(r8)
 440bb98:	44400115 	stw	r17,4(r8)
 440bb9c:	d8c02015 	stw	r3,128(sp)
 440bba0:	d8801f15 	stw	r2,124(sp)
 440bba4:	90bff40e 	bge	r18,r2,440bb78 <__reset+0xfb407b78>
 440bba8:	d9801e04 	addi	r6,sp,120
 440bbac:	a00b883a 	mov	r5,r20
 440bbb0:	9809883a 	mov	r4,r19
 440bbb4:	4413ea40 	call	4413ea4 <__ssprint_r>
 440bbb8:	103e711e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440bbbc:	843ffc04 	addi	r16,r16,-16
 440bbc0:	d8c02017 	ldw	r3,128(sp)
 440bbc4:	d8801f17 	ldw	r2,124(sp)
 440bbc8:	da000404 	addi	r8,sp,16
 440bbcc:	8c3fed16 	blt	r17,r16,440bb84 <__reset+0xfb407b84>
 440bbd0:	d9403517 	ldw	r5,212(sp)
 440bbd4:	1c07883a 	add	r3,r3,r16
 440bbd8:	10800044 	addi	r2,r2,1
 440bbdc:	41400015 	stw	r5,0(r8)
 440bbe0:	44000115 	stw	r16,4(r8)
 440bbe4:	d8c02015 	stw	r3,128(sp)
 440bbe8:	d8801f15 	stw	r2,124(sp)
 440bbec:	010001c4 	movi	r4,7
 440bbf0:	2080060e 	bge	r4,r2,440bc0c <___svfprintf_internal_r+0xa20>
 440bbf4:	d9402c17 	ldw	r5,176(sp)
 440bbf8:	d9801e04 	addi	r6,sp,120
 440bbfc:	9809883a 	mov	r4,r19
 440bc00:	4413ea40 	call	4413ea4 <__ssprint_r>
 440bc04:	103e5e1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440bc08:	d8c02017 	ldw	r3,128(sp)
 440bc0c:	d8803117 	ldw	r2,196(sp)
 440bc10:	d9002a17 	ldw	r4,168(sp)
 440bc14:	1100010e 	bge	r2,r4,440bc1c <___svfprintf_internal_r+0xa30>
 440bc18:	2005883a 	mov	r2,r4
 440bc1c:	d9402f17 	ldw	r5,188(sp)
 440bc20:	288b883a 	add	r5,r5,r2
 440bc24:	d9402f15 	stw	r5,188(sp)
 440bc28:	18019c1e 	bne	r3,zero,440c29c <___svfprintf_internal_r+0x10b0>
 440bc2c:	b8800007 	ldb	r2,0(r23)
 440bc30:	d8001f15 	stw	zero,124(sp)
 440bc34:	da000404 	addi	r8,sp,16
 440bc38:	103d991e 	bne	r2,zero,440b2a0 <__reset+0xfb4072a0>
 440bc3c:	b821883a 	mov	r16,r23
 440bc40:	003daf06 	br	440b300 <__reset+0xfb407300>
 440bc44:	18c03fcc 	andi	r3,r3,255
 440bc48:	1805c71e 	bne	r3,zero,440d368 <___svfprintf_internal_r+0x217c>
 440bc4c:	94800414 	ori	r18,r18,16
 440bc50:	9080080c 	andi	r2,r18,32
 440bc54:	10020126 	beq	r2,zero,440c45c <___svfprintf_internal_r+0x1270>
 440bc58:	d8802d17 	ldw	r2,180(sp)
 440bc5c:	d9002917 	ldw	r4,164(sp)
 440bc60:	d8002785 	stb	zero,158(sp)
 440bc64:	10c00204 	addi	r3,r2,8
 440bc68:	15000017 	ldw	r20,0(r2)
 440bc6c:	15800117 	ldw	r22,4(r2)
 440bc70:	20038e16 	blt	r4,zero,440caac <___svfprintf_internal_r+0x18c0>
 440bc74:	013fdfc4 	movi	r4,-129
 440bc78:	a584b03a 	or	r2,r20,r22
 440bc7c:	d8c02d15 	stw	r3,180(sp)
 440bc80:	9124703a 	and	r18,r18,r4
 440bc84:	0039883a 	mov	fp,zero
 440bc88:	103eb61e 	bne	r2,zero,440b764 <__reset+0xfb407764>
 440bc8c:	d8802917 	ldw	r2,164(sp)
 440bc90:	1002c81e 	bne	r2,zero,440c7b4 <___svfprintf_internal_r+0x15c8>
 440bc94:	d8002915 	stw	zero,164(sp)
 440bc98:	d8002e15 	stw	zero,184(sp)
 440bc9c:	dc001e04 	addi	r16,sp,120
 440bca0:	003efa06 	br	440b88c <__reset+0xfb40788c>
 440bca4:	18c03fcc 	andi	r3,r3,255
 440bca8:	1805ad1e 	bne	r3,zero,440d360 <___svfprintf_internal_r+0x2174>
 440bcac:	014110f4 	movhi	r5,1091
 440bcb0:	29532a04 	addi	r5,r5,19624
 440bcb4:	d9403a15 	stw	r5,232(sp)
 440bcb8:	9080080c 	andi	r2,r18,32
 440bcbc:	10006126 	beq	r2,zero,440be44 <___svfprintf_internal_r+0xc58>
 440bcc0:	d8802d17 	ldw	r2,180(sp)
 440bcc4:	15000017 	ldw	r20,0(r2)
 440bcc8:	15800117 	ldw	r22,4(r2)
 440bccc:	10800204 	addi	r2,r2,8
 440bcd0:	d8802d15 	stw	r2,180(sp)
 440bcd4:	9080004c 	andi	r2,r18,1
 440bcd8:	10018e26 	beq	r2,zero,440c314 <___svfprintf_internal_r+0x1128>
 440bcdc:	a584b03a 	or	r2,r20,r22
 440bce0:	10030926 	beq	r2,zero,440c908 <___svfprintf_internal_r+0x171c>
 440bce4:	d8c02917 	ldw	r3,164(sp)
 440bce8:	00800c04 	movi	r2,48
 440bcec:	d8802705 	stb	r2,156(sp)
 440bcf0:	dc402745 	stb	r17,157(sp)
 440bcf4:	d8002785 	stb	zero,158(sp)
 440bcf8:	90800094 	ori	r2,r18,2
 440bcfc:	18048716 	blt	r3,zero,440cf1c <___svfprintf_internal_r+0x1d30>
 440bd00:	00bfdfc4 	movi	r2,-129
 440bd04:	90a4703a 	and	r18,r18,r2
 440bd08:	94800094 	ori	r18,r18,2
 440bd0c:	0039883a 	mov	fp,zero
 440bd10:	d9003a17 	ldw	r4,232(sp)
 440bd14:	dc001e04 	addi	r16,sp,120
 440bd18:	a08003cc 	andi	r2,r20,15
 440bd1c:	b006973a 	slli	r3,r22,28
 440bd20:	2085883a 	add	r2,r4,r2
 440bd24:	a028d13a 	srli	r20,r20,4
 440bd28:	10800003 	ldbu	r2,0(r2)
 440bd2c:	b02cd13a 	srli	r22,r22,4
 440bd30:	843fffc4 	addi	r16,r16,-1
 440bd34:	1d28b03a 	or	r20,r3,r20
 440bd38:	80800005 	stb	r2,0(r16)
 440bd3c:	a584b03a 	or	r2,r20,r22
 440bd40:	103ff51e 	bne	r2,zero,440bd18 <__reset+0xfb407d18>
 440bd44:	d8c02817 	ldw	r3,160(sp)
 440bd48:	1c07c83a 	sub	r3,r3,r16
 440bd4c:	d8c02e15 	stw	r3,184(sp)
 440bd50:	003ece06 	br	440b88c <__reset+0xfb40788c>
 440bd54:	d8c02d17 	ldw	r3,180(sp)
 440bd58:	d9002d17 	ldw	r4,180(sp)
 440bd5c:	d8002785 	stb	zero,158(sp)
 440bd60:	18800017 	ldw	r2,0(r3)
 440bd64:	21000104 	addi	r4,r4,4
 440bd68:	00c00044 	movi	r3,1
 440bd6c:	d8c02a15 	stw	r3,168(sp)
 440bd70:	d8801405 	stb	r2,80(sp)
 440bd74:	d9002d15 	stw	r4,180(sp)
 440bd78:	d8c02e15 	stw	r3,184(sp)
 440bd7c:	d8002915 	stw	zero,164(sp)
 440bd80:	d8003215 	stw	zero,200(sp)
 440bd84:	dc001404 	addi	r16,sp,80
 440bd88:	0039883a 	mov	fp,zero
 440bd8c:	003ecc06 	br	440b8c0 <__reset+0xfb4078c0>
 440bd90:	18c03fcc 	andi	r3,r3,255
 440bd94:	183e9226 	beq	r3,zero,440b7e0 <__reset+0xfb4077e0>
 440bd98:	d9c02785 	stb	r7,158(sp)
 440bd9c:	003e9006 	br	440b7e0 <__reset+0xfb4077e0>
 440bda0:	00c00044 	movi	r3,1
 440bda4:	01c00ac4 	movi	r7,43
 440bda8:	bc400007 	ldb	r17,0(r23)
 440bdac:	003d6306 	br	440b33c <__reset+0xfb40733c>
 440bdb0:	94800814 	ori	r18,r18,32
 440bdb4:	bc400007 	ldb	r17,0(r23)
 440bdb8:	003d6006 	br	440b33c <__reset+0xfb40733c>
 440bdbc:	d8c02d17 	ldw	r3,180(sp)
 440bdc0:	d8002785 	stb	zero,158(sp)
 440bdc4:	1c000017 	ldw	r16,0(r3)
 440bdc8:	1d000104 	addi	r20,r3,4
 440bdcc:	80040f26 	beq	r16,zero,440ce0c <___svfprintf_internal_r+0x1c20>
 440bdd0:	d9002917 	ldw	r4,164(sp)
 440bdd4:	2003dc16 	blt	r4,zero,440cd48 <___svfprintf_internal_r+0x1b5c>
 440bdd8:	200d883a 	mov	r6,r4
 440bddc:	000b883a 	mov	r5,zero
 440bde0:	8009883a 	mov	r4,r16
 440bde4:	da003e15 	stw	r8,248(sp)
 440bde8:	44124ec0 	call	44124ec <memchr>
 440bdec:	da003e17 	ldw	r8,248(sp)
 440bdf0:	10045826 	beq	r2,zero,440cf54 <___svfprintf_internal_r+0x1d68>
 440bdf4:	1405c83a 	sub	r2,r2,r16
 440bdf8:	d8802e15 	stw	r2,184(sp)
 440bdfc:	1003d816 	blt	r2,zero,440cd60 <___svfprintf_internal_r+0x1b74>
 440be00:	df002783 	ldbu	fp,158(sp)
 440be04:	d8802a15 	stw	r2,168(sp)
 440be08:	dd002d15 	stw	r20,180(sp)
 440be0c:	d8002915 	stw	zero,164(sp)
 440be10:	d8003215 	stw	zero,200(sp)
 440be14:	003ea306 	br	440b8a4 <__reset+0xfb4078a4>
 440be18:	18c03fcc 	andi	r3,r3,255
 440be1c:	183f8c26 	beq	r3,zero,440bc50 <__reset+0xfb407c50>
 440be20:	d9c02785 	stb	r7,158(sp)
 440be24:	003f8a06 	br	440bc50 <__reset+0xfb407c50>
 440be28:	18c03fcc 	andi	r3,r3,255
 440be2c:	1805631e 	bne	r3,zero,440d3bc <___svfprintf_internal_r+0x21d0>
 440be30:	014110f4 	movhi	r5,1091
 440be34:	29532f04 	addi	r5,r5,19644
 440be38:	d9403a15 	stw	r5,232(sp)
 440be3c:	9080080c 	andi	r2,r18,32
 440be40:	103f9f1e 	bne	r2,zero,440bcc0 <__reset+0xfb407cc0>
 440be44:	9080040c 	andi	r2,r18,16
 440be48:	10029c26 	beq	r2,zero,440c8bc <___svfprintf_internal_r+0x16d0>
 440be4c:	d8c02d17 	ldw	r3,180(sp)
 440be50:	002d883a 	mov	r22,zero
 440be54:	1d000017 	ldw	r20,0(r3)
 440be58:	18c00104 	addi	r3,r3,4
 440be5c:	d8c02d15 	stw	r3,180(sp)
 440be60:	003f9c06 	br	440bcd4 <__reset+0xfb407cd4>
 440be64:	94800054 	ori	r18,r18,1
 440be68:	bc400007 	ldb	r17,0(r23)
 440be6c:	003d3306 	br	440b33c <__reset+0xfb40733c>
 440be70:	38803fcc 	andi	r2,r7,255
 440be74:	1080201c 	xori	r2,r2,128
 440be78:	10bfe004 	addi	r2,r2,-128
 440be7c:	1002971e 	bne	r2,zero,440c8dc <___svfprintf_internal_r+0x16f0>
 440be80:	00c00044 	movi	r3,1
 440be84:	01c00804 	movi	r7,32
 440be88:	bc400007 	ldb	r17,0(r23)
 440be8c:	003d2b06 	br	440b33c <__reset+0xfb40733c>
 440be90:	18c03fcc 	andi	r3,r3,255
 440be94:	183e2326 	beq	r3,zero,440b724 <__reset+0xfb407724>
 440be98:	d9c02785 	stb	r7,158(sp)
 440be9c:	003e2106 	br	440b724 <__reset+0xfb407724>
 440bea0:	bc400007 	ldb	r17,0(r23)
 440bea4:	8a430426 	beq	r17,r9,440cab8 <___svfprintf_internal_r+0x18cc>
 440bea8:	94800414 	ori	r18,r18,16
 440beac:	003d2306 	br	440b33c <__reset+0xfb40733c>
 440beb0:	18c03fcc 	andi	r3,r3,255
 440beb4:	18053f1e 	bne	r3,zero,440d3b4 <___svfprintf_internal_r+0x21c8>
 440beb8:	9080080c 	andi	r2,r18,32
 440bebc:	10028926 	beq	r2,zero,440c8e4 <___svfprintf_internal_r+0x16f8>
 440bec0:	d9402d17 	ldw	r5,180(sp)
 440bec4:	d9002f17 	ldw	r4,188(sp)
 440bec8:	28800017 	ldw	r2,0(r5)
 440becc:	2007d7fa 	srai	r3,r4,31
 440bed0:	29400104 	addi	r5,r5,4
 440bed4:	d9402d15 	stw	r5,180(sp)
 440bed8:	11000015 	stw	r4,0(r2)
 440bedc:	10c00115 	stw	r3,4(r2)
 440bee0:	003ced06 	br	440b298 <__reset+0xfb407298>
 440bee4:	94801014 	ori	r18,r18,64
 440bee8:	bc400007 	ldb	r17,0(r23)
 440beec:	003d1306 	br	440b33c <__reset+0xfb40733c>
 440bef0:	010110f4 	movhi	r4,1091
 440bef4:	21132f04 	addi	r4,r4,19644
 440bef8:	0039883a 	mov	fp,zero
 440befc:	d9003a15 	stw	r4,232(sp)
 440bf00:	04401e04 	movi	r17,120
 440bf04:	003f8206 	br	440bd10 <__reset+0xfb407d10>
 440bf08:	18c03fcc 	andi	r3,r3,255
 440bf0c:	1805221e 	bne	r3,zero,440d398 <___svfprintf_internal_r+0x21ac>
 440bf10:	883d9526 	beq	r17,zero,440b568 <__reset+0xfb407568>
 440bf14:	00c00044 	movi	r3,1
 440bf18:	d8c02a15 	stw	r3,168(sp)
 440bf1c:	dc401405 	stb	r17,80(sp)
 440bf20:	d8002785 	stb	zero,158(sp)
 440bf24:	003f9406 	br	440bd78 <__reset+0xfb407d78>
 440bf28:	010110f4 	movhi	r4,1091
 440bf2c:	21132f04 	addi	r4,r4,19644
 440bf30:	d9003a15 	stw	r4,232(sp)
 440bf34:	d8c02d15 	stw	r3,180(sp)
 440bf38:	1025883a 	mov	r18,r2
 440bf3c:	04401e04 	movi	r17,120
 440bf40:	a584b03a 	or	r2,r20,r22
 440bf44:	1000fa1e 	bne	r2,zero,440c330 <___svfprintf_internal_r+0x1144>
 440bf48:	0039883a 	mov	fp,zero
 440bf4c:	00800084 	movi	r2,2
 440bf50:	10803fcc 	andi	r2,r2,255
 440bf54:	00c00044 	movi	r3,1
 440bf58:	10c21626 	beq	r2,r3,440c7b4 <___svfprintf_internal_r+0x15c8>
 440bf5c:	00c00084 	movi	r3,2
 440bf60:	10fe301e 	bne	r2,r3,440b824 <__reset+0xfb407824>
 440bf64:	003d7606 	br	440b540 <__reset+0xfb407540>
 440bf68:	d8c02017 	ldw	r3,128(sp)
 440bf6c:	003e9506 	br	440b9c4 <__reset+0xfb4079c4>
 440bf70:	00801944 	movi	r2,101
 440bf74:	14407c0e 	bge	r2,r17,440c168 <___svfprintf_internal_r+0xf7c>
 440bf78:	d9003617 	ldw	r4,216(sp)
 440bf7c:	d9403717 	ldw	r5,220(sp)
 440bf80:	000d883a 	mov	r6,zero
 440bf84:	000f883a 	mov	r7,zero
 440bf88:	d8c03d15 	stw	r3,244(sp)
 440bf8c:	da003e15 	stw	r8,248(sp)
 440bf90:	4417cdc0 	call	4417cdc <__eqdf2>
 440bf94:	d8c03d17 	ldw	r3,244(sp)
 440bf98:	da003e17 	ldw	r8,248(sp)
 440bf9c:	1000f51e 	bne	r2,zero,440c374 <___svfprintf_internal_r+0x1188>
 440bfa0:	d8801f17 	ldw	r2,124(sp)
 440bfa4:	010110f4 	movhi	r4,1091
 440bfa8:	21133604 	addi	r4,r4,19672
 440bfac:	18c00044 	addi	r3,r3,1
 440bfb0:	10800044 	addi	r2,r2,1
 440bfb4:	41000015 	stw	r4,0(r8)
 440bfb8:	01000044 	movi	r4,1
 440bfbc:	41000115 	stw	r4,4(r8)
 440bfc0:	d8c02015 	stw	r3,128(sp)
 440bfc4:	d8801f15 	stw	r2,124(sp)
 440bfc8:	010001c4 	movi	r4,7
 440bfcc:	20826616 	blt	r4,r2,440c968 <___svfprintf_internal_r+0x177c>
 440bfd0:	42000204 	addi	r8,r8,8
 440bfd4:	d8802617 	ldw	r2,152(sp)
 440bfd8:	d9403317 	ldw	r5,204(sp)
 440bfdc:	11400216 	blt	r2,r5,440bfe8 <___svfprintf_internal_r+0xdfc>
 440bfe0:	9080004c 	andi	r2,r18,1
 440bfe4:	103ed526 	beq	r2,zero,440bb3c <__reset+0xfb407b3c>
 440bfe8:	d8803817 	ldw	r2,224(sp)
 440bfec:	d9003417 	ldw	r4,208(sp)
 440bff0:	d9403817 	ldw	r5,224(sp)
 440bff4:	1887883a 	add	r3,r3,r2
 440bff8:	d8801f17 	ldw	r2,124(sp)
 440bffc:	41000015 	stw	r4,0(r8)
 440c000:	41400115 	stw	r5,4(r8)
 440c004:	10800044 	addi	r2,r2,1
 440c008:	d8c02015 	stw	r3,128(sp)
 440c00c:	d8801f15 	stw	r2,124(sp)
 440c010:	010001c4 	movi	r4,7
 440c014:	2082af16 	blt	r4,r2,440cad4 <___svfprintf_internal_r+0x18e8>
 440c018:	42000204 	addi	r8,r8,8
 440c01c:	d8803317 	ldw	r2,204(sp)
 440c020:	143fffc4 	addi	r16,r2,-1
 440c024:	043ec50e 	bge	zero,r16,440bb3c <__reset+0xfb407b3c>
 440c028:	04400404 	movi	r17,16
 440c02c:	d8801f17 	ldw	r2,124(sp)
 440c030:	8c00860e 	bge	r17,r16,440c24c <___svfprintf_internal_r+0x1060>
 440c034:	014110f4 	movhi	r5,1091
 440c038:	29533684 	addi	r5,r5,19674
 440c03c:	d9402b15 	stw	r5,172(sp)
 440c040:	058001c4 	movi	r22,7
 440c044:	dd002c17 	ldw	r20,176(sp)
 440c048:	00000306 	br	440c058 <___svfprintf_internal_r+0xe6c>
 440c04c:	42000204 	addi	r8,r8,8
 440c050:	843ffc04 	addi	r16,r16,-16
 440c054:	8c00800e 	bge	r17,r16,440c258 <___svfprintf_internal_r+0x106c>
 440c058:	18c00404 	addi	r3,r3,16
 440c05c:	10800044 	addi	r2,r2,1
 440c060:	45400015 	stw	r21,0(r8)
 440c064:	44400115 	stw	r17,4(r8)
 440c068:	d8c02015 	stw	r3,128(sp)
 440c06c:	d8801f15 	stw	r2,124(sp)
 440c070:	b0bff60e 	bge	r22,r2,440c04c <__reset+0xfb40804c>
 440c074:	d9801e04 	addi	r6,sp,120
 440c078:	a00b883a 	mov	r5,r20
 440c07c:	9809883a 	mov	r4,r19
 440c080:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c084:	103d3e1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c088:	d8c02017 	ldw	r3,128(sp)
 440c08c:	d8801f17 	ldw	r2,124(sp)
 440c090:	da000404 	addi	r8,sp,16
 440c094:	003fee06 	br	440c050 <__reset+0xfb408050>
 440c098:	d9403117 	ldw	r5,196(sp)
 440c09c:	d8802a17 	ldw	r2,168(sp)
 440c0a0:	28adc83a 	sub	r22,r5,r2
 440c0a4:	05be650e 	bge	zero,r22,440ba3c <__reset+0xfb407a3c>
 440c0a8:	07000404 	movi	fp,16
 440c0ac:	d8801f17 	ldw	r2,124(sp)
 440c0b0:	e583a20e 	bge	fp,r22,440cf3c <___svfprintf_internal_r+0x1d50>
 440c0b4:	014110f4 	movhi	r5,1091
 440c0b8:	29533684 	addi	r5,r5,19674
 440c0bc:	dc403015 	stw	r17,192(sp)
 440c0c0:	d9402b15 	stw	r5,172(sp)
 440c0c4:	b023883a 	mov	r17,r22
 440c0c8:	050001c4 	movi	r20,7
 440c0cc:	902d883a 	mov	r22,r18
 440c0d0:	8025883a 	mov	r18,r16
 440c0d4:	dc002c17 	ldw	r16,176(sp)
 440c0d8:	00000306 	br	440c0e8 <___svfprintf_internal_r+0xefc>
 440c0dc:	8c7ffc04 	addi	r17,r17,-16
 440c0e0:	42000204 	addi	r8,r8,8
 440c0e4:	e440110e 	bge	fp,r17,440c12c <___svfprintf_internal_r+0xf40>
 440c0e8:	18c00404 	addi	r3,r3,16
 440c0ec:	10800044 	addi	r2,r2,1
 440c0f0:	45400015 	stw	r21,0(r8)
 440c0f4:	47000115 	stw	fp,4(r8)
 440c0f8:	d8c02015 	stw	r3,128(sp)
 440c0fc:	d8801f15 	stw	r2,124(sp)
 440c100:	a0bff60e 	bge	r20,r2,440c0dc <__reset+0xfb4080dc>
 440c104:	d9801e04 	addi	r6,sp,120
 440c108:	800b883a 	mov	r5,r16
 440c10c:	9809883a 	mov	r4,r19
 440c110:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c114:	103d1a1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c118:	8c7ffc04 	addi	r17,r17,-16
 440c11c:	d8c02017 	ldw	r3,128(sp)
 440c120:	d8801f17 	ldw	r2,124(sp)
 440c124:	da000404 	addi	r8,sp,16
 440c128:	e47fef16 	blt	fp,r17,440c0e8 <__reset+0xfb4080e8>
 440c12c:	9021883a 	mov	r16,r18
 440c130:	b025883a 	mov	r18,r22
 440c134:	882d883a 	mov	r22,r17
 440c138:	dc403017 	ldw	r17,192(sp)
 440c13c:	d9002b17 	ldw	r4,172(sp)
 440c140:	1d87883a 	add	r3,r3,r22
 440c144:	10800044 	addi	r2,r2,1
 440c148:	41000015 	stw	r4,0(r8)
 440c14c:	45800115 	stw	r22,4(r8)
 440c150:	d8c02015 	stw	r3,128(sp)
 440c154:	d8801f15 	stw	r2,124(sp)
 440c158:	010001c4 	movi	r4,7
 440c15c:	20819a16 	blt	r4,r2,440c7c8 <___svfprintf_internal_r+0x15dc>
 440c160:	42000204 	addi	r8,r8,8
 440c164:	003e3506 	br	440ba3c <__reset+0xfb407a3c>
 440c168:	d9403317 	ldw	r5,204(sp)
 440c16c:	00800044 	movi	r2,1
 440c170:	18c00044 	addi	r3,r3,1
 440c174:	1141710e 	bge	r2,r5,440c73c <___svfprintf_internal_r+0x1550>
 440c178:	dc401f17 	ldw	r17,124(sp)
 440c17c:	00800044 	movi	r2,1
 440c180:	40800115 	stw	r2,4(r8)
 440c184:	8c400044 	addi	r17,r17,1
 440c188:	44000015 	stw	r16,0(r8)
 440c18c:	d8c02015 	stw	r3,128(sp)
 440c190:	dc401f15 	stw	r17,124(sp)
 440c194:	008001c4 	movi	r2,7
 440c198:	14417416 	blt	r2,r17,440c76c <___svfprintf_internal_r+0x1580>
 440c19c:	42000204 	addi	r8,r8,8
 440c1a0:	d8803817 	ldw	r2,224(sp)
 440c1a4:	d9003417 	ldw	r4,208(sp)
 440c1a8:	8c400044 	addi	r17,r17,1
 440c1ac:	10c7883a 	add	r3,r2,r3
 440c1b0:	40800115 	stw	r2,4(r8)
 440c1b4:	41000015 	stw	r4,0(r8)
 440c1b8:	d8c02015 	stw	r3,128(sp)
 440c1bc:	dc401f15 	stw	r17,124(sp)
 440c1c0:	008001c4 	movi	r2,7
 440c1c4:	14417216 	blt	r2,r17,440c790 <___svfprintf_internal_r+0x15a4>
 440c1c8:	45800204 	addi	r22,r8,8
 440c1cc:	d9003617 	ldw	r4,216(sp)
 440c1d0:	d9403717 	ldw	r5,220(sp)
 440c1d4:	000d883a 	mov	r6,zero
 440c1d8:	000f883a 	mov	r7,zero
 440c1dc:	d8c03d15 	stw	r3,244(sp)
 440c1e0:	4417cdc0 	call	4417cdc <__eqdf2>
 440c1e4:	d8c03d17 	ldw	r3,244(sp)
 440c1e8:	1000b326 	beq	r2,zero,440c4b8 <___svfprintf_internal_r+0x12cc>
 440c1ec:	d9403317 	ldw	r5,204(sp)
 440c1f0:	84000044 	addi	r16,r16,1
 440c1f4:	8c400044 	addi	r17,r17,1
 440c1f8:	28bfffc4 	addi	r2,r5,-1
 440c1fc:	1887883a 	add	r3,r3,r2
 440c200:	b0800115 	stw	r2,4(r22)
 440c204:	b4000015 	stw	r16,0(r22)
 440c208:	d8c02015 	stw	r3,128(sp)
 440c20c:	dc401f15 	stw	r17,124(sp)
 440c210:	008001c4 	movi	r2,7
 440c214:	1440d216 	blt	r2,r17,440c560 <___svfprintf_internal_r+0x1374>
 440c218:	b5800204 	addi	r22,r22,8
 440c21c:	d9003b17 	ldw	r4,236(sp)
 440c220:	df0022c4 	addi	fp,sp,139
 440c224:	8c400044 	addi	r17,r17,1
 440c228:	20c7883a 	add	r3,r4,r3
 440c22c:	b7000015 	stw	fp,0(r22)
 440c230:	b1000115 	stw	r4,4(r22)
 440c234:	d8c02015 	stw	r3,128(sp)
 440c238:	dc401f15 	stw	r17,124(sp)
 440c23c:	008001c4 	movi	r2,7
 440c240:	14400e16 	blt	r2,r17,440c27c <___svfprintf_internal_r+0x1090>
 440c244:	b2000204 	addi	r8,r22,8
 440c248:	003e3c06 	br	440bb3c <__reset+0xfb407b3c>
 440c24c:	010110f4 	movhi	r4,1091
 440c250:	21133684 	addi	r4,r4,19674
 440c254:	d9002b15 	stw	r4,172(sp)
 440c258:	d9002b17 	ldw	r4,172(sp)
 440c25c:	1c07883a 	add	r3,r3,r16
 440c260:	44000115 	stw	r16,4(r8)
 440c264:	41000015 	stw	r4,0(r8)
 440c268:	10800044 	addi	r2,r2,1
 440c26c:	d8c02015 	stw	r3,128(sp)
 440c270:	d8801f15 	stw	r2,124(sp)
 440c274:	010001c4 	movi	r4,7
 440c278:	20be2f0e 	bge	r4,r2,440bb38 <__reset+0xfb407b38>
 440c27c:	d9402c17 	ldw	r5,176(sp)
 440c280:	d9801e04 	addi	r6,sp,120
 440c284:	9809883a 	mov	r4,r19
 440c288:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c28c:	103cbc1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c290:	d8c02017 	ldw	r3,128(sp)
 440c294:	da000404 	addi	r8,sp,16
 440c298:	003e2806 	br	440bb3c <__reset+0xfb407b3c>
 440c29c:	d9402c17 	ldw	r5,176(sp)
 440c2a0:	d9801e04 	addi	r6,sp,120
 440c2a4:	9809883a 	mov	r4,r19
 440c2a8:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c2ac:	103e5f26 	beq	r2,zero,440bc2c <__reset+0xfb407c2c>
 440c2b0:	003cb306 	br	440b580 <__reset+0xfb407580>
 440c2b4:	d9402c17 	ldw	r5,176(sp)
 440c2b8:	d9801e04 	addi	r6,sp,120
 440c2bc:	9809883a 	mov	r4,r19
 440c2c0:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c2c4:	103cae1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c2c8:	d8c02017 	ldw	r3,128(sp)
 440c2cc:	da000404 	addi	r8,sp,16
 440c2d0:	003e0d06 	br	440bb08 <__reset+0xfb407b08>
 440c2d4:	d9402c17 	ldw	r5,176(sp)
 440c2d8:	d9801e04 	addi	r6,sp,120
 440c2dc:	9809883a 	mov	r4,r19
 440c2e0:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c2e4:	103ca61e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c2e8:	d8c02017 	ldw	r3,128(sp)
 440c2ec:	da000404 	addi	r8,sp,16
 440c2f0:	003dc106 	br	440b9f8 <__reset+0xfb4079f8>
 440c2f4:	d9402c17 	ldw	r5,176(sp)
 440c2f8:	d9801e04 	addi	r6,sp,120
 440c2fc:	9809883a 	mov	r4,r19
 440c300:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c304:	103c9e1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c308:	d8c02017 	ldw	r3,128(sp)
 440c30c:	da000404 	addi	r8,sp,16
 440c310:	003dc706 	br	440ba30 <__reset+0xfb407a30>
 440c314:	d8802917 	ldw	r2,164(sp)
 440c318:	d8002785 	stb	zero,158(sp)
 440c31c:	103f0816 	blt	r2,zero,440bf40 <__reset+0xfb407f40>
 440c320:	00ffdfc4 	movi	r3,-129
 440c324:	a584b03a 	or	r2,r20,r22
 440c328:	90e4703a 	and	r18,r18,r3
 440c32c:	103c8126 	beq	r2,zero,440b534 <__reset+0xfb407534>
 440c330:	0039883a 	mov	fp,zero
 440c334:	003e7606 	br	440bd10 <__reset+0xfb407d10>
 440c338:	9080040c 	andi	r2,r18,16
 440c33c:	10013d26 	beq	r2,zero,440c834 <___svfprintf_internal_r+0x1648>
 440c340:	d9002d17 	ldw	r4,180(sp)
 440c344:	d9402917 	ldw	r5,164(sp)
 440c348:	d8002785 	stb	zero,158(sp)
 440c34c:	20800104 	addi	r2,r4,4
 440c350:	25000017 	ldw	r20,0(r4)
 440c354:	002d883a 	mov	r22,zero
 440c358:	28013f16 	blt	r5,zero,440c858 <___svfprintf_internal_r+0x166c>
 440c35c:	00ffdfc4 	movi	r3,-129
 440c360:	d8802d15 	stw	r2,180(sp)
 440c364:	90e4703a 	and	r18,r18,r3
 440c368:	a03d2b26 	beq	r20,zero,440b818 <__reset+0xfb407818>
 440c36c:	0039883a 	mov	fp,zero
 440c370:	003d2e06 	br	440b82c <__reset+0xfb40782c>
 440c374:	dc402617 	ldw	r17,152(sp)
 440c378:	0441830e 	bge	zero,r17,440c988 <___svfprintf_internal_r+0x179c>
 440c37c:	dc403217 	ldw	r17,200(sp)
 440c380:	d8803317 	ldw	r2,204(sp)
 440c384:	1440010e 	bge	r2,r17,440c38c <___svfprintf_internal_r+0x11a0>
 440c388:	1023883a 	mov	r17,r2
 440c38c:	04400a0e 	bge	zero,r17,440c3b8 <___svfprintf_internal_r+0x11cc>
 440c390:	d8801f17 	ldw	r2,124(sp)
 440c394:	1c47883a 	add	r3,r3,r17
 440c398:	44000015 	stw	r16,0(r8)
 440c39c:	10800044 	addi	r2,r2,1
 440c3a0:	44400115 	stw	r17,4(r8)
 440c3a4:	d8c02015 	stw	r3,128(sp)
 440c3a8:	d8801f15 	stw	r2,124(sp)
 440c3ac:	010001c4 	movi	r4,7
 440c3b0:	20827516 	blt	r4,r2,440cd88 <___svfprintf_internal_r+0x1b9c>
 440c3b4:	42000204 	addi	r8,r8,8
 440c3b8:	88027b16 	blt	r17,zero,440cda8 <___svfprintf_internal_r+0x1bbc>
 440c3bc:	d9003217 	ldw	r4,200(sp)
 440c3c0:	2463c83a 	sub	r17,r4,r17
 440c3c4:	0440990e 	bge	zero,r17,440c62c <___svfprintf_internal_r+0x1440>
 440c3c8:	05800404 	movi	r22,16
 440c3cc:	d8801f17 	ldw	r2,124(sp)
 440c3d0:	b441530e 	bge	r22,r17,440c920 <___svfprintf_internal_r+0x1734>
 440c3d4:	010110f4 	movhi	r4,1091
 440c3d8:	21133684 	addi	r4,r4,19674
 440c3dc:	d9002b15 	stw	r4,172(sp)
 440c3e0:	070001c4 	movi	fp,7
 440c3e4:	dd002c17 	ldw	r20,176(sp)
 440c3e8:	00000306 	br	440c3f8 <___svfprintf_internal_r+0x120c>
 440c3ec:	42000204 	addi	r8,r8,8
 440c3f0:	8c7ffc04 	addi	r17,r17,-16
 440c3f4:	b4414d0e 	bge	r22,r17,440c92c <___svfprintf_internal_r+0x1740>
 440c3f8:	18c00404 	addi	r3,r3,16
 440c3fc:	10800044 	addi	r2,r2,1
 440c400:	45400015 	stw	r21,0(r8)
 440c404:	45800115 	stw	r22,4(r8)
 440c408:	d8c02015 	stw	r3,128(sp)
 440c40c:	d8801f15 	stw	r2,124(sp)
 440c410:	e0bff60e 	bge	fp,r2,440c3ec <__reset+0xfb4083ec>
 440c414:	d9801e04 	addi	r6,sp,120
 440c418:	a00b883a 	mov	r5,r20
 440c41c:	9809883a 	mov	r4,r19
 440c420:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c424:	103c561e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c428:	d8c02017 	ldw	r3,128(sp)
 440c42c:	d8801f17 	ldw	r2,124(sp)
 440c430:	da000404 	addi	r8,sp,16
 440c434:	003fee06 	br	440c3f0 <__reset+0xfb4083f0>
 440c438:	d9402c17 	ldw	r5,176(sp)
 440c43c:	d9801e04 	addi	r6,sp,120
 440c440:	9809883a 	mov	r4,r19
 440c444:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c448:	103c4d1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c44c:	d8c02017 	ldw	r3,128(sp)
 440c450:	df002787 	ldb	fp,158(sp)
 440c454:	da000404 	addi	r8,sp,16
 440c458:	003d5a06 	br	440b9c4 <__reset+0xfb4079c4>
 440c45c:	9080040c 	andi	r2,r18,16
 440c460:	10005c26 	beq	r2,zero,440c5d4 <___svfprintf_internal_r+0x13e8>
 440c464:	d9402d17 	ldw	r5,180(sp)
 440c468:	d8c02917 	ldw	r3,164(sp)
 440c46c:	d8002785 	stb	zero,158(sp)
 440c470:	28800104 	addi	r2,r5,4
 440c474:	2d000017 	ldw	r20,0(r5)
 440c478:	002d883a 	mov	r22,zero
 440c47c:	18005e16 	blt	r3,zero,440c5f8 <___svfprintf_internal_r+0x140c>
 440c480:	00ffdfc4 	movi	r3,-129
 440c484:	d8802d15 	stw	r2,180(sp)
 440c488:	90e4703a 	and	r18,r18,r3
 440c48c:	0039883a 	mov	fp,zero
 440c490:	a03dfe26 	beq	r20,zero,440bc8c <__reset+0xfb407c8c>
 440c494:	00800244 	movi	r2,9
 440c498:	153cb336 	bltu	r2,r20,440b768 <__reset+0xfb407768>
 440c49c:	a5000c04 	addi	r20,r20,48
 440c4a0:	dc001dc4 	addi	r16,sp,119
 440c4a4:	dd001dc5 	stb	r20,119(sp)
 440c4a8:	d8c02817 	ldw	r3,160(sp)
 440c4ac:	1c07c83a 	sub	r3,r3,r16
 440c4b0:	d8c02e15 	stw	r3,184(sp)
 440c4b4:	003cf506 	br	440b88c <__reset+0xfb40788c>
 440c4b8:	d8803317 	ldw	r2,204(sp)
 440c4bc:	143fffc4 	addi	r16,r2,-1
 440c4c0:	043f560e 	bge	zero,r16,440c21c <__reset+0xfb40821c>
 440c4c4:	07000404 	movi	fp,16
 440c4c8:	e403530e 	bge	fp,r16,440d218 <___svfprintf_internal_r+0x202c>
 440c4cc:	014110f4 	movhi	r5,1091
 440c4d0:	29533684 	addi	r5,r5,19674
 440c4d4:	d9402b15 	stw	r5,172(sp)
 440c4d8:	01c001c4 	movi	r7,7
 440c4dc:	dd002c17 	ldw	r20,176(sp)
 440c4e0:	00000306 	br	440c4f0 <___svfprintf_internal_r+0x1304>
 440c4e4:	843ffc04 	addi	r16,r16,-16
 440c4e8:	b5800204 	addi	r22,r22,8
 440c4ec:	e400130e 	bge	fp,r16,440c53c <___svfprintf_internal_r+0x1350>
 440c4f0:	18c00404 	addi	r3,r3,16
 440c4f4:	8c400044 	addi	r17,r17,1
 440c4f8:	b5400015 	stw	r21,0(r22)
 440c4fc:	b7000115 	stw	fp,4(r22)
 440c500:	d8c02015 	stw	r3,128(sp)
 440c504:	dc401f15 	stw	r17,124(sp)
 440c508:	3c7ff60e 	bge	r7,r17,440c4e4 <__reset+0xfb4084e4>
 440c50c:	d9801e04 	addi	r6,sp,120
 440c510:	a00b883a 	mov	r5,r20
 440c514:	9809883a 	mov	r4,r19
 440c518:	d9c03d15 	stw	r7,244(sp)
 440c51c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c520:	d9c03d17 	ldw	r7,244(sp)
 440c524:	103c161e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c528:	843ffc04 	addi	r16,r16,-16
 440c52c:	d8c02017 	ldw	r3,128(sp)
 440c530:	dc401f17 	ldw	r17,124(sp)
 440c534:	dd800404 	addi	r22,sp,16
 440c538:	e43fed16 	blt	fp,r16,440c4f0 <__reset+0xfb4084f0>
 440c53c:	d8802b17 	ldw	r2,172(sp)
 440c540:	1c07883a 	add	r3,r3,r16
 440c544:	8c400044 	addi	r17,r17,1
 440c548:	b0800015 	stw	r2,0(r22)
 440c54c:	b4000115 	stw	r16,4(r22)
 440c550:	d8c02015 	stw	r3,128(sp)
 440c554:	dc401f15 	stw	r17,124(sp)
 440c558:	008001c4 	movi	r2,7
 440c55c:	147f2e0e 	bge	r2,r17,440c218 <__reset+0xfb408218>
 440c560:	d9402c17 	ldw	r5,176(sp)
 440c564:	d9801e04 	addi	r6,sp,120
 440c568:	9809883a 	mov	r4,r19
 440c56c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c570:	103c031e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c574:	d8c02017 	ldw	r3,128(sp)
 440c578:	dc401f17 	ldw	r17,124(sp)
 440c57c:	dd800404 	addi	r22,sp,16
 440c580:	003f2606 	br	440c21c <__reset+0xfb40821c>
 440c584:	9080040c 	andi	r2,r18,16
 440c588:	1000c326 	beq	r2,zero,440c898 <___svfprintf_internal_r+0x16ac>
 440c58c:	d8802d17 	ldw	r2,180(sp)
 440c590:	15000017 	ldw	r20,0(r2)
 440c594:	10800104 	addi	r2,r2,4
 440c598:	d8802d15 	stw	r2,180(sp)
 440c59c:	a02dd7fa 	srai	r22,r20,31
 440c5a0:	b005883a 	mov	r2,r22
 440c5a4:	103c680e 	bge	r2,zero,440b748 <__reset+0xfb407748>
 440c5a8:	0529c83a 	sub	r20,zero,r20
 440c5ac:	a004c03a 	cmpne	r2,r20,zero
 440c5b0:	05adc83a 	sub	r22,zero,r22
 440c5b4:	b0adc83a 	sub	r22,r22,r2
 440c5b8:	d8802917 	ldw	r2,164(sp)
 440c5bc:	07000b44 	movi	fp,45
 440c5c0:	df002785 	stb	fp,158(sp)
 440c5c4:	10022e16 	blt	r2,zero,440ce80 <___svfprintf_internal_r+0x1c94>
 440c5c8:	00bfdfc4 	movi	r2,-129
 440c5cc:	90a4703a 	and	r18,r18,r2
 440c5d0:	003c6406 	br	440b764 <__reset+0xfb407764>
 440c5d4:	9080100c 	andi	r2,r18,64
 440c5d8:	d8002785 	stb	zero,158(sp)
 440c5dc:	10012526 	beq	r2,zero,440ca74 <___svfprintf_internal_r+0x1888>
 440c5e0:	d9002d17 	ldw	r4,180(sp)
 440c5e4:	d9402917 	ldw	r5,164(sp)
 440c5e8:	002d883a 	mov	r22,zero
 440c5ec:	20800104 	addi	r2,r4,4
 440c5f0:	2500000b 	ldhu	r20,0(r4)
 440c5f4:	283fa20e 	bge	r5,zero,440c480 <__reset+0xfb408480>
 440c5f8:	d8802d15 	stw	r2,180(sp)
 440c5fc:	0039883a 	mov	fp,zero
 440c600:	a584b03a 	or	r2,r20,r22
 440c604:	103c571e 	bne	r2,zero,440b764 <__reset+0xfb407764>
 440c608:	00800044 	movi	r2,1
 440c60c:	003e5006 	br	440bf50 <__reset+0xfb407f50>
 440c610:	d9402c17 	ldw	r5,176(sp)
 440c614:	d9801e04 	addi	r6,sp,120
 440c618:	9809883a 	mov	r4,r19
 440c61c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c620:	103bd71e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c624:	d8c02017 	ldw	r3,128(sp)
 440c628:	da000404 	addi	r8,sp,16
 440c62c:	d9003217 	ldw	r4,200(sp)
 440c630:	d8802617 	ldw	r2,152(sp)
 440c634:	d9403317 	ldw	r5,204(sp)
 440c638:	8123883a 	add	r17,r16,r4
 440c63c:	11400216 	blt	r2,r5,440c648 <___svfprintf_internal_r+0x145c>
 440c640:	9100004c 	andi	r4,r18,1
 440c644:	20000d26 	beq	r4,zero,440c67c <___svfprintf_internal_r+0x1490>
 440c648:	d9003817 	ldw	r4,224(sp)
 440c64c:	d9403417 	ldw	r5,208(sp)
 440c650:	1907883a 	add	r3,r3,r4
 440c654:	d9001f17 	ldw	r4,124(sp)
 440c658:	41400015 	stw	r5,0(r8)
 440c65c:	d9403817 	ldw	r5,224(sp)
 440c660:	21000044 	addi	r4,r4,1
 440c664:	d8c02015 	stw	r3,128(sp)
 440c668:	41400115 	stw	r5,4(r8)
 440c66c:	d9001f15 	stw	r4,124(sp)
 440c670:	014001c4 	movi	r5,7
 440c674:	2901dc16 	blt	r5,r4,440cde8 <___svfprintf_internal_r+0x1bfc>
 440c678:	42000204 	addi	r8,r8,8
 440c67c:	d9003317 	ldw	r4,204(sp)
 440c680:	8121883a 	add	r16,r16,r4
 440c684:	2085c83a 	sub	r2,r4,r2
 440c688:	8461c83a 	sub	r16,r16,r17
 440c68c:	1400010e 	bge	r2,r16,440c694 <___svfprintf_internal_r+0x14a8>
 440c690:	1021883a 	mov	r16,r2
 440c694:	04000a0e 	bge	zero,r16,440c6c0 <___svfprintf_internal_r+0x14d4>
 440c698:	d9001f17 	ldw	r4,124(sp)
 440c69c:	1c07883a 	add	r3,r3,r16
 440c6a0:	44400015 	stw	r17,0(r8)
 440c6a4:	21000044 	addi	r4,r4,1
 440c6a8:	44000115 	stw	r16,4(r8)
 440c6ac:	d8c02015 	stw	r3,128(sp)
 440c6b0:	d9001f15 	stw	r4,124(sp)
 440c6b4:	014001c4 	movi	r5,7
 440c6b8:	2901e616 	blt	r5,r4,440ce54 <___svfprintf_internal_r+0x1c68>
 440c6bc:	42000204 	addi	r8,r8,8
 440c6c0:	8001f616 	blt	r16,zero,440ce9c <___svfprintf_internal_r+0x1cb0>
 440c6c4:	1421c83a 	sub	r16,r2,r16
 440c6c8:	043d1c0e 	bge	zero,r16,440bb3c <__reset+0xfb407b3c>
 440c6cc:	04400404 	movi	r17,16
 440c6d0:	d8801f17 	ldw	r2,124(sp)
 440c6d4:	8c3edd0e 	bge	r17,r16,440c24c <__reset+0xfb40824c>
 440c6d8:	014110f4 	movhi	r5,1091
 440c6dc:	29533684 	addi	r5,r5,19674
 440c6e0:	d9402b15 	stw	r5,172(sp)
 440c6e4:	058001c4 	movi	r22,7
 440c6e8:	dd002c17 	ldw	r20,176(sp)
 440c6ec:	00000306 	br	440c6fc <___svfprintf_internal_r+0x1510>
 440c6f0:	42000204 	addi	r8,r8,8
 440c6f4:	843ffc04 	addi	r16,r16,-16
 440c6f8:	8c3ed70e 	bge	r17,r16,440c258 <__reset+0xfb408258>
 440c6fc:	18c00404 	addi	r3,r3,16
 440c700:	10800044 	addi	r2,r2,1
 440c704:	45400015 	stw	r21,0(r8)
 440c708:	44400115 	stw	r17,4(r8)
 440c70c:	d8c02015 	stw	r3,128(sp)
 440c710:	d8801f15 	stw	r2,124(sp)
 440c714:	b0bff60e 	bge	r22,r2,440c6f0 <__reset+0xfb4086f0>
 440c718:	d9801e04 	addi	r6,sp,120
 440c71c:	a00b883a 	mov	r5,r20
 440c720:	9809883a 	mov	r4,r19
 440c724:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c728:	103b951e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c72c:	d8c02017 	ldw	r3,128(sp)
 440c730:	d8801f17 	ldw	r2,124(sp)
 440c734:	da000404 	addi	r8,sp,16
 440c738:	003fee06 	br	440c6f4 <__reset+0xfb4086f4>
 440c73c:	9088703a 	and	r4,r18,r2
 440c740:	203e8d1e 	bne	r4,zero,440c178 <__reset+0xfb408178>
 440c744:	dc401f17 	ldw	r17,124(sp)
 440c748:	40800115 	stw	r2,4(r8)
 440c74c:	44000015 	stw	r16,0(r8)
 440c750:	8c400044 	addi	r17,r17,1
 440c754:	d8c02015 	stw	r3,128(sp)
 440c758:	dc401f15 	stw	r17,124(sp)
 440c75c:	008001c4 	movi	r2,7
 440c760:	147f7f16 	blt	r2,r17,440c560 <__reset+0xfb408560>
 440c764:	45800204 	addi	r22,r8,8
 440c768:	003eac06 	br	440c21c <__reset+0xfb40821c>
 440c76c:	d9402c17 	ldw	r5,176(sp)
 440c770:	d9801e04 	addi	r6,sp,120
 440c774:	9809883a 	mov	r4,r19
 440c778:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c77c:	103b801e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c780:	d8c02017 	ldw	r3,128(sp)
 440c784:	dc401f17 	ldw	r17,124(sp)
 440c788:	da000404 	addi	r8,sp,16
 440c78c:	003e8406 	br	440c1a0 <__reset+0xfb4081a0>
 440c790:	d9402c17 	ldw	r5,176(sp)
 440c794:	d9801e04 	addi	r6,sp,120
 440c798:	9809883a 	mov	r4,r19
 440c79c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c7a0:	103b771e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c7a4:	d8c02017 	ldw	r3,128(sp)
 440c7a8:	dc401f17 	ldw	r17,124(sp)
 440c7ac:	dd800404 	addi	r22,sp,16
 440c7b0:	003e8606 	br	440c1cc <__reset+0xfb4081cc>
 440c7b4:	0029883a 	mov	r20,zero
 440c7b8:	a5000c04 	addi	r20,r20,48
 440c7bc:	dc001dc4 	addi	r16,sp,119
 440c7c0:	dd001dc5 	stb	r20,119(sp)
 440c7c4:	003f3806 	br	440c4a8 <__reset+0xfb4084a8>
 440c7c8:	d9402c17 	ldw	r5,176(sp)
 440c7cc:	d9801e04 	addi	r6,sp,120
 440c7d0:	9809883a 	mov	r4,r19
 440c7d4:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c7d8:	103b691e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c7dc:	d8c02017 	ldw	r3,128(sp)
 440c7e0:	da000404 	addi	r8,sp,16
 440c7e4:	003c9506 	br	440ba3c <__reset+0xfb407a3c>
 440c7e8:	d9003617 	ldw	r4,216(sp)
 440c7ec:	d9403717 	ldw	r5,220(sp)
 440c7f0:	da003e15 	stw	r8,248(sp)
 440c7f4:	4407d2c0 	call	4407d2c <__fpclassifyd>
 440c7f8:	da003e17 	ldw	r8,248(sp)
 440c7fc:	1000bd1e 	bne	r2,zero,440caf4 <___svfprintf_internal_r+0x1908>
 440c800:	008011c4 	movi	r2,71
 440c804:	14411e0e 	bge	r2,r17,440cc80 <___svfprintf_internal_r+0x1a94>
 440c808:	040110f4 	movhi	r16,1091
 440c80c:	84132904 	addi	r16,r16,19620
 440c810:	00c000c4 	movi	r3,3
 440c814:	00bfdfc4 	movi	r2,-129
 440c818:	d8c02a15 	stw	r3,168(sp)
 440c81c:	90a4703a 	and	r18,r18,r2
 440c820:	df002783 	ldbu	fp,158(sp)
 440c824:	d8c02e15 	stw	r3,184(sp)
 440c828:	d8002915 	stw	zero,164(sp)
 440c82c:	d8003215 	stw	zero,200(sp)
 440c830:	003c1c06 	br	440b8a4 <__reset+0xfb4078a4>
 440c834:	9080100c 	andi	r2,r18,64
 440c838:	d8002785 	stb	zero,158(sp)
 440c83c:	10009426 	beq	r2,zero,440ca90 <___svfprintf_internal_r+0x18a4>
 440c840:	d8c02d17 	ldw	r3,180(sp)
 440c844:	d9002917 	ldw	r4,164(sp)
 440c848:	002d883a 	mov	r22,zero
 440c84c:	18800104 	addi	r2,r3,4
 440c850:	1d00000b 	ldhu	r20,0(r3)
 440c854:	203ec10e 	bge	r4,zero,440c35c <__reset+0xfb40835c>
 440c858:	a586b03a 	or	r3,r20,r22
 440c85c:	d8802d15 	stw	r2,180(sp)
 440c860:	183ec21e 	bne	r3,zero,440c36c <__reset+0xfb40836c>
 440c864:	0039883a 	mov	fp,zero
 440c868:	0005883a 	mov	r2,zero
 440c86c:	003db806 	br	440bf50 <__reset+0xfb407f50>
 440c870:	d8802d17 	ldw	r2,180(sp)
 440c874:	d8c02d17 	ldw	r3,180(sp)
 440c878:	d9002d17 	ldw	r4,180(sp)
 440c87c:	10800017 	ldw	r2,0(r2)
 440c880:	18c00117 	ldw	r3,4(r3)
 440c884:	21000204 	addi	r4,r4,8
 440c888:	d8803615 	stw	r2,216(sp)
 440c88c:	d8c03715 	stw	r3,220(sp)
 440c890:	d9002d15 	stw	r4,180(sp)
 440c894:	003b8206 	br	440b6a0 <__reset+0xfb4076a0>
 440c898:	9080100c 	andi	r2,r18,64
 440c89c:	10010726 	beq	r2,zero,440ccbc <___svfprintf_internal_r+0x1ad0>
 440c8a0:	d8c02d17 	ldw	r3,180(sp)
 440c8a4:	1d00000f 	ldh	r20,0(r3)
 440c8a8:	18c00104 	addi	r3,r3,4
 440c8ac:	d8c02d15 	stw	r3,180(sp)
 440c8b0:	a02dd7fa 	srai	r22,r20,31
 440c8b4:	b005883a 	mov	r2,r22
 440c8b8:	003ba206 	br	440b744 <__reset+0xfb407744>
 440c8bc:	9080100c 	andi	r2,r18,64
 440c8c0:	10010526 	beq	r2,zero,440ccd8 <___svfprintf_internal_r+0x1aec>
 440c8c4:	d9002d17 	ldw	r4,180(sp)
 440c8c8:	002d883a 	mov	r22,zero
 440c8cc:	2500000b 	ldhu	r20,0(r4)
 440c8d0:	21000104 	addi	r4,r4,4
 440c8d4:	d9002d15 	stw	r4,180(sp)
 440c8d8:	003cfe06 	br	440bcd4 <__reset+0xfb407cd4>
 440c8dc:	bc400007 	ldb	r17,0(r23)
 440c8e0:	003a9606 	br	440b33c <__reset+0xfb40733c>
 440c8e4:	9080040c 	andi	r2,r18,16
 440c8e8:	10010126 	beq	r2,zero,440ccf0 <___svfprintf_internal_r+0x1b04>
 440c8ec:	d9402d17 	ldw	r5,180(sp)
 440c8f0:	d8c02f17 	ldw	r3,188(sp)
 440c8f4:	28800017 	ldw	r2,0(r5)
 440c8f8:	29400104 	addi	r5,r5,4
 440c8fc:	d9402d15 	stw	r5,180(sp)
 440c900:	10c00015 	stw	r3,0(r2)
 440c904:	003a6406 	br	440b298 <__reset+0xfb407298>
 440c908:	d9002917 	ldw	r4,164(sp)
 440c90c:	d8002785 	stb	zero,158(sp)
 440c910:	203d8d16 	blt	r4,zero,440bf48 <__reset+0xfb407f48>
 440c914:	00bfdfc4 	movi	r2,-129
 440c918:	90a4703a 	and	r18,r18,r2
 440c91c:	003b0506 	br	440b534 <__reset+0xfb407534>
 440c920:	014110f4 	movhi	r5,1091
 440c924:	29533684 	addi	r5,r5,19674
 440c928:	d9402b15 	stw	r5,172(sp)
 440c92c:	d9402b17 	ldw	r5,172(sp)
 440c930:	1c47883a 	add	r3,r3,r17
 440c934:	10800044 	addi	r2,r2,1
 440c938:	41400015 	stw	r5,0(r8)
 440c93c:	44400115 	stw	r17,4(r8)
 440c940:	d8c02015 	stw	r3,128(sp)
 440c944:	d8801f15 	stw	r2,124(sp)
 440c948:	010001c4 	movi	r4,7
 440c94c:	20bf3016 	blt	r4,r2,440c610 <__reset+0xfb408610>
 440c950:	42000204 	addi	r8,r8,8
 440c954:	003f3506 	br	440c62c <__reset+0xfb40862c>
 440c958:	010110f4 	movhi	r4,1091
 440c95c:	21133684 	addi	r4,r4,19674
 440c960:	d9002b15 	stw	r4,172(sp)
 440c964:	003c5e06 	br	440bae0 <__reset+0xfb407ae0>
 440c968:	d9402c17 	ldw	r5,176(sp)
 440c96c:	d9801e04 	addi	r6,sp,120
 440c970:	9809883a 	mov	r4,r19
 440c974:	4413ea40 	call	4413ea4 <__ssprint_r>
 440c978:	103b011e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440c97c:	d8c02017 	ldw	r3,128(sp)
 440c980:	da000404 	addi	r8,sp,16
 440c984:	003d9306 	br	440bfd4 <__reset+0xfb407fd4>
 440c988:	d8801f17 	ldw	r2,124(sp)
 440c98c:	014110f4 	movhi	r5,1091
 440c990:	01000044 	movi	r4,1
 440c994:	18c00044 	addi	r3,r3,1
 440c998:	10800044 	addi	r2,r2,1
 440c99c:	29533604 	addi	r5,r5,19672
 440c9a0:	41000115 	stw	r4,4(r8)
 440c9a4:	41400015 	stw	r5,0(r8)
 440c9a8:	d8c02015 	stw	r3,128(sp)
 440c9ac:	d8801f15 	stw	r2,124(sp)
 440c9b0:	010001c4 	movi	r4,7
 440c9b4:	2080b516 	blt	r4,r2,440cc8c <___svfprintf_internal_r+0x1aa0>
 440c9b8:	42000204 	addi	r8,r8,8
 440c9bc:	8800041e 	bne	r17,zero,440c9d0 <___svfprintf_internal_r+0x17e4>
 440c9c0:	d8803317 	ldw	r2,204(sp)
 440c9c4:	1000021e 	bne	r2,zero,440c9d0 <___svfprintf_internal_r+0x17e4>
 440c9c8:	9080004c 	andi	r2,r18,1
 440c9cc:	103c5b26 	beq	r2,zero,440bb3c <__reset+0xfb407b3c>
 440c9d0:	d9003817 	ldw	r4,224(sp)
 440c9d4:	d8801f17 	ldw	r2,124(sp)
 440c9d8:	d9403417 	ldw	r5,208(sp)
 440c9dc:	20c7883a 	add	r3,r4,r3
 440c9e0:	10800044 	addi	r2,r2,1
 440c9e4:	41000115 	stw	r4,4(r8)
 440c9e8:	41400015 	stw	r5,0(r8)
 440c9ec:	d8c02015 	stw	r3,128(sp)
 440c9f0:	d8801f15 	stw	r2,124(sp)
 440c9f4:	010001c4 	movi	r4,7
 440c9f8:	20818016 	blt	r4,r2,440cffc <___svfprintf_internal_r+0x1e10>
 440c9fc:	42000204 	addi	r8,r8,8
 440ca00:	0463c83a 	sub	r17,zero,r17
 440ca04:	0440cb0e 	bge	zero,r17,440cd34 <___svfprintf_internal_r+0x1b48>
 440ca08:	05800404 	movi	r22,16
 440ca0c:	b440e80e 	bge	r22,r17,440cdb0 <___svfprintf_internal_r+0x1bc4>
 440ca10:	014110f4 	movhi	r5,1091
 440ca14:	29533684 	addi	r5,r5,19674
 440ca18:	d9402b15 	stw	r5,172(sp)
 440ca1c:	070001c4 	movi	fp,7
 440ca20:	dd002c17 	ldw	r20,176(sp)
 440ca24:	00000306 	br	440ca34 <___svfprintf_internal_r+0x1848>
 440ca28:	42000204 	addi	r8,r8,8
 440ca2c:	8c7ffc04 	addi	r17,r17,-16
 440ca30:	b440e20e 	bge	r22,r17,440cdbc <___svfprintf_internal_r+0x1bd0>
 440ca34:	18c00404 	addi	r3,r3,16
 440ca38:	10800044 	addi	r2,r2,1
 440ca3c:	45400015 	stw	r21,0(r8)
 440ca40:	45800115 	stw	r22,4(r8)
 440ca44:	d8c02015 	stw	r3,128(sp)
 440ca48:	d8801f15 	stw	r2,124(sp)
 440ca4c:	e0bff60e 	bge	fp,r2,440ca28 <__reset+0xfb408a28>
 440ca50:	d9801e04 	addi	r6,sp,120
 440ca54:	a00b883a 	mov	r5,r20
 440ca58:	9809883a 	mov	r4,r19
 440ca5c:	4413ea40 	call	4413ea4 <__ssprint_r>
 440ca60:	103ac71e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440ca64:	d8c02017 	ldw	r3,128(sp)
 440ca68:	d8801f17 	ldw	r2,124(sp)
 440ca6c:	da000404 	addi	r8,sp,16
 440ca70:	003fee06 	br	440ca2c <__reset+0xfb408a2c>
 440ca74:	d8c02d17 	ldw	r3,180(sp)
 440ca78:	d9002917 	ldw	r4,164(sp)
 440ca7c:	002d883a 	mov	r22,zero
 440ca80:	18800104 	addi	r2,r3,4
 440ca84:	1d000017 	ldw	r20,0(r3)
 440ca88:	203e7d0e 	bge	r4,zero,440c480 <__reset+0xfb408480>
 440ca8c:	003eda06 	br	440c5f8 <__reset+0xfb4085f8>
 440ca90:	d9402d17 	ldw	r5,180(sp)
 440ca94:	d8c02917 	ldw	r3,164(sp)
 440ca98:	002d883a 	mov	r22,zero
 440ca9c:	28800104 	addi	r2,r5,4
 440caa0:	2d000017 	ldw	r20,0(r5)
 440caa4:	183e2d0e 	bge	r3,zero,440c35c <__reset+0xfb40835c>
 440caa8:	003f6b06 	br	440c858 <__reset+0xfb408858>
 440caac:	d8c02d15 	stw	r3,180(sp)
 440cab0:	0039883a 	mov	fp,zero
 440cab4:	003ed206 	br	440c600 <__reset+0xfb408600>
 440cab8:	bc400043 	ldbu	r17,1(r23)
 440cabc:	94800814 	ori	r18,r18,32
 440cac0:	bdc00044 	addi	r23,r23,1
 440cac4:	8c403fcc 	andi	r17,r17,255
 440cac8:	8c40201c 	xori	r17,r17,128
 440cacc:	8c7fe004 	addi	r17,r17,-128
 440cad0:	003a1a06 	br	440b33c <__reset+0xfb40733c>
 440cad4:	d9402c17 	ldw	r5,176(sp)
 440cad8:	d9801e04 	addi	r6,sp,120
 440cadc:	9809883a 	mov	r4,r19
 440cae0:	4413ea40 	call	4413ea4 <__ssprint_r>
 440cae4:	103aa61e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440cae8:	d8c02017 	ldw	r3,128(sp)
 440caec:	da000404 	addi	r8,sp,16
 440caf0:	003d4a06 	br	440c01c <__reset+0xfb40801c>
 440caf4:	d9002917 	ldw	r4,164(sp)
 440caf8:	05bff7c4 	movi	r22,-33
 440cafc:	00bfffc4 	movi	r2,-1
 440cb00:	8dac703a 	and	r22,r17,r22
 440cb04:	20806a26 	beq	r4,r2,440ccb0 <___svfprintf_internal_r+0x1ac4>
 440cb08:	008011c4 	movi	r2,71
 440cb0c:	b0813726 	beq	r22,r2,440cfec <___svfprintf_internal_r+0x1e00>
 440cb10:	d9003717 	ldw	r4,220(sp)
 440cb14:	90c04014 	ori	r3,r18,256
 440cb18:	d8c02b15 	stw	r3,172(sp)
 440cb1c:	20015d16 	blt	r4,zero,440d094 <___svfprintf_internal_r+0x1ea8>
 440cb20:	dd003717 	ldw	r20,220(sp)
 440cb24:	d8002a05 	stb	zero,168(sp)
 440cb28:	00801984 	movi	r2,102
 440cb2c:	88814026 	beq	r17,r2,440d030 <___svfprintf_internal_r+0x1e44>
 440cb30:	00801184 	movi	r2,70
 440cb34:	88817126 	beq	r17,r2,440d0fc <___svfprintf_internal_r+0x1f10>
 440cb38:	00801144 	movi	r2,69
 440cb3c:	b0816226 	beq	r22,r2,440d0c8 <___svfprintf_internal_r+0x1edc>
 440cb40:	d8c02917 	ldw	r3,164(sp)
 440cb44:	d8802104 	addi	r2,sp,132
 440cb48:	d8800315 	stw	r2,12(sp)
 440cb4c:	d9403617 	ldw	r5,216(sp)
 440cb50:	d8802504 	addi	r2,sp,148
 440cb54:	d8800215 	stw	r2,8(sp)
 440cb58:	d8802604 	addi	r2,sp,152
 440cb5c:	d8c00015 	stw	r3,0(sp)
 440cb60:	d8800115 	stw	r2,4(sp)
 440cb64:	01c00084 	movi	r7,2
 440cb68:	a00d883a 	mov	r6,r20
 440cb6c:	9809883a 	mov	r4,r19
 440cb70:	d8c03d15 	stw	r3,244(sp)
 440cb74:	da003e15 	stw	r8,248(sp)
 440cb78:	440fb0c0 	call	440fb0c <_dtoa_r>
 440cb7c:	1021883a 	mov	r16,r2
 440cb80:	008019c4 	movi	r2,103
 440cb84:	d8c03d17 	ldw	r3,244(sp)
 440cb88:	da003e17 	ldw	r8,248(sp)
 440cb8c:	8880e726 	beq	r17,r2,440cf2c <___svfprintf_internal_r+0x1d40>
 440cb90:	008011c4 	movi	r2,71
 440cb94:	8880d426 	beq	r17,r2,440cee8 <___svfprintf_internal_r+0x1cfc>
 440cb98:	80f9883a 	add	fp,r16,r3
 440cb9c:	d9003617 	ldw	r4,216(sp)
 440cba0:	000d883a 	mov	r6,zero
 440cba4:	000f883a 	mov	r7,zero
 440cba8:	a00b883a 	mov	r5,r20
 440cbac:	da003e15 	stw	r8,248(sp)
 440cbb0:	4417cdc0 	call	4417cdc <__eqdf2>
 440cbb4:	da003e17 	ldw	r8,248(sp)
 440cbb8:	1000e426 	beq	r2,zero,440cf4c <___svfprintf_internal_r+0x1d60>
 440cbbc:	d8802117 	ldw	r2,132(sp)
 440cbc0:	1700062e 	bgeu	r2,fp,440cbdc <___svfprintf_internal_r+0x19f0>
 440cbc4:	01000c04 	movi	r4,48
 440cbc8:	10c00044 	addi	r3,r2,1
 440cbcc:	d8c02115 	stw	r3,132(sp)
 440cbd0:	11000005 	stb	r4,0(r2)
 440cbd4:	d8802117 	ldw	r2,132(sp)
 440cbd8:	173ffb36 	bltu	r2,fp,440cbc8 <__reset+0xfb408bc8>
 440cbdc:	1405c83a 	sub	r2,r2,r16
 440cbe0:	d8803315 	stw	r2,204(sp)
 440cbe4:	008011c4 	movi	r2,71
 440cbe8:	b080c526 	beq	r22,r2,440cf00 <___svfprintf_internal_r+0x1d14>
 440cbec:	00801944 	movi	r2,101
 440cbf0:	1441d90e 	bge	r2,r17,440d358 <___svfprintf_internal_r+0x216c>
 440cbf4:	d8c02617 	ldw	r3,152(sp)
 440cbf8:	00801984 	movi	r2,102
 440cbfc:	d8c03215 	stw	r3,200(sp)
 440cc00:	88813426 	beq	r17,r2,440d0d4 <___svfprintf_internal_r+0x1ee8>
 440cc04:	d8c03217 	ldw	r3,200(sp)
 440cc08:	d9003317 	ldw	r4,204(sp)
 440cc0c:	19012516 	blt	r3,r4,440d0a4 <___svfprintf_internal_r+0x1eb8>
 440cc10:	9480004c 	andi	r18,r18,1
 440cc14:	9001841e 	bne	r18,zero,440d228 <___svfprintf_internal_r+0x203c>
 440cc18:	1805883a 	mov	r2,r3
 440cc1c:	1801cc16 	blt	r3,zero,440d350 <___svfprintf_internal_r+0x2164>
 440cc20:	d8c03217 	ldw	r3,200(sp)
 440cc24:	044019c4 	movi	r17,103
 440cc28:	d8c02e15 	stw	r3,184(sp)
 440cc2c:	df002a07 	ldb	fp,168(sp)
 440cc30:	e000a61e 	bne	fp,zero,440cecc <___svfprintf_internal_r+0x1ce0>
 440cc34:	df002783 	ldbu	fp,158(sp)
 440cc38:	d8802a15 	stw	r2,168(sp)
 440cc3c:	dc802b17 	ldw	r18,172(sp)
 440cc40:	d8002915 	stw	zero,164(sp)
 440cc44:	003b1706 	br	440b8a4 <__reset+0xfb4078a4>
 440cc48:	040110f4 	movhi	r16,1091
 440cc4c:	84132604 	addi	r16,r16,19608
 440cc50:	003aa606 	br	440b6ec <__reset+0xfb4076ec>
 440cc54:	d9003917 	ldw	r4,228(sp)
 440cc58:	04001004 	movi	r16,64
 440cc5c:	800b883a 	mov	r5,r16
 440cc60:	440a3f00 	call	440a3f0 <_malloc_r>
 440cc64:	d9002c17 	ldw	r4,176(sp)
 440cc68:	20800015 	stw	r2,0(r4)
 440cc6c:	20800415 	stw	r2,16(r4)
 440cc70:	1001cb26 	beq	r2,zero,440d3a0 <___svfprintf_internal_r+0x21b4>
 440cc74:	d8802c17 	ldw	r2,176(sp)
 440cc78:	14000515 	stw	r16,20(r2)
 440cc7c:	00397606 	br	440b258 <__reset+0xfb407258>
 440cc80:	040110f4 	movhi	r16,1091
 440cc84:	84132804 	addi	r16,r16,19616
 440cc88:	003ee106 	br	440c810 <__reset+0xfb408810>
 440cc8c:	d9402c17 	ldw	r5,176(sp)
 440cc90:	d9801e04 	addi	r6,sp,120
 440cc94:	9809883a 	mov	r4,r19
 440cc98:	4413ea40 	call	4413ea4 <__ssprint_r>
 440cc9c:	103a381e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440cca0:	dc402617 	ldw	r17,152(sp)
 440cca4:	d8c02017 	ldw	r3,128(sp)
 440cca8:	da000404 	addi	r8,sp,16
 440ccac:	003f4306 	br	440c9bc <__reset+0xfb4089bc>
 440ccb0:	01400184 	movi	r5,6
 440ccb4:	d9402915 	stw	r5,164(sp)
 440ccb8:	003f9506 	br	440cb10 <__reset+0xfb408b10>
 440ccbc:	d9002d17 	ldw	r4,180(sp)
 440ccc0:	25000017 	ldw	r20,0(r4)
 440ccc4:	21000104 	addi	r4,r4,4
 440ccc8:	d9002d15 	stw	r4,180(sp)
 440cccc:	a02dd7fa 	srai	r22,r20,31
 440ccd0:	b005883a 	mov	r2,r22
 440ccd4:	003a9b06 	br	440b744 <__reset+0xfb407744>
 440ccd8:	d9402d17 	ldw	r5,180(sp)
 440ccdc:	002d883a 	mov	r22,zero
 440cce0:	2d000017 	ldw	r20,0(r5)
 440cce4:	29400104 	addi	r5,r5,4
 440cce8:	d9402d15 	stw	r5,180(sp)
 440ccec:	003bf906 	br	440bcd4 <__reset+0xfb407cd4>
 440ccf0:	9480100c 	andi	r18,r18,64
 440ccf4:	90006e26 	beq	r18,zero,440ceb0 <___svfprintf_internal_r+0x1cc4>
 440ccf8:	d9002d17 	ldw	r4,180(sp)
 440ccfc:	d9402f17 	ldw	r5,188(sp)
 440cd00:	20800017 	ldw	r2,0(r4)
 440cd04:	21000104 	addi	r4,r4,4
 440cd08:	d9002d15 	stw	r4,180(sp)
 440cd0c:	1140000d 	sth	r5,0(r2)
 440cd10:	00396106 	br	440b298 <__reset+0xfb407298>
 440cd14:	d9402c17 	ldw	r5,176(sp)
 440cd18:	d9801e04 	addi	r6,sp,120
 440cd1c:	9809883a 	mov	r4,r19
 440cd20:	4413ea40 	call	4413ea4 <__ssprint_r>
 440cd24:	103a161e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440cd28:	d8c02017 	ldw	r3,128(sp)
 440cd2c:	d8801f17 	ldw	r2,124(sp)
 440cd30:	da000404 	addi	r8,sp,16
 440cd34:	d9403317 	ldw	r5,204(sp)
 440cd38:	10800044 	addi	r2,r2,1
 440cd3c:	44000015 	stw	r16,0(r8)
 440cd40:	28c7883a 	add	r3,r5,r3
 440cd44:	003b7706 	br	440bb24 <__reset+0xfb407b24>
 440cd48:	8009883a 	mov	r4,r16
 440cd4c:	da003e15 	stw	r8,248(sp)
 440cd50:	440b1540 	call	440b154 <strlen>
 440cd54:	d8802e15 	stw	r2,184(sp)
 440cd58:	da003e17 	ldw	r8,248(sp)
 440cd5c:	103c280e 	bge	r2,zero,440be00 <__reset+0xfb407e00>
 440cd60:	0005883a 	mov	r2,zero
 440cd64:	003c2606 	br	440be00 <__reset+0xfb407e00>
 440cd68:	00bfffc4 	movi	r2,-1
 440cd6c:	003a0906 	br	440b594 <__reset+0xfb407594>
 440cd70:	010110f4 	movhi	r4,1091
 440cd74:	21133a84 	addi	r4,r4,19690
 440cd78:	d9003515 	stw	r4,212(sp)
 440cd7c:	003b0606 	br	440b998 <__reset+0xfb407998>
 440cd80:	013fffc4 	movi	r4,-1
 440cd84:	003a2706 	br	440b624 <__reset+0xfb407624>
 440cd88:	d9402c17 	ldw	r5,176(sp)
 440cd8c:	d9801e04 	addi	r6,sp,120
 440cd90:	9809883a 	mov	r4,r19
 440cd94:	4413ea40 	call	4413ea4 <__ssprint_r>
 440cd98:	1039f91e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440cd9c:	d8c02017 	ldw	r3,128(sp)
 440cda0:	da000404 	addi	r8,sp,16
 440cda4:	003d8406 	br	440c3b8 <__reset+0xfb4083b8>
 440cda8:	0023883a 	mov	r17,zero
 440cdac:	003d8306 	br	440c3bc <__reset+0xfb4083bc>
 440cdb0:	010110f4 	movhi	r4,1091
 440cdb4:	21133684 	addi	r4,r4,19674
 440cdb8:	d9002b15 	stw	r4,172(sp)
 440cdbc:	d9002b17 	ldw	r4,172(sp)
 440cdc0:	1c47883a 	add	r3,r3,r17
 440cdc4:	10800044 	addi	r2,r2,1
 440cdc8:	41000015 	stw	r4,0(r8)
 440cdcc:	44400115 	stw	r17,4(r8)
 440cdd0:	d8c02015 	stw	r3,128(sp)
 440cdd4:	d8801f15 	stw	r2,124(sp)
 440cdd8:	010001c4 	movi	r4,7
 440cddc:	20bfcd16 	blt	r4,r2,440cd14 <__reset+0xfb408d14>
 440cde0:	42000204 	addi	r8,r8,8
 440cde4:	003fd306 	br	440cd34 <__reset+0xfb408d34>
 440cde8:	d9402c17 	ldw	r5,176(sp)
 440cdec:	d9801e04 	addi	r6,sp,120
 440cdf0:	9809883a 	mov	r4,r19
 440cdf4:	4413ea40 	call	4413ea4 <__ssprint_r>
 440cdf8:	1039e11e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440cdfc:	d8802617 	ldw	r2,152(sp)
 440ce00:	d8c02017 	ldw	r3,128(sp)
 440ce04:	da000404 	addi	r8,sp,16
 440ce08:	003e1c06 	br	440c67c <__reset+0xfb40867c>
 440ce0c:	d8802917 	ldw	r2,164(sp)
 440ce10:	00c00184 	movi	r3,6
 440ce14:	1880012e 	bgeu	r3,r2,440ce1c <___svfprintf_internal_r+0x1c30>
 440ce18:	1805883a 	mov	r2,r3
 440ce1c:	d8802e15 	stw	r2,184(sp)
 440ce20:	1000f316 	blt	r2,zero,440d1f0 <___svfprintf_internal_r+0x2004>
 440ce24:	040110f4 	movhi	r16,1091
 440ce28:	d8802a15 	stw	r2,168(sp)
 440ce2c:	dd002d15 	stw	r20,180(sp)
 440ce30:	d8002915 	stw	zero,164(sp)
 440ce34:	d8003215 	stw	zero,200(sp)
 440ce38:	84133404 	addi	r16,r16,19664
 440ce3c:	0039883a 	mov	fp,zero
 440ce40:	003a9f06 	br	440b8c0 <__reset+0xfb4078c0>
 440ce44:	010110f4 	movhi	r4,1091
 440ce48:	21133a84 	addi	r4,r4,19690
 440ce4c:	d9003515 	stw	r4,212(sp)
 440ce50:	003b5f06 	br	440bbd0 <__reset+0xfb407bd0>
 440ce54:	d9402c17 	ldw	r5,176(sp)
 440ce58:	d9801e04 	addi	r6,sp,120
 440ce5c:	9809883a 	mov	r4,r19
 440ce60:	4413ea40 	call	4413ea4 <__ssprint_r>
 440ce64:	1039c61e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440ce68:	d8802617 	ldw	r2,152(sp)
 440ce6c:	d9403317 	ldw	r5,204(sp)
 440ce70:	d8c02017 	ldw	r3,128(sp)
 440ce74:	da000404 	addi	r8,sp,16
 440ce78:	2885c83a 	sub	r2,r5,r2
 440ce7c:	003e1006 	br	440c6c0 <__reset+0xfb4086c0>
 440ce80:	00800044 	movi	r2,1
 440ce84:	10803fcc 	andi	r2,r2,255
 440ce88:	00c00044 	movi	r3,1
 440ce8c:	10fa3526 	beq	r2,r3,440b764 <__reset+0xfb407764>
 440ce90:	00c00084 	movi	r3,2
 440ce94:	10fb9e26 	beq	r2,r3,440bd10 <__reset+0xfb407d10>
 440ce98:	003a6406 	br	440b82c <__reset+0xfb40782c>
 440ce9c:	0021883a 	mov	r16,zero
 440cea0:	003e0806 	br	440c6c4 <__reset+0xfb4086c4>
 440cea4:	07000b44 	movi	fp,45
 440cea8:	df002785 	stb	fp,158(sp)
 440ceac:	003a0b06 	br	440b6dc <__reset+0xfb4076dc>
 440ceb0:	d8c02d17 	ldw	r3,180(sp)
 440ceb4:	d9002f17 	ldw	r4,188(sp)
 440ceb8:	18800017 	ldw	r2,0(r3)
 440cebc:	18c00104 	addi	r3,r3,4
 440cec0:	d8c02d15 	stw	r3,180(sp)
 440cec4:	11000015 	stw	r4,0(r2)
 440cec8:	0038f306 	br	440b298 <__reset+0xfb407298>
 440cecc:	00c00b44 	movi	r3,45
 440ced0:	d8c02785 	stb	r3,158(sp)
 440ced4:	d8802a15 	stw	r2,168(sp)
 440ced8:	dc802b17 	ldw	r18,172(sp)
 440cedc:	d8002915 	stw	zero,164(sp)
 440cee0:	07000b44 	movi	fp,45
 440cee4:	003a7306 	br	440b8b4 <__reset+0xfb4078b4>
 440cee8:	9080004c 	andi	r2,r18,1
 440ceec:	1000941e 	bne	r2,zero,440d140 <___svfprintf_internal_r+0x1f54>
 440cef0:	d8802117 	ldw	r2,132(sp)
 440cef4:	1405c83a 	sub	r2,r2,r16
 440cef8:	d8803315 	stw	r2,204(sp)
 440cefc:	b441161e 	bne	r22,r17,440d358 <___svfprintf_internal_r+0x216c>
 440cf00:	dd802617 	ldw	r22,152(sp)
 440cf04:	00bfff44 	movi	r2,-3
 440cf08:	b0801a16 	blt	r22,r2,440cf74 <___svfprintf_internal_r+0x1d88>
 440cf0c:	d9402917 	ldw	r5,164(sp)
 440cf10:	2d801816 	blt	r5,r22,440cf74 <___svfprintf_internal_r+0x1d88>
 440cf14:	dd803215 	stw	r22,200(sp)
 440cf18:	003f3a06 	br	440cc04 <__reset+0xfb408c04>
 440cf1c:	1025883a 	mov	r18,r2
 440cf20:	0039883a 	mov	fp,zero
 440cf24:	00800084 	movi	r2,2
 440cf28:	003fd606 	br	440ce84 <__reset+0xfb408e84>
 440cf2c:	9080004c 	andi	r2,r18,1
 440cf30:	103f191e 	bne	r2,zero,440cb98 <__reset+0xfb408b98>
 440cf34:	d8802117 	ldw	r2,132(sp)
 440cf38:	003f2806 	br	440cbdc <__reset+0xfb408bdc>
 440cf3c:	010110f4 	movhi	r4,1091
 440cf40:	21133684 	addi	r4,r4,19674
 440cf44:	d9002b15 	stw	r4,172(sp)
 440cf48:	003c7c06 	br	440c13c <__reset+0xfb40813c>
 440cf4c:	e005883a 	mov	r2,fp
 440cf50:	003f2206 	br	440cbdc <__reset+0xfb408bdc>
 440cf54:	d9402917 	ldw	r5,164(sp)
 440cf58:	df002783 	ldbu	fp,158(sp)
 440cf5c:	dd002d15 	stw	r20,180(sp)
 440cf60:	d9402a15 	stw	r5,168(sp)
 440cf64:	d9402e15 	stw	r5,184(sp)
 440cf68:	d8002915 	stw	zero,164(sp)
 440cf6c:	d8003215 	stw	zero,200(sp)
 440cf70:	003a4c06 	br	440b8a4 <__reset+0xfb4078a4>
 440cf74:	8c7fff84 	addi	r17,r17,-2
 440cf78:	b5bfffc4 	addi	r22,r22,-1
 440cf7c:	dd802615 	stw	r22,152(sp)
 440cf80:	dc4022c5 	stb	r17,139(sp)
 440cf84:	b000c316 	blt	r22,zero,440d294 <___svfprintf_internal_r+0x20a8>
 440cf88:	00800ac4 	movi	r2,43
 440cf8c:	d8802305 	stb	r2,140(sp)
 440cf90:	00800244 	movi	r2,9
 440cf94:	15806e16 	blt	r2,r22,440d150 <___svfprintf_internal_r+0x1f64>
 440cf98:	00800c04 	movi	r2,48
 440cf9c:	b5800c04 	addi	r22,r22,48
 440cfa0:	d8802345 	stb	r2,141(sp)
 440cfa4:	dd802385 	stb	r22,142(sp)
 440cfa8:	d88023c4 	addi	r2,sp,143
 440cfac:	df0022c4 	addi	fp,sp,139
 440cfb0:	d8c03317 	ldw	r3,204(sp)
 440cfb4:	1739c83a 	sub	fp,r2,fp
 440cfb8:	d9003317 	ldw	r4,204(sp)
 440cfbc:	e0c7883a 	add	r3,fp,r3
 440cfc0:	df003b15 	stw	fp,236(sp)
 440cfc4:	d8c02e15 	stw	r3,184(sp)
 440cfc8:	00800044 	movi	r2,1
 440cfcc:	1100b70e 	bge	r2,r4,440d2ac <___svfprintf_internal_r+0x20c0>
 440cfd0:	d8c02e17 	ldw	r3,184(sp)
 440cfd4:	18c00044 	addi	r3,r3,1
 440cfd8:	d8c02e15 	stw	r3,184(sp)
 440cfdc:	1805883a 	mov	r2,r3
 440cfe0:	1800b016 	blt	r3,zero,440d2a4 <___svfprintf_internal_r+0x20b8>
 440cfe4:	d8003215 	stw	zero,200(sp)
 440cfe8:	003f1006 	br	440cc2c <__reset+0xfb408c2c>
 440cfec:	d8802917 	ldw	r2,164(sp)
 440cff0:	103ec71e 	bne	r2,zero,440cb10 <__reset+0xfb408b10>
 440cff4:	dc002915 	stw	r16,164(sp)
 440cff8:	003ec506 	br	440cb10 <__reset+0xfb408b10>
 440cffc:	d9402c17 	ldw	r5,176(sp)
 440d000:	d9801e04 	addi	r6,sp,120
 440d004:	9809883a 	mov	r4,r19
 440d008:	4413ea40 	call	4413ea4 <__ssprint_r>
 440d00c:	10395c1e 	bne	r2,zero,440b580 <__reset+0xfb407580>
 440d010:	dc402617 	ldw	r17,152(sp)
 440d014:	d8c02017 	ldw	r3,128(sp)
 440d018:	d8801f17 	ldw	r2,124(sp)
 440d01c:	da000404 	addi	r8,sp,16
 440d020:	003e7706 	br	440ca00 <__reset+0xfb408a00>
 440d024:	582f883a 	mov	r23,r11
 440d028:	d8002915 	stw	zero,164(sp)
 440d02c:	0038c406 	br	440b340 <__reset+0xfb407340>
 440d030:	d8c02917 	ldw	r3,164(sp)
 440d034:	d8802104 	addi	r2,sp,132
 440d038:	d8800315 	stw	r2,12(sp)
 440d03c:	d9403617 	ldw	r5,216(sp)
 440d040:	d8802504 	addi	r2,sp,148
 440d044:	d8800215 	stw	r2,8(sp)
 440d048:	d8802604 	addi	r2,sp,152
 440d04c:	d8c00015 	stw	r3,0(sp)
 440d050:	9809883a 	mov	r4,r19
 440d054:	d8800115 	stw	r2,4(sp)
 440d058:	01c000c4 	movi	r7,3
 440d05c:	a00d883a 	mov	r6,r20
 440d060:	da003e15 	stw	r8,248(sp)
 440d064:	440fb0c0 	call	440fb0c <_dtoa_r>
 440d068:	d9002917 	ldw	r4,164(sp)
 440d06c:	da003e17 	ldw	r8,248(sp)
 440d070:	1021883a 	mov	r16,r2
 440d074:	1139883a 	add	fp,r2,r4
 440d078:	2007883a 	mov	r3,r4
 440d07c:	81000007 	ldb	r4,0(r16)
 440d080:	00800c04 	movi	r2,48
 440d084:	20806f26 	beq	r4,r2,440d244 <___svfprintf_internal_r+0x2058>
 440d088:	d8c02617 	ldw	r3,152(sp)
 440d08c:	e0f9883a 	add	fp,fp,r3
 440d090:	003ec206 	br	440cb9c <__reset+0xfb408b9c>
 440d094:	00c00b44 	movi	r3,45
 440d098:	2520003c 	xorhi	r20,r4,32768
 440d09c:	d8c02a05 	stb	r3,168(sp)
 440d0a0:	003ea106 	br	440cb28 <__reset+0xfb408b28>
 440d0a4:	d8c03217 	ldw	r3,200(sp)
 440d0a8:	00c0890e 	bge	zero,r3,440d2d0 <___svfprintf_internal_r+0x20e4>
 440d0ac:	00800044 	movi	r2,1
 440d0b0:	d9003317 	ldw	r4,204(sp)
 440d0b4:	1105883a 	add	r2,r2,r4
 440d0b8:	d8802e15 	stw	r2,184(sp)
 440d0bc:	10005f16 	blt	r2,zero,440d23c <___svfprintf_internal_r+0x2050>
 440d0c0:	044019c4 	movi	r17,103
 440d0c4:	003ed906 	br	440cc2c <__reset+0xfb408c2c>
 440d0c8:	d9002917 	ldw	r4,164(sp)
 440d0cc:	20c00044 	addi	r3,r4,1
 440d0d0:	003e9c06 	br	440cb44 <__reset+0xfb408b44>
 440d0d4:	d9002917 	ldw	r4,164(sp)
 440d0d8:	00c0680e 	bge	zero,r3,440d27c <___svfprintf_internal_r+0x2090>
 440d0dc:	2000461e 	bne	r4,zero,440d1f8 <___svfprintf_internal_r+0x200c>
 440d0e0:	9480004c 	andi	r18,r18,1
 440d0e4:	9000441e 	bne	r18,zero,440d1f8 <___svfprintf_internal_r+0x200c>
 440d0e8:	1805883a 	mov	r2,r3
 440d0ec:	1800a016 	blt	r3,zero,440d370 <___svfprintf_internal_r+0x2184>
 440d0f0:	d8c03217 	ldw	r3,200(sp)
 440d0f4:	d8c02e15 	stw	r3,184(sp)
 440d0f8:	003ecc06 	br	440cc2c <__reset+0xfb408c2c>
 440d0fc:	d9402917 	ldw	r5,164(sp)
 440d100:	d8802104 	addi	r2,sp,132
 440d104:	d8800315 	stw	r2,12(sp)
 440d108:	d9400015 	stw	r5,0(sp)
 440d10c:	d8802504 	addi	r2,sp,148
 440d110:	d9403617 	ldw	r5,216(sp)
 440d114:	d8800215 	stw	r2,8(sp)
 440d118:	d8802604 	addi	r2,sp,152
 440d11c:	d8800115 	stw	r2,4(sp)
 440d120:	01c000c4 	movi	r7,3
 440d124:	a00d883a 	mov	r6,r20
 440d128:	9809883a 	mov	r4,r19
 440d12c:	da003e15 	stw	r8,248(sp)
 440d130:	440fb0c0 	call	440fb0c <_dtoa_r>
 440d134:	d8c02917 	ldw	r3,164(sp)
 440d138:	da003e17 	ldw	r8,248(sp)
 440d13c:	1021883a 	mov	r16,r2
 440d140:	00801184 	movi	r2,70
 440d144:	80f9883a 	add	fp,r16,r3
 440d148:	88bfcc26 	beq	r17,r2,440d07c <__reset+0xfb40907c>
 440d14c:	003e9306 	br	440cb9c <__reset+0xfb408b9c>
 440d150:	df0022c4 	addi	fp,sp,139
 440d154:	dc002915 	stw	r16,164(sp)
 440d158:	9829883a 	mov	r20,r19
 440d15c:	e021883a 	mov	r16,fp
 440d160:	4027883a 	mov	r19,r8
 440d164:	b009883a 	mov	r4,r22
 440d168:	01400284 	movi	r5,10
 440d16c:	4407e2c0 	call	4407e2c <__modsi3>
 440d170:	10800c04 	addi	r2,r2,48
 440d174:	843fffc4 	addi	r16,r16,-1
 440d178:	b009883a 	mov	r4,r22
 440d17c:	01400284 	movi	r5,10
 440d180:	80800005 	stb	r2,0(r16)
 440d184:	4407da80 	call	4407da8 <__divsi3>
 440d188:	102d883a 	mov	r22,r2
 440d18c:	00800244 	movi	r2,9
 440d190:	15bff416 	blt	r2,r22,440d164 <__reset+0xfb409164>
 440d194:	9811883a 	mov	r8,r19
 440d198:	b0800c04 	addi	r2,r22,48
 440d19c:	a027883a 	mov	r19,r20
 440d1a0:	8029883a 	mov	r20,r16
 440d1a4:	a17fffc4 	addi	r5,r20,-1
 440d1a8:	a0bfffc5 	stb	r2,-1(r20)
 440d1ac:	dc002917 	ldw	r16,164(sp)
 440d1b0:	2f00752e 	bgeu	r5,fp,440d388 <___svfprintf_internal_r+0x219c>
 440d1b4:	d9c02384 	addi	r7,sp,142
 440d1b8:	3d0fc83a 	sub	r7,r7,r20
 440d1bc:	d9002344 	addi	r4,sp,141
 440d1c0:	e1cf883a 	add	r7,fp,r7
 440d1c4:	00000106 	br	440d1cc <___svfprintf_internal_r+0x1fe0>
 440d1c8:	28800003 	ldbu	r2,0(r5)
 440d1cc:	20800005 	stb	r2,0(r4)
 440d1d0:	21000044 	addi	r4,r4,1
 440d1d4:	29400044 	addi	r5,r5,1
 440d1d8:	21fffb1e 	bne	r4,r7,440d1c8 <__reset+0xfb4091c8>
 440d1dc:	d8802304 	addi	r2,sp,140
 440d1e0:	1505c83a 	sub	r2,r2,r20
 440d1e4:	d8c02344 	addi	r3,sp,141
 440d1e8:	1885883a 	add	r2,r3,r2
 440d1ec:	003f7006 	br	440cfb0 <__reset+0xfb408fb0>
 440d1f0:	0005883a 	mov	r2,zero
 440d1f4:	003f0b06 	br	440ce24 <__reset+0xfb408e24>
 440d1f8:	d9002917 	ldw	r4,164(sp)
 440d1fc:	d8c03217 	ldw	r3,200(sp)
 440d200:	20800044 	addi	r2,r4,1
 440d204:	1885883a 	add	r2,r3,r2
 440d208:	d8802e15 	stw	r2,184(sp)
 440d20c:	103e870e 	bge	r2,zero,440cc2c <__reset+0xfb408c2c>
 440d210:	0005883a 	mov	r2,zero
 440d214:	003e8506 	br	440cc2c <__reset+0xfb408c2c>
 440d218:	010110f4 	movhi	r4,1091
 440d21c:	21133684 	addi	r4,r4,19674
 440d220:	d9002b15 	stw	r4,172(sp)
 440d224:	003cc506 	br	440c53c <__reset+0xfb40853c>
 440d228:	d8c03217 	ldw	r3,200(sp)
 440d22c:	18c00044 	addi	r3,r3,1
 440d230:	d8c02e15 	stw	r3,184(sp)
 440d234:	1805883a 	mov	r2,r3
 440d238:	183fa10e 	bge	r3,zero,440d0c0 <__reset+0xfb4090c0>
 440d23c:	0005883a 	mov	r2,zero
 440d240:	003f9f06 	br	440d0c0 <__reset+0xfb4090c0>
 440d244:	d9003617 	ldw	r4,216(sp)
 440d248:	000d883a 	mov	r6,zero
 440d24c:	000f883a 	mov	r7,zero
 440d250:	a00b883a 	mov	r5,r20
 440d254:	d8c03d15 	stw	r3,244(sp)
 440d258:	da003e15 	stw	r8,248(sp)
 440d25c:	4417cdc0 	call	4417cdc <__eqdf2>
 440d260:	d8c03d17 	ldw	r3,244(sp)
 440d264:	da003e17 	ldw	r8,248(sp)
 440d268:	103f8726 	beq	r2,zero,440d088 <__reset+0xfb409088>
 440d26c:	00800044 	movi	r2,1
 440d270:	10c7c83a 	sub	r3,r2,r3
 440d274:	d8c02615 	stw	r3,152(sp)
 440d278:	003f8406 	br	440d08c <__reset+0xfb40908c>
 440d27c:	20000e1e 	bne	r4,zero,440d2b8 <___svfprintf_internal_r+0x20cc>
 440d280:	9480004c 	andi	r18,r18,1
 440d284:	90000c1e 	bne	r18,zero,440d2b8 <___svfprintf_internal_r+0x20cc>
 440d288:	00800044 	movi	r2,1
 440d28c:	d8802e15 	stw	r2,184(sp)
 440d290:	003e6606 	br	440cc2c <__reset+0xfb408c2c>
 440d294:	00800b44 	movi	r2,45
 440d298:	05adc83a 	sub	r22,zero,r22
 440d29c:	d8802305 	stb	r2,140(sp)
 440d2a0:	003f3b06 	br	440cf90 <__reset+0xfb408f90>
 440d2a4:	0005883a 	mov	r2,zero
 440d2a8:	003f4e06 	br	440cfe4 <__reset+0xfb408fe4>
 440d2ac:	90a4703a 	and	r18,r18,r2
 440d2b0:	903f4a26 	beq	r18,zero,440cfdc <__reset+0xfb408fdc>
 440d2b4:	003f4606 	br	440cfd0 <__reset+0xfb408fd0>
 440d2b8:	d8c02917 	ldw	r3,164(sp)
 440d2bc:	18c00084 	addi	r3,r3,2
 440d2c0:	d8c02e15 	stw	r3,184(sp)
 440d2c4:	1805883a 	mov	r2,r3
 440d2c8:	183e580e 	bge	r3,zero,440cc2c <__reset+0xfb408c2c>
 440d2cc:	003fd006 	br	440d210 <__reset+0xfb409210>
 440d2d0:	00800084 	movi	r2,2
 440d2d4:	10c5c83a 	sub	r2,r2,r3
 440d2d8:	003f7506 	br	440d0b0 <__reset+0xfb4090b0>
 440d2dc:	d8802d17 	ldw	r2,180(sp)
 440d2e0:	d9002d17 	ldw	r4,180(sp)
 440d2e4:	bc400043 	ldbu	r17,1(r23)
 440d2e8:	10800017 	ldw	r2,0(r2)
 440d2ec:	582f883a 	mov	r23,r11
 440d2f0:	d8802915 	stw	r2,164(sp)
 440d2f4:	20800104 	addi	r2,r4,4
 440d2f8:	d9002917 	ldw	r4,164(sp)
 440d2fc:	d8802d15 	stw	r2,180(sp)
 440d300:	203df00e 	bge	r4,zero,440cac4 <__reset+0xfb408ac4>
 440d304:	8c403fcc 	andi	r17,r17,255
 440d308:	00bfffc4 	movi	r2,-1
 440d30c:	8c40201c 	xori	r17,r17,128
 440d310:	d8802915 	stw	r2,164(sp)
 440d314:	8c7fe004 	addi	r17,r17,-128
 440d318:	00380806 	br	440b33c <__reset+0xfb40733c>
 440d31c:	9080004c 	andi	r2,r18,1
 440d320:	0039883a 	mov	fp,zero
 440d324:	10000726 	beq	r2,zero,440d344 <___svfprintf_internal_r+0x2158>
 440d328:	d8c02817 	ldw	r3,160(sp)
 440d32c:	dc001dc4 	addi	r16,sp,119
 440d330:	00800c04 	movi	r2,48
 440d334:	1c07c83a 	sub	r3,r3,r16
 440d338:	d8801dc5 	stb	r2,119(sp)
 440d33c:	d8c02e15 	stw	r3,184(sp)
 440d340:	00395206 	br	440b88c <__reset+0xfb40788c>
 440d344:	d8002e15 	stw	zero,184(sp)
 440d348:	dc001e04 	addi	r16,sp,120
 440d34c:	00394f06 	br	440b88c <__reset+0xfb40788c>
 440d350:	0005883a 	mov	r2,zero
 440d354:	003e3206 	br	440cc20 <__reset+0xfb408c20>
 440d358:	dd802617 	ldw	r22,152(sp)
 440d35c:	003f0606 	br	440cf78 <__reset+0xfb408f78>
 440d360:	d9c02785 	stb	r7,158(sp)
 440d364:	003a5106 	br	440bcac <__reset+0xfb407cac>
 440d368:	d9c02785 	stb	r7,158(sp)
 440d36c:	003a3706 	br	440bc4c <__reset+0xfb407c4c>
 440d370:	0005883a 	mov	r2,zero
 440d374:	003f5e06 	br	440d0f0 <__reset+0xfb4090f0>
 440d378:	d9c02785 	stb	r7,158(sp)
 440d37c:	00391706 	br	440b7dc <__reset+0xfb4077dc>
 440d380:	d9c02785 	stb	r7,158(sp)
 440d384:	0038e606 	br	440b720 <__reset+0xfb407720>
 440d388:	d8802344 	addi	r2,sp,141
 440d38c:	003f0806 	br	440cfb0 <__reset+0xfb408fb0>
 440d390:	d9c02785 	stb	r7,158(sp)
 440d394:	0038b706 	br	440b674 <__reset+0xfb407674>
 440d398:	d9c02785 	stb	r7,158(sp)
 440d39c:	003adc06 	br	440bf10 <__reset+0xfb407f10>
 440d3a0:	d9403917 	ldw	r5,228(sp)
 440d3a4:	00800304 	movi	r2,12
 440d3a8:	28800015 	stw	r2,0(r5)
 440d3ac:	00bfffc4 	movi	r2,-1
 440d3b0:	00387806 	br	440b594 <__reset+0xfb407594>
 440d3b4:	d9c02785 	stb	r7,158(sp)
 440d3b8:	003abf06 	br	440beb8 <__reset+0xfb407eb8>
 440d3bc:	d9c02785 	stb	r7,158(sp)
 440d3c0:	003a9b06 	br	440be30 <__reset+0xfb407e30>

0440d3c4 <___vfprintf_internal_r>:
 440d3c4:	deffb804 	addi	sp,sp,-288
 440d3c8:	dfc04715 	stw	ra,284(sp)
 440d3cc:	ddc04515 	stw	r23,276(sp)
 440d3d0:	dd404315 	stw	r21,268(sp)
 440d3d4:	d9002c15 	stw	r4,176(sp)
 440d3d8:	282f883a 	mov	r23,r5
 440d3dc:	302b883a 	mov	r21,r6
 440d3e0:	d9c02d15 	stw	r7,180(sp)
 440d3e4:	df004615 	stw	fp,280(sp)
 440d3e8:	dd804415 	stw	r22,272(sp)
 440d3ec:	dd004215 	stw	r20,264(sp)
 440d3f0:	dcc04115 	stw	r19,260(sp)
 440d3f4:	dc804015 	stw	r18,256(sp)
 440d3f8:	dc403f15 	stw	r17,252(sp)
 440d3fc:	dc003e15 	stw	r16,248(sp)
 440d400:	44123000 	call	4412300 <_localeconv_r>
 440d404:	10800017 	ldw	r2,0(r2)
 440d408:	1009883a 	mov	r4,r2
 440d40c:	d8803415 	stw	r2,208(sp)
 440d410:	440b1540 	call	440b154 <strlen>
 440d414:	d8803715 	stw	r2,220(sp)
 440d418:	d8802c17 	ldw	r2,176(sp)
 440d41c:	10000226 	beq	r2,zero,440d428 <___vfprintf_internal_r+0x64>
 440d420:	10800e17 	ldw	r2,56(r2)
 440d424:	1000f926 	beq	r2,zero,440d80c <___vfprintf_internal_r+0x448>
 440d428:	b880030b 	ldhu	r2,12(r23)
 440d42c:	10c8000c 	andi	r3,r2,8192
 440d430:	1800061e 	bne	r3,zero,440d44c <___vfprintf_internal_r+0x88>
 440d434:	b9001917 	ldw	r4,100(r23)
 440d438:	00f7ffc4 	movi	r3,-8193
 440d43c:	10880014 	ori	r2,r2,8192
 440d440:	20c6703a 	and	r3,r4,r3
 440d444:	b880030d 	sth	r2,12(r23)
 440d448:	b8c01915 	stw	r3,100(r23)
 440d44c:	10c0020c 	andi	r3,r2,8
 440d450:	1800c126 	beq	r3,zero,440d758 <___vfprintf_internal_r+0x394>
 440d454:	b8c00417 	ldw	r3,16(r23)
 440d458:	1800bf26 	beq	r3,zero,440d758 <___vfprintf_internal_r+0x394>
 440d45c:	1080068c 	andi	r2,r2,26
 440d460:	00c00284 	movi	r3,10
 440d464:	10c0c426 	beq	r2,r3,440d778 <___vfprintf_internal_r+0x3b4>
 440d468:	d8c00404 	addi	r3,sp,16
 440d46c:	050110f4 	movhi	r20,1091
 440d470:	d9001e04 	addi	r4,sp,120
 440d474:	a5133e84 	addi	r20,r20,19706
 440d478:	d8c01e15 	stw	r3,120(sp)
 440d47c:	d8002015 	stw	zero,128(sp)
 440d480:	d8001f15 	stw	zero,124(sp)
 440d484:	d8003315 	stw	zero,204(sp)
 440d488:	d8003615 	stw	zero,216(sp)
 440d48c:	d8003815 	stw	zero,224(sp)
 440d490:	1811883a 	mov	r8,r3
 440d494:	d8003915 	stw	zero,228(sp)
 440d498:	d8003a15 	stw	zero,232(sp)
 440d49c:	d8002f15 	stw	zero,188(sp)
 440d4a0:	d9002815 	stw	r4,160(sp)
 440d4a4:	a8800007 	ldb	r2,0(r21)
 440d4a8:	10027b26 	beq	r2,zero,440de98 <___vfprintf_internal_r+0xad4>
 440d4ac:	00c00944 	movi	r3,37
 440d4b0:	a821883a 	mov	r16,r21
 440d4b4:	10c0021e 	bne	r2,r3,440d4c0 <___vfprintf_internal_r+0xfc>
 440d4b8:	00001406 	br	440d50c <___vfprintf_internal_r+0x148>
 440d4bc:	10c00326 	beq	r2,r3,440d4cc <___vfprintf_internal_r+0x108>
 440d4c0:	84000044 	addi	r16,r16,1
 440d4c4:	80800007 	ldb	r2,0(r16)
 440d4c8:	103ffc1e 	bne	r2,zero,440d4bc <__reset+0xfb4094bc>
 440d4cc:	8563c83a 	sub	r17,r16,r21
 440d4d0:	88000e26 	beq	r17,zero,440d50c <___vfprintf_internal_r+0x148>
 440d4d4:	d8c02017 	ldw	r3,128(sp)
 440d4d8:	d8801f17 	ldw	r2,124(sp)
 440d4dc:	45400015 	stw	r21,0(r8)
 440d4e0:	1c47883a 	add	r3,r3,r17
 440d4e4:	10800044 	addi	r2,r2,1
 440d4e8:	d8c02015 	stw	r3,128(sp)
 440d4ec:	44400115 	stw	r17,4(r8)
 440d4f0:	d8801f15 	stw	r2,124(sp)
 440d4f4:	00c001c4 	movi	r3,7
 440d4f8:	1880a716 	blt	r3,r2,440d798 <___vfprintf_internal_r+0x3d4>
 440d4fc:	42000204 	addi	r8,r8,8
 440d500:	d9402f17 	ldw	r5,188(sp)
 440d504:	2c4b883a 	add	r5,r5,r17
 440d508:	d9402f15 	stw	r5,188(sp)
 440d50c:	80800007 	ldb	r2,0(r16)
 440d510:	1000a826 	beq	r2,zero,440d7b4 <___vfprintf_internal_r+0x3f0>
 440d514:	84400047 	ldb	r17,1(r16)
 440d518:	00bfffc4 	movi	r2,-1
 440d51c:	85400044 	addi	r21,r16,1
 440d520:	d8002785 	stb	zero,158(sp)
 440d524:	0007883a 	mov	r3,zero
 440d528:	000f883a 	mov	r7,zero
 440d52c:	d8802915 	stw	r2,164(sp)
 440d530:	d8003115 	stw	zero,196(sp)
 440d534:	0025883a 	mov	r18,zero
 440d538:	01401604 	movi	r5,88
 440d53c:	01800244 	movi	r6,9
 440d540:	02800a84 	movi	r10,42
 440d544:	02401b04 	movi	r9,108
 440d548:	ad400044 	addi	r21,r21,1
 440d54c:	88bff804 	addi	r2,r17,-32
 440d550:	28830436 	bltu	r5,r2,440e164 <___vfprintf_internal_r+0xda0>
 440d554:	100490ba 	slli	r2,r2,2
 440d558:	01011074 	movhi	r4,1089
 440d55c:	21355b04 	addi	r4,r4,-10900
 440d560:	1105883a 	add	r2,r2,r4
 440d564:	10800017 	ldw	r2,0(r2)
 440d568:	1000683a 	jmp	r2
 440d56c:	0440e084 	movi	r17,898
 440d570:	0440e164 	muli	r17,zero,901
 440d574:	0440e164 	muli	r17,zero,901
 440d578:	0440e0a4 	muli	r17,zero,898
 440d57c:	0440e164 	muli	r17,zero,901
 440d580:	0440e164 	muli	r17,zero,901
 440d584:	0440e164 	muli	r17,zero,901
 440d588:	0440e164 	muli	r17,zero,901
 440d58c:	0440e164 	muli	r17,zero,901
 440d590:	0440e164 	muli	r17,zero,901
 440d594:	0440d818 	cmpnei	r17,zero,864
 440d598:	0440dfc0 	call	440dfc <__alt_mem_sdram-0x3bbf204>
 440d59c:	0440e164 	muli	r17,zero,901
 440d5a0:	0440d6e0 	cmpeqi	r17,zero,859
 440d5a4:	0440d840 	call	440d84 <__alt_mem_sdram-0x3bbf27c>
 440d5a8:	0440e164 	muli	r17,zero,901
 440d5ac:	0440d880 	call	440d88 <__alt_mem_sdram-0x3bbf278>
 440d5b0:	0440d88c 	andi	r17,zero,866
 440d5b4:	0440d88c 	andi	r17,zero,866
 440d5b8:	0440d88c 	andi	r17,zero,866
 440d5bc:	0440d88c 	andi	r17,zero,866
 440d5c0:	0440d88c 	andi	r17,zero,866
 440d5c4:	0440d88c 	andi	r17,zero,866
 440d5c8:	0440d88c 	andi	r17,zero,866
 440d5cc:	0440d88c 	andi	r17,zero,866
 440d5d0:	0440d88c 	andi	r17,zero,866
 440d5d4:	0440e164 	muli	r17,zero,901
 440d5d8:	0440e164 	muli	r17,zero,901
 440d5dc:	0440e164 	muli	r17,zero,901
 440d5e0:	0440e164 	muli	r17,zero,901
 440d5e4:	0440e164 	muli	r17,zero,901
 440d5e8:	0440e164 	muli	r17,zero,901
 440d5ec:	0440e164 	muli	r17,zero,901
 440d5f0:	0440e164 	muli	r17,zero,901
 440d5f4:	0440e164 	muli	r17,zero,901
 440d5f8:	0440e164 	muli	r17,zero,901
 440d5fc:	0440d8c0 	call	440d8c <__alt_mem_sdram-0x3bbf274>
 440d600:	0440d97c 	xorhi	r17,zero,869
 440d604:	0440e164 	muli	r17,zero,901
 440d608:	0440d97c 	xorhi	r17,zero,869
 440d60c:	0440e164 	muli	r17,zero,901
 440d610:	0440e164 	muli	r17,zero,901
 440d614:	0440e164 	muli	r17,zero,901
 440d618:	0440e164 	muli	r17,zero,901
 440d61c:	0440da1c 	xori	r17,zero,872
 440d620:	0440e164 	muli	r17,zero,901
 440d624:	0440e164 	muli	r17,zero,901
 440d628:	0440da28 	cmpgeui	r17,zero,872
 440d62c:	0440e164 	muli	r17,zero,901
 440d630:	0440e164 	muli	r17,zero,901
 440d634:	0440e164 	muli	r17,zero,901
 440d638:	0440e164 	muli	r17,zero,901
 440d63c:	0440e164 	muli	r17,zero,901
 440d640:	0440dea0 	cmpeqi	r17,zero,890
 440d644:	0440e164 	muli	r17,zero,901
 440d648:	0440e164 	muli	r17,zero,901
 440d64c:	0440df00 	call	440df0 <__alt_mem_sdram-0x3bbf210>
 440d650:	0440e164 	muli	r17,zero,901
 440d654:	0440e164 	muli	r17,zero,901
 440d658:	0440e164 	muli	r17,zero,901
 440d65c:	0440e164 	muli	r17,zero,901
 440d660:	0440e164 	muli	r17,zero,901
 440d664:	0440e164 	muli	r17,zero,901
 440d668:	0440e164 	muli	r17,zero,901
 440d66c:	0440e164 	muli	r17,zero,901
 440d670:	0440e164 	muli	r17,zero,901
 440d674:	0440e164 	muli	r17,zero,901
 440d678:	0440e110 	cmplti	r17,zero,900
 440d67c:	0440e0b0 	cmpltui	r17,zero,898
 440d680:	0440d97c 	xorhi	r17,zero,869
 440d684:	0440d97c 	xorhi	r17,zero,869
 440d688:	0440d97c 	xorhi	r17,zero,869
 440d68c:	0440e0c0 	call	440e0c <__alt_mem_sdram-0x3bbf1f4>
 440d690:	0440e0b0 	cmpltui	r17,zero,898
 440d694:	0440e164 	muli	r17,zero,901
 440d698:	0440e164 	muli	r17,zero,901
 440d69c:	0440e0cc 	andi	r17,zero,899
 440d6a0:	0440e164 	muli	r17,zero,901
 440d6a4:	0440e0dc 	xori	r17,zero,899
 440d6a8:	0440dfb0 	cmpltui	r17,zero,894
 440d6ac:	0440d6ec 	andhi	r17,zero,859
 440d6b0:	0440dfd0 	cmplti	r17,zero,895
 440d6b4:	0440e164 	muli	r17,zero,901
 440d6b8:	0440dfdc 	xori	r17,zero,895
 440d6bc:	0440e164 	muli	r17,zero,901
 440d6c0:	0440e038 	rdprs	r17,zero,896
 440d6c4:	0440e164 	muli	r17,zero,901
 440d6c8:	0440e164 	muli	r17,zero,901
 440d6cc:	0440e048 	cmpgei	r17,zero,897
 440d6d0:	d9003117 	ldw	r4,196(sp)
 440d6d4:	d8802d15 	stw	r2,180(sp)
 440d6d8:	0109c83a 	sub	r4,zero,r4
 440d6dc:	d9003115 	stw	r4,196(sp)
 440d6e0:	94800114 	ori	r18,r18,4
 440d6e4:	ac400007 	ldb	r17,0(r21)
 440d6e8:	003f9706 	br	440d548 <__reset+0xfb409548>
 440d6ec:	00800c04 	movi	r2,48
 440d6f0:	d9002d17 	ldw	r4,180(sp)
 440d6f4:	d9402917 	ldw	r5,164(sp)
 440d6f8:	d8802705 	stb	r2,156(sp)
 440d6fc:	00801e04 	movi	r2,120
 440d700:	d8802745 	stb	r2,157(sp)
 440d704:	d8002785 	stb	zero,158(sp)
 440d708:	20c00104 	addi	r3,r4,4
 440d70c:	24c00017 	ldw	r19,0(r4)
 440d710:	002d883a 	mov	r22,zero
 440d714:	90800094 	ori	r2,r18,2
 440d718:	28029a16 	blt	r5,zero,440e184 <___vfprintf_internal_r+0xdc0>
 440d71c:	00bfdfc4 	movi	r2,-129
 440d720:	90a4703a 	and	r18,r18,r2
 440d724:	d8c02d15 	stw	r3,180(sp)
 440d728:	94800094 	ori	r18,r18,2
 440d72c:	9802871e 	bne	r19,zero,440e14c <___vfprintf_internal_r+0xd88>
 440d730:	008110f4 	movhi	r2,1091
 440d734:	10932f04 	addi	r2,r2,19644
 440d738:	d8803915 	stw	r2,228(sp)
 440d73c:	04401e04 	movi	r17,120
 440d740:	d8802917 	ldw	r2,164(sp)
 440d744:	0039883a 	mov	fp,zero
 440d748:	1001e926 	beq	r2,zero,440def0 <___vfprintf_internal_r+0xb2c>
 440d74c:	0027883a 	mov	r19,zero
 440d750:	002d883a 	mov	r22,zero
 440d754:	00020506 	br	440df6c <___vfprintf_internal_r+0xba8>
 440d758:	d9002c17 	ldw	r4,176(sp)
 440d75c:	b80b883a 	mov	r5,r23
 440d760:	440f7b80 	call	440f7b8 <__swsetup_r>
 440d764:	1005ac1e 	bne	r2,zero,440ee18 <___vfprintf_internal_r+0x1a54>
 440d768:	b880030b 	ldhu	r2,12(r23)
 440d76c:	00c00284 	movi	r3,10
 440d770:	1080068c 	andi	r2,r2,26
 440d774:	10ff3c1e 	bne	r2,r3,440d468 <__reset+0xfb409468>
 440d778:	b880038f 	ldh	r2,14(r23)
 440d77c:	103f3a16 	blt	r2,zero,440d468 <__reset+0xfb409468>
 440d780:	d9c02d17 	ldw	r7,180(sp)
 440d784:	d9002c17 	ldw	r4,176(sp)
 440d788:	a80d883a 	mov	r6,r21
 440d78c:	b80b883a 	mov	r5,r23
 440d790:	440f5d80 	call	440f5d8 <__sbprintf>
 440d794:	00001106 	br	440d7dc <___vfprintf_internal_r+0x418>
 440d798:	d9002c17 	ldw	r4,176(sp)
 440d79c:	d9801e04 	addi	r6,sp,120
 440d7a0:	b80b883a 	mov	r5,r23
 440d7a4:	44153ac0 	call	44153ac <__sprint_r>
 440d7a8:	1000081e 	bne	r2,zero,440d7cc <___vfprintf_internal_r+0x408>
 440d7ac:	da000404 	addi	r8,sp,16
 440d7b0:	003f5306 	br	440d500 <__reset+0xfb409500>
 440d7b4:	d8802017 	ldw	r2,128(sp)
 440d7b8:	10000426 	beq	r2,zero,440d7cc <___vfprintf_internal_r+0x408>
 440d7bc:	d9002c17 	ldw	r4,176(sp)
 440d7c0:	d9801e04 	addi	r6,sp,120
 440d7c4:	b80b883a 	mov	r5,r23
 440d7c8:	44153ac0 	call	44153ac <__sprint_r>
 440d7cc:	b880030b 	ldhu	r2,12(r23)
 440d7d0:	1080100c 	andi	r2,r2,64
 440d7d4:	1005901e 	bne	r2,zero,440ee18 <___vfprintf_internal_r+0x1a54>
 440d7d8:	d8802f17 	ldw	r2,188(sp)
 440d7dc:	dfc04717 	ldw	ra,284(sp)
 440d7e0:	df004617 	ldw	fp,280(sp)
 440d7e4:	ddc04517 	ldw	r23,276(sp)
 440d7e8:	dd804417 	ldw	r22,272(sp)
 440d7ec:	dd404317 	ldw	r21,268(sp)
 440d7f0:	dd004217 	ldw	r20,264(sp)
 440d7f4:	dcc04117 	ldw	r19,260(sp)
 440d7f8:	dc804017 	ldw	r18,256(sp)
 440d7fc:	dc403f17 	ldw	r17,252(sp)
 440d800:	dc003e17 	ldw	r16,248(sp)
 440d804:	dec04804 	addi	sp,sp,288
 440d808:	f800283a 	ret
 440d80c:	d9002c17 	ldw	r4,176(sp)
 440d810:	441178c0 	call	441178c <__sinit>
 440d814:	003f0406 	br	440d428 <__reset+0xfb409428>
 440d818:	d8802d17 	ldw	r2,180(sp)
 440d81c:	d9002d17 	ldw	r4,180(sp)
 440d820:	10800017 	ldw	r2,0(r2)
 440d824:	d8803115 	stw	r2,196(sp)
 440d828:	20800104 	addi	r2,r4,4
 440d82c:	d9003117 	ldw	r4,196(sp)
 440d830:	203fa716 	blt	r4,zero,440d6d0 <__reset+0xfb4096d0>
 440d834:	d8802d15 	stw	r2,180(sp)
 440d838:	ac400007 	ldb	r17,0(r21)
 440d83c:	003f4206 	br	440d548 <__reset+0xfb409548>
 440d840:	ac400007 	ldb	r17,0(r21)
 440d844:	aac00044 	addi	r11,r21,1
 440d848:	8a872826 	beq	r17,r10,440f4ec <___vfprintf_internal_r+0x2128>
 440d84c:	88bff404 	addi	r2,r17,-48
 440d850:	0009883a 	mov	r4,zero
 440d854:	30867d36 	bltu	r6,r2,440f24c <___vfprintf_internal_r+0x1e88>
 440d858:	5c400007 	ldb	r17,0(r11)
 440d85c:	210002a4 	muli	r4,r4,10
 440d860:	5d400044 	addi	r21,r11,1
 440d864:	a817883a 	mov	r11,r21
 440d868:	2089883a 	add	r4,r4,r2
 440d86c:	88bff404 	addi	r2,r17,-48
 440d870:	30bff92e 	bgeu	r6,r2,440d858 <__reset+0xfb409858>
 440d874:	2005c916 	blt	r4,zero,440ef9c <___vfprintf_internal_r+0x1bd8>
 440d878:	d9002915 	stw	r4,164(sp)
 440d87c:	003f3306 	br	440d54c <__reset+0xfb40954c>
 440d880:	94802014 	ori	r18,r18,128
 440d884:	ac400007 	ldb	r17,0(r21)
 440d888:	003f2f06 	br	440d548 <__reset+0xfb409548>
 440d88c:	a809883a 	mov	r4,r21
 440d890:	d8003115 	stw	zero,196(sp)
 440d894:	88bff404 	addi	r2,r17,-48
 440d898:	0017883a 	mov	r11,zero
 440d89c:	24400007 	ldb	r17,0(r4)
 440d8a0:	5ac002a4 	muli	r11,r11,10
 440d8a4:	ad400044 	addi	r21,r21,1
 440d8a8:	a809883a 	mov	r4,r21
 440d8ac:	12d7883a 	add	r11,r2,r11
 440d8b0:	88bff404 	addi	r2,r17,-48
 440d8b4:	30bff92e 	bgeu	r6,r2,440d89c <__reset+0xfb40989c>
 440d8b8:	dac03115 	stw	r11,196(sp)
 440d8bc:	003f2306 	br	440d54c <__reset+0xfb40954c>
 440d8c0:	18c03fcc 	andi	r3,r3,255
 440d8c4:	18072b1e 	bne	r3,zero,440f574 <___vfprintf_internal_r+0x21b0>
 440d8c8:	94800414 	ori	r18,r18,16
 440d8cc:	9080080c 	andi	r2,r18,32
 440d8d0:	10037b26 	beq	r2,zero,440e6c0 <___vfprintf_internal_r+0x12fc>
 440d8d4:	d9402d17 	ldw	r5,180(sp)
 440d8d8:	28800117 	ldw	r2,4(r5)
 440d8dc:	2cc00017 	ldw	r19,0(r5)
 440d8e0:	29400204 	addi	r5,r5,8
 440d8e4:	d9402d15 	stw	r5,180(sp)
 440d8e8:	102d883a 	mov	r22,r2
 440d8ec:	10044b16 	blt	r2,zero,440ea1c <___vfprintf_internal_r+0x1658>
 440d8f0:	d9402917 	ldw	r5,164(sp)
 440d8f4:	df002783 	ldbu	fp,158(sp)
 440d8f8:	2803bc16 	blt	r5,zero,440e7ec <___vfprintf_internal_r+0x1428>
 440d8fc:	00ffdfc4 	movi	r3,-129
 440d900:	9d84b03a 	or	r2,r19,r22
 440d904:	90e4703a 	and	r18,r18,r3
 440d908:	10017726 	beq	r2,zero,440dee8 <___vfprintf_internal_r+0xb24>
 440d90c:	b0038326 	beq	r22,zero,440e71c <___vfprintf_internal_r+0x1358>
 440d910:	dc402a15 	stw	r17,168(sp)
 440d914:	dc001e04 	addi	r16,sp,120
 440d918:	b023883a 	mov	r17,r22
 440d91c:	402d883a 	mov	r22,r8
 440d920:	9809883a 	mov	r4,r19
 440d924:	880b883a 	mov	r5,r17
 440d928:	01800284 	movi	r6,10
 440d92c:	000f883a 	mov	r7,zero
 440d930:	44177a40 	call	44177a4 <__umoddi3>
 440d934:	10800c04 	addi	r2,r2,48
 440d938:	843fffc4 	addi	r16,r16,-1
 440d93c:	9809883a 	mov	r4,r19
 440d940:	880b883a 	mov	r5,r17
 440d944:	80800005 	stb	r2,0(r16)
 440d948:	01800284 	movi	r6,10
 440d94c:	000f883a 	mov	r7,zero
 440d950:	441722c0 	call	441722c <__udivdi3>
 440d954:	1027883a 	mov	r19,r2
 440d958:	10c4b03a 	or	r2,r2,r3
 440d95c:	1823883a 	mov	r17,r3
 440d960:	103fef1e 	bne	r2,zero,440d920 <__reset+0xfb409920>
 440d964:	d8c02817 	ldw	r3,160(sp)
 440d968:	dc402a17 	ldw	r17,168(sp)
 440d96c:	b011883a 	mov	r8,r22
 440d970:	1c07c83a 	sub	r3,r3,r16
 440d974:	d8c02e15 	stw	r3,184(sp)
 440d978:	00005906 	br	440dae0 <___vfprintf_internal_r+0x71c>
 440d97c:	18c03fcc 	andi	r3,r3,255
 440d980:	1806fa1e 	bne	r3,zero,440f56c <___vfprintf_internal_r+0x21a8>
 440d984:	9080020c 	andi	r2,r18,8
 440d988:	10048a26 	beq	r2,zero,440ebb4 <___vfprintf_internal_r+0x17f0>
 440d98c:	d8c02d17 	ldw	r3,180(sp)
 440d990:	d9002d17 	ldw	r4,180(sp)
 440d994:	d9402d17 	ldw	r5,180(sp)
 440d998:	18c00017 	ldw	r3,0(r3)
 440d99c:	21000117 	ldw	r4,4(r4)
 440d9a0:	29400204 	addi	r5,r5,8
 440d9a4:	d8c03615 	stw	r3,216(sp)
 440d9a8:	d9003815 	stw	r4,224(sp)
 440d9ac:	d9402d15 	stw	r5,180(sp)
 440d9b0:	d9003617 	ldw	r4,216(sp)
 440d9b4:	d9403817 	ldw	r5,224(sp)
 440d9b8:	da003d15 	stw	r8,244(sp)
 440d9bc:	04000044 	movi	r16,1
 440d9c0:	4407d2c0 	call	4407d2c <__fpclassifyd>
 440d9c4:	da003d17 	ldw	r8,244(sp)
 440d9c8:	14041f1e 	bne	r2,r16,440ea48 <___vfprintf_internal_r+0x1684>
 440d9cc:	d9003617 	ldw	r4,216(sp)
 440d9d0:	d9403817 	ldw	r5,224(sp)
 440d9d4:	000d883a 	mov	r6,zero
 440d9d8:	000f883a 	mov	r7,zero
 440d9dc:	44090f00 	call	44090f0 <__ledf2>
 440d9e0:	da003d17 	ldw	r8,244(sp)
 440d9e4:	1005be16 	blt	r2,zero,440f0e0 <___vfprintf_internal_r+0x1d1c>
 440d9e8:	df002783 	ldbu	fp,158(sp)
 440d9ec:	008011c4 	movi	r2,71
 440d9f0:	1445330e 	bge	r2,r17,440eec0 <___vfprintf_internal_r+0x1afc>
 440d9f4:	040110f4 	movhi	r16,1091
 440d9f8:	84132704 	addi	r16,r16,19612
 440d9fc:	00c000c4 	movi	r3,3
 440da00:	00bfdfc4 	movi	r2,-129
 440da04:	d8c02a15 	stw	r3,168(sp)
 440da08:	90a4703a 	and	r18,r18,r2
 440da0c:	d8c02e15 	stw	r3,184(sp)
 440da10:	d8002915 	stw	zero,164(sp)
 440da14:	d8003215 	stw	zero,200(sp)
 440da18:	00003706 	br	440daf8 <___vfprintf_internal_r+0x734>
 440da1c:	94800214 	ori	r18,r18,8
 440da20:	ac400007 	ldb	r17,0(r21)
 440da24:	003ec806 	br	440d548 <__reset+0xfb409548>
 440da28:	18c03fcc 	andi	r3,r3,255
 440da2c:	1806db1e 	bne	r3,zero,440f59c <___vfprintf_internal_r+0x21d8>
 440da30:	94800414 	ori	r18,r18,16
 440da34:	9080080c 	andi	r2,r18,32
 440da38:	1002d826 	beq	r2,zero,440e59c <___vfprintf_internal_r+0x11d8>
 440da3c:	d9402d17 	ldw	r5,180(sp)
 440da40:	d8c02917 	ldw	r3,164(sp)
 440da44:	d8002785 	stb	zero,158(sp)
 440da48:	28800204 	addi	r2,r5,8
 440da4c:	2cc00017 	ldw	r19,0(r5)
 440da50:	2d800117 	ldw	r22,4(r5)
 440da54:	18048f16 	blt	r3,zero,440ec94 <___vfprintf_internal_r+0x18d0>
 440da58:	013fdfc4 	movi	r4,-129
 440da5c:	9d86b03a 	or	r3,r19,r22
 440da60:	d8802d15 	stw	r2,180(sp)
 440da64:	9124703a 	and	r18,r18,r4
 440da68:	1802d91e 	bne	r3,zero,440e5d0 <___vfprintf_internal_r+0x120c>
 440da6c:	d8c02917 	ldw	r3,164(sp)
 440da70:	0039883a 	mov	fp,zero
 440da74:	1805c326 	beq	r3,zero,440f184 <___vfprintf_internal_r+0x1dc0>
 440da78:	0027883a 	mov	r19,zero
 440da7c:	002d883a 	mov	r22,zero
 440da80:	dc001e04 	addi	r16,sp,120
 440da84:	9806d0fa 	srli	r3,r19,3
 440da88:	b008977a 	slli	r4,r22,29
 440da8c:	b02cd0fa 	srli	r22,r22,3
 440da90:	9cc001cc 	andi	r19,r19,7
 440da94:	98800c04 	addi	r2,r19,48
 440da98:	843fffc4 	addi	r16,r16,-1
 440da9c:	20e6b03a 	or	r19,r4,r3
 440daa0:	80800005 	stb	r2,0(r16)
 440daa4:	9d86b03a 	or	r3,r19,r22
 440daa8:	183ff61e 	bne	r3,zero,440da84 <__reset+0xfb409a84>
 440daac:	90c0004c 	andi	r3,r18,1
 440dab0:	18013b26 	beq	r3,zero,440dfa0 <___vfprintf_internal_r+0xbdc>
 440dab4:	10803fcc 	andi	r2,r2,255
 440dab8:	1080201c 	xori	r2,r2,128
 440dabc:	10bfe004 	addi	r2,r2,-128
 440dac0:	00c00c04 	movi	r3,48
 440dac4:	10c13626 	beq	r2,r3,440dfa0 <___vfprintf_internal_r+0xbdc>
 440dac8:	80ffffc5 	stb	r3,-1(r16)
 440dacc:	d8c02817 	ldw	r3,160(sp)
 440dad0:	80bfffc4 	addi	r2,r16,-1
 440dad4:	1021883a 	mov	r16,r2
 440dad8:	1887c83a 	sub	r3,r3,r2
 440dadc:	d8c02e15 	stw	r3,184(sp)
 440dae0:	d8802e17 	ldw	r2,184(sp)
 440dae4:	d9002917 	ldw	r4,164(sp)
 440dae8:	1100010e 	bge	r2,r4,440daf0 <___vfprintf_internal_r+0x72c>
 440daec:	2005883a 	mov	r2,r4
 440daf0:	d8802a15 	stw	r2,168(sp)
 440daf4:	d8003215 	stw	zero,200(sp)
 440daf8:	e7003fcc 	andi	fp,fp,255
 440dafc:	e700201c 	xori	fp,fp,128
 440db00:	e73fe004 	addi	fp,fp,-128
 440db04:	e0000326 	beq	fp,zero,440db14 <___vfprintf_internal_r+0x750>
 440db08:	d8c02a17 	ldw	r3,168(sp)
 440db0c:	18c00044 	addi	r3,r3,1
 440db10:	d8c02a15 	stw	r3,168(sp)
 440db14:	90c0008c 	andi	r3,r18,2
 440db18:	d8c02b15 	stw	r3,172(sp)
 440db1c:	18000326 	beq	r3,zero,440db2c <___vfprintf_internal_r+0x768>
 440db20:	d8c02a17 	ldw	r3,168(sp)
 440db24:	18c00084 	addi	r3,r3,2
 440db28:	d8c02a15 	stw	r3,168(sp)
 440db2c:	90c0210c 	andi	r3,r18,132
 440db30:	d8c03015 	stw	r3,192(sp)
 440db34:	1801a31e 	bne	r3,zero,440e1c4 <___vfprintf_internal_r+0xe00>
 440db38:	d9003117 	ldw	r4,196(sp)
 440db3c:	d8c02a17 	ldw	r3,168(sp)
 440db40:	20e7c83a 	sub	r19,r4,r3
 440db44:	04c19f0e 	bge	zero,r19,440e1c4 <___vfprintf_internal_r+0xe00>
 440db48:	02400404 	movi	r9,16
 440db4c:	d8c02017 	ldw	r3,128(sp)
 440db50:	d8801f17 	ldw	r2,124(sp)
 440db54:	4cc50d0e 	bge	r9,r19,440ef8c <___vfprintf_internal_r+0x1bc8>
 440db58:	014110f4 	movhi	r5,1091
 440db5c:	29534284 	addi	r5,r5,19722
 440db60:	dc403b15 	stw	r17,236(sp)
 440db64:	d9403515 	stw	r5,212(sp)
 440db68:	9823883a 	mov	r17,r19
 440db6c:	482d883a 	mov	r22,r9
 440db70:	9027883a 	mov	r19,r18
 440db74:	070001c4 	movi	fp,7
 440db78:	8025883a 	mov	r18,r16
 440db7c:	dc002c17 	ldw	r16,176(sp)
 440db80:	00000306 	br	440db90 <___vfprintf_internal_r+0x7cc>
 440db84:	8c7ffc04 	addi	r17,r17,-16
 440db88:	42000204 	addi	r8,r8,8
 440db8c:	b440130e 	bge	r22,r17,440dbdc <___vfprintf_internal_r+0x818>
 440db90:	010110f4 	movhi	r4,1091
 440db94:	18c00404 	addi	r3,r3,16
 440db98:	10800044 	addi	r2,r2,1
 440db9c:	21134284 	addi	r4,r4,19722
 440dba0:	41000015 	stw	r4,0(r8)
 440dba4:	45800115 	stw	r22,4(r8)
 440dba8:	d8c02015 	stw	r3,128(sp)
 440dbac:	d8801f15 	stw	r2,124(sp)
 440dbb0:	e0bff40e 	bge	fp,r2,440db84 <__reset+0xfb409b84>
 440dbb4:	d9801e04 	addi	r6,sp,120
 440dbb8:	b80b883a 	mov	r5,r23
 440dbbc:	8009883a 	mov	r4,r16
 440dbc0:	44153ac0 	call	44153ac <__sprint_r>
 440dbc4:	103f011e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440dbc8:	8c7ffc04 	addi	r17,r17,-16
 440dbcc:	d8c02017 	ldw	r3,128(sp)
 440dbd0:	d8801f17 	ldw	r2,124(sp)
 440dbd4:	da000404 	addi	r8,sp,16
 440dbd8:	b47fed16 	blt	r22,r17,440db90 <__reset+0xfb409b90>
 440dbdc:	9021883a 	mov	r16,r18
 440dbe0:	9825883a 	mov	r18,r19
 440dbe4:	8827883a 	mov	r19,r17
 440dbe8:	dc403b17 	ldw	r17,236(sp)
 440dbec:	d9403517 	ldw	r5,212(sp)
 440dbf0:	98c7883a 	add	r3,r19,r3
 440dbf4:	10800044 	addi	r2,r2,1
 440dbf8:	41400015 	stw	r5,0(r8)
 440dbfc:	44c00115 	stw	r19,4(r8)
 440dc00:	d8c02015 	stw	r3,128(sp)
 440dc04:	d8801f15 	stw	r2,124(sp)
 440dc08:	010001c4 	movi	r4,7
 440dc0c:	2082a316 	blt	r4,r2,440e69c <___vfprintf_internal_r+0x12d8>
 440dc10:	df002787 	ldb	fp,158(sp)
 440dc14:	42000204 	addi	r8,r8,8
 440dc18:	e0000c26 	beq	fp,zero,440dc4c <___vfprintf_internal_r+0x888>
 440dc1c:	d8801f17 	ldw	r2,124(sp)
 440dc20:	d9002784 	addi	r4,sp,158
 440dc24:	18c00044 	addi	r3,r3,1
 440dc28:	10800044 	addi	r2,r2,1
 440dc2c:	41000015 	stw	r4,0(r8)
 440dc30:	01000044 	movi	r4,1
 440dc34:	41000115 	stw	r4,4(r8)
 440dc38:	d8c02015 	stw	r3,128(sp)
 440dc3c:	d8801f15 	stw	r2,124(sp)
 440dc40:	010001c4 	movi	r4,7
 440dc44:	20823c16 	blt	r4,r2,440e538 <___vfprintf_internal_r+0x1174>
 440dc48:	42000204 	addi	r8,r8,8
 440dc4c:	d8802b17 	ldw	r2,172(sp)
 440dc50:	10000c26 	beq	r2,zero,440dc84 <___vfprintf_internal_r+0x8c0>
 440dc54:	d8801f17 	ldw	r2,124(sp)
 440dc58:	d9002704 	addi	r4,sp,156
 440dc5c:	18c00084 	addi	r3,r3,2
 440dc60:	10800044 	addi	r2,r2,1
 440dc64:	41000015 	stw	r4,0(r8)
 440dc68:	01000084 	movi	r4,2
 440dc6c:	41000115 	stw	r4,4(r8)
 440dc70:	d8c02015 	stw	r3,128(sp)
 440dc74:	d8801f15 	stw	r2,124(sp)
 440dc78:	010001c4 	movi	r4,7
 440dc7c:	20823616 	blt	r4,r2,440e558 <___vfprintf_internal_r+0x1194>
 440dc80:	42000204 	addi	r8,r8,8
 440dc84:	d9003017 	ldw	r4,192(sp)
 440dc88:	00802004 	movi	r2,128
 440dc8c:	20819926 	beq	r4,r2,440e2f4 <___vfprintf_internal_r+0xf30>
 440dc90:	d9402917 	ldw	r5,164(sp)
 440dc94:	d8802e17 	ldw	r2,184(sp)
 440dc98:	28adc83a 	sub	r22,r5,r2
 440dc9c:	0580310e 	bge	zero,r22,440dd64 <___vfprintf_internal_r+0x9a0>
 440dca0:	07000404 	movi	fp,16
 440dca4:	d8801f17 	ldw	r2,124(sp)
 440dca8:	e584140e 	bge	fp,r22,440ecfc <___vfprintf_internal_r+0x1938>
 440dcac:	014110f4 	movhi	r5,1091
 440dcb0:	29533e84 	addi	r5,r5,19706
 440dcb4:	dc402915 	stw	r17,164(sp)
 440dcb8:	d9402b15 	stw	r5,172(sp)
 440dcbc:	b023883a 	mov	r17,r22
 440dcc0:	04c001c4 	movi	r19,7
 440dcc4:	a82d883a 	mov	r22,r21
 440dcc8:	902b883a 	mov	r21,r18
 440dccc:	8025883a 	mov	r18,r16
 440dcd0:	dc002c17 	ldw	r16,176(sp)
 440dcd4:	00000306 	br	440dce4 <___vfprintf_internal_r+0x920>
 440dcd8:	8c7ffc04 	addi	r17,r17,-16
 440dcdc:	42000204 	addi	r8,r8,8
 440dce0:	e440110e 	bge	fp,r17,440dd28 <___vfprintf_internal_r+0x964>
 440dce4:	18c00404 	addi	r3,r3,16
 440dce8:	10800044 	addi	r2,r2,1
 440dcec:	45000015 	stw	r20,0(r8)
 440dcf0:	47000115 	stw	fp,4(r8)
 440dcf4:	d8c02015 	stw	r3,128(sp)
 440dcf8:	d8801f15 	stw	r2,124(sp)
 440dcfc:	98bff60e 	bge	r19,r2,440dcd8 <__reset+0xfb409cd8>
 440dd00:	d9801e04 	addi	r6,sp,120
 440dd04:	b80b883a 	mov	r5,r23
 440dd08:	8009883a 	mov	r4,r16
 440dd0c:	44153ac0 	call	44153ac <__sprint_r>
 440dd10:	103eae1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440dd14:	8c7ffc04 	addi	r17,r17,-16
 440dd18:	d8c02017 	ldw	r3,128(sp)
 440dd1c:	d8801f17 	ldw	r2,124(sp)
 440dd20:	da000404 	addi	r8,sp,16
 440dd24:	e47fef16 	blt	fp,r17,440dce4 <__reset+0xfb409ce4>
 440dd28:	9021883a 	mov	r16,r18
 440dd2c:	a825883a 	mov	r18,r21
 440dd30:	b02b883a 	mov	r21,r22
 440dd34:	882d883a 	mov	r22,r17
 440dd38:	dc402917 	ldw	r17,164(sp)
 440dd3c:	d9002b17 	ldw	r4,172(sp)
 440dd40:	1d87883a 	add	r3,r3,r22
 440dd44:	10800044 	addi	r2,r2,1
 440dd48:	41000015 	stw	r4,0(r8)
 440dd4c:	45800115 	stw	r22,4(r8)
 440dd50:	d8c02015 	stw	r3,128(sp)
 440dd54:	d8801f15 	stw	r2,124(sp)
 440dd58:	010001c4 	movi	r4,7
 440dd5c:	2081ee16 	blt	r4,r2,440e518 <___vfprintf_internal_r+0x1154>
 440dd60:	42000204 	addi	r8,r8,8
 440dd64:	9080400c 	andi	r2,r18,256
 440dd68:	1001181e 	bne	r2,zero,440e1cc <___vfprintf_internal_r+0xe08>
 440dd6c:	d9402e17 	ldw	r5,184(sp)
 440dd70:	d8801f17 	ldw	r2,124(sp)
 440dd74:	44000015 	stw	r16,0(r8)
 440dd78:	1947883a 	add	r3,r3,r5
 440dd7c:	10800044 	addi	r2,r2,1
 440dd80:	41400115 	stw	r5,4(r8)
 440dd84:	d8c02015 	stw	r3,128(sp)
 440dd88:	d8801f15 	stw	r2,124(sp)
 440dd8c:	010001c4 	movi	r4,7
 440dd90:	2081d316 	blt	r4,r2,440e4e0 <___vfprintf_internal_r+0x111c>
 440dd94:	42000204 	addi	r8,r8,8
 440dd98:	9480010c 	andi	r18,r18,4
 440dd9c:	90003226 	beq	r18,zero,440de68 <___vfprintf_internal_r+0xaa4>
 440dda0:	d9403117 	ldw	r5,196(sp)
 440dda4:	d8802a17 	ldw	r2,168(sp)
 440dda8:	28a1c83a 	sub	r16,r5,r2
 440ddac:	04002e0e 	bge	zero,r16,440de68 <___vfprintf_internal_r+0xaa4>
 440ddb0:	04400404 	movi	r17,16
 440ddb4:	d8801f17 	ldw	r2,124(sp)
 440ddb8:	8c04a20e 	bge	r17,r16,440f044 <___vfprintf_internal_r+0x1c80>
 440ddbc:	014110f4 	movhi	r5,1091
 440ddc0:	29534284 	addi	r5,r5,19722
 440ddc4:	d9403515 	stw	r5,212(sp)
 440ddc8:	048001c4 	movi	r18,7
 440ddcc:	dcc02c17 	ldw	r19,176(sp)
 440ddd0:	00000306 	br	440dde0 <___vfprintf_internal_r+0xa1c>
 440ddd4:	843ffc04 	addi	r16,r16,-16
 440ddd8:	42000204 	addi	r8,r8,8
 440dddc:	8c00130e 	bge	r17,r16,440de2c <___vfprintf_internal_r+0xa68>
 440dde0:	010110f4 	movhi	r4,1091
 440dde4:	18c00404 	addi	r3,r3,16
 440dde8:	10800044 	addi	r2,r2,1
 440ddec:	21134284 	addi	r4,r4,19722
 440ddf0:	41000015 	stw	r4,0(r8)
 440ddf4:	44400115 	stw	r17,4(r8)
 440ddf8:	d8c02015 	stw	r3,128(sp)
 440ddfc:	d8801f15 	stw	r2,124(sp)
 440de00:	90bff40e 	bge	r18,r2,440ddd4 <__reset+0xfb409dd4>
 440de04:	d9801e04 	addi	r6,sp,120
 440de08:	b80b883a 	mov	r5,r23
 440de0c:	9809883a 	mov	r4,r19
 440de10:	44153ac0 	call	44153ac <__sprint_r>
 440de14:	103e6d1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440de18:	843ffc04 	addi	r16,r16,-16
 440de1c:	d8c02017 	ldw	r3,128(sp)
 440de20:	d8801f17 	ldw	r2,124(sp)
 440de24:	da000404 	addi	r8,sp,16
 440de28:	8c3fed16 	blt	r17,r16,440dde0 <__reset+0xfb409de0>
 440de2c:	d9403517 	ldw	r5,212(sp)
 440de30:	1c07883a 	add	r3,r3,r16
 440de34:	10800044 	addi	r2,r2,1
 440de38:	41400015 	stw	r5,0(r8)
 440de3c:	44000115 	stw	r16,4(r8)
 440de40:	d8c02015 	stw	r3,128(sp)
 440de44:	d8801f15 	stw	r2,124(sp)
 440de48:	010001c4 	movi	r4,7
 440de4c:	2080060e 	bge	r4,r2,440de68 <___vfprintf_internal_r+0xaa4>
 440de50:	d9002c17 	ldw	r4,176(sp)
 440de54:	d9801e04 	addi	r6,sp,120
 440de58:	b80b883a 	mov	r5,r23
 440de5c:	44153ac0 	call	44153ac <__sprint_r>
 440de60:	103e5a1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440de64:	d8c02017 	ldw	r3,128(sp)
 440de68:	d8803117 	ldw	r2,196(sp)
 440de6c:	d9002a17 	ldw	r4,168(sp)
 440de70:	1100010e 	bge	r2,r4,440de78 <___vfprintf_internal_r+0xab4>
 440de74:	2005883a 	mov	r2,r4
 440de78:	d9402f17 	ldw	r5,188(sp)
 440de7c:	288b883a 	add	r5,r5,r2
 440de80:	d9402f15 	stw	r5,188(sp)
 440de84:	18019e1e 	bne	r3,zero,440e500 <___vfprintf_internal_r+0x113c>
 440de88:	a8800007 	ldb	r2,0(r21)
 440de8c:	d8001f15 	stw	zero,124(sp)
 440de90:	da000404 	addi	r8,sp,16
 440de94:	103d851e 	bne	r2,zero,440d4ac <__reset+0xfb4094ac>
 440de98:	a821883a 	mov	r16,r21
 440de9c:	003d9b06 	br	440d50c <__reset+0xfb40950c>
 440dea0:	18c03fcc 	andi	r3,r3,255
 440dea4:	1805c11e 	bne	r3,zero,440f5ac <___vfprintf_internal_r+0x21e8>
 440dea8:	94800414 	ori	r18,r18,16
 440deac:	9080080c 	andi	r2,r18,32
 440deb0:	10020c26 	beq	r2,zero,440e6e4 <___vfprintf_internal_r+0x1320>
 440deb4:	d8802d17 	ldw	r2,180(sp)
 440deb8:	d9002917 	ldw	r4,164(sp)
 440debc:	d8002785 	stb	zero,158(sp)
 440dec0:	10c00204 	addi	r3,r2,8
 440dec4:	14c00017 	ldw	r19,0(r2)
 440dec8:	15800117 	ldw	r22,4(r2)
 440decc:	20040f16 	blt	r4,zero,440ef0c <___vfprintf_internal_r+0x1b48>
 440ded0:	013fdfc4 	movi	r4,-129
 440ded4:	9d84b03a 	or	r2,r19,r22
 440ded8:	d8c02d15 	stw	r3,180(sp)
 440dedc:	9124703a 	and	r18,r18,r4
 440dee0:	0039883a 	mov	fp,zero
 440dee4:	103e891e 	bne	r2,zero,440d90c <__reset+0xfb40990c>
 440dee8:	d9002917 	ldw	r4,164(sp)
 440deec:	2002c11e 	bne	r4,zero,440e9f4 <___vfprintf_internal_r+0x1630>
 440def0:	d8002915 	stw	zero,164(sp)
 440def4:	d8002e15 	stw	zero,184(sp)
 440def8:	dc001e04 	addi	r16,sp,120
 440defc:	003ef806 	br	440dae0 <__reset+0xfb409ae0>
 440df00:	18c03fcc 	andi	r3,r3,255
 440df04:	18059d1e 	bne	r3,zero,440f57c <___vfprintf_internal_r+0x21b8>
 440df08:	014110f4 	movhi	r5,1091
 440df0c:	29532a04 	addi	r5,r5,19624
 440df10:	d9403915 	stw	r5,228(sp)
 440df14:	9080080c 	andi	r2,r18,32
 440df18:	10005226 	beq	r2,zero,440e064 <___vfprintf_internal_r+0xca0>
 440df1c:	d8802d17 	ldw	r2,180(sp)
 440df20:	14c00017 	ldw	r19,0(r2)
 440df24:	15800117 	ldw	r22,4(r2)
 440df28:	10800204 	addi	r2,r2,8
 440df2c:	d8802d15 	stw	r2,180(sp)
 440df30:	9080004c 	andi	r2,r18,1
 440df34:	10019026 	beq	r2,zero,440e578 <___vfprintf_internal_r+0x11b4>
 440df38:	9d84b03a 	or	r2,r19,r22
 440df3c:	10036926 	beq	r2,zero,440ece4 <___vfprintf_internal_r+0x1920>
 440df40:	d8c02917 	ldw	r3,164(sp)
 440df44:	00800c04 	movi	r2,48
 440df48:	d8802705 	stb	r2,156(sp)
 440df4c:	dc402745 	stb	r17,157(sp)
 440df50:	d8002785 	stb	zero,158(sp)
 440df54:	90800094 	ori	r2,r18,2
 440df58:	18045d16 	blt	r3,zero,440f0d0 <___vfprintf_internal_r+0x1d0c>
 440df5c:	00bfdfc4 	movi	r2,-129
 440df60:	90a4703a 	and	r18,r18,r2
 440df64:	94800094 	ori	r18,r18,2
 440df68:	0039883a 	mov	fp,zero
 440df6c:	d9003917 	ldw	r4,228(sp)
 440df70:	dc001e04 	addi	r16,sp,120
 440df74:	988003cc 	andi	r2,r19,15
 440df78:	b006973a 	slli	r3,r22,28
 440df7c:	2085883a 	add	r2,r4,r2
 440df80:	9826d13a 	srli	r19,r19,4
 440df84:	10800003 	ldbu	r2,0(r2)
 440df88:	b02cd13a 	srli	r22,r22,4
 440df8c:	843fffc4 	addi	r16,r16,-1
 440df90:	1ce6b03a 	or	r19,r3,r19
 440df94:	80800005 	stb	r2,0(r16)
 440df98:	9d84b03a 	or	r2,r19,r22
 440df9c:	103ff51e 	bne	r2,zero,440df74 <__reset+0xfb409f74>
 440dfa0:	d8c02817 	ldw	r3,160(sp)
 440dfa4:	1c07c83a 	sub	r3,r3,r16
 440dfa8:	d8c02e15 	stw	r3,184(sp)
 440dfac:	003ecc06 	br	440dae0 <__reset+0xfb409ae0>
 440dfb0:	18c03fcc 	andi	r3,r3,255
 440dfb4:	183e9f26 	beq	r3,zero,440da34 <__reset+0xfb409a34>
 440dfb8:	d9c02785 	stb	r7,158(sp)
 440dfbc:	003e9d06 	br	440da34 <__reset+0xfb409a34>
 440dfc0:	00c00044 	movi	r3,1
 440dfc4:	01c00ac4 	movi	r7,43
 440dfc8:	ac400007 	ldb	r17,0(r21)
 440dfcc:	003d5e06 	br	440d548 <__reset+0xfb409548>
 440dfd0:	94800814 	ori	r18,r18,32
 440dfd4:	ac400007 	ldb	r17,0(r21)
 440dfd8:	003d5b06 	br	440d548 <__reset+0xfb409548>
 440dfdc:	d8c02d17 	ldw	r3,180(sp)
 440dfe0:	d8002785 	stb	zero,158(sp)
 440dfe4:	1c000017 	ldw	r16,0(r3)
 440dfe8:	1cc00104 	addi	r19,r3,4
 440dfec:	80041926 	beq	r16,zero,440f054 <___vfprintf_internal_r+0x1c90>
 440dff0:	d9002917 	ldw	r4,164(sp)
 440dff4:	2003d016 	blt	r4,zero,440ef38 <___vfprintf_internal_r+0x1b74>
 440dff8:	200d883a 	mov	r6,r4
 440dffc:	000b883a 	mov	r5,zero
 440e000:	8009883a 	mov	r4,r16
 440e004:	da003d15 	stw	r8,244(sp)
 440e008:	44124ec0 	call	44124ec <memchr>
 440e00c:	da003d17 	ldw	r8,244(sp)
 440e010:	10045426 	beq	r2,zero,440f164 <___vfprintf_internal_r+0x1da0>
 440e014:	1405c83a 	sub	r2,r2,r16
 440e018:	d8802e15 	stw	r2,184(sp)
 440e01c:	1003cc16 	blt	r2,zero,440ef50 <___vfprintf_internal_r+0x1b8c>
 440e020:	df002783 	ldbu	fp,158(sp)
 440e024:	d8802a15 	stw	r2,168(sp)
 440e028:	dcc02d15 	stw	r19,180(sp)
 440e02c:	d8002915 	stw	zero,164(sp)
 440e030:	d8003215 	stw	zero,200(sp)
 440e034:	003eb006 	br	440daf8 <__reset+0xfb409af8>
 440e038:	18c03fcc 	andi	r3,r3,255
 440e03c:	183f9b26 	beq	r3,zero,440deac <__reset+0xfb409eac>
 440e040:	d9c02785 	stb	r7,158(sp)
 440e044:	003f9906 	br	440deac <__reset+0xfb409eac>
 440e048:	18c03fcc 	andi	r3,r3,255
 440e04c:	1805551e 	bne	r3,zero,440f5a4 <___vfprintf_internal_r+0x21e0>
 440e050:	014110f4 	movhi	r5,1091
 440e054:	29532f04 	addi	r5,r5,19644
 440e058:	d9403915 	stw	r5,228(sp)
 440e05c:	9080080c 	andi	r2,r18,32
 440e060:	103fae1e 	bne	r2,zero,440df1c <__reset+0xfb409f1c>
 440e064:	9080040c 	andi	r2,r18,16
 440e068:	1002de26 	beq	r2,zero,440ebe4 <___vfprintf_internal_r+0x1820>
 440e06c:	d8c02d17 	ldw	r3,180(sp)
 440e070:	002d883a 	mov	r22,zero
 440e074:	1cc00017 	ldw	r19,0(r3)
 440e078:	18c00104 	addi	r3,r3,4
 440e07c:	d8c02d15 	stw	r3,180(sp)
 440e080:	003fab06 	br	440df30 <__reset+0xfb409f30>
 440e084:	38803fcc 	andi	r2,r7,255
 440e088:	1080201c 	xori	r2,r2,128
 440e08c:	10bfe004 	addi	r2,r2,-128
 440e090:	1002d21e 	bne	r2,zero,440ebdc <___vfprintf_internal_r+0x1818>
 440e094:	00c00044 	movi	r3,1
 440e098:	01c00804 	movi	r7,32
 440e09c:	ac400007 	ldb	r17,0(r21)
 440e0a0:	003d2906 	br	440d548 <__reset+0xfb409548>
 440e0a4:	94800054 	ori	r18,r18,1
 440e0a8:	ac400007 	ldb	r17,0(r21)
 440e0ac:	003d2606 	br	440d548 <__reset+0xfb409548>
 440e0b0:	18c03fcc 	andi	r3,r3,255
 440e0b4:	183e0526 	beq	r3,zero,440d8cc <__reset+0xfb4098cc>
 440e0b8:	d9c02785 	stb	r7,158(sp)
 440e0bc:	003e0306 	br	440d8cc <__reset+0xfb4098cc>
 440e0c0:	94801014 	ori	r18,r18,64
 440e0c4:	ac400007 	ldb	r17,0(r21)
 440e0c8:	003d1f06 	br	440d548 <__reset+0xfb409548>
 440e0cc:	ac400007 	ldb	r17,0(r21)
 440e0d0:	8a438726 	beq	r17,r9,440eef0 <___vfprintf_internal_r+0x1b2c>
 440e0d4:	94800414 	ori	r18,r18,16
 440e0d8:	003d1b06 	br	440d548 <__reset+0xfb409548>
 440e0dc:	18c03fcc 	andi	r3,r3,255
 440e0e0:	1805341e 	bne	r3,zero,440f5b4 <___vfprintf_internal_r+0x21f0>
 440e0e4:	9080080c 	andi	r2,r18,32
 440e0e8:	1002cd26 	beq	r2,zero,440ec20 <___vfprintf_internal_r+0x185c>
 440e0ec:	d9402d17 	ldw	r5,180(sp)
 440e0f0:	d9002f17 	ldw	r4,188(sp)
 440e0f4:	28800017 	ldw	r2,0(r5)
 440e0f8:	2007d7fa 	srai	r3,r4,31
 440e0fc:	29400104 	addi	r5,r5,4
 440e100:	d9402d15 	stw	r5,180(sp)
 440e104:	11000015 	stw	r4,0(r2)
 440e108:	10c00115 	stw	r3,4(r2)
 440e10c:	003ce506 	br	440d4a4 <__reset+0xfb4094a4>
 440e110:	d8c02d17 	ldw	r3,180(sp)
 440e114:	d9002d17 	ldw	r4,180(sp)
 440e118:	d8002785 	stb	zero,158(sp)
 440e11c:	18800017 	ldw	r2,0(r3)
 440e120:	21000104 	addi	r4,r4,4
 440e124:	00c00044 	movi	r3,1
 440e128:	d8c02a15 	stw	r3,168(sp)
 440e12c:	d8801405 	stb	r2,80(sp)
 440e130:	d9002d15 	stw	r4,180(sp)
 440e134:	d8c02e15 	stw	r3,184(sp)
 440e138:	d8002915 	stw	zero,164(sp)
 440e13c:	d8003215 	stw	zero,200(sp)
 440e140:	dc001404 	addi	r16,sp,80
 440e144:	0039883a 	mov	fp,zero
 440e148:	003e7206 	br	440db14 <__reset+0xfb409b14>
 440e14c:	010110f4 	movhi	r4,1091
 440e150:	21132f04 	addi	r4,r4,19644
 440e154:	0039883a 	mov	fp,zero
 440e158:	d9003915 	stw	r4,228(sp)
 440e15c:	04401e04 	movi	r17,120
 440e160:	003f8206 	br	440df6c <__reset+0xfb409f6c>
 440e164:	18c03fcc 	andi	r3,r3,255
 440e168:	1805061e 	bne	r3,zero,440f584 <___vfprintf_internal_r+0x21c0>
 440e16c:	883d9126 	beq	r17,zero,440d7b4 <__reset+0xfb4097b4>
 440e170:	00c00044 	movi	r3,1
 440e174:	d8c02a15 	stw	r3,168(sp)
 440e178:	dc401405 	stb	r17,80(sp)
 440e17c:	d8002785 	stb	zero,158(sp)
 440e180:	003fec06 	br	440e134 <__reset+0xfb40a134>
 440e184:	014110f4 	movhi	r5,1091
 440e188:	29532f04 	addi	r5,r5,19644
 440e18c:	d9403915 	stw	r5,228(sp)
 440e190:	d8c02d15 	stw	r3,180(sp)
 440e194:	1025883a 	mov	r18,r2
 440e198:	04401e04 	movi	r17,120
 440e19c:	9d84b03a 	or	r2,r19,r22
 440e1a0:	1000fc1e 	bne	r2,zero,440e594 <___vfprintf_internal_r+0x11d0>
 440e1a4:	0039883a 	mov	fp,zero
 440e1a8:	00800084 	movi	r2,2
 440e1ac:	10803fcc 	andi	r2,r2,255
 440e1b0:	00c00044 	movi	r3,1
 440e1b4:	10c20f26 	beq	r2,r3,440e9f4 <___vfprintf_internal_r+0x1630>
 440e1b8:	00c00084 	movi	r3,2
 440e1bc:	10fd6326 	beq	r2,r3,440d74c <__reset+0xfb40974c>
 440e1c0:	003e2d06 	br	440da78 <__reset+0xfb409a78>
 440e1c4:	d8c02017 	ldw	r3,128(sp)
 440e1c8:	003e9306 	br	440dc18 <__reset+0xfb409c18>
 440e1cc:	00801944 	movi	r2,101
 440e1d0:	14407e0e 	bge	r2,r17,440e3cc <___vfprintf_internal_r+0x1008>
 440e1d4:	d9003617 	ldw	r4,216(sp)
 440e1d8:	d9403817 	ldw	r5,224(sp)
 440e1dc:	000d883a 	mov	r6,zero
 440e1e0:	000f883a 	mov	r7,zero
 440e1e4:	d8c03c15 	stw	r3,240(sp)
 440e1e8:	da003d15 	stw	r8,244(sp)
 440e1ec:	4417cdc0 	call	4417cdc <__eqdf2>
 440e1f0:	d8c03c17 	ldw	r3,240(sp)
 440e1f4:	da003d17 	ldw	r8,244(sp)
 440e1f8:	1000f71e 	bne	r2,zero,440e5d8 <___vfprintf_internal_r+0x1214>
 440e1fc:	d8801f17 	ldw	r2,124(sp)
 440e200:	010110f4 	movhi	r4,1091
 440e204:	21133604 	addi	r4,r4,19672
 440e208:	18c00044 	addi	r3,r3,1
 440e20c:	10800044 	addi	r2,r2,1
 440e210:	41000015 	stw	r4,0(r8)
 440e214:	01000044 	movi	r4,1
 440e218:	41000115 	stw	r4,4(r8)
 440e21c:	d8c02015 	stw	r3,128(sp)
 440e220:	d8801f15 	stw	r2,124(sp)
 440e224:	010001c4 	movi	r4,7
 440e228:	2082b816 	blt	r4,r2,440ed0c <___vfprintf_internal_r+0x1948>
 440e22c:	42000204 	addi	r8,r8,8
 440e230:	d8802617 	ldw	r2,152(sp)
 440e234:	d9403317 	ldw	r5,204(sp)
 440e238:	11400216 	blt	r2,r5,440e244 <___vfprintf_internal_r+0xe80>
 440e23c:	9080004c 	andi	r2,r18,1
 440e240:	103ed526 	beq	r2,zero,440dd98 <__reset+0xfb409d98>
 440e244:	d8803717 	ldw	r2,220(sp)
 440e248:	d9003417 	ldw	r4,208(sp)
 440e24c:	d9403717 	ldw	r5,220(sp)
 440e250:	1887883a 	add	r3,r3,r2
 440e254:	d8801f17 	ldw	r2,124(sp)
 440e258:	41000015 	stw	r4,0(r8)
 440e25c:	41400115 	stw	r5,4(r8)
 440e260:	10800044 	addi	r2,r2,1
 440e264:	d8c02015 	stw	r3,128(sp)
 440e268:	d8801f15 	stw	r2,124(sp)
 440e26c:	010001c4 	movi	r4,7
 440e270:	20832916 	blt	r4,r2,440ef18 <___vfprintf_internal_r+0x1b54>
 440e274:	42000204 	addi	r8,r8,8
 440e278:	d8803317 	ldw	r2,204(sp)
 440e27c:	143fffc4 	addi	r16,r2,-1
 440e280:	043ec50e 	bge	zero,r16,440dd98 <__reset+0xfb409d98>
 440e284:	04400404 	movi	r17,16
 440e288:	d8801f17 	ldw	r2,124(sp)
 440e28c:	8c00880e 	bge	r17,r16,440e4b0 <___vfprintf_internal_r+0x10ec>
 440e290:	014110f4 	movhi	r5,1091
 440e294:	29533e84 	addi	r5,r5,19706
 440e298:	d9402b15 	stw	r5,172(sp)
 440e29c:	058001c4 	movi	r22,7
 440e2a0:	dcc02c17 	ldw	r19,176(sp)
 440e2a4:	00000306 	br	440e2b4 <___vfprintf_internal_r+0xef0>
 440e2a8:	42000204 	addi	r8,r8,8
 440e2ac:	843ffc04 	addi	r16,r16,-16
 440e2b0:	8c00820e 	bge	r17,r16,440e4bc <___vfprintf_internal_r+0x10f8>
 440e2b4:	18c00404 	addi	r3,r3,16
 440e2b8:	10800044 	addi	r2,r2,1
 440e2bc:	45000015 	stw	r20,0(r8)
 440e2c0:	44400115 	stw	r17,4(r8)
 440e2c4:	d8c02015 	stw	r3,128(sp)
 440e2c8:	d8801f15 	stw	r2,124(sp)
 440e2cc:	b0bff60e 	bge	r22,r2,440e2a8 <__reset+0xfb40a2a8>
 440e2d0:	d9801e04 	addi	r6,sp,120
 440e2d4:	b80b883a 	mov	r5,r23
 440e2d8:	9809883a 	mov	r4,r19
 440e2dc:	44153ac0 	call	44153ac <__sprint_r>
 440e2e0:	103d3a1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e2e4:	d8c02017 	ldw	r3,128(sp)
 440e2e8:	d8801f17 	ldw	r2,124(sp)
 440e2ec:	da000404 	addi	r8,sp,16
 440e2f0:	003fee06 	br	440e2ac <__reset+0xfb40a2ac>
 440e2f4:	d9403117 	ldw	r5,196(sp)
 440e2f8:	d8802a17 	ldw	r2,168(sp)
 440e2fc:	28adc83a 	sub	r22,r5,r2
 440e300:	05be630e 	bge	zero,r22,440dc90 <__reset+0xfb409c90>
 440e304:	07000404 	movi	fp,16
 440e308:	d8801f17 	ldw	r2,124(sp)
 440e30c:	e5838f0e 	bge	fp,r22,440f14c <___vfprintf_internal_r+0x1d88>
 440e310:	014110f4 	movhi	r5,1091
 440e314:	29533e84 	addi	r5,r5,19706
 440e318:	dc403015 	stw	r17,192(sp)
 440e31c:	d9402b15 	stw	r5,172(sp)
 440e320:	b023883a 	mov	r17,r22
 440e324:	04c001c4 	movi	r19,7
 440e328:	a82d883a 	mov	r22,r21
 440e32c:	902b883a 	mov	r21,r18
 440e330:	8025883a 	mov	r18,r16
 440e334:	dc002c17 	ldw	r16,176(sp)
 440e338:	00000306 	br	440e348 <___vfprintf_internal_r+0xf84>
 440e33c:	8c7ffc04 	addi	r17,r17,-16
 440e340:	42000204 	addi	r8,r8,8
 440e344:	e440110e 	bge	fp,r17,440e38c <___vfprintf_internal_r+0xfc8>
 440e348:	18c00404 	addi	r3,r3,16
 440e34c:	10800044 	addi	r2,r2,1
 440e350:	45000015 	stw	r20,0(r8)
 440e354:	47000115 	stw	fp,4(r8)
 440e358:	d8c02015 	stw	r3,128(sp)
 440e35c:	d8801f15 	stw	r2,124(sp)
 440e360:	98bff60e 	bge	r19,r2,440e33c <__reset+0xfb40a33c>
 440e364:	d9801e04 	addi	r6,sp,120
 440e368:	b80b883a 	mov	r5,r23
 440e36c:	8009883a 	mov	r4,r16
 440e370:	44153ac0 	call	44153ac <__sprint_r>
 440e374:	103d151e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e378:	8c7ffc04 	addi	r17,r17,-16
 440e37c:	d8c02017 	ldw	r3,128(sp)
 440e380:	d8801f17 	ldw	r2,124(sp)
 440e384:	da000404 	addi	r8,sp,16
 440e388:	e47fef16 	blt	fp,r17,440e348 <__reset+0xfb40a348>
 440e38c:	9021883a 	mov	r16,r18
 440e390:	a825883a 	mov	r18,r21
 440e394:	b02b883a 	mov	r21,r22
 440e398:	882d883a 	mov	r22,r17
 440e39c:	dc403017 	ldw	r17,192(sp)
 440e3a0:	d9002b17 	ldw	r4,172(sp)
 440e3a4:	1d87883a 	add	r3,r3,r22
 440e3a8:	10800044 	addi	r2,r2,1
 440e3ac:	41000015 	stw	r4,0(r8)
 440e3b0:	45800115 	stw	r22,4(r8)
 440e3b4:	d8c02015 	stw	r3,128(sp)
 440e3b8:	d8801f15 	stw	r2,124(sp)
 440e3bc:	010001c4 	movi	r4,7
 440e3c0:	20818e16 	blt	r4,r2,440e9fc <___vfprintf_internal_r+0x1638>
 440e3c4:	42000204 	addi	r8,r8,8
 440e3c8:	003e3106 	br	440dc90 <__reset+0xfb409c90>
 440e3cc:	d9403317 	ldw	r5,204(sp)
 440e3d0:	00800044 	movi	r2,1
 440e3d4:	18c00044 	addi	r3,r3,1
 440e3d8:	1141530e 	bge	r2,r5,440e928 <___vfprintf_internal_r+0x1564>
 440e3dc:	dc401f17 	ldw	r17,124(sp)
 440e3e0:	00800044 	movi	r2,1
 440e3e4:	40800115 	stw	r2,4(r8)
 440e3e8:	8c400044 	addi	r17,r17,1
 440e3ec:	44000015 	stw	r16,0(r8)
 440e3f0:	d8c02015 	stw	r3,128(sp)
 440e3f4:	dc401f15 	stw	r17,124(sp)
 440e3f8:	008001c4 	movi	r2,7
 440e3fc:	14416b16 	blt	r2,r17,440e9ac <___vfprintf_internal_r+0x15e8>
 440e400:	42000204 	addi	r8,r8,8
 440e404:	d8803717 	ldw	r2,220(sp)
 440e408:	d9003417 	ldw	r4,208(sp)
 440e40c:	8c400044 	addi	r17,r17,1
 440e410:	10c7883a 	add	r3,r2,r3
 440e414:	40800115 	stw	r2,4(r8)
 440e418:	41000015 	stw	r4,0(r8)
 440e41c:	d8c02015 	stw	r3,128(sp)
 440e420:	dc401f15 	stw	r17,124(sp)
 440e424:	008001c4 	movi	r2,7
 440e428:	14416916 	blt	r2,r17,440e9d0 <___vfprintf_internal_r+0x160c>
 440e42c:	45800204 	addi	r22,r8,8
 440e430:	d9003617 	ldw	r4,216(sp)
 440e434:	d9403817 	ldw	r5,224(sp)
 440e438:	000d883a 	mov	r6,zero
 440e43c:	000f883a 	mov	r7,zero
 440e440:	d8c03c15 	stw	r3,240(sp)
 440e444:	4417cdc0 	call	4417cdc <__eqdf2>
 440e448:	d8c03c17 	ldw	r3,240(sp)
 440e44c:	1000bc26 	beq	r2,zero,440e740 <___vfprintf_internal_r+0x137c>
 440e450:	d9403317 	ldw	r5,204(sp)
 440e454:	84000044 	addi	r16,r16,1
 440e458:	8c400044 	addi	r17,r17,1
 440e45c:	28bfffc4 	addi	r2,r5,-1
 440e460:	1887883a 	add	r3,r3,r2
 440e464:	b0800115 	stw	r2,4(r22)
 440e468:	b4000015 	stw	r16,0(r22)
 440e46c:	d8c02015 	stw	r3,128(sp)
 440e470:	dc401f15 	stw	r17,124(sp)
 440e474:	008001c4 	movi	r2,7
 440e478:	14414316 	blt	r2,r17,440e988 <___vfprintf_internal_r+0x15c4>
 440e47c:	b5800204 	addi	r22,r22,8
 440e480:	d9003a17 	ldw	r4,232(sp)
 440e484:	df0022c4 	addi	fp,sp,139
 440e488:	8c400044 	addi	r17,r17,1
 440e48c:	20c7883a 	add	r3,r4,r3
 440e490:	b7000015 	stw	fp,0(r22)
 440e494:	b1000115 	stw	r4,4(r22)
 440e498:	d8c02015 	stw	r3,128(sp)
 440e49c:	dc401f15 	stw	r17,124(sp)
 440e4a0:	008001c4 	movi	r2,7
 440e4a4:	14400e16 	blt	r2,r17,440e4e0 <___vfprintf_internal_r+0x111c>
 440e4a8:	b2000204 	addi	r8,r22,8
 440e4ac:	003e3a06 	br	440dd98 <__reset+0xfb409d98>
 440e4b0:	010110f4 	movhi	r4,1091
 440e4b4:	21133e84 	addi	r4,r4,19706
 440e4b8:	d9002b15 	stw	r4,172(sp)
 440e4bc:	d9002b17 	ldw	r4,172(sp)
 440e4c0:	1c07883a 	add	r3,r3,r16
 440e4c4:	44000115 	stw	r16,4(r8)
 440e4c8:	41000015 	stw	r4,0(r8)
 440e4cc:	10800044 	addi	r2,r2,1
 440e4d0:	d8c02015 	stw	r3,128(sp)
 440e4d4:	d8801f15 	stw	r2,124(sp)
 440e4d8:	010001c4 	movi	r4,7
 440e4dc:	20be2d0e 	bge	r4,r2,440dd94 <__reset+0xfb409d94>
 440e4e0:	d9002c17 	ldw	r4,176(sp)
 440e4e4:	d9801e04 	addi	r6,sp,120
 440e4e8:	b80b883a 	mov	r5,r23
 440e4ec:	44153ac0 	call	44153ac <__sprint_r>
 440e4f0:	103cb61e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e4f4:	d8c02017 	ldw	r3,128(sp)
 440e4f8:	da000404 	addi	r8,sp,16
 440e4fc:	003e2606 	br	440dd98 <__reset+0xfb409d98>
 440e500:	d9002c17 	ldw	r4,176(sp)
 440e504:	d9801e04 	addi	r6,sp,120
 440e508:	b80b883a 	mov	r5,r23
 440e50c:	44153ac0 	call	44153ac <__sprint_r>
 440e510:	103e5d26 	beq	r2,zero,440de88 <__reset+0xfb409e88>
 440e514:	003cad06 	br	440d7cc <__reset+0xfb4097cc>
 440e518:	d9002c17 	ldw	r4,176(sp)
 440e51c:	d9801e04 	addi	r6,sp,120
 440e520:	b80b883a 	mov	r5,r23
 440e524:	44153ac0 	call	44153ac <__sprint_r>
 440e528:	103ca81e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e52c:	d8c02017 	ldw	r3,128(sp)
 440e530:	da000404 	addi	r8,sp,16
 440e534:	003e0b06 	br	440dd64 <__reset+0xfb409d64>
 440e538:	d9002c17 	ldw	r4,176(sp)
 440e53c:	d9801e04 	addi	r6,sp,120
 440e540:	b80b883a 	mov	r5,r23
 440e544:	44153ac0 	call	44153ac <__sprint_r>
 440e548:	103ca01e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e54c:	d8c02017 	ldw	r3,128(sp)
 440e550:	da000404 	addi	r8,sp,16
 440e554:	003dbd06 	br	440dc4c <__reset+0xfb409c4c>
 440e558:	d9002c17 	ldw	r4,176(sp)
 440e55c:	d9801e04 	addi	r6,sp,120
 440e560:	b80b883a 	mov	r5,r23
 440e564:	44153ac0 	call	44153ac <__sprint_r>
 440e568:	103c981e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e56c:	d8c02017 	ldw	r3,128(sp)
 440e570:	da000404 	addi	r8,sp,16
 440e574:	003dc306 	br	440dc84 <__reset+0xfb409c84>
 440e578:	d8802917 	ldw	r2,164(sp)
 440e57c:	d8002785 	stb	zero,158(sp)
 440e580:	103f0616 	blt	r2,zero,440e19c <__reset+0xfb40a19c>
 440e584:	00ffdfc4 	movi	r3,-129
 440e588:	9d84b03a 	or	r2,r19,r22
 440e58c:	90e4703a 	and	r18,r18,r3
 440e590:	103c6b26 	beq	r2,zero,440d740 <__reset+0xfb409740>
 440e594:	0039883a 	mov	fp,zero
 440e598:	003e7406 	br	440df6c <__reset+0xfb409f6c>
 440e59c:	9080040c 	andi	r2,r18,16
 440e5a0:	1001b326 	beq	r2,zero,440ec70 <___vfprintf_internal_r+0x18ac>
 440e5a4:	d9002d17 	ldw	r4,180(sp)
 440e5a8:	d9402917 	ldw	r5,164(sp)
 440e5ac:	d8002785 	stb	zero,158(sp)
 440e5b0:	20800104 	addi	r2,r4,4
 440e5b4:	24c00017 	ldw	r19,0(r4)
 440e5b8:	002d883a 	mov	r22,zero
 440e5bc:	2801b516 	blt	r5,zero,440ec94 <___vfprintf_internal_r+0x18d0>
 440e5c0:	00ffdfc4 	movi	r3,-129
 440e5c4:	d8802d15 	stw	r2,180(sp)
 440e5c8:	90e4703a 	and	r18,r18,r3
 440e5cc:	983d2726 	beq	r19,zero,440da6c <__reset+0xfb409a6c>
 440e5d0:	0039883a 	mov	fp,zero
 440e5d4:	003d2a06 	br	440da80 <__reset+0xfb409a80>
 440e5d8:	dc402617 	ldw	r17,152(sp)
 440e5dc:	0441d30e 	bge	zero,r17,440ed2c <___vfprintf_internal_r+0x1968>
 440e5e0:	dc403217 	ldw	r17,200(sp)
 440e5e4:	d8803317 	ldw	r2,204(sp)
 440e5e8:	1440010e 	bge	r2,r17,440e5f0 <___vfprintf_internal_r+0x122c>
 440e5ec:	1023883a 	mov	r17,r2
 440e5f0:	04400a0e 	bge	zero,r17,440e61c <___vfprintf_internal_r+0x1258>
 440e5f4:	d8801f17 	ldw	r2,124(sp)
 440e5f8:	1c47883a 	add	r3,r3,r17
 440e5fc:	44000015 	stw	r16,0(r8)
 440e600:	10800044 	addi	r2,r2,1
 440e604:	44400115 	stw	r17,4(r8)
 440e608:	d8c02015 	stw	r3,128(sp)
 440e60c:	d8801f15 	stw	r2,124(sp)
 440e610:	010001c4 	movi	r4,7
 440e614:	20826516 	blt	r4,r2,440efac <___vfprintf_internal_r+0x1be8>
 440e618:	42000204 	addi	r8,r8,8
 440e61c:	88026116 	blt	r17,zero,440efa4 <___vfprintf_internal_r+0x1be0>
 440e620:	d9003217 	ldw	r4,200(sp)
 440e624:	2463c83a 	sub	r17,r4,r17
 440e628:	04407b0e 	bge	zero,r17,440e818 <___vfprintf_internal_r+0x1454>
 440e62c:	05800404 	movi	r22,16
 440e630:	d8801f17 	ldw	r2,124(sp)
 440e634:	b4419d0e 	bge	r22,r17,440ecac <___vfprintf_internal_r+0x18e8>
 440e638:	010110f4 	movhi	r4,1091
 440e63c:	21133e84 	addi	r4,r4,19706
 440e640:	d9002b15 	stw	r4,172(sp)
 440e644:	070001c4 	movi	fp,7
 440e648:	dcc02c17 	ldw	r19,176(sp)
 440e64c:	00000306 	br	440e65c <___vfprintf_internal_r+0x1298>
 440e650:	42000204 	addi	r8,r8,8
 440e654:	8c7ffc04 	addi	r17,r17,-16
 440e658:	b441970e 	bge	r22,r17,440ecb8 <___vfprintf_internal_r+0x18f4>
 440e65c:	18c00404 	addi	r3,r3,16
 440e660:	10800044 	addi	r2,r2,1
 440e664:	45000015 	stw	r20,0(r8)
 440e668:	45800115 	stw	r22,4(r8)
 440e66c:	d8c02015 	stw	r3,128(sp)
 440e670:	d8801f15 	stw	r2,124(sp)
 440e674:	e0bff60e 	bge	fp,r2,440e650 <__reset+0xfb40a650>
 440e678:	d9801e04 	addi	r6,sp,120
 440e67c:	b80b883a 	mov	r5,r23
 440e680:	9809883a 	mov	r4,r19
 440e684:	44153ac0 	call	44153ac <__sprint_r>
 440e688:	103c501e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e68c:	d8c02017 	ldw	r3,128(sp)
 440e690:	d8801f17 	ldw	r2,124(sp)
 440e694:	da000404 	addi	r8,sp,16
 440e698:	003fee06 	br	440e654 <__reset+0xfb40a654>
 440e69c:	d9002c17 	ldw	r4,176(sp)
 440e6a0:	d9801e04 	addi	r6,sp,120
 440e6a4:	b80b883a 	mov	r5,r23
 440e6a8:	44153ac0 	call	44153ac <__sprint_r>
 440e6ac:	103c471e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e6b0:	d8c02017 	ldw	r3,128(sp)
 440e6b4:	df002787 	ldb	fp,158(sp)
 440e6b8:	da000404 	addi	r8,sp,16
 440e6bc:	003d5606 	br	440dc18 <__reset+0xfb409c18>
 440e6c0:	9080040c 	andi	r2,r18,16
 440e6c4:	10016126 	beq	r2,zero,440ec4c <___vfprintf_internal_r+0x1888>
 440e6c8:	d8802d17 	ldw	r2,180(sp)
 440e6cc:	14c00017 	ldw	r19,0(r2)
 440e6d0:	10800104 	addi	r2,r2,4
 440e6d4:	d8802d15 	stw	r2,180(sp)
 440e6d8:	982dd7fa 	srai	r22,r19,31
 440e6dc:	b005883a 	mov	r2,r22
 440e6e0:	003c8206 	br	440d8ec <__reset+0xfb4098ec>
 440e6e4:	9080040c 	andi	r2,r18,16
 440e6e8:	10003526 	beq	r2,zero,440e7c0 <___vfprintf_internal_r+0x13fc>
 440e6ec:	d9402d17 	ldw	r5,180(sp)
 440e6f0:	d8c02917 	ldw	r3,164(sp)
 440e6f4:	d8002785 	stb	zero,158(sp)
 440e6f8:	28800104 	addi	r2,r5,4
 440e6fc:	2cc00017 	ldw	r19,0(r5)
 440e700:	002d883a 	mov	r22,zero
 440e704:	18003716 	blt	r3,zero,440e7e4 <___vfprintf_internal_r+0x1420>
 440e708:	00ffdfc4 	movi	r3,-129
 440e70c:	d8802d15 	stw	r2,180(sp)
 440e710:	90e4703a 	and	r18,r18,r3
 440e714:	0039883a 	mov	fp,zero
 440e718:	983df326 	beq	r19,zero,440dee8 <__reset+0xfb409ee8>
 440e71c:	00800244 	movi	r2,9
 440e720:	14fc7b36 	bltu	r2,r19,440d910 <__reset+0xfb409910>
 440e724:	d8c02817 	ldw	r3,160(sp)
 440e728:	dc001dc4 	addi	r16,sp,119
 440e72c:	9cc00c04 	addi	r19,r19,48
 440e730:	1c07c83a 	sub	r3,r3,r16
 440e734:	dcc01dc5 	stb	r19,119(sp)
 440e738:	d8c02e15 	stw	r3,184(sp)
 440e73c:	003ce806 	br	440dae0 <__reset+0xfb409ae0>
 440e740:	d8803317 	ldw	r2,204(sp)
 440e744:	143fffc4 	addi	r16,r2,-1
 440e748:	043f4d0e 	bge	zero,r16,440e480 <__reset+0xfb40a480>
 440e74c:	07000404 	movi	fp,16
 440e750:	e400810e 	bge	fp,r16,440e958 <___vfprintf_internal_r+0x1594>
 440e754:	014110f4 	movhi	r5,1091
 440e758:	29533e84 	addi	r5,r5,19706
 440e75c:	d9402b15 	stw	r5,172(sp)
 440e760:	01c001c4 	movi	r7,7
 440e764:	dcc02c17 	ldw	r19,176(sp)
 440e768:	00000306 	br	440e778 <___vfprintf_internal_r+0x13b4>
 440e76c:	b5800204 	addi	r22,r22,8
 440e770:	843ffc04 	addi	r16,r16,-16
 440e774:	e4007b0e 	bge	fp,r16,440e964 <___vfprintf_internal_r+0x15a0>
 440e778:	18c00404 	addi	r3,r3,16
 440e77c:	8c400044 	addi	r17,r17,1
 440e780:	b5000015 	stw	r20,0(r22)
 440e784:	b7000115 	stw	fp,4(r22)
 440e788:	d8c02015 	stw	r3,128(sp)
 440e78c:	dc401f15 	stw	r17,124(sp)
 440e790:	3c7ff60e 	bge	r7,r17,440e76c <__reset+0xfb40a76c>
 440e794:	d9801e04 	addi	r6,sp,120
 440e798:	b80b883a 	mov	r5,r23
 440e79c:	9809883a 	mov	r4,r19
 440e7a0:	d9c03c15 	stw	r7,240(sp)
 440e7a4:	44153ac0 	call	44153ac <__sprint_r>
 440e7a8:	d9c03c17 	ldw	r7,240(sp)
 440e7ac:	103c071e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e7b0:	d8c02017 	ldw	r3,128(sp)
 440e7b4:	dc401f17 	ldw	r17,124(sp)
 440e7b8:	dd800404 	addi	r22,sp,16
 440e7bc:	003fec06 	br	440e770 <__reset+0xfb40a770>
 440e7c0:	9080100c 	andi	r2,r18,64
 440e7c4:	d8002785 	stb	zero,158(sp)
 440e7c8:	10010e26 	beq	r2,zero,440ec04 <___vfprintf_internal_r+0x1840>
 440e7cc:	d9002d17 	ldw	r4,180(sp)
 440e7d0:	d9402917 	ldw	r5,164(sp)
 440e7d4:	002d883a 	mov	r22,zero
 440e7d8:	20800104 	addi	r2,r4,4
 440e7dc:	24c0000b 	ldhu	r19,0(r4)
 440e7e0:	283fc90e 	bge	r5,zero,440e708 <__reset+0xfb40a708>
 440e7e4:	d8802d15 	stw	r2,180(sp)
 440e7e8:	0039883a 	mov	fp,zero
 440e7ec:	9d84b03a 	or	r2,r19,r22
 440e7f0:	103c461e 	bne	r2,zero,440d90c <__reset+0xfb40990c>
 440e7f4:	00800044 	movi	r2,1
 440e7f8:	003e6c06 	br	440e1ac <__reset+0xfb40a1ac>
 440e7fc:	d9002c17 	ldw	r4,176(sp)
 440e800:	d9801e04 	addi	r6,sp,120
 440e804:	b80b883a 	mov	r5,r23
 440e808:	44153ac0 	call	44153ac <__sprint_r>
 440e80c:	103bef1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e810:	d8c02017 	ldw	r3,128(sp)
 440e814:	da000404 	addi	r8,sp,16
 440e818:	d9003217 	ldw	r4,200(sp)
 440e81c:	d8802617 	ldw	r2,152(sp)
 440e820:	d9403317 	ldw	r5,204(sp)
 440e824:	8123883a 	add	r17,r16,r4
 440e828:	11400216 	blt	r2,r5,440e834 <___vfprintf_internal_r+0x1470>
 440e82c:	9100004c 	andi	r4,r18,1
 440e830:	20000d26 	beq	r4,zero,440e868 <___vfprintf_internal_r+0x14a4>
 440e834:	d9003717 	ldw	r4,220(sp)
 440e838:	d9403417 	ldw	r5,208(sp)
 440e83c:	1907883a 	add	r3,r3,r4
 440e840:	d9001f17 	ldw	r4,124(sp)
 440e844:	41400015 	stw	r5,0(r8)
 440e848:	d9403717 	ldw	r5,220(sp)
 440e84c:	21000044 	addi	r4,r4,1
 440e850:	d8c02015 	stw	r3,128(sp)
 440e854:	41400115 	stw	r5,4(r8)
 440e858:	d9001f15 	stw	r4,124(sp)
 440e85c:	014001c4 	movi	r5,7
 440e860:	2901e816 	blt	r5,r4,440f004 <___vfprintf_internal_r+0x1c40>
 440e864:	42000204 	addi	r8,r8,8
 440e868:	d9003317 	ldw	r4,204(sp)
 440e86c:	8121883a 	add	r16,r16,r4
 440e870:	2085c83a 	sub	r2,r4,r2
 440e874:	8461c83a 	sub	r16,r16,r17
 440e878:	1400010e 	bge	r2,r16,440e880 <___vfprintf_internal_r+0x14bc>
 440e87c:	1021883a 	mov	r16,r2
 440e880:	04000a0e 	bge	zero,r16,440e8ac <___vfprintf_internal_r+0x14e8>
 440e884:	d9001f17 	ldw	r4,124(sp)
 440e888:	1c07883a 	add	r3,r3,r16
 440e88c:	44400015 	stw	r17,0(r8)
 440e890:	21000044 	addi	r4,r4,1
 440e894:	44000115 	stw	r16,4(r8)
 440e898:	d8c02015 	stw	r3,128(sp)
 440e89c:	d9001f15 	stw	r4,124(sp)
 440e8a0:	014001c4 	movi	r5,7
 440e8a4:	2901fb16 	blt	r5,r4,440f094 <___vfprintf_internal_r+0x1cd0>
 440e8a8:	42000204 	addi	r8,r8,8
 440e8ac:	8001f716 	blt	r16,zero,440f08c <___vfprintf_internal_r+0x1cc8>
 440e8b0:	1421c83a 	sub	r16,r2,r16
 440e8b4:	043d380e 	bge	zero,r16,440dd98 <__reset+0xfb409d98>
 440e8b8:	04400404 	movi	r17,16
 440e8bc:	d8801f17 	ldw	r2,124(sp)
 440e8c0:	8c3efb0e 	bge	r17,r16,440e4b0 <__reset+0xfb40a4b0>
 440e8c4:	014110f4 	movhi	r5,1091
 440e8c8:	29533e84 	addi	r5,r5,19706
 440e8cc:	d9402b15 	stw	r5,172(sp)
 440e8d0:	058001c4 	movi	r22,7
 440e8d4:	dcc02c17 	ldw	r19,176(sp)
 440e8d8:	00000306 	br	440e8e8 <___vfprintf_internal_r+0x1524>
 440e8dc:	42000204 	addi	r8,r8,8
 440e8e0:	843ffc04 	addi	r16,r16,-16
 440e8e4:	8c3ef50e 	bge	r17,r16,440e4bc <__reset+0xfb40a4bc>
 440e8e8:	18c00404 	addi	r3,r3,16
 440e8ec:	10800044 	addi	r2,r2,1
 440e8f0:	45000015 	stw	r20,0(r8)
 440e8f4:	44400115 	stw	r17,4(r8)
 440e8f8:	d8c02015 	stw	r3,128(sp)
 440e8fc:	d8801f15 	stw	r2,124(sp)
 440e900:	b0bff60e 	bge	r22,r2,440e8dc <__reset+0xfb40a8dc>
 440e904:	d9801e04 	addi	r6,sp,120
 440e908:	b80b883a 	mov	r5,r23
 440e90c:	9809883a 	mov	r4,r19
 440e910:	44153ac0 	call	44153ac <__sprint_r>
 440e914:	103bad1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e918:	d8c02017 	ldw	r3,128(sp)
 440e91c:	d8801f17 	ldw	r2,124(sp)
 440e920:	da000404 	addi	r8,sp,16
 440e924:	003fee06 	br	440e8e0 <__reset+0xfb40a8e0>
 440e928:	9088703a 	and	r4,r18,r2
 440e92c:	203eab1e 	bne	r4,zero,440e3dc <__reset+0xfb40a3dc>
 440e930:	dc401f17 	ldw	r17,124(sp)
 440e934:	40800115 	stw	r2,4(r8)
 440e938:	44000015 	stw	r16,0(r8)
 440e93c:	8c400044 	addi	r17,r17,1
 440e940:	d8c02015 	stw	r3,128(sp)
 440e944:	dc401f15 	stw	r17,124(sp)
 440e948:	008001c4 	movi	r2,7
 440e94c:	14400e16 	blt	r2,r17,440e988 <___vfprintf_internal_r+0x15c4>
 440e950:	45800204 	addi	r22,r8,8
 440e954:	003eca06 	br	440e480 <__reset+0xfb40a480>
 440e958:	010110f4 	movhi	r4,1091
 440e95c:	21133e84 	addi	r4,r4,19706
 440e960:	d9002b15 	stw	r4,172(sp)
 440e964:	d8802b17 	ldw	r2,172(sp)
 440e968:	1c07883a 	add	r3,r3,r16
 440e96c:	8c400044 	addi	r17,r17,1
 440e970:	b0800015 	stw	r2,0(r22)
 440e974:	b4000115 	stw	r16,4(r22)
 440e978:	d8c02015 	stw	r3,128(sp)
 440e97c:	dc401f15 	stw	r17,124(sp)
 440e980:	008001c4 	movi	r2,7
 440e984:	147ebd0e 	bge	r2,r17,440e47c <__reset+0xfb40a47c>
 440e988:	d9002c17 	ldw	r4,176(sp)
 440e98c:	d9801e04 	addi	r6,sp,120
 440e990:	b80b883a 	mov	r5,r23
 440e994:	44153ac0 	call	44153ac <__sprint_r>
 440e998:	103b8c1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e99c:	d8c02017 	ldw	r3,128(sp)
 440e9a0:	dc401f17 	ldw	r17,124(sp)
 440e9a4:	dd800404 	addi	r22,sp,16
 440e9a8:	003eb506 	br	440e480 <__reset+0xfb40a480>
 440e9ac:	d9002c17 	ldw	r4,176(sp)
 440e9b0:	d9801e04 	addi	r6,sp,120
 440e9b4:	b80b883a 	mov	r5,r23
 440e9b8:	44153ac0 	call	44153ac <__sprint_r>
 440e9bc:	103b831e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e9c0:	d8c02017 	ldw	r3,128(sp)
 440e9c4:	dc401f17 	ldw	r17,124(sp)
 440e9c8:	da000404 	addi	r8,sp,16
 440e9cc:	003e8d06 	br	440e404 <__reset+0xfb40a404>
 440e9d0:	d9002c17 	ldw	r4,176(sp)
 440e9d4:	d9801e04 	addi	r6,sp,120
 440e9d8:	b80b883a 	mov	r5,r23
 440e9dc:	44153ac0 	call	44153ac <__sprint_r>
 440e9e0:	103b7a1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440e9e4:	d8c02017 	ldw	r3,128(sp)
 440e9e8:	dc401f17 	ldw	r17,124(sp)
 440e9ec:	dd800404 	addi	r22,sp,16
 440e9f0:	003e8f06 	br	440e430 <__reset+0xfb40a430>
 440e9f4:	0027883a 	mov	r19,zero
 440e9f8:	003f4a06 	br	440e724 <__reset+0xfb40a724>
 440e9fc:	d9002c17 	ldw	r4,176(sp)
 440ea00:	d9801e04 	addi	r6,sp,120
 440ea04:	b80b883a 	mov	r5,r23
 440ea08:	44153ac0 	call	44153ac <__sprint_r>
 440ea0c:	103b6f1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440ea10:	d8c02017 	ldw	r3,128(sp)
 440ea14:	da000404 	addi	r8,sp,16
 440ea18:	003c9d06 	br	440dc90 <__reset+0xfb409c90>
 440ea1c:	04e7c83a 	sub	r19,zero,r19
 440ea20:	9804c03a 	cmpne	r2,r19,zero
 440ea24:	05adc83a 	sub	r22,zero,r22
 440ea28:	b0adc83a 	sub	r22,r22,r2
 440ea2c:	d8802917 	ldw	r2,164(sp)
 440ea30:	07000b44 	movi	fp,45
 440ea34:	df002785 	stb	fp,158(sp)
 440ea38:	10017b16 	blt	r2,zero,440f028 <___vfprintf_internal_r+0x1c64>
 440ea3c:	00bfdfc4 	movi	r2,-129
 440ea40:	90a4703a 	and	r18,r18,r2
 440ea44:	003bb106 	br	440d90c <__reset+0xfb40990c>
 440ea48:	d9003617 	ldw	r4,216(sp)
 440ea4c:	d9403817 	ldw	r5,224(sp)
 440ea50:	da003d15 	stw	r8,244(sp)
 440ea54:	4407d2c0 	call	4407d2c <__fpclassifyd>
 440ea58:	da003d17 	ldw	r8,244(sp)
 440ea5c:	1000f026 	beq	r2,zero,440ee20 <___vfprintf_internal_r+0x1a5c>
 440ea60:	d9002917 	ldw	r4,164(sp)
 440ea64:	05bff7c4 	movi	r22,-33
 440ea68:	00bfffc4 	movi	r2,-1
 440ea6c:	8dac703a 	and	r22,r17,r22
 440ea70:	20820026 	beq	r4,r2,440f274 <___vfprintf_internal_r+0x1eb0>
 440ea74:	008011c4 	movi	r2,71
 440ea78:	b081f726 	beq	r22,r2,440f258 <___vfprintf_internal_r+0x1e94>
 440ea7c:	d9003817 	ldw	r4,224(sp)
 440ea80:	90c04014 	ori	r3,r18,256
 440ea84:	d8c02b15 	stw	r3,172(sp)
 440ea88:	20021516 	blt	r4,zero,440f2e0 <___vfprintf_internal_r+0x1f1c>
 440ea8c:	dcc03817 	ldw	r19,224(sp)
 440ea90:	d8002a05 	stb	zero,168(sp)
 440ea94:	00801984 	movi	r2,102
 440ea98:	8881f926 	beq	r17,r2,440f280 <___vfprintf_internal_r+0x1ebc>
 440ea9c:	00801184 	movi	r2,70
 440eaa0:	88821c26 	beq	r17,r2,440f314 <___vfprintf_internal_r+0x1f50>
 440eaa4:	00801144 	movi	r2,69
 440eaa8:	b081ef26 	beq	r22,r2,440f268 <___vfprintf_internal_r+0x1ea4>
 440eaac:	d8c02917 	ldw	r3,164(sp)
 440eab0:	d8802104 	addi	r2,sp,132
 440eab4:	d8800315 	stw	r2,12(sp)
 440eab8:	d9403617 	ldw	r5,216(sp)
 440eabc:	d8802504 	addi	r2,sp,148
 440eac0:	d9002c17 	ldw	r4,176(sp)
 440eac4:	d8800215 	stw	r2,8(sp)
 440eac8:	d8802604 	addi	r2,sp,152
 440eacc:	d8c00015 	stw	r3,0(sp)
 440ead0:	d8800115 	stw	r2,4(sp)
 440ead4:	01c00084 	movi	r7,2
 440ead8:	980d883a 	mov	r6,r19
 440eadc:	d8c03c15 	stw	r3,240(sp)
 440eae0:	da003d15 	stw	r8,244(sp)
 440eae4:	440fb0c0 	call	440fb0c <_dtoa_r>
 440eae8:	1021883a 	mov	r16,r2
 440eaec:	008019c4 	movi	r2,103
 440eaf0:	d8c03c17 	ldw	r3,240(sp)
 440eaf4:	da003d17 	ldw	r8,244(sp)
 440eaf8:	88817126 	beq	r17,r2,440f0c0 <___vfprintf_internal_r+0x1cfc>
 440eafc:	008011c4 	movi	r2,71
 440eb00:	88829226 	beq	r17,r2,440f54c <___vfprintf_internal_r+0x2188>
 440eb04:	80f9883a 	add	fp,r16,r3
 440eb08:	d9003617 	ldw	r4,216(sp)
 440eb0c:	000d883a 	mov	r6,zero
 440eb10:	000f883a 	mov	r7,zero
 440eb14:	980b883a 	mov	r5,r19
 440eb18:	da003d15 	stw	r8,244(sp)
 440eb1c:	4417cdc0 	call	4417cdc <__eqdf2>
 440eb20:	da003d17 	ldw	r8,244(sp)
 440eb24:	10018d26 	beq	r2,zero,440f15c <___vfprintf_internal_r+0x1d98>
 440eb28:	d8802117 	ldw	r2,132(sp)
 440eb2c:	1700062e 	bgeu	r2,fp,440eb48 <___vfprintf_internal_r+0x1784>
 440eb30:	01000c04 	movi	r4,48
 440eb34:	10c00044 	addi	r3,r2,1
 440eb38:	d8c02115 	stw	r3,132(sp)
 440eb3c:	11000005 	stb	r4,0(r2)
 440eb40:	d8802117 	ldw	r2,132(sp)
 440eb44:	173ffb36 	bltu	r2,fp,440eb34 <__reset+0xfb40ab34>
 440eb48:	1405c83a 	sub	r2,r2,r16
 440eb4c:	d8803315 	stw	r2,204(sp)
 440eb50:	008011c4 	movi	r2,71
 440eb54:	b0817626 	beq	r22,r2,440f130 <___vfprintf_internal_r+0x1d6c>
 440eb58:	00801944 	movi	r2,101
 440eb5c:	1442810e 	bge	r2,r17,440f564 <___vfprintf_internal_r+0x21a0>
 440eb60:	d8c02617 	ldw	r3,152(sp)
 440eb64:	00801984 	movi	r2,102
 440eb68:	d8c03215 	stw	r3,200(sp)
 440eb6c:	8881fe26 	beq	r17,r2,440f368 <___vfprintf_internal_r+0x1fa4>
 440eb70:	d8c03217 	ldw	r3,200(sp)
 440eb74:	d9003317 	ldw	r4,204(sp)
 440eb78:	1901dd16 	blt	r3,r4,440f2f0 <___vfprintf_internal_r+0x1f2c>
 440eb7c:	9480004c 	andi	r18,r18,1
 440eb80:	90022b1e 	bne	r18,zero,440f430 <___vfprintf_internal_r+0x206c>
 440eb84:	1805883a 	mov	r2,r3
 440eb88:	18028016 	blt	r3,zero,440f58c <___vfprintf_internal_r+0x21c8>
 440eb8c:	d8c03217 	ldw	r3,200(sp)
 440eb90:	044019c4 	movi	r17,103
 440eb94:	d8c02e15 	stw	r3,184(sp)
 440eb98:	df002a07 	ldb	fp,168(sp)
 440eb9c:	e001531e 	bne	fp,zero,440f0ec <___vfprintf_internal_r+0x1d28>
 440eba0:	df002783 	ldbu	fp,158(sp)
 440eba4:	d8802a15 	stw	r2,168(sp)
 440eba8:	dc802b17 	ldw	r18,172(sp)
 440ebac:	d8002915 	stw	zero,164(sp)
 440ebb0:	003bd106 	br	440daf8 <__reset+0xfb409af8>
 440ebb4:	d8802d17 	ldw	r2,180(sp)
 440ebb8:	d8c02d17 	ldw	r3,180(sp)
 440ebbc:	d9002d17 	ldw	r4,180(sp)
 440ebc0:	10800017 	ldw	r2,0(r2)
 440ebc4:	18c00117 	ldw	r3,4(r3)
 440ebc8:	21000204 	addi	r4,r4,8
 440ebcc:	d8803615 	stw	r2,216(sp)
 440ebd0:	d8c03815 	stw	r3,224(sp)
 440ebd4:	d9002d15 	stw	r4,180(sp)
 440ebd8:	003b7506 	br	440d9b0 <__reset+0xfb4099b0>
 440ebdc:	ac400007 	ldb	r17,0(r21)
 440ebe0:	003a5906 	br	440d548 <__reset+0xfb409548>
 440ebe4:	9080100c 	andi	r2,r18,64
 440ebe8:	1000a826 	beq	r2,zero,440ee8c <___vfprintf_internal_r+0x1ac8>
 440ebec:	d9002d17 	ldw	r4,180(sp)
 440ebf0:	002d883a 	mov	r22,zero
 440ebf4:	24c0000b 	ldhu	r19,0(r4)
 440ebf8:	21000104 	addi	r4,r4,4
 440ebfc:	d9002d15 	stw	r4,180(sp)
 440ec00:	003ccb06 	br	440df30 <__reset+0xfb409f30>
 440ec04:	d8c02d17 	ldw	r3,180(sp)
 440ec08:	d9002917 	ldw	r4,164(sp)
 440ec0c:	002d883a 	mov	r22,zero
 440ec10:	18800104 	addi	r2,r3,4
 440ec14:	1cc00017 	ldw	r19,0(r3)
 440ec18:	203ebb0e 	bge	r4,zero,440e708 <__reset+0xfb40a708>
 440ec1c:	003ef106 	br	440e7e4 <__reset+0xfb40a7e4>
 440ec20:	9080040c 	andi	r2,r18,16
 440ec24:	1000921e 	bne	r2,zero,440ee70 <___vfprintf_internal_r+0x1aac>
 440ec28:	9480100c 	andi	r18,r18,64
 440ec2c:	90013926 	beq	r18,zero,440f114 <___vfprintf_internal_r+0x1d50>
 440ec30:	d9002d17 	ldw	r4,180(sp)
 440ec34:	d9402f17 	ldw	r5,188(sp)
 440ec38:	20800017 	ldw	r2,0(r4)
 440ec3c:	21000104 	addi	r4,r4,4
 440ec40:	d9002d15 	stw	r4,180(sp)
 440ec44:	1140000d 	sth	r5,0(r2)
 440ec48:	003a1606 	br	440d4a4 <__reset+0xfb4094a4>
 440ec4c:	9080100c 	andi	r2,r18,64
 440ec50:	10008026 	beq	r2,zero,440ee54 <___vfprintf_internal_r+0x1a90>
 440ec54:	d8c02d17 	ldw	r3,180(sp)
 440ec58:	1cc0000f 	ldh	r19,0(r3)
 440ec5c:	18c00104 	addi	r3,r3,4
 440ec60:	d8c02d15 	stw	r3,180(sp)
 440ec64:	982dd7fa 	srai	r22,r19,31
 440ec68:	b005883a 	mov	r2,r22
 440ec6c:	003b1f06 	br	440d8ec <__reset+0xfb4098ec>
 440ec70:	9080100c 	andi	r2,r18,64
 440ec74:	d8002785 	stb	zero,158(sp)
 440ec78:	10008a1e 	bne	r2,zero,440eea4 <___vfprintf_internal_r+0x1ae0>
 440ec7c:	d9402d17 	ldw	r5,180(sp)
 440ec80:	d8c02917 	ldw	r3,164(sp)
 440ec84:	002d883a 	mov	r22,zero
 440ec88:	28800104 	addi	r2,r5,4
 440ec8c:	2cc00017 	ldw	r19,0(r5)
 440ec90:	183e4b0e 	bge	r3,zero,440e5c0 <__reset+0xfb40a5c0>
 440ec94:	9d86b03a 	or	r3,r19,r22
 440ec98:	d8802d15 	stw	r2,180(sp)
 440ec9c:	183e4c1e 	bne	r3,zero,440e5d0 <__reset+0xfb40a5d0>
 440eca0:	0039883a 	mov	fp,zero
 440eca4:	0005883a 	mov	r2,zero
 440eca8:	003d4006 	br	440e1ac <__reset+0xfb40a1ac>
 440ecac:	014110f4 	movhi	r5,1091
 440ecb0:	29533e84 	addi	r5,r5,19706
 440ecb4:	d9402b15 	stw	r5,172(sp)
 440ecb8:	d9402b17 	ldw	r5,172(sp)
 440ecbc:	1c47883a 	add	r3,r3,r17
 440ecc0:	10800044 	addi	r2,r2,1
 440ecc4:	41400015 	stw	r5,0(r8)
 440ecc8:	44400115 	stw	r17,4(r8)
 440eccc:	d8c02015 	stw	r3,128(sp)
 440ecd0:	d8801f15 	stw	r2,124(sp)
 440ecd4:	010001c4 	movi	r4,7
 440ecd8:	20bec816 	blt	r4,r2,440e7fc <__reset+0xfb40a7fc>
 440ecdc:	42000204 	addi	r8,r8,8
 440ece0:	003ecd06 	br	440e818 <__reset+0xfb40a818>
 440ece4:	d9002917 	ldw	r4,164(sp)
 440ece8:	d8002785 	stb	zero,158(sp)
 440ecec:	203d2d16 	blt	r4,zero,440e1a4 <__reset+0xfb40a1a4>
 440ecf0:	00bfdfc4 	movi	r2,-129
 440ecf4:	90a4703a 	and	r18,r18,r2
 440ecf8:	003a9106 	br	440d740 <__reset+0xfb409740>
 440ecfc:	010110f4 	movhi	r4,1091
 440ed00:	21133e84 	addi	r4,r4,19706
 440ed04:	d9002b15 	stw	r4,172(sp)
 440ed08:	003c0c06 	br	440dd3c <__reset+0xfb409d3c>
 440ed0c:	d9002c17 	ldw	r4,176(sp)
 440ed10:	d9801e04 	addi	r6,sp,120
 440ed14:	b80b883a 	mov	r5,r23
 440ed18:	44153ac0 	call	44153ac <__sprint_r>
 440ed1c:	103aab1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440ed20:	d8c02017 	ldw	r3,128(sp)
 440ed24:	da000404 	addi	r8,sp,16
 440ed28:	003d4106 	br	440e230 <__reset+0xfb40a230>
 440ed2c:	d8801f17 	ldw	r2,124(sp)
 440ed30:	014110f4 	movhi	r5,1091
 440ed34:	01000044 	movi	r4,1
 440ed38:	18c00044 	addi	r3,r3,1
 440ed3c:	10800044 	addi	r2,r2,1
 440ed40:	29533604 	addi	r5,r5,19672
 440ed44:	41000115 	stw	r4,4(r8)
 440ed48:	41400015 	stw	r5,0(r8)
 440ed4c:	d8c02015 	stw	r3,128(sp)
 440ed50:	d8801f15 	stw	r2,124(sp)
 440ed54:	010001c4 	movi	r4,7
 440ed58:	20805c16 	blt	r4,r2,440eecc <___vfprintf_internal_r+0x1b08>
 440ed5c:	42000204 	addi	r8,r8,8
 440ed60:	8800041e 	bne	r17,zero,440ed74 <___vfprintf_internal_r+0x19b0>
 440ed64:	d8803317 	ldw	r2,204(sp)
 440ed68:	1000021e 	bne	r2,zero,440ed74 <___vfprintf_internal_r+0x19b0>
 440ed6c:	9080004c 	andi	r2,r18,1
 440ed70:	103c0926 	beq	r2,zero,440dd98 <__reset+0xfb409d98>
 440ed74:	d9003717 	ldw	r4,220(sp)
 440ed78:	d8801f17 	ldw	r2,124(sp)
 440ed7c:	d9403417 	ldw	r5,208(sp)
 440ed80:	20c7883a 	add	r3,r4,r3
 440ed84:	10800044 	addi	r2,r2,1
 440ed88:	41000115 	stw	r4,4(r8)
 440ed8c:	41400015 	stw	r5,0(r8)
 440ed90:	d8c02015 	stw	r3,128(sp)
 440ed94:	d8801f15 	stw	r2,124(sp)
 440ed98:	010001c4 	movi	r4,7
 440ed9c:	20812116 	blt	r4,r2,440f224 <___vfprintf_internal_r+0x1e60>
 440eda0:	42000204 	addi	r8,r8,8
 440eda4:	0463c83a 	sub	r17,zero,r17
 440eda8:	0440730e 	bge	zero,r17,440ef78 <___vfprintf_internal_r+0x1bb4>
 440edac:	05800404 	movi	r22,16
 440edb0:	b440860e 	bge	r22,r17,440efcc <___vfprintf_internal_r+0x1c08>
 440edb4:	014110f4 	movhi	r5,1091
 440edb8:	29533e84 	addi	r5,r5,19706
 440edbc:	d9402b15 	stw	r5,172(sp)
 440edc0:	070001c4 	movi	fp,7
 440edc4:	dcc02c17 	ldw	r19,176(sp)
 440edc8:	00000306 	br	440edd8 <___vfprintf_internal_r+0x1a14>
 440edcc:	42000204 	addi	r8,r8,8
 440edd0:	8c7ffc04 	addi	r17,r17,-16
 440edd4:	b440800e 	bge	r22,r17,440efd8 <___vfprintf_internal_r+0x1c14>
 440edd8:	18c00404 	addi	r3,r3,16
 440eddc:	10800044 	addi	r2,r2,1
 440ede0:	45000015 	stw	r20,0(r8)
 440ede4:	45800115 	stw	r22,4(r8)
 440ede8:	d8c02015 	stw	r3,128(sp)
 440edec:	d8801f15 	stw	r2,124(sp)
 440edf0:	e0bff60e 	bge	fp,r2,440edcc <__reset+0xfb40adcc>
 440edf4:	d9801e04 	addi	r6,sp,120
 440edf8:	b80b883a 	mov	r5,r23
 440edfc:	9809883a 	mov	r4,r19
 440ee00:	44153ac0 	call	44153ac <__sprint_r>
 440ee04:	103a711e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440ee08:	d8c02017 	ldw	r3,128(sp)
 440ee0c:	d8801f17 	ldw	r2,124(sp)
 440ee10:	da000404 	addi	r8,sp,16
 440ee14:	003fee06 	br	440edd0 <__reset+0xfb40add0>
 440ee18:	00bfffc4 	movi	r2,-1
 440ee1c:	003a6f06 	br	440d7dc <__reset+0xfb4097dc>
 440ee20:	008011c4 	movi	r2,71
 440ee24:	1440b816 	blt	r2,r17,440f108 <___vfprintf_internal_r+0x1d44>
 440ee28:	040110f4 	movhi	r16,1091
 440ee2c:	84132804 	addi	r16,r16,19616
 440ee30:	00c000c4 	movi	r3,3
 440ee34:	00bfdfc4 	movi	r2,-129
 440ee38:	d8c02a15 	stw	r3,168(sp)
 440ee3c:	90a4703a 	and	r18,r18,r2
 440ee40:	df002783 	ldbu	fp,158(sp)
 440ee44:	d8c02e15 	stw	r3,184(sp)
 440ee48:	d8002915 	stw	zero,164(sp)
 440ee4c:	d8003215 	stw	zero,200(sp)
 440ee50:	003b2906 	br	440daf8 <__reset+0xfb409af8>
 440ee54:	d9002d17 	ldw	r4,180(sp)
 440ee58:	24c00017 	ldw	r19,0(r4)
 440ee5c:	21000104 	addi	r4,r4,4
 440ee60:	d9002d15 	stw	r4,180(sp)
 440ee64:	982dd7fa 	srai	r22,r19,31
 440ee68:	b005883a 	mov	r2,r22
 440ee6c:	003a9f06 	br	440d8ec <__reset+0xfb4098ec>
 440ee70:	d9402d17 	ldw	r5,180(sp)
 440ee74:	d8c02f17 	ldw	r3,188(sp)
 440ee78:	28800017 	ldw	r2,0(r5)
 440ee7c:	29400104 	addi	r5,r5,4
 440ee80:	d9402d15 	stw	r5,180(sp)
 440ee84:	10c00015 	stw	r3,0(r2)
 440ee88:	00398606 	br	440d4a4 <__reset+0xfb4094a4>
 440ee8c:	d9402d17 	ldw	r5,180(sp)
 440ee90:	002d883a 	mov	r22,zero
 440ee94:	2cc00017 	ldw	r19,0(r5)
 440ee98:	29400104 	addi	r5,r5,4
 440ee9c:	d9402d15 	stw	r5,180(sp)
 440eea0:	003c2306 	br	440df30 <__reset+0xfb409f30>
 440eea4:	d8c02d17 	ldw	r3,180(sp)
 440eea8:	d9002917 	ldw	r4,164(sp)
 440eeac:	002d883a 	mov	r22,zero
 440eeb0:	18800104 	addi	r2,r3,4
 440eeb4:	1cc0000b 	ldhu	r19,0(r3)
 440eeb8:	203dc10e 	bge	r4,zero,440e5c0 <__reset+0xfb40a5c0>
 440eebc:	003f7506 	br	440ec94 <__reset+0xfb40ac94>
 440eec0:	040110f4 	movhi	r16,1091
 440eec4:	84132604 	addi	r16,r16,19608
 440eec8:	003acc06 	br	440d9fc <__reset+0xfb4099fc>
 440eecc:	d9002c17 	ldw	r4,176(sp)
 440eed0:	d9801e04 	addi	r6,sp,120
 440eed4:	b80b883a 	mov	r5,r23
 440eed8:	44153ac0 	call	44153ac <__sprint_r>
 440eedc:	103a3b1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440eee0:	dc402617 	ldw	r17,152(sp)
 440eee4:	d8c02017 	ldw	r3,128(sp)
 440eee8:	da000404 	addi	r8,sp,16
 440eeec:	003f9c06 	br	440ed60 <__reset+0xfb40ad60>
 440eef0:	ac400043 	ldbu	r17,1(r21)
 440eef4:	94800814 	ori	r18,r18,32
 440eef8:	ad400044 	addi	r21,r21,1
 440eefc:	8c403fcc 	andi	r17,r17,255
 440ef00:	8c40201c 	xori	r17,r17,128
 440ef04:	8c7fe004 	addi	r17,r17,-128
 440ef08:	00398f06 	br	440d548 <__reset+0xfb409548>
 440ef0c:	d8c02d15 	stw	r3,180(sp)
 440ef10:	0039883a 	mov	fp,zero
 440ef14:	003e3506 	br	440e7ec <__reset+0xfb40a7ec>
 440ef18:	d9002c17 	ldw	r4,176(sp)
 440ef1c:	d9801e04 	addi	r6,sp,120
 440ef20:	b80b883a 	mov	r5,r23
 440ef24:	44153ac0 	call	44153ac <__sprint_r>
 440ef28:	103a281e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440ef2c:	d8c02017 	ldw	r3,128(sp)
 440ef30:	da000404 	addi	r8,sp,16
 440ef34:	003cd006 	br	440e278 <__reset+0xfb40a278>
 440ef38:	8009883a 	mov	r4,r16
 440ef3c:	da003d15 	stw	r8,244(sp)
 440ef40:	440b1540 	call	440b154 <strlen>
 440ef44:	d8802e15 	stw	r2,184(sp)
 440ef48:	da003d17 	ldw	r8,244(sp)
 440ef4c:	103c340e 	bge	r2,zero,440e020 <__reset+0xfb40a020>
 440ef50:	0005883a 	mov	r2,zero
 440ef54:	003c3206 	br	440e020 <__reset+0xfb40a020>
 440ef58:	d9002c17 	ldw	r4,176(sp)
 440ef5c:	d9801e04 	addi	r6,sp,120
 440ef60:	b80b883a 	mov	r5,r23
 440ef64:	44153ac0 	call	44153ac <__sprint_r>
 440ef68:	103a181e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440ef6c:	d8c02017 	ldw	r3,128(sp)
 440ef70:	d8801f17 	ldw	r2,124(sp)
 440ef74:	da000404 	addi	r8,sp,16
 440ef78:	d9403317 	ldw	r5,204(sp)
 440ef7c:	10800044 	addi	r2,r2,1
 440ef80:	44000015 	stw	r16,0(r8)
 440ef84:	28c7883a 	add	r3,r5,r3
 440ef88:	003b7d06 	br	440dd80 <__reset+0xfb409d80>
 440ef8c:	010110f4 	movhi	r4,1091
 440ef90:	21134284 	addi	r4,r4,19722
 440ef94:	d9003515 	stw	r4,212(sp)
 440ef98:	003b1406 	br	440dbec <__reset+0xfb409bec>
 440ef9c:	013fffc4 	movi	r4,-1
 440efa0:	003a3506 	br	440d878 <__reset+0xfb409878>
 440efa4:	0023883a 	mov	r17,zero
 440efa8:	003d9d06 	br	440e620 <__reset+0xfb40a620>
 440efac:	d9002c17 	ldw	r4,176(sp)
 440efb0:	d9801e04 	addi	r6,sp,120
 440efb4:	b80b883a 	mov	r5,r23
 440efb8:	44153ac0 	call	44153ac <__sprint_r>
 440efbc:	103a031e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440efc0:	d8c02017 	ldw	r3,128(sp)
 440efc4:	da000404 	addi	r8,sp,16
 440efc8:	003d9406 	br	440e61c <__reset+0xfb40a61c>
 440efcc:	010110f4 	movhi	r4,1091
 440efd0:	21133e84 	addi	r4,r4,19706
 440efd4:	d9002b15 	stw	r4,172(sp)
 440efd8:	d9002b17 	ldw	r4,172(sp)
 440efdc:	1c47883a 	add	r3,r3,r17
 440efe0:	10800044 	addi	r2,r2,1
 440efe4:	41000015 	stw	r4,0(r8)
 440efe8:	44400115 	stw	r17,4(r8)
 440efec:	d8c02015 	stw	r3,128(sp)
 440eff0:	d8801f15 	stw	r2,124(sp)
 440eff4:	010001c4 	movi	r4,7
 440eff8:	20bfd716 	blt	r4,r2,440ef58 <__reset+0xfb40af58>
 440effc:	42000204 	addi	r8,r8,8
 440f000:	003fdd06 	br	440ef78 <__reset+0xfb40af78>
 440f004:	d9002c17 	ldw	r4,176(sp)
 440f008:	d9801e04 	addi	r6,sp,120
 440f00c:	b80b883a 	mov	r5,r23
 440f010:	44153ac0 	call	44153ac <__sprint_r>
 440f014:	1039ed1e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440f018:	d8802617 	ldw	r2,152(sp)
 440f01c:	d8c02017 	ldw	r3,128(sp)
 440f020:	da000404 	addi	r8,sp,16
 440f024:	003e1006 	br	440e868 <__reset+0xfb40a868>
 440f028:	00800044 	movi	r2,1
 440f02c:	10803fcc 	andi	r2,r2,255
 440f030:	00c00044 	movi	r3,1
 440f034:	10fa3526 	beq	r2,r3,440d90c <__reset+0xfb40990c>
 440f038:	00c00084 	movi	r3,2
 440f03c:	10fbcb26 	beq	r2,r3,440df6c <__reset+0xfb409f6c>
 440f040:	003a8f06 	br	440da80 <__reset+0xfb409a80>
 440f044:	010110f4 	movhi	r4,1091
 440f048:	21134284 	addi	r4,r4,19722
 440f04c:	d9003515 	stw	r4,212(sp)
 440f050:	003b7606 	br	440de2c <__reset+0xfb409e2c>
 440f054:	d8802917 	ldw	r2,164(sp)
 440f058:	00c00184 	movi	r3,6
 440f05c:	1880012e 	bgeu	r3,r2,440f064 <___vfprintf_internal_r+0x1ca0>
 440f060:	1805883a 	mov	r2,r3
 440f064:	d8802e15 	stw	r2,184(sp)
 440f068:	1000ef16 	blt	r2,zero,440f428 <___vfprintf_internal_r+0x2064>
 440f06c:	040110f4 	movhi	r16,1091
 440f070:	d8802a15 	stw	r2,168(sp)
 440f074:	dcc02d15 	stw	r19,180(sp)
 440f078:	d8002915 	stw	zero,164(sp)
 440f07c:	d8003215 	stw	zero,200(sp)
 440f080:	84133404 	addi	r16,r16,19664
 440f084:	0039883a 	mov	fp,zero
 440f088:	003aa206 	br	440db14 <__reset+0xfb409b14>
 440f08c:	0021883a 	mov	r16,zero
 440f090:	003e0706 	br	440e8b0 <__reset+0xfb40a8b0>
 440f094:	d9002c17 	ldw	r4,176(sp)
 440f098:	d9801e04 	addi	r6,sp,120
 440f09c:	b80b883a 	mov	r5,r23
 440f0a0:	44153ac0 	call	44153ac <__sprint_r>
 440f0a4:	1039c91e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440f0a8:	d8802617 	ldw	r2,152(sp)
 440f0ac:	d9403317 	ldw	r5,204(sp)
 440f0b0:	d8c02017 	ldw	r3,128(sp)
 440f0b4:	da000404 	addi	r8,sp,16
 440f0b8:	2885c83a 	sub	r2,r5,r2
 440f0bc:	003dfb06 	br	440e8ac <__reset+0xfb40a8ac>
 440f0c0:	9080004c 	andi	r2,r18,1
 440f0c4:	103e8f1e 	bne	r2,zero,440eb04 <__reset+0xfb40ab04>
 440f0c8:	d8802117 	ldw	r2,132(sp)
 440f0cc:	003e9e06 	br	440eb48 <__reset+0xfb40ab48>
 440f0d0:	1025883a 	mov	r18,r2
 440f0d4:	0039883a 	mov	fp,zero
 440f0d8:	00800084 	movi	r2,2
 440f0dc:	003fd306 	br	440f02c <__reset+0xfb40b02c>
 440f0e0:	07000b44 	movi	fp,45
 440f0e4:	df002785 	stb	fp,158(sp)
 440f0e8:	003a4006 	br	440d9ec <__reset+0xfb4099ec>
 440f0ec:	00c00b44 	movi	r3,45
 440f0f0:	d8c02785 	stb	r3,158(sp)
 440f0f4:	d8802a15 	stw	r2,168(sp)
 440f0f8:	dc802b17 	ldw	r18,172(sp)
 440f0fc:	d8002915 	stw	zero,164(sp)
 440f100:	07000b44 	movi	fp,45
 440f104:	003a8006 	br	440db08 <__reset+0xfb409b08>
 440f108:	040110f4 	movhi	r16,1091
 440f10c:	84132904 	addi	r16,r16,19620
 440f110:	003f4706 	br	440ee30 <__reset+0xfb40ae30>
 440f114:	d8c02d17 	ldw	r3,180(sp)
 440f118:	d9002f17 	ldw	r4,188(sp)
 440f11c:	18800017 	ldw	r2,0(r3)
 440f120:	18c00104 	addi	r3,r3,4
 440f124:	d8c02d15 	stw	r3,180(sp)
 440f128:	11000015 	stw	r4,0(r2)
 440f12c:	0038dd06 	br	440d4a4 <__reset+0xfb4094a4>
 440f130:	dd802617 	ldw	r22,152(sp)
 440f134:	00bfff44 	movi	r2,-3
 440f138:	b0801c16 	blt	r22,r2,440f1ac <___vfprintf_internal_r+0x1de8>
 440f13c:	d9402917 	ldw	r5,164(sp)
 440f140:	2d801a16 	blt	r5,r22,440f1ac <___vfprintf_internal_r+0x1de8>
 440f144:	dd803215 	stw	r22,200(sp)
 440f148:	003e8906 	br	440eb70 <__reset+0xfb40ab70>
 440f14c:	010110f4 	movhi	r4,1091
 440f150:	21133e84 	addi	r4,r4,19706
 440f154:	d9002b15 	stw	r4,172(sp)
 440f158:	003c9106 	br	440e3a0 <__reset+0xfb40a3a0>
 440f15c:	e005883a 	mov	r2,fp
 440f160:	003e7906 	br	440eb48 <__reset+0xfb40ab48>
 440f164:	d9402917 	ldw	r5,164(sp)
 440f168:	df002783 	ldbu	fp,158(sp)
 440f16c:	dcc02d15 	stw	r19,180(sp)
 440f170:	d9402a15 	stw	r5,168(sp)
 440f174:	d9402e15 	stw	r5,184(sp)
 440f178:	d8002915 	stw	zero,164(sp)
 440f17c:	d8003215 	stw	zero,200(sp)
 440f180:	003a5d06 	br	440daf8 <__reset+0xfb409af8>
 440f184:	9080004c 	andi	r2,r18,1
 440f188:	0039883a 	mov	fp,zero
 440f18c:	10000426 	beq	r2,zero,440f1a0 <___vfprintf_internal_r+0x1ddc>
 440f190:	00800c04 	movi	r2,48
 440f194:	dc001dc4 	addi	r16,sp,119
 440f198:	d8801dc5 	stb	r2,119(sp)
 440f19c:	003b8006 	br	440dfa0 <__reset+0xfb409fa0>
 440f1a0:	d8002e15 	stw	zero,184(sp)
 440f1a4:	dc001e04 	addi	r16,sp,120
 440f1a8:	003a4d06 	br	440dae0 <__reset+0xfb409ae0>
 440f1ac:	8c7fff84 	addi	r17,r17,-2
 440f1b0:	b5bfffc4 	addi	r22,r22,-1
 440f1b4:	dd802615 	stw	r22,152(sp)
 440f1b8:	dc4022c5 	stb	r17,139(sp)
 440f1bc:	b000bf16 	blt	r22,zero,440f4bc <___vfprintf_internal_r+0x20f8>
 440f1c0:	00800ac4 	movi	r2,43
 440f1c4:	d8802305 	stb	r2,140(sp)
 440f1c8:	00800244 	movi	r2,9
 440f1cc:	15807016 	blt	r2,r22,440f390 <___vfprintf_internal_r+0x1fcc>
 440f1d0:	00800c04 	movi	r2,48
 440f1d4:	b5800c04 	addi	r22,r22,48
 440f1d8:	d8802345 	stb	r2,141(sp)
 440f1dc:	dd802385 	stb	r22,142(sp)
 440f1e0:	d88023c4 	addi	r2,sp,143
 440f1e4:	df0022c4 	addi	fp,sp,139
 440f1e8:	d8c03317 	ldw	r3,204(sp)
 440f1ec:	1739c83a 	sub	fp,r2,fp
 440f1f0:	d9003317 	ldw	r4,204(sp)
 440f1f4:	e0c7883a 	add	r3,fp,r3
 440f1f8:	df003a15 	stw	fp,232(sp)
 440f1fc:	d8c02e15 	stw	r3,184(sp)
 440f200:	00800044 	movi	r2,1
 440f204:	1100b30e 	bge	r2,r4,440f4d4 <___vfprintf_internal_r+0x2110>
 440f208:	d8c02e17 	ldw	r3,184(sp)
 440f20c:	18c00044 	addi	r3,r3,1
 440f210:	d8c02e15 	stw	r3,184(sp)
 440f214:	1805883a 	mov	r2,r3
 440f218:	1800ac16 	blt	r3,zero,440f4cc <___vfprintf_internal_r+0x2108>
 440f21c:	d8003215 	stw	zero,200(sp)
 440f220:	003e5d06 	br	440eb98 <__reset+0xfb40ab98>
 440f224:	d9002c17 	ldw	r4,176(sp)
 440f228:	d9801e04 	addi	r6,sp,120
 440f22c:	b80b883a 	mov	r5,r23
 440f230:	44153ac0 	call	44153ac <__sprint_r>
 440f234:	1039651e 	bne	r2,zero,440d7cc <__reset+0xfb4097cc>
 440f238:	dc402617 	ldw	r17,152(sp)
 440f23c:	d8c02017 	ldw	r3,128(sp)
 440f240:	d8801f17 	ldw	r2,124(sp)
 440f244:	da000404 	addi	r8,sp,16
 440f248:	003ed606 	br	440eda4 <__reset+0xfb40ada4>
 440f24c:	582b883a 	mov	r21,r11
 440f250:	d8002915 	stw	zero,164(sp)
 440f254:	0038bd06 	br	440d54c <__reset+0xfb40954c>
 440f258:	d8802917 	ldw	r2,164(sp)
 440f25c:	103e071e 	bne	r2,zero,440ea7c <__reset+0xfb40aa7c>
 440f260:	dc002915 	stw	r16,164(sp)
 440f264:	003e0506 	br	440ea7c <__reset+0xfb40aa7c>
 440f268:	d9002917 	ldw	r4,164(sp)
 440f26c:	20c00044 	addi	r3,r4,1
 440f270:	003e0f06 	br	440eab0 <__reset+0xfb40aab0>
 440f274:	01400184 	movi	r5,6
 440f278:	d9402915 	stw	r5,164(sp)
 440f27c:	003dff06 	br	440ea7c <__reset+0xfb40aa7c>
 440f280:	d8802104 	addi	r2,sp,132
 440f284:	d8800315 	stw	r2,12(sp)
 440f288:	d8802504 	addi	r2,sp,148
 440f28c:	d8800215 	stw	r2,8(sp)
 440f290:	d8802604 	addi	r2,sp,152
 440f294:	d8800115 	stw	r2,4(sp)
 440f298:	d8802917 	ldw	r2,164(sp)
 440f29c:	d9403617 	ldw	r5,216(sp)
 440f2a0:	d9002c17 	ldw	r4,176(sp)
 440f2a4:	d8800015 	stw	r2,0(sp)
 440f2a8:	01c000c4 	movi	r7,3
 440f2ac:	980d883a 	mov	r6,r19
 440f2b0:	da003d15 	stw	r8,244(sp)
 440f2b4:	440fb0c0 	call	440fb0c <_dtoa_r>
 440f2b8:	d8c02917 	ldw	r3,164(sp)
 440f2bc:	da003d17 	ldw	r8,244(sp)
 440f2c0:	1021883a 	mov	r16,r2
 440f2c4:	10f9883a 	add	fp,r2,r3
 440f2c8:	81000007 	ldb	r4,0(r16)
 440f2cc:	00800c04 	movi	r2,48
 440f2d0:	20805e26 	beq	r4,r2,440f44c <___vfprintf_internal_r+0x2088>
 440f2d4:	d8c02617 	ldw	r3,152(sp)
 440f2d8:	e0f9883a 	add	fp,fp,r3
 440f2dc:	003e0a06 	br	440eb08 <__reset+0xfb40ab08>
 440f2e0:	00c00b44 	movi	r3,45
 440f2e4:	24e0003c 	xorhi	r19,r4,32768
 440f2e8:	d8c02a05 	stb	r3,168(sp)
 440f2ec:	003de906 	br	440ea94 <__reset+0xfb40aa94>
 440f2f0:	d8c03217 	ldw	r3,200(sp)
 440f2f4:	00c07a0e 	bge	zero,r3,440f4e0 <___vfprintf_internal_r+0x211c>
 440f2f8:	00800044 	movi	r2,1
 440f2fc:	d9003317 	ldw	r4,204(sp)
 440f300:	1105883a 	add	r2,r2,r4
 440f304:	d8802e15 	stw	r2,184(sp)
 440f308:	10004e16 	blt	r2,zero,440f444 <___vfprintf_internal_r+0x2080>
 440f30c:	044019c4 	movi	r17,103
 440f310:	003e2106 	br	440eb98 <__reset+0xfb40ab98>
 440f314:	d9002917 	ldw	r4,164(sp)
 440f318:	d8802104 	addi	r2,sp,132
 440f31c:	d8800315 	stw	r2,12(sp)
 440f320:	d9000015 	stw	r4,0(sp)
 440f324:	d8802504 	addi	r2,sp,148
 440f328:	d9403617 	ldw	r5,216(sp)
 440f32c:	d9002c17 	ldw	r4,176(sp)
 440f330:	d8800215 	stw	r2,8(sp)
 440f334:	d8802604 	addi	r2,sp,152
 440f338:	d8800115 	stw	r2,4(sp)
 440f33c:	01c000c4 	movi	r7,3
 440f340:	980d883a 	mov	r6,r19
 440f344:	da003d15 	stw	r8,244(sp)
 440f348:	440fb0c0 	call	440fb0c <_dtoa_r>
 440f34c:	d8c02917 	ldw	r3,164(sp)
 440f350:	da003d17 	ldw	r8,244(sp)
 440f354:	1021883a 	mov	r16,r2
 440f358:	00801184 	movi	r2,70
 440f35c:	80f9883a 	add	fp,r16,r3
 440f360:	88bfd926 	beq	r17,r2,440f2c8 <__reset+0xfb40b2c8>
 440f364:	003de806 	br	440eb08 <__reset+0xfb40ab08>
 440f368:	d9002917 	ldw	r4,164(sp)
 440f36c:	00c04d0e 	bge	zero,r3,440f4a4 <___vfprintf_internal_r+0x20e0>
 440f370:	2000441e 	bne	r4,zero,440f484 <___vfprintf_internal_r+0x20c0>
 440f374:	9480004c 	andi	r18,r18,1
 440f378:	9000421e 	bne	r18,zero,440f484 <___vfprintf_internal_r+0x20c0>
 440f37c:	1805883a 	mov	r2,r3
 440f380:	18007016 	blt	r3,zero,440f544 <___vfprintf_internal_r+0x2180>
 440f384:	d8c03217 	ldw	r3,200(sp)
 440f388:	d8c02e15 	stw	r3,184(sp)
 440f38c:	003e0206 	br	440eb98 <__reset+0xfb40ab98>
 440f390:	df0022c4 	addi	fp,sp,139
 440f394:	dc002915 	stw	r16,164(sp)
 440f398:	4027883a 	mov	r19,r8
 440f39c:	e021883a 	mov	r16,fp
 440f3a0:	b009883a 	mov	r4,r22
 440f3a4:	01400284 	movi	r5,10
 440f3a8:	4407e2c0 	call	4407e2c <__modsi3>
 440f3ac:	10800c04 	addi	r2,r2,48
 440f3b0:	843fffc4 	addi	r16,r16,-1
 440f3b4:	b009883a 	mov	r4,r22
 440f3b8:	01400284 	movi	r5,10
 440f3bc:	80800005 	stb	r2,0(r16)
 440f3c0:	4407da80 	call	4407da8 <__divsi3>
 440f3c4:	102d883a 	mov	r22,r2
 440f3c8:	00800244 	movi	r2,9
 440f3cc:	15bff416 	blt	r2,r22,440f3a0 <__reset+0xfb40b3a0>
 440f3d0:	9811883a 	mov	r8,r19
 440f3d4:	b0800c04 	addi	r2,r22,48
 440f3d8:	8027883a 	mov	r19,r16
 440f3dc:	997fffc4 	addi	r5,r19,-1
 440f3e0:	98bfffc5 	stb	r2,-1(r19)
 440f3e4:	dc002917 	ldw	r16,164(sp)
 440f3e8:	2f006a2e 	bgeu	r5,fp,440f594 <___vfprintf_internal_r+0x21d0>
 440f3ec:	d9c02384 	addi	r7,sp,142
 440f3f0:	3ccfc83a 	sub	r7,r7,r19
 440f3f4:	d9002344 	addi	r4,sp,141
 440f3f8:	e1cf883a 	add	r7,fp,r7
 440f3fc:	00000106 	br	440f404 <___vfprintf_internal_r+0x2040>
 440f400:	28800003 	ldbu	r2,0(r5)
 440f404:	20800005 	stb	r2,0(r4)
 440f408:	21000044 	addi	r4,r4,1
 440f40c:	29400044 	addi	r5,r5,1
 440f410:	393ffb1e 	bne	r7,r4,440f400 <__reset+0xfb40b400>
 440f414:	d8802304 	addi	r2,sp,140
 440f418:	14c5c83a 	sub	r2,r2,r19
 440f41c:	d8c02344 	addi	r3,sp,141
 440f420:	1885883a 	add	r2,r3,r2
 440f424:	003f7006 	br	440f1e8 <__reset+0xfb40b1e8>
 440f428:	0005883a 	mov	r2,zero
 440f42c:	003f0f06 	br	440f06c <__reset+0xfb40b06c>
 440f430:	d8c03217 	ldw	r3,200(sp)
 440f434:	18c00044 	addi	r3,r3,1
 440f438:	d8c02e15 	stw	r3,184(sp)
 440f43c:	1805883a 	mov	r2,r3
 440f440:	183fb20e 	bge	r3,zero,440f30c <__reset+0xfb40b30c>
 440f444:	0005883a 	mov	r2,zero
 440f448:	003fb006 	br	440f30c <__reset+0xfb40b30c>
 440f44c:	d9003617 	ldw	r4,216(sp)
 440f450:	000d883a 	mov	r6,zero
 440f454:	000f883a 	mov	r7,zero
 440f458:	980b883a 	mov	r5,r19
 440f45c:	d8c03c15 	stw	r3,240(sp)
 440f460:	da003d15 	stw	r8,244(sp)
 440f464:	4417cdc0 	call	4417cdc <__eqdf2>
 440f468:	d8c03c17 	ldw	r3,240(sp)
 440f46c:	da003d17 	ldw	r8,244(sp)
 440f470:	103f9826 	beq	r2,zero,440f2d4 <__reset+0xfb40b2d4>
 440f474:	00800044 	movi	r2,1
 440f478:	10c7c83a 	sub	r3,r2,r3
 440f47c:	d8c02615 	stw	r3,152(sp)
 440f480:	003f9506 	br	440f2d8 <__reset+0xfb40b2d8>
 440f484:	d9002917 	ldw	r4,164(sp)
 440f488:	d8c03217 	ldw	r3,200(sp)
 440f48c:	20800044 	addi	r2,r4,1
 440f490:	1885883a 	add	r2,r3,r2
 440f494:	d8802e15 	stw	r2,184(sp)
 440f498:	103dbf0e 	bge	r2,zero,440eb98 <__reset+0xfb40ab98>
 440f49c:	0005883a 	mov	r2,zero
 440f4a0:	003dbd06 	br	440eb98 <__reset+0xfb40ab98>
 440f4a4:	2000211e 	bne	r4,zero,440f52c <___vfprintf_internal_r+0x2168>
 440f4a8:	9480004c 	andi	r18,r18,1
 440f4ac:	90001f1e 	bne	r18,zero,440f52c <___vfprintf_internal_r+0x2168>
 440f4b0:	00800044 	movi	r2,1
 440f4b4:	d8802e15 	stw	r2,184(sp)
 440f4b8:	003db706 	br	440eb98 <__reset+0xfb40ab98>
 440f4bc:	00800b44 	movi	r2,45
 440f4c0:	05adc83a 	sub	r22,zero,r22
 440f4c4:	d8802305 	stb	r2,140(sp)
 440f4c8:	003f3f06 	br	440f1c8 <__reset+0xfb40b1c8>
 440f4cc:	0005883a 	mov	r2,zero
 440f4d0:	003f5206 	br	440f21c <__reset+0xfb40b21c>
 440f4d4:	90a4703a 	and	r18,r18,r2
 440f4d8:	903f4e26 	beq	r18,zero,440f214 <__reset+0xfb40b214>
 440f4dc:	003f4a06 	br	440f208 <__reset+0xfb40b208>
 440f4e0:	00800084 	movi	r2,2
 440f4e4:	10c5c83a 	sub	r2,r2,r3
 440f4e8:	003f8406 	br	440f2fc <__reset+0xfb40b2fc>
 440f4ec:	d8802d17 	ldw	r2,180(sp)
 440f4f0:	d9002d17 	ldw	r4,180(sp)
 440f4f4:	ac400043 	ldbu	r17,1(r21)
 440f4f8:	10800017 	ldw	r2,0(r2)
 440f4fc:	582b883a 	mov	r21,r11
 440f500:	d8802915 	stw	r2,164(sp)
 440f504:	20800104 	addi	r2,r4,4
 440f508:	d9002917 	ldw	r4,164(sp)
 440f50c:	d8802d15 	stw	r2,180(sp)
 440f510:	203e7a0e 	bge	r4,zero,440eefc <__reset+0xfb40aefc>
 440f514:	8c403fcc 	andi	r17,r17,255
 440f518:	00bfffc4 	movi	r2,-1
 440f51c:	8c40201c 	xori	r17,r17,128
 440f520:	d8802915 	stw	r2,164(sp)
 440f524:	8c7fe004 	addi	r17,r17,-128
 440f528:	00380706 	br	440d548 <__reset+0xfb409548>
 440f52c:	d8c02917 	ldw	r3,164(sp)
 440f530:	18c00084 	addi	r3,r3,2
 440f534:	d8c02e15 	stw	r3,184(sp)
 440f538:	1805883a 	mov	r2,r3
 440f53c:	183d960e 	bge	r3,zero,440eb98 <__reset+0xfb40ab98>
 440f540:	003fd606 	br	440f49c <__reset+0xfb40b49c>
 440f544:	0005883a 	mov	r2,zero
 440f548:	003f8e06 	br	440f384 <__reset+0xfb40b384>
 440f54c:	9080004c 	andi	r2,r18,1
 440f550:	103f811e 	bne	r2,zero,440f358 <__reset+0xfb40b358>
 440f554:	d8802117 	ldw	r2,132(sp)
 440f558:	1405c83a 	sub	r2,r2,r16
 440f55c:	d8803315 	stw	r2,204(sp)
 440f560:	b47ef326 	beq	r22,r17,440f130 <__reset+0xfb40b130>
 440f564:	dd802617 	ldw	r22,152(sp)
 440f568:	003f1106 	br	440f1b0 <__reset+0xfb40b1b0>
 440f56c:	d9c02785 	stb	r7,158(sp)
 440f570:	00390406 	br	440d984 <__reset+0xfb409984>
 440f574:	d9c02785 	stb	r7,158(sp)
 440f578:	0038d306 	br	440d8c8 <__reset+0xfb4098c8>
 440f57c:	d9c02785 	stb	r7,158(sp)
 440f580:	003a6106 	br	440df08 <__reset+0xfb409f08>
 440f584:	d9c02785 	stb	r7,158(sp)
 440f588:	003af806 	br	440e16c <__reset+0xfb40a16c>
 440f58c:	0005883a 	mov	r2,zero
 440f590:	003d7e06 	br	440eb8c <__reset+0xfb40ab8c>
 440f594:	d8802344 	addi	r2,sp,141
 440f598:	003f1306 	br	440f1e8 <__reset+0xfb40b1e8>
 440f59c:	d9c02785 	stb	r7,158(sp)
 440f5a0:	00392306 	br	440da30 <__reset+0xfb409a30>
 440f5a4:	d9c02785 	stb	r7,158(sp)
 440f5a8:	003aa906 	br	440e050 <__reset+0xfb40a050>
 440f5ac:	d9c02785 	stb	r7,158(sp)
 440f5b0:	003a3d06 	br	440dea8 <__reset+0xfb409ea8>
 440f5b4:	d9c02785 	stb	r7,158(sp)
 440f5b8:	003aca06 	br	440e0e4 <__reset+0xfb40a0e4>

0440f5bc <__vfprintf_internal>:
 440f5bc:	00811134 	movhi	r2,1092
 440f5c0:	10a15004 	addi	r2,r2,-31424
 440f5c4:	300f883a 	mov	r7,r6
 440f5c8:	280d883a 	mov	r6,r5
 440f5cc:	200b883a 	mov	r5,r4
 440f5d0:	11000017 	ldw	r4,0(r2)
 440f5d4:	440d3c41 	jmpi	440d3c4 <___vfprintf_internal_r>

0440f5d8 <__sbprintf>:
 440f5d8:	2880030b 	ldhu	r2,12(r5)
 440f5dc:	2ac01917 	ldw	r11,100(r5)
 440f5e0:	2a80038b 	ldhu	r10,14(r5)
 440f5e4:	2a400717 	ldw	r9,28(r5)
 440f5e8:	2a000917 	ldw	r8,36(r5)
 440f5ec:	defee204 	addi	sp,sp,-1144
 440f5f0:	00c10004 	movi	r3,1024
 440f5f4:	dc011a15 	stw	r16,1128(sp)
 440f5f8:	10bfff4c 	andi	r2,r2,65533
 440f5fc:	2821883a 	mov	r16,r5
 440f600:	d8cb883a 	add	r5,sp,r3
 440f604:	dc811c15 	stw	r18,1136(sp)
 440f608:	dc411b15 	stw	r17,1132(sp)
 440f60c:	dfc11d15 	stw	ra,1140(sp)
 440f610:	2025883a 	mov	r18,r4
 440f614:	d881030d 	sth	r2,1036(sp)
 440f618:	dac11915 	stw	r11,1124(sp)
 440f61c:	da81038d 	sth	r10,1038(sp)
 440f620:	da410715 	stw	r9,1052(sp)
 440f624:	da010915 	stw	r8,1060(sp)
 440f628:	dec10015 	stw	sp,1024(sp)
 440f62c:	dec10415 	stw	sp,1040(sp)
 440f630:	d8c10215 	stw	r3,1032(sp)
 440f634:	d8c10515 	stw	r3,1044(sp)
 440f638:	d8010615 	stw	zero,1048(sp)
 440f63c:	440d3c40 	call	440d3c4 <___vfprintf_internal_r>
 440f640:	1023883a 	mov	r17,r2
 440f644:	10000416 	blt	r2,zero,440f658 <__sbprintf+0x80>
 440f648:	d9410004 	addi	r5,sp,1024
 440f64c:	9009883a 	mov	r4,r18
 440f650:	44113b00 	call	44113b0 <_fflush_r>
 440f654:	10000d1e 	bne	r2,zero,440f68c <__sbprintf+0xb4>
 440f658:	d881030b 	ldhu	r2,1036(sp)
 440f65c:	1080100c 	andi	r2,r2,64
 440f660:	10000326 	beq	r2,zero,440f670 <__sbprintf+0x98>
 440f664:	8080030b 	ldhu	r2,12(r16)
 440f668:	10801014 	ori	r2,r2,64
 440f66c:	8080030d 	sth	r2,12(r16)
 440f670:	8805883a 	mov	r2,r17
 440f674:	dfc11d17 	ldw	ra,1140(sp)
 440f678:	dc811c17 	ldw	r18,1136(sp)
 440f67c:	dc411b17 	ldw	r17,1132(sp)
 440f680:	dc011a17 	ldw	r16,1128(sp)
 440f684:	dec11e04 	addi	sp,sp,1144
 440f688:	f800283a 	ret
 440f68c:	047fffc4 	movi	r17,-1
 440f690:	003ff106 	br	440f658 <__reset+0xfb40b658>

0440f694 <_vsnprintf_r>:
 440f694:	30003716 	blt	r6,zero,440f774 <_vsnprintf_r+0xe0>
 440f698:	deffe404 	addi	sp,sp,-112
 440f69c:	00c08204 	movi	r3,520
 440f6a0:	dc001a15 	stw	r16,104(sp)
 440f6a4:	3005883a 	mov	r2,r6
 440f6a8:	dfc01b15 	stw	ra,108(sp)
 440f6ac:	d8c0030d 	sth	r3,12(sp)
 440f6b0:	d9400015 	stw	r5,0(sp)
 440f6b4:	d9400415 	stw	r5,16(sp)
 440f6b8:	380d883a 	mov	r6,r7
 440f6bc:	2021883a 	mov	r16,r4
 440f6c0:	10001326 	beq	r2,zero,440f710 <_vsnprintf_r+0x7c>
 440f6c4:	00c11134 	movhi	r3,1092
 440f6c8:	18e15004 	addi	r3,r3,-31424
 440f6cc:	19000017 	ldw	r4,0(r3)
 440f6d0:	d9c01c17 	ldw	r7,112(sp)
 440f6d4:	10bfffc4 	addi	r2,r2,-1
 440f6d8:	d8800215 	stw	r2,8(sp)
 440f6dc:	d8800515 	stw	r2,20(sp)
 440f6e0:	d80b883a 	mov	r5,sp
 440f6e4:	00bfffc4 	movi	r2,-1
 440f6e8:	d880038d 	sth	r2,14(sp)
 440f6ec:	440b1ec0 	call	440b1ec <___svfprintf_internal_r>
 440f6f0:	00ffffc4 	movi	r3,-1
 440f6f4:	10c01616 	blt	r2,r3,440f750 <_vsnprintf_r+0xbc>
 440f6f8:	d8c00017 	ldw	r3,0(sp)
 440f6fc:	18000005 	stb	zero,0(r3)
 440f700:	dfc01b17 	ldw	ra,108(sp)
 440f704:	dc001a17 	ldw	r16,104(sp)
 440f708:	dec01c04 	addi	sp,sp,112
 440f70c:	f800283a 	ret
 440f710:	00811134 	movhi	r2,1092
 440f714:	10a15004 	addi	r2,r2,-31424
 440f718:	11000017 	ldw	r4,0(r2)
 440f71c:	d9c01c17 	ldw	r7,112(sp)
 440f720:	00bfffc4 	movi	r2,-1
 440f724:	d80b883a 	mov	r5,sp
 440f728:	d8000215 	stw	zero,8(sp)
 440f72c:	d8000515 	stw	zero,20(sp)
 440f730:	d880038d 	sth	r2,14(sp)
 440f734:	440b1ec0 	call	440b1ec <___svfprintf_internal_r>
 440f738:	00ffffc4 	movi	r3,-1
 440f73c:	10c00716 	blt	r2,r3,440f75c <_vsnprintf_r+0xc8>
 440f740:	dfc01b17 	ldw	ra,108(sp)
 440f744:	dc001a17 	ldw	r16,104(sp)
 440f748:	dec01c04 	addi	sp,sp,112
 440f74c:	f800283a 	ret
 440f750:	00c022c4 	movi	r3,139
 440f754:	80c00015 	stw	r3,0(r16)
 440f758:	003fe706 	br	440f6f8 <__reset+0xfb40b6f8>
 440f75c:	00c022c4 	movi	r3,139
 440f760:	80c00015 	stw	r3,0(r16)
 440f764:	dfc01b17 	ldw	ra,108(sp)
 440f768:	dc001a17 	ldw	r16,104(sp)
 440f76c:	dec01c04 	addi	sp,sp,112
 440f770:	f800283a 	ret
 440f774:	008022c4 	movi	r2,139
 440f778:	20800015 	stw	r2,0(r4)
 440f77c:	00bfffc4 	movi	r2,-1
 440f780:	f800283a 	ret

0440f784 <vsnprintf>:
 440f784:	defffe04 	addi	sp,sp,-8
 440f788:	00811134 	movhi	r2,1092
 440f78c:	d9c00015 	stw	r7,0(sp)
 440f790:	10a15004 	addi	r2,r2,-31424
 440f794:	300f883a 	mov	r7,r6
 440f798:	280d883a 	mov	r6,r5
 440f79c:	200b883a 	mov	r5,r4
 440f7a0:	11000017 	ldw	r4,0(r2)
 440f7a4:	dfc00115 	stw	ra,4(sp)
 440f7a8:	440f6940 	call	440f694 <_vsnprintf_r>
 440f7ac:	dfc00117 	ldw	ra,4(sp)
 440f7b0:	dec00204 	addi	sp,sp,8
 440f7b4:	f800283a 	ret

0440f7b8 <__swsetup_r>:
 440f7b8:	00811134 	movhi	r2,1092
 440f7bc:	defffd04 	addi	sp,sp,-12
 440f7c0:	10a15004 	addi	r2,r2,-31424
 440f7c4:	dc400115 	stw	r17,4(sp)
 440f7c8:	2023883a 	mov	r17,r4
 440f7cc:	11000017 	ldw	r4,0(r2)
 440f7d0:	dc000015 	stw	r16,0(sp)
 440f7d4:	dfc00215 	stw	ra,8(sp)
 440f7d8:	2821883a 	mov	r16,r5
 440f7dc:	20000226 	beq	r4,zero,440f7e8 <__swsetup_r+0x30>
 440f7e0:	20800e17 	ldw	r2,56(r4)
 440f7e4:	10003126 	beq	r2,zero,440f8ac <__swsetup_r+0xf4>
 440f7e8:	8080030b 	ldhu	r2,12(r16)
 440f7ec:	10c0020c 	andi	r3,r2,8
 440f7f0:	1009883a 	mov	r4,r2
 440f7f4:	18000f26 	beq	r3,zero,440f834 <__swsetup_r+0x7c>
 440f7f8:	80c00417 	ldw	r3,16(r16)
 440f7fc:	18001526 	beq	r3,zero,440f854 <__swsetup_r+0x9c>
 440f800:	1100004c 	andi	r4,r2,1
 440f804:	20001c1e 	bne	r4,zero,440f878 <__swsetup_r+0xc0>
 440f808:	1080008c 	andi	r2,r2,2
 440f80c:	1000291e 	bne	r2,zero,440f8b4 <__swsetup_r+0xfc>
 440f810:	80800517 	ldw	r2,20(r16)
 440f814:	80800215 	stw	r2,8(r16)
 440f818:	18001c26 	beq	r3,zero,440f88c <__swsetup_r+0xd4>
 440f81c:	0005883a 	mov	r2,zero
 440f820:	dfc00217 	ldw	ra,8(sp)
 440f824:	dc400117 	ldw	r17,4(sp)
 440f828:	dc000017 	ldw	r16,0(sp)
 440f82c:	dec00304 	addi	sp,sp,12
 440f830:	f800283a 	ret
 440f834:	2080040c 	andi	r2,r4,16
 440f838:	10002e26 	beq	r2,zero,440f8f4 <__swsetup_r+0x13c>
 440f83c:	2080010c 	andi	r2,r4,4
 440f840:	10001e1e 	bne	r2,zero,440f8bc <__swsetup_r+0x104>
 440f844:	80c00417 	ldw	r3,16(r16)
 440f848:	20800214 	ori	r2,r4,8
 440f84c:	8080030d 	sth	r2,12(r16)
 440f850:	183feb1e 	bne	r3,zero,440f800 <__reset+0xfb40b800>
 440f854:	1100a00c 	andi	r4,r2,640
 440f858:	01408004 	movi	r5,512
 440f85c:	217fe826 	beq	r4,r5,440f800 <__reset+0xfb40b800>
 440f860:	800b883a 	mov	r5,r16
 440f864:	8809883a 	mov	r4,r17
 440f868:	44123300 	call	4412330 <__smakebuf_r>
 440f86c:	8080030b 	ldhu	r2,12(r16)
 440f870:	80c00417 	ldw	r3,16(r16)
 440f874:	003fe206 	br	440f800 <__reset+0xfb40b800>
 440f878:	80800517 	ldw	r2,20(r16)
 440f87c:	80000215 	stw	zero,8(r16)
 440f880:	0085c83a 	sub	r2,zero,r2
 440f884:	80800615 	stw	r2,24(r16)
 440f888:	183fe41e 	bne	r3,zero,440f81c <__reset+0xfb40b81c>
 440f88c:	80c0030b 	ldhu	r3,12(r16)
 440f890:	0005883a 	mov	r2,zero
 440f894:	1900200c 	andi	r4,r3,128
 440f898:	203fe126 	beq	r4,zero,440f820 <__reset+0xfb40b820>
 440f89c:	18c01014 	ori	r3,r3,64
 440f8a0:	80c0030d 	sth	r3,12(r16)
 440f8a4:	00bfffc4 	movi	r2,-1
 440f8a8:	003fdd06 	br	440f820 <__reset+0xfb40b820>
 440f8ac:	441178c0 	call	441178c <__sinit>
 440f8b0:	003fcd06 	br	440f7e8 <__reset+0xfb40b7e8>
 440f8b4:	0005883a 	mov	r2,zero
 440f8b8:	003fd606 	br	440f814 <__reset+0xfb40b814>
 440f8bc:	81400c17 	ldw	r5,48(r16)
 440f8c0:	28000626 	beq	r5,zero,440f8dc <__swsetup_r+0x124>
 440f8c4:	80801004 	addi	r2,r16,64
 440f8c8:	28800326 	beq	r5,r2,440f8d8 <__swsetup_r+0x120>
 440f8cc:	8809883a 	mov	r4,r17
 440f8d0:	44119000 	call	4411900 <_free_r>
 440f8d4:	8100030b 	ldhu	r4,12(r16)
 440f8d8:	80000c15 	stw	zero,48(r16)
 440f8dc:	80c00417 	ldw	r3,16(r16)
 440f8e0:	00bff6c4 	movi	r2,-37
 440f8e4:	1108703a 	and	r4,r2,r4
 440f8e8:	80000115 	stw	zero,4(r16)
 440f8ec:	80c00015 	stw	r3,0(r16)
 440f8f0:	003fd506 	br	440f848 <__reset+0xfb40b848>
 440f8f4:	00800244 	movi	r2,9
 440f8f8:	88800015 	stw	r2,0(r17)
 440f8fc:	20801014 	ori	r2,r4,64
 440f900:	8080030d 	sth	r2,12(r16)
 440f904:	00bfffc4 	movi	r2,-1
 440f908:	003fc506 	br	440f820 <__reset+0xfb40b820>

0440f90c <quorem>:
 440f90c:	defff704 	addi	sp,sp,-36
 440f910:	dc800215 	stw	r18,8(sp)
 440f914:	20800417 	ldw	r2,16(r4)
 440f918:	2c800417 	ldw	r18,16(r5)
 440f91c:	dfc00815 	stw	ra,32(sp)
 440f920:	ddc00715 	stw	r23,28(sp)
 440f924:	dd800615 	stw	r22,24(sp)
 440f928:	dd400515 	stw	r21,20(sp)
 440f92c:	dd000415 	stw	r20,16(sp)
 440f930:	dcc00315 	stw	r19,12(sp)
 440f934:	dc400115 	stw	r17,4(sp)
 440f938:	dc000015 	stw	r16,0(sp)
 440f93c:	14807116 	blt	r2,r18,440fb04 <quorem+0x1f8>
 440f940:	94bfffc4 	addi	r18,r18,-1
 440f944:	94ad883a 	add	r22,r18,r18
 440f948:	b5ad883a 	add	r22,r22,r22
 440f94c:	2c400504 	addi	r17,r5,20
 440f950:	8da9883a 	add	r20,r17,r22
 440f954:	25400504 	addi	r21,r4,20
 440f958:	282f883a 	mov	r23,r5
 440f95c:	adad883a 	add	r22,r21,r22
 440f960:	a1400017 	ldw	r5,0(r20)
 440f964:	2021883a 	mov	r16,r4
 440f968:	b1000017 	ldw	r4,0(r22)
 440f96c:	29400044 	addi	r5,r5,1
 440f970:	4407ea00 	call	4407ea0 <__udivsi3>
 440f974:	1027883a 	mov	r19,r2
 440f978:	10002c26 	beq	r2,zero,440fa2c <quorem+0x120>
 440f97c:	a813883a 	mov	r9,r21
 440f980:	880b883a 	mov	r5,r17
 440f984:	0009883a 	mov	r4,zero
 440f988:	000d883a 	mov	r6,zero
 440f98c:	2a000017 	ldw	r8,0(r5)
 440f990:	49c00017 	ldw	r7,0(r9)
 440f994:	29400104 	addi	r5,r5,4
 440f998:	40bfffcc 	andi	r2,r8,65535
 440f99c:	14c5383a 	mul	r2,r2,r19
 440f9a0:	4010d43a 	srli	r8,r8,16
 440f9a4:	38ffffcc 	andi	r3,r7,65535
 440f9a8:	1105883a 	add	r2,r2,r4
 440f9ac:	1008d43a 	srli	r4,r2,16
 440f9b0:	44d1383a 	mul	r8,r8,r19
 440f9b4:	198d883a 	add	r6,r3,r6
 440f9b8:	10ffffcc 	andi	r3,r2,65535
 440f9bc:	30c7c83a 	sub	r3,r6,r3
 440f9c0:	380ed43a 	srli	r7,r7,16
 440f9c4:	4105883a 	add	r2,r8,r4
 440f9c8:	180dd43a 	srai	r6,r3,16
 440f9cc:	113fffcc 	andi	r4,r2,65535
 440f9d0:	390fc83a 	sub	r7,r7,r4
 440f9d4:	398d883a 	add	r6,r7,r6
 440f9d8:	300e943a 	slli	r7,r6,16
 440f9dc:	18ffffcc 	andi	r3,r3,65535
 440f9e0:	1008d43a 	srli	r4,r2,16
 440f9e4:	38ceb03a 	or	r7,r7,r3
 440f9e8:	49c00015 	stw	r7,0(r9)
 440f9ec:	300dd43a 	srai	r6,r6,16
 440f9f0:	4a400104 	addi	r9,r9,4
 440f9f4:	a17fe52e 	bgeu	r20,r5,440f98c <__reset+0xfb40b98c>
 440f9f8:	b0800017 	ldw	r2,0(r22)
 440f9fc:	10000b1e 	bne	r2,zero,440fa2c <quorem+0x120>
 440fa00:	b0bfff04 	addi	r2,r22,-4
 440fa04:	a880082e 	bgeu	r21,r2,440fa28 <quorem+0x11c>
 440fa08:	b0ffff17 	ldw	r3,-4(r22)
 440fa0c:	18000326 	beq	r3,zero,440fa1c <quorem+0x110>
 440fa10:	00000506 	br	440fa28 <quorem+0x11c>
 440fa14:	10c00017 	ldw	r3,0(r2)
 440fa18:	1800031e 	bne	r3,zero,440fa28 <quorem+0x11c>
 440fa1c:	10bfff04 	addi	r2,r2,-4
 440fa20:	94bfffc4 	addi	r18,r18,-1
 440fa24:	a8bffb36 	bltu	r21,r2,440fa14 <__reset+0xfb40ba14>
 440fa28:	84800415 	stw	r18,16(r16)
 440fa2c:	b80b883a 	mov	r5,r23
 440fa30:	8009883a 	mov	r4,r16
 440fa34:	4412ff40 	call	4412ff4 <__mcmp>
 440fa38:	10002616 	blt	r2,zero,440fad4 <quorem+0x1c8>
 440fa3c:	9cc00044 	addi	r19,r19,1
 440fa40:	a805883a 	mov	r2,r21
 440fa44:	000b883a 	mov	r5,zero
 440fa48:	11000017 	ldw	r4,0(r2)
 440fa4c:	89800017 	ldw	r6,0(r17)
 440fa50:	10800104 	addi	r2,r2,4
 440fa54:	20ffffcc 	andi	r3,r4,65535
 440fa58:	194b883a 	add	r5,r3,r5
 440fa5c:	30ffffcc 	andi	r3,r6,65535
 440fa60:	28c7c83a 	sub	r3,r5,r3
 440fa64:	300cd43a 	srli	r6,r6,16
 440fa68:	2008d43a 	srli	r4,r4,16
 440fa6c:	180bd43a 	srai	r5,r3,16
 440fa70:	18ffffcc 	andi	r3,r3,65535
 440fa74:	2189c83a 	sub	r4,r4,r6
 440fa78:	2149883a 	add	r4,r4,r5
 440fa7c:	200c943a 	slli	r6,r4,16
 440fa80:	8c400104 	addi	r17,r17,4
 440fa84:	200bd43a 	srai	r5,r4,16
 440fa88:	30c6b03a 	or	r3,r6,r3
 440fa8c:	10ffff15 	stw	r3,-4(r2)
 440fa90:	a47fed2e 	bgeu	r20,r17,440fa48 <__reset+0xfb40ba48>
 440fa94:	9485883a 	add	r2,r18,r18
 440fa98:	1085883a 	add	r2,r2,r2
 440fa9c:	a887883a 	add	r3,r21,r2
 440faa0:	18800017 	ldw	r2,0(r3)
 440faa4:	10000b1e 	bne	r2,zero,440fad4 <quorem+0x1c8>
 440faa8:	18bfff04 	addi	r2,r3,-4
 440faac:	a880082e 	bgeu	r21,r2,440fad0 <quorem+0x1c4>
 440fab0:	18ffff17 	ldw	r3,-4(r3)
 440fab4:	18000326 	beq	r3,zero,440fac4 <quorem+0x1b8>
 440fab8:	00000506 	br	440fad0 <quorem+0x1c4>
 440fabc:	10c00017 	ldw	r3,0(r2)
 440fac0:	1800031e 	bne	r3,zero,440fad0 <quorem+0x1c4>
 440fac4:	10bfff04 	addi	r2,r2,-4
 440fac8:	94bfffc4 	addi	r18,r18,-1
 440facc:	a8bffb36 	bltu	r21,r2,440fabc <__reset+0xfb40babc>
 440fad0:	84800415 	stw	r18,16(r16)
 440fad4:	9805883a 	mov	r2,r19
 440fad8:	dfc00817 	ldw	ra,32(sp)
 440fadc:	ddc00717 	ldw	r23,28(sp)
 440fae0:	dd800617 	ldw	r22,24(sp)
 440fae4:	dd400517 	ldw	r21,20(sp)
 440fae8:	dd000417 	ldw	r20,16(sp)
 440faec:	dcc00317 	ldw	r19,12(sp)
 440faf0:	dc800217 	ldw	r18,8(sp)
 440faf4:	dc400117 	ldw	r17,4(sp)
 440faf8:	dc000017 	ldw	r16,0(sp)
 440fafc:	dec00904 	addi	sp,sp,36
 440fb00:	f800283a 	ret
 440fb04:	0005883a 	mov	r2,zero
 440fb08:	003ff306 	br	440fad8 <__reset+0xfb40bad8>

0440fb0c <_dtoa_r>:
 440fb0c:	20801017 	ldw	r2,64(r4)
 440fb10:	deffde04 	addi	sp,sp,-136
 440fb14:	df002015 	stw	fp,128(sp)
 440fb18:	dcc01b15 	stw	r19,108(sp)
 440fb1c:	dc801a15 	stw	r18,104(sp)
 440fb20:	dc401915 	stw	r17,100(sp)
 440fb24:	dc001815 	stw	r16,96(sp)
 440fb28:	dfc02115 	stw	ra,132(sp)
 440fb2c:	ddc01f15 	stw	r23,124(sp)
 440fb30:	dd801e15 	stw	r22,120(sp)
 440fb34:	dd401d15 	stw	r21,116(sp)
 440fb38:	dd001c15 	stw	r20,112(sp)
 440fb3c:	d9c00315 	stw	r7,12(sp)
 440fb40:	2039883a 	mov	fp,r4
 440fb44:	3023883a 	mov	r17,r6
 440fb48:	2825883a 	mov	r18,r5
 440fb4c:	dc002417 	ldw	r16,144(sp)
 440fb50:	3027883a 	mov	r19,r6
 440fb54:	10000826 	beq	r2,zero,440fb78 <_dtoa_r+0x6c>
 440fb58:	21801117 	ldw	r6,68(r4)
 440fb5c:	00c00044 	movi	r3,1
 440fb60:	100b883a 	mov	r5,r2
 440fb64:	1986983a 	sll	r3,r3,r6
 440fb68:	11800115 	stw	r6,4(r2)
 440fb6c:	10c00215 	stw	r3,8(r2)
 440fb70:	44127d40 	call	44127d4 <_Bfree>
 440fb74:	e0001015 	stw	zero,64(fp)
 440fb78:	88002e16 	blt	r17,zero,440fc34 <_dtoa_r+0x128>
 440fb7c:	80000015 	stw	zero,0(r16)
 440fb80:	889ffc2c 	andhi	r2,r17,32752
 440fb84:	00dffc34 	movhi	r3,32752
 440fb88:	10c01c26 	beq	r2,r3,440fbfc <_dtoa_r+0xf0>
 440fb8c:	000d883a 	mov	r6,zero
 440fb90:	000f883a 	mov	r7,zero
 440fb94:	9009883a 	mov	r4,r18
 440fb98:	980b883a 	mov	r5,r19
 440fb9c:	4417cdc0 	call	4417cdc <__eqdf2>
 440fba0:	10002b1e 	bne	r2,zero,440fc50 <_dtoa_r+0x144>
 440fba4:	d9c02317 	ldw	r7,140(sp)
 440fba8:	00800044 	movi	r2,1
 440fbac:	38800015 	stw	r2,0(r7)
 440fbb0:	d8802517 	ldw	r2,148(sp)
 440fbb4:	10019e26 	beq	r2,zero,4410230 <_dtoa_r+0x724>
 440fbb8:	d8c02517 	ldw	r3,148(sp)
 440fbbc:	008110f4 	movhi	r2,1091
 440fbc0:	10933644 	addi	r2,r2,19673
 440fbc4:	18800015 	stw	r2,0(r3)
 440fbc8:	10bfffc4 	addi	r2,r2,-1
 440fbcc:	dfc02117 	ldw	ra,132(sp)
 440fbd0:	df002017 	ldw	fp,128(sp)
 440fbd4:	ddc01f17 	ldw	r23,124(sp)
 440fbd8:	dd801e17 	ldw	r22,120(sp)
 440fbdc:	dd401d17 	ldw	r21,116(sp)
 440fbe0:	dd001c17 	ldw	r20,112(sp)
 440fbe4:	dcc01b17 	ldw	r19,108(sp)
 440fbe8:	dc801a17 	ldw	r18,104(sp)
 440fbec:	dc401917 	ldw	r17,100(sp)
 440fbf0:	dc001817 	ldw	r16,96(sp)
 440fbf4:	dec02204 	addi	sp,sp,136
 440fbf8:	f800283a 	ret
 440fbfc:	d8c02317 	ldw	r3,140(sp)
 440fc00:	0089c3c4 	movi	r2,9999
 440fc04:	18800015 	stw	r2,0(r3)
 440fc08:	90017726 	beq	r18,zero,44101e8 <_dtoa_r+0x6dc>
 440fc0c:	008110f4 	movhi	r2,1091
 440fc10:	10934a04 	addi	r2,r2,19752
 440fc14:	d9002517 	ldw	r4,148(sp)
 440fc18:	203fec26 	beq	r4,zero,440fbcc <__reset+0xfb40bbcc>
 440fc1c:	10c000c7 	ldb	r3,3(r2)
 440fc20:	1801781e 	bne	r3,zero,4410204 <_dtoa_r+0x6f8>
 440fc24:	10c000c4 	addi	r3,r2,3
 440fc28:	d9802517 	ldw	r6,148(sp)
 440fc2c:	30c00015 	stw	r3,0(r6)
 440fc30:	003fe606 	br	440fbcc <__reset+0xfb40bbcc>
 440fc34:	04e00034 	movhi	r19,32768
 440fc38:	9cffffc4 	addi	r19,r19,-1
 440fc3c:	00800044 	movi	r2,1
 440fc40:	8ce6703a 	and	r19,r17,r19
 440fc44:	80800015 	stw	r2,0(r16)
 440fc48:	9823883a 	mov	r17,r19
 440fc4c:	003fcc06 	br	440fb80 <__reset+0xfb40bb80>
 440fc50:	d8800204 	addi	r2,sp,8
 440fc54:	d8800015 	stw	r2,0(sp)
 440fc58:	d9c00104 	addi	r7,sp,4
 440fc5c:	900b883a 	mov	r5,r18
 440fc60:	980d883a 	mov	r6,r19
 440fc64:	e009883a 	mov	r4,fp
 440fc68:	8820d53a 	srli	r16,r17,20
 440fc6c:	44133c00 	call	44133c0 <__d2b>
 440fc70:	d8800915 	stw	r2,36(sp)
 440fc74:	8001651e 	bne	r16,zero,441020c <_dtoa_r+0x700>
 440fc78:	dd800217 	ldw	r22,8(sp)
 440fc7c:	dc000117 	ldw	r16,4(sp)
 440fc80:	00800804 	movi	r2,32
 440fc84:	b421883a 	add	r16,r22,r16
 440fc88:	80c10c84 	addi	r3,r16,1074
 440fc8c:	10c2d10e 	bge	r2,r3,44107d4 <_dtoa_r+0xcc8>
 440fc90:	00801004 	movi	r2,64
 440fc94:	81010484 	addi	r4,r16,1042
 440fc98:	10c7c83a 	sub	r3,r2,r3
 440fc9c:	9108d83a 	srl	r4,r18,r4
 440fca0:	88e2983a 	sll	r17,r17,r3
 440fca4:	2448b03a 	or	r4,r4,r17
 440fca8:	4417e400 	call	4417e40 <__floatunsidf>
 440fcac:	017f8434 	movhi	r5,65040
 440fcb0:	01800044 	movi	r6,1
 440fcb4:	1009883a 	mov	r4,r2
 440fcb8:	194b883a 	add	r5,r3,r5
 440fcbc:	843fffc4 	addi	r16,r16,-1
 440fcc0:	d9801115 	stw	r6,68(sp)
 440fcc4:	000d883a 	mov	r6,zero
 440fcc8:	01cffe34 	movhi	r7,16376
 440fccc:	44098fc0 	call	44098fc <__subdf3>
 440fcd0:	0198dbf4 	movhi	r6,25455
 440fcd4:	01cff4f4 	movhi	r7,16339
 440fcd8:	3190d844 	addi	r6,r6,17249
 440fcdc:	39e1e9c4 	addi	r7,r7,-30809
 440fce0:	1009883a 	mov	r4,r2
 440fce4:	180b883a 	mov	r5,r3
 440fce8:	44091e40 	call	44091e4 <__muldf3>
 440fcec:	01a2d874 	movhi	r6,35681
 440fcf0:	01cff1f4 	movhi	r7,16327
 440fcf4:	31b22cc4 	addi	r6,r6,-14157
 440fcf8:	39e28a04 	addi	r7,r7,-30168
 440fcfc:	180b883a 	mov	r5,r3
 440fd00:	1009883a 	mov	r4,r2
 440fd04:	4407f5c0 	call	4407f5c <__adddf3>
 440fd08:	8009883a 	mov	r4,r16
 440fd0c:	1029883a 	mov	r20,r2
 440fd10:	1823883a 	mov	r17,r3
 440fd14:	440a2780 	call	440a278 <__floatsidf>
 440fd18:	019427f4 	movhi	r6,20639
 440fd1c:	01cff4f4 	movhi	r7,16339
 440fd20:	319e7ec4 	addi	r6,r6,31227
 440fd24:	39d104c4 	addi	r7,r7,17427
 440fd28:	1009883a 	mov	r4,r2
 440fd2c:	180b883a 	mov	r5,r3
 440fd30:	44091e40 	call	44091e4 <__muldf3>
 440fd34:	100d883a 	mov	r6,r2
 440fd38:	180f883a 	mov	r7,r3
 440fd3c:	a009883a 	mov	r4,r20
 440fd40:	880b883a 	mov	r5,r17
 440fd44:	4407f5c0 	call	4407f5c <__adddf3>
 440fd48:	1009883a 	mov	r4,r2
 440fd4c:	180b883a 	mov	r5,r3
 440fd50:	1029883a 	mov	r20,r2
 440fd54:	1823883a 	mov	r17,r3
 440fd58:	440a1f80 	call	440a1f8 <__fixdfsi>
 440fd5c:	000d883a 	mov	r6,zero
 440fd60:	000f883a 	mov	r7,zero
 440fd64:	a009883a 	mov	r4,r20
 440fd68:	880b883a 	mov	r5,r17
 440fd6c:	d8800515 	stw	r2,20(sp)
 440fd70:	44090f00 	call	44090f0 <__ledf2>
 440fd74:	10028716 	blt	r2,zero,4410794 <_dtoa_r+0xc88>
 440fd78:	d8c00517 	ldw	r3,20(sp)
 440fd7c:	00800584 	movi	r2,22
 440fd80:	10c27536 	bltu	r2,r3,4410758 <_dtoa_r+0xc4c>
 440fd84:	180490fa 	slli	r2,r3,3
 440fd88:	00c110f4 	movhi	r3,1091
 440fd8c:	18d36504 	addi	r3,r3,19860
 440fd90:	1885883a 	add	r2,r3,r2
 440fd94:	11000017 	ldw	r4,0(r2)
 440fd98:	11400117 	ldw	r5,4(r2)
 440fd9c:	900d883a 	mov	r6,r18
 440fda0:	980f883a 	mov	r7,r19
 440fda4:	4417d640 	call	4417d64 <__gedf2>
 440fda8:	00828d0e 	bge	zero,r2,44107e0 <_dtoa_r+0xcd4>
 440fdac:	d9000517 	ldw	r4,20(sp)
 440fdb0:	d8000e15 	stw	zero,56(sp)
 440fdb4:	213fffc4 	addi	r4,r4,-1
 440fdb8:	d9000515 	stw	r4,20(sp)
 440fdbc:	b42dc83a 	sub	r22,r22,r16
 440fdc0:	b5bfffc4 	addi	r22,r22,-1
 440fdc4:	b0026f16 	blt	r22,zero,4410784 <_dtoa_r+0xc78>
 440fdc8:	d8000815 	stw	zero,32(sp)
 440fdcc:	d9c00517 	ldw	r7,20(sp)
 440fdd0:	38026416 	blt	r7,zero,4410764 <_dtoa_r+0xc58>
 440fdd4:	b1ed883a 	add	r22,r22,r7
 440fdd8:	d9c00d15 	stw	r7,52(sp)
 440fddc:	d8000a15 	stw	zero,40(sp)
 440fde0:	d9800317 	ldw	r6,12(sp)
 440fde4:	00800244 	movi	r2,9
 440fde8:	11811436 	bltu	r2,r6,441023c <_dtoa_r+0x730>
 440fdec:	00800144 	movi	r2,5
 440fdf0:	1184e10e 	bge	r2,r6,4411178 <_dtoa_r+0x166c>
 440fdf4:	31bfff04 	addi	r6,r6,-4
 440fdf8:	d9800315 	stw	r6,12(sp)
 440fdfc:	0023883a 	mov	r17,zero
 440fe00:	d9800317 	ldw	r6,12(sp)
 440fe04:	008000c4 	movi	r2,3
 440fe08:	30836726 	beq	r6,r2,4410ba8 <_dtoa_r+0x109c>
 440fe0c:	1183410e 	bge	r2,r6,4410b14 <_dtoa_r+0x1008>
 440fe10:	d9c00317 	ldw	r7,12(sp)
 440fe14:	00800104 	movi	r2,4
 440fe18:	38827c26 	beq	r7,r2,441080c <_dtoa_r+0xd00>
 440fe1c:	00800144 	movi	r2,5
 440fe20:	3884c41e 	bne	r7,r2,4411134 <_dtoa_r+0x1628>
 440fe24:	00800044 	movi	r2,1
 440fe28:	d8800b15 	stw	r2,44(sp)
 440fe2c:	d8c00517 	ldw	r3,20(sp)
 440fe30:	d9002217 	ldw	r4,136(sp)
 440fe34:	1907883a 	add	r3,r3,r4
 440fe38:	19800044 	addi	r6,r3,1
 440fe3c:	d8c00c15 	stw	r3,48(sp)
 440fe40:	d9800615 	stw	r6,24(sp)
 440fe44:	0183a40e 	bge	zero,r6,4410cd8 <_dtoa_r+0x11cc>
 440fe48:	d9800617 	ldw	r6,24(sp)
 440fe4c:	3021883a 	mov	r16,r6
 440fe50:	e0001115 	stw	zero,68(fp)
 440fe54:	008005c4 	movi	r2,23
 440fe58:	1184c92e 	bgeu	r2,r6,4411180 <_dtoa_r+0x1674>
 440fe5c:	00c00044 	movi	r3,1
 440fe60:	00800104 	movi	r2,4
 440fe64:	1085883a 	add	r2,r2,r2
 440fe68:	11000504 	addi	r4,r2,20
 440fe6c:	180b883a 	mov	r5,r3
 440fe70:	18c00044 	addi	r3,r3,1
 440fe74:	313ffb2e 	bgeu	r6,r4,440fe64 <__reset+0xfb40be64>
 440fe78:	e1401115 	stw	r5,68(fp)
 440fe7c:	e009883a 	mov	r4,fp
 440fe80:	441272c0 	call	441272c <_Balloc>
 440fe84:	d8800715 	stw	r2,28(sp)
 440fe88:	e0801015 	stw	r2,64(fp)
 440fe8c:	00800384 	movi	r2,14
 440fe90:	1400f736 	bltu	r2,r16,4410270 <_dtoa_r+0x764>
 440fe94:	8800f626 	beq	r17,zero,4410270 <_dtoa_r+0x764>
 440fe98:	d9c00517 	ldw	r7,20(sp)
 440fe9c:	01c39a0e 	bge	zero,r7,4410d08 <_dtoa_r+0x11fc>
 440fea0:	388003cc 	andi	r2,r7,15
 440fea4:	100490fa 	slli	r2,r2,3
 440fea8:	382bd13a 	srai	r21,r7,4
 440feac:	00c110f4 	movhi	r3,1091
 440feb0:	18d36504 	addi	r3,r3,19860
 440feb4:	1885883a 	add	r2,r3,r2
 440feb8:	a8c0040c 	andi	r3,r21,16
 440febc:	12400017 	ldw	r9,0(r2)
 440fec0:	12000117 	ldw	r8,4(r2)
 440fec4:	18037926 	beq	r3,zero,4410cac <_dtoa_r+0x11a0>
 440fec8:	008110f4 	movhi	r2,1091
 440fecc:	10935b04 	addi	r2,r2,19820
 440fed0:	11800817 	ldw	r6,32(r2)
 440fed4:	11c00917 	ldw	r7,36(r2)
 440fed8:	9009883a 	mov	r4,r18
 440fedc:	980b883a 	mov	r5,r19
 440fee0:	da001715 	stw	r8,92(sp)
 440fee4:	da401615 	stw	r9,88(sp)
 440fee8:	44088080 	call	4408808 <__divdf3>
 440feec:	da001717 	ldw	r8,92(sp)
 440fef0:	da401617 	ldw	r9,88(sp)
 440fef4:	ad4003cc 	andi	r21,r21,15
 440fef8:	040000c4 	movi	r16,3
 440fefc:	1023883a 	mov	r17,r2
 440ff00:	1829883a 	mov	r20,r3
 440ff04:	a8001126 	beq	r21,zero,440ff4c <_dtoa_r+0x440>
 440ff08:	05c110f4 	movhi	r23,1091
 440ff0c:	bdd35b04 	addi	r23,r23,19820
 440ff10:	4805883a 	mov	r2,r9
 440ff14:	4007883a 	mov	r3,r8
 440ff18:	a980004c 	andi	r6,r21,1
 440ff1c:	1009883a 	mov	r4,r2
 440ff20:	a82bd07a 	srai	r21,r21,1
 440ff24:	180b883a 	mov	r5,r3
 440ff28:	30000426 	beq	r6,zero,440ff3c <_dtoa_r+0x430>
 440ff2c:	b9800017 	ldw	r6,0(r23)
 440ff30:	b9c00117 	ldw	r7,4(r23)
 440ff34:	84000044 	addi	r16,r16,1
 440ff38:	44091e40 	call	44091e4 <__muldf3>
 440ff3c:	bdc00204 	addi	r23,r23,8
 440ff40:	a83ff51e 	bne	r21,zero,440ff18 <__reset+0xfb40bf18>
 440ff44:	1013883a 	mov	r9,r2
 440ff48:	1811883a 	mov	r8,r3
 440ff4c:	480d883a 	mov	r6,r9
 440ff50:	400f883a 	mov	r7,r8
 440ff54:	8809883a 	mov	r4,r17
 440ff58:	a00b883a 	mov	r5,r20
 440ff5c:	44088080 	call	4408808 <__divdf3>
 440ff60:	d8800f15 	stw	r2,60(sp)
 440ff64:	d8c01015 	stw	r3,64(sp)
 440ff68:	d8c00e17 	ldw	r3,56(sp)
 440ff6c:	18000626 	beq	r3,zero,440ff88 <_dtoa_r+0x47c>
 440ff70:	d9000f17 	ldw	r4,60(sp)
 440ff74:	d9401017 	ldw	r5,64(sp)
 440ff78:	000d883a 	mov	r6,zero
 440ff7c:	01cffc34 	movhi	r7,16368
 440ff80:	44090f00 	call	44090f0 <__ledf2>
 440ff84:	10040b16 	blt	r2,zero,4410fb4 <_dtoa_r+0x14a8>
 440ff88:	8009883a 	mov	r4,r16
 440ff8c:	440a2780 	call	440a278 <__floatsidf>
 440ff90:	d9800f17 	ldw	r6,60(sp)
 440ff94:	d9c01017 	ldw	r7,64(sp)
 440ff98:	1009883a 	mov	r4,r2
 440ff9c:	180b883a 	mov	r5,r3
 440ffa0:	44091e40 	call	44091e4 <__muldf3>
 440ffa4:	000d883a 	mov	r6,zero
 440ffa8:	01d00734 	movhi	r7,16412
 440ffac:	1009883a 	mov	r4,r2
 440ffb0:	180b883a 	mov	r5,r3
 440ffb4:	4407f5c0 	call	4407f5c <__adddf3>
 440ffb8:	1021883a 	mov	r16,r2
 440ffbc:	d8800617 	ldw	r2,24(sp)
 440ffc0:	047f3034 	movhi	r17,64704
 440ffc4:	1c63883a 	add	r17,r3,r17
 440ffc8:	10031826 	beq	r2,zero,4410c2c <_dtoa_r+0x1120>
 440ffcc:	d8c00517 	ldw	r3,20(sp)
 440ffd0:	db000617 	ldw	r12,24(sp)
 440ffd4:	d8c01315 	stw	r3,76(sp)
 440ffd8:	d9000b17 	ldw	r4,44(sp)
 440ffdc:	20038f26 	beq	r4,zero,4410e1c <_dtoa_r+0x1310>
 440ffe0:	60bfffc4 	addi	r2,r12,-1
 440ffe4:	100490fa 	slli	r2,r2,3
 440ffe8:	00c110f4 	movhi	r3,1091
 440ffec:	18d36504 	addi	r3,r3,19860
 440fff0:	1885883a 	add	r2,r3,r2
 440fff4:	11800017 	ldw	r6,0(r2)
 440fff8:	11c00117 	ldw	r7,4(r2)
 440fffc:	d8800717 	ldw	r2,28(sp)
 4410000:	0009883a 	mov	r4,zero
 4410004:	014ff834 	movhi	r5,16352
 4410008:	db001615 	stw	r12,88(sp)
 441000c:	15c00044 	addi	r23,r2,1
 4410010:	44088080 	call	4408808 <__divdf3>
 4410014:	800d883a 	mov	r6,r16
 4410018:	880f883a 	mov	r7,r17
 441001c:	1009883a 	mov	r4,r2
 4410020:	180b883a 	mov	r5,r3
 4410024:	44098fc0 	call	44098fc <__subdf3>
 4410028:	d9401017 	ldw	r5,64(sp)
 441002c:	d9000f17 	ldw	r4,60(sp)
 4410030:	102b883a 	mov	r21,r2
 4410034:	d8c01215 	stw	r3,72(sp)
 4410038:	440a1f80 	call	440a1f8 <__fixdfsi>
 441003c:	1009883a 	mov	r4,r2
 4410040:	1029883a 	mov	r20,r2
 4410044:	440a2780 	call	440a278 <__floatsidf>
 4410048:	d9000f17 	ldw	r4,60(sp)
 441004c:	d9401017 	ldw	r5,64(sp)
 4410050:	100d883a 	mov	r6,r2
 4410054:	180f883a 	mov	r7,r3
 4410058:	44098fc0 	call	44098fc <__subdf3>
 441005c:	1823883a 	mov	r17,r3
 4410060:	d8c00717 	ldw	r3,28(sp)
 4410064:	d9401217 	ldw	r5,72(sp)
 4410068:	a2000c04 	addi	r8,r20,48
 441006c:	1021883a 	mov	r16,r2
 4410070:	1a000005 	stb	r8,0(r3)
 4410074:	800d883a 	mov	r6,r16
 4410078:	880f883a 	mov	r7,r17
 441007c:	a809883a 	mov	r4,r21
 4410080:	4029883a 	mov	r20,r8
 4410084:	4417d640 	call	4417d64 <__gedf2>
 4410088:	00841d16 	blt	zero,r2,4411100 <_dtoa_r+0x15f4>
 441008c:	800d883a 	mov	r6,r16
 4410090:	880f883a 	mov	r7,r17
 4410094:	0009883a 	mov	r4,zero
 4410098:	014ffc34 	movhi	r5,16368
 441009c:	44098fc0 	call	44098fc <__subdf3>
 44100a0:	d9401217 	ldw	r5,72(sp)
 44100a4:	100d883a 	mov	r6,r2
 44100a8:	180f883a 	mov	r7,r3
 44100ac:	a809883a 	mov	r4,r21
 44100b0:	4417d640 	call	4417d64 <__gedf2>
 44100b4:	db001617 	ldw	r12,88(sp)
 44100b8:	00840e16 	blt	zero,r2,44110f4 <_dtoa_r+0x15e8>
 44100bc:	00800044 	movi	r2,1
 44100c0:	13006b0e 	bge	r2,r12,4410270 <_dtoa_r+0x764>
 44100c4:	d9000717 	ldw	r4,28(sp)
 44100c8:	dd800f15 	stw	r22,60(sp)
 44100cc:	dcc01015 	stw	r19,64(sp)
 44100d0:	2319883a 	add	r12,r4,r12
 44100d4:	dcc01217 	ldw	r19,72(sp)
 44100d8:	602d883a 	mov	r22,r12
 44100dc:	dc801215 	stw	r18,72(sp)
 44100e0:	b825883a 	mov	r18,r23
 44100e4:	00000906 	br	441010c <_dtoa_r+0x600>
 44100e8:	44098fc0 	call	44098fc <__subdf3>
 44100ec:	a80d883a 	mov	r6,r21
 44100f0:	980f883a 	mov	r7,r19
 44100f4:	1009883a 	mov	r4,r2
 44100f8:	180b883a 	mov	r5,r3
 44100fc:	44090f00 	call	44090f0 <__ledf2>
 4410100:	1003e816 	blt	r2,zero,44110a4 <_dtoa_r+0x1598>
 4410104:	b825883a 	mov	r18,r23
 4410108:	bd83e926 	beq	r23,r22,44110b0 <_dtoa_r+0x15a4>
 441010c:	a809883a 	mov	r4,r21
 4410110:	980b883a 	mov	r5,r19
 4410114:	000d883a 	mov	r6,zero
 4410118:	01d00934 	movhi	r7,16420
 441011c:	44091e40 	call	44091e4 <__muldf3>
 4410120:	000d883a 	mov	r6,zero
 4410124:	01d00934 	movhi	r7,16420
 4410128:	8009883a 	mov	r4,r16
 441012c:	880b883a 	mov	r5,r17
 4410130:	102b883a 	mov	r21,r2
 4410134:	1827883a 	mov	r19,r3
 4410138:	44091e40 	call	44091e4 <__muldf3>
 441013c:	180b883a 	mov	r5,r3
 4410140:	1009883a 	mov	r4,r2
 4410144:	1821883a 	mov	r16,r3
 4410148:	1023883a 	mov	r17,r2
 441014c:	440a1f80 	call	440a1f8 <__fixdfsi>
 4410150:	1009883a 	mov	r4,r2
 4410154:	1029883a 	mov	r20,r2
 4410158:	440a2780 	call	440a278 <__floatsidf>
 441015c:	8809883a 	mov	r4,r17
 4410160:	800b883a 	mov	r5,r16
 4410164:	100d883a 	mov	r6,r2
 4410168:	180f883a 	mov	r7,r3
 441016c:	44098fc0 	call	44098fc <__subdf3>
 4410170:	a5000c04 	addi	r20,r20,48
 4410174:	a80d883a 	mov	r6,r21
 4410178:	980f883a 	mov	r7,r19
 441017c:	1009883a 	mov	r4,r2
 4410180:	180b883a 	mov	r5,r3
 4410184:	95000005 	stb	r20,0(r18)
 4410188:	1021883a 	mov	r16,r2
 441018c:	1823883a 	mov	r17,r3
 4410190:	44090f00 	call	44090f0 <__ledf2>
 4410194:	bdc00044 	addi	r23,r23,1
 4410198:	800d883a 	mov	r6,r16
 441019c:	880f883a 	mov	r7,r17
 44101a0:	0009883a 	mov	r4,zero
 44101a4:	014ffc34 	movhi	r5,16368
 44101a8:	103fcf0e 	bge	r2,zero,44100e8 <__reset+0xfb40c0e8>
 44101ac:	d8c01317 	ldw	r3,76(sp)
 44101b0:	d8c00515 	stw	r3,20(sp)
 44101b4:	d9400917 	ldw	r5,36(sp)
 44101b8:	e009883a 	mov	r4,fp
 44101bc:	44127d40 	call	44127d4 <_Bfree>
 44101c0:	d9000517 	ldw	r4,20(sp)
 44101c4:	d9802317 	ldw	r6,140(sp)
 44101c8:	d9c02517 	ldw	r7,148(sp)
 44101cc:	b8000005 	stb	zero,0(r23)
 44101d0:	20800044 	addi	r2,r4,1
 44101d4:	30800015 	stw	r2,0(r6)
 44101d8:	3802aa26 	beq	r7,zero,4410c84 <_dtoa_r+0x1178>
 44101dc:	3dc00015 	stw	r23,0(r7)
 44101e0:	d8800717 	ldw	r2,28(sp)
 44101e4:	003e7906 	br	440fbcc <__reset+0xfb40bbcc>
 44101e8:	00800434 	movhi	r2,16
 44101ec:	10bfffc4 	addi	r2,r2,-1
 44101f0:	88a2703a 	and	r17,r17,r2
 44101f4:	883e851e 	bne	r17,zero,440fc0c <__reset+0xfb40bc0c>
 44101f8:	008110f4 	movhi	r2,1091
 44101fc:	10934704 	addi	r2,r2,19740
 4410200:	003e8406 	br	440fc14 <__reset+0xfb40bc14>
 4410204:	10c00204 	addi	r3,r2,8
 4410208:	003e8706 	br	440fc28 <__reset+0xfb40bc28>
 441020c:	01400434 	movhi	r5,16
 4410210:	297fffc4 	addi	r5,r5,-1
 4410214:	994a703a 	and	r5,r19,r5
 4410218:	9009883a 	mov	r4,r18
 441021c:	843f0044 	addi	r16,r16,-1023
 4410220:	294ffc34 	orhi	r5,r5,16368
 4410224:	dd800217 	ldw	r22,8(sp)
 4410228:	d8001115 	stw	zero,68(sp)
 441022c:	003ea506 	br	440fcc4 <__reset+0xfb40bcc4>
 4410230:	008110f4 	movhi	r2,1091
 4410234:	10933604 	addi	r2,r2,19672
 4410238:	003e6406 	br	440fbcc <__reset+0xfb40bbcc>
 441023c:	e0001115 	stw	zero,68(fp)
 4410240:	000b883a 	mov	r5,zero
 4410244:	e009883a 	mov	r4,fp
 4410248:	441272c0 	call	441272c <_Balloc>
 441024c:	01bfffc4 	movi	r6,-1
 4410250:	01c00044 	movi	r7,1
 4410254:	d8800715 	stw	r2,28(sp)
 4410258:	d9800c15 	stw	r6,48(sp)
 441025c:	e0801015 	stw	r2,64(fp)
 4410260:	d8000315 	stw	zero,12(sp)
 4410264:	d9c00b15 	stw	r7,44(sp)
 4410268:	d9800615 	stw	r6,24(sp)
 441026c:	d8002215 	stw	zero,136(sp)
 4410270:	d8800117 	ldw	r2,4(sp)
 4410274:	10008916 	blt	r2,zero,441049c <_dtoa_r+0x990>
 4410278:	d9000517 	ldw	r4,20(sp)
 441027c:	00c00384 	movi	r3,14
 4410280:	19008616 	blt	r3,r4,441049c <_dtoa_r+0x990>
 4410284:	200490fa 	slli	r2,r4,3
 4410288:	00c110f4 	movhi	r3,1091
 441028c:	d9802217 	ldw	r6,136(sp)
 4410290:	18d36504 	addi	r3,r3,19860
 4410294:	1885883a 	add	r2,r3,r2
 4410298:	14000017 	ldw	r16,0(r2)
 441029c:	14400117 	ldw	r17,4(r2)
 44102a0:	30016316 	blt	r6,zero,4410830 <_dtoa_r+0xd24>
 44102a4:	800d883a 	mov	r6,r16
 44102a8:	880f883a 	mov	r7,r17
 44102ac:	9009883a 	mov	r4,r18
 44102b0:	980b883a 	mov	r5,r19
 44102b4:	44088080 	call	4408808 <__divdf3>
 44102b8:	180b883a 	mov	r5,r3
 44102bc:	1009883a 	mov	r4,r2
 44102c0:	440a1f80 	call	440a1f8 <__fixdfsi>
 44102c4:	1009883a 	mov	r4,r2
 44102c8:	102b883a 	mov	r21,r2
 44102cc:	440a2780 	call	440a278 <__floatsidf>
 44102d0:	800d883a 	mov	r6,r16
 44102d4:	880f883a 	mov	r7,r17
 44102d8:	1009883a 	mov	r4,r2
 44102dc:	180b883a 	mov	r5,r3
 44102e0:	44091e40 	call	44091e4 <__muldf3>
 44102e4:	100d883a 	mov	r6,r2
 44102e8:	180f883a 	mov	r7,r3
 44102ec:	9009883a 	mov	r4,r18
 44102f0:	980b883a 	mov	r5,r19
 44102f4:	44098fc0 	call	44098fc <__subdf3>
 44102f8:	d9c00717 	ldw	r7,28(sp)
 44102fc:	1009883a 	mov	r4,r2
 4410300:	a8800c04 	addi	r2,r21,48
 4410304:	38800005 	stb	r2,0(r7)
 4410308:	3dc00044 	addi	r23,r7,1
 441030c:	d9c00617 	ldw	r7,24(sp)
 4410310:	01800044 	movi	r6,1
 4410314:	180b883a 	mov	r5,r3
 4410318:	2005883a 	mov	r2,r4
 441031c:	39803826 	beq	r7,r6,4410400 <_dtoa_r+0x8f4>
 4410320:	000d883a 	mov	r6,zero
 4410324:	01d00934 	movhi	r7,16420
 4410328:	44091e40 	call	44091e4 <__muldf3>
 441032c:	000d883a 	mov	r6,zero
 4410330:	000f883a 	mov	r7,zero
 4410334:	1009883a 	mov	r4,r2
 4410338:	180b883a 	mov	r5,r3
 441033c:	1025883a 	mov	r18,r2
 4410340:	1827883a 	mov	r19,r3
 4410344:	4417cdc0 	call	4417cdc <__eqdf2>
 4410348:	103f9a26 	beq	r2,zero,44101b4 <__reset+0xfb40c1b4>
 441034c:	d9c00617 	ldw	r7,24(sp)
 4410350:	d8c00717 	ldw	r3,28(sp)
 4410354:	b829883a 	mov	r20,r23
 4410358:	38bfffc4 	addi	r2,r7,-1
 441035c:	18ad883a 	add	r22,r3,r2
 4410360:	00000a06 	br	441038c <_dtoa_r+0x880>
 4410364:	44091e40 	call	44091e4 <__muldf3>
 4410368:	000d883a 	mov	r6,zero
 441036c:	000f883a 	mov	r7,zero
 4410370:	1009883a 	mov	r4,r2
 4410374:	180b883a 	mov	r5,r3
 4410378:	1025883a 	mov	r18,r2
 441037c:	1827883a 	mov	r19,r3
 4410380:	b829883a 	mov	r20,r23
 4410384:	4417cdc0 	call	4417cdc <__eqdf2>
 4410388:	103f8a26 	beq	r2,zero,44101b4 <__reset+0xfb40c1b4>
 441038c:	800d883a 	mov	r6,r16
 4410390:	880f883a 	mov	r7,r17
 4410394:	9009883a 	mov	r4,r18
 4410398:	980b883a 	mov	r5,r19
 441039c:	44088080 	call	4408808 <__divdf3>
 44103a0:	180b883a 	mov	r5,r3
 44103a4:	1009883a 	mov	r4,r2
 44103a8:	440a1f80 	call	440a1f8 <__fixdfsi>
 44103ac:	1009883a 	mov	r4,r2
 44103b0:	102b883a 	mov	r21,r2
 44103b4:	440a2780 	call	440a278 <__floatsidf>
 44103b8:	800d883a 	mov	r6,r16
 44103bc:	880f883a 	mov	r7,r17
 44103c0:	1009883a 	mov	r4,r2
 44103c4:	180b883a 	mov	r5,r3
 44103c8:	44091e40 	call	44091e4 <__muldf3>
 44103cc:	100d883a 	mov	r6,r2
 44103d0:	180f883a 	mov	r7,r3
 44103d4:	9009883a 	mov	r4,r18
 44103d8:	980b883a 	mov	r5,r19
 44103dc:	44098fc0 	call	44098fc <__subdf3>
 44103e0:	aa000c04 	addi	r8,r21,48
 44103e4:	a2000005 	stb	r8,0(r20)
 44103e8:	000d883a 	mov	r6,zero
 44103ec:	01d00934 	movhi	r7,16420
 44103f0:	1009883a 	mov	r4,r2
 44103f4:	180b883a 	mov	r5,r3
 44103f8:	a5c00044 	addi	r23,r20,1
 44103fc:	b53fd91e 	bne	r22,r20,4410364 <__reset+0xfb40c364>
 4410400:	100d883a 	mov	r6,r2
 4410404:	180f883a 	mov	r7,r3
 4410408:	1009883a 	mov	r4,r2
 441040c:	180b883a 	mov	r5,r3
 4410410:	4407f5c0 	call	4407f5c <__adddf3>
 4410414:	100d883a 	mov	r6,r2
 4410418:	180f883a 	mov	r7,r3
 441041c:	8009883a 	mov	r4,r16
 4410420:	880b883a 	mov	r5,r17
 4410424:	1027883a 	mov	r19,r2
 4410428:	1825883a 	mov	r18,r3
 441042c:	44090f00 	call	44090f0 <__ledf2>
 4410430:	10000816 	blt	r2,zero,4410454 <_dtoa_r+0x948>
 4410434:	980d883a 	mov	r6,r19
 4410438:	900f883a 	mov	r7,r18
 441043c:	8009883a 	mov	r4,r16
 4410440:	880b883a 	mov	r5,r17
 4410444:	4417cdc0 	call	4417cdc <__eqdf2>
 4410448:	103f5a1e 	bne	r2,zero,44101b4 <__reset+0xfb40c1b4>
 441044c:	ad40004c 	andi	r21,r21,1
 4410450:	a83f5826 	beq	r21,zero,44101b4 <__reset+0xfb40c1b4>
 4410454:	bd3fffc3 	ldbu	r20,-1(r23)
 4410458:	b8bfffc4 	addi	r2,r23,-1
 441045c:	1007883a 	mov	r3,r2
 4410460:	01400e44 	movi	r5,57
 4410464:	d9800717 	ldw	r6,28(sp)
 4410468:	00000506 	br	4410480 <_dtoa_r+0x974>
 441046c:	18ffffc4 	addi	r3,r3,-1
 4410470:	11824726 	beq	r2,r6,4410d90 <_dtoa_r+0x1284>
 4410474:	1d000003 	ldbu	r20,0(r3)
 4410478:	102f883a 	mov	r23,r2
 441047c:	10bfffc4 	addi	r2,r2,-1
 4410480:	a1003fcc 	andi	r4,r20,255
 4410484:	2100201c 	xori	r4,r4,128
 4410488:	213fe004 	addi	r4,r4,-128
 441048c:	217ff726 	beq	r4,r5,441046c <__reset+0xfb40c46c>
 4410490:	a2000044 	addi	r8,r20,1
 4410494:	12000005 	stb	r8,0(r2)
 4410498:	003f4606 	br	44101b4 <__reset+0xfb40c1b4>
 441049c:	d9000b17 	ldw	r4,44(sp)
 44104a0:	2000c826 	beq	r4,zero,44107c4 <_dtoa_r+0xcb8>
 44104a4:	d9800317 	ldw	r6,12(sp)
 44104a8:	00c00044 	movi	r3,1
 44104ac:	1980f90e 	bge	r3,r6,4410894 <_dtoa_r+0xd88>
 44104b0:	d8800617 	ldw	r2,24(sp)
 44104b4:	d8c00a17 	ldw	r3,40(sp)
 44104b8:	157fffc4 	addi	r21,r2,-1
 44104bc:	1d41f316 	blt	r3,r21,4410c8c <_dtoa_r+0x1180>
 44104c0:	1d6bc83a 	sub	r21,r3,r21
 44104c4:	d9c00617 	ldw	r7,24(sp)
 44104c8:	3802aa16 	blt	r7,zero,4410f74 <_dtoa_r+0x1468>
 44104cc:	dd000817 	ldw	r20,32(sp)
 44104d0:	d8800617 	ldw	r2,24(sp)
 44104d4:	d8c00817 	ldw	r3,32(sp)
 44104d8:	01400044 	movi	r5,1
 44104dc:	e009883a 	mov	r4,fp
 44104e0:	1887883a 	add	r3,r3,r2
 44104e4:	d8c00815 	stw	r3,32(sp)
 44104e8:	b0ad883a 	add	r22,r22,r2
 44104ec:	4412b380 	call	4412b38 <__i2b>
 44104f0:	1023883a 	mov	r17,r2
 44104f4:	a0000826 	beq	r20,zero,4410518 <_dtoa_r+0xa0c>
 44104f8:	0580070e 	bge	zero,r22,4410518 <_dtoa_r+0xa0c>
 44104fc:	a005883a 	mov	r2,r20
 4410500:	b500b916 	blt	r22,r20,44107e8 <_dtoa_r+0xcdc>
 4410504:	d9000817 	ldw	r4,32(sp)
 4410508:	a0a9c83a 	sub	r20,r20,r2
 441050c:	b0adc83a 	sub	r22,r22,r2
 4410510:	2089c83a 	sub	r4,r4,r2
 4410514:	d9000815 	stw	r4,32(sp)
 4410518:	d9800a17 	ldw	r6,40(sp)
 441051c:	0181810e 	bge	zero,r6,4410b24 <_dtoa_r+0x1018>
 4410520:	d9c00b17 	ldw	r7,44(sp)
 4410524:	3800b326 	beq	r7,zero,44107f4 <_dtoa_r+0xce8>
 4410528:	a800b226 	beq	r21,zero,44107f4 <_dtoa_r+0xce8>
 441052c:	880b883a 	mov	r5,r17
 4410530:	a80d883a 	mov	r6,r21
 4410534:	e009883a 	mov	r4,fp
 4410538:	4412d6c0 	call	4412d6c <__pow5mult>
 441053c:	d9800917 	ldw	r6,36(sp)
 4410540:	100b883a 	mov	r5,r2
 4410544:	e009883a 	mov	r4,fp
 4410548:	1023883a 	mov	r17,r2
 441054c:	4412b740 	call	4412b74 <__multiply>
 4410550:	1021883a 	mov	r16,r2
 4410554:	d8800a17 	ldw	r2,40(sp)
 4410558:	d9400917 	ldw	r5,36(sp)
 441055c:	e009883a 	mov	r4,fp
 4410560:	1545c83a 	sub	r2,r2,r21
 4410564:	d8800a15 	stw	r2,40(sp)
 4410568:	44127d40 	call	44127d4 <_Bfree>
 441056c:	d8c00a17 	ldw	r3,40(sp)
 4410570:	18009f1e 	bne	r3,zero,44107f0 <_dtoa_r+0xce4>
 4410574:	05c00044 	movi	r23,1
 4410578:	e009883a 	mov	r4,fp
 441057c:	b80b883a 	mov	r5,r23
 4410580:	4412b380 	call	4412b38 <__i2b>
 4410584:	d9000d17 	ldw	r4,52(sp)
 4410588:	102b883a 	mov	r21,r2
 441058c:	2000ce26 	beq	r4,zero,44108c8 <_dtoa_r+0xdbc>
 4410590:	200d883a 	mov	r6,r4
 4410594:	100b883a 	mov	r5,r2
 4410598:	e009883a 	mov	r4,fp
 441059c:	4412d6c0 	call	4412d6c <__pow5mult>
 44105a0:	d9800317 	ldw	r6,12(sp)
 44105a4:	102b883a 	mov	r21,r2
 44105a8:	b981810e 	bge	r23,r6,4410bb0 <_dtoa_r+0x10a4>
 44105ac:	0027883a 	mov	r19,zero
 44105b0:	a8800417 	ldw	r2,16(r21)
 44105b4:	05c00804 	movi	r23,32
 44105b8:	10800104 	addi	r2,r2,4
 44105bc:	1085883a 	add	r2,r2,r2
 44105c0:	1085883a 	add	r2,r2,r2
 44105c4:	a885883a 	add	r2,r21,r2
 44105c8:	11000017 	ldw	r4,0(r2)
 44105cc:	4412a200 	call	4412a20 <__hi0bits>
 44105d0:	b885c83a 	sub	r2,r23,r2
 44105d4:	1585883a 	add	r2,r2,r22
 44105d8:	108007cc 	andi	r2,r2,31
 44105dc:	1000b326 	beq	r2,zero,44108ac <_dtoa_r+0xda0>
 44105e0:	00c00804 	movi	r3,32
 44105e4:	1887c83a 	sub	r3,r3,r2
 44105e8:	01000104 	movi	r4,4
 44105ec:	20c2cd0e 	bge	r4,r3,4411124 <_dtoa_r+0x1618>
 44105f0:	00c00704 	movi	r3,28
 44105f4:	1885c83a 	sub	r2,r3,r2
 44105f8:	d8c00817 	ldw	r3,32(sp)
 44105fc:	a0a9883a 	add	r20,r20,r2
 4410600:	b0ad883a 	add	r22,r22,r2
 4410604:	1887883a 	add	r3,r3,r2
 4410608:	d8c00815 	stw	r3,32(sp)
 441060c:	d9800817 	ldw	r6,32(sp)
 4410610:	0180040e 	bge	zero,r6,4410624 <_dtoa_r+0xb18>
 4410614:	800b883a 	mov	r5,r16
 4410618:	e009883a 	mov	r4,fp
 441061c:	4412eac0 	call	4412eac <__lshift>
 4410620:	1021883a 	mov	r16,r2
 4410624:	0580050e 	bge	zero,r22,441063c <_dtoa_r+0xb30>
 4410628:	a80b883a 	mov	r5,r21
 441062c:	b00d883a 	mov	r6,r22
 4410630:	e009883a 	mov	r4,fp
 4410634:	4412eac0 	call	4412eac <__lshift>
 4410638:	102b883a 	mov	r21,r2
 441063c:	d9c00e17 	ldw	r7,56(sp)
 4410640:	3801211e 	bne	r7,zero,4410ac8 <_dtoa_r+0xfbc>
 4410644:	d9800617 	ldw	r6,24(sp)
 4410648:	0181380e 	bge	zero,r6,4410b2c <_dtoa_r+0x1020>
 441064c:	d8c00b17 	ldw	r3,44(sp)
 4410650:	1800ab1e 	bne	r3,zero,4410900 <_dtoa_r+0xdf4>
 4410654:	dc800717 	ldw	r18,28(sp)
 4410658:	dcc00617 	ldw	r19,24(sp)
 441065c:	9029883a 	mov	r20,r18
 4410660:	00000206 	br	441066c <_dtoa_r+0xb60>
 4410664:	44127fc0 	call	44127fc <__multadd>
 4410668:	1021883a 	mov	r16,r2
 441066c:	a80b883a 	mov	r5,r21
 4410670:	8009883a 	mov	r4,r16
 4410674:	440f90c0 	call	440f90c <quorem>
 4410678:	10800c04 	addi	r2,r2,48
 441067c:	90800005 	stb	r2,0(r18)
 4410680:	94800044 	addi	r18,r18,1
 4410684:	9507c83a 	sub	r3,r18,r20
 4410688:	000f883a 	mov	r7,zero
 441068c:	01800284 	movi	r6,10
 4410690:	800b883a 	mov	r5,r16
 4410694:	e009883a 	mov	r4,fp
 4410698:	1cfff216 	blt	r3,r19,4410664 <__reset+0xfb40c664>
 441069c:	1011883a 	mov	r8,r2
 44106a0:	d8800617 	ldw	r2,24(sp)
 44106a4:	0082370e 	bge	zero,r2,4410f84 <_dtoa_r+0x1478>
 44106a8:	d9000717 	ldw	r4,28(sp)
 44106ac:	0025883a 	mov	r18,zero
 44106b0:	20af883a 	add	r23,r4,r2
 44106b4:	01800044 	movi	r6,1
 44106b8:	800b883a 	mov	r5,r16
 44106bc:	e009883a 	mov	r4,fp
 44106c0:	da001715 	stw	r8,92(sp)
 44106c4:	4412eac0 	call	4412eac <__lshift>
 44106c8:	a80b883a 	mov	r5,r21
 44106cc:	1009883a 	mov	r4,r2
 44106d0:	d8800915 	stw	r2,36(sp)
 44106d4:	4412ff40 	call	4412ff4 <__mcmp>
 44106d8:	da001717 	ldw	r8,92(sp)
 44106dc:	0081800e 	bge	zero,r2,4410ce0 <_dtoa_r+0x11d4>
 44106e0:	b93fffc3 	ldbu	r4,-1(r23)
 44106e4:	b8bfffc4 	addi	r2,r23,-1
 44106e8:	1007883a 	mov	r3,r2
 44106ec:	01800e44 	movi	r6,57
 44106f0:	d9c00717 	ldw	r7,28(sp)
 44106f4:	00000506 	br	441070c <_dtoa_r+0xc00>
 44106f8:	18ffffc4 	addi	r3,r3,-1
 44106fc:	11c12326 	beq	r2,r7,4410b8c <_dtoa_r+0x1080>
 4410700:	19000003 	ldbu	r4,0(r3)
 4410704:	102f883a 	mov	r23,r2
 4410708:	10bfffc4 	addi	r2,r2,-1
 441070c:	21403fcc 	andi	r5,r4,255
 4410710:	2940201c 	xori	r5,r5,128
 4410714:	297fe004 	addi	r5,r5,-128
 4410718:	29bff726 	beq	r5,r6,44106f8 <__reset+0xfb40c6f8>
 441071c:	21000044 	addi	r4,r4,1
 4410720:	11000005 	stb	r4,0(r2)
 4410724:	a80b883a 	mov	r5,r21
 4410728:	e009883a 	mov	r4,fp
 441072c:	44127d40 	call	44127d4 <_Bfree>
 4410730:	883ea026 	beq	r17,zero,44101b4 <__reset+0xfb40c1b4>
 4410734:	90000426 	beq	r18,zero,4410748 <_dtoa_r+0xc3c>
 4410738:	94400326 	beq	r18,r17,4410748 <_dtoa_r+0xc3c>
 441073c:	900b883a 	mov	r5,r18
 4410740:	e009883a 	mov	r4,fp
 4410744:	44127d40 	call	44127d4 <_Bfree>
 4410748:	880b883a 	mov	r5,r17
 441074c:	e009883a 	mov	r4,fp
 4410750:	44127d40 	call	44127d4 <_Bfree>
 4410754:	003e9706 	br	44101b4 <__reset+0xfb40c1b4>
 4410758:	01800044 	movi	r6,1
 441075c:	d9800e15 	stw	r6,56(sp)
 4410760:	003d9606 	br	440fdbc <__reset+0xfb40bdbc>
 4410764:	d8800817 	ldw	r2,32(sp)
 4410768:	d8c00517 	ldw	r3,20(sp)
 441076c:	d8000d15 	stw	zero,52(sp)
 4410770:	10c5c83a 	sub	r2,r2,r3
 4410774:	00c9c83a 	sub	r4,zero,r3
 4410778:	d8800815 	stw	r2,32(sp)
 441077c:	d9000a15 	stw	r4,40(sp)
 4410780:	003d9706 	br	440fde0 <__reset+0xfb40bde0>
 4410784:	05adc83a 	sub	r22,zero,r22
 4410788:	dd800815 	stw	r22,32(sp)
 441078c:	002d883a 	mov	r22,zero
 4410790:	003d8e06 	br	440fdcc <__reset+0xfb40bdcc>
 4410794:	d9000517 	ldw	r4,20(sp)
 4410798:	440a2780 	call	440a278 <__floatsidf>
 441079c:	100d883a 	mov	r6,r2
 44107a0:	180f883a 	mov	r7,r3
 44107a4:	a009883a 	mov	r4,r20
 44107a8:	880b883a 	mov	r5,r17
 44107ac:	4417cdc0 	call	4417cdc <__eqdf2>
 44107b0:	103d7126 	beq	r2,zero,440fd78 <__reset+0xfb40bd78>
 44107b4:	d9c00517 	ldw	r7,20(sp)
 44107b8:	39ffffc4 	addi	r7,r7,-1
 44107bc:	d9c00515 	stw	r7,20(sp)
 44107c0:	003d6d06 	br	440fd78 <__reset+0xfb40bd78>
 44107c4:	dd400a17 	ldw	r21,40(sp)
 44107c8:	dd000817 	ldw	r20,32(sp)
 44107cc:	0023883a 	mov	r17,zero
 44107d0:	003f4806 	br	44104f4 <__reset+0xfb40c4f4>
 44107d4:	10e3c83a 	sub	r17,r2,r3
 44107d8:	9448983a 	sll	r4,r18,r17
 44107dc:	003d3206 	br	440fca8 <__reset+0xfb40bca8>
 44107e0:	d8000e15 	stw	zero,56(sp)
 44107e4:	003d7506 	br	440fdbc <__reset+0xfb40bdbc>
 44107e8:	b005883a 	mov	r2,r22
 44107ec:	003f4506 	br	4410504 <__reset+0xfb40c504>
 44107f0:	dc000915 	stw	r16,36(sp)
 44107f4:	d9800a17 	ldw	r6,40(sp)
 44107f8:	d9400917 	ldw	r5,36(sp)
 44107fc:	e009883a 	mov	r4,fp
 4410800:	4412d6c0 	call	4412d6c <__pow5mult>
 4410804:	1021883a 	mov	r16,r2
 4410808:	003f5a06 	br	4410574 <__reset+0xfb40c574>
 441080c:	01c00044 	movi	r7,1
 4410810:	d9c00b15 	stw	r7,44(sp)
 4410814:	d8802217 	ldw	r2,136(sp)
 4410818:	0081280e 	bge	zero,r2,4410cbc <_dtoa_r+0x11b0>
 441081c:	100d883a 	mov	r6,r2
 4410820:	1021883a 	mov	r16,r2
 4410824:	d8800c15 	stw	r2,48(sp)
 4410828:	d8800615 	stw	r2,24(sp)
 441082c:	003d8806 	br	440fe50 <__reset+0xfb40be50>
 4410830:	d8800617 	ldw	r2,24(sp)
 4410834:	00be9b16 	blt	zero,r2,44102a4 <__reset+0xfb40c2a4>
 4410838:	10010f1e 	bne	r2,zero,4410c78 <_dtoa_r+0x116c>
 441083c:	880b883a 	mov	r5,r17
 4410840:	000d883a 	mov	r6,zero
 4410844:	01d00534 	movhi	r7,16404
 4410848:	8009883a 	mov	r4,r16
 441084c:	44091e40 	call	44091e4 <__muldf3>
 4410850:	900d883a 	mov	r6,r18
 4410854:	980f883a 	mov	r7,r19
 4410858:	1009883a 	mov	r4,r2
 441085c:	180b883a 	mov	r5,r3
 4410860:	4417d640 	call	4417d64 <__gedf2>
 4410864:	002b883a 	mov	r21,zero
 4410868:	0023883a 	mov	r17,zero
 441086c:	1000bf16 	blt	r2,zero,4410b6c <_dtoa_r+0x1060>
 4410870:	d9802217 	ldw	r6,136(sp)
 4410874:	ddc00717 	ldw	r23,28(sp)
 4410878:	018c303a 	nor	r6,zero,r6
 441087c:	d9800515 	stw	r6,20(sp)
 4410880:	a80b883a 	mov	r5,r21
 4410884:	e009883a 	mov	r4,fp
 4410888:	44127d40 	call	44127d4 <_Bfree>
 441088c:	883e4926 	beq	r17,zero,44101b4 <__reset+0xfb40c1b4>
 4410890:	003fad06 	br	4410748 <__reset+0xfb40c748>
 4410894:	d9c01117 	ldw	r7,68(sp)
 4410898:	3801bc26 	beq	r7,zero,4410f8c <_dtoa_r+0x1480>
 441089c:	10810cc4 	addi	r2,r2,1075
 44108a0:	dd400a17 	ldw	r21,40(sp)
 44108a4:	dd000817 	ldw	r20,32(sp)
 44108a8:	003f0a06 	br	44104d4 <__reset+0xfb40c4d4>
 44108ac:	00800704 	movi	r2,28
 44108b0:	d9000817 	ldw	r4,32(sp)
 44108b4:	a0a9883a 	add	r20,r20,r2
 44108b8:	b0ad883a 	add	r22,r22,r2
 44108bc:	2089883a 	add	r4,r4,r2
 44108c0:	d9000815 	stw	r4,32(sp)
 44108c4:	003f5106 	br	441060c <__reset+0xfb40c60c>
 44108c8:	d8c00317 	ldw	r3,12(sp)
 44108cc:	b8c1fc0e 	bge	r23,r3,44110c0 <_dtoa_r+0x15b4>
 44108d0:	0027883a 	mov	r19,zero
 44108d4:	b805883a 	mov	r2,r23
 44108d8:	003f3e06 	br	44105d4 <__reset+0xfb40c5d4>
 44108dc:	880b883a 	mov	r5,r17
 44108e0:	e009883a 	mov	r4,fp
 44108e4:	000f883a 	mov	r7,zero
 44108e8:	01800284 	movi	r6,10
 44108ec:	44127fc0 	call	44127fc <__multadd>
 44108f0:	d9000c17 	ldw	r4,48(sp)
 44108f4:	1023883a 	mov	r17,r2
 44108f8:	0102040e 	bge	zero,r4,441110c <_dtoa_r+0x1600>
 44108fc:	d9000615 	stw	r4,24(sp)
 4410900:	0500050e 	bge	zero,r20,4410918 <_dtoa_r+0xe0c>
 4410904:	880b883a 	mov	r5,r17
 4410908:	a00d883a 	mov	r6,r20
 441090c:	e009883a 	mov	r4,fp
 4410910:	4412eac0 	call	4412eac <__lshift>
 4410914:	1023883a 	mov	r17,r2
 4410918:	9801241e 	bne	r19,zero,4410dac <_dtoa_r+0x12a0>
 441091c:	8829883a 	mov	r20,r17
 4410920:	d9000617 	ldw	r4,24(sp)
 4410924:	dcc00717 	ldw	r19,28(sp)
 4410928:	9480004c 	andi	r18,r18,1
 441092c:	20bfffc4 	addi	r2,r4,-1
 4410930:	9885883a 	add	r2,r19,r2
 4410934:	d8800415 	stw	r2,16(sp)
 4410938:	dc800615 	stw	r18,24(sp)
 441093c:	a80b883a 	mov	r5,r21
 4410940:	8009883a 	mov	r4,r16
 4410944:	440f90c0 	call	440f90c <quorem>
 4410948:	880b883a 	mov	r5,r17
 441094c:	8009883a 	mov	r4,r16
 4410950:	102f883a 	mov	r23,r2
 4410954:	4412ff40 	call	4412ff4 <__mcmp>
 4410958:	a80b883a 	mov	r5,r21
 441095c:	a00d883a 	mov	r6,r20
 4410960:	e009883a 	mov	r4,fp
 4410964:	102d883a 	mov	r22,r2
 4410968:	44130540 	call	4413054 <__mdiff>
 441096c:	1007883a 	mov	r3,r2
 4410970:	10800317 	ldw	r2,12(r2)
 4410974:	bc800c04 	addi	r18,r23,48
 4410978:	180b883a 	mov	r5,r3
 441097c:	10004e1e 	bne	r2,zero,4410ab8 <_dtoa_r+0xfac>
 4410980:	8009883a 	mov	r4,r16
 4410984:	d8c01615 	stw	r3,88(sp)
 4410988:	4412ff40 	call	4412ff4 <__mcmp>
 441098c:	d8c01617 	ldw	r3,88(sp)
 4410990:	e009883a 	mov	r4,fp
 4410994:	d8801615 	stw	r2,88(sp)
 4410998:	180b883a 	mov	r5,r3
 441099c:	44127d40 	call	44127d4 <_Bfree>
 44109a0:	d8801617 	ldw	r2,88(sp)
 44109a4:	1000041e 	bne	r2,zero,44109b8 <_dtoa_r+0xeac>
 44109a8:	d9800317 	ldw	r6,12(sp)
 44109ac:	3000021e 	bne	r6,zero,44109b8 <_dtoa_r+0xeac>
 44109b0:	d8c00617 	ldw	r3,24(sp)
 44109b4:	18003726 	beq	r3,zero,4410a94 <_dtoa_r+0xf88>
 44109b8:	b0002016 	blt	r22,zero,4410a3c <_dtoa_r+0xf30>
 44109bc:	b000041e 	bne	r22,zero,44109d0 <_dtoa_r+0xec4>
 44109c0:	d9000317 	ldw	r4,12(sp)
 44109c4:	2000021e 	bne	r4,zero,44109d0 <_dtoa_r+0xec4>
 44109c8:	d8c00617 	ldw	r3,24(sp)
 44109cc:	18001b26 	beq	r3,zero,4410a3c <_dtoa_r+0xf30>
 44109d0:	00810716 	blt	zero,r2,4410df0 <_dtoa_r+0x12e4>
 44109d4:	d8c00417 	ldw	r3,16(sp)
 44109d8:	9d800044 	addi	r22,r19,1
 44109dc:	9c800005 	stb	r18,0(r19)
 44109e0:	b02f883a 	mov	r23,r22
 44109e4:	98c10626 	beq	r19,r3,4410e00 <_dtoa_r+0x12f4>
 44109e8:	800b883a 	mov	r5,r16
 44109ec:	000f883a 	mov	r7,zero
 44109f0:	01800284 	movi	r6,10
 44109f4:	e009883a 	mov	r4,fp
 44109f8:	44127fc0 	call	44127fc <__multadd>
 44109fc:	1021883a 	mov	r16,r2
 4410a00:	000f883a 	mov	r7,zero
 4410a04:	01800284 	movi	r6,10
 4410a08:	880b883a 	mov	r5,r17
 4410a0c:	e009883a 	mov	r4,fp
 4410a10:	8d002526 	beq	r17,r20,4410aa8 <_dtoa_r+0xf9c>
 4410a14:	44127fc0 	call	44127fc <__multadd>
 4410a18:	a00b883a 	mov	r5,r20
 4410a1c:	000f883a 	mov	r7,zero
 4410a20:	01800284 	movi	r6,10
 4410a24:	e009883a 	mov	r4,fp
 4410a28:	1023883a 	mov	r17,r2
 4410a2c:	44127fc0 	call	44127fc <__multadd>
 4410a30:	1029883a 	mov	r20,r2
 4410a34:	b027883a 	mov	r19,r22
 4410a38:	003fc006 	br	441093c <__reset+0xfb40c93c>
 4410a3c:	9011883a 	mov	r8,r18
 4410a40:	00800e0e 	bge	zero,r2,4410a7c <_dtoa_r+0xf70>
 4410a44:	800b883a 	mov	r5,r16
 4410a48:	01800044 	movi	r6,1
 4410a4c:	e009883a 	mov	r4,fp
 4410a50:	da001715 	stw	r8,92(sp)
 4410a54:	4412eac0 	call	4412eac <__lshift>
 4410a58:	a80b883a 	mov	r5,r21
 4410a5c:	1009883a 	mov	r4,r2
 4410a60:	1021883a 	mov	r16,r2
 4410a64:	4412ff40 	call	4412ff4 <__mcmp>
 4410a68:	da001717 	ldw	r8,92(sp)
 4410a6c:	0081960e 	bge	zero,r2,44110c8 <_dtoa_r+0x15bc>
 4410a70:	00800e44 	movi	r2,57
 4410a74:	40817026 	beq	r8,r2,4411038 <_dtoa_r+0x152c>
 4410a78:	ba000c44 	addi	r8,r23,49
 4410a7c:	8825883a 	mov	r18,r17
 4410a80:	9dc00044 	addi	r23,r19,1
 4410a84:	9a000005 	stb	r8,0(r19)
 4410a88:	a023883a 	mov	r17,r20
 4410a8c:	dc000915 	stw	r16,36(sp)
 4410a90:	003f2406 	br	4410724 <__reset+0xfb40c724>
 4410a94:	00800e44 	movi	r2,57
 4410a98:	9011883a 	mov	r8,r18
 4410a9c:	90816626 	beq	r18,r2,4411038 <_dtoa_r+0x152c>
 4410aa0:	05bff516 	blt	zero,r22,4410a78 <__reset+0xfb40ca78>
 4410aa4:	003ff506 	br	4410a7c <__reset+0xfb40ca7c>
 4410aa8:	44127fc0 	call	44127fc <__multadd>
 4410aac:	1023883a 	mov	r17,r2
 4410ab0:	1029883a 	mov	r20,r2
 4410ab4:	003fdf06 	br	4410a34 <__reset+0xfb40ca34>
 4410ab8:	e009883a 	mov	r4,fp
 4410abc:	44127d40 	call	44127d4 <_Bfree>
 4410ac0:	00800044 	movi	r2,1
 4410ac4:	003fbc06 	br	44109b8 <__reset+0xfb40c9b8>
 4410ac8:	a80b883a 	mov	r5,r21
 4410acc:	8009883a 	mov	r4,r16
 4410ad0:	4412ff40 	call	4412ff4 <__mcmp>
 4410ad4:	103edb0e 	bge	r2,zero,4410644 <__reset+0xfb40c644>
 4410ad8:	800b883a 	mov	r5,r16
 4410adc:	000f883a 	mov	r7,zero
 4410ae0:	01800284 	movi	r6,10
 4410ae4:	e009883a 	mov	r4,fp
 4410ae8:	44127fc0 	call	44127fc <__multadd>
 4410aec:	1021883a 	mov	r16,r2
 4410af0:	d8800517 	ldw	r2,20(sp)
 4410af4:	d8c00b17 	ldw	r3,44(sp)
 4410af8:	10bfffc4 	addi	r2,r2,-1
 4410afc:	d8800515 	stw	r2,20(sp)
 4410b00:	183f761e 	bne	r3,zero,44108dc <__reset+0xfb40c8dc>
 4410b04:	d9000c17 	ldw	r4,48(sp)
 4410b08:	0101730e 	bge	zero,r4,44110d8 <_dtoa_r+0x15cc>
 4410b0c:	d9000615 	stw	r4,24(sp)
 4410b10:	003ed006 	br	4410654 <__reset+0xfb40c654>
 4410b14:	00800084 	movi	r2,2
 4410b18:	3081861e 	bne	r6,r2,4411134 <_dtoa_r+0x1628>
 4410b1c:	d8000b15 	stw	zero,44(sp)
 4410b20:	003f3c06 	br	4410814 <__reset+0xfb40c814>
 4410b24:	dc000917 	ldw	r16,36(sp)
 4410b28:	003e9206 	br	4410574 <__reset+0xfb40c574>
 4410b2c:	d9c00317 	ldw	r7,12(sp)
 4410b30:	00800084 	movi	r2,2
 4410b34:	11fec50e 	bge	r2,r7,441064c <__reset+0xfb40c64c>
 4410b38:	d9000617 	ldw	r4,24(sp)
 4410b3c:	20013c1e 	bne	r4,zero,4411030 <_dtoa_r+0x1524>
 4410b40:	a80b883a 	mov	r5,r21
 4410b44:	000f883a 	mov	r7,zero
 4410b48:	01800144 	movi	r6,5
 4410b4c:	e009883a 	mov	r4,fp
 4410b50:	44127fc0 	call	44127fc <__multadd>
 4410b54:	100b883a 	mov	r5,r2
 4410b58:	8009883a 	mov	r4,r16
 4410b5c:	102b883a 	mov	r21,r2
 4410b60:	4412ff40 	call	4412ff4 <__mcmp>
 4410b64:	dc000915 	stw	r16,36(sp)
 4410b68:	00bf410e 	bge	zero,r2,4410870 <__reset+0xfb40c870>
 4410b6c:	d9c00717 	ldw	r7,28(sp)
 4410b70:	00800c44 	movi	r2,49
 4410b74:	38800005 	stb	r2,0(r7)
 4410b78:	d8800517 	ldw	r2,20(sp)
 4410b7c:	3dc00044 	addi	r23,r7,1
 4410b80:	10800044 	addi	r2,r2,1
 4410b84:	d8800515 	stw	r2,20(sp)
 4410b88:	003f3d06 	br	4410880 <__reset+0xfb40c880>
 4410b8c:	d9800517 	ldw	r6,20(sp)
 4410b90:	d9c00717 	ldw	r7,28(sp)
 4410b94:	00800c44 	movi	r2,49
 4410b98:	31800044 	addi	r6,r6,1
 4410b9c:	d9800515 	stw	r6,20(sp)
 4410ba0:	38800005 	stb	r2,0(r7)
 4410ba4:	003edf06 	br	4410724 <__reset+0xfb40c724>
 4410ba8:	d8000b15 	stw	zero,44(sp)
 4410bac:	003c9f06 	br	440fe2c <__reset+0xfb40be2c>
 4410bb0:	903e7e1e 	bne	r18,zero,44105ac <__reset+0xfb40c5ac>
 4410bb4:	00800434 	movhi	r2,16
 4410bb8:	10bfffc4 	addi	r2,r2,-1
 4410bbc:	9884703a 	and	r2,r19,r2
 4410bc0:	1000ea1e 	bne	r2,zero,4410f6c <_dtoa_r+0x1460>
 4410bc4:	9cdffc2c 	andhi	r19,r19,32752
 4410bc8:	9800e826 	beq	r19,zero,4410f6c <_dtoa_r+0x1460>
 4410bcc:	d9c00817 	ldw	r7,32(sp)
 4410bd0:	b5800044 	addi	r22,r22,1
 4410bd4:	04c00044 	movi	r19,1
 4410bd8:	39c00044 	addi	r7,r7,1
 4410bdc:	d9c00815 	stw	r7,32(sp)
 4410be0:	d8800d17 	ldw	r2,52(sp)
 4410be4:	103e721e 	bne	r2,zero,44105b0 <__reset+0xfb40c5b0>
 4410be8:	00800044 	movi	r2,1
 4410bec:	003e7906 	br	44105d4 <__reset+0xfb40c5d4>
 4410bf0:	8009883a 	mov	r4,r16
 4410bf4:	440a2780 	call	440a278 <__floatsidf>
 4410bf8:	d9800f17 	ldw	r6,60(sp)
 4410bfc:	d9c01017 	ldw	r7,64(sp)
 4410c00:	1009883a 	mov	r4,r2
 4410c04:	180b883a 	mov	r5,r3
 4410c08:	44091e40 	call	44091e4 <__muldf3>
 4410c0c:	000d883a 	mov	r6,zero
 4410c10:	01d00734 	movhi	r7,16412
 4410c14:	1009883a 	mov	r4,r2
 4410c18:	180b883a 	mov	r5,r3
 4410c1c:	4407f5c0 	call	4407f5c <__adddf3>
 4410c20:	047f3034 	movhi	r17,64704
 4410c24:	1021883a 	mov	r16,r2
 4410c28:	1c63883a 	add	r17,r3,r17
 4410c2c:	d9000f17 	ldw	r4,60(sp)
 4410c30:	d9401017 	ldw	r5,64(sp)
 4410c34:	000d883a 	mov	r6,zero
 4410c38:	01d00534 	movhi	r7,16404
 4410c3c:	44098fc0 	call	44098fc <__subdf3>
 4410c40:	800d883a 	mov	r6,r16
 4410c44:	880f883a 	mov	r7,r17
 4410c48:	1009883a 	mov	r4,r2
 4410c4c:	180b883a 	mov	r5,r3
 4410c50:	102b883a 	mov	r21,r2
 4410c54:	1829883a 	mov	r20,r3
 4410c58:	4417d640 	call	4417d64 <__gedf2>
 4410c5c:	00806c16 	blt	zero,r2,4410e10 <_dtoa_r+0x1304>
 4410c60:	89e0003c 	xorhi	r7,r17,32768
 4410c64:	800d883a 	mov	r6,r16
 4410c68:	a809883a 	mov	r4,r21
 4410c6c:	a00b883a 	mov	r5,r20
 4410c70:	44090f00 	call	44090f0 <__ledf2>
 4410c74:	103d7e0e 	bge	r2,zero,4410270 <__reset+0xfb40c270>
 4410c78:	002b883a 	mov	r21,zero
 4410c7c:	0023883a 	mov	r17,zero
 4410c80:	003efb06 	br	4410870 <__reset+0xfb40c870>
 4410c84:	d8800717 	ldw	r2,28(sp)
 4410c88:	003bd006 	br	440fbcc <__reset+0xfb40bbcc>
 4410c8c:	d9000a17 	ldw	r4,40(sp)
 4410c90:	d9800d17 	ldw	r6,52(sp)
 4410c94:	dd400a15 	stw	r21,40(sp)
 4410c98:	a905c83a 	sub	r2,r21,r4
 4410c9c:	308d883a 	add	r6,r6,r2
 4410ca0:	d9800d15 	stw	r6,52(sp)
 4410ca4:	002b883a 	mov	r21,zero
 4410ca8:	003e0606 	br	44104c4 <__reset+0xfb40c4c4>
 4410cac:	9023883a 	mov	r17,r18
 4410cb0:	9829883a 	mov	r20,r19
 4410cb4:	04000084 	movi	r16,2
 4410cb8:	003c9206 	br	440ff04 <__reset+0xfb40bf04>
 4410cbc:	04000044 	movi	r16,1
 4410cc0:	dc000c15 	stw	r16,48(sp)
 4410cc4:	dc000615 	stw	r16,24(sp)
 4410cc8:	dc002215 	stw	r16,136(sp)
 4410ccc:	e0001115 	stw	zero,68(fp)
 4410cd0:	000b883a 	mov	r5,zero
 4410cd4:	003c6906 	br	440fe7c <__reset+0xfb40be7c>
 4410cd8:	3021883a 	mov	r16,r6
 4410cdc:	003ffb06 	br	4410ccc <__reset+0xfb40cccc>
 4410ce0:	1000021e 	bne	r2,zero,4410cec <_dtoa_r+0x11e0>
 4410ce4:	4200004c 	andi	r8,r8,1
 4410ce8:	403e7d1e 	bne	r8,zero,44106e0 <__reset+0xfb40c6e0>
 4410cec:	01000c04 	movi	r4,48
 4410cf0:	00000106 	br	4410cf8 <_dtoa_r+0x11ec>
 4410cf4:	102f883a 	mov	r23,r2
 4410cf8:	b8bfffc4 	addi	r2,r23,-1
 4410cfc:	10c00007 	ldb	r3,0(r2)
 4410d00:	193ffc26 	beq	r3,r4,4410cf4 <__reset+0xfb40ccf4>
 4410d04:	003e8706 	br	4410724 <__reset+0xfb40c724>
 4410d08:	d8800517 	ldw	r2,20(sp)
 4410d0c:	00a3c83a 	sub	r17,zero,r2
 4410d10:	8800a426 	beq	r17,zero,4410fa4 <_dtoa_r+0x1498>
 4410d14:	888003cc 	andi	r2,r17,15
 4410d18:	100490fa 	slli	r2,r2,3
 4410d1c:	00c110f4 	movhi	r3,1091
 4410d20:	18d36504 	addi	r3,r3,19860
 4410d24:	1885883a 	add	r2,r3,r2
 4410d28:	11800017 	ldw	r6,0(r2)
 4410d2c:	11c00117 	ldw	r7,4(r2)
 4410d30:	9009883a 	mov	r4,r18
 4410d34:	980b883a 	mov	r5,r19
 4410d38:	8823d13a 	srai	r17,r17,4
 4410d3c:	44091e40 	call	44091e4 <__muldf3>
 4410d40:	d8800f15 	stw	r2,60(sp)
 4410d44:	d8c01015 	stw	r3,64(sp)
 4410d48:	8800e826 	beq	r17,zero,44110ec <_dtoa_r+0x15e0>
 4410d4c:	050110f4 	movhi	r20,1091
 4410d50:	a5135b04 	addi	r20,r20,19820
 4410d54:	04000084 	movi	r16,2
 4410d58:	8980004c 	andi	r6,r17,1
 4410d5c:	1009883a 	mov	r4,r2
 4410d60:	8823d07a 	srai	r17,r17,1
 4410d64:	180b883a 	mov	r5,r3
 4410d68:	30000426 	beq	r6,zero,4410d7c <_dtoa_r+0x1270>
 4410d6c:	a1800017 	ldw	r6,0(r20)
 4410d70:	a1c00117 	ldw	r7,4(r20)
 4410d74:	84000044 	addi	r16,r16,1
 4410d78:	44091e40 	call	44091e4 <__muldf3>
 4410d7c:	a5000204 	addi	r20,r20,8
 4410d80:	883ff51e 	bne	r17,zero,4410d58 <__reset+0xfb40cd58>
 4410d84:	d8800f15 	stw	r2,60(sp)
 4410d88:	d8c01015 	stw	r3,64(sp)
 4410d8c:	003c7606 	br	440ff68 <__reset+0xfb40bf68>
 4410d90:	00c00c04 	movi	r3,48
 4410d94:	10c00005 	stb	r3,0(r2)
 4410d98:	d8c00517 	ldw	r3,20(sp)
 4410d9c:	bd3fffc3 	ldbu	r20,-1(r23)
 4410da0:	18c00044 	addi	r3,r3,1
 4410da4:	d8c00515 	stw	r3,20(sp)
 4410da8:	003db906 	br	4410490 <__reset+0xfb40c490>
 4410dac:	89400117 	ldw	r5,4(r17)
 4410db0:	e009883a 	mov	r4,fp
 4410db4:	441272c0 	call	441272c <_Balloc>
 4410db8:	89800417 	ldw	r6,16(r17)
 4410dbc:	89400304 	addi	r5,r17,12
 4410dc0:	11000304 	addi	r4,r2,12
 4410dc4:	31800084 	addi	r6,r6,2
 4410dc8:	318d883a 	add	r6,r6,r6
 4410dcc:	318d883a 	add	r6,r6,r6
 4410dd0:	1027883a 	mov	r19,r2
 4410dd4:	440abfc0 	call	440abfc <memcpy>
 4410dd8:	01800044 	movi	r6,1
 4410ddc:	980b883a 	mov	r5,r19
 4410de0:	e009883a 	mov	r4,fp
 4410de4:	4412eac0 	call	4412eac <__lshift>
 4410de8:	1029883a 	mov	r20,r2
 4410dec:	003ecc06 	br	4410920 <__reset+0xfb40c920>
 4410df0:	00800e44 	movi	r2,57
 4410df4:	90809026 	beq	r18,r2,4411038 <_dtoa_r+0x152c>
 4410df8:	92000044 	addi	r8,r18,1
 4410dfc:	003f1f06 	br	4410a7c <__reset+0xfb40ca7c>
 4410e00:	9011883a 	mov	r8,r18
 4410e04:	8825883a 	mov	r18,r17
 4410e08:	a023883a 	mov	r17,r20
 4410e0c:	003e2906 	br	44106b4 <__reset+0xfb40c6b4>
 4410e10:	002b883a 	mov	r21,zero
 4410e14:	0023883a 	mov	r17,zero
 4410e18:	003f5406 	br	4410b6c <__reset+0xfb40cb6c>
 4410e1c:	61bfffc4 	addi	r6,r12,-1
 4410e20:	300490fa 	slli	r2,r6,3
 4410e24:	00c110f4 	movhi	r3,1091
 4410e28:	18d36504 	addi	r3,r3,19860
 4410e2c:	1885883a 	add	r2,r3,r2
 4410e30:	11000017 	ldw	r4,0(r2)
 4410e34:	11400117 	ldw	r5,4(r2)
 4410e38:	d8800717 	ldw	r2,28(sp)
 4410e3c:	880f883a 	mov	r7,r17
 4410e40:	d9801215 	stw	r6,72(sp)
 4410e44:	800d883a 	mov	r6,r16
 4410e48:	db001615 	stw	r12,88(sp)
 4410e4c:	15c00044 	addi	r23,r2,1
 4410e50:	44091e40 	call	44091e4 <__muldf3>
 4410e54:	d9401017 	ldw	r5,64(sp)
 4410e58:	d9000f17 	ldw	r4,60(sp)
 4410e5c:	d8c01515 	stw	r3,84(sp)
 4410e60:	d8801415 	stw	r2,80(sp)
 4410e64:	440a1f80 	call	440a1f8 <__fixdfsi>
 4410e68:	1009883a 	mov	r4,r2
 4410e6c:	1021883a 	mov	r16,r2
 4410e70:	440a2780 	call	440a278 <__floatsidf>
 4410e74:	d9000f17 	ldw	r4,60(sp)
 4410e78:	d9401017 	ldw	r5,64(sp)
 4410e7c:	100d883a 	mov	r6,r2
 4410e80:	180f883a 	mov	r7,r3
 4410e84:	44098fc0 	call	44098fc <__subdf3>
 4410e88:	1829883a 	mov	r20,r3
 4410e8c:	d8c00717 	ldw	r3,28(sp)
 4410e90:	84000c04 	addi	r16,r16,48
 4410e94:	1023883a 	mov	r17,r2
 4410e98:	1c000005 	stb	r16,0(r3)
 4410e9c:	db001617 	ldw	r12,88(sp)
 4410ea0:	00800044 	movi	r2,1
 4410ea4:	60802226 	beq	r12,r2,4410f30 <_dtoa_r+0x1424>
 4410ea8:	d9c00717 	ldw	r7,28(sp)
 4410eac:	8805883a 	mov	r2,r17
 4410eb0:	b82b883a 	mov	r21,r23
 4410eb4:	3b19883a 	add	r12,r7,r12
 4410eb8:	6023883a 	mov	r17,r12
 4410ebc:	a007883a 	mov	r3,r20
 4410ec0:	dc800f15 	stw	r18,60(sp)
 4410ec4:	000d883a 	mov	r6,zero
 4410ec8:	01d00934 	movhi	r7,16420
 4410ecc:	1009883a 	mov	r4,r2
 4410ed0:	180b883a 	mov	r5,r3
 4410ed4:	44091e40 	call	44091e4 <__muldf3>
 4410ed8:	180b883a 	mov	r5,r3
 4410edc:	1009883a 	mov	r4,r2
 4410ee0:	1829883a 	mov	r20,r3
 4410ee4:	1025883a 	mov	r18,r2
 4410ee8:	440a1f80 	call	440a1f8 <__fixdfsi>
 4410eec:	1009883a 	mov	r4,r2
 4410ef0:	1021883a 	mov	r16,r2
 4410ef4:	440a2780 	call	440a278 <__floatsidf>
 4410ef8:	100d883a 	mov	r6,r2
 4410efc:	180f883a 	mov	r7,r3
 4410f00:	9009883a 	mov	r4,r18
 4410f04:	a00b883a 	mov	r5,r20
 4410f08:	84000c04 	addi	r16,r16,48
 4410f0c:	44098fc0 	call	44098fc <__subdf3>
 4410f10:	ad400044 	addi	r21,r21,1
 4410f14:	ac3fffc5 	stb	r16,-1(r21)
 4410f18:	ac7fea1e 	bne	r21,r17,4410ec4 <__reset+0xfb40cec4>
 4410f1c:	1023883a 	mov	r17,r2
 4410f20:	d8801217 	ldw	r2,72(sp)
 4410f24:	dc800f17 	ldw	r18,60(sp)
 4410f28:	1829883a 	mov	r20,r3
 4410f2c:	b8af883a 	add	r23,r23,r2
 4410f30:	d9001417 	ldw	r4,80(sp)
 4410f34:	d9401517 	ldw	r5,84(sp)
 4410f38:	000d883a 	mov	r6,zero
 4410f3c:	01cff834 	movhi	r7,16352
 4410f40:	4407f5c0 	call	4407f5c <__adddf3>
 4410f44:	880d883a 	mov	r6,r17
 4410f48:	a00f883a 	mov	r7,r20
 4410f4c:	1009883a 	mov	r4,r2
 4410f50:	180b883a 	mov	r5,r3
 4410f54:	44090f00 	call	44090f0 <__ledf2>
 4410f58:	10003e0e 	bge	r2,zero,4411054 <_dtoa_r+0x1548>
 4410f5c:	d9001317 	ldw	r4,76(sp)
 4410f60:	bd3fffc3 	ldbu	r20,-1(r23)
 4410f64:	d9000515 	stw	r4,20(sp)
 4410f68:	003d3b06 	br	4410458 <__reset+0xfb40c458>
 4410f6c:	0027883a 	mov	r19,zero
 4410f70:	003f1b06 	br	4410be0 <__reset+0xfb40cbe0>
 4410f74:	d8800817 	ldw	r2,32(sp)
 4410f78:	11e9c83a 	sub	r20,r2,r7
 4410f7c:	0005883a 	mov	r2,zero
 4410f80:	003d5406 	br	44104d4 <__reset+0xfb40c4d4>
 4410f84:	00800044 	movi	r2,1
 4410f88:	003dc706 	br	44106a8 <__reset+0xfb40c6a8>
 4410f8c:	d8c00217 	ldw	r3,8(sp)
 4410f90:	00800d84 	movi	r2,54
 4410f94:	dd400a17 	ldw	r21,40(sp)
 4410f98:	10c5c83a 	sub	r2,r2,r3
 4410f9c:	dd000817 	ldw	r20,32(sp)
 4410fa0:	003d4c06 	br	44104d4 <__reset+0xfb40c4d4>
 4410fa4:	dc800f15 	stw	r18,60(sp)
 4410fa8:	dcc01015 	stw	r19,64(sp)
 4410fac:	04000084 	movi	r16,2
 4410fb0:	003bed06 	br	440ff68 <__reset+0xfb40bf68>
 4410fb4:	d9000617 	ldw	r4,24(sp)
 4410fb8:	203f0d26 	beq	r4,zero,4410bf0 <__reset+0xfb40cbf0>
 4410fbc:	d9800c17 	ldw	r6,48(sp)
 4410fc0:	01bcab0e 	bge	zero,r6,4410270 <__reset+0xfb40c270>
 4410fc4:	d9401017 	ldw	r5,64(sp)
 4410fc8:	d9000f17 	ldw	r4,60(sp)
 4410fcc:	000d883a 	mov	r6,zero
 4410fd0:	01d00934 	movhi	r7,16420
 4410fd4:	44091e40 	call	44091e4 <__muldf3>
 4410fd8:	81000044 	addi	r4,r16,1
 4410fdc:	d8800f15 	stw	r2,60(sp)
 4410fe0:	d8c01015 	stw	r3,64(sp)
 4410fe4:	440a2780 	call	440a278 <__floatsidf>
 4410fe8:	d9800f17 	ldw	r6,60(sp)
 4410fec:	d9c01017 	ldw	r7,64(sp)
 4410ff0:	1009883a 	mov	r4,r2
 4410ff4:	180b883a 	mov	r5,r3
 4410ff8:	44091e40 	call	44091e4 <__muldf3>
 4410ffc:	01d00734 	movhi	r7,16412
 4411000:	000d883a 	mov	r6,zero
 4411004:	1009883a 	mov	r4,r2
 4411008:	180b883a 	mov	r5,r3
 441100c:	4407f5c0 	call	4407f5c <__adddf3>
 4411010:	d9c00517 	ldw	r7,20(sp)
 4411014:	047f3034 	movhi	r17,64704
 4411018:	1021883a 	mov	r16,r2
 441101c:	39ffffc4 	addi	r7,r7,-1
 4411020:	d9c01315 	stw	r7,76(sp)
 4411024:	1c63883a 	add	r17,r3,r17
 4411028:	db000c17 	ldw	r12,48(sp)
 441102c:	003bea06 	br	440ffd8 <__reset+0xfb40bfd8>
 4411030:	dc000915 	stw	r16,36(sp)
 4411034:	003e0e06 	br	4410870 <__reset+0xfb40c870>
 4411038:	01000e44 	movi	r4,57
 441103c:	8825883a 	mov	r18,r17
 4411040:	9dc00044 	addi	r23,r19,1
 4411044:	99000005 	stb	r4,0(r19)
 4411048:	a023883a 	mov	r17,r20
 441104c:	dc000915 	stw	r16,36(sp)
 4411050:	003da406 	br	44106e4 <__reset+0xfb40c6e4>
 4411054:	d9801417 	ldw	r6,80(sp)
 4411058:	d9c01517 	ldw	r7,84(sp)
 441105c:	0009883a 	mov	r4,zero
 4411060:	014ff834 	movhi	r5,16352
 4411064:	44098fc0 	call	44098fc <__subdf3>
 4411068:	880d883a 	mov	r6,r17
 441106c:	a00f883a 	mov	r7,r20
 4411070:	1009883a 	mov	r4,r2
 4411074:	180b883a 	mov	r5,r3
 4411078:	4417d640 	call	4417d64 <__gedf2>
 441107c:	00bc7c0e 	bge	zero,r2,4410270 <__reset+0xfb40c270>
 4411080:	01000c04 	movi	r4,48
 4411084:	00000106 	br	441108c <_dtoa_r+0x1580>
 4411088:	102f883a 	mov	r23,r2
 441108c:	b8bfffc4 	addi	r2,r23,-1
 4411090:	10c00007 	ldb	r3,0(r2)
 4411094:	193ffc26 	beq	r3,r4,4411088 <__reset+0xfb40d088>
 4411098:	d9801317 	ldw	r6,76(sp)
 441109c:	d9800515 	stw	r6,20(sp)
 44110a0:	003c4406 	br	44101b4 <__reset+0xfb40c1b4>
 44110a4:	d9801317 	ldw	r6,76(sp)
 44110a8:	d9800515 	stw	r6,20(sp)
 44110ac:	003cea06 	br	4410458 <__reset+0xfb40c458>
 44110b0:	dd800f17 	ldw	r22,60(sp)
 44110b4:	dcc01017 	ldw	r19,64(sp)
 44110b8:	dc801217 	ldw	r18,72(sp)
 44110bc:	003c6c06 	br	4410270 <__reset+0xfb40c270>
 44110c0:	903e031e 	bne	r18,zero,44108d0 <__reset+0xfb40c8d0>
 44110c4:	003ebb06 	br	4410bb4 <__reset+0xfb40cbb4>
 44110c8:	103e6c1e 	bne	r2,zero,4410a7c <__reset+0xfb40ca7c>
 44110cc:	4080004c 	andi	r2,r8,1
 44110d0:	103e6a26 	beq	r2,zero,4410a7c <__reset+0xfb40ca7c>
 44110d4:	003e6606 	br	4410a70 <__reset+0xfb40ca70>
 44110d8:	d8c00317 	ldw	r3,12(sp)
 44110dc:	00800084 	movi	r2,2
 44110e0:	10c02916 	blt	r2,r3,4411188 <_dtoa_r+0x167c>
 44110e4:	d9000c17 	ldw	r4,48(sp)
 44110e8:	003e8806 	br	4410b0c <__reset+0xfb40cb0c>
 44110ec:	04000084 	movi	r16,2
 44110f0:	003b9d06 	br	440ff68 <__reset+0xfb40bf68>
 44110f4:	d9001317 	ldw	r4,76(sp)
 44110f8:	d9000515 	stw	r4,20(sp)
 44110fc:	003cd606 	br	4410458 <__reset+0xfb40c458>
 4411100:	d8801317 	ldw	r2,76(sp)
 4411104:	d8800515 	stw	r2,20(sp)
 4411108:	003c2a06 	br	44101b4 <__reset+0xfb40c1b4>
 441110c:	d9800317 	ldw	r6,12(sp)
 4411110:	00800084 	movi	r2,2
 4411114:	11801516 	blt	r2,r6,441116c <_dtoa_r+0x1660>
 4411118:	d9c00c17 	ldw	r7,48(sp)
 441111c:	d9c00615 	stw	r7,24(sp)
 4411120:	003df706 	br	4410900 <__reset+0xfb40c900>
 4411124:	193d3926 	beq	r3,r4,441060c <__reset+0xfb40c60c>
 4411128:	00c00f04 	movi	r3,60
 441112c:	1885c83a 	sub	r2,r3,r2
 4411130:	003ddf06 	br	44108b0 <__reset+0xfb40c8b0>
 4411134:	e009883a 	mov	r4,fp
 4411138:	e0001115 	stw	zero,68(fp)
 441113c:	000b883a 	mov	r5,zero
 4411140:	441272c0 	call	441272c <_Balloc>
 4411144:	d8800715 	stw	r2,28(sp)
 4411148:	d8c00717 	ldw	r3,28(sp)
 441114c:	00bfffc4 	movi	r2,-1
 4411150:	01000044 	movi	r4,1
 4411154:	d8800c15 	stw	r2,48(sp)
 4411158:	e0c01015 	stw	r3,64(fp)
 441115c:	d9000b15 	stw	r4,44(sp)
 4411160:	d8800615 	stw	r2,24(sp)
 4411164:	d8002215 	stw	zero,136(sp)
 4411168:	003c4106 	br	4410270 <__reset+0xfb40c270>
 441116c:	d8c00c17 	ldw	r3,48(sp)
 4411170:	d8c00615 	stw	r3,24(sp)
 4411174:	003e7006 	br	4410b38 <__reset+0xfb40cb38>
 4411178:	04400044 	movi	r17,1
 441117c:	003b2006 	br	440fe00 <__reset+0xfb40be00>
 4411180:	000b883a 	mov	r5,zero
 4411184:	003b3d06 	br	440fe7c <__reset+0xfb40be7c>
 4411188:	d8800c17 	ldw	r2,48(sp)
 441118c:	d8800615 	stw	r2,24(sp)
 4411190:	003e6906 	br	4410b38 <__reset+0xfb40cb38>

04411194 <__sflush_r>:
 4411194:	2880030b 	ldhu	r2,12(r5)
 4411198:	defffb04 	addi	sp,sp,-20
 441119c:	dcc00315 	stw	r19,12(sp)
 44111a0:	dc400115 	stw	r17,4(sp)
 44111a4:	dfc00415 	stw	ra,16(sp)
 44111a8:	dc800215 	stw	r18,8(sp)
 44111ac:	dc000015 	stw	r16,0(sp)
 44111b0:	10c0020c 	andi	r3,r2,8
 44111b4:	2823883a 	mov	r17,r5
 44111b8:	2027883a 	mov	r19,r4
 44111bc:	1800311e 	bne	r3,zero,4411284 <__sflush_r+0xf0>
 44111c0:	28c00117 	ldw	r3,4(r5)
 44111c4:	10820014 	ori	r2,r2,2048
 44111c8:	2880030d 	sth	r2,12(r5)
 44111cc:	00c04b0e 	bge	zero,r3,44112fc <__sflush_r+0x168>
 44111d0:	8a000a17 	ldw	r8,40(r17)
 44111d4:	40002326 	beq	r8,zero,4411264 <__sflush_r+0xd0>
 44111d8:	9c000017 	ldw	r16,0(r19)
 44111dc:	10c4000c 	andi	r3,r2,4096
 44111e0:	98000015 	stw	zero,0(r19)
 44111e4:	18004826 	beq	r3,zero,4411308 <__sflush_r+0x174>
 44111e8:	89801417 	ldw	r6,80(r17)
 44111ec:	10c0010c 	andi	r3,r2,4
 44111f0:	18000626 	beq	r3,zero,441120c <__sflush_r+0x78>
 44111f4:	88c00117 	ldw	r3,4(r17)
 44111f8:	88800c17 	ldw	r2,48(r17)
 44111fc:	30cdc83a 	sub	r6,r6,r3
 4411200:	10000226 	beq	r2,zero,441120c <__sflush_r+0x78>
 4411204:	88800f17 	ldw	r2,60(r17)
 4411208:	308dc83a 	sub	r6,r6,r2
 441120c:	89400717 	ldw	r5,28(r17)
 4411210:	000f883a 	mov	r7,zero
 4411214:	9809883a 	mov	r4,r19
 4411218:	403ee83a 	callr	r8
 441121c:	00ffffc4 	movi	r3,-1
 4411220:	10c04426 	beq	r2,r3,4411334 <__sflush_r+0x1a0>
 4411224:	88c0030b 	ldhu	r3,12(r17)
 4411228:	89000417 	ldw	r4,16(r17)
 441122c:	88000115 	stw	zero,4(r17)
 4411230:	197dffcc 	andi	r5,r3,63487
 4411234:	8940030d 	sth	r5,12(r17)
 4411238:	89000015 	stw	r4,0(r17)
 441123c:	18c4000c 	andi	r3,r3,4096
 4411240:	18002c1e 	bne	r3,zero,44112f4 <__sflush_r+0x160>
 4411244:	89400c17 	ldw	r5,48(r17)
 4411248:	9c000015 	stw	r16,0(r19)
 441124c:	28000526 	beq	r5,zero,4411264 <__sflush_r+0xd0>
 4411250:	88801004 	addi	r2,r17,64
 4411254:	28800226 	beq	r5,r2,4411260 <__sflush_r+0xcc>
 4411258:	9809883a 	mov	r4,r19
 441125c:	44119000 	call	4411900 <_free_r>
 4411260:	88000c15 	stw	zero,48(r17)
 4411264:	0005883a 	mov	r2,zero
 4411268:	dfc00417 	ldw	ra,16(sp)
 441126c:	dcc00317 	ldw	r19,12(sp)
 4411270:	dc800217 	ldw	r18,8(sp)
 4411274:	dc400117 	ldw	r17,4(sp)
 4411278:	dc000017 	ldw	r16,0(sp)
 441127c:	dec00504 	addi	sp,sp,20
 4411280:	f800283a 	ret
 4411284:	2c800417 	ldw	r18,16(r5)
 4411288:	903ff626 	beq	r18,zero,4411264 <__reset+0xfb40d264>
 441128c:	2c000017 	ldw	r16,0(r5)
 4411290:	108000cc 	andi	r2,r2,3
 4411294:	2c800015 	stw	r18,0(r5)
 4411298:	84a1c83a 	sub	r16,r16,r18
 441129c:	1000131e 	bne	r2,zero,44112ec <__sflush_r+0x158>
 44112a0:	28800517 	ldw	r2,20(r5)
 44112a4:	88800215 	stw	r2,8(r17)
 44112a8:	04000316 	blt	zero,r16,44112b8 <__sflush_r+0x124>
 44112ac:	003fed06 	br	4411264 <__reset+0xfb40d264>
 44112b0:	90a5883a 	add	r18,r18,r2
 44112b4:	043feb0e 	bge	zero,r16,4411264 <__reset+0xfb40d264>
 44112b8:	88800917 	ldw	r2,36(r17)
 44112bc:	89400717 	ldw	r5,28(r17)
 44112c0:	800f883a 	mov	r7,r16
 44112c4:	900d883a 	mov	r6,r18
 44112c8:	9809883a 	mov	r4,r19
 44112cc:	103ee83a 	callr	r2
 44112d0:	80a1c83a 	sub	r16,r16,r2
 44112d4:	00bff616 	blt	zero,r2,44112b0 <__reset+0xfb40d2b0>
 44112d8:	88c0030b 	ldhu	r3,12(r17)
 44112dc:	00bfffc4 	movi	r2,-1
 44112e0:	18c01014 	ori	r3,r3,64
 44112e4:	88c0030d 	sth	r3,12(r17)
 44112e8:	003fdf06 	br	4411268 <__reset+0xfb40d268>
 44112ec:	0005883a 	mov	r2,zero
 44112f0:	003fec06 	br	44112a4 <__reset+0xfb40d2a4>
 44112f4:	88801415 	stw	r2,80(r17)
 44112f8:	003fd206 	br	4411244 <__reset+0xfb40d244>
 44112fc:	28c00f17 	ldw	r3,60(r5)
 4411300:	00ffb316 	blt	zero,r3,44111d0 <__reset+0xfb40d1d0>
 4411304:	003fd706 	br	4411264 <__reset+0xfb40d264>
 4411308:	89400717 	ldw	r5,28(r17)
 441130c:	000d883a 	mov	r6,zero
 4411310:	01c00044 	movi	r7,1
 4411314:	9809883a 	mov	r4,r19
 4411318:	403ee83a 	callr	r8
 441131c:	100d883a 	mov	r6,r2
 4411320:	00bfffc4 	movi	r2,-1
 4411324:	30801426 	beq	r6,r2,4411378 <__sflush_r+0x1e4>
 4411328:	8880030b 	ldhu	r2,12(r17)
 441132c:	8a000a17 	ldw	r8,40(r17)
 4411330:	003fae06 	br	44111ec <__reset+0xfb40d1ec>
 4411334:	98c00017 	ldw	r3,0(r19)
 4411338:	183fba26 	beq	r3,zero,4411224 <__reset+0xfb40d224>
 441133c:	01000744 	movi	r4,29
 4411340:	19000626 	beq	r3,r4,441135c <__sflush_r+0x1c8>
 4411344:	01000584 	movi	r4,22
 4411348:	19000426 	beq	r3,r4,441135c <__sflush_r+0x1c8>
 441134c:	88c0030b 	ldhu	r3,12(r17)
 4411350:	18c01014 	ori	r3,r3,64
 4411354:	88c0030d 	sth	r3,12(r17)
 4411358:	003fc306 	br	4411268 <__reset+0xfb40d268>
 441135c:	8880030b 	ldhu	r2,12(r17)
 4411360:	88c00417 	ldw	r3,16(r17)
 4411364:	88000115 	stw	zero,4(r17)
 4411368:	10bdffcc 	andi	r2,r2,63487
 441136c:	8880030d 	sth	r2,12(r17)
 4411370:	88c00015 	stw	r3,0(r17)
 4411374:	003fb306 	br	4411244 <__reset+0xfb40d244>
 4411378:	98800017 	ldw	r2,0(r19)
 441137c:	103fea26 	beq	r2,zero,4411328 <__reset+0xfb40d328>
 4411380:	00c00744 	movi	r3,29
 4411384:	10c00226 	beq	r2,r3,4411390 <__sflush_r+0x1fc>
 4411388:	00c00584 	movi	r3,22
 441138c:	10c0031e 	bne	r2,r3,441139c <__sflush_r+0x208>
 4411390:	9c000015 	stw	r16,0(r19)
 4411394:	0005883a 	mov	r2,zero
 4411398:	003fb306 	br	4411268 <__reset+0xfb40d268>
 441139c:	88c0030b 	ldhu	r3,12(r17)
 44113a0:	3005883a 	mov	r2,r6
 44113a4:	18c01014 	ori	r3,r3,64
 44113a8:	88c0030d 	sth	r3,12(r17)
 44113ac:	003fae06 	br	4411268 <__reset+0xfb40d268>

044113b0 <_fflush_r>:
 44113b0:	defffd04 	addi	sp,sp,-12
 44113b4:	dc000115 	stw	r16,4(sp)
 44113b8:	dfc00215 	stw	ra,8(sp)
 44113bc:	2021883a 	mov	r16,r4
 44113c0:	20000226 	beq	r4,zero,44113cc <_fflush_r+0x1c>
 44113c4:	20800e17 	ldw	r2,56(r4)
 44113c8:	10000c26 	beq	r2,zero,44113fc <_fflush_r+0x4c>
 44113cc:	2880030f 	ldh	r2,12(r5)
 44113d0:	1000051e 	bne	r2,zero,44113e8 <_fflush_r+0x38>
 44113d4:	0005883a 	mov	r2,zero
 44113d8:	dfc00217 	ldw	ra,8(sp)
 44113dc:	dc000117 	ldw	r16,4(sp)
 44113e0:	dec00304 	addi	sp,sp,12
 44113e4:	f800283a 	ret
 44113e8:	8009883a 	mov	r4,r16
 44113ec:	dfc00217 	ldw	ra,8(sp)
 44113f0:	dc000117 	ldw	r16,4(sp)
 44113f4:	dec00304 	addi	sp,sp,12
 44113f8:	44111941 	jmpi	4411194 <__sflush_r>
 44113fc:	d9400015 	stw	r5,0(sp)
 4411400:	441178c0 	call	441178c <__sinit>
 4411404:	d9400017 	ldw	r5,0(sp)
 4411408:	003ff006 	br	44113cc <__reset+0xfb40d3cc>

0441140c <fflush>:
 441140c:	20000526 	beq	r4,zero,4411424 <fflush+0x18>
 4411410:	00811134 	movhi	r2,1092
 4411414:	10a15004 	addi	r2,r2,-31424
 4411418:	200b883a 	mov	r5,r4
 441141c:	11000017 	ldw	r4,0(r2)
 4411420:	44113b01 	jmpi	44113b0 <_fflush_r>
 4411424:	00811134 	movhi	r2,1092
 4411428:	10a14f04 	addi	r2,r2,-31428
 441142c:	11000017 	ldw	r4,0(r2)
 4411430:	01411074 	movhi	r5,1089
 4411434:	2944ec04 	addi	r5,r5,5040
 4411438:	44121901 	jmpi	4412190 <_fwalk_reent>

0441143c <__fp_unlock>:
 441143c:	0005883a 	mov	r2,zero
 4411440:	f800283a 	ret

04411444 <_cleanup_r>:
 4411444:	01411074 	movhi	r5,1089
 4411448:	295a9c04 	addi	r5,r5,27248
 441144c:	44121901 	jmpi	4412190 <_fwalk_reent>

04411450 <__sinit.part.1>:
 4411450:	defff704 	addi	sp,sp,-36
 4411454:	00c11074 	movhi	r3,1089
 4411458:	dfc00815 	stw	ra,32(sp)
 441145c:	ddc00715 	stw	r23,28(sp)
 4411460:	dd800615 	stw	r22,24(sp)
 4411464:	dd400515 	stw	r21,20(sp)
 4411468:	dd000415 	stw	r20,16(sp)
 441146c:	dcc00315 	stw	r19,12(sp)
 4411470:	dc800215 	stw	r18,8(sp)
 4411474:	dc400115 	stw	r17,4(sp)
 4411478:	dc000015 	stw	r16,0(sp)
 441147c:	18c51104 	addi	r3,r3,5188
 4411480:	24000117 	ldw	r16,4(r4)
 4411484:	20c00f15 	stw	r3,60(r4)
 4411488:	2080bb04 	addi	r2,r4,748
 441148c:	00c000c4 	movi	r3,3
 4411490:	20c0b915 	stw	r3,740(r4)
 4411494:	2080ba15 	stw	r2,744(r4)
 4411498:	2000b815 	stw	zero,736(r4)
 441149c:	05c00204 	movi	r23,8
 44114a0:	00800104 	movi	r2,4
 44114a4:	2025883a 	mov	r18,r4
 44114a8:	b80d883a 	mov	r6,r23
 44114ac:	81001704 	addi	r4,r16,92
 44114b0:	000b883a 	mov	r5,zero
 44114b4:	80000015 	stw	zero,0(r16)
 44114b8:	80000115 	stw	zero,4(r16)
 44114bc:	80000215 	stw	zero,8(r16)
 44114c0:	8080030d 	sth	r2,12(r16)
 44114c4:	80001915 	stw	zero,100(r16)
 44114c8:	8000038d 	sth	zero,14(r16)
 44114cc:	80000415 	stw	zero,16(r16)
 44114d0:	80000515 	stw	zero,20(r16)
 44114d4:	80000615 	stw	zero,24(r16)
 44114d8:	440ad440 	call	440ad44 <memset>
 44114dc:	05811074 	movhi	r22,1089
 44114e0:	94400217 	ldw	r17,8(r18)
 44114e4:	05411074 	movhi	r21,1089
 44114e8:	05011074 	movhi	r20,1089
 44114ec:	04c11074 	movhi	r19,1089
 44114f0:	b58f2304 	addi	r22,r22,15500
 44114f4:	ad4f3a04 	addi	r21,r21,15592
 44114f8:	a50f5904 	addi	r20,r20,15716
 44114fc:	9ccf7004 	addi	r19,r19,15808
 4411500:	85800815 	stw	r22,32(r16)
 4411504:	85400915 	stw	r21,36(r16)
 4411508:	85000a15 	stw	r20,40(r16)
 441150c:	84c00b15 	stw	r19,44(r16)
 4411510:	84000715 	stw	r16,28(r16)
 4411514:	00800284 	movi	r2,10
 4411518:	8880030d 	sth	r2,12(r17)
 441151c:	00800044 	movi	r2,1
 4411520:	b80d883a 	mov	r6,r23
 4411524:	89001704 	addi	r4,r17,92
 4411528:	000b883a 	mov	r5,zero
 441152c:	88000015 	stw	zero,0(r17)
 4411530:	88000115 	stw	zero,4(r17)
 4411534:	88000215 	stw	zero,8(r17)
 4411538:	88001915 	stw	zero,100(r17)
 441153c:	8880038d 	sth	r2,14(r17)
 4411540:	88000415 	stw	zero,16(r17)
 4411544:	88000515 	stw	zero,20(r17)
 4411548:	88000615 	stw	zero,24(r17)
 441154c:	440ad440 	call	440ad44 <memset>
 4411550:	94000317 	ldw	r16,12(r18)
 4411554:	00800484 	movi	r2,18
 4411558:	8c400715 	stw	r17,28(r17)
 441155c:	8d800815 	stw	r22,32(r17)
 4411560:	8d400915 	stw	r21,36(r17)
 4411564:	8d000a15 	stw	r20,40(r17)
 4411568:	8cc00b15 	stw	r19,44(r17)
 441156c:	8080030d 	sth	r2,12(r16)
 4411570:	00800084 	movi	r2,2
 4411574:	80000015 	stw	zero,0(r16)
 4411578:	80000115 	stw	zero,4(r16)
 441157c:	80000215 	stw	zero,8(r16)
 4411580:	80001915 	stw	zero,100(r16)
 4411584:	8080038d 	sth	r2,14(r16)
 4411588:	80000415 	stw	zero,16(r16)
 441158c:	80000515 	stw	zero,20(r16)
 4411590:	80000615 	stw	zero,24(r16)
 4411594:	b80d883a 	mov	r6,r23
 4411598:	000b883a 	mov	r5,zero
 441159c:	81001704 	addi	r4,r16,92
 44115a0:	440ad440 	call	440ad44 <memset>
 44115a4:	00800044 	movi	r2,1
 44115a8:	84000715 	stw	r16,28(r16)
 44115ac:	85800815 	stw	r22,32(r16)
 44115b0:	85400915 	stw	r21,36(r16)
 44115b4:	85000a15 	stw	r20,40(r16)
 44115b8:	84c00b15 	stw	r19,44(r16)
 44115bc:	90800e15 	stw	r2,56(r18)
 44115c0:	dfc00817 	ldw	ra,32(sp)
 44115c4:	ddc00717 	ldw	r23,28(sp)
 44115c8:	dd800617 	ldw	r22,24(sp)
 44115cc:	dd400517 	ldw	r21,20(sp)
 44115d0:	dd000417 	ldw	r20,16(sp)
 44115d4:	dcc00317 	ldw	r19,12(sp)
 44115d8:	dc800217 	ldw	r18,8(sp)
 44115dc:	dc400117 	ldw	r17,4(sp)
 44115e0:	dc000017 	ldw	r16,0(sp)
 44115e4:	dec00904 	addi	sp,sp,36
 44115e8:	f800283a 	ret

044115ec <__fp_lock>:
 44115ec:	0005883a 	mov	r2,zero
 44115f0:	f800283a 	ret

044115f4 <__sfmoreglue>:
 44115f4:	defffc04 	addi	sp,sp,-16
 44115f8:	dc400115 	stw	r17,4(sp)
 44115fc:	2c7fffc4 	addi	r17,r5,-1
 4411600:	8c401a24 	muli	r17,r17,104
 4411604:	dc800215 	stw	r18,8(sp)
 4411608:	2825883a 	mov	r18,r5
 441160c:	89401d04 	addi	r5,r17,116
 4411610:	dc000015 	stw	r16,0(sp)
 4411614:	dfc00315 	stw	ra,12(sp)
 4411618:	440a3f00 	call	440a3f0 <_malloc_r>
 441161c:	1021883a 	mov	r16,r2
 4411620:	10000726 	beq	r2,zero,4411640 <__sfmoreglue+0x4c>
 4411624:	11000304 	addi	r4,r2,12
 4411628:	10000015 	stw	zero,0(r2)
 441162c:	14800115 	stw	r18,4(r2)
 4411630:	11000215 	stw	r4,8(r2)
 4411634:	89801a04 	addi	r6,r17,104
 4411638:	000b883a 	mov	r5,zero
 441163c:	440ad440 	call	440ad44 <memset>
 4411640:	8005883a 	mov	r2,r16
 4411644:	dfc00317 	ldw	ra,12(sp)
 4411648:	dc800217 	ldw	r18,8(sp)
 441164c:	dc400117 	ldw	r17,4(sp)
 4411650:	dc000017 	ldw	r16,0(sp)
 4411654:	dec00404 	addi	sp,sp,16
 4411658:	f800283a 	ret

0441165c <__sfp>:
 441165c:	defffb04 	addi	sp,sp,-20
 4411660:	dc000015 	stw	r16,0(sp)
 4411664:	04011134 	movhi	r16,1092
 4411668:	84214f04 	addi	r16,r16,-31428
 441166c:	dcc00315 	stw	r19,12(sp)
 4411670:	2027883a 	mov	r19,r4
 4411674:	81000017 	ldw	r4,0(r16)
 4411678:	dfc00415 	stw	ra,16(sp)
 441167c:	dc800215 	stw	r18,8(sp)
 4411680:	20800e17 	ldw	r2,56(r4)
 4411684:	dc400115 	stw	r17,4(sp)
 4411688:	1000021e 	bne	r2,zero,4411694 <__sfp+0x38>
 441168c:	44114500 	call	4411450 <__sinit.part.1>
 4411690:	81000017 	ldw	r4,0(r16)
 4411694:	2480b804 	addi	r18,r4,736
 4411698:	047fffc4 	movi	r17,-1
 441169c:	91000117 	ldw	r4,4(r18)
 44116a0:	94000217 	ldw	r16,8(r18)
 44116a4:	213fffc4 	addi	r4,r4,-1
 44116a8:	20000a16 	blt	r4,zero,44116d4 <__sfp+0x78>
 44116ac:	8080030f 	ldh	r2,12(r16)
 44116b0:	10000c26 	beq	r2,zero,44116e4 <__sfp+0x88>
 44116b4:	80c01d04 	addi	r3,r16,116
 44116b8:	00000206 	br	44116c4 <__sfp+0x68>
 44116bc:	18bfe60f 	ldh	r2,-104(r3)
 44116c0:	10000826 	beq	r2,zero,44116e4 <__sfp+0x88>
 44116c4:	213fffc4 	addi	r4,r4,-1
 44116c8:	1c3ffd04 	addi	r16,r3,-12
 44116cc:	18c01a04 	addi	r3,r3,104
 44116d0:	247ffa1e 	bne	r4,r17,44116bc <__reset+0xfb40d6bc>
 44116d4:	90800017 	ldw	r2,0(r18)
 44116d8:	10001d26 	beq	r2,zero,4411750 <__sfp+0xf4>
 44116dc:	1025883a 	mov	r18,r2
 44116e0:	003fee06 	br	441169c <__reset+0xfb40d69c>
 44116e4:	00bfffc4 	movi	r2,-1
 44116e8:	8080038d 	sth	r2,14(r16)
 44116ec:	00800044 	movi	r2,1
 44116f0:	8080030d 	sth	r2,12(r16)
 44116f4:	80001915 	stw	zero,100(r16)
 44116f8:	80000015 	stw	zero,0(r16)
 44116fc:	80000215 	stw	zero,8(r16)
 4411700:	80000115 	stw	zero,4(r16)
 4411704:	80000415 	stw	zero,16(r16)
 4411708:	80000515 	stw	zero,20(r16)
 441170c:	80000615 	stw	zero,24(r16)
 4411710:	01800204 	movi	r6,8
 4411714:	000b883a 	mov	r5,zero
 4411718:	81001704 	addi	r4,r16,92
 441171c:	440ad440 	call	440ad44 <memset>
 4411720:	8005883a 	mov	r2,r16
 4411724:	80000c15 	stw	zero,48(r16)
 4411728:	80000d15 	stw	zero,52(r16)
 441172c:	80001115 	stw	zero,68(r16)
 4411730:	80001215 	stw	zero,72(r16)
 4411734:	dfc00417 	ldw	ra,16(sp)
 4411738:	dcc00317 	ldw	r19,12(sp)
 441173c:	dc800217 	ldw	r18,8(sp)
 4411740:	dc400117 	ldw	r17,4(sp)
 4411744:	dc000017 	ldw	r16,0(sp)
 4411748:	dec00504 	addi	sp,sp,20
 441174c:	f800283a 	ret
 4411750:	01400104 	movi	r5,4
 4411754:	9809883a 	mov	r4,r19
 4411758:	44115f40 	call	44115f4 <__sfmoreglue>
 441175c:	90800015 	stw	r2,0(r18)
 4411760:	103fde1e 	bne	r2,zero,44116dc <__reset+0xfb40d6dc>
 4411764:	00800304 	movi	r2,12
 4411768:	98800015 	stw	r2,0(r19)
 441176c:	0005883a 	mov	r2,zero
 4411770:	003ff006 	br	4411734 <__reset+0xfb40d734>

04411774 <_cleanup>:
 4411774:	00811134 	movhi	r2,1092
 4411778:	10a14f04 	addi	r2,r2,-31428
 441177c:	11000017 	ldw	r4,0(r2)
 4411780:	01411074 	movhi	r5,1089
 4411784:	295a9c04 	addi	r5,r5,27248
 4411788:	44121901 	jmpi	4412190 <_fwalk_reent>

0441178c <__sinit>:
 441178c:	20800e17 	ldw	r2,56(r4)
 4411790:	10000126 	beq	r2,zero,4411798 <__sinit+0xc>
 4411794:	f800283a 	ret
 4411798:	44114501 	jmpi	4411450 <__sinit.part.1>

0441179c <__sfp_lock_acquire>:
 441179c:	f800283a 	ret

044117a0 <__sfp_lock_release>:
 44117a0:	f800283a 	ret

044117a4 <__sinit_lock_acquire>:
 44117a4:	f800283a 	ret

044117a8 <__sinit_lock_release>:
 44117a8:	f800283a 	ret

044117ac <__fp_lock_all>:
 44117ac:	00811134 	movhi	r2,1092
 44117b0:	10a15004 	addi	r2,r2,-31424
 44117b4:	11000017 	ldw	r4,0(r2)
 44117b8:	01411074 	movhi	r5,1089
 44117bc:	29457b04 	addi	r5,r5,5612
 44117c0:	44120cc1 	jmpi	44120cc <_fwalk>

044117c4 <__fp_unlock_all>:
 44117c4:	00811134 	movhi	r2,1092
 44117c8:	10a15004 	addi	r2,r2,-31424
 44117cc:	11000017 	ldw	r4,0(r2)
 44117d0:	01411074 	movhi	r5,1089
 44117d4:	29450f04 	addi	r5,r5,5180
 44117d8:	44120cc1 	jmpi	44120cc <_fwalk>

044117dc <_malloc_trim_r>:
 44117dc:	defffb04 	addi	sp,sp,-20
 44117e0:	dcc00315 	stw	r19,12(sp)
 44117e4:	04c110f4 	movhi	r19,1091
 44117e8:	dc800215 	stw	r18,8(sp)
 44117ec:	dc400115 	stw	r17,4(sp)
 44117f0:	dc000015 	stw	r16,0(sp)
 44117f4:	dfc00415 	stw	ra,16(sp)
 44117f8:	2821883a 	mov	r16,r5
 44117fc:	9cdbaa04 	addi	r19,r19,28328
 4411800:	2025883a 	mov	r18,r4
 4411804:	44188c40 	call	44188c4 <__malloc_lock>
 4411808:	98800217 	ldw	r2,8(r19)
 441180c:	14400117 	ldw	r17,4(r2)
 4411810:	00bfff04 	movi	r2,-4
 4411814:	88a2703a 	and	r17,r17,r2
 4411818:	8c21c83a 	sub	r16,r17,r16
 441181c:	8403fbc4 	addi	r16,r16,4079
 4411820:	8020d33a 	srli	r16,r16,12
 4411824:	0083ffc4 	movi	r2,4095
 4411828:	843fffc4 	addi	r16,r16,-1
 441182c:	8020933a 	slli	r16,r16,12
 4411830:	1400060e 	bge	r2,r16,441184c <_malloc_trim_r+0x70>
 4411834:	000b883a 	mov	r5,zero
 4411838:	9009883a 	mov	r4,r18
 441183c:	440afac0 	call	440afac <_sbrk_r>
 4411840:	98c00217 	ldw	r3,8(r19)
 4411844:	1c47883a 	add	r3,r3,r17
 4411848:	10c00a26 	beq	r2,r3,4411874 <_malloc_trim_r+0x98>
 441184c:	9009883a 	mov	r4,r18
 4411850:	44188e80 	call	44188e8 <__malloc_unlock>
 4411854:	0005883a 	mov	r2,zero
 4411858:	dfc00417 	ldw	ra,16(sp)
 441185c:	dcc00317 	ldw	r19,12(sp)
 4411860:	dc800217 	ldw	r18,8(sp)
 4411864:	dc400117 	ldw	r17,4(sp)
 4411868:	dc000017 	ldw	r16,0(sp)
 441186c:	dec00504 	addi	sp,sp,20
 4411870:	f800283a 	ret
 4411874:	040bc83a 	sub	r5,zero,r16
 4411878:	9009883a 	mov	r4,r18
 441187c:	440afac0 	call	440afac <_sbrk_r>
 4411880:	00ffffc4 	movi	r3,-1
 4411884:	10c00d26 	beq	r2,r3,44118bc <_malloc_trim_r+0xe0>
 4411888:	00c11134 	movhi	r3,1092
 441188c:	18ef1b04 	addi	r3,r3,-17300
 4411890:	18800017 	ldw	r2,0(r3)
 4411894:	99000217 	ldw	r4,8(r19)
 4411898:	8c23c83a 	sub	r17,r17,r16
 441189c:	8c400054 	ori	r17,r17,1
 44118a0:	1421c83a 	sub	r16,r2,r16
 44118a4:	24400115 	stw	r17,4(r4)
 44118a8:	9009883a 	mov	r4,r18
 44118ac:	1c000015 	stw	r16,0(r3)
 44118b0:	44188e80 	call	44188e8 <__malloc_unlock>
 44118b4:	00800044 	movi	r2,1
 44118b8:	003fe706 	br	4411858 <__reset+0xfb40d858>
 44118bc:	000b883a 	mov	r5,zero
 44118c0:	9009883a 	mov	r4,r18
 44118c4:	440afac0 	call	440afac <_sbrk_r>
 44118c8:	99000217 	ldw	r4,8(r19)
 44118cc:	014003c4 	movi	r5,15
 44118d0:	1107c83a 	sub	r3,r2,r4
 44118d4:	28ffdd0e 	bge	r5,r3,441184c <__reset+0xfb40d84c>
 44118d8:	01411134 	movhi	r5,1092
 44118dc:	29615104 	addi	r5,r5,-31420
 44118e0:	29400017 	ldw	r5,0(r5)
 44118e4:	18c00054 	ori	r3,r3,1
 44118e8:	20c00115 	stw	r3,4(r4)
 44118ec:	00c11134 	movhi	r3,1092
 44118f0:	1145c83a 	sub	r2,r2,r5
 44118f4:	18ef1b04 	addi	r3,r3,-17300
 44118f8:	18800015 	stw	r2,0(r3)
 44118fc:	003fd306 	br	441184c <__reset+0xfb40d84c>

04411900 <_free_r>:
 4411900:	28004126 	beq	r5,zero,4411a08 <_free_r+0x108>
 4411904:	defffd04 	addi	sp,sp,-12
 4411908:	dc400115 	stw	r17,4(sp)
 441190c:	dc000015 	stw	r16,0(sp)
 4411910:	2023883a 	mov	r17,r4
 4411914:	2821883a 	mov	r16,r5
 4411918:	dfc00215 	stw	ra,8(sp)
 441191c:	44188c40 	call	44188c4 <__malloc_lock>
 4411920:	81ffff17 	ldw	r7,-4(r16)
 4411924:	00bfff84 	movi	r2,-2
 4411928:	010110f4 	movhi	r4,1091
 441192c:	81bffe04 	addi	r6,r16,-8
 4411930:	3884703a 	and	r2,r7,r2
 4411934:	211baa04 	addi	r4,r4,28328
 4411938:	308b883a 	add	r5,r6,r2
 441193c:	2a400117 	ldw	r9,4(r5)
 4411940:	22000217 	ldw	r8,8(r4)
 4411944:	00ffff04 	movi	r3,-4
 4411948:	48c6703a 	and	r3,r9,r3
 441194c:	2a005726 	beq	r5,r8,4411aac <_free_r+0x1ac>
 4411950:	28c00115 	stw	r3,4(r5)
 4411954:	39c0004c 	andi	r7,r7,1
 4411958:	3800091e 	bne	r7,zero,4411980 <_free_r+0x80>
 441195c:	823ffe17 	ldw	r8,-8(r16)
 4411960:	22400204 	addi	r9,r4,8
 4411964:	320dc83a 	sub	r6,r6,r8
 4411968:	31c00217 	ldw	r7,8(r6)
 441196c:	1205883a 	add	r2,r2,r8
 4411970:	3a406526 	beq	r7,r9,4411b08 <_free_r+0x208>
 4411974:	32000317 	ldw	r8,12(r6)
 4411978:	3a000315 	stw	r8,12(r7)
 441197c:	41c00215 	stw	r7,8(r8)
 4411980:	28cf883a 	add	r7,r5,r3
 4411984:	39c00117 	ldw	r7,4(r7)
 4411988:	39c0004c 	andi	r7,r7,1
 441198c:	38003a26 	beq	r7,zero,4411a78 <_free_r+0x178>
 4411990:	10c00054 	ori	r3,r2,1
 4411994:	30c00115 	stw	r3,4(r6)
 4411998:	3087883a 	add	r3,r6,r2
 441199c:	18800015 	stw	r2,0(r3)
 44119a0:	00c07fc4 	movi	r3,511
 44119a4:	18801936 	bltu	r3,r2,4411a0c <_free_r+0x10c>
 44119a8:	1004d0fa 	srli	r2,r2,3
 44119ac:	01c00044 	movi	r7,1
 44119b0:	21400117 	ldw	r5,4(r4)
 44119b4:	10c00044 	addi	r3,r2,1
 44119b8:	18c7883a 	add	r3,r3,r3
 44119bc:	1005d0ba 	srai	r2,r2,2
 44119c0:	18c7883a 	add	r3,r3,r3
 44119c4:	18c7883a 	add	r3,r3,r3
 44119c8:	1907883a 	add	r3,r3,r4
 44119cc:	3884983a 	sll	r2,r7,r2
 44119d0:	19c00017 	ldw	r7,0(r3)
 44119d4:	1a3ffe04 	addi	r8,r3,-8
 44119d8:	1144b03a 	or	r2,r2,r5
 44119dc:	32000315 	stw	r8,12(r6)
 44119e0:	31c00215 	stw	r7,8(r6)
 44119e4:	20800115 	stw	r2,4(r4)
 44119e8:	19800015 	stw	r6,0(r3)
 44119ec:	39800315 	stw	r6,12(r7)
 44119f0:	8809883a 	mov	r4,r17
 44119f4:	dfc00217 	ldw	ra,8(sp)
 44119f8:	dc400117 	ldw	r17,4(sp)
 44119fc:	dc000017 	ldw	r16,0(sp)
 4411a00:	dec00304 	addi	sp,sp,12
 4411a04:	44188e81 	jmpi	44188e8 <__malloc_unlock>
 4411a08:	f800283a 	ret
 4411a0c:	100ad27a 	srli	r5,r2,9
 4411a10:	00c00104 	movi	r3,4
 4411a14:	19404a36 	bltu	r3,r5,4411b40 <_free_r+0x240>
 4411a18:	100ad1ba 	srli	r5,r2,6
 4411a1c:	28c00e44 	addi	r3,r5,57
 4411a20:	18c7883a 	add	r3,r3,r3
 4411a24:	29400e04 	addi	r5,r5,56
 4411a28:	18c7883a 	add	r3,r3,r3
 4411a2c:	18c7883a 	add	r3,r3,r3
 4411a30:	1909883a 	add	r4,r3,r4
 4411a34:	20c00017 	ldw	r3,0(r4)
 4411a38:	01c110f4 	movhi	r7,1091
 4411a3c:	213ffe04 	addi	r4,r4,-8
 4411a40:	39dbaa04 	addi	r7,r7,28328
 4411a44:	20c04426 	beq	r4,r3,4411b58 <_free_r+0x258>
 4411a48:	01ffff04 	movi	r7,-4
 4411a4c:	19400117 	ldw	r5,4(r3)
 4411a50:	29ca703a 	and	r5,r5,r7
 4411a54:	1140022e 	bgeu	r2,r5,4411a60 <_free_r+0x160>
 4411a58:	18c00217 	ldw	r3,8(r3)
 4411a5c:	20fffb1e 	bne	r4,r3,4411a4c <__reset+0xfb40da4c>
 4411a60:	19000317 	ldw	r4,12(r3)
 4411a64:	31000315 	stw	r4,12(r6)
 4411a68:	30c00215 	stw	r3,8(r6)
 4411a6c:	21800215 	stw	r6,8(r4)
 4411a70:	19800315 	stw	r6,12(r3)
 4411a74:	003fde06 	br	44119f0 <__reset+0xfb40d9f0>
 4411a78:	29c00217 	ldw	r7,8(r5)
 4411a7c:	10c5883a 	add	r2,r2,r3
 4411a80:	00c110f4 	movhi	r3,1091
 4411a84:	18dbac04 	addi	r3,r3,28336
 4411a88:	38c03b26 	beq	r7,r3,4411b78 <_free_r+0x278>
 4411a8c:	2a000317 	ldw	r8,12(r5)
 4411a90:	11400054 	ori	r5,r2,1
 4411a94:	3087883a 	add	r3,r6,r2
 4411a98:	3a000315 	stw	r8,12(r7)
 4411a9c:	41c00215 	stw	r7,8(r8)
 4411aa0:	31400115 	stw	r5,4(r6)
 4411aa4:	18800015 	stw	r2,0(r3)
 4411aa8:	003fbd06 	br	44119a0 <__reset+0xfb40d9a0>
 4411aac:	39c0004c 	andi	r7,r7,1
 4411ab0:	10c5883a 	add	r2,r2,r3
 4411ab4:	3800071e 	bne	r7,zero,4411ad4 <_free_r+0x1d4>
 4411ab8:	81fffe17 	ldw	r7,-8(r16)
 4411abc:	31cdc83a 	sub	r6,r6,r7
 4411ac0:	30c00317 	ldw	r3,12(r6)
 4411ac4:	31400217 	ldw	r5,8(r6)
 4411ac8:	11c5883a 	add	r2,r2,r7
 4411acc:	28c00315 	stw	r3,12(r5)
 4411ad0:	19400215 	stw	r5,8(r3)
 4411ad4:	10c00054 	ori	r3,r2,1
 4411ad8:	30c00115 	stw	r3,4(r6)
 4411adc:	00c11134 	movhi	r3,1092
 4411ae0:	18e15204 	addi	r3,r3,-31416
 4411ae4:	18c00017 	ldw	r3,0(r3)
 4411ae8:	21800215 	stw	r6,8(r4)
 4411aec:	10ffc036 	bltu	r2,r3,44119f0 <__reset+0xfb40d9f0>
 4411af0:	00811134 	movhi	r2,1092
 4411af4:	10af0f04 	addi	r2,r2,-17348
 4411af8:	11400017 	ldw	r5,0(r2)
 4411afc:	8809883a 	mov	r4,r17
 4411b00:	44117dc0 	call	44117dc <_malloc_trim_r>
 4411b04:	003fba06 	br	44119f0 <__reset+0xfb40d9f0>
 4411b08:	28c9883a 	add	r4,r5,r3
 4411b0c:	21000117 	ldw	r4,4(r4)
 4411b10:	2100004c 	andi	r4,r4,1
 4411b14:	2000391e 	bne	r4,zero,4411bfc <_free_r+0x2fc>
 4411b18:	29c00217 	ldw	r7,8(r5)
 4411b1c:	29000317 	ldw	r4,12(r5)
 4411b20:	1885883a 	add	r2,r3,r2
 4411b24:	10c00054 	ori	r3,r2,1
 4411b28:	39000315 	stw	r4,12(r7)
 4411b2c:	21c00215 	stw	r7,8(r4)
 4411b30:	30c00115 	stw	r3,4(r6)
 4411b34:	308d883a 	add	r6,r6,r2
 4411b38:	30800015 	stw	r2,0(r6)
 4411b3c:	003fac06 	br	44119f0 <__reset+0xfb40d9f0>
 4411b40:	00c00504 	movi	r3,20
 4411b44:	19401536 	bltu	r3,r5,4411b9c <_free_r+0x29c>
 4411b48:	28c01704 	addi	r3,r5,92
 4411b4c:	18c7883a 	add	r3,r3,r3
 4411b50:	294016c4 	addi	r5,r5,91
 4411b54:	003fb406 	br	4411a28 <__reset+0xfb40da28>
 4411b58:	280bd0ba 	srai	r5,r5,2
 4411b5c:	00c00044 	movi	r3,1
 4411b60:	38800117 	ldw	r2,4(r7)
 4411b64:	194a983a 	sll	r5,r3,r5
 4411b68:	2007883a 	mov	r3,r4
 4411b6c:	2884b03a 	or	r2,r5,r2
 4411b70:	38800115 	stw	r2,4(r7)
 4411b74:	003fbb06 	br	4411a64 <__reset+0xfb40da64>
 4411b78:	21800515 	stw	r6,20(r4)
 4411b7c:	21800415 	stw	r6,16(r4)
 4411b80:	10c00054 	ori	r3,r2,1
 4411b84:	31c00315 	stw	r7,12(r6)
 4411b88:	31c00215 	stw	r7,8(r6)
 4411b8c:	30c00115 	stw	r3,4(r6)
 4411b90:	308d883a 	add	r6,r6,r2
 4411b94:	30800015 	stw	r2,0(r6)
 4411b98:	003f9506 	br	44119f0 <__reset+0xfb40d9f0>
 4411b9c:	00c01504 	movi	r3,84
 4411ba0:	19400536 	bltu	r3,r5,4411bb8 <_free_r+0x2b8>
 4411ba4:	100ad33a 	srli	r5,r2,12
 4411ba8:	28c01bc4 	addi	r3,r5,111
 4411bac:	18c7883a 	add	r3,r3,r3
 4411bb0:	29401b84 	addi	r5,r5,110
 4411bb4:	003f9c06 	br	4411a28 <__reset+0xfb40da28>
 4411bb8:	00c05504 	movi	r3,340
 4411bbc:	19400536 	bltu	r3,r5,4411bd4 <_free_r+0x2d4>
 4411bc0:	100ad3fa 	srli	r5,r2,15
 4411bc4:	28c01e04 	addi	r3,r5,120
 4411bc8:	18c7883a 	add	r3,r3,r3
 4411bcc:	29401dc4 	addi	r5,r5,119
 4411bd0:	003f9506 	br	4411a28 <__reset+0xfb40da28>
 4411bd4:	00c15504 	movi	r3,1364
 4411bd8:	19400536 	bltu	r3,r5,4411bf0 <_free_r+0x2f0>
 4411bdc:	100ad4ba 	srli	r5,r2,18
 4411be0:	28c01f44 	addi	r3,r5,125
 4411be4:	18c7883a 	add	r3,r3,r3
 4411be8:	29401f04 	addi	r5,r5,124
 4411bec:	003f8e06 	br	4411a28 <__reset+0xfb40da28>
 4411bf0:	00c03f84 	movi	r3,254
 4411bf4:	01401f84 	movi	r5,126
 4411bf8:	003f8b06 	br	4411a28 <__reset+0xfb40da28>
 4411bfc:	10c00054 	ori	r3,r2,1
 4411c00:	30c00115 	stw	r3,4(r6)
 4411c04:	308d883a 	add	r6,r6,r2
 4411c08:	30800015 	stw	r2,0(r6)
 4411c0c:	003f7806 	br	44119f0 <__reset+0xfb40d9f0>

04411c10 <__sfvwrite_r>:
 4411c10:	30800217 	ldw	r2,8(r6)
 4411c14:	10006726 	beq	r2,zero,4411db4 <__sfvwrite_r+0x1a4>
 4411c18:	28c0030b 	ldhu	r3,12(r5)
 4411c1c:	defff404 	addi	sp,sp,-48
 4411c20:	dd400715 	stw	r21,28(sp)
 4411c24:	dd000615 	stw	r20,24(sp)
 4411c28:	dc000215 	stw	r16,8(sp)
 4411c2c:	dfc00b15 	stw	ra,44(sp)
 4411c30:	df000a15 	stw	fp,40(sp)
 4411c34:	ddc00915 	stw	r23,36(sp)
 4411c38:	dd800815 	stw	r22,32(sp)
 4411c3c:	dcc00515 	stw	r19,20(sp)
 4411c40:	dc800415 	stw	r18,16(sp)
 4411c44:	dc400315 	stw	r17,12(sp)
 4411c48:	1880020c 	andi	r2,r3,8
 4411c4c:	2821883a 	mov	r16,r5
 4411c50:	202b883a 	mov	r21,r4
 4411c54:	3029883a 	mov	r20,r6
 4411c58:	10002726 	beq	r2,zero,4411cf8 <__sfvwrite_r+0xe8>
 4411c5c:	28800417 	ldw	r2,16(r5)
 4411c60:	10002526 	beq	r2,zero,4411cf8 <__sfvwrite_r+0xe8>
 4411c64:	1880008c 	andi	r2,r3,2
 4411c68:	a4400017 	ldw	r17,0(r20)
 4411c6c:	10002a26 	beq	r2,zero,4411d18 <__sfvwrite_r+0x108>
 4411c70:	05a00034 	movhi	r22,32768
 4411c74:	0027883a 	mov	r19,zero
 4411c78:	0025883a 	mov	r18,zero
 4411c7c:	b5bf0004 	addi	r22,r22,-1024
 4411c80:	980d883a 	mov	r6,r19
 4411c84:	a809883a 	mov	r4,r21
 4411c88:	90004626 	beq	r18,zero,4411da4 <__sfvwrite_r+0x194>
 4411c8c:	900f883a 	mov	r7,r18
 4411c90:	b480022e 	bgeu	r22,r18,4411c9c <__sfvwrite_r+0x8c>
 4411c94:	01e00034 	movhi	r7,32768
 4411c98:	39ff0004 	addi	r7,r7,-1024
 4411c9c:	80800917 	ldw	r2,36(r16)
 4411ca0:	81400717 	ldw	r5,28(r16)
 4411ca4:	103ee83a 	callr	r2
 4411ca8:	0080570e 	bge	zero,r2,4411e08 <__sfvwrite_r+0x1f8>
 4411cac:	a0c00217 	ldw	r3,8(r20)
 4411cb0:	98a7883a 	add	r19,r19,r2
 4411cb4:	90a5c83a 	sub	r18,r18,r2
 4411cb8:	1885c83a 	sub	r2,r3,r2
 4411cbc:	a0800215 	stw	r2,8(r20)
 4411cc0:	103fef1e 	bne	r2,zero,4411c80 <__reset+0xfb40dc80>
 4411cc4:	0005883a 	mov	r2,zero
 4411cc8:	dfc00b17 	ldw	ra,44(sp)
 4411ccc:	df000a17 	ldw	fp,40(sp)
 4411cd0:	ddc00917 	ldw	r23,36(sp)
 4411cd4:	dd800817 	ldw	r22,32(sp)
 4411cd8:	dd400717 	ldw	r21,28(sp)
 4411cdc:	dd000617 	ldw	r20,24(sp)
 4411ce0:	dcc00517 	ldw	r19,20(sp)
 4411ce4:	dc800417 	ldw	r18,16(sp)
 4411ce8:	dc400317 	ldw	r17,12(sp)
 4411cec:	dc000217 	ldw	r16,8(sp)
 4411cf0:	dec00c04 	addi	sp,sp,48
 4411cf4:	f800283a 	ret
 4411cf8:	800b883a 	mov	r5,r16
 4411cfc:	a809883a 	mov	r4,r21
 4411d00:	440f7b80 	call	440f7b8 <__swsetup_r>
 4411d04:	1000eb1e 	bne	r2,zero,44120b4 <__sfvwrite_r+0x4a4>
 4411d08:	80c0030b 	ldhu	r3,12(r16)
 4411d0c:	a4400017 	ldw	r17,0(r20)
 4411d10:	1880008c 	andi	r2,r3,2
 4411d14:	103fd61e 	bne	r2,zero,4411c70 <__reset+0xfb40dc70>
 4411d18:	1880004c 	andi	r2,r3,1
 4411d1c:	10003f1e 	bne	r2,zero,4411e1c <__sfvwrite_r+0x20c>
 4411d20:	0039883a 	mov	fp,zero
 4411d24:	0025883a 	mov	r18,zero
 4411d28:	90001a26 	beq	r18,zero,4411d94 <__sfvwrite_r+0x184>
 4411d2c:	1880800c 	andi	r2,r3,512
 4411d30:	84c00217 	ldw	r19,8(r16)
 4411d34:	10002126 	beq	r2,zero,4411dbc <__sfvwrite_r+0x1ac>
 4411d38:	982f883a 	mov	r23,r19
 4411d3c:	94c09336 	bltu	r18,r19,4411f8c <__sfvwrite_r+0x37c>
 4411d40:	1881200c 	andi	r2,r3,1152
 4411d44:	10009e1e 	bne	r2,zero,4411fc0 <__sfvwrite_r+0x3b0>
 4411d48:	81000017 	ldw	r4,0(r16)
 4411d4c:	b80d883a 	mov	r6,r23
 4411d50:	e00b883a 	mov	r5,fp
 4411d54:	44125d00 	call	44125d0 <memmove>
 4411d58:	80c00217 	ldw	r3,8(r16)
 4411d5c:	81000017 	ldw	r4,0(r16)
 4411d60:	9005883a 	mov	r2,r18
 4411d64:	1ce7c83a 	sub	r19,r3,r19
 4411d68:	25cf883a 	add	r7,r4,r23
 4411d6c:	84c00215 	stw	r19,8(r16)
 4411d70:	81c00015 	stw	r7,0(r16)
 4411d74:	a0c00217 	ldw	r3,8(r20)
 4411d78:	e0b9883a 	add	fp,fp,r2
 4411d7c:	90a5c83a 	sub	r18,r18,r2
 4411d80:	18a7c83a 	sub	r19,r3,r2
 4411d84:	a4c00215 	stw	r19,8(r20)
 4411d88:	983fce26 	beq	r19,zero,4411cc4 <__reset+0xfb40dcc4>
 4411d8c:	80c0030b 	ldhu	r3,12(r16)
 4411d90:	903fe61e 	bne	r18,zero,4411d2c <__reset+0xfb40dd2c>
 4411d94:	8f000017 	ldw	fp,0(r17)
 4411d98:	8c800117 	ldw	r18,4(r17)
 4411d9c:	8c400204 	addi	r17,r17,8
 4411da0:	003fe106 	br	4411d28 <__reset+0xfb40dd28>
 4411da4:	8cc00017 	ldw	r19,0(r17)
 4411da8:	8c800117 	ldw	r18,4(r17)
 4411dac:	8c400204 	addi	r17,r17,8
 4411db0:	003fb306 	br	4411c80 <__reset+0xfb40dc80>
 4411db4:	0005883a 	mov	r2,zero
 4411db8:	f800283a 	ret
 4411dbc:	81000017 	ldw	r4,0(r16)
 4411dc0:	80800417 	ldw	r2,16(r16)
 4411dc4:	11005736 	bltu	r2,r4,4411f24 <__sfvwrite_r+0x314>
 4411dc8:	85c00517 	ldw	r23,20(r16)
 4411dcc:	95c05536 	bltu	r18,r23,4411f24 <__sfvwrite_r+0x314>
 4411dd0:	00a00034 	movhi	r2,32768
 4411dd4:	10bfffc4 	addi	r2,r2,-1
 4411dd8:	9009883a 	mov	r4,r18
 4411ddc:	1480012e 	bgeu	r2,r18,4411de4 <__sfvwrite_r+0x1d4>
 4411de0:	1009883a 	mov	r4,r2
 4411de4:	b80b883a 	mov	r5,r23
 4411de8:	4407da80 	call	4407da8 <__divsi3>
 4411dec:	15cf383a 	mul	r7,r2,r23
 4411df0:	81400717 	ldw	r5,28(r16)
 4411df4:	80800917 	ldw	r2,36(r16)
 4411df8:	e00d883a 	mov	r6,fp
 4411dfc:	a809883a 	mov	r4,r21
 4411e00:	103ee83a 	callr	r2
 4411e04:	00bfdb16 	blt	zero,r2,4411d74 <__reset+0xfb40dd74>
 4411e08:	8080030b 	ldhu	r2,12(r16)
 4411e0c:	10801014 	ori	r2,r2,64
 4411e10:	8080030d 	sth	r2,12(r16)
 4411e14:	00bfffc4 	movi	r2,-1
 4411e18:	003fab06 	br	4411cc8 <__reset+0xfb40dcc8>
 4411e1c:	0027883a 	mov	r19,zero
 4411e20:	0011883a 	mov	r8,zero
 4411e24:	0039883a 	mov	fp,zero
 4411e28:	0025883a 	mov	r18,zero
 4411e2c:	90001f26 	beq	r18,zero,4411eac <__sfvwrite_r+0x29c>
 4411e30:	40005a26 	beq	r8,zero,4411f9c <__sfvwrite_r+0x38c>
 4411e34:	982d883a 	mov	r22,r19
 4411e38:	94c0012e 	bgeu	r18,r19,4411e40 <__sfvwrite_r+0x230>
 4411e3c:	902d883a 	mov	r22,r18
 4411e40:	81000017 	ldw	r4,0(r16)
 4411e44:	80800417 	ldw	r2,16(r16)
 4411e48:	b02f883a 	mov	r23,r22
 4411e4c:	81c00517 	ldw	r7,20(r16)
 4411e50:	1100032e 	bgeu	r2,r4,4411e60 <__sfvwrite_r+0x250>
 4411e54:	80c00217 	ldw	r3,8(r16)
 4411e58:	38c7883a 	add	r3,r7,r3
 4411e5c:	1d801816 	blt	r3,r22,4411ec0 <__sfvwrite_r+0x2b0>
 4411e60:	b1c03e16 	blt	r22,r7,4411f5c <__sfvwrite_r+0x34c>
 4411e64:	80800917 	ldw	r2,36(r16)
 4411e68:	81400717 	ldw	r5,28(r16)
 4411e6c:	e00d883a 	mov	r6,fp
 4411e70:	da000115 	stw	r8,4(sp)
 4411e74:	a809883a 	mov	r4,r21
 4411e78:	103ee83a 	callr	r2
 4411e7c:	102f883a 	mov	r23,r2
 4411e80:	da000117 	ldw	r8,4(sp)
 4411e84:	00bfe00e 	bge	zero,r2,4411e08 <__reset+0xfb40de08>
 4411e88:	9de7c83a 	sub	r19,r19,r23
 4411e8c:	98001f26 	beq	r19,zero,4411f0c <__sfvwrite_r+0x2fc>
 4411e90:	a0800217 	ldw	r2,8(r20)
 4411e94:	e5f9883a 	add	fp,fp,r23
 4411e98:	95e5c83a 	sub	r18,r18,r23
 4411e9c:	15efc83a 	sub	r23,r2,r23
 4411ea0:	a5c00215 	stw	r23,8(r20)
 4411ea4:	b83f8726 	beq	r23,zero,4411cc4 <__reset+0xfb40dcc4>
 4411ea8:	903fe11e 	bne	r18,zero,4411e30 <__reset+0xfb40de30>
 4411eac:	8f000017 	ldw	fp,0(r17)
 4411eb0:	8c800117 	ldw	r18,4(r17)
 4411eb4:	0011883a 	mov	r8,zero
 4411eb8:	8c400204 	addi	r17,r17,8
 4411ebc:	003fdb06 	br	4411e2c <__reset+0xfb40de2c>
 4411ec0:	180d883a 	mov	r6,r3
 4411ec4:	e00b883a 	mov	r5,fp
 4411ec8:	da000115 	stw	r8,4(sp)
 4411ecc:	d8c00015 	stw	r3,0(sp)
 4411ed0:	44125d00 	call	44125d0 <memmove>
 4411ed4:	d8c00017 	ldw	r3,0(sp)
 4411ed8:	80800017 	ldw	r2,0(r16)
 4411edc:	800b883a 	mov	r5,r16
 4411ee0:	a809883a 	mov	r4,r21
 4411ee4:	10c5883a 	add	r2,r2,r3
 4411ee8:	80800015 	stw	r2,0(r16)
 4411eec:	d8c00015 	stw	r3,0(sp)
 4411ef0:	44113b00 	call	44113b0 <_fflush_r>
 4411ef4:	d8c00017 	ldw	r3,0(sp)
 4411ef8:	da000117 	ldw	r8,4(sp)
 4411efc:	103fc21e 	bne	r2,zero,4411e08 <__reset+0xfb40de08>
 4411f00:	182f883a 	mov	r23,r3
 4411f04:	9de7c83a 	sub	r19,r19,r23
 4411f08:	983fe11e 	bne	r19,zero,4411e90 <__reset+0xfb40de90>
 4411f0c:	800b883a 	mov	r5,r16
 4411f10:	a809883a 	mov	r4,r21
 4411f14:	44113b00 	call	44113b0 <_fflush_r>
 4411f18:	103fbb1e 	bne	r2,zero,4411e08 <__reset+0xfb40de08>
 4411f1c:	0011883a 	mov	r8,zero
 4411f20:	003fdb06 	br	4411e90 <__reset+0xfb40de90>
 4411f24:	94c0012e 	bgeu	r18,r19,4411f2c <__sfvwrite_r+0x31c>
 4411f28:	9027883a 	mov	r19,r18
 4411f2c:	980d883a 	mov	r6,r19
 4411f30:	e00b883a 	mov	r5,fp
 4411f34:	44125d00 	call	44125d0 <memmove>
 4411f38:	80800217 	ldw	r2,8(r16)
 4411f3c:	80c00017 	ldw	r3,0(r16)
 4411f40:	14c5c83a 	sub	r2,r2,r19
 4411f44:	1cc7883a 	add	r3,r3,r19
 4411f48:	80800215 	stw	r2,8(r16)
 4411f4c:	80c00015 	stw	r3,0(r16)
 4411f50:	10004326 	beq	r2,zero,4412060 <__sfvwrite_r+0x450>
 4411f54:	9805883a 	mov	r2,r19
 4411f58:	003f8606 	br	4411d74 <__reset+0xfb40dd74>
 4411f5c:	b00d883a 	mov	r6,r22
 4411f60:	e00b883a 	mov	r5,fp
 4411f64:	da000115 	stw	r8,4(sp)
 4411f68:	44125d00 	call	44125d0 <memmove>
 4411f6c:	80800217 	ldw	r2,8(r16)
 4411f70:	80c00017 	ldw	r3,0(r16)
 4411f74:	da000117 	ldw	r8,4(sp)
 4411f78:	1585c83a 	sub	r2,r2,r22
 4411f7c:	1dad883a 	add	r22,r3,r22
 4411f80:	80800215 	stw	r2,8(r16)
 4411f84:	85800015 	stw	r22,0(r16)
 4411f88:	003fbf06 	br	4411e88 <__reset+0xfb40de88>
 4411f8c:	81000017 	ldw	r4,0(r16)
 4411f90:	9027883a 	mov	r19,r18
 4411f94:	902f883a 	mov	r23,r18
 4411f98:	003f6c06 	br	4411d4c <__reset+0xfb40dd4c>
 4411f9c:	900d883a 	mov	r6,r18
 4411fa0:	01400284 	movi	r5,10
 4411fa4:	e009883a 	mov	r4,fp
 4411fa8:	44124ec0 	call	44124ec <memchr>
 4411fac:	10003e26 	beq	r2,zero,44120a8 <__sfvwrite_r+0x498>
 4411fb0:	10800044 	addi	r2,r2,1
 4411fb4:	1727c83a 	sub	r19,r2,fp
 4411fb8:	02000044 	movi	r8,1
 4411fbc:	003f9d06 	br	4411e34 <__reset+0xfb40de34>
 4411fc0:	80800517 	ldw	r2,20(r16)
 4411fc4:	81400417 	ldw	r5,16(r16)
 4411fc8:	81c00017 	ldw	r7,0(r16)
 4411fcc:	10a7883a 	add	r19,r2,r2
 4411fd0:	9885883a 	add	r2,r19,r2
 4411fd4:	1026d7fa 	srli	r19,r2,31
 4411fd8:	396dc83a 	sub	r22,r7,r5
 4411fdc:	b1000044 	addi	r4,r22,1
 4411fe0:	9885883a 	add	r2,r19,r2
 4411fe4:	1027d07a 	srai	r19,r2,1
 4411fe8:	2485883a 	add	r2,r4,r18
 4411fec:	980d883a 	mov	r6,r19
 4411ff0:	9880022e 	bgeu	r19,r2,4411ffc <__sfvwrite_r+0x3ec>
 4411ff4:	1027883a 	mov	r19,r2
 4411ff8:	100d883a 	mov	r6,r2
 4411ffc:	18c1000c 	andi	r3,r3,1024
 4412000:	18001c26 	beq	r3,zero,4412074 <__sfvwrite_r+0x464>
 4412004:	300b883a 	mov	r5,r6
 4412008:	a809883a 	mov	r4,r21
 441200c:	440a3f00 	call	440a3f0 <_malloc_r>
 4412010:	102f883a 	mov	r23,r2
 4412014:	10002926 	beq	r2,zero,44120bc <__sfvwrite_r+0x4ac>
 4412018:	81400417 	ldw	r5,16(r16)
 441201c:	b00d883a 	mov	r6,r22
 4412020:	1009883a 	mov	r4,r2
 4412024:	440abfc0 	call	440abfc <memcpy>
 4412028:	8080030b 	ldhu	r2,12(r16)
 441202c:	00fedfc4 	movi	r3,-1153
 4412030:	10c4703a 	and	r2,r2,r3
 4412034:	10802014 	ori	r2,r2,128
 4412038:	8080030d 	sth	r2,12(r16)
 441203c:	bd89883a 	add	r4,r23,r22
 4412040:	9d8fc83a 	sub	r7,r19,r22
 4412044:	85c00415 	stw	r23,16(r16)
 4412048:	84c00515 	stw	r19,20(r16)
 441204c:	81000015 	stw	r4,0(r16)
 4412050:	9027883a 	mov	r19,r18
 4412054:	81c00215 	stw	r7,8(r16)
 4412058:	902f883a 	mov	r23,r18
 441205c:	003f3b06 	br	4411d4c <__reset+0xfb40dd4c>
 4412060:	800b883a 	mov	r5,r16
 4412064:	a809883a 	mov	r4,r21
 4412068:	44113b00 	call	44113b0 <_fflush_r>
 441206c:	103fb926 	beq	r2,zero,4411f54 <__reset+0xfb40df54>
 4412070:	003f6506 	br	4411e08 <__reset+0xfb40de08>
 4412074:	a809883a 	mov	r4,r21
 4412078:	44137280 	call	4413728 <_realloc_r>
 441207c:	102f883a 	mov	r23,r2
 4412080:	103fee1e 	bne	r2,zero,441203c <__reset+0xfb40e03c>
 4412084:	81400417 	ldw	r5,16(r16)
 4412088:	a809883a 	mov	r4,r21
 441208c:	44119000 	call	4411900 <_free_r>
 4412090:	8080030b 	ldhu	r2,12(r16)
 4412094:	00ffdfc4 	movi	r3,-129
 4412098:	1884703a 	and	r2,r3,r2
 441209c:	00c00304 	movi	r3,12
 44120a0:	a8c00015 	stw	r3,0(r21)
 44120a4:	003f5906 	br	4411e0c <__reset+0xfb40de0c>
 44120a8:	94c00044 	addi	r19,r18,1
 44120ac:	02000044 	movi	r8,1
 44120b0:	003f6006 	br	4411e34 <__reset+0xfb40de34>
 44120b4:	00bfffc4 	movi	r2,-1
 44120b8:	003f0306 	br	4411cc8 <__reset+0xfb40dcc8>
 44120bc:	00800304 	movi	r2,12
 44120c0:	a8800015 	stw	r2,0(r21)
 44120c4:	8080030b 	ldhu	r2,12(r16)
 44120c8:	003f5006 	br	4411e0c <__reset+0xfb40de0c>

044120cc <_fwalk>:
 44120cc:	defff704 	addi	sp,sp,-36
 44120d0:	dd000415 	stw	r20,16(sp)
 44120d4:	dfc00815 	stw	ra,32(sp)
 44120d8:	ddc00715 	stw	r23,28(sp)
 44120dc:	dd800615 	stw	r22,24(sp)
 44120e0:	dd400515 	stw	r21,20(sp)
 44120e4:	dcc00315 	stw	r19,12(sp)
 44120e8:	dc800215 	stw	r18,8(sp)
 44120ec:	dc400115 	stw	r17,4(sp)
 44120f0:	dc000015 	stw	r16,0(sp)
 44120f4:	2500b804 	addi	r20,r4,736
 44120f8:	a0002326 	beq	r20,zero,4412188 <_fwalk+0xbc>
 44120fc:	282b883a 	mov	r21,r5
 4412100:	002f883a 	mov	r23,zero
 4412104:	05800044 	movi	r22,1
 4412108:	04ffffc4 	movi	r19,-1
 441210c:	a4400117 	ldw	r17,4(r20)
 4412110:	a4800217 	ldw	r18,8(r20)
 4412114:	8c7fffc4 	addi	r17,r17,-1
 4412118:	88000d16 	blt	r17,zero,4412150 <_fwalk+0x84>
 441211c:	94000304 	addi	r16,r18,12
 4412120:	94800384 	addi	r18,r18,14
 4412124:	8080000b 	ldhu	r2,0(r16)
 4412128:	8c7fffc4 	addi	r17,r17,-1
 441212c:	813ffd04 	addi	r4,r16,-12
 4412130:	b080042e 	bgeu	r22,r2,4412144 <_fwalk+0x78>
 4412134:	9080000f 	ldh	r2,0(r18)
 4412138:	14c00226 	beq	r2,r19,4412144 <_fwalk+0x78>
 441213c:	a83ee83a 	callr	r21
 4412140:	b8aeb03a 	or	r23,r23,r2
 4412144:	84001a04 	addi	r16,r16,104
 4412148:	94801a04 	addi	r18,r18,104
 441214c:	8cfff51e 	bne	r17,r19,4412124 <__reset+0xfb40e124>
 4412150:	a5000017 	ldw	r20,0(r20)
 4412154:	a03fed1e 	bne	r20,zero,441210c <__reset+0xfb40e10c>
 4412158:	b805883a 	mov	r2,r23
 441215c:	dfc00817 	ldw	ra,32(sp)
 4412160:	ddc00717 	ldw	r23,28(sp)
 4412164:	dd800617 	ldw	r22,24(sp)
 4412168:	dd400517 	ldw	r21,20(sp)
 441216c:	dd000417 	ldw	r20,16(sp)
 4412170:	dcc00317 	ldw	r19,12(sp)
 4412174:	dc800217 	ldw	r18,8(sp)
 4412178:	dc400117 	ldw	r17,4(sp)
 441217c:	dc000017 	ldw	r16,0(sp)
 4412180:	dec00904 	addi	sp,sp,36
 4412184:	f800283a 	ret
 4412188:	002f883a 	mov	r23,zero
 441218c:	003ff206 	br	4412158 <__reset+0xfb40e158>

04412190 <_fwalk_reent>:
 4412190:	defff704 	addi	sp,sp,-36
 4412194:	dd000415 	stw	r20,16(sp)
 4412198:	dfc00815 	stw	ra,32(sp)
 441219c:	ddc00715 	stw	r23,28(sp)
 44121a0:	dd800615 	stw	r22,24(sp)
 44121a4:	dd400515 	stw	r21,20(sp)
 44121a8:	dcc00315 	stw	r19,12(sp)
 44121ac:	dc800215 	stw	r18,8(sp)
 44121b0:	dc400115 	stw	r17,4(sp)
 44121b4:	dc000015 	stw	r16,0(sp)
 44121b8:	2500b804 	addi	r20,r4,736
 44121bc:	a0002326 	beq	r20,zero,441224c <_fwalk_reent+0xbc>
 44121c0:	282b883a 	mov	r21,r5
 44121c4:	2027883a 	mov	r19,r4
 44121c8:	002f883a 	mov	r23,zero
 44121cc:	05800044 	movi	r22,1
 44121d0:	04bfffc4 	movi	r18,-1
 44121d4:	a4400117 	ldw	r17,4(r20)
 44121d8:	a4000217 	ldw	r16,8(r20)
 44121dc:	8c7fffc4 	addi	r17,r17,-1
 44121e0:	88000c16 	blt	r17,zero,4412214 <_fwalk_reent+0x84>
 44121e4:	84000304 	addi	r16,r16,12
 44121e8:	8080000b 	ldhu	r2,0(r16)
 44121ec:	8c7fffc4 	addi	r17,r17,-1
 44121f0:	817ffd04 	addi	r5,r16,-12
 44121f4:	b080052e 	bgeu	r22,r2,441220c <_fwalk_reent+0x7c>
 44121f8:	8080008f 	ldh	r2,2(r16)
 44121fc:	9809883a 	mov	r4,r19
 4412200:	14800226 	beq	r2,r18,441220c <_fwalk_reent+0x7c>
 4412204:	a83ee83a 	callr	r21
 4412208:	b8aeb03a 	or	r23,r23,r2
 441220c:	84001a04 	addi	r16,r16,104
 4412210:	8cbff51e 	bne	r17,r18,44121e8 <__reset+0xfb40e1e8>
 4412214:	a5000017 	ldw	r20,0(r20)
 4412218:	a03fee1e 	bne	r20,zero,44121d4 <__reset+0xfb40e1d4>
 441221c:	b805883a 	mov	r2,r23
 4412220:	dfc00817 	ldw	ra,32(sp)
 4412224:	ddc00717 	ldw	r23,28(sp)
 4412228:	dd800617 	ldw	r22,24(sp)
 441222c:	dd400517 	ldw	r21,20(sp)
 4412230:	dd000417 	ldw	r20,16(sp)
 4412234:	dcc00317 	ldw	r19,12(sp)
 4412238:	dc800217 	ldw	r18,8(sp)
 441223c:	dc400117 	ldw	r17,4(sp)
 4412240:	dc000017 	ldw	r16,0(sp)
 4412244:	dec00904 	addi	sp,sp,36
 4412248:	f800283a 	ret
 441224c:	002f883a 	mov	r23,zero
 4412250:	003ff206 	br	441221c <__reset+0xfb40e21c>

04412254 <_setlocale_r>:
 4412254:	30001b26 	beq	r6,zero,44122c4 <_setlocale_r+0x70>
 4412258:	014110f4 	movhi	r5,1091
 441225c:	defffe04 	addi	sp,sp,-8
 4412260:	29534b04 	addi	r5,r5,19756
 4412264:	3009883a 	mov	r4,r6
 4412268:	dc000015 	stw	r16,0(sp)
 441226c:	dfc00115 	stw	ra,4(sp)
 4412270:	3021883a 	mov	r16,r6
 4412274:	4413dc80 	call	4413dc8 <strcmp>
 4412278:	1000061e 	bne	r2,zero,4412294 <_setlocale_r+0x40>
 441227c:	008110f4 	movhi	r2,1091
 4412280:	10932404 	addi	r2,r2,19600
 4412284:	dfc00117 	ldw	ra,4(sp)
 4412288:	dc000017 	ldw	r16,0(sp)
 441228c:	dec00204 	addi	sp,sp,8
 4412290:	f800283a 	ret
 4412294:	014110f4 	movhi	r5,1091
 4412298:	29532404 	addi	r5,r5,19600
 441229c:	8009883a 	mov	r4,r16
 44122a0:	4413dc80 	call	4413dc8 <strcmp>
 44122a4:	103ff526 	beq	r2,zero,441227c <__reset+0xfb40e27c>
 44122a8:	014110f4 	movhi	r5,1091
 44122ac:	29532e04 	addi	r5,r5,19640
 44122b0:	8009883a 	mov	r4,r16
 44122b4:	4413dc80 	call	4413dc8 <strcmp>
 44122b8:	103ff026 	beq	r2,zero,441227c <__reset+0xfb40e27c>
 44122bc:	0005883a 	mov	r2,zero
 44122c0:	003ff006 	br	4412284 <__reset+0xfb40e284>
 44122c4:	008110f4 	movhi	r2,1091
 44122c8:	10932404 	addi	r2,r2,19600
 44122cc:	f800283a 	ret

044122d0 <__locale_charset>:
 44122d0:	008110f4 	movhi	r2,1091
 44122d4:	109cb404 	addi	r2,r2,29392
 44122d8:	f800283a 	ret

044122dc <__locale_mb_cur_max>:
 44122dc:	00811134 	movhi	r2,1092
 44122e0:	10a15304 	addi	r2,r2,-31412
 44122e4:	10800017 	ldw	r2,0(r2)
 44122e8:	f800283a 	ret

044122ec <__locale_msgcharset>:
 44122ec:	008110f4 	movhi	r2,1091
 44122f0:	109cac04 	addi	r2,r2,29360
 44122f4:	f800283a 	ret

044122f8 <__locale_cjk_lang>:
 44122f8:	0005883a 	mov	r2,zero
 44122fc:	f800283a 	ret

04412300 <_localeconv_r>:
 4412300:	008110f4 	movhi	r2,1091
 4412304:	109cbc04 	addi	r2,r2,29424
 4412308:	f800283a 	ret

0441230c <setlocale>:
 441230c:	00811134 	movhi	r2,1092
 4412310:	10a15004 	addi	r2,r2,-31424
 4412314:	280d883a 	mov	r6,r5
 4412318:	200b883a 	mov	r5,r4
 441231c:	11000017 	ldw	r4,0(r2)
 4412320:	44122541 	jmpi	4412254 <_setlocale_r>

04412324 <localeconv>:
 4412324:	008110f4 	movhi	r2,1091
 4412328:	109cbc04 	addi	r2,r2,29424
 441232c:	f800283a 	ret

04412330 <__smakebuf_r>:
 4412330:	2880030b 	ldhu	r2,12(r5)
 4412334:	10c0008c 	andi	r3,r2,2
 4412338:	1800411e 	bne	r3,zero,4412440 <__smakebuf_r+0x110>
 441233c:	deffec04 	addi	sp,sp,-80
 4412340:	dc000f15 	stw	r16,60(sp)
 4412344:	2821883a 	mov	r16,r5
 4412348:	2940038f 	ldh	r5,14(r5)
 441234c:	dc401015 	stw	r17,64(sp)
 4412350:	dfc01315 	stw	ra,76(sp)
 4412354:	dcc01215 	stw	r19,72(sp)
 4412358:	dc801115 	stw	r18,68(sp)
 441235c:	2023883a 	mov	r17,r4
 4412360:	28001c16 	blt	r5,zero,44123d4 <__smakebuf_r+0xa4>
 4412364:	d80d883a 	mov	r6,sp
 4412368:	4416d7c0 	call	4416d7c <_fstat_r>
 441236c:	10001816 	blt	r2,zero,44123d0 <__smakebuf_r+0xa0>
 4412370:	d8800117 	ldw	r2,4(sp)
 4412374:	00e00014 	movui	r3,32768
 4412378:	10bc000c 	andi	r2,r2,61440
 441237c:	14c80020 	cmpeqi	r19,r2,8192
 4412380:	10c03726 	beq	r2,r3,4412460 <__smakebuf_r+0x130>
 4412384:	80c0030b 	ldhu	r3,12(r16)
 4412388:	18c20014 	ori	r3,r3,2048
 441238c:	80c0030d 	sth	r3,12(r16)
 4412390:	00c80004 	movi	r3,8192
 4412394:	10c0521e 	bne	r2,r3,44124e0 <__smakebuf_r+0x1b0>
 4412398:	8140038f 	ldh	r5,14(r16)
 441239c:	8809883a 	mov	r4,r17
 44123a0:	4416dd80 	call	4416dd8 <_isatty_r>
 44123a4:	10004c26 	beq	r2,zero,44124d8 <__smakebuf_r+0x1a8>
 44123a8:	8080030b 	ldhu	r2,12(r16)
 44123ac:	80c010c4 	addi	r3,r16,67
 44123b0:	80c00015 	stw	r3,0(r16)
 44123b4:	10800054 	ori	r2,r2,1
 44123b8:	8080030d 	sth	r2,12(r16)
 44123bc:	00800044 	movi	r2,1
 44123c0:	80c00415 	stw	r3,16(r16)
 44123c4:	80800515 	stw	r2,20(r16)
 44123c8:	04810004 	movi	r18,1024
 44123cc:	00000706 	br	44123ec <__smakebuf_r+0xbc>
 44123d0:	8080030b 	ldhu	r2,12(r16)
 44123d4:	10c0200c 	andi	r3,r2,128
 44123d8:	18001f1e 	bne	r3,zero,4412458 <__smakebuf_r+0x128>
 44123dc:	04810004 	movi	r18,1024
 44123e0:	10820014 	ori	r2,r2,2048
 44123e4:	8080030d 	sth	r2,12(r16)
 44123e8:	0027883a 	mov	r19,zero
 44123ec:	900b883a 	mov	r5,r18
 44123f0:	8809883a 	mov	r4,r17
 44123f4:	440a3f00 	call	440a3f0 <_malloc_r>
 44123f8:	10002c26 	beq	r2,zero,44124ac <__smakebuf_r+0x17c>
 44123fc:	80c0030b 	ldhu	r3,12(r16)
 4412400:	01011074 	movhi	r4,1089
 4412404:	21051104 	addi	r4,r4,5188
 4412408:	89000f15 	stw	r4,60(r17)
 441240c:	18c02014 	ori	r3,r3,128
 4412410:	80c0030d 	sth	r3,12(r16)
 4412414:	80800015 	stw	r2,0(r16)
 4412418:	80800415 	stw	r2,16(r16)
 441241c:	84800515 	stw	r18,20(r16)
 4412420:	98001a1e 	bne	r19,zero,441248c <__smakebuf_r+0x15c>
 4412424:	dfc01317 	ldw	ra,76(sp)
 4412428:	dcc01217 	ldw	r19,72(sp)
 441242c:	dc801117 	ldw	r18,68(sp)
 4412430:	dc401017 	ldw	r17,64(sp)
 4412434:	dc000f17 	ldw	r16,60(sp)
 4412438:	dec01404 	addi	sp,sp,80
 441243c:	f800283a 	ret
 4412440:	288010c4 	addi	r2,r5,67
 4412444:	28800015 	stw	r2,0(r5)
 4412448:	28800415 	stw	r2,16(r5)
 441244c:	00800044 	movi	r2,1
 4412450:	28800515 	stw	r2,20(r5)
 4412454:	f800283a 	ret
 4412458:	04801004 	movi	r18,64
 441245c:	003fe006 	br	44123e0 <__reset+0xfb40e3e0>
 4412460:	81000a17 	ldw	r4,40(r16)
 4412464:	00c11074 	movhi	r3,1089
 4412468:	18cf5904 	addi	r3,r3,15716
 441246c:	20ffc51e 	bne	r4,r3,4412384 <__reset+0xfb40e384>
 4412470:	8080030b 	ldhu	r2,12(r16)
 4412474:	04810004 	movi	r18,1024
 4412478:	84801315 	stw	r18,76(r16)
 441247c:	1484b03a 	or	r2,r2,r18
 4412480:	8080030d 	sth	r2,12(r16)
 4412484:	0027883a 	mov	r19,zero
 4412488:	003fd806 	br	44123ec <__reset+0xfb40e3ec>
 441248c:	8140038f 	ldh	r5,14(r16)
 4412490:	8809883a 	mov	r4,r17
 4412494:	4416dd80 	call	4416dd8 <_isatty_r>
 4412498:	103fe226 	beq	r2,zero,4412424 <__reset+0xfb40e424>
 441249c:	8080030b 	ldhu	r2,12(r16)
 44124a0:	10800054 	ori	r2,r2,1
 44124a4:	8080030d 	sth	r2,12(r16)
 44124a8:	003fde06 	br	4412424 <__reset+0xfb40e424>
 44124ac:	8080030b 	ldhu	r2,12(r16)
 44124b0:	10c0800c 	andi	r3,r2,512
 44124b4:	183fdb1e 	bne	r3,zero,4412424 <__reset+0xfb40e424>
 44124b8:	10800094 	ori	r2,r2,2
 44124bc:	80c010c4 	addi	r3,r16,67
 44124c0:	8080030d 	sth	r2,12(r16)
 44124c4:	00800044 	movi	r2,1
 44124c8:	80c00015 	stw	r3,0(r16)
 44124cc:	80c00415 	stw	r3,16(r16)
 44124d0:	80800515 	stw	r2,20(r16)
 44124d4:	003fd306 	br	4412424 <__reset+0xfb40e424>
 44124d8:	04810004 	movi	r18,1024
 44124dc:	003fc306 	br	44123ec <__reset+0xfb40e3ec>
 44124e0:	0027883a 	mov	r19,zero
 44124e4:	04810004 	movi	r18,1024
 44124e8:	003fc006 	br	44123ec <__reset+0xfb40e3ec>

044124ec <memchr>:
 44124ec:	208000cc 	andi	r2,r4,3
 44124f0:	280f883a 	mov	r7,r5
 44124f4:	10003426 	beq	r2,zero,44125c8 <memchr+0xdc>
 44124f8:	30bfffc4 	addi	r2,r6,-1
 44124fc:	30001a26 	beq	r6,zero,4412568 <memchr+0x7c>
 4412500:	20c00003 	ldbu	r3,0(r4)
 4412504:	29803fcc 	andi	r6,r5,255
 4412508:	30c0051e 	bne	r6,r3,4412520 <memchr+0x34>
 441250c:	00001806 	br	4412570 <memchr+0x84>
 4412510:	10001526 	beq	r2,zero,4412568 <memchr+0x7c>
 4412514:	20c00003 	ldbu	r3,0(r4)
 4412518:	10bfffc4 	addi	r2,r2,-1
 441251c:	30c01426 	beq	r6,r3,4412570 <memchr+0x84>
 4412520:	21000044 	addi	r4,r4,1
 4412524:	20c000cc 	andi	r3,r4,3
 4412528:	183ff91e 	bne	r3,zero,4412510 <__reset+0xfb40e510>
 441252c:	020000c4 	movi	r8,3
 4412530:	40801136 	bltu	r8,r2,4412578 <memchr+0x8c>
 4412534:	10000c26 	beq	r2,zero,4412568 <memchr+0x7c>
 4412538:	20c00003 	ldbu	r3,0(r4)
 441253c:	29403fcc 	andi	r5,r5,255
 4412540:	28c00b26 	beq	r5,r3,4412570 <memchr+0x84>
 4412544:	20c00044 	addi	r3,r4,1
 4412548:	39803fcc 	andi	r6,r7,255
 441254c:	2089883a 	add	r4,r4,r2
 4412550:	00000306 	br	4412560 <memchr+0x74>
 4412554:	18c00044 	addi	r3,r3,1
 4412558:	197fffc3 	ldbu	r5,-1(r3)
 441255c:	31400526 	beq	r6,r5,4412574 <memchr+0x88>
 4412560:	1805883a 	mov	r2,r3
 4412564:	20fffb1e 	bne	r4,r3,4412554 <__reset+0xfb40e554>
 4412568:	0005883a 	mov	r2,zero
 441256c:	f800283a 	ret
 4412570:	2005883a 	mov	r2,r4
 4412574:	f800283a 	ret
 4412578:	28c03fcc 	andi	r3,r5,255
 441257c:	1812923a 	slli	r9,r3,8
 4412580:	02ffbff4 	movhi	r11,65279
 4412584:	02a02074 	movhi	r10,32897
 4412588:	48d2b03a 	or	r9,r9,r3
 441258c:	4806943a 	slli	r3,r9,16
 4412590:	5affbfc4 	addi	r11,r11,-257
 4412594:	52a02004 	addi	r10,r10,-32640
 4412598:	48d2b03a 	or	r9,r9,r3
 441259c:	20c00017 	ldw	r3,0(r4)
 44125a0:	48c6f03a 	xor	r3,r9,r3
 44125a4:	1acd883a 	add	r6,r3,r11
 44125a8:	00c6303a 	nor	r3,zero,r3
 44125ac:	30c6703a 	and	r3,r6,r3
 44125b0:	1a86703a 	and	r3,r3,r10
 44125b4:	183fe01e 	bne	r3,zero,4412538 <__reset+0xfb40e538>
 44125b8:	10bfff04 	addi	r2,r2,-4
 44125bc:	21000104 	addi	r4,r4,4
 44125c0:	40bff636 	bltu	r8,r2,441259c <__reset+0xfb40e59c>
 44125c4:	003fdb06 	br	4412534 <__reset+0xfb40e534>
 44125c8:	3005883a 	mov	r2,r6
 44125cc:	003fd706 	br	441252c <__reset+0xfb40e52c>

044125d0 <memmove>:
 44125d0:	2005883a 	mov	r2,r4
 44125d4:	29000b2e 	bgeu	r5,r4,4412604 <memmove+0x34>
 44125d8:	298f883a 	add	r7,r5,r6
 44125dc:	21c0092e 	bgeu	r4,r7,4412604 <memmove+0x34>
 44125e0:	2187883a 	add	r3,r4,r6
 44125e4:	198bc83a 	sub	r5,r3,r6
 44125e8:	30004826 	beq	r6,zero,441270c <memmove+0x13c>
 44125ec:	39ffffc4 	addi	r7,r7,-1
 44125f0:	39000003 	ldbu	r4,0(r7)
 44125f4:	18ffffc4 	addi	r3,r3,-1
 44125f8:	19000005 	stb	r4,0(r3)
 44125fc:	28fffb1e 	bne	r5,r3,44125ec <__reset+0xfb40e5ec>
 4412600:	f800283a 	ret
 4412604:	00c003c4 	movi	r3,15
 4412608:	1980412e 	bgeu	r3,r6,4412710 <memmove+0x140>
 441260c:	2886b03a 	or	r3,r5,r2
 4412610:	18c000cc 	andi	r3,r3,3
 4412614:	1800401e 	bne	r3,zero,4412718 <memmove+0x148>
 4412618:	33fffc04 	addi	r15,r6,-16
 441261c:	781ed13a 	srli	r15,r15,4
 4412620:	28c00104 	addi	r3,r5,4
 4412624:	13400104 	addi	r13,r2,4
 4412628:	781c913a 	slli	r14,r15,4
 441262c:	2b000204 	addi	r12,r5,8
 4412630:	12c00204 	addi	r11,r2,8
 4412634:	73800504 	addi	r14,r14,20
 4412638:	2a800304 	addi	r10,r5,12
 441263c:	12400304 	addi	r9,r2,12
 4412640:	2b9d883a 	add	r14,r5,r14
 4412644:	2811883a 	mov	r8,r5
 4412648:	100f883a 	mov	r7,r2
 441264c:	41000017 	ldw	r4,0(r8)
 4412650:	39c00404 	addi	r7,r7,16
 4412654:	18c00404 	addi	r3,r3,16
 4412658:	393ffc15 	stw	r4,-16(r7)
 441265c:	193ffc17 	ldw	r4,-16(r3)
 4412660:	6b400404 	addi	r13,r13,16
 4412664:	5ac00404 	addi	r11,r11,16
 4412668:	693ffc15 	stw	r4,-16(r13)
 441266c:	61000017 	ldw	r4,0(r12)
 4412670:	4a400404 	addi	r9,r9,16
 4412674:	42000404 	addi	r8,r8,16
 4412678:	593ffc15 	stw	r4,-16(r11)
 441267c:	51000017 	ldw	r4,0(r10)
 4412680:	63000404 	addi	r12,r12,16
 4412684:	52800404 	addi	r10,r10,16
 4412688:	493ffc15 	stw	r4,-16(r9)
 441268c:	1bbfef1e 	bne	r3,r14,441264c <__reset+0xfb40e64c>
 4412690:	79000044 	addi	r4,r15,1
 4412694:	2008913a 	slli	r4,r4,4
 4412698:	328003cc 	andi	r10,r6,15
 441269c:	02c000c4 	movi	r11,3
 44126a0:	1107883a 	add	r3,r2,r4
 44126a4:	290b883a 	add	r5,r5,r4
 44126a8:	5a801e2e 	bgeu	r11,r10,4412724 <memmove+0x154>
 44126ac:	1813883a 	mov	r9,r3
 44126b0:	2811883a 	mov	r8,r5
 44126b4:	500f883a 	mov	r7,r10
 44126b8:	41000017 	ldw	r4,0(r8)
 44126bc:	4a400104 	addi	r9,r9,4
 44126c0:	39ffff04 	addi	r7,r7,-4
 44126c4:	493fff15 	stw	r4,-4(r9)
 44126c8:	42000104 	addi	r8,r8,4
 44126cc:	59fffa36 	bltu	r11,r7,44126b8 <__reset+0xfb40e6b8>
 44126d0:	513fff04 	addi	r4,r10,-4
 44126d4:	2008d0ba 	srli	r4,r4,2
 44126d8:	318000cc 	andi	r6,r6,3
 44126dc:	21000044 	addi	r4,r4,1
 44126e0:	2109883a 	add	r4,r4,r4
 44126e4:	2109883a 	add	r4,r4,r4
 44126e8:	1907883a 	add	r3,r3,r4
 44126ec:	290b883a 	add	r5,r5,r4
 44126f0:	30000b26 	beq	r6,zero,4412720 <memmove+0x150>
 44126f4:	198d883a 	add	r6,r3,r6
 44126f8:	29c00003 	ldbu	r7,0(r5)
 44126fc:	18c00044 	addi	r3,r3,1
 4412700:	29400044 	addi	r5,r5,1
 4412704:	19ffffc5 	stb	r7,-1(r3)
 4412708:	19bffb1e 	bne	r3,r6,44126f8 <__reset+0xfb40e6f8>
 441270c:	f800283a 	ret
 4412710:	1007883a 	mov	r3,r2
 4412714:	003ff606 	br	44126f0 <__reset+0xfb40e6f0>
 4412718:	1007883a 	mov	r3,r2
 441271c:	003ff506 	br	44126f4 <__reset+0xfb40e6f4>
 4412720:	f800283a 	ret
 4412724:	500d883a 	mov	r6,r10
 4412728:	003ff106 	br	44126f0 <__reset+0xfb40e6f0>

0441272c <_Balloc>:
 441272c:	20801317 	ldw	r2,76(r4)
 4412730:	defffc04 	addi	sp,sp,-16
 4412734:	dc400115 	stw	r17,4(sp)
 4412738:	dc000015 	stw	r16,0(sp)
 441273c:	dfc00315 	stw	ra,12(sp)
 4412740:	dc800215 	stw	r18,8(sp)
 4412744:	2023883a 	mov	r17,r4
 4412748:	2821883a 	mov	r16,r5
 441274c:	10000f26 	beq	r2,zero,441278c <_Balloc+0x60>
 4412750:	8407883a 	add	r3,r16,r16
 4412754:	18c7883a 	add	r3,r3,r3
 4412758:	10c7883a 	add	r3,r2,r3
 441275c:	18800017 	ldw	r2,0(r3)
 4412760:	10001126 	beq	r2,zero,44127a8 <_Balloc+0x7c>
 4412764:	11000017 	ldw	r4,0(r2)
 4412768:	19000015 	stw	r4,0(r3)
 441276c:	10000415 	stw	zero,16(r2)
 4412770:	10000315 	stw	zero,12(r2)
 4412774:	dfc00317 	ldw	ra,12(sp)
 4412778:	dc800217 	ldw	r18,8(sp)
 441277c:	dc400117 	ldw	r17,4(sp)
 4412780:	dc000017 	ldw	r16,0(sp)
 4412784:	dec00404 	addi	sp,sp,16
 4412788:	f800283a 	ret
 441278c:	01800844 	movi	r6,33
 4412790:	01400104 	movi	r5,4
 4412794:	44169ac0 	call	44169ac <_calloc_r>
 4412798:	88801315 	stw	r2,76(r17)
 441279c:	103fec1e 	bne	r2,zero,4412750 <__reset+0xfb40e750>
 44127a0:	0005883a 	mov	r2,zero
 44127a4:	003ff306 	br	4412774 <__reset+0xfb40e774>
 44127a8:	01400044 	movi	r5,1
 44127ac:	2c24983a 	sll	r18,r5,r16
 44127b0:	8809883a 	mov	r4,r17
 44127b4:	91800144 	addi	r6,r18,5
 44127b8:	318d883a 	add	r6,r6,r6
 44127bc:	318d883a 	add	r6,r6,r6
 44127c0:	44169ac0 	call	44169ac <_calloc_r>
 44127c4:	103ff626 	beq	r2,zero,44127a0 <__reset+0xfb40e7a0>
 44127c8:	14000115 	stw	r16,4(r2)
 44127cc:	14800215 	stw	r18,8(r2)
 44127d0:	003fe606 	br	441276c <__reset+0xfb40e76c>

044127d4 <_Bfree>:
 44127d4:	28000826 	beq	r5,zero,44127f8 <_Bfree+0x24>
 44127d8:	28c00117 	ldw	r3,4(r5)
 44127dc:	20801317 	ldw	r2,76(r4)
 44127e0:	18c7883a 	add	r3,r3,r3
 44127e4:	18c7883a 	add	r3,r3,r3
 44127e8:	10c5883a 	add	r2,r2,r3
 44127ec:	10c00017 	ldw	r3,0(r2)
 44127f0:	28c00015 	stw	r3,0(r5)
 44127f4:	11400015 	stw	r5,0(r2)
 44127f8:	f800283a 	ret

044127fc <__multadd>:
 44127fc:	defffa04 	addi	sp,sp,-24
 4412800:	dc800315 	stw	r18,12(sp)
 4412804:	dc400215 	stw	r17,8(sp)
 4412808:	dc000115 	stw	r16,4(sp)
 441280c:	2823883a 	mov	r17,r5
 4412810:	2c000417 	ldw	r16,16(r5)
 4412814:	dfc00515 	stw	ra,20(sp)
 4412818:	dcc00415 	stw	r19,16(sp)
 441281c:	2025883a 	mov	r18,r4
 4412820:	29400504 	addi	r5,r5,20
 4412824:	0011883a 	mov	r8,zero
 4412828:	28c00017 	ldw	r3,0(r5)
 441282c:	29400104 	addi	r5,r5,4
 4412830:	42000044 	addi	r8,r8,1
 4412834:	18bfffcc 	andi	r2,r3,65535
 4412838:	1185383a 	mul	r2,r2,r6
 441283c:	1806d43a 	srli	r3,r3,16
 4412840:	11cf883a 	add	r7,r2,r7
 4412844:	3808d43a 	srli	r4,r7,16
 4412848:	1987383a 	mul	r3,r3,r6
 441284c:	38bfffcc 	andi	r2,r7,65535
 4412850:	1907883a 	add	r3,r3,r4
 4412854:	1808943a 	slli	r4,r3,16
 4412858:	180ed43a 	srli	r7,r3,16
 441285c:	2085883a 	add	r2,r4,r2
 4412860:	28bfff15 	stw	r2,-4(r5)
 4412864:	443ff016 	blt	r8,r16,4412828 <__reset+0xfb40e828>
 4412868:	38000926 	beq	r7,zero,4412890 <__multadd+0x94>
 441286c:	88800217 	ldw	r2,8(r17)
 4412870:	80800f0e 	bge	r16,r2,44128b0 <__multadd+0xb4>
 4412874:	80800144 	addi	r2,r16,5
 4412878:	1085883a 	add	r2,r2,r2
 441287c:	1085883a 	add	r2,r2,r2
 4412880:	8885883a 	add	r2,r17,r2
 4412884:	11c00015 	stw	r7,0(r2)
 4412888:	84000044 	addi	r16,r16,1
 441288c:	8c000415 	stw	r16,16(r17)
 4412890:	8805883a 	mov	r2,r17
 4412894:	dfc00517 	ldw	ra,20(sp)
 4412898:	dcc00417 	ldw	r19,16(sp)
 441289c:	dc800317 	ldw	r18,12(sp)
 44128a0:	dc400217 	ldw	r17,8(sp)
 44128a4:	dc000117 	ldw	r16,4(sp)
 44128a8:	dec00604 	addi	sp,sp,24
 44128ac:	f800283a 	ret
 44128b0:	89400117 	ldw	r5,4(r17)
 44128b4:	9009883a 	mov	r4,r18
 44128b8:	d9c00015 	stw	r7,0(sp)
 44128bc:	29400044 	addi	r5,r5,1
 44128c0:	441272c0 	call	441272c <_Balloc>
 44128c4:	89800417 	ldw	r6,16(r17)
 44128c8:	89400304 	addi	r5,r17,12
 44128cc:	11000304 	addi	r4,r2,12
 44128d0:	31800084 	addi	r6,r6,2
 44128d4:	318d883a 	add	r6,r6,r6
 44128d8:	318d883a 	add	r6,r6,r6
 44128dc:	1027883a 	mov	r19,r2
 44128e0:	440abfc0 	call	440abfc <memcpy>
 44128e4:	d9c00017 	ldw	r7,0(sp)
 44128e8:	88000a26 	beq	r17,zero,4412914 <__multadd+0x118>
 44128ec:	88c00117 	ldw	r3,4(r17)
 44128f0:	90801317 	ldw	r2,76(r18)
 44128f4:	18c7883a 	add	r3,r3,r3
 44128f8:	18c7883a 	add	r3,r3,r3
 44128fc:	10c5883a 	add	r2,r2,r3
 4412900:	10c00017 	ldw	r3,0(r2)
 4412904:	88c00015 	stw	r3,0(r17)
 4412908:	14400015 	stw	r17,0(r2)
 441290c:	9823883a 	mov	r17,r19
 4412910:	003fd806 	br	4412874 <__reset+0xfb40e874>
 4412914:	9823883a 	mov	r17,r19
 4412918:	003fd606 	br	4412874 <__reset+0xfb40e874>

0441291c <__s2b>:
 441291c:	defff904 	addi	sp,sp,-28
 4412920:	dc400115 	stw	r17,4(sp)
 4412924:	dc000015 	stw	r16,0(sp)
 4412928:	2023883a 	mov	r17,r4
 441292c:	2821883a 	mov	r16,r5
 4412930:	39000204 	addi	r4,r7,8
 4412934:	01400244 	movi	r5,9
 4412938:	dcc00315 	stw	r19,12(sp)
 441293c:	dc800215 	stw	r18,8(sp)
 4412940:	dfc00615 	stw	ra,24(sp)
 4412944:	dd400515 	stw	r21,20(sp)
 4412948:	dd000415 	stw	r20,16(sp)
 441294c:	3825883a 	mov	r18,r7
 4412950:	3027883a 	mov	r19,r6
 4412954:	4407da80 	call	4407da8 <__divsi3>
 4412958:	00c00044 	movi	r3,1
 441295c:	000b883a 	mov	r5,zero
 4412960:	1880030e 	bge	r3,r2,4412970 <__s2b+0x54>
 4412964:	18c7883a 	add	r3,r3,r3
 4412968:	29400044 	addi	r5,r5,1
 441296c:	18bffd16 	blt	r3,r2,4412964 <__reset+0xfb40e964>
 4412970:	8809883a 	mov	r4,r17
 4412974:	441272c0 	call	441272c <_Balloc>
 4412978:	d8c00717 	ldw	r3,28(sp)
 441297c:	10c00515 	stw	r3,20(r2)
 4412980:	00c00044 	movi	r3,1
 4412984:	10c00415 	stw	r3,16(r2)
 4412988:	00c00244 	movi	r3,9
 441298c:	1cc0210e 	bge	r3,r19,4412a14 <__s2b+0xf8>
 4412990:	80eb883a 	add	r21,r16,r3
 4412994:	a829883a 	mov	r20,r21
 4412998:	84e1883a 	add	r16,r16,r19
 441299c:	a1c00007 	ldb	r7,0(r20)
 44129a0:	01800284 	movi	r6,10
 44129a4:	a5000044 	addi	r20,r20,1
 44129a8:	100b883a 	mov	r5,r2
 44129ac:	39fff404 	addi	r7,r7,-48
 44129b0:	8809883a 	mov	r4,r17
 44129b4:	44127fc0 	call	44127fc <__multadd>
 44129b8:	a43ff81e 	bne	r20,r16,441299c <__reset+0xfb40e99c>
 44129bc:	ace1883a 	add	r16,r21,r19
 44129c0:	843ffe04 	addi	r16,r16,-8
 44129c4:	9c800a0e 	bge	r19,r18,44129f0 <__s2b+0xd4>
 44129c8:	94e5c83a 	sub	r18,r18,r19
 44129cc:	84a5883a 	add	r18,r16,r18
 44129d0:	81c00007 	ldb	r7,0(r16)
 44129d4:	01800284 	movi	r6,10
 44129d8:	84000044 	addi	r16,r16,1
 44129dc:	100b883a 	mov	r5,r2
 44129e0:	39fff404 	addi	r7,r7,-48
 44129e4:	8809883a 	mov	r4,r17
 44129e8:	44127fc0 	call	44127fc <__multadd>
 44129ec:	84bff81e 	bne	r16,r18,44129d0 <__reset+0xfb40e9d0>
 44129f0:	dfc00617 	ldw	ra,24(sp)
 44129f4:	dd400517 	ldw	r21,20(sp)
 44129f8:	dd000417 	ldw	r20,16(sp)
 44129fc:	dcc00317 	ldw	r19,12(sp)
 4412a00:	dc800217 	ldw	r18,8(sp)
 4412a04:	dc400117 	ldw	r17,4(sp)
 4412a08:	dc000017 	ldw	r16,0(sp)
 4412a0c:	dec00704 	addi	sp,sp,28
 4412a10:	f800283a 	ret
 4412a14:	84000284 	addi	r16,r16,10
 4412a18:	1827883a 	mov	r19,r3
 4412a1c:	003fe906 	br	44129c4 <__reset+0xfb40e9c4>

04412a20 <__hi0bits>:
 4412a20:	20bfffec 	andhi	r2,r4,65535
 4412a24:	1000141e 	bne	r2,zero,4412a78 <__hi0bits+0x58>
 4412a28:	2008943a 	slli	r4,r4,16
 4412a2c:	00800404 	movi	r2,16
 4412a30:	20ffc02c 	andhi	r3,r4,65280
 4412a34:	1800021e 	bne	r3,zero,4412a40 <__hi0bits+0x20>
 4412a38:	2008923a 	slli	r4,r4,8
 4412a3c:	10800204 	addi	r2,r2,8
 4412a40:	20fc002c 	andhi	r3,r4,61440
 4412a44:	1800021e 	bne	r3,zero,4412a50 <__hi0bits+0x30>
 4412a48:	2008913a 	slli	r4,r4,4
 4412a4c:	10800104 	addi	r2,r2,4
 4412a50:	20f0002c 	andhi	r3,r4,49152
 4412a54:	1800031e 	bne	r3,zero,4412a64 <__hi0bits+0x44>
 4412a58:	2109883a 	add	r4,r4,r4
 4412a5c:	10800084 	addi	r2,r2,2
 4412a60:	2109883a 	add	r4,r4,r4
 4412a64:	20000316 	blt	r4,zero,4412a74 <__hi0bits+0x54>
 4412a68:	2110002c 	andhi	r4,r4,16384
 4412a6c:	2000041e 	bne	r4,zero,4412a80 <__hi0bits+0x60>
 4412a70:	00800804 	movi	r2,32
 4412a74:	f800283a 	ret
 4412a78:	0005883a 	mov	r2,zero
 4412a7c:	003fec06 	br	4412a30 <__reset+0xfb40ea30>
 4412a80:	10800044 	addi	r2,r2,1
 4412a84:	f800283a 	ret

04412a88 <__lo0bits>:
 4412a88:	20c00017 	ldw	r3,0(r4)
 4412a8c:	188001cc 	andi	r2,r3,7
 4412a90:	10000826 	beq	r2,zero,4412ab4 <__lo0bits+0x2c>
 4412a94:	1880004c 	andi	r2,r3,1
 4412a98:	1000211e 	bne	r2,zero,4412b20 <__lo0bits+0x98>
 4412a9c:	1880008c 	andi	r2,r3,2
 4412aa0:	1000211e 	bne	r2,zero,4412b28 <__lo0bits+0xa0>
 4412aa4:	1806d0ba 	srli	r3,r3,2
 4412aa8:	00800084 	movi	r2,2
 4412aac:	20c00015 	stw	r3,0(r4)
 4412ab0:	f800283a 	ret
 4412ab4:	18bfffcc 	andi	r2,r3,65535
 4412ab8:	10001326 	beq	r2,zero,4412b08 <__lo0bits+0x80>
 4412abc:	0005883a 	mov	r2,zero
 4412ac0:	19403fcc 	andi	r5,r3,255
 4412ac4:	2800021e 	bne	r5,zero,4412ad0 <__lo0bits+0x48>
 4412ac8:	1806d23a 	srli	r3,r3,8
 4412acc:	10800204 	addi	r2,r2,8
 4412ad0:	194003cc 	andi	r5,r3,15
 4412ad4:	2800021e 	bne	r5,zero,4412ae0 <__lo0bits+0x58>
 4412ad8:	1806d13a 	srli	r3,r3,4
 4412adc:	10800104 	addi	r2,r2,4
 4412ae0:	194000cc 	andi	r5,r3,3
 4412ae4:	2800021e 	bne	r5,zero,4412af0 <__lo0bits+0x68>
 4412ae8:	1806d0ba 	srli	r3,r3,2
 4412aec:	10800084 	addi	r2,r2,2
 4412af0:	1940004c 	andi	r5,r3,1
 4412af4:	2800081e 	bne	r5,zero,4412b18 <__lo0bits+0x90>
 4412af8:	1806d07a 	srli	r3,r3,1
 4412afc:	1800051e 	bne	r3,zero,4412b14 <__lo0bits+0x8c>
 4412b00:	00800804 	movi	r2,32
 4412b04:	f800283a 	ret
 4412b08:	1806d43a 	srli	r3,r3,16
 4412b0c:	00800404 	movi	r2,16
 4412b10:	003feb06 	br	4412ac0 <__reset+0xfb40eac0>
 4412b14:	10800044 	addi	r2,r2,1
 4412b18:	20c00015 	stw	r3,0(r4)
 4412b1c:	f800283a 	ret
 4412b20:	0005883a 	mov	r2,zero
 4412b24:	f800283a 	ret
 4412b28:	1806d07a 	srli	r3,r3,1
 4412b2c:	00800044 	movi	r2,1
 4412b30:	20c00015 	stw	r3,0(r4)
 4412b34:	f800283a 	ret

04412b38 <__i2b>:
 4412b38:	defffd04 	addi	sp,sp,-12
 4412b3c:	dc000015 	stw	r16,0(sp)
 4412b40:	04000044 	movi	r16,1
 4412b44:	dc400115 	stw	r17,4(sp)
 4412b48:	2823883a 	mov	r17,r5
 4412b4c:	800b883a 	mov	r5,r16
 4412b50:	dfc00215 	stw	ra,8(sp)
 4412b54:	441272c0 	call	441272c <_Balloc>
 4412b58:	14400515 	stw	r17,20(r2)
 4412b5c:	14000415 	stw	r16,16(r2)
 4412b60:	dfc00217 	ldw	ra,8(sp)
 4412b64:	dc400117 	ldw	r17,4(sp)
 4412b68:	dc000017 	ldw	r16,0(sp)
 4412b6c:	dec00304 	addi	sp,sp,12
 4412b70:	f800283a 	ret

04412b74 <__multiply>:
 4412b74:	defffa04 	addi	sp,sp,-24
 4412b78:	dcc00315 	stw	r19,12(sp)
 4412b7c:	dc800215 	stw	r18,8(sp)
 4412b80:	34c00417 	ldw	r19,16(r6)
 4412b84:	2c800417 	ldw	r18,16(r5)
 4412b88:	dd000415 	stw	r20,16(sp)
 4412b8c:	dc400115 	stw	r17,4(sp)
 4412b90:	dfc00515 	stw	ra,20(sp)
 4412b94:	dc000015 	stw	r16,0(sp)
 4412b98:	2829883a 	mov	r20,r5
 4412b9c:	3023883a 	mov	r17,r6
 4412ba0:	94c0050e 	bge	r18,r19,4412bb8 <__multiply+0x44>
 4412ba4:	9007883a 	mov	r3,r18
 4412ba8:	3029883a 	mov	r20,r6
 4412bac:	9825883a 	mov	r18,r19
 4412bb0:	2823883a 	mov	r17,r5
 4412bb4:	1827883a 	mov	r19,r3
 4412bb8:	a0800217 	ldw	r2,8(r20)
 4412bbc:	94e1883a 	add	r16,r18,r19
 4412bc0:	a1400117 	ldw	r5,4(r20)
 4412bc4:	1400010e 	bge	r2,r16,4412bcc <__multiply+0x58>
 4412bc8:	29400044 	addi	r5,r5,1
 4412bcc:	441272c0 	call	441272c <_Balloc>
 4412bd0:	8415883a 	add	r10,r16,r16
 4412bd4:	12c00504 	addi	r11,r2,20
 4412bd8:	5295883a 	add	r10,r10,r10
 4412bdc:	5a95883a 	add	r10,r11,r10
 4412be0:	5807883a 	mov	r3,r11
 4412be4:	5a80032e 	bgeu	r11,r10,4412bf4 <__multiply+0x80>
 4412be8:	18000015 	stw	zero,0(r3)
 4412bec:	18c00104 	addi	r3,r3,4
 4412bf0:	1abffd36 	bltu	r3,r10,4412be8 <__reset+0xfb40ebe8>
 4412bf4:	9ce7883a 	add	r19,r19,r19
 4412bf8:	94a5883a 	add	r18,r18,r18
 4412bfc:	89800504 	addi	r6,r17,20
 4412c00:	9ce7883a 	add	r19,r19,r19
 4412c04:	a3400504 	addi	r13,r20,20
 4412c08:	94a5883a 	add	r18,r18,r18
 4412c0c:	34d9883a 	add	r12,r6,r19
 4412c10:	6c93883a 	add	r9,r13,r18
 4412c14:	3300422e 	bgeu	r6,r12,4412d20 <__multiply+0x1ac>
 4412c18:	37c00017 	ldw	ra,0(r6)
 4412c1c:	fbffffcc 	andi	r15,ra,65535
 4412c20:	78001b26 	beq	r15,zero,4412c90 <__multiply+0x11c>
 4412c24:	5811883a 	mov	r8,r11
 4412c28:	681d883a 	mov	r14,r13
 4412c2c:	000f883a 	mov	r7,zero
 4412c30:	71000017 	ldw	r4,0(r14)
 4412c34:	40c00017 	ldw	r3,0(r8)
 4412c38:	73800104 	addi	r14,r14,4
 4412c3c:	217fffcc 	andi	r5,r4,65535
 4412c40:	2bcb383a 	mul	r5,r5,r15
 4412c44:	2008d43a 	srli	r4,r4,16
 4412c48:	1c7fffcc 	andi	r17,r3,65535
 4412c4c:	2c4b883a 	add	r5,r5,r17
 4412c50:	29cb883a 	add	r5,r5,r7
 4412c54:	23c9383a 	mul	r4,r4,r15
 4412c58:	1806d43a 	srli	r3,r3,16
 4412c5c:	280ed43a 	srli	r7,r5,16
 4412c60:	297fffcc 	andi	r5,r5,65535
 4412c64:	20c7883a 	add	r3,r4,r3
 4412c68:	19c7883a 	add	r3,r3,r7
 4412c6c:	1808943a 	slli	r4,r3,16
 4412c70:	4023883a 	mov	r17,r8
 4412c74:	180ed43a 	srli	r7,r3,16
 4412c78:	214ab03a 	or	r5,r4,r5
 4412c7c:	41400015 	stw	r5,0(r8)
 4412c80:	42000104 	addi	r8,r8,4
 4412c84:	727fea36 	bltu	r14,r9,4412c30 <__reset+0xfb40ec30>
 4412c88:	89c00115 	stw	r7,4(r17)
 4412c8c:	37c00017 	ldw	ra,0(r6)
 4412c90:	f83ed43a 	srli	ra,ra,16
 4412c94:	f8001f26 	beq	ra,zero,4412d14 <__multiply+0x1a0>
 4412c98:	58c00017 	ldw	r3,0(r11)
 4412c9c:	681d883a 	mov	r14,r13
 4412ca0:	581f883a 	mov	r15,r11
 4412ca4:	1811883a 	mov	r8,r3
 4412ca8:	5825883a 	mov	r18,r11
 4412cac:	000f883a 	mov	r7,zero
 4412cb0:	00000106 	br	4412cb8 <__multiply+0x144>
 4412cb4:	8825883a 	mov	r18,r17
 4412cb8:	7140000b 	ldhu	r5,0(r14)
 4412cbc:	4010d43a 	srli	r8,r8,16
 4412cc0:	193fffcc 	andi	r4,r3,65535
 4412cc4:	2fcb383a 	mul	r5,r5,ra
 4412cc8:	7bc00104 	addi	r15,r15,4
 4412ccc:	73800104 	addi	r14,r14,4
 4412cd0:	2a0b883a 	add	r5,r5,r8
 4412cd4:	29cb883a 	add	r5,r5,r7
 4412cd8:	2806943a 	slli	r3,r5,16
 4412cdc:	94400104 	addi	r17,r18,4
 4412ce0:	280ad43a 	srli	r5,r5,16
 4412ce4:	1908b03a 	or	r4,r3,r4
 4412ce8:	793fff15 	stw	r4,-4(r15)
 4412cec:	70ffff17 	ldw	r3,-4(r14)
 4412cf0:	8a000017 	ldw	r8,0(r17)
 4412cf4:	1806d43a 	srli	r3,r3,16
 4412cf8:	413fffcc 	andi	r4,r8,65535
 4412cfc:	1fc7383a 	mul	r3,r3,ra
 4412d00:	1907883a 	add	r3,r3,r4
 4412d04:	1947883a 	add	r3,r3,r5
 4412d08:	180ed43a 	srli	r7,r3,16
 4412d0c:	727fe936 	bltu	r14,r9,4412cb4 <__reset+0xfb40ecb4>
 4412d10:	90c00115 	stw	r3,4(r18)
 4412d14:	31800104 	addi	r6,r6,4
 4412d18:	5ac00104 	addi	r11,r11,4
 4412d1c:	333fbe36 	bltu	r6,r12,4412c18 <__reset+0xfb40ec18>
 4412d20:	0400090e 	bge	zero,r16,4412d48 <__multiply+0x1d4>
 4412d24:	50ffff17 	ldw	r3,-4(r10)
 4412d28:	52bfff04 	addi	r10,r10,-4
 4412d2c:	18000326 	beq	r3,zero,4412d3c <__multiply+0x1c8>
 4412d30:	00000506 	br	4412d48 <__multiply+0x1d4>
 4412d34:	50c00017 	ldw	r3,0(r10)
 4412d38:	1800031e 	bne	r3,zero,4412d48 <__multiply+0x1d4>
 4412d3c:	843fffc4 	addi	r16,r16,-1
 4412d40:	52bfff04 	addi	r10,r10,-4
 4412d44:	803ffb1e 	bne	r16,zero,4412d34 <__reset+0xfb40ed34>
 4412d48:	14000415 	stw	r16,16(r2)
 4412d4c:	dfc00517 	ldw	ra,20(sp)
 4412d50:	dd000417 	ldw	r20,16(sp)
 4412d54:	dcc00317 	ldw	r19,12(sp)
 4412d58:	dc800217 	ldw	r18,8(sp)
 4412d5c:	dc400117 	ldw	r17,4(sp)
 4412d60:	dc000017 	ldw	r16,0(sp)
 4412d64:	dec00604 	addi	sp,sp,24
 4412d68:	f800283a 	ret

04412d6c <__pow5mult>:
 4412d6c:	defffa04 	addi	sp,sp,-24
 4412d70:	dcc00315 	stw	r19,12(sp)
 4412d74:	dc000015 	stw	r16,0(sp)
 4412d78:	dfc00515 	stw	ra,20(sp)
 4412d7c:	dd000415 	stw	r20,16(sp)
 4412d80:	dc800215 	stw	r18,8(sp)
 4412d84:	dc400115 	stw	r17,4(sp)
 4412d88:	308000cc 	andi	r2,r6,3
 4412d8c:	3021883a 	mov	r16,r6
 4412d90:	2027883a 	mov	r19,r4
 4412d94:	10002f1e 	bne	r2,zero,4412e54 <__pow5mult+0xe8>
 4412d98:	2825883a 	mov	r18,r5
 4412d9c:	8021d0ba 	srai	r16,r16,2
 4412da0:	80001a26 	beq	r16,zero,4412e0c <__pow5mult+0xa0>
 4412da4:	9c401217 	ldw	r17,72(r19)
 4412da8:	8800061e 	bne	r17,zero,4412dc4 <__pow5mult+0x58>
 4412dac:	00003406 	br	4412e80 <__pow5mult+0x114>
 4412db0:	8021d07a 	srai	r16,r16,1
 4412db4:	80001526 	beq	r16,zero,4412e0c <__pow5mult+0xa0>
 4412db8:	88800017 	ldw	r2,0(r17)
 4412dbc:	10001c26 	beq	r2,zero,4412e30 <__pow5mult+0xc4>
 4412dc0:	1023883a 	mov	r17,r2
 4412dc4:	8080004c 	andi	r2,r16,1
 4412dc8:	103ff926 	beq	r2,zero,4412db0 <__reset+0xfb40edb0>
 4412dcc:	880d883a 	mov	r6,r17
 4412dd0:	900b883a 	mov	r5,r18
 4412dd4:	9809883a 	mov	r4,r19
 4412dd8:	4412b740 	call	4412b74 <__multiply>
 4412ddc:	90001b26 	beq	r18,zero,4412e4c <__pow5mult+0xe0>
 4412de0:	91000117 	ldw	r4,4(r18)
 4412de4:	98c01317 	ldw	r3,76(r19)
 4412de8:	8021d07a 	srai	r16,r16,1
 4412dec:	2109883a 	add	r4,r4,r4
 4412df0:	2109883a 	add	r4,r4,r4
 4412df4:	1907883a 	add	r3,r3,r4
 4412df8:	19000017 	ldw	r4,0(r3)
 4412dfc:	91000015 	stw	r4,0(r18)
 4412e00:	1c800015 	stw	r18,0(r3)
 4412e04:	1025883a 	mov	r18,r2
 4412e08:	803feb1e 	bne	r16,zero,4412db8 <__reset+0xfb40edb8>
 4412e0c:	9005883a 	mov	r2,r18
 4412e10:	dfc00517 	ldw	ra,20(sp)
 4412e14:	dd000417 	ldw	r20,16(sp)
 4412e18:	dcc00317 	ldw	r19,12(sp)
 4412e1c:	dc800217 	ldw	r18,8(sp)
 4412e20:	dc400117 	ldw	r17,4(sp)
 4412e24:	dc000017 	ldw	r16,0(sp)
 4412e28:	dec00604 	addi	sp,sp,24
 4412e2c:	f800283a 	ret
 4412e30:	880d883a 	mov	r6,r17
 4412e34:	880b883a 	mov	r5,r17
 4412e38:	9809883a 	mov	r4,r19
 4412e3c:	4412b740 	call	4412b74 <__multiply>
 4412e40:	88800015 	stw	r2,0(r17)
 4412e44:	10000015 	stw	zero,0(r2)
 4412e48:	003fdd06 	br	4412dc0 <__reset+0xfb40edc0>
 4412e4c:	1025883a 	mov	r18,r2
 4412e50:	003fd706 	br	4412db0 <__reset+0xfb40edb0>
 4412e54:	10bfffc4 	addi	r2,r2,-1
 4412e58:	1085883a 	add	r2,r2,r2
 4412e5c:	00c110f4 	movhi	r3,1091
 4412e60:	18d34e04 	addi	r3,r3,19768
 4412e64:	1085883a 	add	r2,r2,r2
 4412e68:	1885883a 	add	r2,r3,r2
 4412e6c:	11800017 	ldw	r6,0(r2)
 4412e70:	000f883a 	mov	r7,zero
 4412e74:	44127fc0 	call	44127fc <__multadd>
 4412e78:	1025883a 	mov	r18,r2
 4412e7c:	003fc706 	br	4412d9c <__reset+0xfb40ed9c>
 4412e80:	05000044 	movi	r20,1
 4412e84:	a00b883a 	mov	r5,r20
 4412e88:	9809883a 	mov	r4,r19
 4412e8c:	441272c0 	call	441272c <_Balloc>
 4412e90:	1023883a 	mov	r17,r2
 4412e94:	00809c44 	movi	r2,625
 4412e98:	88800515 	stw	r2,20(r17)
 4412e9c:	8d000415 	stw	r20,16(r17)
 4412ea0:	9c401215 	stw	r17,72(r19)
 4412ea4:	88000015 	stw	zero,0(r17)
 4412ea8:	003fc606 	br	4412dc4 <__reset+0xfb40edc4>

04412eac <__lshift>:
 4412eac:	defff904 	addi	sp,sp,-28
 4412eb0:	dd400515 	stw	r21,20(sp)
 4412eb4:	dcc00315 	stw	r19,12(sp)
 4412eb8:	302bd17a 	srai	r21,r6,5
 4412ebc:	2cc00417 	ldw	r19,16(r5)
 4412ec0:	28800217 	ldw	r2,8(r5)
 4412ec4:	dd000415 	stw	r20,16(sp)
 4412ec8:	ace7883a 	add	r19,r21,r19
 4412ecc:	dc800215 	stw	r18,8(sp)
 4412ed0:	dc400115 	stw	r17,4(sp)
 4412ed4:	dc000015 	stw	r16,0(sp)
 4412ed8:	dfc00615 	stw	ra,24(sp)
 4412edc:	9c000044 	addi	r16,r19,1
 4412ee0:	2823883a 	mov	r17,r5
 4412ee4:	3029883a 	mov	r20,r6
 4412ee8:	2025883a 	mov	r18,r4
 4412eec:	29400117 	ldw	r5,4(r5)
 4412ef0:	1400030e 	bge	r2,r16,4412f00 <__lshift+0x54>
 4412ef4:	1085883a 	add	r2,r2,r2
 4412ef8:	29400044 	addi	r5,r5,1
 4412efc:	143ffd16 	blt	r2,r16,4412ef4 <__reset+0xfb40eef4>
 4412f00:	9009883a 	mov	r4,r18
 4412f04:	441272c0 	call	441272c <_Balloc>
 4412f08:	10c00504 	addi	r3,r2,20
 4412f0c:	0540070e 	bge	zero,r21,4412f2c <__lshift+0x80>
 4412f10:	ad6b883a 	add	r21,r21,r21
 4412f14:	ad6b883a 	add	r21,r21,r21
 4412f18:	1809883a 	mov	r4,r3
 4412f1c:	1d47883a 	add	r3,r3,r21
 4412f20:	20000015 	stw	zero,0(r4)
 4412f24:	21000104 	addi	r4,r4,4
 4412f28:	193ffd1e 	bne	r3,r4,4412f20 <__reset+0xfb40ef20>
 4412f2c:	8a000417 	ldw	r8,16(r17)
 4412f30:	89000504 	addi	r4,r17,20
 4412f34:	a18007cc 	andi	r6,r20,31
 4412f38:	4211883a 	add	r8,r8,r8
 4412f3c:	4211883a 	add	r8,r8,r8
 4412f40:	2211883a 	add	r8,r4,r8
 4412f44:	30002326 	beq	r6,zero,4412fd4 <__lshift+0x128>
 4412f48:	02400804 	movi	r9,32
 4412f4c:	4993c83a 	sub	r9,r9,r6
 4412f50:	000b883a 	mov	r5,zero
 4412f54:	21c00017 	ldw	r7,0(r4)
 4412f58:	1815883a 	mov	r10,r3
 4412f5c:	18c00104 	addi	r3,r3,4
 4412f60:	398e983a 	sll	r7,r7,r6
 4412f64:	21000104 	addi	r4,r4,4
 4412f68:	394ab03a 	or	r5,r7,r5
 4412f6c:	197fff15 	stw	r5,-4(r3)
 4412f70:	217fff17 	ldw	r5,-4(r4)
 4412f74:	2a4ad83a 	srl	r5,r5,r9
 4412f78:	223ff636 	bltu	r4,r8,4412f54 <__reset+0xfb40ef54>
 4412f7c:	51400115 	stw	r5,4(r10)
 4412f80:	28001a1e 	bne	r5,zero,4412fec <__lshift+0x140>
 4412f84:	843fffc4 	addi	r16,r16,-1
 4412f88:	14000415 	stw	r16,16(r2)
 4412f8c:	88000826 	beq	r17,zero,4412fb0 <__lshift+0x104>
 4412f90:	89000117 	ldw	r4,4(r17)
 4412f94:	90c01317 	ldw	r3,76(r18)
 4412f98:	2109883a 	add	r4,r4,r4
 4412f9c:	2109883a 	add	r4,r4,r4
 4412fa0:	1907883a 	add	r3,r3,r4
 4412fa4:	19000017 	ldw	r4,0(r3)
 4412fa8:	89000015 	stw	r4,0(r17)
 4412fac:	1c400015 	stw	r17,0(r3)
 4412fb0:	dfc00617 	ldw	ra,24(sp)
 4412fb4:	dd400517 	ldw	r21,20(sp)
 4412fb8:	dd000417 	ldw	r20,16(sp)
 4412fbc:	dcc00317 	ldw	r19,12(sp)
 4412fc0:	dc800217 	ldw	r18,8(sp)
 4412fc4:	dc400117 	ldw	r17,4(sp)
 4412fc8:	dc000017 	ldw	r16,0(sp)
 4412fcc:	dec00704 	addi	sp,sp,28
 4412fd0:	f800283a 	ret
 4412fd4:	21400017 	ldw	r5,0(r4)
 4412fd8:	18c00104 	addi	r3,r3,4
 4412fdc:	21000104 	addi	r4,r4,4
 4412fe0:	197fff15 	stw	r5,-4(r3)
 4412fe4:	223ffb36 	bltu	r4,r8,4412fd4 <__reset+0xfb40efd4>
 4412fe8:	003fe606 	br	4412f84 <__reset+0xfb40ef84>
 4412fec:	9c000084 	addi	r16,r19,2
 4412ff0:	003fe406 	br	4412f84 <__reset+0xfb40ef84>

04412ff4 <__mcmp>:
 4412ff4:	20800417 	ldw	r2,16(r4)
 4412ff8:	28c00417 	ldw	r3,16(r5)
 4412ffc:	10c5c83a 	sub	r2,r2,r3
 4413000:	1000111e 	bne	r2,zero,4413048 <__mcmp+0x54>
 4413004:	18c7883a 	add	r3,r3,r3
 4413008:	18c7883a 	add	r3,r3,r3
 441300c:	21000504 	addi	r4,r4,20
 4413010:	29400504 	addi	r5,r5,20
 4413014:	20c5883a 	add	r2,r4,r3
 4413018:	28cb883a 	add	r5,r5,r3
 441301c:	00000106 	br	4413024 <__mcmp+0x30>
 4413020:	20800a2e 	bgeu	r4,r2,441304c <__mcmp+0x58>
 4413024:	10bfff04 	addi	r2,r2,-4
 4413028:	297fff04 	addi	r5,r5,-4
 441302c:	11800017 	ldw	r6,0(r2)
 4413030:	28c00017 	ldw	r3,0(r5)
 4413034:	30fffa26 	beq	r6,r3,4413020 <__reset+0xfb40f020>
 4413038:	30c00236 	bltu	r6,r3,4413044 <__mcmp+0x50>
 441303c:	00800044 	movi	r2,1
 4413040:	f800283a 	ret
 4413044:	00bfffc4 	movi	r2,-1
 4413048:	f800283a 	ret
 441304c:	0005883a 	mov	r2,zero
 4413050:	f800283a 	ret

04413054 <__mdiff>:
 4413054:	28c00417 	ldw	r3,16(r5)
 4413058:	30800417 	ldw	r2,16(r6)
 441305c:	defffa04 	addi	sp,sp,-24
 4413060:	dcc00315 	stw	r19,12(sp)
 4413064:	dc800215 	stw	r18,8(sp)
 4413068:	dfc00515 	stw	ra,20(sp)
 441306c:	dd000415 	stw	r20,16(sp)
 4413070:	dc400115 	stw	r17,4(sp)
 4413074:	dc000015 	stw	r16,0(sp)
 4413078:	1887c83a 	sub	r3,r3,r2
 441307c:	2825883a 	mov	r18,r5
 4413080:	3027883a 	mov	r19,r6
 4413084:	1800141e 	bne	r3,zero,44130d8 <__mdiff+0x84>
 4413088:	1085883a 	add	r2,r2,r2
 441308c:	1085883a 	add	r2,r2,r2
 4413090:	2a000504 	addi	r8,r5,20
 4413094:	34000504 	addi	r16,r6,20
 4413098:	4087883a 	add	r3,r8,r2
 441309c:	8085883a 	add	r2,r16,r2
 44130a0:	00000106 	br	44130a8 <__mdiff+0x54>
 44130a4:	40c0592e 	bgeu	r8,r3,441320c <__mdiff+0x1b8>
 44130a8:	18ffff04 	addi	r3,r3,-4
 44130ac:	10bfff04 	addi	r2,r2,-4
 44130b0:	19c00017 	ldw	r7,0(r3)
 44130b4:	11400017 	ldw	r5,0(r2)
 44130b8:	397ffa26 	beq	r7,r5,44130a4 <__reset+0xfb40f0a4>
 44130bc:	3940592e 	bgeu	r7,r5,4413224 <__mdiff+0x1d0>
 44130c0:	9005883a 	mov	r2,r18
 44130c4:	4023883a 	mov	r17,r8
 44130c8:	9825883a 	mov	r18,r19
 44130cc:	05000044 	movi	r20,1
 44130d0:	1027883a 	mov	r19,r2
 44130d4:	00000406 	br	44130e8 <__mdiff+0x94>
 44130d8:	18005616 	blt	r3,zero,4413234 <__mdiff+0x1e0>
 44130dc:	34400504 	addi	r17,r6,20
 44130e0:	2c000504 	addi	r16,r5,20
 44130e4:	0029883a 	mov	r20,zero
 44130e8:	91400117 	ldw	r5,4(r18)
 44130ec:	441272c0 	call	441272c <_Balloc>
 44130f0:	92400417 	ldw	r9,16(r18)
 44130f4:	9b000417 	ldw	r12,16(r19)
 44130f8:	12c00504 	addi	r11,r2,20
 44130fc:	4a51883a 	add	r8,r9,r9
 4413100:	6319883a 	add	r12,r12,r12
 4413104:	4211883a 	add	r8,r8,r8
 4413108:	6319883a 	add	r12,r12,r12
 441310c:	15000315 	stw	r20,12(r2)
 4413110:	8211883a 	add	r8,r16,r8
 4413114:	8b19883a 	add	r12,r17,r12
 4413118:	0007883a 	mov	r3,zero
 441311c:	81400017 	ldw	r5,0(r16)
 4413120:	89c00017 	ldw	r7,0(r17)
 4413124:	59800104 	addi	r6,r11,4
 4413128:	293fffcc 	andi	r4,r5,65535
 441312c:	20c7883a 	add	r3,r4,r3
 4413130:	393fffcc 	andi	r4,r7,65535
 4413134:	1909c83a 	sub	r4,r3,r4
 4413138:	280ad43a 	srli	r5,r5,16
 441313c:	380ed43a 	srli	r7,r7,16
 4413140:	2007d43a 	srai	r3,r4,16
 4413144:	213fffcc 	andi	r4,r4,65535
 4413148:	29cbc83a 	sub	r5,r5,r7
 441314c:	28c7883a 	add	r3,r5,r3
 4413150:	180a943a 	slli	r5,r3,16
 4413154:	8c400104 	addi	r17,r17,4
 4413158:	84000104 	addi	r16,r16,4
 441315c:	2908b03a 	or	r4,r5,r4
 4413160:	59000015 	stw	r4,0(r11)
 4413164:	1807d43a 	srai	r3,r3,16
 4413168:	3015883a 	mov	r10,r6
 441316c:	3017883a 	mov	r11,r6
 4413170:	8b3fea36 	bltu	r17,r12,441311c <__reset+0xfb40f11c>
 4413174:	8200162e 	bgeu	r16,r8,44131d0 <__mdiff+0x17c>
 4413178:	8017883a 	mov	r11,r16
 441317c:	59400017 	ldw	r5,0(r11)
 4413180:	31800104 	addi	r6,r6,4
 4413184:	5ac00104 	addi	r11,r11,4
 4413188:	293fffcc 	andi	r4,r5,65535
 441318c:	20c7883a 	add	r3,r4,r3
 4413190:	280ed43a 	srli	r7,r5,16
 4413194:	180bd43a 	srai	r5,r3,16
 4413198:	193fffcc 	andi	r4,r3,65535
 441319c:	3947883a 	add	r3,r7,r5
 44131a0:	180a943a 	slli	r5,r3,16
 44131a4:	1807d43a 	srai	r3,r3,16
 44131a8:	2908b03a 	or	r4,r5,r4
 44131ac:	313fff15 	stw	r4,-4(r6)
 44131b0:	5a3ff236 	bltu	r11,r8,441317c <__reset+0xfb40f17c>
 44131b4:	0406303a 	nor	r3,zero,r16
 44131b8:	1a07883a 	add	r3,r3,r8
 44131bc:	1806d0ba 	srli	r3,r3,2
 44131c0:	18c00044 	addi	r3,r3,1
 44131c4:	18c7883a 	add	r3,r3,r3
 44131c8:	18c7883a 	add	r3,r3,r3
 44131cc:	50d5883a 	add	r10,r10,r3
 44131d0:	50ffff04 	addi	r3,r10,-4
 44131d4:	2000041e 	bne	r4,zero,44131e8 <__mdiff+0x194>
 44131d8:	18ffff04 	addi	r3,r3,-4
 44131dc:	19000017 	ldw	r4,0(r3)
 44131e0:	4a7fffc4 	addi	r9,r9,-1
 44131e4:	203ffc26 	beq	r4,zero,44131d8 <__reset+0xfb40f1d8>
 44131e8:	12400415 	stw	r9,16(r2)
 44131ec:	dfc00517 	ldw	ra,20(sp)
 44131f0:	dd000417 	ldw	r20,16(sp)
 44131f4:	dcc00317 	ldw	r19,12(sp)
 44131f8:	dc800217 	ldw	r18,8(sp)
 44131fc:	dc400117 	ldw	r17,4(sp)
 4413200:	dc000017 	ldw	r16,0(sp)
 4413204:	dec00604 	addi	sp,sp,24
 4413208:	f800283a 	ret
 441320c:	000b883a 	mov	r5,zero
 4413210:	441272c0 	call	441272c <_Balloc>
 4413214:	00c00044 	movi	r3,1
 4413218:	10c00415 	stw	r3,16(r2)
 441321c:	10000515 	stw	zero,20(r2)
 4413220:	003ff206 	br	44131ec <__reset+0xfb40f1ec>
 4413224:	8023883a 	mov	r17,r16
 4413228:	0029883a 	mov	r20,zero
 441322c:	4021883a 	mov	r16,r8
 4413230:	003fad06 	br	44130e8 <__reset+0xfb40f0e8>
 4413234:	9005883a 	mov	r2,r18
 4413238:	94400504 	addi	r17,r18,20
 441323c:	9c000504 	addi	r16,r19,20
 4413240:	9825883a 	mov	r18,r19
 4413244:	05000044 	movi	r20,1
 4413248:	1027883a 	mov	r19,r2
 441324c:	003fa606 	br	44130e8 <__reset+0xfb40f0e8>

04413250 <__ulp>:
 4413250:	295ffc2c 	andhi	r5,r5,32752
 4413254:	00bf3034 	movhi	r2,64704
 4413258:	2887883a 	add	r3,r5,r2
 441325c:	00c0020e 	bge	zero,r3,4413268 <__ulp+0x18>
 4413260:	0005883a 	mov	r2,zero
 4413264:	f800283a 	ret
 4413268:	00c7c83a 	sub	r3,zero,r3
 441326c:	1807d53a 	srai	r3,r3,20
 4413270:	008004c4 	movi	r2,19
 4413274:	10c00b0e 	bge	r2,r3,44132a4 <__ulp+0x54>
 4413278:	18bffb04 	addi	r2,r3,-20
 441327c:	01000784 	movi	r4,30
 4413280:	0007883a 	mov	r3,zero
 4413284:	20800516 	blt	r4,r2,441329c <__ulp+0x4c>
 4413288:	010007c4 	movi	r4,31
 441328c:	2089c83a 	sub	r4,r4,r2
 4413290:	00800044 	movi	r2,1
 4413294:	1104983a 	sll	r2,r2,r4
 4413298:	f800283a 	ret
 441329c:	00800044 	movi	r2,1
 44132a0:	f800283a 	ret
 44132a4:	01400234 	movhi	r5,8
 44132a8:	28c7d83a 	sra	r3,r5,r3
 44132ac:	0005883a 	mov	r2,zero
 44132b0:	f800283a 	ret

044132b4 <__b2d>:
 44132b4:	defffa04 	addi	sp,sp,-24
 44132b8:	dc000015 	stw	r16,0(sp)
 44132bc:	24000417 	ldw	r16,16(r4)
 44132c0:	dc400115 	stw	r17,4(sp)
 44132c4:	24400504 	addi	r17,r4,20
 44132c8:	8421883a 	add	r16,r16,r16
 44132cc:	8421883a 	add	r16,r16,r16
 44132d0:	8c21883a 	add	r16,r17,r16
 44132d4:	dc800215 	stw	r18,8(sp)
 44132d8:	84bfff17 	ldw	r18,-4(r16)
 44132dc:	dd000415 	stw	r20,16(sp)
 44132e0:	dcc00315 	stw	r19,12(sp)
 44132e4:	9009883a 	mov	r4,r18
 44132e8:	2829883a 	mov	r20,r5
 44132ec:	dfc00515 	stw	ra,20(sp)
 44132f0:	4412a200 	call	4412a20 <__hi0bits>
 44132f4:	00c00804 	movi	r3,32
 44132f8:	1889c83a 	sub	r4,r3,r2
 44132fc:	a1000015 	stw	r4,0(r20)
 4413300:	01000284 	movi	r4,10
 4413304:	84ffff04 	addi	r19,r16,-4
 4413308:	20801216 	blt	r4,r2,4413354 <__b2d+0xa0>
 441330c:	018002c4 	movi	r6,11
 4413310:	308dc83a 	sub	r6,r6,r2
 4413314:	9186d83a 	srl	r3,r18,r6
 4413318:	18cffc34 	orhi	r3,r3,16368
 441331c:	8cc0212e 	bgeu	r17,r19,44133a4 <__b2d+0xf0>
 4413320:	813ffe17 	ldw	r4,-8(r16)
 4413324:	218cd83a 	srl	r6,r4,r6
 4413328:	10800544 	addi	r2,r2,21
 441332c:	9084983a 	sll	r2,r18,r2
 4413330:	1184b03a 	or	r2,r2,r6
 4413334:	dfc00517 	ldw	ra,20(sp)
 4413338:	dd000417 	ldw	r20,16(sp)
 441333c:	dcc00317 	ldw	r19,12(sp)
 4413340:	dc800217 	ldw	r18,8(sp)
 4413344:	dc400117 	ldw	r17,4(sp)
 4413348:	dc000017 	ldw	r16,0(sp)
 441334c:	dec00604 	addi	sp,sp,24
 4413350:	f800283a 	ret
 4413354:	8cc00f2e 	bgeu	r17,r19,4413394 <__b2d+0xe0>
 4413358:	117ffd44 	addi	r5,r2,-11
 441335c:	80bffe17 	ldw	r2,-8(r16)
 4413360:	28000e26 	beq	r5,zero,441339c <__b2d+0xe8>
 4413364:	1949c83a 	sub	r4,r3,r5
 4413368:	9164983a 	sll	r18,r18,r5
 441336c:	1106d83a 	srl	r3,r2,r4
 4413370:	81bffe04 	addi	r6,r16,-8
 4413374:	948ffc34 	orhi	r18,r18,16368
 4413378:	90c6b03a 	or	r3,r18,r3
 441337c:	89800e2e 	bgeu	r17,r6,44133b8 <__b2d+0x104>
 4413380:	81bffd17 	ldw	r6,-12(r16)
 4413384:	1144983a 	sll	r2,r2,r5
 4413388:	310ad83a 	srl	r5,r6,r4
 441338c:	2884b03a 	or	r2,r5,r2
 4413390:	003fe806 	br	4413334 <__reset+0xfb40f334>
 4413394:	10bffd44 	addi	r2,r2,-11
 4413398:	1000041e 	bne	r2,zero,44133ac <__b2d+0xf8>
 441339c:	90cffc34 	orhi	r3,r18,16368
 44133a0:	003fe406 	br	4413334 <__reset+0xfb40f334>
 44133a4:	000d883a 	mov	r6,zero
 44133a8:	003fdf06 	br	4413328 <__reset+0xfb40f328>
 44133ac:	90a4983a 	sll	r18,r18,r2
 44133b0:	0005883a 	mov	r2,zero
 44133b4:	003ff906 	br	441339c <__reset+0xfb40f39c>
 44133b8:	1144983a 	sll	r2,r2,r5
 44133bc:	003fdd06 	br	4413334 <__reset+0xfb40f334>

044133c0 <__d2b>:
 44133c0:	defff804 	addi	sp,sp,-32
 44133c4:	dc000215 	stw	r16,8(sp)
 44133c8:	3021883a 	mov	r16,r6
 44133cc:	dc400315 	stw	r17,12(sp)
 44133d0:	8022907a 	slli	r17,r16,1
 44133d4:	dd000615 	stw	r20,24(sp)
 44133d8:	2829883a 	mov	r20,r5
 44133dc:	01400044 	movi	r5,1
 44133e0:	dcc00515 	stw	r19,20(sp)
 44133e4:	dc800415 	stw	r18,16(sp)
 44133e8:	dfc00715 	stw	ra,28(sp)
 44133ec:	3825883a 	mov	r18,r7
 44133f0:	8822d57a 	srli	r17,r17,21
 44133f4:	441272c0 	call	441272c <_Balloc>
 44133f8:	1027883a 	mov	r19,r2
 44133fc:	00800434 	movhi	r2,16
 4413400:	10bfffc4 	addi	r2,r2,-1
 4413404:	808c703a 	and	r6,r16,r2
 4413408:	88000126 	beq	r17,zero,4413410 <__d2b+0x50>
 441340c:	31800434 	orhi	r6,r6,16
 4413410:	d9800015 	stw	r6,0(sp)
 4413414:	a0002426 	beq	r20,zero,44134a8 <__d2b+0xe8>
 4413418:	d9000104 	addi	r4,sp,4
 441341c:	dd000115 	stw	r20,4(sp)
 4413420:	4412a880 	call	4412a88 <__lo0bits>
 4413424:	d8c00017 	ldw	r3,0(sp)
 4413428:	10002f1e 	bne	r2,zero,44134e8 <__d2b+0x128>
 441342c:	d9000117 	ldw	r4,4(sp)
 4413430:	99000515 	stw	r4,20(r19)
 4413434:	1821003a 	cmpeq	r16,r3,zero
 4413438:	01000084 	movi	r4,2
 441343c:	2421c83a 	sub	r16,r4,r16
 4413440:	98c00615 	stw	r3,24(r19)
 4413444:	9c000415 	stw	r16,16(r19)
 4413448:	88001f1e 	bne	r17,zero,44134c8 <__d2b+0x108>
 441344c:	10bef384 	addi	r2,r2,-1074
 4413450:	90800015 	stw	r2,0(r18)
 4413454:	00900034 	movhi	r2,16384
 4413458:	10bfffc4 	addi	r2,r2,-1
 441345c:	8085883a 	add	r2,r16,r2
 4413460:	1085883a 	add	r2,r2,r2
 4413464:	1085883a 	add	r2,r2,r2
 4413468:	9885883a 	add	r2,r19,r2
 441346c:	11000517 	ldw	r4,20(r2)
 4413470:	8020917a 	slli	r16,r16,5
 4413474:	4412a200 	call	4412a20 <__hi0bits>
 4413478:	d8c00817 	ldw	r3,32(sp)
 441347c:	8085c83a 	sub	r2,r16,r2
 4413480:	18800015 	stw	r2,0(r3)
 4413484:	9805883a 	mov	r2,r19
 4413488:	dfc00717 	ldw	ra,28(sp)
 441348c:	dd000617 	ldw	r20,24(sp)
 4413490:	dcc00517 	ldw	r19,20(sp)
 4413494:	dc800417 	ldw	r18,16(sp)
 4413498:	dc400317 	ldw	r17,12(sp)
 441349c:	dc000217 	ldw	r16,8(sp)
 44134a0:	dec00804 	addi	sp,sp,32
 44134a4:	f800283a 	ret
 44134a8:	d809883a 	mov	r4,sp
 44134ac:	4412a880 	call	4412a88 <__lo0bits>
 44134b0:	d8c00017 	ldw	r3,0(sp)
 44134b4:	04000044 	movi	r16,1
 44134b8:	9c000415 	stw	r16,16(r19)
 44134bc:	98c00515 	stw	r3,20(r19)
 44134c0:	10800804 	addi	r2,r2,32
 44134c4:	883fe126 	beq	r17,zero,441344c <__reset+0xfb40f44c>
 44134c8:	00c00d44 	movi	r3,53
 44134cc:	8c7ef344 	addi	r17,r17,-1075
 44134d0:	88a3883a 	add	r17,r17,r2
 44134d4:	1885c83a 	sub	r2,r3,r2
 44134d8:	d8c00817 	ldw	r3,32(sp)
 44134dc:	94400015 	stw	r17,0(r18)
 44134e0:	18800015 	stw	r2,0(r3)
 44134e4:	003fe706 	br	4413484 <__reset+0xfb40f484>
 44134e8:	01000804 	movi	r4,32
 44134ec:	2089c83a 	sub	r4,r4,r2
 44134f0:	1908983a 	sll	r4,r3,r4
 44134f4:	d9400117 	ldw	r5,4(sp)
 44134f8:	1886d83a 	srl	r3,r3,r2
 44134fc:	2148b03a 	or	r4,r4,r5
 4413500:	99000515 	stw	r4,20(r19)
 4413504:	d8c00015 	stw	r3,0(sp)
 4413508:	003fca06 	br	4413434 <__reset+0xfb40f434>

0441350c <__ratio>:
 441350c:	defff904 	addi	sp,sp,-28
 4413510:	dc400315 	stw	r17,12(sp)
 4413514:	2823883a 	mov	r17,r5
 4413518:	d9400104 	addi	r5,sp,4
 441351c:	dfc00615 	stw	ra,24(sp)
 4413520:	dcc00515 	stw	r19,20(sp)
 4413524:	dc800415 	stw	r18,16(sp)
 4413528:	2027883a 	mov	r19,r4
 441352c:	dc000215 	stw	r16,8(sp)
 4413530:	44132b40 	call	44132b4 <__b2d>
 4413534:	d80b883a 	mov	r5,sp
 4413538:	8809883a 	mov	r4,r17
 441353c:	1025883a 	mov	r18,r2
 4413540:	1821883a 	mov	r16,r3
 4413544:	44132b40 	call	44132b4 <__b2d>
 4413548:	8a000417 	ldw	r8,16(r17)
 441354c:	99000417 	ldw	r4,16(r19)
 4413550:	d9400117 	ldw	r5,4(sp)
 4413554:	2209c83a 	sub	r4,r4,r8
 4413558:	2010917a 	slli	r8,r4,5
 441355c:	d9000017 	ldw	r4,0(sp)
 4413560:	2909c83a 	sub	r4,r5,r4
 4413564:	4109883a 	add	r4,r8,r4
 4413568:	01000e0e 	bge	zero,r4,44135a4 <__ratio+0x98>
 441356c:	2008953a 	slli	r4,r4,20
 4413570:	2421883a 	add	r16,r4,r16
 4413574:	100d883a 	mov	r6,r2
 4413578:	180f883a 	mov	r7,r3
 441357c:	9009883a 	mov	r4,r18
 4413580:	800b883a 	mov	r5,r16
 4413584:	44088080 	call	4408808 <__divdf3>
 4413588:	dfc00617 	ldw	ra,24(sp)
 441358c:	dcc00517 	ldw	r19,20(sp)
 4413590:	dc800417 	ldw	r18,16(sp)
 4413594:	dc400317 	ldw	r17,12(sp)
 4413598:	dc000217 	ldw	r16,8(sp)
 441359c:	dec00704 	addi	sp,sp,28
 44135a0:	f800283a 	ret
 44135a4:	2008953a 	slli	r4,r4,20
 44135a8:	1907c83a 	sub	r3,r3,r4
 44135ac:	003ff106 	br	4413574 <__reset+0xfb40f574>

044135b0 <_mprec_log10>:
 44135b0:	defffe04 	addi	sp,sp,-8
 44135b4:	dc000015 	stw	r16,0(sp)
 44135b8:	dfc00115 	stw	ra,4(sp)
 44135bc:	008005c4 	movi	r2,23
 44135c0:	2021883a 	mov	r16,r4
 44135c4:	11000d0e 	bge	r2,r4,44135fc <_mprec_log10+0x4c>
 44135c8:	0005883a 	mov	r2,zero
 44135cc:	00cffc34 	movhi	r3,16368
 44135d0:	843fffc4 	addi	r16,r16,-1
 44135d4:	000d883a 	mov	r6,zero
 44135d8:	01d00934 	movhi	r7,16420
 44135dc:	1009883a 	mov	r4,r2
 44135e0:	180b883a 	mov	r5,r3
 44135e4:	44091e40 	call	44091e4 <__muldf3>
 44135e8:	803ff91e 	bne	r16,zero,44135d0 <__reset+0xfb40f5d0>
 44135ec:	dfc00117 	ldw	ra,4(sp)
 44135f0:	dc000017 	ldw	r16,0(sp)
 44135f4:	dec00204 	addi	sp,sp,8
 44135f8:	f800283a 	ret
 44135fc:	202090fa 	slli	r16,r4,3
 4413600:	008110f4 	movhi	r2,1091
 4413604:	10936504 	addi	r2,r2,19860
 4413608:	1421883a 	add	r16,r2,r16
 441360c:	80800017 	ldw	r2,0(r16)
 4413610:	80c00117 	ldw	r3,4(r16)
 4413614:	dfc00117 	ldw	ra,4(sp)
 4413618:	dc000017 	ldw	r16,0(sp)
 441361c:	dec00204 	addi	sp,sp,8
 4413620:	f800283a 	ret

04413624 <__copybits>:
 4413624:	297fffc4 	addi	r5,r5,-1
 4413628:	280fd17a 	srai	r7,r5,5
 441362c:	30c00417 	ldw	r3,16(r6)
 4413630:	30800504 	addi	r2,r6,20
 4413634:	39c00044 	addi	r7,r7,1
 4413638:	18c7883a 	add	r3,r3,r3
 441363c:	39cf883a 	add	r7,r7,r7
 4413640:	18c7883a 	add	r3,r3,r3
 4413644:	39cf883a 	add	r7,r7,r7
 4413648:	10c7883a 	add	r3,r2,r3
 441364c:	21cf883a 	add	r7,r4,r7
 4413650:	10c00d2e 	bgeu	r2,r3,4413688 <__copybits+0x64>
 4413654:	200b883a 	mov	r5,r4
 4413658:	12000017 	ldw	r8,0(r2)
 441365c:	29400104 	addi	r5,r5,4
 4413660:	10800104 	addi	r2,r2,4
 4413664:	2a3fff15 	stw	r8,-4(r5)
 4413668:	10fffb36 	bltu	r2,r3,4413658 <__reset+0xfb40f658>
 441366c:	1985c83a 	sub	r2,r3,r6
 4413670:	10bffac4 	addi	r2,r2,-21
 4413674:	1004d0ba 	srli	r2,r2,2
 4413678:	10800044 	addi	r2,r2,1
 441367c:	1085883a 	add	r2,r2,r2
 4413680:	1085883a 	add	r2,r2,r2
 4413684:	2089883a 	add	r4,r4,r2
 4413688:	21c0032e 	bgeu	r4,r7,4413698 <__copybits+0x74>
 441368c:	20000015 	stw	zero,0(r4)
 4413690:	21000104 	addi	r4,r4,4
 4413694:	21fffd36 	bltu	r4,r7,441368c <__reset+0xfb40f68c>
 4413698:	f800283a 	ret

0441369c <__any_on>:
 441369c:	20c00417 	ldw	r3,16(r4)
 44136a0:	2805d17a 	srai	r2,r5,5
 44136a4:	21000504 	addi	r4,r4,20
 44136a8:	18800d0e 	bge	r3,r2,44136e0 <__any_on+0x44>
 44136ac:	18c7883a 	add	r3,r3,r3
 44136b0:	18c7883a 	add	r3,r3,r3
 44136b4:	20c7883a 	add	r3,r4,r3
 44136b8:	20c0192e 	bgeu	r4,r3,4413720 <__any_on+0x84>
 44136bc:	18bfff17 	ldw	r2,-4(r3)
 44136c0:	18ffff04 	addi	r3,r3,-4
 44136c4:	1000041e 	bne	r2,zero,44136d8 <__any_on+0x3c>
 44136c8:	20c0142e 	bgeu	r4,r3,441371c <__any_on+0x80>
 44136cc:	18ffff04 	addi	r3,r3,-4
 44136d0:	19400017 	ldw	r5,0(r3)
 44136d4:	283ffc26 	beq	r5,zero,44136c8 <__reset+0xfb40f6c8>
 44136d8:	00800044 	movi	r2,1
 44136dc:	f800283a 	ret
 44136e0:	10c00a0e 	bge	r2,r3,441370c <__any_on+0x70>
 44136e4:	1085883a 	add	r2,r2,r2
 44136e8:	1085883a 	add	r2,r2,r2
 44136ec:	294007cc 	andi	r5,r5,31
 44136f0:	2087883a 	add	r3,r4,r2
 44136f4:	283ff026 	beq	r5,zero,44136b8 <__reset+0xfb40f6b8>
 44136f8:	19800017 	ldw	r6,0(r3)
 44136fc:	3144d83a 	srl	r2,r6,r5
 4413700:	114a983a 	sll	r5,r2,r5
 4413704:	317ff41e 	bne	r6,r5,44136d8 <__reset+0xfb40f6d8>
 4413708:	003feb06 	br	44136b8 <__reset+0xfb40f6b8>
 441370c:	1085883a 	add	r2,r2,r2
 4413710:	1085883a 	add	r2,r2,r2
 4413714:	2087883a 	add	r3,r4,r2
 4413718:	003fe706 	br	44136b8 <__reset+0xfb40f6b8>
 441371c:	f800283a 	ret
 4413720:	0005883a 	mov	r2,zero
 4413724:	f800283a 	ret

04413728 <_realloc_r>:
 4413728:	defff604 	addi	sp,sp,-40
 441372c:	dc400115 	stw	r17,4(sp)
 4413730:	dfc00915 	stw	ra,36(sp)
 4413734:	df000815 	stw	fp,32(sp)
 4413738:	ddc00715 	stw	r23,28(sp)
 441373c:	dd800615 	stw	r22,24(sp)
 4413740:	dd400515 	stw	r21,20(sp)
 4413744:	dd000415 	stw	r20,16(sp)
 4413748:	dcc00315 	stw	r19,12(sp)
 441374c:	dc800215 	stw	r18,8(sp)
 4413750:	dc000015 	stw	r16,0(sp)
 4413754:	3023883a 	mov	r17,r6
 4413758:	2800b626 	beq	r5,zero,4413a34 <_realloc_r+0x30c>
 441375c:	2829883a 	mov	r20,r5
 4413760:	2025883a 	mov	r18,r4
 4413764:	44188c40 	call	44188c4 <__malloc_lock>
 4413768:	a0ffff17 	ldw	r3,-4(r20)
 441376c:	043fff04 	movi	r16,-4
 4413770:	888002c4 	addi	r2,r17,11
 4413774:	01000584 	movi	r4,22
 4413778:	a57ffe04 	addi	r21,r20,-8
 441377c:	1c20703a 	and	r16,r3,r16
 4413780:	2080332e 	bgeu	r4,r2,4413850 <_realloc_r+0x128>
 4413784:	05bffe04 	movi	r22,-8
 4413788:	15ac703a 	and	r22,r2,r22
 441378c:	b005883a 	mov	r2,r22
 4413790:	b0005716 	blt	r22,zero,44138f0 <_realloc_r+0x1c8>
 4413794:	b4405636 	bltu	r22,r17,44138f0 <_realloc_r+0x1c8>
 4413798:	8080300e 	bge	r16,r2,441385c <_realloc_r+0x134>
 441379c:	070110f4 	movhi	fp,1091
 44137a0:	e71baa04 	addi	fp,fp,28328
 44137a4:	e2000217 	ldw	r8,8(fp)
 44137a8:	ac09883a 	add	r4,r21,r16
 44137ac:	22006126 	beq	r4,r8,4413934 <_realloc_r+0x20c>
 44137b0:	22400117 	ldw	r9,4(r4)
 44137b4:	01ffff84 	movi	r7,-2
 44137b8:	49ce703a 	and	r7,r9,r7
 44137bc:	21cf883a 	add	r7,r4,r7
 44137c0:	39800117 	ldw	r6,4(r7)
 44137c4:	3180004c 	andi	r6,r6,1
 44137c8:	30003e26 	beq	r6,zero,44138c4 <_realloc_r+0x19c>
 44137cc:	18c0004c 	andi	r3,r3,1
 44137d0:	18008126 	beq	r3,zero,44139d8 <_realloc_r+0x2b0>
 44137d4:	880b883a 	mov	r5,r17
 44137d8:	9009883a 	mov	r4,r18
 44137dc:	440a3f00 	call	440a3f0 <_malloc_r>
 44137e0:	1023883a 	mov	r17,r2
 44137e4:	10011e26 	beq	r2,zero,4413c60 <_realloc_r+0x538>
 44137e8:	a0ffff17 	ldw	r3,-4(r20)
 44137ec:	113ffe04 	addi	r4,r2,-8
 44137f0:	00bfff84 	movi	r2,-2
 44137f4:	1884703a 	and	r2,r3,r2
 44137f8:	a885883a 	add	r2,r21,r2
 44137fc:	2080ee26 	beq	r4,r2,4413bb8 <_realloc_r+0x490>
 4413800:	81bfff04 	addi	r6,r16,-4
 4413804:	00800904 	movi	r2,36
 4413808:	1180b836 	bltu	r2,r6,4413aec <_realloc_r+0x3c4>
 441380c:	00c004c4 	movi	r3,19
 4413810:	19809536 	bltu	r3,r6,4413a68 <_realloc_r+0x340>
 4413814:	8805883a 	mov	r2,r17
 4413818:	a007883a 	mov	r3,r20
 441381c:	19000017 	ldw	r4,0(r3)
 4413820:	11000015 	stw	r4,0(r2)
 4413824:	19000117 	ldw	r4,4(r3)
 4413828:	11000115 	stw	r4,4(r2)
 441382c:	18c00217 	ldw	r3,8(r3)
 4413830:	10c00215 	stw	r3,8(r2)
 4413834:	a00b883a 	mov	r5,r20
 4413838:	9009883a 	mov	r4,r18
 441383c:	44119000 	call	4411900 <_free_r>
 4413840:	9009883a 	mov	r4,r18
 4413844:	44188e80 	call	44188e8 <__malloc_unlock>
 4413848:	8805883a 	mov	r2,r17
 441384c:	00001106 	br	4413894 <_realloc_r+0x16c>
 4413850:	00800404 	movi	r2,16
 4413854:	102d883a 	mov	r22,r2
 4413858:	003fce06 	br	4413794 <__reset+0xfb40f794>
 441385c:	a023883a 	mov	r17,r20
 4413860:	858fc83a 	sub	r7,r16,r22
 4413864:	008003c4 	movi	r2,15
 4413868:	18c0004c 	andi	r3,r3,1
 441386c:	11c02436 	bltu	r2,r7,4413900 <_realloc_r+0x1d8>
 4413870:	1c06b03a 	or	r3,r3,r16
 4413874:	a8c00115 	stw	r3,4(r21)
 4413878:	ac21883a 	add	r16,r21,r16
 441387c:	80800117 	ldw	r2,4(r16)
 4413880:	10800054 	ori	r2,r2,1
 4413884:	80800115 	stw	r2,4(r16)
 4413888:	9009883a 	mov	r4,r18
 441388c:	44188e80 	call	44188e8 <__malloc_unlock>
 4413890:	8805883a 	mov	r2,r17
 4413894:	dfc00917 	ldw	ra,36(sp)
 4413898:	df000817 	ldw	fp,32(sp)
 441389c:	ddc00717 	ldw	r23,28(sp)
 44138a0:	dd800617 	ldw	r22,24(sp)
 44138a4:	dd400517 	ldw	r21,20(sp)
 44138a8:	dd000417 	ldw	r20,16(sp)
 44138ac:	dcc00317 	ldw	r19,12(sp)
 44138b0:	dc800217 	ldw	r18,8(sp)
 44138b4:	dc400117 	ldw	r17,4(sp)
 44138b8:	dc000017 	ldw	r16,0(sp)
 44138bc:	dec00a04 	addi	sp,sp,40
 44138c0:	f800283a 	ret
 44138c4:	017fff04 	movi	r5,-4
 44138c8:	494a703a 	and	r5,r9,r5
 44138cc:	814d883a 	add	r6,r16,r5
 44138d0:	30801e16 	blt	r6,r2,441394c <_realloc_r+0x224>
 44138d4:	20800317 	ldw	r2,12(r4)
 44138d8:	21000217 	ldw	r4,8(r4)
 44138dc:	a023883a 	mov	r17,r20
 44138e0:	3021883a 	mov	r16,r6
 44138e4:	20800315 	stw	r2,12(r4)
 44138e8:	11000215 	stw	r4,8(r2)
 44138ec:	003fdc06 	br	4413860 <__reset+0xfb40f860>
 44138f0:	00800304 	movi	r2,12
 44138f4:	90800015 	stw	r2,0(r18)
 44138f8:	0005883a 	mov	r2,zero
 44138fc:	003fe506 	br	4413894 <__reset+0xfb40f894>
 4413900:	1d86b03a 	or	r3,r3,r22
 4413904:	a8c00115 	stw	r3,4(r21)
 4413908:	ad8b883a 	add	r5,r21,r22
 441390c:	38c00054 	ori	r3,r7,1
 4413910:	28c00115 	stw	r3,4(r5)
 4413914:	29cf883a 	add	r7,r5,r7
 4413918:	38c00117 	ldw	r3,4(r7)
 441391c:	29400204 	addi	r5,r5,8
 4413920:	9009883a 	mov	r4,r18
 4413924:	18800054 	ori	r2,r3,1
 4413928:	38800115 	stw	r2,4(r7)
 441392c:	44119000 	call	4411900 <_free_r>
 4413930:	003fd506 	br	4413888 <__reset+0xfb40f888>
 4413934:	21c00117 	ldw	r7,4(r4)
 4413938:	017fff04 	movi	r5,-4
 441393c:	b1800404 	addi	r6,r22,16
 4413940:	394a703a 	and	r5,r7,r5
 4413944:	814f883a 	add	r7,r16,r5
 4413948:	39805b0e 	bge	r7,r6,4413ab8 <_realloc_r+0x390>
 441394c:	18c0004c 	andi	r3,r3,1
 4413950:	183fa01e 	bne	r3,zero,44137d4 <__reset+0xfb40f7d4>
 4413954:	a4fffe17 	ldw	r19,-8(r20)
 4413958:	00ffff04 	movi	r3,-4
 441395c:	ace7c83a 	sub	r19,r21,r19
 4413960:	99800117 	ldw	r6,4(r19)
 4413964:	30c6703a 	and	r3,r6,r3
 4413968:	20002026 	beq	r4,zero,44139ec <_realloc_r+0x2c4>
 441396c:	80ef883a 	add	r23,r16,r3
 4413970:	b96f883a 	add	r23,r23,r5
 4413974:	22006126 	beq	r4,r8,4413afc <_realloc_r+0x3d4>
 4413978:	b8801c16 	blt	r23,r2,44139ec <_realloc_r+0x2c4>
 441397c:	20800317 	ldw	r2,12(r4)
 4413980:	20c00217 	ldw	r3,8(r4)
 4413984:	81bfff04 	addi	r6,r16,-4
 4413988:	01000904 	movi	r4,36
 441398c:	18800315 	stw	r2,12(r3)
 4413990:	10c00215 	stw	r3,8(r2)
 4413994:	98c00217 	ldw	r3,8(r19)
 4413998:	98800317 	ldw	r2,12(r19)
 441399c:	9c400204 	addi	r17,r19,8
 44139a0:	18800315 	stw	r2,12(r3)
 44139a4:	10c00215 	stw	r3,8(r2)
 44139a8:	21801b36 	bltu	r4,r6,4413a18 <_realloc_r+0x2f0>
 44139ac:	008004c4 	movi	r2,19
 44139b0:	1180362e 	bgeu	r2,r6,4413a8c <_realloc_r+0x364>
 44139b4:	a0800017 	ldw	r2,0(r20)
 44139b8:	98800215 	stw	r2,8(r19)
 44139bc:	a0800117 	ldw	r2,4(r20)
 44139c0:	98800315 	stw	r2,12(r19)
 44139c4:	008006c4 	movi	r2,27
 44139c8:	11808136 	bltu	r2,r6,4413bd0 <_realloc_r+0x4a8>
 44139cc:	98800404 	addi	r2,r19,16
 44139d0:	a5000204 	addi	r20,r20,8
 44139d4:	00002e06 	br	4413a90 <_realloc_r+0x368>
 44139d8:	a4fffe17 	ldw	r19,-8(r20)
 44139dc:	00ffff04 	movi	r3,-4
 44139e0:	ace7c83a 	sub	r19,r21,r19
 44139e4:	99000117 	ldw	r4,4(r19)
 44139e8:	20c6703a 	and	r3,r4,r3
 44139ec:	983f7926 	beq	r19,zero,44137d4 <__reset+0xfb40f7d4>
 44139f0:	80ef883a 	add	r23,r16,r3
 44139f4:	b8bf7716 	blt	r23,r2,44137d4 <__reset+0xfb40f7d4>
 44139f8:	98800317 	ldw	r2,12(r19)
 44139fc:	98c00217 	ldw	r3,8(r19)
 4413a00:	81bfff04 	addi	r6,r16,-4
 4413a04:	01000904 	movi	r4,36
 4413a08:	18800315 	stw	r2,12(r3)
 4413a0c:	10c00215 	stw	r3,8(r2)
 4413a10:	9c400204 	addi	r17,r19,8
 4413a14:	21bfe52e 	bgeu	r4,r6,44139ac <__reset+0xfb40f9ac>
 4413a18:	a00b883a 	mov	r5,r20
 4413a1c:	8809883a 	mov	r4,r17
 4413a20:	44125d00 	call	44125d0 <memmove>
 4413a24:	98c00117 	ldw	r3,4(r19)
 4413a28:	b821883a 	mov	r16,r23
 4413a2c:	982b883a 	mov	r21,r19
 4413a30:	003f8b06 	br	4413860 <__reset+0xfb40f860>
 4413a34:	300b883a 	mov	r5,r6
 4413a38:	dfc00917 	ldw	ra,36(sp)
 4413a3c:	df000817 	ldw	fp,32(sp)
 4413a40:	ddc00717 	ldw	r23,28(sp)
 4413a44:	dd800617 	ldw	r22,24(sp)
 4413a48:	dd400517 	ldw	r21,20(sp)
 4413a4c:	dd000417 	ldw	r20,16(sp)
 4413a50:	dcc00317 	ldw	r19,12(sp)
 4413a54:	dc800217 	ldw	r18,8(sp)
 4413a58:	dc400117 	ldw	r17,4(sp)
 4413a5c:	dc000017 	ldw	r16,0(sp)
 4413a60:	dec00a04 	addi	sp,sp,40
 4413a64:	440a3f01 	jmpi	440a3f0 <_malloc_r>
 4413a68:	a0c00017 	ldw	r3,0(r20)
 4413a6c:	88c00015 	stw	r3,0(r17)
 4413a70:	a0c00117 	ldw	r3,4(r20)
 4413a74:	88c00115 	stw	r3,4(r17)
 4413a78:	00c006c4 	movi	r3,27
 4413a7c:	19804636 	bltu	r3,r6,4413b98 <_realloc_r+0x470>
 4413a80:	88800204 	addi	r2,r17,8
 4413a84:	a0c00204 	addi	r3,r20,8
 4413a88:	003f6406 	br	441381c <__reset+0xfb40f81c>
 4413a8c:	8805883a 	mov	r2,r17
 4413a90:	a0c00017 	ldw	r3,0(r20)
 4413a94:	b821883a 	mov	r16,r23
 4413a98:	982b883a 	mov	r21,r19
 4413a9c:	10c00015 	stw	r3,0(r2)
 4413aa0:	a0c00117 	ldw	r3,4(r20)
 4413aa4:	10c00115 	stw	r3,4(r2)
 4413aa8:	a0c00217 	ldw	r3,8(r20)
 4413aac:	10c00215 	stw	r3,8(r2)
 4413ab0:	98c00117 	ldw	r3,4(r19)
 4413ab4:	003f6a06 	br	4413860 <__reset+0xfb40f860>
 4413ab8:	adab883a 	add	r21,r21,r22
 4413abc:	3d85c83a 	sub	r2,r7,r22
 4413ac0:	e5400215 	stw	r21,8(fp)
 4413ac4:	10800054 	ori	r2,r2,1
 4413ac8:	a8800115 	stw	r2,4(r21)
 4413acc:	a0bfff17 	ldw	r2,-4(r20)
 4413ad0:	9009883a 	mov	r4,r18
 4413ad4:	1080004c 	andi	r2,r2,1
 4413ad8:	1584b03a 	or	r2,r2,r22
 4413adc:	a0bfff15 	stw	r2,-4(r20)
 4413ae0:	44188e80 	call	44188e8 <__malloc_unlock>
 4413ae4:	a005883a 	mov	r2,r20
 4413ae8:	003f6a06 	br	4413894 <__reset+0xfb40f894>
 4413aec:	a00b883a 	mov	r5,r20
 4413af0:	8809883a 	mov	r4,r17
 4413af4:	44125d00 	call	44125d0 <memmove>
 4413af8:	003f4e06 	br	4413834 <__reset+0xfb40f834>
 4413afc:	b1000404 	addi	r4,r22,16
 4413b00:	b93fba16 	blt	r23,r4,44139ec <__reset+0xfb40f9ec>
 4413b04:	98800317 	ldw	r2,12(r19)
 4413b08:	98c00217 	ldw	r3,8(r19)
 4413b0c:	81bfff04 	addi	r6,r16,-4
 4413b10:	01000904 	movi	r4,36
 4413b14:	18800315 	stw	r2,12(r3)
 4413b18:	10c00215 	stw	r3,8(r2)
 4413b1c:	9c400204 	addi	r17,r19,8
 4413b20:	21804336 	bltu	r4,r6,4413c30 <_realloc_r+0x508>
 4413b24:	008004c4 	movi	r2,19
 4413b28:	11803f2e 	bgeu	r2,r6,4413c28 <_realloc_r+0x500>
 4413b2c:	a0800017 	ldw	r2,0(r20)
 4413b30:	98800215 	stw	r2,8(r19)
 4413b34:	a0800117 	ldw	r2,4(r20)
 4413b38:	98800315 	stw	r2,12(r19)
 4413b3c:	008006c4 	movi	r2,27
 4413b40:	11803f36 	bltu	r2,r6,4413c40 <_realloc_r+0x518>
 4413b44:	98800404 	addi	r2,r19,16
 4413b48:	a5000204 	addi	r20,r20,8
 4413b4c:	a0c00017 	ldw	r3,0(r20)
 4413b50:	10c00015 	stw	r3,0(r2)
 4413b54:	a0c00117 	ldw	r3,4(r20)
 4413b58:	10c00115 	stw	r3,4(r2)
 4413b5c:	a0c00217 	ldw	r3,8(r20)
 4413b60:	10c00215 	stw	r3,8(r2)
 4413b64:	9d87883a 	add	r3,r19,r22
 4413b68:	bd85c83a 	sub	r2,r23,r22
 4413b6c:	e0c00215 	stw	r3,8(fp)
 4413b70:	10800054 	ori	r2,r2,1
 4413b74:	18800115 	stw	r2,4(r3)
 4413b78:	98800117 	ldw	r2,4(r19)
 4413b7c:	9009883a 	mov	r4,r18
 4413b80:	1080004c 	andi	r2,r2,1
 4413b84:	1584b03a 	or	r2,r2,r22
 4413b88:	98800115 	stw	r2,4(r19)
 4413b8c:	44188e80 	call	44188e8 <__malloc_unlock>
 4413b90:	8805883a 	mov	r2,r17
 4413b94:	003f3f06 	br	4413894 <__reset+0xfb40f894>
 4413b98:	a0c00217 	ldw	r3,8(r20)
 4413b9c:	88c00215 	stw	r3,8(r17)
 4413ba0:	a0c00317 	ldw	r3,12(r20)
 4413ba4:	88c00315 	stw	r3,12(r17)
 4413ba8:	30801126 	beq	r6,r2,4413bf0 <_realloc_r+0x4c8>
 4413bac:	88800404 	addi	r2,r17,16
 4413bb0:	a0c00404 	addi	r3,r20,16
 4413bb4:	003f1906 	br	441381c <__reset+0xfb40f81c>
 4413bb8:	893fff17 	ldw	r4,-4(r17)
 4413bbc:	00bfff04 	movi	r2,-4
 4413bc0:	a023883a 	mov	r17,r20
 4413bc4:	2084703a 	and	r2,r4,r2
 4413bc8:	80a1883a 	add	r16,r16,r2
 4413bcc:	003f2406 	br	4413860 <__reset+0xfb40f860>
 4413bd0:	a0800217 	ldw	r2,8(r20)
 4413bd4:	98800415 	stw	r2,16(r19)
 4413bd8:	a0800317 	ldw	r2,12(r20)
 4413bdc:	98800515 	stw	r2,20(r19)
 4413be0:	31000a26 	beq	r6,r4,4413c0c <_realloc_r+0x4e4>
 4413be4:	98800604 	addi	r2,r19,24
 4413be8:	a5000404 	addi	r20,r20,16
 4413bec:	003fa806 	br	4413a90 <__reset+0xfb40fa90>
 4413bf0:	a1000417 	ldw	r4,16(r20)
 4413bf4:	88800604 	addi	r2,r17,24
 4413bf8:	a0c00604 	addi	r3,r20,24
 4413bfc:	89000415 	stw	r4,16(r17)
 4413c00:	a1000517 	ldw	r4,20(r20)
 4413c04:	89000515 	stw	r4,20(r17)
 4413c08:	003f0406 	br	441381c <__reset+0xfb40f81c>
 4413c0c:	a0c00417 	ldw	r3,16(r20)
 4413c10:	a5000604 	addi	r20,r20,24
 4413c14:	98800804 	addi	r2,r19,32
 4413c18:	98c00615 	stw	r3,24(r19)
 4413c1c:	a0ffff17 	ldw	r3,-4(r20)
 4413c20:	98c00715 	stw	r3,28(r19)
 4413c24:	003f9a06 	br	4413a90 <__reset+0xfb40fa90>
 4413c28:	8805883a 	mov	r2,r17
 4413c2c:	003fc706 	br	4413b4c <__reset+0xfb40fb4c>
 4413c30:	a00b883a 	mov	r5,r20
 4413c34:	8809883a 	mov	r4,r17
 4413c38:	44125d00 	call	44125d0 <memmove>
 4413c3c:	003fc906 	br	4413b64 <__reset+0xfb40fb64>
 4413c40:	a0800217 	ldw	r2,8(r20)
 4413c44:	98800415 	stw	r2,16(r19)
 4413c48:	a0800317 	ldw	r2,12(r20)
 4413c4c:	98800515 	stw	r2,20(r19)
 4413c50:	31000726 	beq	r6,r4,4413c70 <_realloc_r+0x548>
 4413c54:	98800604 	addi	r2,r19,24
 4413c58:	a5000404 	addi	r20,r20,16
 4413c5c:	003fbb06 	br	4413b4c <__reset+0xfb40fb4c>
 4413c60:	9009883a 	mov	r4,r18
 4413c64:	44188e80 	call	44188e8 <__malloc_unlock>
 4413c68:	0005883a 	mov	r2,zero
 4413c6c:	003f0906 	br	4413894 <__reset+0xfb40f894>
 4413c70:	a0c00417 	ldw	r3,16(r20)
 4413c74:	a5000604 	addi	r20,r20,24
 4413c78:	98800804 	addi	r2,r19,32
 4413c7c:	98c00615 	stw	r3,24(r19)
 4413c80:	a0ffff17 	ldw	r3,-4(r20)
 4413c84:	98c00715 	stw	r3,28(r19)
 4413c88:	003fb006 	br	4413b4c <__reset+0xfb40fb4c>

04413c8c <__sread>:
 4413c8c:	defffe04 	addi	sp,sp,-8
 4413c90:	dc000015 	stw	r16,0(sp)
 4413c94:	2821883a 	mov	r16,r5
 4413c98:	2940038f 	ldh	r5,14(r5)
 4413c9c:	dfc00115 	stw	ra,4(sp)
 4413ca0:	4416e8c0 	call	4416e8c <_read_r>
 4413ca4:	10000716 	blt	r2,zero,4413cc4 <__sread+0x38>
 4413ca8:	80c01417 	ldw	r3,80(r16)
 4413cac:	1887883a 	add	r3,r3,r2
 4413cb0:	80c01415 	stw	r3,80(r16)
 4413cb4:	dfc00117 	ldw	ra,4(sp)
 4413cb8:	dc000017 	ldw	r16,0(sp)
 4413cbc:	dec00204 	addi	sp,sp,8
 4413cc0:	f800283a 	ret
 4413cc4:	80c0030b 	ldhu	r3,12(r16)
 4413cc8:	18fbffcc 	andi	r3,r3,61439
 4413ccc:	80c0030d 	sth	r3,12(r16)
 4413cd0:	dfc00117 	ldw	ra,4(sp)
 4413cd4:	dc000017 	ldw	r16,0(sp)
 4413cd8:	dec00204 	addi	sp,sp,8
 4413cdc:	f800283a 	ret

04413ce0 <__seofread>:
 4413ce0:	0005883a 	mov	r2,zero
 4413ce4:	f800283a 	ret

04413ce8 <__swrite>:
 4413ce8:	2880030b 	ldhu	r2,12(r5)
 4413cec:	defffb04 	addi	sp,sp,-20
 4413cf0:	dcc00315 	stw	r19,12(sp)
 4413cf4:	dc800215 	stw	r18,8(sp)
 4413cf8:	dc400115 	stw	r17,4(sp)
 4413cfc:	dc000015 	stw	r16,0(sp)
 4413d00:	dfc00415 	stw	ra,16(sp)
 4413d04:	10c0400c 	andi	r3,r2,256
 4413d08:	2821883a 	mov	r16,r5
 4413d0c:	2023883a 	mov	r17,r4
 4413d10:	3025883a 	mov	r18,r6
 4413d14:	3827883a 	mov	r19,r7
 4413d18:	18000526 	beq	r3,zero,4413d30 <__swrite+0x48>
 4413d1c:	2940038f 	ldh	r5,14(r5)
 4413d20:	01c00084 	movi	r7,2
 4413d24:	000d883a 	mov	r6,zero
 4413d28:	4416e2c0 	call	4416e2c <_lseek_r>
 4413d2c:	8080030b 	ldhu	r2,12(r16)
 4413d30:	8140038f 	ldh	r5,14(r16)
 4413d34:	10bbffcc 	andi	r2,r2,61439
 4413d38:	980f883a 	mov	r7,r19
 4413d3c:	900d883a 	mov	r6,r18
 4413d40:	8809883a 	mov	r4,r17
 4413d44:	8080030d 	sth	r2,12(r16)
 4413d48:	dfc00417 	ldw	ra,16(sp)
 4413d4c:	dcc00317 	ldw	r19,12(sp)
 4413d50:	dc800217 	ldw	r18,8(sp)
 4413d54:	dc400117 	ldw	r17,4(sp)
 4413d58:	dc000017 	ldw	r16,0(sp)
 4413d5c:	dec00504 	addi	sp,sp,20
 4413d60:	44168f81 	jmpi	44168f8 <_write_r>

04413d64 <__sseek>:
 4413d64:	defffe04 	addi	sp,sp,-8
 4413d68:	dc000015 	stw	r16,0(sp)
 4413d6c:	2821883a 	mov	r16,r5
 4413d70:	2940038f 	ldh	r5,14(r5)
 4413d74:	dfc00115 	stw	ra,4(sp)
 4413d78:	4416e2c0 	call	4416e2c <_lseek_r>
 4413d7c:	00ffffc4 	movi	r3,-1
 4413d80:	10c00826 	beq	r2,r3,4413da4 <__sseek+0x40>
 4413d84:	80c0030b 	ldhu	r3,12(r16)
 4413d88:	80801415 	stw	r2,80(r16)
 4413d8c:	18c40014 	ori	r3,r3,4096
 4413d90:	80c0030d 	sth	r3,12(r16)
 4413d94:	dfc00117 	ldw	ra,4(sp)
 4413d98:	dc000017 	ldw	r16,0(sp)
 4413d9c:	dec00204 	addi	sp,sp,8
 4413da0:	f800283a 	ret
 4413da4:	80c0030b 	ldhu	r3,12(r16)
 4413da8:	18fbffcc 	andi	r3,r3,61439
 4413dac:	80c0030d 	sth	r3,12(r16)
 4413db0:	dfc00117 	ldw	ra,4(sp)
 4413db4:	dc000017 	ldw	r16,0(sp)
 4413db8:	dec00204 	addi	sp,sp,8
 4413dbc:	f800283a 	ret

04413dc0 <__sclose>:
 4413dc0:	2940038f 	ldh	r5,14(r5)
 4413dc4:	44169581 	jmpi	4416958 <_close_r>

04413dc8 <strcmp>:
 4413dc8:	2144b03a 	or	r2,r4,r5
 4413dcc:	108000cc 	andi	r2,r2,3
 4413dd0:	1000171e 	bne	r2,zero,4413e30 <strcmp+0x68>
 4413dd4:	20800017 	ldw	r2,0(r4)
 4413dd8:	28c00017 	ldw	r3,0(r5)
 4413ddc:	10c0141e 	bne	r2,r3,4413e30 <strcmp+0x68>
 4413de0:	027fbff4 	movhi	r9,65279
 4413de4:	4a7fbfc4 	addi	r9,r9,-257
 4413de8:	0086303a 	nor	r3,zero,r2
 4413dec:	02202074 	movhi	r8,32897
 4413df0:	1245883a 	add	r2,r2,r9
 4413df4:	42202004 	addi	r8,r8,-32640
 4413df8:	10c4703a 	and	r2,r2,r3
 4413dfc:	1204703a 	and	r2,r2,r8
 4413e00:	10000226 	beq	r2,zero,4413e0c <strcmp+0x44>
 4413e04:	00002306 	br	4413e94 <strcmp+0xcc>
 4413e08:	1000221e 	bne	r2,zero,4413e94 <strcmp+0xcc>
 4413e0c:	21000104 	addi	r4,r4,4
 4413e10:	20c00017 	ldw	r3,0(r4)
 4413e14:	29400104 	addi	r5,r5,4
 4413e18:	29800017 	ldw	r6,0(r5)
 4413e1c:	1a4f883a 	add	r7,r3,r9
 4413e20:	00c4303a 	nor	r2,zero,r3
 4413e24:	3884703a 	and	r2,r7,r2
 4413e28:	1204703a 	and	r2,r2,r8
 4413e2c:	19bff626 	beq	r3,r6,4413e08 <__reset+0xfb40fe08>
 4413e30:	20800003 	ldbu	r2,0(r4)
 4413e34:	10c03fcc 	andi	r3,r2,255
 4413e38:	18c0201c 	xori	r3,r3,128
 4413e3c:	18ffe004 	addi	r3,r3,-128
 4413e40:	18000c26 	beq	r3,zero,4413e74 <strcmp+0xac>
 4413e44:	29800007 	ldb	r6,0(r5)
 4413e48:	19800326 	beq	r3,r6,4413e58 <strcmp+0x90>
 4413e4c:	00001306 	br	4413e9c <strcmp+0xd4>
 4413e50:	29800007 	ldb	r6,0(r5)
 4413e54:	11800b1e 	bne	r2,r6,4413e84 <strcmp+0xbc>
 4413e58:	21000044 	addi	r4,r4,1
 4413e5c:	20c00003 	ldbu	r3,0(r4)
 4413e60:	29400044 	addi	r5,r5,1
 4413e64:	18803fcc 	andi	r2,r3,255
 4413e68:	1080201c 	xori	r2,r2,128
 4413e6c:	10bfe004 	addi	r2,r2,-128
 4413e70:	103ff71e 	bne	r2,zero,4413e50 <__reset+0xfb40fe50>
 4413e74:	0007883a 	mov	r3,zero
 4413e78:	28800003 	ldbu	r2,0(r5)
 4413e7c:	1885c83a 	sub	r2,r3,r2
 4413e80:	f800283a 	ret
 4413e84:	28800003 	ldbu	r2,0(r5)
 4413e88:	18c03fcc 	andi	r3,r3,255
 4413e8c:	1885c83a 	sub	r2,r3,r2
 4413e90:	f800283a 	ret
 4413e94:	0005883a 	mov	r2,zero
 4413e98:	f800283a 	ret
 4413e9c:	10c03fcc 	andi	r3,r2,255
 4413ea0:	003ff506 	br	4413e78 <__reset+0xfb40fe78>

04413ea4 <__ssprint_r>:
 4413ea4:	30800217 	ldw	r2,8(r6)
 4413ea8:	defff604 	addi	sp,sp,-40
 4413eac:	dc800215 	stw	r18,8(sp)
 4413eb0:	dfc00915 	stw	ra,36(sp)
 4413eb4:	df000815 	stw	fp,32(sp)
 4413eb8:	ddc00715 	stw	r23,28(sp)
 4413ebc:	dd800615 	stw	r22,24(sp)
 4413ec0:	dd400515 	stw	r21,20(sp)
 4413ec4:	dd000415 	stw	r20,16(sp)
 4413ec8:	dcc00315 	stw	r19,12(sp)
 4413ecc:	dc400115 	stw	r17,4(sp)
 4413ed0:	dc000015 	stw	r16,0(sp)
 4413ed4:	3025883a 	mov	r18,r6
 4413ed8:	10005826 	beq	r2,zero,441403c <__ssprint_r+0x198>
 4413edc:	2027883a 	mov	r19,r4
 4413ee0:	35c00017 	ldw	r23,0(r6)
 4413ee4:	29000017 	ldw	r4,0(r5)
 4413ee8:	28800217 	ldw	r2,8(r5)
 4413eec:	2823883a 	mov	r17,r5
 4413ef0:	0039883a 	mov	fp,zero
 4413ef4:	0021883a 	mov	r16,zero
 4413ef8:	80003926 	beq	r16,zero,4413fe0 <__ssprint_r+0x13c>
 4413efc:	102b883a 	mov	r21,r2
 4413f00:	102d883a 	mov	r22,r2
 4413f04:	80803a36 	bltu	r16,r2,4413ff0 <__ssprint_r+0x14c>
 4413f08:	88c0030b 	ldhu	r3,12(r17)
 4413f0c:	1881200c 	andi	r2,r3,1152
 4413f10:	10002626 	beq	r2,zero,4413fac <__ssprint_r+0x108>
 4413f14:	88800517 	ldw	r2,20(r17)
 4413f18:	89400417 	ldw	r5,16(r17)
 4413f1c:	81800044 	addi	r6,r16,1
 4413f20:	108f883a 	add	r7,r2,r2
 4413f24:	3885883a 	add	r2,r7,r2
 4413f28:	100ed7fa 	srli	r7,r2,31
 4413f2c:	216dc83a 	sub	r22,r4,r5
 4413f30:	3589883a 	add	r4,r6,r22
 4413f34:	3885883a 	add	r2,r7,r2
 4413f38:	102bd07a 	srai	r21,r2,1
 4413f3c:	a80d883a 	mov	r6,r21
 4413f40:	a900022e 	bgeu	r21,r4,4413f4c <__ssprint_r+0xa8>
 4413f44:	202b883a 	mov	r21,r4
 4413f48:	200d883a 	mov	r6,r4
 4413f4c:	18c1000c 	andi	r3,r3,1024
 4413f50:	18002a26 	beq	r3,zero,4413ffc <__ssprint_r+0x158>
 4413f54:	300b883a 	mov	r5,r6
 4413f58:	9809883a 	mov	r4,r19
 4413f5c:	440a3f00 	call	440a3f0 <_malloc_r>
 4413f60:	1029883a 	mov	r20,r2
 4413f64:	10002c26 	beq	r2,zero,4414018 <__ssprint_r+0x174>
 4413f68:	89400417 	ldw	r5,16(r17)
 4413f6c:	b00d883a 	mov	r6,r22
 4413f70:	1009883a 	mov	r4,r2
 4413f74:	440abfc0 	call	440abfc <memcpy>
 4413f78:	8880030b 	ldhu	r2,12(r17)
 4413f7c:	00fedfc4 	movi	r3,-1153
 4413f80:	10c4703a 	and	r2,r2,r3
 4413f84:	10802014 	ori	r2,r2,128
 4413f88:	8880030d 	sth	r2,12(r17)
 4413f8c:	a589883a 	add	r4,r20,r22
 4413f90:	adadc83a 	sub	r22,r21,r22
 4413f94:	8d400515 	stw	r21,20(r17)
 4413f98:	8d800215 	stw	r22,8(r17)
 4413f9c:	8d000415 	stw	r20,16(r17)
 4413fa0:	89000015 	stw	r4,0(r17)
 4413fa4:	802b883a 	mov	r21,r16
 4413fa8:	802d883a 	mov	r22,r16
 4413fac:	b00d883a 	mov	r6,r22
 4413fb0:	e00b883a 	mov	r5,fp
 4413fb4:	44125d00 	call	44125d0 <memmove>
 4413fb8:	88800217 	ldw	r2,8(r17)
 4413fbc:	89000017 	ldw	r4,0(r17)
 4413fc0:	90c00217 	ldw	r3,8(r18)
 4413fc4:	1545c83a 	sub	r2,r2,r21
 4413fc8:	2589883a 	add	r4,r4,r22
 4413fcc:	88800215 	stw	r2,8(r17)
 4413fd0:	89000015 	stw	r4,0(r17)
 4413fd4:	1c21c83a 	sub	r16,r3,r16
 4413fd8:	94000215 	stw	r16,8(r18)
 4413fdc:	80001726 	beq	r16,zero,441403c <__ssprint_r+0x198>
 4413fe0:	bf000017 	ldw	fp,0(r23)
 4413fe4:	bc000117 	ldw	r16,4(r23)
 4413fe8:	bdc00204 	addi	r23,r23,8
 4413fec:	003fc206 	br	4413ef8 <__reset+0xfb40fef8>
 4413ff0:	802b883a 	mov	r21,r16
 4413ff4:	802d883a 	mov	r22,r16
 4413ff8:	003fec06 	br	4413fac <__reset+0xfb40ffac>
 4413ffc:	9809883a 	mov	r4,r19
 4414000:	44137280 	call	4413728 <_realloc_r>
 4414004:	1029883a 	mov	r20,r2
 4414008:	103fe01e 	bne	r2,zero,4413f8c <__reset+0xfb40ff8c>
 441400c:	89400417 	ldw	r5,16(r17)
 4414010:	9809883a 	mov	r4,r19
 4414014:	44119000 	call	4411900 <_free_r>
 4414018:	88c0030b 	ldhu	r3,12(r17)
 441401c:	00800304 	movi	r2,12
 4414020:	98800015 	stw	r2,0(r19)
 4414024:	18c01014 	ori	r3,r3,64
 4414028:	88c0030d 	sth	r3,12(r17)
 441402c:	00bfffc4 	movi	r2,-1
 4414030:	90000215 	stw	zero,8(r18)
 4414034:	90000115 	stw	zero,4(r18)
 4414038:	00000206 	br	4414044 <__ssprint_r+0x1a0>
 441403c:	90000115 	stw	zero,4(r18)
 4414040:	0005883a 	mov	r2,zero
 4414044:	dfc00917 	ldw	ra,36(sp)
 4414048:	df000817 	ldw	fp,32(sp)
 441404c:	ddc00717 	ldw	r23,28(sp)
 4414050:	dd800617 	ldw	r22,24(sp)
 4414054:	dd400517 	ldw	r21,20(sp)
 4414058:	dd000417 	ldw	r20,16(sp)
 441405c:	dcc00317 	ldw	r19,12(sp)
 4414060:	dc800217 	ldw	r18,8(sp)
 4414064:	dc400117 	ldw	r17,4(sp)
 4414068:	dc000017 	ldw	r16,0(sp)
 441406c:	dec00a04 	addi	sp,sp,40
 4414070:	f800283a 	ret

04414074 <___svfiprintf_internal_r>:
 4414074:	2880030b 	ldhu	r2,12(r5)
 4414078:	deffc804 	addi	sp,sp,-224
 441407c:	dcc03115 	stw	r19,196(sp)
 4414080:	dfc03715 	stw	ra,220(sp)
 4414084:	df003615 	stw	fp,216(sp)
 4414088:	ddc03515 	stw	r23,212(sp)
 441408c:	dd803415 	stw	r22,208(sp)
 4414090:	dd403315 	stw	r21,204(sp)
 4414094:	dd003215 	stw	r20,200(sp)
 4414098:	dc803015 	stw	r18,192(sp)
 441409c:	dc402f15 	stw	r17,188(sp)
 44140a0:	dc002e15 	stw	r16,184(sp)
 44140a4:	d9402715 	stw	r5,156(sp)
 44140a8:	d9002a15 	stw	r4,168(sp)
 44140ac:	1080200c 	andi	r2,r2,128
 44140b0:	d9c02315 	stw	r7,140(sp)
 44140b4:	3027883a 	mov	r19,r6
 44140b8:	10000226 	beq	r2,zero,44140c4 <___svfiprintf_internal_r+0x50>
 44140bc:	28800417 	ldw	r2,16(r5)
 44140c0:	10041d26 	beq	r2,zero,4415138 <___svfiprintf_internal_r+0x10c4>
 44140c4:	dac01a04 	addi	r11,sp,104
 44140c8:	dac01e15 	stw	r11,120(sp)
 44140cc:	d8801e17 	ldw	r2,120(sp)
 44140d0:	dac019c4 	addi	r11,sp,103
 44140d4:	dd402a17 	ldw	r21,168(sp)
 44140d8:	ddc02717 	ldw	r23,156(sp)
 44140dc:	058110f4 	movhi	r22,1091
 44140e0:	050110f4 	movhi	r20,1091
 44140e4:	dac01f15 	stw	r11,124(sp)
 44140e8:	12d7c83a 	sub	r11,r2,r11
 44140ec:	b5939b04 	addi	r22,r22,20076
 44140f0:	a5139704 	addi	r20,r20,20060
 44140f4:	dec01a15 	stw	sp,104(sp)
 44140f8:	d8001c15 	stw	zero,112(sp)
 44140fc:	d8001b15 	stw	zero,108(sp)
 4414100:	d811883a 	mov	r8,sp
 4414104:	d8002915 	stw	zero,164(sp)
 4414108:	d8002515 	stw	zero,148(sp)
 441410c:	dac02b15 	stw	r11,172(sp)
 4414110:	98800007 	ldb	r2,0(r19)
 4414114:	1002dd26 	beq	r2,zero,4414c8c <___svfiprintf_internal_r+0xc18>
 4414118:	00c00944 	movi	r3,37
 441411c:	9823883a 	mov	r17,r19
 4414120:	10c0021e 	bne	r2,r3,441412c <___svfiprintf_internal_r+0xb8>
 4414124:	00001406 	br	4414178 <___svfiprintf_internal_r+0x104>
 4414128:	10c00326 	beq	r2,r3,4414138 <___svfiprintf_internal_r+0xc4>
 441412c:	8c400044 	addi	r17,r17,1
 4414130:	88800007 	ldb	r2,0(r17)
 4414134:	103ffc1e 	bne	r2,zero,4414128 <__reset+0xfb410128>
 4414138:	8ce1c83a 	sub	r16,r17,r19
 441413c:	80000e26 	beq	r16,zero,4414178 <___svfiprintf_internal_r+0x104>
 4414140:	d8c01c17 	ldw	r3,112(sp)
 4414144:	d8801b17 	ldw	r2,108(sp)
 4414148:	44c00015 	stw	r19,0(r8)
 441414c:	1c07883a 	add	r3,r3,r16
 4414150:	10800044 	addi	r2,r2,1
 4414154:	d8c01c15 	stw	r3,112(sp)
 4414158:	44000115 	stw	r16,4(r8)
 441415c:	d8801b15 	stw	r2,108(sp)
 4414160:	00c001c4 	movi	r3,7
 4414164:	18831e16 	blt	r3,r2,4414de0 <___svfiprintf_internal_r+0xd6c>
 4414168:	42000204 	addi	r8,r8,8
 441416c:	dac02517 	ldw	r11,148(sp)
 4414170:	5c17883a 	add	r11,r11,r16
 4414174:	dac02515 	stw	r11,148(sp)
 4414178:	88800007 	ldb	r2,0(r17)
 441417c:	1002c526 	beq	r2,zero,4414c94 <___svfiprintf_internal_r+0xc20>
 4414180:	88c00047 	ldb	r3,1(r17)
 4414184:	8cc00044 	addi	r19,r17,1
 4414188:	d8001d85 	stb	zero,118(sp)
 441418c:	0009883a 	mov	r4,zero
 4414190:	000f883a 	mov	r7,zero
 4414194:	043fffc4 	movi	r16,-1
 4414198:	d8002415 	stw	zero,144(sp)
 441419c:	0025883a 	mov	r18,zero
 44141a0:	01401604 	movi	r5,88
 44141a4:	01800244 	movi	r6,9
 44141a8:	02800a84 	movi	r10,42
 44141ac:	02401b04 	movi	r9,108
 44141b0:	9cc00044 	addi	r19,r19,1
 44141b4:	18bff804 	addi	r2,r3,-32
 44141b8:	2881dd36 	bltu	r5,r2,4414930 <___svfiprintf_internal_r+0x8bc>
 44141bc:	100490ba 	slli	r2,r2,2
 44141c0:	02c11074 	movhi	r11,1089
 44141c4:	5ad07504 	addi	r11,r11,16852
 44141c8:	12c5883a 	add	r2,r2,r11
 44141cc:	10800017 	ldw	r2,0(r2)
 44141d0:	1000683a 	jmp	r2
 44141d4:	044143d0 	cmplti	r17,zero,1295
 44141d8:	04414930 	cmpltui	r17,zero,1316
 44141dc:	04414930 	cmpltui	r17,zero,1316
 44141e0:	044143c4 	movi	r17,1295
 44141e4:	04414930 	cmpltui	r17,zero,1316
 44141e8:	04414930 	cmpltui	r17,zero,1316
 44141ec:	04414930 	cmpltui	r17,zero,1316
 44141f0:	04414930 	cmpltui	r17,zero,1316
 44141f4:	04414930 	cmpltui	r17,zero,1316
 44141f8:	04414930 	cmpltui	r17,zero,1316
 44141fc:	04414338 	rdprs	r17,zero,1292
 4414200:	04414514 	movui	r17,1300
 4414204:	04414930 	cmpltui	r17,zero,1316
 4414208:	04414364 	muli	r17,zero,1293
 441420c:	04414964 	muli	r17,zero,1317
 4414210:	04414930 	cmpltui	r17,zero,1316
 4414214:	04414958 	cmpnei	r17,zero,1317
 4414218:	044148f8 	rdprs	r17,zero,1315
 441421c:	044148f8 	rdprs	r17,zero,1315
 4414220:	044148f8 	rdprs	r17,zero,1315
 4414224:	044148f8 	rdprs	r17,zero,1315
 4414228:	044148f8 	rdprs	r17,zero,1315
 441422c:	044148f8 	rdprs	r17,zero,1315
 4414230:	044148f8 	rdprs	r17,zero,1315
 4414234:	044148f8 	rdprs	r17,zero,1315
 4414238:	044148f8 	rdprs	r17,zero,1315
 441423c:	04414930 	cmpltui	r17,zero,1316
 4414240:	04414930 	cmpltui	r17,zero,1316
 4414244:	04414930 	cmpltui	r17,zero,1316
 4414248:	04414930 	cmpltui	r17,zero,1316
 441424c:	04414930 	cmpltui	r17,zero,1316
 4414250:	04414930 	cmpltui	r17,zero,1316
 4414254:	04414930 	cmpltui	r17,zero,1316
 4414258:	04414930 	cmpltui	r17,zero,1316
 441425c:	04414930 	cmpltui	r17,zero,1316
 4414260:	04414930 	cmpltui	r17,zero,1316
 4414264:	04414894 	movui	r17,1314
 4414268:	04414930 	cmpltui	r17,zero,1316
 441426c:	04414930 	cmpltui	r17,zero,1316
 4414270:	04414930 	cmpltui	r17,zero,1316
 4414274:	04414930 	cmpltui	r17,zero,1316
 4414278:	04414930 	cmpltui	r17,zero,1316
 441427c:	04414930 	cmpltui	r17,zero,1316
 4414280:	04414930 	cmpltui	r17,zero,1316
 4414284:	04414930 	cmpltui	r17,zero,1316
 4414288:	04414930 	cmpltui	r17,zero,1316
 441428c:	04414930 	cmpltui	r17,zero,1316
 4414290:	04414a0c 	andi	r17,zero,1320
 4414294:	04414930 	cmpltui	r17,zero,1316
 4414298:	04414930 	cmpltui	r17,zero,1316
 441429c:	04414930 	cmpltui	r17,zero,1316
 44142a0:	04414930 	cmpltui	r17,zero,1316
 44142a4:	04414930 	cmpltui	r17,zero,1316
 44142a8:	044149a4 	muli	r17,zero,1318
 44142ac:	04414930 	cmpltui	r17,zero,1316
 44142b0:	04414930 	cmpltui	r17,zero,1316
 44142b4:	044146d8 	cmpnei	r17,zero,1307
 44142b8:	04414930 	cmpltui	r17,zero,1316
 44142bc:	04414930 	cmpltui	r17,zero,1316
 44142c0:	04414930 	cmpltui	r17,zero,1316
 44142c4:	04414930 	cmpltui	r17,zero,1316
 44142c8:	04414930 	cmpltui	r17,zero,1316
 44142cc:	04414930 	cmpltui	r17,zero,1316
 44142d0:	04414930 	cmpltui	r17,zero,1316
 44142d4:	04414930 	cmpltui	r17,zero,1316
 44142d8:	04414930 	cmpltui	r17,zero,1316
 44142dc:	04414930 	cmpltui	r17,zero,1316
 44142e0:	044145c8 	cmpgei	r17,zero,1303
 44142e4:	04414774 	movhi	r17,1309
 44142e8:	04414930 	cmpltui	r17,zero,1316
 44142ec:	04414930 	cmpltui	r17,zero,1316
 44142f0:	04414930 	cmpltui	r17,zero,1316
 44142f4:	04414768 	cmpgeui	r17,zero,1309
 44142f8:	04414774 	movhi	r17,1309
 44142fc:	04414930 	cmpltui	r17,zero,1316
 4414300:	04414930 	cmpltui	r17,zero,1316
 4414304:	04414758 	cmpnei	r17,zero,1309
 4414308:	04414930 	cmpltui	r17,zero,1316
 441430c:	0441471c 	xori	r17,zero,1308
 4414310:	04414524 	muli	r17,zero,1300
 4414314:	04414370 	cmpltui	r17,zero,1293
 4414318:	04414888 	cmpgei	r17,zero,1314
 441431c:	04414930 	cmpltui	r17,zero,1316
 4414320:	0441483c 	xorhi	r17,zero,1312
 4414324:	04414930 	cmpltui	r17,zero,1316
 4414328:	04414494 	movui	r17,1298
 441432c:	04414930 	cmpltui	r17,zero,1316
 4414330:	04414930 	cmpltui	r17,zero,1316
 4414334:	044143f0 	cmpltui	r17,zero,1295
 4414338:	dac02317 	ldw	r11,140(sp)
 441433c:	5ac00017 	ldw	r11,0(r11)
 4414340:	dac02415 	stw	r11,144(sp)
 4414344:	dac02317 	ldw	r11,140(sp)
 4414348:	58800104 	addi	r2,r11,4
 441434c:	dac02417 	ldw	r11,144(sp)
 4414350:	5802e90e 	bge	r11,zero,4414ef8 <___svfiprintf_internal_r+0xe84>
 4414354:	dac02417 	ldw	r11,144(sp)
 4414358:	d8802315 	stw	r2,140(sp)
 441435c:	02d7c83a 	sub	r11,zero,r11
 4414360:	dac02415 	stw	r11,144(sp)
 4414364:	94800114 	ori	r18,r18,4
 4414368:	98c00007 	ldb	r3,0(r19)
 441436c:	003f9006 	br	44141b0 <__reset+0xfb4101b0>
 4414370:	00800c04 	movi	r2,48
 4414374:	dac02317 	ldw	r11,140(sp)
 4414378:	d8801d05 	stb	r2,116(sp)
 441437c:	00801e04 	movi	r2,120
 4414380:	d8801d45 	stb	r2,117(sp)
 4414384:	d8001d85 	stb	zero,118(sp)
 4414388:	58c00104 	addi	r3,r11,4
 441438c:	5f000017 	ldw	fp,0(r11)
 4414390:	0013883a 	mov	r9,zero
 4414394:	90800094 	ori	r2,r18,2
 4414398:	80032b16 	blt	r16,zero,4415048 <___svfiprintf_internal_r+0xfd4>
 441439c:	00bfdfc4 	movi	r2,-129
 44143a0:	90a4703a 	and	r18,r18,r2
 44143a4:	d8c02315 	stw	r3,140(sp)
 44143a8:	94800094 	ori	r18,r18,2
 44143ac:	e002dc26 	beq	fp,zero,4414f20 <___svfiprintf_internal_r+0xeac>
 44143b0:	010110f4 	movhi	r4,1091
 44143b4:	21132f04 	addi	r4,r4,19644
 44143b8:	0015883a 	mov	r10,zero
 44143bc:	d9002915 	stw	r4,164(sp)
 44143c0:	00002306 	br	4414450 <___svfiprintf_internal_r+0x3dc>
 44143c4:	94800054 	ori	r18,r18,1
 44143c8:	98c00007 	ldb	r3,0(r19)
 44143cc:	003f7806 	br	44141b0 <__reset+0xfb4101b0>
 44143d0:	38803fcc 	andi	r2,r7,255
 44143d4:	1080201c 	xori	r2,r2,128
 44143d8:	10bfe004 	addi	r2,r2,-128
 44143dc:	1002f31e 	bne	r2,zero,4414fac <___svfiprintf_internal_r+0xf38>
 44143e0:	01000044 	movi	r4,1
 44143e4:	01c00804 	movi	r7,32
 44143e8:	98c00007 	ldb	r3,0(r19)
 44143ec:	003f7006 	br	44141b0 <__reset+0xfb4101b0>
 44143f0:	21003fcc 	andi	r4,r4,255
 44143f4:	2003aa1e 	bne	r4,zero,44152a0 <___svfiprintf_internal_r+0x122c>
 44143f8:	008110f4 	movhi	r2,1091
 44143fc:	10932f04 	addi	r2,r2,19644
 4414400:	d8802915 	stw	r2,164(sp)
 4414404:	9080080c 	andi	r2,r18,32
 4414408:	1000ba26 	beq	r2,zero,44146f4 <___svfiprintf_internal_r+0x680>
 441440c:	dac02317 	ldw	r11,140(sp)
 4414410:	5f000017 	ldw	fp,0(r11)
 4414414:	5a400117 	ldw	r9,4(r11)
 4414418:	5ac00204 	addi	r11,r11,8
 441441c:	dac02315 	stw	r11,140(sp)
 4414420:	9080004c 	andi	r2,r18,1
 4414424:	10029026 	beq	r2,zero,4414e68 <___svfiprintf_internal_r+0xdf4>
 4414428:	e244b03a 	or	r2,fp,r9
 441442c:	1002d41e 	bne	r2,zero,4414f80 <___svfiprintf_internal_r+0xf0c>
 4414430:	d8001d85 	stb	zero,118(sp)
 4414434:	80030b16 	blt	r16,zero,4415064 <___svfiprintf_internal_r+0xff0>
 4414438:	00bfdfc4 	movi	r2,-129
 441443c:	90a4703a 	and	r18,r18,r2
 4414440:	0015883a 	mov	r10,zero
 4414444:	80002426 	beq	r16,zero,44144d8 <___svfiprintf_internal_r+0x464>
 4414448:	0039883a 	mov	fp,zero
 441444c:	0013883a 	mov	r9,zero
 4414450:	d9002917 	ldw	r4,164(sp)
 4414454:	dc401a04 	addi	r17,sp,104
 4414458:	e08003cc 	andi	r2,fp,15
 441445c:	4806973a 	slli	r3,r9,28
 4414460:	2085883a 	add	r2,r4,r2
 4414464:	e038d13a 	srli	fp,fp,4
 4414468:	10800003 	ldbu	r2,0(r2)
 441446c:	4812d13a 	srli	r9,r9,4
 4414470:	8c7fffc4 	addi	r17,r17,-1
 4414474:	1f38b03a 	or	fp,r3,fp
 4414478:	88800005 	stb	r2,0(r17)
 441447c:	e244b03a 	or	r2,fp,r9
 4414480:	103ff51e 	bne	r2,zero,4414458 <__reset+0xfb410458>
 4414484:	dac01e17 	ldw	r11,120(sp)
 4414488:	5c57c83a 	sub	r11,r11,r17
 441448c:	dac02115 	stw	r11,132(sp)
 4414490:	00001406 	br	44144e4 <___svfiprintf_internal_r+0x470>
 4414494:	21003fcc 	andi	r4,r4,255
 4414498:	2003741e 	bne	r4,zero,441526c <___svfiprintf_internal_r+0x11f8>
 441449c:	9080080c 	andi	r2,r18,32
 44144a0:	10014526 	beq	r2,zero,44149b8 <___svfiprintf_internal_r+0x944>
 44144a4:	dac02317 	ldw	r11,140(sp)
 44144a8:	d8001d85 	stb	zero,118(sp)
 44144ac:	58c00204 	addi	r3,r11,8
 44144b0:	5f000017 	ldw	fp,0(r11)
 44144b4:	5a400117 	ldw	r9,4(r11)
 44144b8:	8002d916 	blt	r16,zero,4415020 <___svfiprintf_internal_r+0xfac>
 44144bc:	013fdfc4 	movi	r4,-129
 44144c0:	e244b03a 	or	r2,fp,r9
 44144c4:	d8c02315 	stw	r3,140(sp)
 44144c8:	9124703a 	and	r18,r18,r4
 44144cc:	0015883a 	mov	r10,zero
 44144d0:	1000b91e 	bne	r2,zero,44147b8 <___svfiprintf_internal_r+0x744>
 44144d4:	8002e61e 	bne	r16,zero,4415070 <___svfiprintf_internal_r+0xffc>
 44144d8:	0021883a 	mov	r16,zero
 44144dc:	d8002115 	stw	zero,132(sp)
 44144e0:	dc401a04 	addi	r17,sp,104
 44144e4:	d8c02117 	ldw	r3,132(sp)
 44144e8:	dc002015 	stw	r16,128(sp)
 44144ec:	80c0010e 	bge	r16,r3,44144f4 <___svfiprintf_internal_r+0x480>
 44144f0:	d8c02015 	stw	r3,128(sp)
 44144f4:	52803fcc 	andi	r10,r10,255
 44144f8:	5280201c 	xori	r10,r10,128
 44144fc:	52bfe004 	addi	r10,r10,-128
 4414500:	50003c26 	beq	r10,zero,44145f4 <___svfiprintf_internal_r+0x580>
 4414504:	dac02017 	ldw	r11,128(sp)
 4414508:	5ac00044 	addi	r11,r11,1
 441450c:	dac02015 	stw	r11,128(sp)
 4414510:	00003806 	br	44145f4 <___svfiprintf_internal_r+0x580>
 4414514:	01000044 	movi	r4,1
 4414518:	01c00ac4 	movi	r7,43
 441451c:	98c00007 	ldb	r3,0(r19)
 4414520:	003f2306 	br	44141b0 <__reset+0xfb4101b0>
 4414524:	21003fcc 	andi	r4,r4,255
 4414528:	2003481e 	bne	r4,zero,441524c <___svfiprintf_internal_r+0x11d8>
 441452c:	9080080c 	andi	r2,r18,32
 4414530:	10013b26 	beq	r2,zero,4414a20 <___svfiprintf_internal_r+0x9ac>
 4414534:	dac02317 	ldw	r11,140(sp)
 4414538:	d8001d85 	stb	zero,118(sp)
 441453c:	58800204 	addi	r2,r11,8
 4414540:	5f000017 	ldw	fp,0(r11)
 4414544:	5a400117 	ldw	r9,4(r11)
 4414548:	8002a816 	blt	r16,zero,4414fec <___svfiprintf_internal_r+0xf78>
 441454c:	013fdfc4 	movi	r4,-129
 4414550:	e246b03a 	or	r3,fp,r9
 4414554:	d8802315 	stw	r2,140(sp)
 4414558:	9124703a 	and	r18,r18,r4
 441455c:	18013c26 	beq	r3,zero,4414a50 <___svfiprintf_internal_r+0x9dc>
 4414560:	0015883a 	mov	r10,zero
 4414564:	dc401a04 	addi	r17,sp,104
 4414568:	e006d0fa 	srli	r3,fp,3
 441456c:	4808977a 	slli	r4,r9,29
 4414570:	4812d0fa 	srli	r9,r9,3
 4414574:	e70001cc 	andi	fp,fp,7
 4414578:	e0800c04 	addi	r2,fp,48
 441457c:	8c7fffc4 	addi	r17,r17,-1
 4414580:	20f8b03a 	or	fp,r4,r3
 4414584:	88800005 	stb	r2,0(r17)
 4414588:	e246b03a 	or	r3,fp,r9
 441458c:	183ff61e 	bne	r3,zero,4414568 <__reset+0xfb410568>
 4414590:	90c0004c 	andi	r3,r18,1
 4414594:	1800a526 	beq	r3,zero,441482c <___svfiprintf_internal_r+0x7b8>
 4414598:	10803fcc 	andi	r2,r2,255
 441459c:	1080201c 	xori	r2,r2,128
 44145a0:	10bfe004 	addi	r2,r2,-128
 44145a4:	00c00c04 	movi	r3,48
 44145a8:	10ffb626 	beq	r2,r3,4414484 <__reset+0xfb410484>
 44145ac:	88ffffc5 	stb	r3,-1(r17)
 44145b0:	d8c01e17 	ldw	r3,120(sp)
 44145b4:	88bfffc4 	addi	r2,r17,-1
 44145b8:	1023883a 	mov	r17,r2
 44145bc:	1887c83a 	sub	r3,r3,r2
 44145c0:	d8c02115 	stw	r3,132(sp)
 44145c4:	003fc706 	br	44144e4 <__reset+0xfb4104e4>
 44145c8:	dac02317 	ldw	r11,140(sp)
 44145cc:	00c00044 	movi	r3,1
 44145d0:	d8c02015 	stw	r3,128(sp)
 44145d4:	58800017 	ldw	r2,0(r11)
 44145d8:	5ac00104 	addi	r11,r11,4
 44145dc:	d8001d85 	stb	zero,118(sp)
 44145e0:	d8801005 	stb	r2,64(sp)
 44145e4:	dac02315 	stw	r11,140(sp)
 44145e8:	d8c02115 	stw	r3,132(sp)
 44145ec:	dc401004 	addi	r17,sp,64
 44145f0:	0021883a 	mov	r16,zero
 44145f4:	90c0008c 	andi	r3,r18,2
 44145f8:	d8c02215 	stw	r3,136(sp)
 44145fc:	18000326 	beq	r3,zero,441460c <___svfiprintf_internal_r+0x598>
 4414600:	dac02017 	ldw	r11,128(sp)
 4414604:	5ac00084 	addi	r11,r11,2
 4414608:	dac02015 	stw	r11,128(sp)
 441460c:	90c0210c 	andi	r3,r18,132
 4414610:	d8c02615 	stw	r3,152(sp)
 4414614:	1801131e 	bne	r3,zero,4414a64 <___svfiprintf_internal_r+0x9f0>
 4414618:	dac02417 	ldw	r11,144(sp)
 441461c:	d8c02017 	ldw	r3,128(sp)
 4414620:	58f9c83a 	sub	fp,r11,r3
 4414624:	07010f0e 	bge	zero,fp,4414a64 <___svfiprintf_internal_r+0x9f0>
 4414628:	02400404 	movi	r9,16
 441462c:	d8c01c17 	ldw	r3,112(sp)
 4414630:	d8801b17 	ldw	r2,108(sp)
 4414634:	4f02d60e 	bge	r9,fp,4415190 <___svfiprintf_internal_r+0x111c>
 4414638:	014110f4 	movhi	r5,1091
 441463c:	29539b04 	addi	r5,r5,20076
 4414640:	d9402815 	stw	r5,160(sp)
 4414644:	028001c4 	movi	r10,7
 4414648:	00000306 	br	4414658 <___svfiprintf_internal_r+0x5e4>
 441464c:	e73ffc04 	addi	fp,fp,-16
 4414650:	42000204 	addi	r8,r8,8
 4414654:	4f00150e 	bge	r9,fp,44146ac <___svfiprintf_internal_r+0x638>
 4414658:	18c00404 	addi	r3,r3,16
 441465c:	10800044 	addi	r2,r2,1
 4414660:	45800015 	stw	r22,0(r8)
 4414664:	42400115 	stw	r9,4(r8)
 4414668:	d8c01c15 	stw	r3,112(sp)
 441466c:	d8801b15 	stw	r2,108(sp)
 4414670:	50bff60e 	bge	r10,r2,441464c <__reset+0xfb41064c>
 4414674:	d9801a04 	addi	r6,sp,104
 4414678:	b80b883a 	mov	r5,r23
 441467c:	a809883a 	mov	r4,r21
 4414680:	da402c15 	stw	r9,176(sp)
 4414684:	da802d15 	stw	r10,180(sp)
 4414688:	4413ea40 	call	4413ea4 <__ssprint_r>
 441468c:	da402c17 	ldw	r9,176(sp)
 4414690:	da802d17 	ldw	r10,180(sp)
 4414694:	1001851e 	bne	r2,zero,4414cac <___svfiprintf_internal_r+0xc38>
 4414698:	e73ffc04 	addi	fp,fp,-16
 441469c:	d8c01c17 	ldw	r3,112(sp)
 44146a0:	d8801b17 	ldw	r2,108(sp)
 44146a4:	d811883a 	mov	r8,sp
 44146a8:	4f3feb16 	blt	r9,fp,4414658 <__reset+0xfb410658>
 44146ac:	dac02817 	ldw	r11,160(sp)
 44146b0:	e0c7883a 	add	r3,fp,r3
 44146b4:	10800044 	addi	r2,r2,1
 44146b8:	42c00015 	stw	r11,0(r8)
 44146bc:	47000115 	stw	fp,4(r8)
 44146c0:	d8c01c15 	stw	r3,112(sp)
 44146c4:	d8801b15 	stw	r2,108(sp)
 44146c8:	010001c4 	movi	r4,7
 44146cc:	2081ee16 	blt	r4,r2,4414e88 <___svfiprintf_internal_r+0xe14>
 44146d0:	42000204 	addi	r8,r8,8
 44146d4:	0000e506 	br	4414a6c <___svfiprintf_internal_r+0x9f8>
 44146d8:	21003fcc 	andi	r4,r4,255
 44146dc:	2002dd1e 	bne	r4,zero,4415254 <___svfiprintf_internal_r+0x11e0>
 44146e0:	008110f4 	movhi	r2,1091
 44146e4:	10932a04 	addi	r2,r2,19624
 44146e8:	d8802915 	stw	r2,164(sp)
 44146ec:	9080080c 	andi	r2,r18,32
 44146f0:	103f461e 	bne	r2,zero,441440c <__reset+0xfb41040c>
 44146f4:	9080040c 	andi	r2,r18,16
 44146f8:	10022e1e 	bne	r2,zero,4414fb4 <___svfiprintf_internal_r+0xf40>
 44146fc:	9080100c 	andi	r2,r18,64
 4414700:	dac02317 	ldw	r11,140(sp)
 4414704:	10027326 	beq	r2,zero,44150d4 <___svfiprintf_internal_r+0x1060>
 4414708:	5f00000b 	ldhu	fp,0(r11)
 441470c:	5ac00104 	addi	r11,r11,4
 4414710:	0013883a 	mov	r9,zero
 4414714:	dac02315 	stw	r11,140(sp)
 4414718:	003f4106 	br	4414420 <__reset+0xfb410420>
 441471c:	21003fcc 	andi	r4,r4,255
 4414720:	2002e11e 	bne	r4,zero,44152a8 <___svfiprintf_internal_r+0x1234>
 4414724:	9080080c 	andi	r2,r18,32
 4414728:	1002011e 	bne	r2,zero,4414f30 <___svfiprintf_internal_r+0xebc>
 441472c:	9080040c 	andi	r2,r18,16
 4414730:	10023e1e 	bne	r2,zero,441502c <___svfiprintf_internal_r+0xfb8>
 4414734:	9480100c 	andi	r18,r18,64
 4414738:	90023c26 	beq	r18,zero,441502c <___svfiprintf_internal_r+0xfb8>
 441473c:	dac02317 	ldw	r11,140(sp)
 4414740:	58800017 	ldw	r2,0(r11)
 4414744:	5ac00104 	addi	r11,r11,4
 4414748:	dac02315 	stw	r11,140(sp)
 441474c:	dac02517 	ldw	r11,148(sp)
 4414750:	12c0000d 	sth	r11,0(r2)
 4414754:	003e6e06 	br	4414110 <__reset+0xfb410110>
 4414758:	98c00007 	ldb	r3,0(r19)
 441475c:	1a422926 	beq	r3,r9,4415004 <___svfiprintf_internal_r+0xf90>
 4414760:	94800414 	ori	r18,r18,16
 4414764:	003e9206 	br	44141b0 <__reset+0xfb4101b0>
 4414768:	94801014 	ori	r18,r18,64
 441476c:	98c00007 	ldb	r3,0(r19)
 4414770:	003e8f06 	br	44141b0 <__reset+0xfb4101b0>
 4414774:	21003fcc 	andi	r4,r4,255
 4414778:	2002c71e 	bne	r4,zero,4415298 <___svfiprintf_internal_r+0x1224>
 441477c:	9080080c 	andi	r2,r18,32
 4414780:	10004926 	beq	r2,zero,44148a8 <___svfiprintf_internal_r+0x834>
 4414784:	dac02317 	ldw	r11,140(sp)
 4414788:	58800117 	ldw	r2,4(r11)
 441478c:	5f000017 	ldw	fp,0(r11)
 4414790:	5ac00204 	addi	r11,r11,8
 4414794:	dac02315 	stw	r11,140(sp)
 4414798:	1013883a 	mov	r9,r2
 441479c:	10004b16 	blt	r2,zero,44148cc <___svfiprintf_internal_r+0x858>
 44147a0:	da801d83 	ldbu	r10,118(sp)
 44147a4:	8001cb16 	blt	r16,zero,4414ed4 <___svfiprintf_internal_r+0xe60>
 44147a8:	00ffdfc4 	movi	r3,-129
 44147ac:	e244b03a 	or	r2,fp,r9
 44147b0:	90e4703a 	and	r18,r18,r3
 44147b4:	103f4726 	beq	r2,zero,44144d4 <__reset+0xfb4104d4>
 44147b8:	48008c26 	beq	r9,zero,44149ec <___svfiprintf_internal_r+0x978>
 44147bc:	dc802015 	stw	r18,128(sp)
 44147c0:	dc002115 	stw	r16,132(sp)
 44147c4:	dc401a04 	addi	r17,sp,104
 44147c8:	e021883a 	mov	r16,fp
 44147cc:	da002215 	stw	r8,136(sp)
 44147d0:	5039883a 	mov	fp,r10
 44147d4:	4825883a 	mov	r18,r9
 44147d8:	8009883a 	mov	r4,r16
 44147dc:	900b883a 	mov	r5,r18
 44147e0:	01800284 	movi	r6,10
 44147e4:	000f883a 	mov	r7,zero
 44147e8:	44177a40 	call	44177a4 <__umoddi3>
 44147ec:	10800c04 	addi	r2,r2,48
 44147f0:	8c7fffc4 	addi	r17,r17,-1
 44147f4:	8009883a 	mov	r4,r16
 44147f8:	900b883a 	mov	r5,r18
 44147fc:	88800005 	stb	r2,0(r17)
 4414800:	01800284 	movi	r6,10
 4414804:	000f883a 	mov	r7,zero
 4414808:	441722c0 	call	441722c <__udivdi3>
 441480c:	1021883a 	mov	r16,r2
 4414810:	10c4b03a 	or	r2,r2,r3
 4414814:	1825883a 	mov	r18,r3
 4414818:	103fef1e 	bne	r2,zero,44147d8 <__reset+0xfb4107d8>
 441481c:	dc802017 	ldw	r18,128(sp)
 4414820:	dc002117 	ldw	r16,132(sp)
 4414824:	da002217 	ldw	r8,136(sp)
 4414828:	e015883a 	mov	r10,fp
 441482c:	d8c01e17 	ldw	r3,120(sp)
 4414830:	1c47c83a 	sub	r3,r3,r17
 4414834:	d8c02115 	stw	r3,132(sp)
 4414838:	003f2a06 	br	44144e4 <__reset+0xfb4104e4>
 441483c:	dac02317 	ldw	r11,140(sp)
 4414840:	d8001d85 	stb	zero,118(sp)
 4414844:	5c400017 	ldw	r17,0(r11)
 4414848:	5f000104 	addi	fp,r11,4
 441484c:	88022f26 	beq	r17,zero,441510c <___svfiprintf_internal_r+0x1098>
 4414850:	80022516 	blt	r16,zero,44150e8 <___svfiprintf_internal_r+0x1074>
 4414854:	800d883a 	mov	r6,r16
 4414858:	000b883a 	mov	r5,zero
 441485c:	8809883a 	mov	r4,r17
 4414860:	da002c15 	stw	r8,176(sp)
 4414864:	44124ec0 	call	44124ec <memchr>
 4414868:	da002c17 	ldw	r8,176(sp)
 441486c:	10026426 	beq	r2,zero,4415200 <___svfiprintf_internal_r+0x118c>
 4414870:	1445c83a 	sub	r2,r2,r17
 4414874:	d8802115 	stw	r2,132(sp)
 4414878:	da801d83 	ldbu	r10,118(sp)
 441487c:	df002315 	stw	fp,140(sp)
 4414880:	0021883a 	mov	r16,zero
 4414884:	003f1706 	br	44144e4 <__reset+0xfb4104e4>
 4414888:	94800814 	ori	r18,r18,32
 441488c:	98c00007 	ldb	r3,0(r19)
 4414890:	003e4706 	br	44141b0 <__reset+0xfb4101b0>
 4414894:	21003fcc 	andi	r4,r4,255
 4414898:	2002701e 	bne	r4,zero,441525c <___svfiprintf_internal_r+0x11e8>
 441489c:	94800414 	ori	r18,r18,16
 44148a0:	9080080c 	andi	r2,r18,32
 44148a4:	103fb71e 	bne	r2,zero,4414784 <__reset+0xfb410784>
 44148a8:	9080040c 	andi	r2,r18,16
 44148ac:	1001ab26 	beq	r2,zero,4414f5c <___svfiprintf_internal_r+0xee8>
 44148b0:	dac02317 	ldw	r11,140(sp)
 44148b4:	5f000017 	ldw	fp,0(r11)
 44148b8:	5ac00104 	addi	r11,r11,4
 44148bc:	dac02315 	stw	r11,140(sp)
 44148c0:	e013d7fa 	srai	r9,fp,31
 44148c4:	4805883a 	mov	r2,r9
 44148c8:	103fb50e 	bge	r2,zero,44147a0 <__reset+0xfb4107a0>
 44148cc:	0739c83a 	sub	fp,zero,fp
 44148d0:	02800b44 	movi	r10,45
 44148d4:	e004c03a 	cmpne	r2,fp,zero
 44148d8:	0253c83a 	sub	r9,zero,r9
 44148dc:	da801d85 	stb	r10,118(sp)
 44148e0:	4893c83a 	sub	r9,r9,r2
 44148e4:	80023016 	blt	r16,zero,44151a8 <___svfiprintf_internal_r+0x1134>
 44148e8:	00bfdfc4 	movi	r2,-129
 44148ec:	90a4703a 	and	r18,r18,r2
 44148f0:	483fb21e 	bne	r9,zero,44147bc <__reset+0xfb4107bc>
 44148f4:	00003d06 	br	44149ec <___svfiprintf_internal_r+0x978>
 44148f8:	9817883a 	mov	r11,r19
 44148fc:	d8002415 	stw	zero,144(sp)
 4414900:	18bff404 	addi	r2,r3,-48
 4414904:	0019883a 	mov	r12,zero
 4414908:	58c00007 	ldb	r3,0(r11)
 441490c:	630002a4 	muli	r12,r12,10
 4414910:	9cc00044 	addi	r19,r19,1
 4414914:	9817883a 	mov	r11,r19
 4414918:	1319883a 	add	r12,r2,r12
 441491c:	18bff404 	addi	r2,r3,-48
 4414920:	30bff92e 	bgeu	r6,r2,4414908 <__reset+0xfb410908>
 4414924:	db002415 	stw	r12,144(sp)
 4414928:	18bff804 	addi	r2,r3,-32
 441492c:	28be232e 	bgeu	r5,r2,44141bc <__reset+0xfb4101bc>
 4414930:	21003fcc 	andi	r4,r4,255
 4414934:	20024b1e 	bne	r4,zero,4415264 <___svfiprintf_internal_r+0x11f0>
 4414938:	1800d626 	beq	r3,zero,4414c94 <___svfiprintf_internal_r+0xc20>
 441493c:	02c00044 	movi	r11,1
 4414940:	dac02015 	stw	r11,128(sp)
 4414944:	d8c01005 	stb	r3,64(sp)
 4414948:	d8001d85 	stb	zero,118(sp)
 441494c:	dac02115 	stw	r11,132(sp)
 4414950:	dc401004 	addi	r17,sp,64
 4414954:	003f2606 	br	44145f0 <__reset+0xfb4105f0>
 4414958:	94802014 	ori	r18,r18,128
 441495c:	98c00007 	ldb	r3,0(r19)
 4414960:	003e1306 	br	44141b0 <__reset+0xfb4101b0>
 4414964:	98c00007 	ldb	r3,0(r19)
 4414968:	9ac00044 	addi	r11,r19,1
 441496c:	1a822b26 	beq	r3,r10,441521c <___svfiprintf_internal_r+0x11a8>
 4414970:	18bff404 	addi	r2,r3,-48
 4414974:	0021883a 	mov	r16,zero
 4414978:	30821e36 	bltu	r6,r2,44151f4 <___svfiprintf_internal_r+0x1180>
 441497c:	58c00007 	ldb	r3,0(r11)
 4414980:	840002a4 	muli	r16,r16,10
 4414984:	5cc00044 	addi	r19,r11,1
 4414988:	9817883a 	mov	r11,r19
 441498c:	80a1883a 	add	r16,r16,r2
 4414990:	18bff404 	addi	r2,r3,-48
 4414994:	30bff92e 	bgeu	r6,r2,441497c <__reset+0xfb41097c>
 4414998:	803e060e 	bge	r16,zero,44141b4 <__reset+0xfb4101b4>
 441499c:	043fffc4 	movi	r16,-1
 44149a0:	003e0406 	br	44141b4 <__reset+0xfb4101b4>
 44149a4:	21003fcc 	andi	r4,r4,255
 44149a8:	2002371e 	bne	r4,zero,4415288 <___svfiprintf_internal_r+0x1214>
 44149ac:	94800414 	ori	r18,r18,16
 44149b0:	9080080c 	andi	r2,r18,32
 44149b4:	103ebb1e 	bne	r2,zero,44144a4 <__reset+0xfb4104a4>
 44149b8:	9080040c 	andi	r2,r18,16
 44149bc:	10013b26 	beq	r2,zero,4414eac <___svfiprintf_internal_r+0xe38>
 44149c0:	dac02317 	ldw	r11,140(sp)
 44149c4:	d8001d85 	stb	zero,118(sp)
 44149c8:	0013883a 	mov	r9,zero
 44149cc:	58800104 	addi	r2,r11,4
 44149d0:	5f000017 	ldw	fp,0(r11)
 44149d4:	80013d16 	blt	r16,zero,4414ecc <___svfiprintf_internal_r+0xe58>
 44149d8:	00ffdfc4 	movi	r3,-129
 44149dc:	d8802315 	stw	r2,140(sp)
 44149e0:	90e4703a 	and	r18,r18,r3
 44149e4:	0015883a 	mov	r10,zero
 44149e8:	e03eba26 	beq	fp,zero,44144d4 <__reset+0xfb4104d4>
 44149ec:	00800244 	movi	r2,9
 44149f0:	173f7236 	bltu	r2,fp,44147bc <__reset+0xfb4107bc>
 44149f4:	dac02b17 	ldw	r11,172(sp)
 44149f8:	e7000c04 	addi	fp,fp,48
 44149fc:	df0019c5 	stb	fp,103(sp)
 4414a00:	dac02115 	stw	r11,132(sp)
 4414a04:	dc4019c4 	addi	r17,sp,103
 4414a08:	003eb606 	br	44144e4 <__reset+0xfb4104e4>
 4414a0c:	21003fcc 	andi	r4,r4,255
 4414a10:	20021f1e 	bne	r4,zero,4415290 <___svfiprintf_internal_r+0x121c>
 4414a14:	94800414 	ori	r18,r18,16
 4414a18:	9080080c 	andi	r2,r18,32
 4414a1c:	103ec51e 	bne	r2,zero,4414534 <__reset+0xfb410534>
 4414a20:	9080040c 	andi	r2,r18,16
 4414a24:	10016926 	beq	r2,zero,4414fcc <___svfiprintf_internal_r+0xf58>
 4414a28:	dac02317 	ldw	r11,140(sp)
 4414a2c:	d8001d85 	stb	zero,118(sp)
 4414a30:	0013883a 	mov	r9,zero
 4414a34:	58800104 	addi	r2,r11,4
 4414a38:	5f000017 	ldw	fp,0(r11)
 4414a3c:	80016b16 	blt	r16,zero,4414fec <___svfiprintf_internal_r+0xf78>
 4414a40:	00ffdfc4 	movi	r3,-129
 4414a44:	d8802315 	stw	r2,140(sp)
 4414a48:	90e4703a 	and	r18,r18,r3
 4414a4c:	e03ec41e 	bne	fp,zero,4414560 <__reset+0xfb410560>
 4414a50:	0015883a 	mov	r10,zero
 4414a54:	8001c226 	beq	r16,zero,4415160 <___svfiprintf_internal_r+0x10ec>
 4414a58:	0039883a 	mov	fp,zero
 4414a5c:	0013883a 	mov	r9,zero
 4414a60:	003ec006 	br	4414564 <__reset+0xfb410564>
 4414a64:	d8c01c17 	ldw	r3,112(sp)
 4414a68:	d8801b17 	ldw	r2,108(sp)
 4414a6c:	d9001d87 	ldb	r4,118(sp)
 4414a70:	20000b26 	beq	r4,zero,4414aa0 <___svfiprintf_internal_r+0xa2c>
 4414a74:	d9001d84 	addi	r4,sp,118
 4414a78:	18c00044 	addi	r3,r3,1
 4414a7c:	10800044 	addi	r2,r2,1
 4414a80:	41000015 	stw	r4,0(r8)
 4414a84:	01000044 	movi	r4,1
 4414a88:	41000115 	stw	r4,4(r8)
 4414a8c:	d8c01c15 	stw	r3,112(sp)
 4414a90:	d8801b15 	stw	r2,108(sp)
 4414a94:	010001c4 	movi	r4,7
 4414a98:	2080e116 	blt	r4,r2,4414e20 <___svfiprintf_internal_r+0xdac>
 4414a9c:	42000204 	addi	r8,r8,8
 4414aa0:	dac02217 	ldw	r11,136(sp)
 4414aa4:	58000b26 	beq	r11,zero,4414ad4 <___svfiprintf_internal_r+0xa60>
 4414aa8:	d9001d04 	addi	r4,sp,116
 4414aac:	18c00084 	addi	r3,r3,2
 4414ab0:	10800044 	addi	r2,r2,1
 4414ab4:	41000015 	stw	r4,0(r8)
 4414ab8:	01000084 	movi	r4,2
 4414abc:	41000115 	stw	r4,4(r8)
 4414ac0:	d8c01c15 	stw	r3,112(sp)
 4414ac4:	d8801b15 	stw	r2,108(sp)
 4414ac8:	010001c4 	movi	r4,7
 4414acc:	2080dd16 	blt	r4,r2,4414e44 <___svfiprintf_internal_r+0xdd0>
 4414ad0:	42000204 	addi	r8,r8,8
 4414ad4:	dac02617 	ldw	r11,152(sp)
 4414ad8:	01002004 	movi	r4,128
 4414adc:	59008426 	beq	r11,r4,4414cf0 <___svfiprintf_internal_r+0xc7c>
 4414ae0:	dac02117 	ldw	r11,132(sp)
 4414ae4:	82e1c83a 	sub	r16,r16,r11
 4414ae8:	0400270e 	bge	zero,r16,4414b88 <___svfiprintf_internal_r+0xb14>
 4414aec:	01c00404 	movi	r7,16
 4414af0:	3c016a0e 	bge	r7,r16,441509c <___svfiprintf_internal_r+0x1028>
 4414af4:	014110f4 	movhi	r5,1091
 4414af8:	29539704 	addi	r5,r5,20060
 4414afc:	d9402215 	stw	r5,136(sp)
 4414b00:	070001c4 	movi	fp,7
 4414b04:	00000306 	br	4414b14 <___svfiprintf_internal_r+0xaa0>
 4414b08:	843ffc04 	addi	r16,r16,-16
 4414b0c:	42000204 	addi	r8,r8,8
 4414b10:	3c00130e 	bge	r7,r16,4414b60 <___svfiprintf_internal_r+0xaec>
 4414b14:	18c00404 	addi	r3,r3,16
 4414b18:	10800044 	addi	r2,r2,1
 4414b1c:	45000015 	stw	r20,0(r8)
 4414b20:	41c00115 	stw	r7,4(r8)
 4414b24:	d8c01c15 	stw	r3,112(sp)
 4414b28:	d8801b15 	stw	r2,108(sp)
 4414b2c:	e0bff60e 	bge	fp,r2,4414b08 <__reset+0xfb410b08>
 4414b30:	d9801a04 	addi	r6,sp,104
 4414b34:	b80b883a 	mov	r5,r23
 4414b38:	a809883a 	mov	r4,r21
 4414b3c:	d9c02c15 	stw	r7,176(sp)
 4414b40:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414b44:	d9c02c17 	ldw	r7,176(sp)
 4414b48:	1000581e 	bne	r2,zero,4414cac <___svfiprintf_internal_r+0xc38>
 4414b4c:	843ffc04 	addi	r16,r16,-16
 4414b50:	d8c01c17 	ldw	r3,112(sp)
 4414b54:	d8801b17 	ldw	r2,108(sp)
 4414b58:	d811883a 	mov	r8,sp
 4414b5c:	3c3fed16 	blt	r7,r16,4414b14 <__reset+0xfb410b14>
 4414b60:	dac02217 	ldw	r11,136(sp)
 4414b64:	1c07883a 	add	r3,r3,r16
 4414b68:	10800044 	addi	r2,r2,1
 4414b6c:	42c00015 	stw	r11,0(r8)
 4414b70:	44000115 	stw	r16,4(r8)
 4414b74:	d8c01c15 	stw	r3,112(sp)
 4414b78:	d8801b15 	stw	r2,108(sp)
 4414b7c:	010001c4 	movi	r4,7
 4414b80:	20809e16 	blt	r4,r2,4414dfc <___svfiprintf_internal_r+0xd88>
 4414b84:	42000204 	addi	r8,r8,8
 4414b88:	dac02117 	ldw	r11,132(sp)
 4414b8c:	10800044 	addi	r2,r2,1
 4414b90:	44400015 	stw	r17,0(r8)
 4414b94:	58c7883a 	add	r3,r11,r3
 4414b98:	42c00115 	stw	r11,4(r8)
 4414b9c:	d8c01c15 	stw	r3,112(sp)
 4414ba0:	d8801b15 	stw	r2,108(sp)
 4414ba4:	010001c4 	movi	r4,7
 4414ba8:	20807f16 	blt	r4,r2,4414da8 <___svfiprintf_internal_r+0xd34>
 4414bac:	42000204 	addi	r8,r8,8
 4414bb0:	9480010c 	andi	r18,r18,4
 4414bb4:	90002926 	beq	r18,zero,4414c5c <___svfiprintf_internal_r+0xbe8>
 4414bb8:	dac02417 	ldw	r11,144(sp)
 4414bbc:	d8802017 	ldw	r2,128(sp)
 4414bc0:	58a1c83a 	sub	r16,r11,r2
 4414bc4:	0400250e 	bge	zero,r16,4414c5c <___svfiprintf_internal_r+0xbe8>
 4414bc8:	04400404 	movi	r17,16
 4414bcc:	d8801b17 	ldw	r2,108(sp)
 4414bd0:	8c017c0e 	bge	r17,r16,44151c4 <___svfiprintf_internal_r+0x1150>
 4414bd4:	014110f4 	movhi	r5,1091
 4414bd8:	29539b04 	addi	r5,r5,20076
 4414bdc:	d9402815 	stw	r5,160(sp)
 4414be0:	048001c4 	movi	r18,7
 4414be4:	00000306 	br	4414bf4 <___svfiprintf_internal_r+0xb80>
 4414be8:	843ffc04 	addi	r16,r16,-16
 4414bec:	42000204 	addi	r8,r8,8
 4414bf0:	8c00110e 	bge	r17,r16,4414c38 <___svfiprintf_internal_r+0xbc4>
 4414bf4:	18c00404 	addi	r3,r3,16
 4414bf8:	10800044 	addi	r2,r2,1
 4414bfc:	45800015 	stw	r22,0(r8)
 4414c00:	44400115 	stw	r17,4(r8)
 4414c04:	d8c01c15 	stw	r3,112(sp)
 4414c08:	d8801b15 	stw	r2,108(sp)
 4414c0c:	90bff60e 	bge	r18,r2,4414be8 <__reset+0xfb410be8>
 4414c10:	d9801a04 	addi	r6,sp,104
 4414c14:	b80b883a 	mov	r5,r23
 4414c18:	a809883a 	mov	r4,r21
 4414c1c:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414c20:	1000221e 	bne	r2,zero,4414cac <___svfiprintf_internal_r+0xc38>
 4414c24:	843ffc04 	addi	r16,r16,-16
 4414c28:	d8c01c17 	ldw	r3,112(sp)
 4414c2c:	d8801b17 	ldw	r2,108(sp)
 4414c30:	d811883a 	mov	r8,sp
 4414c34:	8c3fef16 	blt	r17,r16,4414bf4 <__reset+0xfb410bf4>
 4414c38:	dac02817 	ldw	r11,160(sp)
 4414c3c:	1c07883a 	add	r3,r3,r16
 4414c40:	10800044 	addi	r2,r2,1
 4414c44:	42c00015 	stw	r11,0(r8)
 4414c48:	44000115 	stw	r16,4(r8)
 4414c4c:	d8c01c15 	stw	r3,112(sp)
 4414c50:	d8801b15 	stw	r2,108(sp)
 4414c54:	010001c4 	movi	r4,7
 4414c58:	2080aa16 	blt	r4,r2,4414f04 <___svfiprintf_internal_r+0xe90>
 4414c5c:	d8802417 	ldw	r2,144(sp)
 4414c60:	dac02017 	ldw	r11,128(sp)
 4414c64:	12c0010e 	bge	r2,r11,4414c6c <___svfiprintf_internal_r+0xbf8>
 4414c68:	5805883a 	mov	r2,r11
 4414c6c:	dac02517 	ldw	r11,148(sp)
 4414c70:	5897883a 	add	r11,r11,r2
 4414c74:	dac02515 	stw	r11,148(sp)
 4414c78:	1800531e 	bne	r3,zero,4414dc8 <___svfiprintf_internal_r+0xd54>
 4414c7c:	98800007 	ldb	r2,0(r19)
 4414c80:	d8001b15 	stw	zero,108(sp)
 4414c84:	d811883a 	mov	r8,sp
 4414c88:	103d231e 	bne	r2,zero,4414118 <__reset+0xfb410118>
 4414c8c:	9823883a 	mov	r17,r19
 4414c90:	003d3906 	br	4414178 <__reset+0xfb410178>
 4414c94:	d8801c17 	ldw	r2,112(sp)
 4414c98:	10000426 	beq	r2,zero,4414cac <___svfiprintf_internal_r+0xc38>
 4414c9c:	d9402717 	ldw	r5,156(sp)
 4414ca0:	d9002a17 	ldw	r4,168(sp)
 4414ca4:	d9801a04 	addi	r6,sp,104
 4414ca8:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414cac:	dac02717 	ldw	r11,156(sp)
 4414cb0:	d8802517 	ldw	r2,148(sp)
 4414cb4:	58c0030b 	ldhu	r3,12(r11)
 4414cb8:	18c0100c 	andi	r3,r3,64
 4414cbc:	1801381e 	bne	r3,zero,44151a0 <___svfiprintf_internal_r+0x112c>
 4414cc0:	dfc03717 	ldw	ra,220(sp)
 4414cc4:	df003617 	ldw	fp,216(sp)
 4414cc8:	ddc03517 	ldw	r23,212(sp)
 4414ccc:	dd803417 	ldw	r22,208(sp)
 4414cd0:	dd403317 	ldw	r21,204(sp)
 4414cd4:	dd003217 	ldw	r20,200(sp)
 4414cd8:	dcc03117 	ldw	r19,196(sp)
 4414cdc:	dc803017 	ldw	r18,192(sp)
 4414ce0:	dc402f17 	ldw	r17,188(sp)
 4414ce4:	dc002e17 	ldw	r16,184(sp)
 4414ce8:	dec03804 	addi	sp,sp,224
 4414cec:	f800283a 	ret
 4414cf0:	dac02417 	ldw	r11,144(sp)
 4414cf4:	d9002017 	ldw	r4,128(sp)
 4414cf8:	5939c83a 	sub	fp,r11,r4
 4414cfc:	073f780e 	bge	zero,fp,4414ae0 <__reset+0xfb410ae0>
 4414d00:	02400404 	movi	r9,16
 4414d04:	4f01370e 	bge	r9,fp,44151e4 <___svfiprintf_internal_r+0x1170>
 4414d08:	02c110f4 	movhi	r11,1091
 4414d0c:	5ad39704 	addi	r11,r11,20060
 4414d10:	dac02215 	stw	r11,136(sp)
 4414d14:	028001c4 	movi	r10,7
 4414d18:	00000306 	br	4414d28 <___svfiprintf_internal_r+0xcb4>
 4414d1c:	e73ffc04 	addi	fp,fp,-16
 4414d20:	42000204 	addi	r8,r8,8
 4414d24:	4f00150e 	bge	r9,fp,4414d7c <___svfiprintf_internal_r+0xd08>
 4414d28:	18c00404 	addi	r3,r3,16
 4414d2c:	10800044 	addi	r2,r2,1
 4414d30:	45000015 	stw	r20,0(r8)
 4414d34:	42400115 	stw	r9,4(r8)
 4414d38:	d8c01c15 	stw	r3,112(sp)
 4414d3c:	d8801b15 	stw	r2,108(sp)
 4414d40:	50bff60e 	bge	r10,r2,4414d1c <__reset+0xfb410d1c>
 4414d44:	d9801a04 	addi	r6,sp,104
 4414d48:	b80b883a 	mov	r5,r23
 4414d4c:	a809883a 	mov	r4,r21
 4414d50:	da402c15 	stw	r9,176(sp)
 4414d54:	da802d15 	stw	r10,180(sp)
 4414d58:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414d5c:	da402c17 	ldw	r9,176(sp)
 4414d60:	da802d17 	ldw	r10,180(sp)
 4414d64:	103fd11e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414d68:	e73ffc04 	addi	fp,fp,-16
 4414d6c:	d8c01c17 	ldw	r3,112(sp)
 4414d70:	d8801b17 	ldw	r2,108(sp)
 4414d74:	d811883a 	mov	r8,sp
 4414d78:	4f3feb16 	blt	r9,fp,4414d28 <__reset+0xfb410d28>
 4414d7c:	dac02217 	ldw	r11,136(sp)
 4414d80:	1f07883a 	add	r3,r3,fp
 4414d84:	10800044 	addi	r2,r2,1
 4414d88:	42c00015 	stw	r11,0(r8)
 4414d8c:	47000115 	stw	fp,4(r8)
 4414d90:	d8c01c15 	stw	r3,112(sp)
 4414d94:	d8801b15 	stw	r2,108(sp)
 4414d98:	010001c4 	movi	r4,7
 4414d9c:	2080b616 	blt	r4,r2,4415078 <___svfiprintf_internal_r+0x1004>
 4414da0:	42000204 	addi	r8,r8,8
 4414da4:	003f4e06 	br	4414ae0 <__reset+0xfb410ae0>
 4414da8:	d9801a04 	addi	r6,sp,104
 4414dac:	b80b883a 	mov	r5,r23
 4414db0:	a809883a 	mov	r4,r21
 4414db4:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414db8:	103fbc1e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414dbc:	d8c01c17 	ldw	r3,112(sp)
 4414dc0:	d811883a 	mov	r8,sp
 4414dc4:	003f7a06 	br	4414bb0 <__reset+0xfb410bb0>
 4414dc8:	d9801a04 	addi	r6,sp,104
 4414dcc:	b80b883a 	mov	r5,r23
 4414dd0:	a809883a 	mov	r4,r21
 4414dd4:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414dd8:	103fa826 	beq	r2,zero,4414c7c <__reset+0xfb410c7c>
 4414ddc:	003fb306 	br	4414cac <__reset+0xfb410cac>
 4414de0:	d9801a04 	addi	r6,sp,104
 4414de4:	b80b883a 	mov	r5,r23
 4414de8:	a809883a 	mov	r4,r21
 4414dec:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414df0:	103fae1e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414df4:	d811883a 	mov	r8,sp
 4414df8:	003cdc06 	br	441416c <__reset+0xfb41016c>
 4414dfc:	d9801a04 	addi	r6,sp,104
 4414e00:	b80b883a 	mov	r5,r23
 4414e04:	a809883a 	mov	r4,r21
 4414e08:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414e0c:	103fa71e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414e10:	d8c01c17 	ldw	r3,112(sp)
 4414e14:	d8801b17 	ldw	r2,108(sp)
 4414e18:	d811883a 	mov	r8,sp
 4414e1c:	003f5a06 	br	4414b88 <__reset+0xfb410b88>
 4414e20:	d9801a04 	addi	r6,sp,104
 4414e24:	b80b883a 	mov	r5,r23
 4414e28:	a809883a 	mov	r4,r21
 4414e2c:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414e30:	103f9e1e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414e34:	d8c01c17 	ldw	r3,112(sp)
 4414e38:	d8801b17 	ldw	r2,108(sp)
 4414e3c:	d811883a 	mov	r8,sp
 4414e40:	003f1706 	br	4414aa0 <__reset+0xfb410aa0>
 4414e44:	d9801a04 	addi	r6,sp,104
 4414e48:	b80b883a 	mov	r5,r23
 4414e4c:	a809883a 	mov	r4,r21
 4414e50:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414e54:	103f951e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414e58:	d8c01c17 	ldw	r3,112(sp)
 4414e5c:	d8801b17 	ldw	r2,108(sp)
 4414e60:	d811883a 	mov	r8,sp
 4414e64:	003f1b06 	br	4414ad4 <__reset+0xfb410ad4>
 4414e68:	d8001d85 	stb	zero,118(sp)
 4414e6c:	80007b16 	blt	r16,zero,441505c <___svfiprintf_internal_r+0xfe8>
 4414e70:	00ffdfc4 	movi	r3,-129
 4414e74:	e244b03a 	or	r2,fp,r9
 4414e78:	90e4703a 	and	r18,r18,r3
 4414e7c:	103d7026 	beq	r2,zero,4414440 <__reset+0xfb410440>
 4414e80:	0015883a 	mov	r10,zero
 4414e84:	003d7206 	br	4414450 <__reset+0xfb410450>
 4414e88:	d9801a04 	addi	r6,sp,104
 4414e8c:	b80b883a 	mov	r5,r23
 4414e90:	a809883a 	mov	r4,r21
 4414e94:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414e98:	103f841e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414e9c:	d8c01c17 	ldw	r3,112(sp)
 4414ea0:	d8801b17 	ldw	r2,108(sp)
 4414ea4:	d811883a 	mov	r8,sp
 4414ea8:	003ef006 	br	4414a6c <__reset+0xfb410a6c>
 4414eac:	9080100c 	andi	r2,r18,64
 4414eb0:	d8001d85 	stb	zero,118(sp)
 4414eb4:	dac02317 	ldw	r11,140(sp)
 4414eb8:	10008126 	beq	r2,zero,44150c0 <___svfiprintf_internal_r+0x104c>
 4414ebc:	58800104 	addi	r2,r11,4
 4414ec0:	5f00000b 	ldhu	fp,0(r11)
 4414ec4:	0013883a 	mov	r9,zero
 4414ec8:	803ec30e 	bge	r16,zero,44149d8 <__reset+0xfb4109d8>
 4414ecc:	d8802315 	stw	r2,140(sp)
 4414ed0:	0015883a 	mov	r10,zero
 4414ed4:	e244b03a 	or	r2,fp,r9
 4414ed8:	103e371e 	bne	r2,zero,44147b8 <__reset+0xfb4107b8>
 4414edc:	00800044 	movi	r2,1
 4414ee0:	10803fcc 	andi	r2,r2,255
 4414ee4:	00c00044 	movi	r3,1
 4414ee8:	10c06126 	beq	r2,r3,4415070 <___svfiprintf_internal_r+0xffc>
 4414eec:	00c00084 	movi	r3,2
 4414ef0:	10fd5526 	beq	r2,r3,4414448 <__reset+0xfb410448>
 4414ef4:	003ed806 	br	4414a58 <__reset+0xfb410a58>
 4414ef8:	d8802315 	stw	r2,140(sp)
 4414efc:	98c00007 	ldb	r3,0(r19)
 4414f00:	003cab06 	br	44141b0 <__reset+0xfb4101b0>
 4414f04:	d9801a04 	addi	r6,sp,104
 4414f08:	b80b883a 	mov	r5,r23
 4414f0c:	a809883a 	mov	r4,r21
 4414f10:	4413ea40 	call	4413ea4 <__ssprint_r>
 4414f14:	103f651e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 4414f18:	d8c01c17 	ldw	r3,112(sp)
 4414f1c:	003f4f06 	br	4414c5c <__reset+0xfb410c5c>
 4414f20:	008110f4 	movhi	r2,1091
 4414f24:	10932f04 	addi	r2,r2,19644
 4414f28:	d8802915 	stw	r2,164(sp)
 4414f2c:	003d4406 	br	4414440 <__reset+0xfb410440>
 4414f30:	dac02317 	ldw	r11,140(sp)
 4414f34:	58800017 	ldw	r2,0(r11)
 4414f38:	dac02517 	ldw	r11,148(sp)
 4414f3c:	5807d7fa 	srai	r3,r11,31
 4414f40:	dac02317 	ldw	r11,140(sp)
 4414f44:	10c00115 	stw	r3,4(r2)
 4414f48:	5ac00104 	addi	r11,r11,4
 4414f4c:	dac02315 	stw	r11,140(sp)
 4414f50:	dac02517 	ldw	r11,148(sp)
 4414f54:	12c00015 	stw	r11,0(r2)
 4414f58:	003c6d06 	br	4414110 <__reset+0xfb410110>
 4414f5c:	9080100c 	andi	r2,r18,64
 4414f60:	dac02317 	ldw	r11,140(sp)
 4414f64:	103e5326 	beq	r2,zero,44148b4 <__reset+0xfb4108b4>
 4414f68:	5f00000f 	ldh	fp,0(r11)
 4414f6c:	5ac00104 	addi	r11,r11,4
 4414f70:	dac02315 	stw	r11,140(sp)
 4414f74:	e013d7fa 	srai	r9,fp,31
 4414f78:	4805883a 	mov	r2,r9
 4414f7c:	003e0706 	br	441479c <__reset+0xfb41079c>
 4414f80:	00800c04 	movi	r2,48
 4414f84:	d8801d05 	stb	r2,116(sp)
 4414f88:	d8c01d45 	stb	r3,117(sp)
 4414f8c:	d8001d85 	stb	zero,118(sp)
 4414f90:	90800094 	ori	r2,r18,2
 4414f94:	80008f16 	blt	r16,zero,44151d4 <___svfiprintf_internal_r+0x1160>
 4414f98:	00bfdfc4 	movi	r2,-129
 4414f9c:	90a4703a 	and	r18,r18,r2
 4414fa0:	94800094 	ori	r18,r18,2
 4414fa4:	0015883a 	mov	r10,zero
 4414fa8:	003d2906 	br	4414450 <__reset+0xfb410450>
 4414fac:	98c00007 	ldb	r3,0(r19)
 4414fb0:	003c7f06 	br	44141b0 <__reset+0xfb4101b0>
 4414fb4:	dac02317 	ldw	r11,140(sp)
 4414fb8:	0013883a 	mov	r9,zero
 4414fbc:	5f000017 	ldw	fp,0(r11)
 4414fc0:	5ac00104 	addi	r11,r11,4
 4414fc4:	dac02315 	stw	r11,140(sp)
 4414fc8:	003d1506 	br	4414420 <__reset+0xfb410420>
 4414fcc:	9080100c 	andi	r2,r18,64
 4414fd0:	d8001d85 	stb	zero,118(sp)
 4414fd4:	dac02317 	ldw	r11,140(sp)
 4414fd8:	10003426 	beq	r2,zero,44150ac <___svfiprintf_internal_r+0x1038>
 4414fdc:	58800104 	addi	r2,r11,4
 4414fe0:	5f00000b 	ldhu	fp,0(r11)
 4414fe4:	0013883a 	mov	r9,zero
 4414fe8:	803e950e 	bge	r16,zero,4414a40 <__reset+0xfb410a40>
 4414fec:	e246b03a 	or	r3,fp,r9
 4414ff0:	d8802315 	stw	r2,140(sp)
 4414ff4:	183d5a1e 	bne	r3,zero,4414560 <__reset+0xfb410560>
 4414ff8:	0015883a 	mov	r10,zero
 4414ffc:	0005883a 	mov	r2,zero
 4415000:	003fb706 	br	4414ee0 <__reset+0xfb410ee0>
 4415004:	98c00043 	ldbu	r3,1(r19)
 4415008:	94800814 	ori	r18,r18,32
 441500c:	9cc00044 	addi	r19,r19,1
 4415010:	18c03fcc 	andi	r3,r3,255
 4415014:	18c0201c 	xori	r3,r3,128
 4415018:	18ffe004 	addi	r3,r3,-128
 441501c:	003c6406 	br	44141b0 <__reset+0xfb4101b0>
 4415020:	d8c02315 	stw	r3,140(sp)
 4415024:	0015883a 	mov	r10,zero
 4415028:	003faa06 	br	4414ed4 <__reset+0xfb410ed4>
 441502c:	dac02317 	ldw	r11,140(sp)
 4415030:	58800017 	ldw	r2,0(r11)
 4415034:	5ac00104 	addi	r11,r11,4
 4415038:	dac02315 	stw	r11,140(sp)
 441503c:	dac02517 	ldw	r11,148(sp)
 4415040:	12c00015 	stw	r11,0(r2)
 4415044:	003c3206 	br	4414110 <__reset+0xfb410110>
 4415048:	010110f4 	movhi	r4,1091
 441504c:	21132f04 	addi	r4,r4,19644
 4415050:	d9002915 	stw	r4,164(sp)
 4415054:	d8c02315 	stw	r3,140(sp)
 4415058:	1025883a 	mov	r18,r2
 441505c:	e244b03a 	or	r2,fp,r9
 4415060:	103f871e 	bne	r2,zero,4414e80 <__reset+0xfb410e80>
 4415064:	0015883a 	mov	r10,zero
 4415068:	00800084 	movi	r2,2
 441506c:	003f9c06 	br	4414ee0 <__reset+0xfb410ee0>
 4415070:	0039883a 	mov	fp,zero
 4415074:	003e5f06 	br	44149f4 <__reset+0xfb4109f4>
 4415078:	d9801a04 	addi	r6,sp,104
 441507c:	b80b883a 	mov	r5,r23
 4415080:	a809883a 	mov	r4,r21
 4415084:	4413ea40 	call	4413ea4 <__ssprint_r>
 4415088:	103f081e 	bne	r2,zero,4414cac <__reset+0xfb410cac>
 441508c:	d8c01c17 	ldw	r3,112(sp)
 4415090:	d8801b17 	ldw	r2,108(sp)
 4415094:	d811883a 	mov	r8,sp
 4415098:	003e9106 	br	4414ae0 <__reset+0xfb410ae0>
 441509c:	010110f4 	movhi	r4,1091
 44150a0:	21139704 	addi	r4,r4,20060
 44150a4:	d9002215 	stw	r4,136(sp)
 44150a8:	003ead06 	br	4414b60 <__reset+0xfb410b60>
 44150ac:	58800104 	addi	r2,r11,4
 44150b0:	5f000017 	ldw	fp,0(r11)
 44150b4:	0013883a 	mov	r9,zero
 44150b8:	803e610e 	bge	r16,zero,4414a40 <__reset+0xfb410a40>
 44150bc:	003fcb06 	br	4414fec <__reset+0xfb410fec>
 44150c0:	58800104 	addi	r2,r11,4
 44150c4:	5f000017 	ldw	fp,0(r11)
 44150c8:	0013883a 	mov	r9,zero
 44150cc:	803e420e 	bge	r16,zero,44149d8 <__reset+0xfb4109d8>
 44150d0:	003f7e06 	br	4414ecc <__reset+0xfb410ecc>
 44150d4:	5f000017 	ldw	fp,0(r11)
 44150d8:	5ac00104 	addi	r11,r11,4
 44150dc:	0013883a 	mov	r9,zero
 44150e0:	dac02315 	stw	r11,140(sp)
 44150e4:	003cce06 	br	4414420 <__reset+0xfb410420>
 44150e8:	8809883a 	mov	r4,r17
 44150ec:	da002c15 	stw	r8,176(sp)
 44150f0:	440b1540 	call	440b154 <strlen>
 44150f4:	d8802115 	stw	r2,132(sp)
 44150f8:	da801d83 	ldbu	r10,118(sp)
 44150fc:	df002315 	stw	fp,140(sp)
 4415100:	0021883a 	mov	r16,zero
 4415104:	da002c17 	ldw	r8,176(sp)
 4415108:	003cf606 	br	44144e4 <__reset+0xfb4104e4>
 441510c:	00800184 	movi	r2,6
 4415110:	1400012e 	bgeu	r2,r16,4415118 <___svfiprintf_internal_r+0x10a4>
 4415114:	1021883a 	mov	r16,r2
 4415118:	dc002115 	stw	r16,132(sp)
 441511c:	8005883a 	mov	r2,r16
 4415120:	80003c16 	blt	r16,zero,4415214 <___svfiprintf_internal_r+0x11a0>
 4415124:	044110f4 	movhi	r17,1091
 4415128:	d8802015 	stw	r2,128(sp)
 441512c:	df002315 	stw	fp,140(sp)
 4415130:	8c533404 	addi	r17,r17,19664
 4415134:	003d2e06 	br	44145f0 <__reset+0xfb4105f0>
 4415138:	04001004 	movi	r16,64
 441513c:	800b883a 	mov	r5,r16
 4415140:	440a3f00 	call	440a3f0 <_malloc_r>
 4415144:	dac02717 	ldw	r11,156(sp)
 4415148:	58800015 	stw	r2,0(r11)
 441514c:	58800415 	stw	r2,16(r11)
 4415150:	10004826 	beq	r2,zero,4415274 <___svfiprintf_internal_r+0x1200>
 4415154:	dac02717 	ldw	r11,156(sp)
 4415158:	5c000515 	stw	r16,20(r11)
 441515c:	003bd906 	br	44140c4 <__reset+0xfb4100c4>
 4415160:	9080004c 	andi	r2,r18,1
 4415164:	0015883a 	mov	r10,zero
 4415168:	10000626 	beq	r2,zero,4415184 <___svfiprintf_internal_r+0x1110>
 441516c:	dac02b17 	ldw	r11,172(sp)
 4415170:	00800c04 	movi	r2,48
 4415174:	d88019c5 	stb	r2,103(sp)
 4415178:	dac02115 	stw	r11,132(sp)
 441517c:	dc4019c4 	addi	r17,sp,103
 4415180:	003cd806 	br	44144e4 <__reset+0xfb4104e4>
 4415184:	d8002115 	stw	zero,132(sp)
 4415188:	dc401a04 	addi	r17,sp,104
 441518c:	003cd506 	br	44144e4 <__reset+0xfb4104e4>
 4415190:	010110f4 	movhi	r4,1091
 4415194:	21139b04 	addi	r4,r4,20076
 4415198:	d9002815 	stw	r4,160(sp)
 441519c:	003d4306 	br	44146ac <__reset+0xfb4106ac>
 44151a0:	00bfffc4 	movi	r2,-1
 44151a4:	003ec606 	br	4414cc0 <__reset+0xfb410cc0>
 44151a8:	00800044 	movi	r2,1
 44151ac:	10803fcc 	andi	r2,r2,255
 44151b0:	00c00044 	movi	r3,1
 44151b4:	10fd8026 	beq	r2,r3,44147b8 <__reset+0xfb4107b8>
 44151b8:	00c00084 	movi	r3,2
 44151bc:	10fca426 	beq	r2,r3,4414450 <__reset+0xfb410450>
 44151c0:	003ce806 	br	4414564 <__reset+0xfb410564>
 44151c4:	010110f4 	movhi	r4,1091
 44151c8:	21139b04 	addi	r4,r4,20076
 44151cc:	d9002815 	stw	r4,160(sp)
 44151d0:	003e9906 	br	4414c38 <__reset+0xfb410c38>
 44151d4:	1025883a 	mov	r18,r2
 44151d8:	0015883a 	mov	r10,zero
 44151dc:	00800084 	movi	r2,2
 44151e0:	003ff206 	br	44151ac <__reset+0xfb4111ac>
 44151e4:	014110f4 	movhi	r5,1091
 44151e8:	29539704 	addi	r5,r5,20060
 44151ec:	d9402215 	stw	r5,136(sp)
 44151f0:	003ee206 	br	4414d7c <__reset+0xfb410d7c>
 44151f4:	5827883a 	mov	r19,r11
 44151f8:	0021883a 	mov	r16,zero
 44151fc:	003bed06 	br	44141b4 <__reset+0xfb4101b4>
 4415200:	dc002115 	stw	r16,132(sp)
 4415204:	da801d83 	ldbu	r10,118(sp)
 4415208:	df002315 	stw	fp,140(sp)
 441520c:	0021883a 	mov	r16,zero
 4415210:	003cb406 	br	44144e4 <__reset+0xfb4104e4>
 4415214:	0005883a 	mov	r2,zero
 4415218:	003fc206 	br	4415124 <__reset+0xfb411124>
 441521c:	d8802317 	ldw	r2,140(sp)
 4415220:	98c00043 	ldbu	r3,1(r19)
 4415224:	5827883a 	mov	r19,r11
 4415228:	14000017 	ldw	r16,0(r2)
 441522c:	10800104 	addi	r2,r2,4
 4415230:	d8802315 	stw	r2,140(sp)
 4415234:	803f760e 	bge	r16,zero,4415010 <__reset+0xfb411010>
 4415238:	18c03fcc 	andi	r3,r3,255
 441523c:	18c0201c 	xori	r3,r3,128
 4415240:	043fffc4 	movi	r16,-1
 4415244:	18ffe004 	addi	r3,r3,-128
 4415248:	003bd906 	br	44141b0 <__reset+0xfb4101b0>
 441524c:	d9c01d85 	stb	r7,118(sp)
 4415250:	003cb606 	br	441452c <__reset+0xfb41052c>
 4415254:	d9c01d85 	stb	r7,118(sp)
 4415258:	003d2106 	br	44146e0 <__reset+0xfb4106e0>
 441525c:	d9c01d85 	stb	r7,118(sp)
 4415260:	003d8e06 	br	441489c <__reset+0xfb41089c>
 4415264:	d9c01d85 	stb	r7,118(sp)
 4415268:	003db306 	br	4414938 <__reset+0xfb410938>
 441526c:	d9c01d85 	stb	r7,118(sp)
 4415270:	003c8a06 	br	441449c <__reset+0xfb41049c>
 4415274:	dac02a17 	ldw	r11,168(sp)
 4415278:	00800304 	movi	r2,12
 441527c:	58800015 	stw	r2,0(r11)
 4415280:	00bfffc4 	movi	r2,-1
 4415284:	003e8e06 	br	4414cc0 <__reset+0xfb410cc0>
 4415288:	d9c01d85 	stb	r7,118(sp)
 441528c:	003dc706 	br	44149ac <__reset+0xfb4109ac>
 4415290:	d9c01d85 	stb	r7,118(sp)
 4415294:	003ddf06 	br	4414a14 <__reset+0xfb410a14>
 4415298:	d9c01d85 	stb	r7,118(sp)
 441529c:	003d3706 	br	441477c <__reset+0xfb41077c>
 44152a0:	d9c01d85 	stb	r7,118(sp)
 44152a4:	003c5406 	br	44143f8 <__reset+0xfb4103f8>
 44152a8:	d9c01d85 	stb	r7,118(sp)
 44152ac:	003d1d06 	br	4414724 <__reset+0xfb410724>

044152b0 <__sprint_r.part.0>:
 44152b0:	28801917 	ldw	r2,100(r5)
 44152b4:	defff604 	addi	sp,sp,-40
 44152b8:	dd400515 	stw	r21,20(sp)
 44152bc:	dfc00915 	stw	ra,36(sp)
 44152c0:	df000815 	stw	fp,32(sp)
 44152c4:	ddc00715 	stw	r23,28(sp)
 44152c8:	dd800615 	stw	r22,24(sp)
 44152cc:	dd000415 	stw	r20,16(sp)
 44152d0:	dcc00315 	stw	r19,12(sp)
 44152d4:	dc800215 	stw	r18,8(sp)
 44152d8:	dc400115 	stw	r17,4(sp)
 44152dc:	dc000015 	stw	r16,0(sp)
 44152e0:	1088000c 	andi	r2,r2,8192
 44152e4:	302b883a 	mov	r21,r6
 44152e8:	10002e26 	beq	r2,zero,44153a4 <__sprint_r.part.0+0xf4>
 44152ec:	30800217 	ldw	r2,8(r6)
 44152f0:	35800017 	ldw	r22,0(r6)
 44152f4:	10002926 	beq	r2,zero,441539c <__sprint_r.part.0+0xec>
 44152f8:	2827883a 	mov	r19,r5
 44152fc:	2029883a 	mov	r20,r4
 4415300:	b5c00104 	addi	r23,r22,4
 4415304:	04bfffc4 	movi	r18,-1
 4415308:	bc400017 	ldw	r17,0(r23)
 441530c:	b4000017 	ldw	r16,0(r22)
 4415310:	0039883a 	mov	fp,zero
 4415314:	8822d0ba 	srli	r17,r17,2
 4415318:	8800031e 	bne	r17,zero,4415328 <__sprint_r.part.0+0x78>
 441531c:	00001806 	br	4415380 <__sprint_r.part.0+0xd0>
 4415320:	84000104 	addi	r16,r16,4
 4415324:	8f001526 	beq	r17,fp,441537c <__sprint_r.part.0+0xcc>
 4415328:	81400017 	ldw	r5,0(r16)
 441532c:	980d883a 	mov	r6,r19
 4415330:	a009883a 	mov	r4,r20
 4415334:	4416cd80 	call	4416cd8 <_fputwc_r>
 4415338:	e7000044 	addi	fp,fp,1
 441533c:	14bff81e 	bne	r2,r18,4415320 <__reset+0xfb411320>
 4415340:	9005883a 	mov	r2,r18
 4415344:	a8000215 	stw	zero,8(r21)
 4415348:	a8000115 	stw	zero,4(r21)
 441534c:	dfc00917 	ldw	ra,36(sp)
 4415350:	df000817 	ldw	fp,32(sp)
 4415354:	ddc00717 	ldw	r23,28(sp)
 4415358:	dd800617 	ldw	r22,24(sp)
 441535c:	dd400517 	ldw	r21,20(sp)
 4415360:	dd000417 	ldw	r20,16(sp)
 4415364:	dcc00317 	ldw	r19,12(sp)
 4415368:	dc800217 	ldw	r18,8(sp)
 441536c:	dc400117 	ldw	r17,4(sp)
 4415370:	dc000017 	ldw	r16,0(sp)
 4415374:	dec00a04 	addi	sp,sp,40
 4415378:	f800283a 	ret
 441537c:	a8800217 	ldw	r2,8(r21)
 4415380:	8c63883a 	add	r17,r17,r17
 4415384:	8c63883a 	add	r17,r17,r17
 4415388:	1445c83a 	sub	r2,r2,r17
 441538c:	a8800215 	stw	r2,8(r21)
 4415390:	b5800204 	addi	r22,r22,8
 4415394:	bdc00204 	addi	r23,r23,8
 4415398:	103fdb1e 	bne	r2,zero,4415308 <__reset+0xfb411308>
 441539c:	0005883a 	mov	r2,zero
 44153a0:	003fe806 	br	4415344 <__reset+0xfb411344>
 44153a4:	4411c100 	call	4411c10 <__sfvwrite_r>
 44153a8:	003fe606 	br	4415344 <__reset+0xfb411344>

044153ac <__sprint_r>:
 44153ac:	30c00217 	ldw	r3,8(r6)
 44153b0:	18000126 	beq	r3,zero,44153b8 <__sprint_r+0xc>
 44153b4:	44152b01 	jmpi	44152b0 <__sprint_r.part.0>
 44153b8:	30000115 	stw	zero,4(r6)
 44153bc:	0005883a 	mov	r2,zero
 44153c0:	f800283a 	ret

044153c4 <___vfiprintf_internal_r>:
 44153c4:	deffc904 	addi	sp,sp,-220
 44153c8:	df003515 	stw	fp,212(sp)
 44153cc:	dd003115 	stw	r20,196(sp)
 44153d0:	dfc03615 	stw	ra,216(sp)
 44153d4:	ddc03415 	stw	r23,208(sp)
 44153d8:	dd803315 	stw	r22,204(sp)
 44153dc:	dd403215 	stw	r21,200(sp)
 44153e0:	dcc03015 	stw	r19,192(sp)
 44153e4:	dc802f15 	stw	r18,188(sp)
 44153e8:	dc402e15 	stw	r17,184(sp)
 44153ec:	dc002d15 	stw	r16,180(sp)
 44153f0:	d9002015 	stw	r4,128(sp)
 44153f4:	d9c02215 	stw	r7,136(sp)
 44153f8:	2829883a 	mov	r20,r5
 44153fc:	3039883a 	mov	fp,r6
 4415400:	20000226 	beq	r4,zero,441540c <___vfiprintf_internal_r+0x48>
 4415404:	20800e17 	ldw	r2,56(r4)
 4415408:	1000cf26 	beq	r2,zero,4415748 <___vfiprintf_internal_r+0x384>
 441540c:	a080030b 	ldhu	r2,12(r20)
 4415410:	10c8000c 	andi	r3,r2,8192
 4415414:	1800061e 	bne	r3,zero,4415430 <___vfiprintf_internal_r+0x6c>
 4415418:	a1001917 	ldw	r4,100(r20)
 441541c:	00f7ffc4 	movi	r3,-8193
 4415420:	10880014 	ori	r2,r2,8192
 4415424:	20c6703a 	and	r3,r4,r3
 4415428:	a080030d 	sth	r2,12(r20)
 441542c:	a0c01915 	stw	r3,100(r20)
 4415430:	10c0020c 	andi	r3,r2,8
 4415434:	1800a926 	beq	r3,zero,44156dc <___vfiprintf_internal_r+0x318>
 4415438:	a0c00417 	ldw	r3,16(r20)
 441543c:	1800a726 	beq	r3,zero,44156dc <___vfiprintf_internal_r+0x318>
 4415440:	1080068c 	andi	r2,r2,26
 4415444:	00c00284 	movi	r3,10
 4415448:	10c0ac26 	beq	r2,r3,44156fc <___vfiprintf_internal_r+0x338>
 441544c:	da801a04 	addi	r10,sp,104
 4415450:	da801e15 	stw	r10,120(sp)
 4415454:	d8801e17 	ldw	r2,120(sp)
 4415458:	da8019c4 	addi	r10,sp,103
 441545c:	058110f4 	movhi	r22,1091
 4415460:	05c110f4 	movhi	r23,1091
 4415464:	da801f15 	stw	r10,124(sp)
 4415468:	1295c83a 	sub	r10,r2,r10
 441546c:	b593a304 	addi	r22,r22,20108
 4415470:	bdd39f04 	addi	r23,r23,20092
 4415474:	dec01a15 	stw	sp,104(sp)
 4415478:	d8001c15 	stw	zero,112(sp)
 441547c:	d8001b15 	stw	zero,108(sp)
 4415480:	d8002615 	stw	zero,152(sp)
 4415484:	d8002315 	stw	zero,140(sp)
 4415488:	da802715 	stw	r10,156(sp)
 441548c:	d811883a 	mov	r8,sp
 4415490:	dd002115 	stw	r20,132(sp)
 4415494:	e021883a 	mov	r16,fp
 4415498:	80800007 	ldb	r2,0(r16)
 441549c:	1003ea26 	beq	r2,zero,4416448 <___vfiprintf_internal_r+0x1084>
 44154a0:	00c00944 	movi	r3,37
 44154a4:	8025883a 	mov	r18,r16
 44154a8:	10c0021e 	bne	r2,r3,44154b4 <___vfiprintf_internal_r+0xf0>
 44154ac:	00001606 	br	4415508 <___vfiprintf_internal_r+0x144>
 44154b0:	10c00326 	beq	r2,r3,44154c0 <___vfiprintf_internal_r+0xfc>
 44154b4:	94800044 	addi	r18,r18,1
 44154b8:	90800007 	ldb	r2,0(r18)
 44154bc:	103ffc1e 	bne	r2,zero,44154b0 <__reset+0xfb4114b0>
 44154c0:	9423c83a 	sub	r17,r18,r16
 44154c4:	88001026 	beq	r17,zero,4415508 <___vfiprintf_internal_r+0x144>
 44154c8:	d8c01c17 	ldw	r3,112(sp)
 44154cc:	d8801b17 	ldw	r2,108(sp)
 44154d0:	44000015 	stw	r16,0(r8)
 44154d4:	88c7883a 	add	r3,r17,r3
 44154d8:	10800044 	addi	r2,r2,1
 44154dc:	44400115 	stw	r17,4(r8)
 44154e0:	d8c01c15 	stw	r3,112(sp)
 44154e4:	d8801b15 	stw	r2,108(sp)
 44154e8:	010001c4 	movi	r4,7
 44154ec:	2080760e 	bge	r4,r2,44156c8 <___vfiprintf_internal_r+0x304>
 44154f0:	1803821e 	bne	r3,zero,44162fc <___vfiprintf_internal_r+0xf38>
 44154f4:	da802317 	ldw	r10,140(sp)
 44154f8:	d8001b15 	stw	zero,108(sp)
 44154fc:	d811883a 	mov	r8,sp
 4415500:	5455883a 	add	r10,r10,r17
 4415504:	da802315 	stw	r10,140(sp)
 4415508:	90800007 	ldb	r2,0(r18)
 441550c:	10044626 	beq	r2,zero,4416628 <___vfiprintf_internal_r+0x1264>
 4415510:	90c00047 	ldb	r3,1(r18)
 4415514:	94000044 	addi	r16,r18,1
 4415518:	d8001d85 	stb	zero,118(sp)
 441551c:	0009883a 	mov	r4,zero
 4415520:	000f883a 	mov	r7,zero
 4415524:	027fffc4 	movi	r9,-1
 4415528:	0023883a 	mov	r17,zero
 441552c:	0029883a 	mov	r20,zero
 4415530:	01401604 	movi	r5,88
 4415534:	01800244 	movi	r6,9
 4415538:	03400a84 	movi	r13,42
 441553c:	03001b04 	movi	r12,108
 4415540:	84000044 	addi	r16,r16,1
 4415544:	18bff804 	addi	r2,r3,-32
 4415548:	28827336 	bltu	r5,r2,4415f18 <___vfiprintf_internal_r+0xb54>
 441554c:	100490ba 	slli	r2,r2,2
 4415550:	02811074 	movhi	r10,1089
 4415554:	52955904 	addi	r10,r10,21860
 4415558:	1285883a 	add	r2,r2,r10
 441555c:	10800017 	ldw	r2,0(r2)
 4415560:	1000683a 	jmp	r2
 4415564:	04415c4c 	andi	r17,zero,1393
 4415568:	04415f18 	cmpnei	r17,zero,1404
 441556c:	04415f18 	cmpnei	r17,zero,1404
 4415570:	04415c6c 	andhi	r17,zero,1393
 4415574:	04415f18 	cmpnei	r17,zero,1404
 4415578:	04415f18 	cmpnei	r17,zero,1404
 441557c:	04415f18 	cmpnei	r17,zero,1404
 4415580:	04415f18 	cmpnei	r17,zero,1404
 4415584:	04415f18 	cmpnei	r17,zero,1404
 4415588:	04415f18 	cmpnei	r17,zero,1404
 441558c:	04415e54 	movui	r17,1401
 4415590:	04415e70 	cmpltui	r17,zero,1401
 4415594:	04415f18 	cmpnei	r17,zero,1404
 4415598:	04415758 	cmpnei	r17,zero,1373
 441559c:	04415e80 	call	4415e8 <__alt_mem_sdram-0x3bbea18>
 44155a0:	04415f18 	cmpnei	r17,zero,1404
 44155a4:	04415c78 	rdprs	r17,zero,1393
 44155a8:	04415c84 	movi	r17,1394
 44155ac:	04415c84 	movi	r17,1394
 44155b0:	04415c84 	movi	r17,1394
 44155b4:	04415c84 	movi	r17,1394
 44155b8:	04415c84 	movi	r17,1394
 44155bc:	04415c84 	movi	r17,1394
 44155c0:	04415c84 	movi	r17,1394
 44155c4:	04415c84 	movi	r17,1394
 44155c8:	04415c84 	movi	r17,1394
 44155cc:	04415f18 	cmpnei	r17,zero,1404
 44155d0:	04415f18 	cmpnei	r17,zero,1404
 44155d4:	04415f18 	cmpnei	r17,zero,1404
 44155d8:	04415f18 	cmpnei	r17,zero,1404
 44155dc:	04415f18 	cmpnei	r17,zero,1404
 44155e0:	04415f18 	cmpnei	r17,zero,1404
 44155e4:	04415f18 	cmpnei	r17,zero,1404
 44155e8:	04415f18 	cmpnei	r17,zero,1404
 44155ec:	04415f18 	cmpnei	r17,zero,1404
 44155f0:	04415f18 	cmpnei	r17,zero,1404
 44155f4:	04415cb0 	cmpltui	r17,zero,1394
 44155f8:	04415f18 	cmpnei	r17,zero,1404
 44155fc:	04415f18 	cmpnei	r17,zero,1404
 4415600:	04415f18 	cmpnei	r17,zero,1404
 4415604:	04415f18 	cmpnei	r17,zero,1404
 4415608:	04415f18 	cmpnei	r17,zero,1404
 441560c:	04415f18 	cmpnei	r17,zero,1404
 4415610:	04415f18 	cmpnei	r17,zero,1404
 4415614:	04415f18 	cmpnei	r17,zero,1404
 4415618:	04415f18 	cmpnei	r17,zero,1404
 441561c:	04415f18 	cmpnei	r17,zero,1404
 4415620:	04415ce8 	cmpgeui	r17,zero,1395
 4415624:	04415f18 	cmpnei	r17,zero,1404
 4415628:	04415f18 	cmpnei	r17,zero,1404
 441562c:	04415f18 	cmpnei	r17,zero,1404
 4415630:	04415f18 	cmpnei	r17,zero,1404
 4415634:	04415f18 	cmpnei	r17,zero,1404
 4415638:	04415d40 	call	4415d4 <__alt_mem_sdram-0x3bbea2c>
 441563c:	04415f18 	cmpnei	r17,zero,1404
 4415640:	04415f18 	cmpnei	r17,zero,1404
 4415644:	04415db0 	cmpltui	r17,zero,1398
 4415648:	04415f18 	cmpnei	r17,zero,1404
 441564c:	04415f18 	cmpnei	r17,zero,1404
 4415650:	04415f18 	cmpnei	r17,zero,1404
 4415654:	04415f18 	cmpnei	r17,zero,1404
 4415658:	04415f18 	cmpnei	r17,zero,1404
 441565c:	04415f18 	cmpnei	r17,zero,1404
 4415660:	04415f18 	cmpnei	r17,zero,1404
 4415664:	04415f18 	cmpnei	r17,zero,1404
 4415668:	04415f18 	cmpnei	r17,zero,1404
 441566c:	04415f18 	cmpnei	r17,zero,1404
 4415670:	04415b5c 	xori	r17,zero,1389
 4415674:	04415b88 	cmpgei	r17,zero,1390
 4415678:	04415f18 	cmpnei	r17,zero,1404
 441567c:	04415f18 	cmpnei	r17,zero,1404
 4415680:	04415f18 	cmpnei	r17,zero,1404
 4415684:	04415ec0 	call	4415ec <__alt_mem_sdram-0x3bbea14>
 4415688:	04415b88 	cmpgei	r17,zero,1390
 441568c:	04415f18 	cmpnei	r17,zero,1404
 4415690:	04415f18 	cmpnei	r17,zero,1404
 4415694:	04415a1c 	xori	r17,zero,1384
 4415698:	04415f18 	cmpnei	r17,zero,1404
 441569c:	04415a2c 	andhi	r17,zero,1384
 44156a0:	04415a68 	cmpgeui	r17,zero,1385
 44156a4:	04415764 	muli	r17,zero,1373
 44156a8:	04415a10 	cmplti	r17,zero,1384
 44156ac:	04415f18 	cmpnei	r17,zero,1404
 44156b0:	04415dec 	andhi	r17,zero,1399
 44156b4:	04415f18 	cmpnei	r17,zero,1404
 44156b8:	04415e44 	movi	r17,1401
 44156bc:	04415f18 	cmpnei	r17,zero,1404
 44156c0:	04415f18 	cmpnei	r17,zero,1404
 44156c4:	04415b08 	cmpgei	r17,zero,1388
 44156c8:	42000204 	addi	r8,r8,8
 44156cc:	da802317 	ldw	r10,140(sp)
 44156d0:	5455883a 	add	r10,r10,r17
 44156d4:	da802315 	stw	r10,140(sp)
 44156d8:	003f8b06 	br	4415508 <__reset+0xfb411508>
 44156dc:	d9002017 	ldw	r4,128(sp)
 44156e0:	a00b883a 	mov	r5,r20
 44156e4:	440f7b80 	call	440f7b8 <__swsetup_r>
 44156e8:	1003b11e 	bne	r2,zero,44165b0 <___vfiprintf_internal_r+0x11ec>
 44156ec:	a080030b 	ldhu	r2,12(r20)
 44156f0:	00c00284 	movi	r3,10
 44156f4:	1080068c 	andi	r2,r2,26
 44156f8:	10ff541e 	bne	r2,r3,441544c <__reset+0xfb41144c>
 44156fc:	a080038f 	ldh	r2,14(r20)
 4415700:	103f5216 	blt	r2,zero,441544c <__reset+0xfb41144c>
 4415704:	d9c02217 	ldw	r7,136(sp)
 4415708:	d9002017 	ldw	r4,128(sp)
 441570c:	e00d883a 	mov	r6,fp
 4415710:	a00b883a 	mov	r5,r20
 4415714:	441683c0 	call	441683c <__sbprintf>
 4415718:	dfc03617 	ldw	ra,216(sp)
 441571c:	df003517 	ldw	fp,212(sp)
 4415720:	ddc03417 	ldw	r23,208(sp)
 4415724:	dd803317 	ldw	r22,204(sp)
 4415728:	dd403217 	ldw	r21,200(sp)
 441572c:	dd003117 	ldw	r20,196(sp)
 4415730:	dcc03017 	ldw	r19,192(sp)
 4415734:	dc802f17 	ldw	r18,188(sp)
 4415738:	dc402e17 	ldw	r17,184(sp)
 441573c:	dc002d17 	ldw	r16,180(sp)
 4415740:	dec03704 	addi	sp,sp,220
 4415744:	f800283a 	ret
 4415748:	441178c0 	call	441178c <__sinit>
 441574c:	003f2f06 	br	441540c <__reset+0xfb41140c>
 4415750:	0463c83a 	sub	r17,zero,r17
 4415754:	d8802215 	stw	r2,136(sp)
 4415758:	a5000114 	ori	r20,r20,4
 441575c:	80c00007 	ldb	r3,0(r16)
 4415760:	003f7706 	br	4415540 <__reset+0xfb411540>
 4415764:	00800c04 	movi	r2,48
 4415768:	da802217 	ldw	r10,136(sp)
 441576c:	d8801d05 	stb	r2,116(sp)
 4415770:	00801e04 	movi	r2,120
 4415774:	d8801d45 	stb	r2,117(sp)
 4415778:	d8001d85 	stb	zero,118(sp)
 441577c:	50c00104 	addi	r3,r10,4
 4415780:	54800017 	ldw	r18,0(r10)
 4415784:	0027883a 	mov	r19,zero
 4415788:	a0800094 	ori	r2,r20,2
 441578c:	48030b16 	blt	r9,zero,44163bc <___vfiprintf_internal_r+0xff8>
 4415790:	00bfdfc4 	movi	r2,-129
 4415794:	a096703a 	and	r11,r20,r2
 4415798:	d8c02215 	stw	r3,136(sp)
 441579c:	5d000094 	ori	r20,r11,2
 44157a0:	90032b1e 	bne	r18,zero,4416450 <___vfiprintf_internal_r+0x108c>
 44157a4:	008110f4 	movhi	r2,1091
 44157a8:	10932f04 	addi	r2,r2,19644
 44157ac:	d8802615 	stw	r2,152(sp)
 44157b0:	0039883a 	mov	fp,zero
 44157b4:	48017b1e 	bne	r9,zero,4415da4 <___vfiprintf_internal_r+0x9e0>
 44157b8:	0013883a 	mov	r9,zero
 44157bc:	0027883a 	mov	r19,zero
 44157c0:	dd401a04 	addi	r21,sp,104
 44157c4:	4825883a 	mov	r18,r9
 44157c8:	4cc0010e 	bge	r9,r19,44157d0 <___vfiprintf_internal_r+0x40c>
 44157cc:	9825883a 	mov	r18,r19
 44157d0:	e7003fcc 	andi	fp,fp,255
 44157d4:	e700201c 	xori	fp,fp,128
 44157d8:	e73fe004 	addi	fp,fp,-128
 44157dc:	e0000126 	beq	fp,zero,44157e4 <___vfiprintf_internal_r+0x420>
 44157e0:	94800044 	addi	r18,r18,1
 44157e4:	a380008c 	andi	r14,r20,2
 44157e8:	70000126 	beq	r14,zero,44157f0 <___vfiprintf_internal_r+0x42c>
 44157ec:	94800084 	addi	r18,r18,2
 44157f0:	a700210c 	andi	fp,r20,132
 44157f4:	e001df1e 	bne	fp,zero,4415f74 <___vfiprintf_internal_r+0xbb0>
 44157f8:	8c87c83a 	sub	r3,r17,r18
 44157fc:	00c1dd0e 	bge	zero,r3,4415f74 <___vfiprintf_internal_r+0xbb0>
 4415800:	01c00404 	movi	r7,16
 4415804:	d8801c17 	ldw	r2,112(sp)
 4415808:	38c3ad0e 	bge	r7,r3,44166c0 <___vfiprintf_internal_r+0x12fc>
 441580c:	028110f4 	movhi	r10,1091
 4415810:	5293a304 	addi	r10,r10,20108
 4415814:	dc002915 	stw	r16,164(sp)
 4415818:	d9801b17 	ldw	r6,108(sp)
 441581c:	da802415 	stw	r10,144(sp)
 4415820:	03c001c4 	movi	r15,7
 4415824:	da402515 	stw	r9,148(sp)
 4415828:	db802815 	stw	r14,160(sp)
 441582c:	1821883a 	mov	r16,r3
 4415830:	00000506 	br	4415848 <___vfiprintf_internal_r+0x484>
 4415834:	31400084 	addi	r5,r6,2
 4415838:	42000204 	addi	r8,r8,8
 441583c:	200d883a 	mov	r6,r4
 4415840:	843ffc04 	addi	r16,r16,-16
 4415844:	3c000d0e 	bge	r7,r16,441587c <___vfiprintf_internal_r+0x4b8>
 4415848:	10800404 	addi	r2,r2,16
 441584c:	31000044 	addi	r4,r6,1
 4415850:	45800015 	stw	r22,0(r8)
 4415854:	41c00115 	stw	r7,4(r8)
 4415858:	d8801c15 	stw	r2,112(sp)
 441585c:	d9001b15 	stw	r4,108(sp)
 4415860:	793ff40e 	bge	r15,r4,4415834 <__reset+0xfb411834>
 4415864:	1001b51e 	bne	r2,zero,4415f3c <___vfiprintf_internal_r+0xb78>
 4415868:	843ffc04 	addi	r16,r16,-16
 441586c:	000d883a 	mov	r6,zero
 4415870:	01400044 	movi	r5,1
 4415874:	d811883a 	mov	r8,sp
 4415878:	3c3ff316 	blt	r7,r16,4415848 <__reset+0xfb411848>
 441587c:	8007883a 	mov	r3,r16
 4415880:	da402517 	ldw	r9,148(sp)
 4415884:	db802817 	ldw	r14,160(sp)
 4415888:	dc002917 	ldw	r16,164(sp)
 441588c:	da802417 	ldw	r10,144(sp)
 4415890:	1885883a 	add	r2,r3,r2
 4415894:	40c00115 	stw	r3,4(r8)
 4415898:	42800015 	stw	r10,0(r8)
 441589c:	d8801c15 	stw	r2,112(sp)
 44158a0:	d9401b15 	stw	r5,108(sp)
 44158a4:	00c001c4 	movi	r3,7
 44158a8:	19426016 	blt	r3,r5,441622c <___vfiprintf_internal_r+0xe68>
 44158ac:	d8c01d87 	ldb	r3,118(sp)
 44158b0:	42000204 	addi	r8,r8,8
 44158b4:	29000044 	addi	r4,r5,1
 44158b8:	1801b31e 	bne	r3,zero,4415f88 <___vfiprintf_internal_r+0xbc4>
 44158bc:	7001c026 	beq	r14,zero,4415fc0 <___vfiprintf_internal_r+0xbfc>
 44158c0:	d8c01d04 	addi	r3,sp,116
 44158c4:	10800084 	addi	r2,r2,2
 44158c8:	40c00015 	stw	r3,0(r8)
 44158cc:	00c00084 	movi	r3,2
 44158d0:	40c00115 	stw	r3,4(r8)
 44158d4:	d8801c15 	stw	r2,112(sp)
 44158d8:	d9001b15 	stw	r4,108(sp)
 44158dc:	00c001c4 	movi	r3,7
 44158e0:	1902650e 	bge	r3,r4,4416278 <___vfiprintf_internal_r+0xeb4>
 44158e4:	10029a1e 	bne	r2,zero,4416350 <___vfiprintf_internal_r+0xf8c>
 44158e8:	00c02004 	movi	r3,128
 44158ec:	01000044 	movi	r4,1
 44158f0:	000b883a 	mov	r5,zero
 44158f4:	d811883a 	mov	r8,sp
 44158f8:	e0c1b31e 	bne	fp,r3,4415fc8 <___vfiprintf_internal_r+0xc04>
 44158fc:	8cb9c83a 	sub	fp,r17,r18
 4415900:	0701b10e 	bge	zero,fp,4415fc8 <___vfiprintf_internal_r+0xc04>
 4415904:	01c00404 	movi	r7,16
 4415908:	3f03890e 	bge	r7,fp,4416730 <___vfiprintf_internal_r+0x136c>
 441590c:	00c110f4 	movhi	r3,1091
 4415910:	18d39f04 	addi	r3,r3,20092
 4415914:	d8c02415 	stw	r3,144(sp)
 4415918:	8007883a 	mov	r3,r16
 441591c:	034001c4 	movi	r13,7
 4415920:	e021883a 	mov	r16,fp
 4415924:	da402515 	stw	r9,148(sp)
 4415928:	1839883a 	mov	fp,r3
 441592c:	00000506 	br	4415944 <___vfiprintf_internal_r+0x580>
 4415930:	29800084 	addi	r6,r5,2
 4415934:	42000204 	addi	r8,r8,8
 4415938:	180b883a 	mov	r5,r3
 441593c:	843ffc04 	addi	r16,r16,-16
 4415940:	3c000d0e 	bge	r7,r16,4415978 <___vfiprintf_internal_r+0x5b4>
 4415944:	10800404 	addi	r2,r2,16
 4415948:	28c00044 	addi	r3,r5,1
 441594c:	45c00015 	stw	r23,0(r8)
 4415950:	41c00115 	stw	r7,4(r8)
 4415954:	d8801c15 	stw	r2,112(sp)
 4415958:	d8c01b15 	stw	r3,108(sp)
 441595c:	68fff40e 	bge	r13,r3,4415930 <__reset+0xfb411930>
 4415960:	1002241e 	bne	r2,zero,44161f4 <___vfiprintf_internal_r+0xe30>
 4415964:	843ffc04 	addi	r16,r16,-16
 4415968:	01800044 	movi	r6,1
 441596c:	000b883a 	mov	r5,zero
 4415970:	d811883a 	mov	r8,sp
 4415974:	3c3ff316 	blt	r7,r16,4415944 <__reset+0xfb411944>
 4415978:	da402517 	ldw	r9,148(sp)
 441597c:	e007883a 	mov	r3,fp
 4415980:	8039883a 	mov	fp,r16
 4415984:	1821883a 	mov	r16,r3
 4415988:	d8c02417 	ldw	r3,144(sp)
 441598c:	1705883a 	add	r2,r2,fp
 4415990:	47000115 	stw	fp,4(r8)
 4415994:	40c00015 	stw	r3,0(r8)
 4415998:	d8801c15 	stw	r2,112(sp)
 441599c:	d9801b15 	stw	r6,108(sp)
 44159a0:	00c001c4 	movi	r3,7
 44159a4:	19827616 	blt	r3,r6,4416380 <___vfiprintf_internal_r+0xfbc>
 44159a8:	4cf9c83a 	sub	fp,r9,r19
 44159ac:	42000204 	addi	r8,r8,8
 44159b0:	31000044 	addi	r4,r6,1
 44159b4:	300b883a 	mov	r5,r6
 44159b8:	07018516 	blt	zero,fp,4415fd0 <___vfiprintf_internal_r+0xc0c>
 44159bc:	9885883a 	add	r2,r19,r2
 44159c0:	45400015 	stw	r21,0(r8)
 44159c4:	44c00115 	stw	r19,4(r8)
 44159c8:	d8801c15 	stw	r2,112(sp)
 44159cc:	d9001b15 	stw	r4,108(sp)
 44159d0:	00c001c4 	movi	r3,7
 44159d4:	1901dd0e 	bge	r3,r4,441614c <___vfiprintf_internal_r+0xd88>
 44159d8:	1002401e 	bne	r2,zero,44162dc <___vfiprintf_internal_r+0xf18>
 44159dc:	d8001b15 	stw	zero,108(sp)
 44159e0:	a2c0010c 	andi	r11,r20,4
 44159e4:	58000226 	beq	r11,zero,44159f0 <___vfiprintf_internal_r+0x62c>
 44159e8:	8ca7c83a 	sub	r19,r17,r18
 44159ec:	04c2f216 	blt	zero,r19,44165b8 <___vfiprintf_internal_r+0x11f4>
 44159f0:	8c80010e 	bge	r17,r18,44159f8 <___vfiprintf_internal_r+0x634>
 44159f4:	9023883a 	mov	r17,r18
 44159f8:	da802317 	ldw	r10,140(sp)
 44159fc:	5455883a 	add	r10,r10,r17
 4415a00:	da802315 	stw	r10,140(sp)
 4415a04:	d8001b15 	stw	zero,108(sp)
 4415a08:	d811883a 	mov	r8,sp
 4415a0c:	003ea206 	br	4415498 <__reset+0xfb411498>
 4415a10:	a5000814 	ori	r20,r20,32
 4415a14:	80c00007 	ldb	r3,0(r16)
 4415a18:	003ec906 	br	4415540 <__reset+0xfb411540>
 4415a1c:	80c00007 	ldb	r3,0(r16)
 4415a20:	1b030926 	beq	r3,r12,4416648 <___vfiprintf_internal_r+0x1284>
 4415a24:	a5000414 	ori	r20,r20,16
 4415a28:	003ec506 	br	4415540 <__reset+0xfb411540>
 4415a2c:	21003fcc 	andi	r4,r4,255
 4415a30:	20035e1e 	bne	r4,zero,44167ac <___vfiprintf_internal_r+0x13e8>
 4415a34:	a080080c 	andi	r2,r20,32
 4415a38:	1002a526 	beq	r2,zero,44164d0 <___vfiprintf_internal_r+0x110c>
 4415a3c:	da802217 	ldw	r10,136(sp)
 4415a40:	50800017 	ldw	r2,0(r10)
 4415a44:	da802317 	ldw	r10,140(sp)
 4415a48:	5007d7fa 	srai	r3,r10,31
 4415a4c:	da802217 	ldw	r10,136(sp)
 4415a50:	10c00115 	stw	r3,4(r2)
 4415a54:	52800104 	addi	r10,r10,4
 4415a58:	da802215 	stw	r10,136(sp)
 4415a5c:	da802317 	ldw	r10,140(sp)
 4415a60:	12800015 	stw	r10,0(r2)
 4415a64:	003e8c06 	br	4415498 <__reset+0xfb411498>
 4415a68:	21003fcc 	andi	r4,r4,255
 4415a6c:	2003511e 	bne	r4,zero,44167b4 <___vfiprintf_internal_r+0x13f0>
 4415a70:	a080080c 	andi	r2,r20,32
 4415a74:	1000a126 	beq	r2,zero,4415cfc <___vfiprintf_internal_r+0x938>
 4415a78:	da802217 	ldw	r10,136(sp)
 4415a7c:	d8001d85 	stb	zero,118(sp)
 4415a80:	50800204 	addi	r2,r10,8
 4415a84:	54800017 	ldw	r18,0(r10)
 4415a88:	54c00117 	ldw	r19,4(r10)
 4415a8c:	4802b416 	blt	r9,zero,4416560 <___vfiprintf_internal_r+0x119c>
 4415a90:	013fdfc4 	movi	r4,-129
 4415a94:	94c6b03a 	or	r3,r18,r19
 4415a98:	d8802215 	stw	r2,136(sp)
 4415a9c:	a128703a 	and	r20,r20,r4
 4415aa0:	1800a226 	beq	r3,zero,4415d2c <___vfiprintf_internal_r+0x968>
 4415aa4:	0039883a 	mov	fp,zero
 4415aa8:	dd401a04 	addi	r21,sp,104
 4415aac:	9006d0fa 	srli	r3,r18,3
 4415ab0:	9808977a 	slli	r4,r19,29
 4415ab4:	9826d0fa 	srli	r19,r19,3
 4415ab8:	948001cc 	andi	r18,r18,7
 4415abc:	90800c04 	addi	r2,r18,48
 4415ac0:	ad7fffc4 	addi	r21,r21,-1
 4415ac4:	20e4b03a 	or	r18,r4,r3
 4415ac8:	a8800005 	stb	r2,0(r21)
 4415acc:	94c6b03a 	or	r3,r18,r19
 4415ad0:	183ff61e 	bne	r3,zero,4415aac <__reset+0xfb411aac>
 4415ad4:	a0c0004c 	andi	r3,r20,1
 4415ad8:	18005926 	beq	r3,zero,4415c40 <___vfiprintf_internal_r+0x87c>
 4415adc:	10803fcc 	andi	r2,r2,255
 4415ae0:	1080201c 	xori	r2,r2,128
 4415ae4:	10bfe004 	addi	r2,r2,-128
 4415ae8:	00c00c04 	movi	r3,48
 4415aec:	10c05426 	beq	r2,r3,4415c40 <___vfiprintf_internal_r+0x87c>
 4415af0:	da801e17 	ldw	r10,120(sp)
 4415af4:	a8bfffc4 	addi	r2,r21,-1
 4415af8:	a8ffffc5 	stb	r3,-1(r21)
 4415afc:	50a7c83a 	sub	r19,r10,r2
 4415b00:	102b883a 	mov	r21,r2
 4415b04:	003f2f06 	br	44157c4 <__reset+0xfb4117c4>
 4415b08:	21003fcc 	andi	r4,r4,255
 4415b0c:	2003421e 	bne	r4,zero,4416818 <___vfiprintf_internal_r+0x1454>
 4415b10:	008110f4 	movhi	r2,1091
 4415b14:	10932f04 	addi	r2,r2,19644
 4415b18:	d8802615 	stw	r2,152(sp)
 4415b1c:	a080080c 	andi	r2,r20,32
 4415b20:	1000aa26 	beq	r2,zero,4415dcc <___vfiprintf_internal_r+0xa08>
 4415b24:	da802217 	ldw	r10,136(sp)
 4415b28:	54800017 	ldw	r18,0(r10)
 4415b2c:	54c00117 	ldw	r19,4(r10)
 4415b30:	52800204 	addi	r10,r10,8
 4415b34:	da802215 	stw	r10,136(sp)
 4415b38:	a080004c 	andi	r2,r20,1
 4415b3c:	1001d226 	beq	r2,zero,4416288 <___vfiprintf_internal_r+0xec4>
 4415b40:	94c4b03a 	or	r2,r18,r19
 4415b44:	1002351e 	bne	r2,zero,441641c <___vfiprintf_internal_r+0x1058>
 4415b48:	d8001d85 	stb	zero,118(sp)
 4415b4c:	48022216 	blt	r9,zero,44163d8 <___vfiprintf_internal_r+0x1014>
 4415b50:	00bfdfc4 	movi	r2,-129
 4415b54:	a0a8703a 	and	r20,r20,r2
 4415b58:	003f1506 	br	44157b0 <__reset+0xfb4117b0>
 4415b5c:	da802217 	ldw	r10,136(sp)
 4415b60:	04800044 	movi	r18,1
 4415b64:	d8001d85 	stb	zero,118(sp)
 4415b68:	50800017 	ldw	r2,0(r10)
 4415b6c:	52800104 	addi	r10,r10,4
 4415b70:	da802215 	stw	r10,136(sp)
 4415b74:	d8801005 	stb	r2,64(sp)
 4415b78:	9027883a 	mov	r19,r18
 4415b7c:	dd401004 	addi	r21,sp,64
 4415b80:	0013883a 	mov	r9,zero
 4415b84:	003f1706 	br	44157e4 <__reset+0xfb4117e4>
 4415b88:	21003fcc 	andi	r4,r4,255
 4415b8c:	2003201e 	bne	r4,zero,4416810 <___vfiprintf_internal_r+0x144c>
 4415b90:	a080080c 	andi	r2,r20,32
 4415b94:	10004b26 	beq	r2,zero,4415cc4 <___vfiprintf_internal_r+0x900>
 4415b98:	da802217 	ldw	r10,136(sp)
 4415b9c:	50800117 	ldw	r2,4(r10)
 4415ba0:	54800017 	ldw	r18,0(r10)
 4415ba4:	52800204 	addi	r10,r10,8
 4415ba8:	da802215 	stw	r10,136(sp)
 4415bac:	1027883a 	mov	r19,r2
 4415bb0:	10022c16 	blt	r2,zero,4416464 <___vfiprintf_internal_r+0x10a0>
 4415bb4:	df001d83 	ldbu	fp,118(sp)
 4415bb8:	48007216 	blt	r9,zero,4415d84 <___vfiprintf_internal_r+0x9c0>
 4415bbc:	00ffdfc4 	movi	r3,-129
 4415bc0:	94c4b03a 	or	r2,r18,r19
 4415bc4:	a0e8703a 	and	r20,r20,r3
 4415bc8:	1000cc26 	beq	r2,zero,4415efc <___vfiprintf_internal_r+0xb38>
 4415bcc:	98021026 	beq	r19,zero,4416410 <___vfiprintf_internal_r+0x104c>
 4415bd0:	dc402415 	stw	r17,144(sp)
 4415bd4:	dc002515 	stw	r16,148(sp)
 4415bd8:	9823883a 	mov	r17,r19
 4415bdc:	9021883a 	mov	r16,r18
 4415be0:	dd401a04 	addi	r21,sp,104
 4415be4:	4825883a 	mov	r18,r9
 4415be8:	4027883a 	mov	r19,r8
 4415bec:	8009883a 	mov	r4,r16
 4415bf0:	880b883a 	mov	r5,r17
 4415bf4:	01800284 	movi	r6,10
 4415bf8:	000f883a 	mov	r7,zero
 4415bfc:	44177a40 	call	44177a4 <__umoddi3>
 4415c00:	10800c04 	addi	r2,r2,48
 4415c04:	ad7fffc4 	addi	r21,r21,-1
 4415c08:	8009883a 	mov	r4,r16
 4415c0c:	880b883a 	mov	r5,r17
 4415c10:	a8800005 	stb	r2,0(r21)
 4415c14:	01800284 	movi	r6,10
 4415c18:	000f883a 	mov	r7,zero
 4415c1c:	441722c0 	call	441722c <__udivdi3>
 4415c20:	1021883a 	mov	r16,r2
 4415c24:	10c4b03a 	or	r2,r2,r3
 4415c28:	1823883a 	mov	r17,r3
 4415c2c:	103fef1e 	bne	r2,zero,4415bec <__reset+0xfb411bec>
 4415c30:	dc402417 	ldw	r17,144(sp)
 4415c34:	dc002517 	ldw	r16,148(sp)
 4415c38:	9013883a 	mov	r9,r18
 4415c3c:	9811883a 	mov	r8,r19
 4415c40:	da801e17 	ldw	r10,120(sp)
 4415c44:	5567c83a 	sub	r19,r10,r21
 4415c48:	003ede06 	br	44157c4 <__reset+0xfb4117c4>
 4415c4c:	38803fcc 	andi	r2,r7,255
 4415c50:	1080201c 	xori	r2,r2,128
 4415c54:	10bfe004 	addi	r2,r2,-128
 4415c58:	1002371e 	bne	r2,zero,4416538 <___vfiprintf_internal_r+0x1174>
 4415c5c:	01000044 	movi	r4,1
 4415c60:	01c00804 	movi	r7,32
 4415c64:	80c00007 	ldb	r3,0(r16)
 4415c68:	003e3506 	br	4415540 <__reset+0xfb411540>
 4415c6c:	a5000054 	ori	r20,r20,1
 4415c70:	80c00007 	ldb	r3,0(r16)
 4415c74:	003e3206 	br	4415540 <__reset+0xfb411540>
 4415c78:	a5002014 	ori	r20,r20,128
 4415c7c:	80c00007 	ldb	r3,0(r16)
 4415c80:	003e2f06 	br	4415540 <__reset+0xfb411540>
 4415c84:	8015883a 	mov	r10,r16
 4415c88:	0023883a 	mov	r17,zero
 4415c8c:	18bff404 	addi	r2,r3,-48
 4415c90:	50c00007 	ldb	r3,0(r10)
 4415c94:	8c4002a4 	muli	r17,r17,10
 4415c98:	84000044 	addi	r16,r16,1
 4415c9c:	8015883a 	mov	r10,r16
 4415ca0:	1463883a 	add	r17,r2,r17
 4415ca4:	18bff404 	addi	r2,r3,-48
 4415ca8:	30bff92e 	bgeu	r6,r2,4415c90 <__reset+0xfb411c90>
 4415cac:	003e2506 	br	4415544 <__reset+0xfb411544>
 4415cb0:	21003fcc 	andi	r4,r4,255
 4415cb4:	2002d41e 	bne	r4,zero,4416808 <___vfiprintf_internal_r+0x1444>
 4415cb8:	a5000414 	ori	r20,r20,16
 4415cbc:	a080080c 	andi	r2,r20,32
 4415cc0:	103fb51e 	bne	r2,zero,4415b98 <__reset+0xfb411b98>
 4415cc4:	a080040c 	andi	r2,r20,16
 4415cc8:	1001f826 	beq	r2,zero,44164ac <___vfiprintf_internal_r+0x10e8>
 4415ccc:	da802217 	ldw	r10,136(sp)
 4415cd0:	54800017 	ldw	r18,0(r10)
 4415cd4:	52800104 	addi	r10,r10,4
 4415cd8:	da802215 	stw	r10,136(sp)
 4415cdc:	9027d7fa 	srai	r19,r18,31
 4415ce0:	9805883a 	mov	r2,r19
 4415ce4:	003fb206 	br	4415bb0 <__reset+0xfb411bb0>
 4415ce8:	21003fcc 	andi	r4,r4,255
 4415cec:	2002c41e 	bne	r4,zero,4416800 <___vfiprintf_internal_r+0x143c>
 4415cf0:	a5000414 	ori	r20,r20,16
 4415cf4:	a080080c 	andi	r2,r20,32
 4415cf8:	103f5f1e 	bne	r2,zero,4415a78 <__reset+0xfb411a78>
 4415cfc:	a080040c 	andi	r2,r20,16
 4415d00:	10020f26 	beq	r2,zero,4416540 <___vfiprintf_internal_r+0x117c>
 4415d04:	da802217 	ldw	r10,136(sp)
 4415d08:	d8001d85 	stb	zero,118(sp)
 4415d0c:	0027883a 	mov	r19,zero
 4415d10:	50800104 	addi	r2,r10,4
 4415d14:	54800017 	ldw	r18,0(r10)
 4415d18:	48021116 	blt	r9,zero,4416560 <___vfiprintf_internal_r+0x119c>
 4415d1c:	00ffdfc4 	movi	r3,-129
 4415d20:	d8802215 	stw	r2,136(sp)
 4415d24:	a0e8703a 	and	r20,r20,r3
 4415d28:	903f5e1e 	bne	r18,zero,4415aa4 <__reset+0xfb411aa4>
 4415d2c:	0039883a 	mov	fp,zero
 4415d30:	4802a626 	beq	r9,zero,44167cc <___vfiprintf_internal_r+0x1408>
 4415d34:	0025883a 	mov	r18,zero
 4415d38:	0027883a 	mov	r19,zero
 4415d3c:	003f5a06 	br	4415aa8 <__reset+0xfb411aa8>
 4415d40:	21003fcc 	andi	r4,r4,255
 4415d44:	20029f1e 	bne	r4,zero,44167c4 <___vfiprintf_internal_r+0x1400>
 4415d48:	a5000414 	ori	r20,r20,16
 4415d4c:	a080080c 	andi	r2,r20,32
 4415d50:	10005e1e 	bne	r2,zero,4415ecc <___vfiprintf_internal_r+0xb08>
 4415d54:	a080040c 	andi	r2,r20,16
 4415d58:	1001a21e 	bne	r2,zero,44163e4 <___vfiprintf_internal_r+0x1020>
 4415d5c:	a080100c 	andi	r2,r20,64
 4415d60:	d8001d85 	stb	zero,118(sp)
 4415d64:	da802217 	ldw	r10,136(sp)
 4415d68:	1002231e 	bne	r2,zero,44165f8 <___vfiprintf_internal_r+0x1234>
 4415d6c:	50800104 	addi	r2,r10,4
 4415d70:	54800017 	ldw	r18,0(r10)
 4415d74:	0027883a 	mov	r19,zero
 4415d78:	4801a00e 	bge	r9,zero,44163fc <___vfiprintf_internal_r+0x1038>
 4415d7c:	d8802215 	stw	r2,136(sp)
 4415d80:	0039883a 	mov	fp,zero
 4415d84:	94c4b03a 	or	r2,r18,r19
 4415d88:	103f901e 	bne	r2,zero,4415bcc <__reset+0xfb411bcc>
 4415d8c:	00800044 	movi	r2,1
 4415d90:	10803fcc 	andi	r2,r2,255
 4415d94:	00c00044 	movi	r3,1
 4415d98:	10c05926 	beq	r2,r3,4415f00 <___vfiprintf_internal_r+0xb3c>
 4415d9c:	00c00084 	movi	r3,2
 4415da0:	10ffe41e 	bne	r2,r3,4415d34 <__reset+0xfb411d34>
 4415da4:	0025883a 	mov	r18,zero
 4415da8:	0027883a 	mov	r19,zero
 4415dac:	00013d06 	br	44162a4 <___vfiprintf_internal_r+0xee0>
 4415db0:	21003fcc 	andi	r4,r4,255
 4415db4:	2002811e 	bne	r4,zero,44167bc <___vfiprintf_internal_r+0x13f8>
 4415db8:	008110f4 	movhi	r2,1091
 4415dbc:	10932a04 	addi	r2,r2,19624
 4415dc0:	d8802615 	stw	r2,152(sp)
 4415dc4:	a080080c 	andi	r2,r20,32
 4415dc8:	103f561e 	bne	r2,zero,4415b24 <__reset+0xfb411b24>
 4415dcc:	a080040c 	andi	r2,r20,16
 4415dd0:	1001d126 	beq	r2,zero,4416518 <___vfiprintf_internal_r+0x1154>
 4415dd4:	da802217 	ldw	r10,136(sp)
 4415dd8:	0027883a 	mov	r19,zero
 4415ddc:	54800017 	ldw	r18,0(r10)
 4415de0:	52800104 	addi	r10,r10,4
 4415de4:	da802215 	stw	r10,136(sp)
 4415de8:	003f5306 	br	4415b38 <__reset+0xfb411b38>
 4415dec:	da802217 	ldw	r10,136(sp)
 4415df0:	d8001d85 	stb	zero,118(sp)
 4415df4:	55400017 	ldw	r21,0(r10)
 4415df8:	50c00104 	addi	r3,r10,4
 4415dfc:	a8024226 	beq	r21,zero,4416708 <___vfiprintf_internal_r+0x1344>
 4415e00:	48021816 	blt	r9,zero,4416664 <___vfiprintf_internal_r+0x12a0>
 4415e04:	480d883a 	mov	r6,r9
 4415e08:	000b883a 	mov	r5,zero
 4415e0c:	a809883a 	mov	r4,r21
 4415e10:	d8c02a15 	stw	r3,168(sp)
 4415e14:	da002b15 	stw	r8,172(sp)
 4415e18:	da402c15 	stw	r9,176(sp)
 4415e1c:	44124ec0 	call	44124ec <memchr>
 4415e20:	d8c02a17 	ldw	r3,168(sp)
 4415e24:	da002b17 	ldw	r8,172(sp)
 4415e28:	da402c17 	ldw	r9,176(sp)
 4415e2c:	10024826 	beq	r2,zero,4416750 <___vfiprintf_internal_r+0x138c>
 4415e30:	1567c83a 	sub	r19,r2,r21
 4415e34:	df001d83 	ldbu	fp,118(sp)
 4415e38:	d8c02215 	stw	r3,136(sp)
 4415e3c:	0013883a 	mov	r9,zero
 4415e40:	003e6006 	br	44157c4 <__reset+0xfb4117c4>
 4415e44:	21003fcc 	andi	r4,r4,255
 4415e48:	203fc026 	beq	r4,zero,4415d4c <__reset+0xfb411d4c>
 4415e4c:	d9c01d85 	stb	r7,118(sp)
 4415e50:	003fbe06 	br	4415d4c <__reset+0xfb411d4c>
 4415e54:	da802217 	ldw	r10,136(sp)
 4415e58:	54400017 	ldw	r17,0(r10)
 4415e5c:	50800104 	addi	r2,r10,4
 4415e60:	883e3b16 	blt	r17,zero,4415750 <__reset+0xfb411750>
 4415e64:	d8802215 	stw	r2,136(sp)
 4415e68:	80c00007 	ldb	r3,0(r16)
 4415e6c:	003db406 	br	4415540 <__reset+0xfb411540>
 4415e70:	01000044 	movi	r4,1
 4415e74:	01c00ac4 	movi	r7,43
 4415e78:	80c00007 	ldb	r3,0(r16)
 4415e7c:	003db006 	br	4415540 <__reset+0xfb411540>
 4415e80:	80c00007 	ldb	r3,0(r16)
 4415e84:	82800044 	addi	r10,r16,1
 4415e88:	1b423c26 	beq	r3,r13,441677c <___vfiprintf_internal_r+0x13b8>
 4415e8c:	18bff404 	addi	r2,r3,-48
 4415e90:	0013883a 	mov	r9,zero
 4415e94:	30822b36 	bltu	r6,r2,4416744 <___vfiprintf_internal_r+0x1380>
 4415e98:	50c00007 	ldb	r3,0(r10)
 4415e9c:	4a4002a4 	muli	r9,r9,10
 4415ea0:	54000044 	addi	r16,r10,1
 4415ea4:	8015883a 	mov	r10,r16
 4415ea8:	4893883a 	add	r9,r9,r2
 4415eac:	18bff404 	addi	r2,r3,-48
 4415eb0:	30bff92e 	bgeu	r6,r2,4415e98 <__reset+0xfb411e98>
 4415eb4:	483da30e 	bge	r9,zero,4415544 <__reset+0xfb411544>
 4415eb8:	027fffc4 	movi	r9,-1
 4415ebc:	003da106 	br	4415544 <__reset+0xfb411544>
 4415ec0:	a5001014 	ori	r20,r20,64
 4415ec4:	80c00007 	ldb	r3,0(r16)
 4415ec8:	003d9d06 	br	4415540 <__reset+0xfb411540>
 4415ecc:	da802217 	ldw	r10,136(sp)
 4415ed0:	d8001d85 	stb	zero,118(sp)
 4415ed4:	50c00204 	addi	r3,r10,8
 4415ed8:	54800017 	ldw	r18,0(r10)
 4415edc:	54c00117 	ldw	r19,4(r10)
 4415ee0:	4801ca16 	blt	r9,zero,441660c <___vfiprintf_internal_r+0x1248>
 4415ee4:	013fdfc4 	movi	r4,-129
 4415ee8:	94c4b03a 	or	r2,r18,r19
 4415eec:	d8c02215 	stw	r3,136(sp)
 4415ef0:	a128703a 	and	r20,r20,r4
 4415ef4:	0039883a 	mov	fp,zero
 4415ef8:	103f341e 	bne	r2,zero,4415bcc <__reset+0xfb411bcc>
 4415efc:	483e2e26 	beq	r9,zero,44157b8 <__reset+0xfb4117b8>
 4415f00:	0025883a 	mov	r18,zero
 4415f04:	94800c04 	addi	r18,r18,48
 4415f08:	dc8019c5 	stb	r18,103(sp)
 4415f0c:	dcc02717 	ldw	r19,156(sp)
 4415f10:	dd4019c4 	addi	r21,sp,103
 4415f14:	003e2b06 	br	44157c4 <__reset+0xfb4117c4>
 4415f18:	21003fcc 	andi	r4,r4,255
 4415f1c:	2002361e 	bne	r4,zero,44167f8 <___vfiprintf_internal_r+0x1434>
 4415f20:	1801c126 	beq	r3,zero,4416628 <___vfiprintf_internal_r+0x1264>
 4415f24:	04800044 	movi	r18,1
 4415f28:	d8c01005 	stb	r3,64(sp)
 4415f2c:	d8001d85 	stb	zero,118(sp)
 4415f30:	9027883a 	mov	r19,r18
 4415f34:	dd401004 	addi	r21,sp,64
 4415f38:	003f1106 	br	4415b80 <__reset+0xfb411b80>
 4415f3c:	d9402117 	ldw	r5,132(sp)
 4415f40:	d9002017 	ldw	r4,128(sp)
 4415f44:	d9801a04 	addi	r6,sp,104
 4415f48:	d9c02b15 	stw	r7,172(sp)
 4415f4c:	dbc02a15 	stw	r15,168(sp)
 4415f50:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4415f54:	d9c02b17 	ldw	r7,172(sp)
 4415f58:	dbc02a17 	ldw	r15,168(sp)
 4415f5c:	10006d1e 	bne	r2,zero,4416114 <___vfiprintf_internal_r+0xd50>
 4415f60:	d9801b17 	ldw	r6,108(sp)
 4415f64:	d8801c17 	ldw	r2,112(sp)
 4415f68:	d811883a 	mov	r8,sp
 4415f6c:	31400044 	addi	r5,r6,1
 4415f70:	003e3306 	br	4415840 <__reset+0xfb411840>
 4415f74:	d9401b17 	ldw	r5,108(sp)
 4415f78:	d8801c17 	ldw	r2,112(sp)
 4415f7c:	29000044 	addi	r4,r5,1
 4415f80:	d8c01d87 	ldb	r3,118(sp)
 4415f84:	183e4d26 	beq	r3,zero,44158bc <__reset+0xfb4118bc>
 4415f88:	00c00044 	movi	r3,1
 4415f8c:	d9401d84 	addi	r5,sp,118
 4415f90:	10c5883a 	add	r2,r2,r3
 4415f94:	41400015 	stw	r5,0(r8)
 4415f98:	40c00115 	stw	r3,4(r8)
 4415f9c:	d8801c15 	stw	r2,112(sp)
 4415fa0:	d9001b15 	stw	r4,108(sp)
 4415fa4:	014001c4 	movi	r5,7
 4415fa8:	2900a90e 	bge	r5,r4,4416250 <___vfiprintf_internal_r+0xe8c>
 4415fac:	1000da1e 	bne	r2,zero,4416318 <___vfiprintf_internal_r+0xf54>
 4415fb0:	7000ab1e 	bne	r14,zero,4416260 <___vfiprintf_internal_r+0xe9c>
 4415fb4:	000b883a 	mov	r5,zero
 4415fb8:	1809883a 	mov	r4,r3
 4415fbc:	d811883a 	mov	r8,sp
 4415fc0:	00c02004 	movi	r3,128
 4415fc4:	e0fe4d26 	beq	fp,r3,44158fc <__reset+0xfb4118fc>
 4415fc8:	4cf9c83a 	sub	fp,r9,r19
 4415fcc:	073e7b0e 	bge	zero,fp,44159bc <__reset+0xfb4119bc>
 4415fd0:	01c00404 	movi	r7,16
 4415fd4:	3f01900e 	bge	r7,fp,4416618 <___vfiprintf_internal_r+0x1254>
 4415fd8:	00c110f4 	movhi	r3,1091
 4415fdc:	18d39f04 	addi	r3,r3,20092
 4415fe0:	d8c02415 	stw	r3,144(sp)
 4415fe4:	034001c4 	movi	r13,7
 4415fe8:	00000506 	br	4416000 <___vfiprintf_internal_r+0xc3c>
 4415fec:	29000084 	addi	r4,r5,2
 4415ff0:	42000204 	addi	r8,r8,8
 4415ff4:	180b883a 	mov	r5,r3
 4415ff8:	e73ffc04 	addi	fp,fp,-16
 4415ffc:	3f000d0e 	bge	r7,fp,4416034 <___vfiprintf_internal_r+0xc70>
 4416000:	10800404 	addi	r2,r2,16
 4416004:	28c00044 	addi	r3,r5,1
 4416008:	45c00015 	stw	r23,0(r8)
 441600c:	41c00115 	stw	r7,4(r8)
 4416010:	d8801c15 	stw	r2,112(sp)
 4416014:	d8c01b15 	stw	r3,108(sp)
 4416018:	68fff40e 	bge	r13,r3,4415fec <__reset+0xfb411fec>
 441601c:	1000101e 	bne	r2,zero,4416060 <___vfiprintf_internal_r+0xc9c>
 4416020:	e73ffc04 	addi	fp,fp,-16
 4416024:	01000044 	movi	r4,1
 4416028:	000b883a 	mov	r5,zero
 441602c:	d811883a 	mov	r8,sp
 4416030:	3f3ff316 	blt	r7,fp,4416000 <__reset+0xfb412000>
 4416034:	da802417 	ldw	r10,144(sp)
 4416038:	1705883a 	add	r2,r2,fp
 441603c:	47000115 	stw	fp,4(r8)
 4416040:	42800015 	stw	r10,0(r8)
 4416044:	d8801c15 	stw	r2,112(sp)
 4416048:	d9001b15 	stw	r4,108(sp)
 441604c:	00c001c4 	movi	r3,7
 4416050:	19003616 	blt	r3,r4,441612c <___vfiprintf_internal_r+0xd68>
 4416054:	42000204 	addi	r8,r8,8
 4416058:	21000044 	addi	r4,r4,1
 441605c:	003e5706 	br	44159bc <__reset+0xfb4119bc>
 4416060:	d9402117 	ldw	r5,132(sp)
 4416064:	d9002017 	ldw	r4,128(sp)
 4416068:	d9801a04 	addi	r6,sp,104
 441606c:	d9c02b15 	stw	r7,172(sp)
 4416070:	db402a15 	stw	r13,168(sp)
 4416074:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416078:	d9c02b17 	ldw	r7,172(sp)
 441607c:	db402a17 	ldw	r13,168(sp)
 4416080:	1000241e 	bne	r2,zero,4416114 <___vfiprintf_internal_r+0xd50>
 4416084:	d9401b17 	ldw	r5,108(sp)
 4416088:	d8801c17 	ldw	r2,112(sp)
 441608c:	d811883a 	mov	r8,sp
 4416090:	29000044 	addi	r4,r5,1
 4416094:	003fd806 	br	4415ff8 <__reset+0xfb411ff8>
 4416098:	d9401b17 	ldw	r5,108(sp)
 441609c:	00c110f4 	movhi	r3,1091
 44160a0:	18d3a304 	addi	r3,r3,20108
 44160a4:	d8c02415 	stw	r3,144(sp)
 44160a8:	29400044 	addi	r5,r5,1
 44160ac:	d8c02417 	ldw	r3,144(sp)
 44160b0:	14c5883a 	add	r2,r2,r19
 44160b4:	44c00115 	stw	r19,4(r8)
 44160b8:	40c00015 	stw	r3,0(r8)
 44160bc:	d8801c15 	stw	r2,112(sp)
 44160c0:	d9401b15 	stw	r5,108(sp)
 44160c4:	00c001c4 	movi	r3,7
 44160c8:	1940070e 	bge	r3,r5,44160e8 <___vfiprintf_internal_r+0xd24>
 44160cc:	103e4826 	beq	r2,zero,44159f0 <__reset+0xfb4119f0>
 44160d0:	d9402117 	ldw	r5,132(sp)
 44160d4:	d9002017 	ldw	r4,128(sp)
 44160d8:	d9801a04 	addi	r6,sp,104
 44160dc:	44152b00 	call	44152b0 <__sprint_r.part.0>
 44160e0:	10000c1e 	bne	r2,zero,4416114 <___vfiprintf_internal_r+0xd50>
 44160e4:	d8801c17 	ldw	r2,112(sp)
 44160e8:	8c80010e 	bge	r17,r18,44160f0 <___vfiprintf_internal_r+0xd2c>
 44160ec:	9023883a 	mov	r17,r18
 44160f0:	da802317 	ldw	r10,140(sp)
 44160f4:	5455883a 	add	r10,r10,r17
 44160f8:	da802315 	stw	r10,140(sp)
 44160fc:	103e4126 	beq	r2,zero,4415a04 <__reset+0xfb411a04>
 4416100:	d9402117 	ldw	r5,132(sp)
 4416104:	d9002017 	ldw	r4,128(sp)
 4416108:	d9801a04 	addi	r6,sp,104
 441610c:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416110:	103e3c26 	beq	r2,zero,4415a04 <__reset+0xfb411a04>
 4416114:	dd002117 	ldw	r20,132(sp)
 4416118:	a080030b 	ldhu	r2,12(r20)
 441611c:	1080100c 	andi	r2,r2,64
 4416120:	1001231e 	bne	r2,zero,44165b0 <___vfiprintf_internal_r+0x11ec>
 4416124:	d8802317 	ldw	r2,140(sp)
 4416128:	003d7b06 	br	4415718 <__reset+0xfb411718>
 441612c:	1000991e 	bne	r2,zero,4416394 <___vfiprintf_internal_r+0xfd0>
 4416130:	00c00044 	movi	r3,1
 4416134:	9805883a 	mov	r2,r19
 4416138:	dd400015 	stw	r21,0(sp)
 441613c:	dcc00115 	stw	r19,4(sp)
 4416140:	dcc01c15 	stw	r19,112(sp)
 4416144:	d8c01b15 	stw	r3,108(sp)
 4416148:	d811883a 	mov	r8,sp
 441614c:	42000204 	addi	r8,r8,8
 4416150:	a2c0010c 	andi	r11,r20,4
 4416154:	583fe426 	beq	r11,zero,44160e8 <__reset+0xfb4120e8>
 4416158:	8ca7c83a 	sub	r19,r17,r18
 441615c:	04ffe20e 	bge	zero,r19,44160e8 <__reset+0xfb4120e8>
 4416160:	01c00404 	movi	r7,16
 4416164:	3cffcc0e 	bge	r7,r19,4416098 <__reset+0xfb412098>
 4416168:	028110f4 	movhi	r10,1091
 441616c:	5293a304 	addi	r10,r10,20108
 4416170:	d9001b17 	ldw	r4,108(sp)
 4416174:	da802415 	stw	r10,144(sp)
 4416178:	382b883a 	mov	r21,r7
 441617c:	050001c4 	movi	r20,7
 4416180:	df002017 	ldw	fp,128(sp)
 4416184:	00000506 	br	441619c <___vfiprintf_internal_r+0xdd8>
 4416188:	21400084 	addi	r5,r4,2
 441618c:	42000204 	addi	r8,r8,8
 4416190:	1809883a 	mov	r4,r3
 4416194:	9cfffc04 	addi	r19,r19,-16
 4416198:	acffc40e 	bge	r21,r19,44160ac <__reset+0xfb4120ac>
 441619c:	10800404 	addi	r2,r2,16
 44161a0:	20c00044 	addi	r3,r4,1
 44161a4:	45800015 	stw	r22,0(r8)
 44161a8:	45400115 	stw	r21,4(r8)
 44161ac:	d8801c15 	stw	r2,112(sp)
 44161b0:	d8c01b15 	stw	r3,108(sp)
 44161b4:	a0fff40e 	bge	r20,r3,4416188 <__reset+0xfb412188>
 44161b8:	1000041e 	bne	r2,zero,44161cc <___vfiprintf_internal_r+0xe08>
 44161bc:	01400044 	movi	r5,1
 44161c0:	0009883a 	mov	r4,zero
 44161c4:	d811883a 	mov	r8,sp
 44161c8:	003ff206 	br	4416194 <__reset+0xfb412194>
 44161cc:	d9402117 	ldw	r5,132(sp)
 44161d0:	d9801a04 	addi	r6,sp,104
 44161d4:	e009883a 	mov	r4,fp
 44161d8:	44152b00 	call	44152b0 <__sprint_r.part.0>
 44161dc:	103fcd1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 44161e0:	d9001b17 	ldw	r4,108(sp)
 44161e4:	d8801c17 	ldw	r2,112(sp)
 44161e8:	d811883a 	mov	r8,sp
 44161ec:	21400044 	addi	r5,r4,1
 44161f0:	003fe806 	br	4416194 <__reset+0xfb412194>
 44161f4:	d9402117 	ldw	r5,132(sp)
 44161f8:	d9002017 	ldw	r4,128(sp)
 44161fc:	d9801a04 	addi	r6,sp,104
 4416200:	d9c02b15 	stw	r7,172(sp)
 4416204:	db402a15 	stw	r13,168(sp)
 4416208:	44152b00 	call	44152b0 <__sprint_r.part.0>
 441620c:	d9c02b17 	ldw	r7,172(sp)
 4416210:	db402a17 	ldw	r13,168(sp)
 4416214:	103fbf1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 4416218:	d9401b17 	ldw	r5,108(sp)
 441621c:	d8801c17 	ldw	r2,112(sp)
 4416220:	d811883a 	mov	r8,sp
 4416224:	29800044 	addi	r6,r5,1
 4416228:	003dc406 	br	441593c <__reset+0xfb41193c>
 441622c:	1000d21e 	bne	r2,zero,4416578 <___vfiprintf_internal_r+0x11b4>
 4416230:	d8c01d87 	ldb	r3,118(sp)
 4416234:	18009526 	beq	r3,zero,441648c <___vfiprintf_internal_r+0x10c8>
 4416238:	00800044 	movi	r2,1
 441623c:	d8c01d84 	addi	r3,sp,118
 4416240:	1009883a 	mov	r4,r2
 4416244:	d8c00015 	stw	r3,0(sp)
 4416248:	d8800115 	stw	r2,4(sp)
 441624c:	d811883a 	mov	r8,sp
 4416250:	200b883a 	mov	r5,r4
 4416254:	42000204 	addi	r8,r8,8
 4416258:	21000044 	addi	r4,r4,1
 441625c:	003d9706 	br	44158bc <__reset+0xfb4118bc>
 4416260:	d9001d04 	addi	r4,sp,116
 4416264:	00800084 	movi	r2,2
 4416268:	d9000015 	stw	r4,0(sp)
 441626c:	d8800115 	stw	r2,4(sp)
 4416270:	1809883a 	mov	r4,r3
 4416274:	d811883a 	mov	r8,sp
 4416278:	200b883a 	mov	r5,r4
 441627c:	42000204 	addi	r8,r8,8
 4416280:	21000044 	addi	r4,r4,1
 4416284:	003f4e06 	br	4415fc0 <__reset+0xfb411fc0>
 4416288:	d8001d85 	stb	zero,118(sp)
 441628c:	48005016 	blt	r9,zero,44163d0 <___vfiprintf_internal_r+0x100c>
 4416290:	00ffdfc4 	movi	r3,-129
 4416294:	94c4b03a 	or	r2,r18,r19
 4416298:	a0e8703a 	and	r20,r20,r3
 441629c:	103d4426 	beq	r2,zero,44157b0 <__reset+0xfb4117b0>
 44162a0:	0039883a 	mov	fp,zero
 44162a4:	d9002617 	ldw	r4,152(sp)
 44162a8:	dd401a04 	addi	r21,sp,104
 44162ac:	908003cc 	andi	r2,r18,15
 44162b0:	9806973a 	slli	r3,r19,28
 44162b4:	2085883a 	add	r2,r4,r2
 44162b8:	9024d13a 	srli	r18,r18,4
 44162bc:	10800003 	ldbu	r2,0(r2)
 44162c0:	9826d13a 	srli	r19,r19,4
 44162c4:	ad7fffc4 	addi	r21,r21,-1
 44162c8:	1ca4b03a 	or	r18,r3,r18
 44162cc:	a8800005 	stb	r2,0(r21)
 44162d0:	94c4b03a 	or	r2,r18,r19
 44162d4:	103ff51e 	bne	r2,zero,44162ac <__reset+0xfb4122ac>
 44162d8:	003e5906 	br	4415c40 <__reset+0xfb411c40>
 44162dc:	d9402117 	ldw	r5,132(sp)
 44162e0:	d9002017 	ldw	r4,128(sp)
 44162e4:	d9801a04 	addi	r6,sp,104
 44162e8:	44152b00 	call	44152b0 <__sprint_r.part.0>
 44162ec:	103f891e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 44162f0:	d8801c17 	ldw	r2,112(sp)
 44162f4:	d811883a 	mov	r8,sp
 44162f8:	003f9506 	br	4416150 <__reset+0xfb412150>
 44162fc:	d9402117 	ldw	r5,132(sp)
 4416300:	d9002017 	ldw	r4,128(sp)
 4416304:	d9801a04 	addi	r6,sp,104
 4416308:	44152b00 	call	44152b0 <__sprint_r.part.0>
 441630c:	103f811e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 4416310:	d811883a 	mov	r8,sp
 4416314:	003ced06 	br	44156cc <__reset+0xfb4116cc>
 4416318:	d9402117 	ldw	r5,132(sp)
 441631c:	d9002017 	ldw	r4,128(sp)
 4416320:	d9801a04 	addi	r6,sp,104
 4416324:	da402c15 	stw	r9,176(sp)
 4416328:	db802a15 	stw	r14,168(sp)
 441632c:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416330:	da402c17 	ldw	r9,176(sp)
 4416334:	db802a17 	ldw	r14,168(sp)
 4416338:	103f761e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 441633c:	d9401b17 	ldw	r5,108(sp)
 4416340:	d8801c17 	ldw	r2,112(sp)
 4416344:	d811883a 	mov	r8,sp
 4416348:	29000044 	addi	r4,r5,1
 441634c:	003d5b06 	br	44158bc <__reset+0xfb4118bc>
 4416350:	d9402117 	ldw	r5,132(sp)
 4416354:	d9002017 	ldw	r4,128(sp)
 4416358:	d9801a04 	addi	r6,sp,104
 441635c:	da402c15 	stw	r9,176(sp)
 4416360:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416364:	da402c17 	ldw	r9,176(sp)
 4416368:	103f6a1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 441636c:	d9401b17 	ldw	r5,108(sp)
 4416370:	d8801c17 	ldw	r2,112(sp)
 4416374:	d811883a 	mov	r8,sp
 4416378:	29000044 	addi	r4,r5,1
 441637c:	003f1006 	br	4415fc0 <__reset+0xfb411fc0>
 4416380:	1000c31e 	bne	r2,zero,4416690 <___vfiprintf_internal_r+0x12cc>
 4416384:	01000044 	movi	r4,1
 4416388:	000b883a 	mov	r5,zero
 441638c:	d811883a 	mov	r8,sp
 4416390:	003f0d06 	br	4415fc8 <__reset+0xfb411fc8>
 4416394:	d9402117 	ldw	r5,132(sp)
 4416398:	d9002017 	ldw	r4,128(sp)
 441639c:	d9801a04 	addi	r6,sp,104
 44163a0:	44152b00 	call	44152b0 <__sprint_r.part.0>
 44163a4:	103f5b1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 44163a8:	d9001b17 	ldw	r4,108(sp)
 44163ac:	d8801c17 	ldw	r2,112(sp)
 44163b0:	d811883a 	mov	r8,sp
 44163b4:	21000044 	addi	r4,r4,1
 44163b8:	003d8006 	br	44159bc <__reset+0xfb4119bc>
 44163bc:	010110f4 	movhi	r4,1091
 44163c0:	21132f04 	addi	r4,r4,19644
 44163c4:	d9002615 	stw	r4,152(sp)
 44163c8:	d8c02215 	stw	r3,136(sp)
 44163cc:	1029883a 	mov	r20,r2
 44163d0:	94c4b03a 	or	r2,r18,r19
 44163d4:	103fb21e 	bne	r2,zero,44162a0 <__reset+0xfb4122a0>
 44163d8:	0039883a 	mov	fp,zero
 44163dc:	00800084 	movi	r2,2
 44163e0:	003e6b06 	br	4415d90 <__reset+0xfb411d90>
 44163e4:	da802217 	ldw	r10,136(sp)
 44163e8:	d8001d85 	stb	zero,118(sp)
 44163ec:	0027883a 	mov	r19,zero
 44163f0:	50800104 	addi	r2,r10,4
 44163f4:	54800017 	ldw	r18,0(r10)
 44163f8:	483e6016 	blt	r9,zero,4415d7c <__reset+0xfb411d7c>
 44163fc:	00ffdfc4 	movi	r3,-129
 4416400:	d8802215 	stw	r2,136(sp)
 4416404:	a0e8703a 	and	r20,r20,r3
 4416408:	0039883a 	mov	fp,zero
 441640c:	903ebb26 	beq	r18,zero,4415efc <__reset+0xfb411efc>
 4416410:	00800244 	movi	r2,9
 4416414:	14bdee36 	bltu	r2,r18,4415bd0 <__reset+0xfb411bd0>
 4416418:	003eba06 	br	4415f04 <__reset+0xfb411f04>
 441641c:	00800c04 	movi	r2,48
 4416420:	d8c01d45 	stb	r3,117(sp)
 4416424:	d8801d05 	stb	r2,116(sp)
 4416428:	d8001d85 	stb	zero,118(sp)
 441642c:	a0c00094 	ori	r3,r20,2
 4416430:	4800a916 	blt	r9,zero,44166d8 <___vfiprintf_internal_r+0x1314>
 4416434:	00bfdfc4 	movi	r2,-129
 4416438:	a096703a 	and	r11,r20,r2
 441643c:	5d000094 	ori	r20,r11,2
 4416440:	0039883a 	mov	fp,zero
 4416444:	003f9706 	br	44162a4 <__reset+0xfb4122a4>
 4416448:	8025883a 	mov	r18,r16
 441644c:	003c2e06 	br	4415508 <__reset+0xfb411508>
 4416450:	008110f4 	movhi	r2,1091
 4416454:	10932f04 	addi	r2,r2,19644
 4416458:	0039883a 	mov	fp,zero
 441645c:	d8802615 	stw	r2,152(sp)
 4416460:	003f9006 	br	44162a4 <__reset+0xfb4122a4>
 4416464:	04a5c83a 	sub	r18,zero,r18
 4416468:	07000b44 	movi	fp,45
 441646c:	9004c03a 	cmpne	r2,r18,zero
 4416470:	04e7c83a 	sub	r19,zero,r19
 4416474:	df001d85 	stb	fp,118(sp)
 4416478:	98a7c83a 	sub	r19,r19,r2
 441647c:	48009f16 	blt	r9,zero,44166fc <___vfiprintf_internal_r+0x1338>
 4416480:	00bfdfc4 	movi	r2,-129
 4416484:	a0a8703a 	and	r20,r20,r2
 4416488:	003dd006 	br	4415bcc <__reset+0xfb411bcc>
 441648c:	70004c26 	beq	r14,zero,44165c0 <___vfiprintf_internal_r+0x11fc>
 4416490:	00800084 	movi	r2,2
 4416494:	d8c01d04 	addi	r3,sp,116
 4416498:	d8c00015 	stw	r3,0(sp)
 441649c:	d8800115 	stw	r2,4(sp)
 44164a0:	01000044 	movi	r4,1
 44164a4:	d811883a 	mov	r8,sp
 44164a8:	003f7306 	br	4416278 <__reset+0xfb412278>
 44164ac:	a080100c 	andi	r2,r20,64
 44164b0:	da802217 	ldw	r10,136(sp)
 44164b4:	103e0626 	beq	r2,zero,4415cd0 <__reset+0xfb411cd0>
 44164b8:	5480000f 	ldh	r18,0(r10)
 44164bc:	52800104 	addi	r10,r10,4
 44164c0:	da802215 	stw	r10,136(sp)
 44164c4:	9027d7fa 	srai	r19,r18,31
 44164c8:	9805883a 	mov	r2,r19
 44164cc:	003db806 	br	4415bb0 <__reset+0xfb411bb0>
 44164d0:	a080040c 	andi	r2,r20,16
 44164d4:	1000091e 	bne	r2,zero,44164fc <___vfiprintf_internal_r+0x1138>
 44164d8:	a2c0100c 	andi	r11,r20,64
 44164dc:	58000726 	beq	r11,zero,44164fc <___vfiprintf_internal_r+0x1138>
 44164e0:	da802217 	ldw	r10,136(sp)
 44164e4:	50800017 	ldw	r2,0(r10)
 44164e8:	52800104 	addi	r10,r10,4
 44164ec:	da802215 	stw	r10,136(sp)
 44164f0:	da802317 	ldw	r10,140(sp)
 44164f4:	1280000d 	sth	r10,0(r2)
 44164f8:	003be706 	br	4415498 <__reset+0xfb411498>
 44164fc:	da802217 	ldw	r10,136(sp)
 4416500:	50800017 	ldw	r2,0(r10)
 4416504:	52800104 	addi	r10,r10,4
 4416508:	da802215 	stw	r10,136(sp)
 441650c:	da802317 	ldw	r10,140(sp)
 4416510:	12800015 	stw	r10,0(r2)
 4416514:	003be006 	br	4415498 <__reset+0xfb411498>
 4416518:	a080100c 	andi	r2,r20,64
 441651c:	da802217 	ldw	r10,136(sp)
 4416520:	10003026 	beq	r2,zero,44165e4 <___vfiprintf_internal_r+0x1220>
 4416524:	5480000b 	ldhu	r18,0(r10)
 4416528:	52800104 	addi	r10,r10,4
 441652c:	0027883a 	mov	r19,zero
 4416530:	da802215 	stw	r10,136(sp)
 4416534:	003d8006 	br	4415b38 <__reset+0xfb411b38>
 4416538:	80c00007 	ldb	r3,0(r16)
 441653c:	003c0006 	br	4415540 <__reset+0xfb411540>
 4416540:	a080100c 	andi	r2,r20,64
 4416544:	d8001d85 	stb	zero,118(sp)
 4416548:	da802217 	ldw	r10,136(sp)
 441654c:	1000201e 	bne	r2,zero,44165d0 <___vfiprintf_internal_r+0x120c>
 4416550:	50800104 	addi	r2,r10,4
 4416554:	54800017 	ldw	r18,0(r10)
 4416558:	0027883a 	mov	r19,zero
 441655c:	483def0e 	bge	r9,zero,4415d1c <__reset+0xfb411d1c>
 4416560:	94c6b03a 	or	r3,r18,r19
 4416564:	d8802215 	stw	r2,136(sp)
 4416568:	183d4e1e 	bne	r3,zero,4415aa4 <__reset+0xfb411aa4>
 441656c:	0039883a 	mov	fp,zero
 4416570:	0005883a 	mov	r2,zero
 4416574:	003e0606 	br	4415d90 <__reset+0xfb411d90>
 4416578:	d9402117 	ldw	r5,132(sp)
 441657c:	d9002017 	ldw	r4,128(sp)
 4416580:	d9801a04 	addi	r6,sp,104
 4416584:	da402c15 	stw	r9,176(sp)
 4416588:	db802a15 	stw	r14,168(sp)
 441658c:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416590:	da402c17 	ldw	r9,176(sp)
 4416594:	db802a17 	ldw	r14,168(sp)
 4416598:	103ede1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 441659c:	d9401b17 	ldw	r5,108(sp)
 44165a0:	d8801c17 	ldw	r2,112(sp)
 44165a4:	d811883a 	mov	r8,sp
 44165a8:	29000044 	addi	r4,r5,1
 44165ac:	003e7406 	br	4415f80 <__reset+0xfb411f80>
 44165b0:	00bfffc4 	movi	r2,-1
 44165b4:	003c5806 	br	4415718 <__reset+0xfb411718>
 44165b8:	d811883a 	mov	r8,sp
 44165bc:	003ee806 	br	4416160 <__reset+0xfb412160>
 44165c0:	000b883a 	mov	r5,zero
 44165c4:	01000044 	movi	r4,1
 44165c8:	d811883a 	mov	r8,sp
 44165cc:	003e7c06 	br	4415fc0 <__reset+0xfb411fc0>
 44165d0:	50800104 	addi	r2,r10,4
 44165d4:	5480000b 	ldhu	r18,0(r10)
 44165d8:	0027883a 	mov	r19,zero
 44165dc:	483dcf0e 	bge	r9,zero,4415d1c <__reset+0xfb411d1c>
 44165e0:	003fdf06 	br	4416560 <__reset+0xfb412560>
 44165e4:	54800017 	ldw	r18,0(r10)
 44165e8:	52800104 	addi	r10,r10,4
 44165ec:	0027883a 	mov	r19,zero
 44165f0:	da802215 	stw	r10,136(sp)
 44165f4:	003d5006 	br	4415b38 <__reset+0xfb411b38>
 44165f8:	50800104 	addi	r2,r10,4
 44165fc:	5480000b 	ldhu	r18,0(r10)
 4416600:	0027883a 	mov	r19,zero
 4416604:	483f7d0e 	bge	r9,zero,44163fc <__reset+0xfb4123fc>
 4416608:	003ddc06 	br	4415d7c <__reset+0xfb411d7c>
 441660c:	d8c02215 	stw	r3,136(sp)
 4416610:	0039883a 	mov	fp,zero
 4416614:	003ddb06 	br	4415d84 <__reset+0xfb411d84>
 4416618:	028110f4 	movhi	r10,1091
 441661c:	52939f04 	addi	r10,r10,20092
 4416620:	da802415 	stw	r10,144(sp)
 4416624:	003e8306 	br	4416034 <__reset+0xfb412034>
 4416628:	d8801c17 	ldw	r2,112(sp)
 441662c:	dd002117 	ldw	r20,132(sp)
 4416630:	103eb926 	beq	r2,zero,4416118 <__reset+0xfb412118>
 4416634:	d9002017 	ldw	r4,128(sp)
 4416638:	d9801a04 	addi	r6,sp,104
 441663c:	a00b883a 	mov	r5,r20
 4416640:	44152b00 	call	44152b0 <__sprint_r.part.0>
 4416644:	003eb406 	br	4416118 <__reset+0xfb412118>
 4416648:	80c00043 	ldbu	r3,1(r16)
 441664c:	a5000814 	ori	r20,r20,32
 4416650:	84000044 	addi	r16,r16,1
 4416654:	18c03fcc 	andi	r3,r3,255
 4416658:	18c0201c 	xori	r3,r3,128
 441665c:	18ffe004 	addi	r3,r3,-128
 4416660:	003bb706 	br	4415540 <__reset+0xfb411540>
 4416664:	a809883a 	mov	r4,r21
 4416668:	d8c02a15 	stw	r3,168(sp)
 441666c:	da002b15 	stw	r8,172(sp)
 4416670:	440b1540 	call	440b154 <strlen>
 4416674:	d8c02a17 	ldw	r3,168(sp)
 4416678:	1027883a 	mov	r19,r2
 441667c:	df001d83 	ldbu	fp,118(sp)
 4416680:	d8c02215 	stw	r3,136(sp)
 4416684:	0013883a 	mov	r9,zero
 4416688:	da002b17 	ldw	r8,172(sp)
 441668c:	003c4d06 	br	44157c4 <__reset+0xfb4117c4>
 4416690:	d9402117 	ldw	r5,132(sp)
 4416694:	d9002017 	ldw	r4,128(sp)
 4416698:	d9801a04 	addi	r6,sp,104
 441669c:	da402c15 	stw	r9,176(sp)
 44166a0:	44152b00 	call	44152b0 <__sprint_r.part.0>
 44166a4:	da402c17 	ldw	r9,176(sp)
 44166a8:	103e9a1e 	bne	r2,zero,4416114 <__reset+0xfb412114>
 44166ac:	d9401b17 	ldw	r5,108(sp)
 44166b0:	d8801c17 	ldw	r2,112(sp)
 44166b4:	d811883a 	mov	r8,sp
 44166b8:	29000044 	addi	r4,r5,1
 44166bc:	003e4206 	br	4415fc8 <__reset+0xfb411fc8>
 44166c0:	d9401b17 	ldw	r5,108(sp)
 44166c4:	010110f4 	movhi	r4,1091
 44166c8:	2113a304 	addi	r4,r4,20108
 44166cc:	d9002415 	stw	r4,144(sp)
 44166d0:	29400044 	addi	r5,r5,1
 44166d4:	003c6d06 	br	441588c <__reset+0xfb41188c>
 44166d8:	0039883a 	mov	fp,zero
 44166dc:	00800084 	movi	r2,2
 44166e0:	10803fcc 	andi	r2,r2,255
 44166e4:	01000044 	movi	r4,1
 44166e8:	11001e26 	beq	r2,r4,4416764 <___vfiprintf_internal_r+0x13a0>
 44166ec:	01000084 	movi	r4,2
 44166f0:	11001e1e 	bne	r2,r4,441676c <___vfiprintf_internal_r+0x13a8>
 44166f4:	1829883a 	mov	r20,r3
 44166f8:	003eea06 	br	44162a4 <__reset+0xfb4122a4>
 44166fc:	a007883a 	mov	r3,r20
 4416700:	00800044 	movi	r2,1
 4416704:	003ff606 	br	44166e0 <__reset+0xfb4126e0>
 4416708:	00800184 	movi	r2,6
 441670c:	1240012e 	bgeu	r2,r9,4416714 <___vfiprintf_internal_r+0x1350>
 4416710:	1013883a 	mov	r9,r2
 4416714:	4827883a 	mov	r19,r9
 4416718:	4825883a 	mov	r18,r9
 441671c:	48001516 	blt	r9,zero,4416774 <___vfiprintf_internal_r+0x13b0>
 4416720:	054110f4 	movhi	r21,1091
 4416724:	d8c02215 	stw	r3,136(sp)
 4416728:	ad533404 	addi	r21,r21,19664
 441672c:	003d1406 	br	4415b80 <__reset+0xfb411b80>
 4416730:	028110f4 	movhi	r10,1091
 4416734:	52939f04 	addi	r10,r10,20092
 4416738:	da802415 	stw	r10,144(sp)
 441673c:	200d883a 	mov	r6,r4
 4416740:	003c9106 	br	4415988 <__reset+0xfb411988>
 4416744:	5021883a 	mov	r16,r10
 4416748:	0013883a 	mov	r9,zero
 441674c:	003b7d06 	br	4415544 <__reset+0xfb411544>
 4416750:	4827883a 	mov	r19,r9
 4416754:	df001d83 	ldbu	fp,118(sp)
 4416758:	d8c02215 	stw	r3,136(sp)
 441675c:	0013883a 	mov	r9,zero
 4416760:	003c1806 	br	44157c4 <__reset+0xfb4117c4>
 4416764:	1829883a 	mov	r20,r3
 4416768:	003d1806 	br	4415bcc <__reset+0xfb411bcc>
 441676c:	1829883a 	mov	r20,r3
 4416770:	003ccd06 	br	4415aa8 <__reset+0xfb411aa8>
 4416774:	0025883a 	mov	r18,zero
 4416778:	003fe906 	br	4416720 <__reset+0xfb412720>
 441677c:	d8802217 	ldw	r2,136(sp)
 4416780:	80c00043 	ldbu	r3,1(r16)
 4416784:	5021883a 	mov	r16,r10
 4416788:	12400017 	ldw	r9,0(r2)
 441678c:	10800104 	addi	r2,r2,4
 4416790:	d8802215 	stw	r2,136(sp)
 4416794:	483faf0e 	bge	r9,zero,4416654 <__reset+0xfb412654>
 4416798:	18c03fcc 	andi	r3,r3,255
 441679c:	18c0201c 	xori	r3,r3,128
 44167a0:	027fffc4 	movi	r9,-1
 44167a4:	18ffe004 	addi	r3,r3,-128
 44167a8:	003b6506 	br	4415540 <__reset+0xfb411540>
 44167ac:	d9c01d85 	stb	r7,118(sp)
 44167b0:	003ca006 	br	4415a34 <__reset+0xfb411a34>
 44167b4:	d9c01d85 	stb	r7,118(sp)
 44167b8:	003cad06 	br	4415a70 <__reset+0xfb411a70>
 44167bc:	d9c01d85 	stb	r7,118(sp)
 44167c0:	003d7d06 	br	4415db8 <__reset+0xfb411db8>
 44167c4:	d9c01d85 	stb	r7,118(sp)
 44167c8:	003d5f06 	br	4415d48 <__reset+0xfb411d48>
 44167cc:	a080004c 	andi	r2,r20,1
 44167d0:	0039883a 	mov	fp,zero
 44167d4:	10000526 	beq	r2,zero,44167ec <___vfiprintf_internal_r+0x1428>
 44167d8:	00800c04 	movi	r2,48
 44167dc:	d88019c5 	stb	r2,103(sp)
 44167e0:	dcc02717 	ldw	r19,156(sp)
 44167e4:	dd4019c4 	addi	r21,sp,103
 44167e8:	003bf606 	br	44157c4 <__reset+0xfb4117c4>
 44167ec:	0027883a 	mov	r19,zero
 44167f0:	dd401a04 	addi	r21,sp,104
 44167f4:	003bf306 	br	44157c4 <__reset+0xfb4117c4>
 44167f8:	d9c01d85 	stb	r7,118(sp)
 44167fc:	003dc806 	br	4415f20 <__reset+0xfb411f20>
 4416800:	d9c01d85 	stb	r7,118(sp)
 4416804:	003d3a06 	br	4415cf0 <__reset+0xfb411cf0>
 4416808:	d9c01d85 	stb	r7,118(sp)
 441680c:	003d2a06 	br	4415cb8 <__reset+0xfb411cb8>
 4416810:	d9c01d85 	stb	r7,118(sp)
 4416814:	003cde06 	br	4415b90 <__reset+0xfb411b90>
 4416818:	d9c01d85 	stb	r7,118(sp)
 441681c:	003cbc06 	br	4415b10 <__reset+0xfb411b10>

04416820 <__vfiprintf_internal>:
 4416820:	00811134 	movhi	r2,1092
 4416824:	10a15004 	addi	r2,r2,-31424
 4416828:	300f883a 	mov	r7,r6
 441682c:	280d883a 	mov	r6,r5
 4416830:	200b883a 	mov	r5,r4
 4416834:	11000017 	ldw	r4,0(r2)
 4416838:	44153c41 	jmpi	44153c4 <___vfiprintf_internal_r>

0441683c <__sbprintf>:
 441683c:	2880030b 	ldhu	r2,12(r5)
 4416840:	2ac01917 	ldw	r11,100(r5)
 4416844:	2a80038b 	ldhu	r10,14(r5)
 4416848:	2a400717 	ldw	r9,28(r5)
 441684c:	2a000917 	ldw	r8,36(r5)
 4416850:	defee204 	addi	sp,sp,-1144
 4416854:	00c10004 	movi	r3,1024
 4416858:	dc011a15 	stw	r16,1128(sp)
 441685c:	10bfff4c 	andi	r2,r2,65533
 4416860:	2821883a 	mov	r16,r5
 4416864:	d8cb883a 	add	r5,sp,r3
 4416868:	dc811c15 	stw	r18,1136(sp)
 441686c:	dc411b15 	stw	r17,1132(sp)
 4416870:	dfc11d15 	stw	ra,1140(sp)
 4416874:	2025883a 	mov	r18,r4
 4416878:	d881030d 	sth	r2,1036(sp)
 441687c:	dac11915 	stw	r11,1124(sp)
 4416880:	da81038d 	sth	r10,1038(sp)
 4416884:	da410715 	stw	r9,1052(sp)
 4416888:	da010915 	stw	r8,1060(sp)
 441688c:	dec10015 	stw	sp,1024(sp)
 4416890:	dec10415 	stw	sp,1040(sp)
 4416894:	d8c10215 	stw	r3,1032(sp)
 4416898:	d8c10515 	stw	r3,1044(sp)
 441689c:	d8010615 	stw	zero,1048(sp)
 44168a0:	44153c40 	call	44153c4 <___vfiprintf_internal_r>
 44168a4:	1023883a 	mov	r17,r2
 44168a8:	10000416 	blt	r2,zero,44168bc <__sbprintf+0x80>
 44168ac:	d9410004 	addi	r5,sp,1024
 44168b0:	9009883a 	mov	r4,r18
 44168b4:	44113b00 	call	44113b0 <_fflush_r>
 44168b8:	10000d1e 	bne	r2,zero,44168f0 <__sbprintf+0xb4>
 44168bc:	d881030b 	ldhu	r2,1036(sp)
 44168c0:	1080100c 	andi	r2,r2,64
 44168c4:	10000326 	beq	r2,zero,44168d4 <__sbprintf+0x98>
 44168c8:	8080030b 	ldhu	r2,12(r16)
 44168cc:	10801014 	ori	r2,r2,64
 44168d0:	8080030d 	sth	r2,12(r16)
 44168d4:	8805883a 	mov	r2,r17
 44168d8:	dfc11d17 	ldw	ra,1140(sp)
 44168dc:	dc811c17 	ldw	r18,1136(sp)
 44168e0:	dc411b17 	ldw	r17,1132(sp)
 44168e4:	dc011a17 	ldw	r16,1128(sp)
 44168e8:	dec11e04 	addi	sp,sp,1144
 44168ec:	f800283a 	ret
 44168f0:	047fffc4 	movi	r17,-1
 44168f4:	003ff106 	br	44168bc <__reset+0xfb4128bc>

044168f8 <_write_r>:
 44168f8:	defffd04 	addi	sp,sp,-12
 44168fc:	2805883a 	mov	r2,r5
 4416900:	dc000015 	stw	r16,0(sp)
 4416904:	04011134 	movhi	r16,1092
 4416908:	dc400115 	stw	r17,4(sp)
 441690c:	300b883a 	mov	r5,r6
 4416910:	842f1004 	addi	r16,r16,-17344
 4416914:	2023883a 	mov	r17,r4
 4416918:	380d883a 	mov	r6,r7
 441691c:	1009883a 	mov	r4,r2
 4416920:	dfc00215 	stw	ra,8(sp)
 4416924:	80000015 	stw	zero,0(r16)
 4416928:	4418d900 	call	4418d90 <write>
 441692c:	00ffffc4 	movi	r3,-1
 4416930:	10c00526 	beq	r2,r3,4416948 <_write_r+0x50>
 4416934:	dfc00217 	ldw	ra,8(sp)
 4416938:	dc400117 	ldw	r17,4(sp)
 441693c:	dc000017 	ldw	r16,0(sp)
 4416940:	dec00304 	addi	sp,sp,12
 4416944:	f800283a 	ret
 4416948:	80c00017 	ldw	r3,0(r16)
 441694c:	183ff926 	beq	r3,zero,4416934 <__reset+0xfb412934>
 4416950:	88c00015 	stw	r3,0(r17)
 4416954:	003ff706 	br	4416934 <__reset+0xfb412934>

04416958 <_close_r>:
 4416958:	defffd04 	addi	sp,sp,-12
 441695c:	dc000015 	stw	r16,0(sp)
 4416960:	04011134 	movhi	r16,1092
 4416964:	dc400115 	stw	r17,4(sp)
 4416968:	842f1004 	addi	r16,r16,-17344
 441696c:	2023883a 	mov	r17,r4
 4416970:	2809883a 	mov	r4,r5
 4416974:	dfc00215 	stw	ra,8(sp)
 4416978:	80000015 	stw	zero,0(r16)
 441697c:	44180780 	call	4418078 <close>
 4416980:	00ffffc4 	movi	r3,-1
 4416984:	10c00526 	beq	r2,r3,441699c <_close_r+0x44>
 4416988:	dfc00217 	ldw	ra,8(sp)
 441698c:	dc400117 	ldw	r17,4(sp)
 4416990:	dc000017 	ldw	r16,0(sp)
 4416994:	dec00304 	addi	sp,sp,12
 4416998:	f800283a 	ret
 441699c:	80c00017 	ldw	r3,0(r16)
 44169a0:	183ff926 	beq	r3,zero,4416988 <__reset+0xfb412988>
 44169a4:	88c00015 	stw	r3,0(r17)
 44169a8:	003ff706 	br	4416988 <__reset+0xfb412988>

044169ac <_calloc_r>:
 44169ac:	298b383a 	mul	r5,r5,r6
 44169b0:	defffe04 	addi	sp,sp,-8
 44169b4:	dfc00115 	stw	ra,4(sp)
 44169b8:	dc000015 	stw	r16,0(sp)
 44169bc:	440a3f00 	call	440a3f0 <_malloc_r>
 44169c0:	10002926 	beq	r2,zero,4416a68 <_calloc_r+0xbc>
 44169c4:	11bfff17 	ldw	r6,-4(r2)
 44169c8:	1021883a 	mov	r16,r2
 44169cc:	00bfff04 	movi	r2,-4
 44169d0:	308c703a 	and	r6,r6,r2
 44169d4:	00c00904 	movi	r3,36
 44169d8:	308d883a 	add	r6,r6,r2
 44169dc:	19801636 	bltu	r3,r6,4416a38 <_calloc_r+0x8c>
 44169e0:	008004c4 	movi	r2,19
 44169e4:	11800b2e 	bgeu	r2,r6,4416a14 <_calloc_r+0x68>
 44169e8:	80000015 	stw	zero,0(r16)
 44169ec:	80000115 	stw	zero,4(r16)
 44169f0:	008006c4 	movi	r2,27
 44169f4:	11801a2e 	bgeu	r2,r6,4416a60 <_calloc_r+0xb4>
 44169f8:	80000215 	stw	zero,8(r16)
 44169fc:	80000315 	stw	zero,12(r16)
 4416a00:	30c0151e 	bne	r6,r3,4416a58 <_calloc_r+0xac>
 4416a04:	80000415 	stw	zero,16(r16)
 4416a08:	80800604 	addi	r2,r16,24
 4416a0c:	80000515 	stw	zero,20(r16)
 4416a10:	00000106 	br	4416a18 <_calloc_r+0x6c>
 4416a14:	8005883a 	mov	r2,r16
 4416a18:	10000015 	stw	zero,0(r2)
 4416a1c:	10000115 	stw	zero,4(r2)
 4416a20:	10000215 	stw	zero,8(r2)
 4416a24:	8005883a 	mov	r2,r16
 4416a28:	dfc00117 	ldw	ra,4(sp)
 4416a2c:	dc000017 	ldw	r16,0(sp)
 4416a30:	dec00204 	addi	sp,sp,8
 4416a34:	f800283a 	ret
 4416a38:	000b883a 	mov	r5,zero
 4416a3c:	8009883a 	mov	r4,r16
 4416a40:	440ad440 	call	440ad44 <memset>
 4416a44:	8005883a 	mov	r2,r16
 4416a48:	dfc00117 	ldw	ra,4(sp)
 4416a4c:	dc000017 	ldw	r16,0(sp)
 4416a50:	dec00204 	addi	sp,sp,8
 4416a54:	f800283a 	ret
 4416a58:	80800404 	addi	r2,r16,16
 4416a5c:	003fee06 	br	4416a18 <__reset+0xfb412a18>
 4416a60:	80800204 	addi	r2,r16,8
 4416a64:	003fec06 	br	4416a18 <__reset+0xfb412a18>
 4416a68:	0005883a 	mov	r2,zero
 4416a6c:	003fee06 	br	4416a28 <__reset+0xfb412a28>

04416a70 <_fclose_r>:
 4416a70:	28003926 	beq	r5,zero,4416b58 <_fclose_r+0xe8>
 4416a74:	defffc04 	addi	sp,sp,-16
 4416a78:	dc400115 	stw	r17,4(sp)
 4416a7c:	dc000015 	stw	r16,0(sp)
 4416a80:	dfc00315 	stw	ra,12(sp)
 4416a84:	dc800215 	stw	r18,8(sp)
 4416a88:	2023883a 	mov	r17,r4
 4416a8c:	2821883a 	mov	r16,r5
 4416a90:	20000226 	beq	r4,zero,4416a9c <_fclose_r+0x2c>
 4416a94:	20800e17 	ldw	r2,56(r4)
 4416a98:	10002726 	beq	r2,zero,4416b38 <_fclose_r+0xc8>
 4416a9c:	8080030f 	ldh	r2,12(r16)
 4416aa0:	1000071e 	bne	r2,zero,4416ac0 <_fclose_r+0x50>
 4416aa4:	0005883a 	mov	r2,zero
 4416aa8:	dfc00317 	ldw	ra,12(sp)
 4416aac:	dc800217 	ldw	r18,8(sp)
 4416ab0:	dc400117 	ldw	r17,4(sp)
 4416ab4:	dc000017 	ldw	r16,0(sp)
 4416ab8:	dec00404 	addi	sp,sp,16
 4416abc:	f800283a 	ret
 4416ac0:	800b883a 	mov	r5,r16
 4416ac4:	8809883a 	mov	r4,r17
 4416ac8:	44111940 	call	4411194 <__sflush_r>
 4416acc:	1025883a 	mov	r18,r2
 4416ad0:	80800b17 	ldw	r2,44(r16)
 4416ad4:	10000426 	beq	r2,zero,4416ae8 <_fclose_r+0x78>
 4416ad8:	81400717 	ldw	r5,28(r16)
 4416adc:	8809883a 	mov	r4,r17
 4416ae0:	103ee83a 	callr	r2
 4416ae4:	10001616 	blt	r2,zero,4416b40 <_fclose_r+0xd0>
 4416ae8:	8080030b 	ldhu	r2,12(r16)
 4416aec:	1080200c 	andi	r2,r2,128
 4416af0:	1000151e 	bne	r2,zero,4416b48 <_fclose_r+0xd8>
 4416af4:	81400c17 	ldw	r5,48(r16)
 4416af8:	28000526 	beq	r5,zero,4416b10 <_fclose_r+0xa0>
 4416afc:	80801004 	addi	r2,r16,64
 4416b00:	28800226 	beq	r5,r2,4416b0c <_fclose_r+0x9c>
 4416b04:	8809883a 	mov	r4,r17
 4416b08:	44119000 	call	4411900 <_free_r>
 4416b0c:	80000c15 	stw	zero,48(r16)
 4416b10:	81401117 	ldw	r5,68(r16)
 4416b14:	28000326 	beq	r5,zero,4416b24 <_fclose_r+0xb4>
 4416b18:	8809883a 	mov	r4,r17
 4416b1c:	44119000 	call	4411900 <_free_r>
 4416b20:	80001115 	stw	zero,68(r16)
 4416b24:	441179c0 	call	441179c <__sfp_lock_acquire>
 4416b28:	8000030d 	sth	zero,12(r16)
 4416b2c:	44117a00 	call	44117a0 <__sfp_lock_release>
 4416b30:	9005883a 	mov	r2,r18
 4416b34:	003fdc06 	br	4416aa8 <__reset+0xfb412aa8>
 4416b38:	441178c0 	call	441178c <__sinit>
 4416b3c:	003fd706 	br	4416a9c <__reset+0xfb412a9c>
 4416b40:	04bfffc4 	movi	r18,-1
 4416b44:	003fe806 	br	4416ae8 <__reset+0xfb412ae8>
 4416b48:	81400417 	ldw	r5,16(r16)
 4416b4c:	8809883a 	mov	r4,r17
 4416b50:	44119000 	call	4411900 <_free_r>
 4416b54:	003fe706 	br	4416af4 <__reset+0xfb412af4>
 4416b58:	0005883a 	mov	r2,zero
 4416b5c:	f800283a 	ret

04416b60 <fclose>:
 4416b60:	00811134 	movhi	r2,1092
 4416b64:	10a15004 	addi	r2,r2,-31424
 4416b68:	200b883a 	mov	r5,r4
 4416b6c:	11000017 	ldw	r4,0(r2)
 4416b70:	4416a701 	jmpi	4416a70 <_fclose_r>

04416b74 <__fputwc>:
 4416b74:	defff804 	addi	sp,sp,-32
 4416b78:	dcc00415 	stw	r19,16(sp)
 4416b7c:	dc800315 	stw	r18,12(sp)
 4416b80:	dc000115 	stw	r16,4(sp)
 4416b84:	dfc00715 	stw	ra,28(sp)
 4416b88:	dd400615 	stw	r21,24(sp)
 4416b8c:	dd000515 	stw	r20,20(sp)
 4416b90:	dc400215 	stw	r17,8(sp)
 4416b94:	2027883a 	mov	r19,r4
 4416b98:	2825883a 	mov	r18,r5
 4416b9c:	3021883a 	mov	r16,r6
 4416ba0:	44122dc0 	call	44122dc <__locale_mb_cur_max>
 4416ba4:	00c00044 	movi	r3,1
 4416ba8:	10c03e26 	beq	r2,r3,4416ca4 <__fputwc+0x130>
 4416bac:	81c01704 	addi	r7,r16,92
 4416bb0:	900d883a 	mov	r6,r18
 4416bb4:	d80b883a 	mov	r5,sp
 4416bb8:	9809883a 	mov	r4,r19
 4416bbc:	44170440 	call	4417044 <_wcrtomb_r>
 4416bc0:	1029883a 	mov	r20,r2
 4416bc4:	00bfffc4 	movi	r2,-1
 4416bc8:	a0802026 	beq	r20,r2,4416c4c <__fputwc+0xd8>
 4416bcc:	d9400003 	ldbu	r5,0(sp)
 4416bd0:	a0001c26 	beq	r20,zero,4416c44 <__fputwc+0xd0>
 4416bd4:	0023883a 	mov	r17,zero
 4416bd8:	05400284 	movi	r21,10
 4416bdc:	00000906 	br	4416c04 <__fputwc+0x90>
 4416be0:	80800017 	ldw	r2,0(r16)
 4416be4:	11400005 	stb	r5,0(r2)
 4416be8:	80c00017 	ldw	r3,0(r16)
 4416bec:	18c00044 	addi	r3,r3,1
 4416bf0:	80c00015 	stw	r3,0(r16)
 4416bf4:	8c400044 	addi	r17,r17,1
 4416bf8:	dc45883a 	add	r2,sp,r17
 4416bfc:	8d00112e 	bgeu	r17,r20,4416c44 <__fputwc+0xd0>
 4416c00:	11400003 	ldbu	r5,0(r2)
 4416c04:	80c00217 	ldw	r3,8(r16)
 4416c08:	18ffffc4 	addi	r3,r3,-1
 4416c0c:	80c00215 	stw	r3,8(r16)
 4416c10:	183ff30e 	bge	r3,zero,4416be0 <__reset+0xfb412be0>
 4416c14:	80800617 	ldw	r2,24(r16)
 4416c18:	18801916 	blt	r3,r2,4416c80 <__fputwc+0x10c>
 4416c1c:	80800017 	ldw	r2,0(r16)
 4416c20:	11400005 	stb	r5,0(r2)
 4416c24:	80800017 	ldw	r2,0(r16)
 4416c28:	10c00003 	ldbu	r3,0(r2)
 4416c2c:	10800044 	addi	r2,r2,1
 4416c30:	1d402326 	beq	r3,r21,4416cc0 <__fputwc+0x14c>
 4416c34:	80800015 	stw	r2,0(r16)
 4416c38:	8c400044 	addi	r17,r17,1
 4416c3c:	dc45883a 	add	r2,sp,r17
 4416c40:	8d3fef36 	bltu	r17,r20,4416c00 <__reset+0xfb412c00>
 4416c44:	9005883a 	mov	r2,r18
 4416c48:	00000406 	br	4416c5c <__fputwc+0xe8>
 4416c4c:	80c0030b 	ldhu	r3,12(r16)
 4416c50:	a005883a 	mov	r2,r20
 4416c54:	18c01014 	ori	r3,r3,64
 4416c58:	80c0030d 	sth	r3,12(r16)
 4416c5c:	dfc00717 	ldw	ra,28(sp)
 4416c60:	dd400617 	ldw	r21,24(sp)
 4416c64:	dd000517 	ldw	r20,20(sp)
 4416c68:	dcc00417 	ldw	r19,16(sp)
 4416c6c:	dc800317 	ldw	r18,12(sp)
 4416c70:	dc400217 	ldw	r17,8(sp)
 4416c74:	dc000117 	ldw	r16,4(sp)
 4416c78:	dec00804 	addi	sp,sp,32
 4416c7c:	f800283a 	ret
 4416c80:	800d883a 	mov	r6,r16
 4416c84:	29403fcc 	andi	r5,r5,255
 4416c88:	9809883a 	mov	r4,r19
 4416c8c:	4416eec0 	call	4416eec <__swbuf_r>
 4416c90:	10bfffe0 	cmpeqi	r2,r2,-1
 4416c94:	10803fcc 	andi	r2,r2,255
 4416c98:	103fd626 	beq	r2,zero,4416bf4 <__reset+0xfb412bf4>
 4416c9c:	00bfffc4 	movi	r2,-1
 4416ca0:	003fee06 	br	4416c5c <__reset+0xfb412c5c>
 4416ca4:	90ffffc4 	addi	r3,r18,-1
 4416ca8:	01003f84 	movi	r4,254
 4416cac:	20ffbf36 	bltu	r4,r3,4416bac <__reset+0xfb412bac>
 4416cb0:	900b883a 	mov	r5,r18
 4416cb4:	dc800005 	stb	r18,0(sp)
 4416cb8:	1029883a 	mov	r20,r2
 4416cbc:	003fc506 	br	4416bd4 <__reset+0xfb412bd4>
 4416cc0:	800d883a 	mov	r6,r16
 4416cc4:	a80b883a 	mov	r5,r21
 4416cc8:	9809883a 	mov	r4,r19
 4416ccc:	4416eec0 	call	4416eec <__swbuf_r>
 4416cd0:	10bfffe0 	cmpeqi	r2,r2,-1
 4416cd4:	003fef06 	br	4416c94 <__reset+0xfb412c94>

04416cd8 <_fputwc_r>:
 4416cd8:	3080030b 	ldhu	r2,12(r6)
 4416cdc:	10c8000c 	andi	r3,r2,8192
 4416ce0:	1800051e 	bne	r3,zero,4416cf8 <_fputwc_r+0x20>
 4416ce4:	30c01917 	ldw	r3,100(r6)
 4416ce8:	10880014 	ori	r2,r2,8192
 4416cec:	3080030d 	sth	r2,12(r6)
 4416cf0:	18880014 	ori	r2,r3,8192
 4416cf4:	30801915 	stw	r2,100(r6)
 4416cf8:	4416b741 	jmpi	4416b74 <__fputwc>

04416cfc <fputwc>:
 4416cfc:	00811134 	movhi	r2,1092
 4416d00:	defffc04 	addi	sp,sp,-16
 4416d04:	10a15004 	addi	r2,r2,-31424
 4416d08:	dc000115 	stw	r16,4(sp)
 4416d0c:	14000017 	ldw	r16,0(r2)
 4416d10:	dc400215 	stw	r17,8(sp)
 4416d14:	dfc00315 	stw	ra,12(sp)
 4416d18:	2023883a 	mov	r17,r4
 4416d1c:	80000226 	beq	r16,zero,4416d28 <fputwc+0x2c>
 4416d20:	80800e17 	ldw	r2,56(r16)
 4416d24:	10001026 	beq	r2,zero,4416d68 <fputwc+0x6c>
 4416d28:	2880030b 	ldhu	r2,12(r5)
 4416d2c:	10c8000c 	andi	r3,r2,8192
 4416d30:	1800051e 	bne	r3,zero,4416d48 <fputwc+0x4c>
 4416d34:	28c01917 	ldw	r3,100(r5)
 4416d38:	10880014 	ori	r2,r2,8192
 4416d3c:	2880030d 	sth	r2,12(r5)
 4416d40:	18880014 	ori	r2,r3,8192
 4416d44:	28801915 	stw	r2,100(r5)
 4416d48:	280d883a 	mov	r6,r5
 4416d4c:	8009883a 	mov	r4,r16
 4416d50:	880b883a 	mov	r5,r17
 4416d54:	dfc00317 	ldw	ra,12(sp)
 4416d58:	dc400217 	ldw	r17,8(sp)
 4416d5c:	dc000117 	ldw	r16,4(sp)
 4416d60:	dec00404 	addi	sp,sp,16
 4416d64:	4416b741 	jmpi	4416b74 <__fputwc>
 4416d68:	8009883a 	mov	r4,r16
 4416d6c:	d9400015 	stw	r5,0(sp)
 4416d70:	441178c0 	call	441178c <__sinit>
 4416d74:	d9400017 	ldw	r5,0(sp)
 4416d78:	003feb06 	br	4416d28 <__reset+0xfb412d28>

04416d7c <_fstat_r>:
 4416d7c:	defffd04 	addi	sp,sp,-12
 4416d80:	2805883a 	mov	r2,r5
 4416d84:	dc000015 	stw	r16,0(sp)
 4416d88:	04011134 	movhi	r16,1092
 4416d8c:	dc400115 	stw	r17,4(sp)
 4416d90:	842f1004 	addi	r16,r16,-17344
 4416d94:	2023883a 	mov	r17,r4
 4416d98:	300b883a 	mov	r5,r6
 4416d9c:	1009883a 	mov	r4,r2
 4416da0:	dfc00215 	stw	ra,8(sp)
 4416da4:	80000015 	stw	zero,0(r16)
 4416da8:	44181c40 	call	44181c4 <fstat>
 4416dac:	00ffffc4 	movi	r3,-1
 4416db0:	10c00526 	beq	r2,r3,4416dc8 <_fstat_r+0x4c>
 4416db4:	dfc00217 	ldw	ra,8(sp)
 4416db8:	dc400117 	ldw	r17,4(sp)
 4416dbc:	dc000017 	ldw	r16,0(sp)
 4416dc0:	dec00304 	addi	sp,sp,12
 4416dc4:	f800283a 	ret
 4416dc8:	80c00017 	ldw	r3,0(r16)
 4416dcc:	183ff926 	beq	r3,zero,4416db4 <__reset+0xfb412db4>
 4416dd0:	88c00015 	stw	r3,0(r17)
 4416dd4:	003ff706 	br	4416db4 <__reset+0xfb412db4>

04416dd8 <_isatty_r>:
 4416dd8:	defffd04 	addi	sp,sp,-12
 4416ddc:	dc000015 	stw	r16,0(sp)
 4416de0:	04011134 	movhi	r16,1092
 4416de4:	dc400115 	stw	r17,4(sp)
 4416de8:	842f1004 	addi	r16,r16,-17344
 4416dec:	2023883a 	mov	r17,r4
 4416df0:	2809883a 	mov	r4,r5
 4416df4:	dfc00215 	stw	ra,8(sp)
 4416df8:	80000015 	stw	zero,0(r16)
 4416dfc:	44185940 	call	4418594 <isatty>
 4416e00:	00ffffc4 	movi	r3,-1
 4416e04:	10c00526 	beq	r2,r3,4416e1c <_isatty_r+0x44>
 4416e08:	dfc00217 	ldw	ra,8(sp)
 4416e0c:	dc400117 	ldw	r17,4(sp)
 4416e10:	dc000017 	ldw	r16,0(sp)
 4416e14:	dec00304 	addi	sp,sp,12
 4416e18:	f800283a 	ret
 4416e1c:	80c00017 	ldw	r3,0(r16)
 4416e20:	183ff926 	beq	r3,zero,4416e08 <__reset+0xfb412e08>
 4416e24:	88c00015 	stw	r3,0(r17)
 4416e28:	003ff706 	br	4416e08 <__reset+0xfb412e08>

04416e2c <_lseek_r>:
 4416e2c:	defffd04 	addi	sp,sp,-12
 4416e30:	2805883a 	mov	r2,r5
 4416e34:	dc000015 	stw	r16,0(sp)
 4416e38:	04011134 	movhi	r16,1092
 4416e3c:	dc400115 	stw	r17,4(sp)
 4416e40:	300b883a 	mov	r5,r6
 4416e44:	842f1004 	addi	r16,r16,-17344
 4416e48:	2023883a 	mov	r17,r4
 4416e4c:	380d883a 	mov	r6,r7
 4416e50:	1009883a 	mov	r4,r2
 4416e54:	dfc00215 	stw	ra,8(sp)
 4416e58:	80000015 	stw	zero,0(r16)
 4416e5c:	44187740 	call	4418774 <lseek>
 4416e60:	00ffffc4 	movi	r3,-1
 4416e64:	10c00526 	beq	r2,r3,4416e7c <_lseek_r+0x50>
 4416e68:	dfc00217 	ldw	ra,8(sp)
 4416e6c:	dc400117 	ldw	r17,4(sp)
 4416e70:	dc000017 	ldw	r16,0(sp)
 4416e74:	dec00304 	addi	sp,sp,12
 4416e78:	f800283a 	ret
 4416e7c:	80c00017 	ldw	r3,0(r16)
 4416e80:	183ff926 	beq	r3,zero,4416e68 <__reset+0xfb412e68>
 4416e84:	88c00015 	stw	r3,0(r17)
 4416e88:	003ff706 	br	4416e68 <__reset+0xfb412e68>

04416e8c <_read_r>:
 4416e8c:	defffd04 	addi	sp,sp,-12
 4416e90:	2805883a 	mov	r2,r5
 4416e94:	dc000015 	stw	r16,0(sp)
 4416e98:	04011134 	movhi	r16,1092
 4416e9c:	dc400115 	stw	r17,4(sp)
 4416ea0:	300b883a 	mov	r5,r6
 4416ea4:	842f1004 	addi	r16,r16,-17344
 4416ea8:	2023883a 	mov	r17,r4
 4416eac:	380d883a 	mov	r6,r7
 4416eb0:	1009883a 	mov	r4,r2
 4416eb4:	dfc00215 	stw	ra,8(sp)
 4416eb8:	80000015 	stw	zero,0(r16)
 4416ebc:	441895c0 	call	441895c <read>
 4416ec0:	00ffffc4 	movi	r3,-1
 4416ec4:	10c00526 	beq	r2,r3,4416edc <_read_r+0x50>
 4416ec8:	dfc00217 	ldw	ra,8(sp)
 4416ecc:	dc400117 	ldw	r17,4(sp)
 4416ed0:	dc000017 	ldw	r16,0(sp)
 4416ed4:	dec00304 	addi	sp,sp,12
 4416ed8:	f800283a 	ret
 4416edc:	80c00017 	ldw	r3,0(r16)
 4416ee0:	183ff926 	beq	r3,zero,4416ec8 <__reset+0xfb412ec8>
 4416ee4:	88c00015 	stw	r3,0(r17)
 4416ee8:	003ff706 	br	4416ec8 <__reset+0xfb412ec8>

04416eec <__swbuf_r>:
 4416eec:	defffb04 	addi	sp,sp,-20
 4416ef0:	dcc00315 	stw	r19,12(sp)
 4416ef4:	dc800215 	stw	r18,8(sp)
 4416ef8:	dc000015 	stw	r16,0(sp)
 4416efc:	dfc00415 	stw	ra,16(sp)
 4416f00:	dc400115 	stw	r17,4(sp)
 4416f04:	2025883a 	mov	r18,r4
 4416f08:	2827883a 	mov	r19,r5
 4416f0c:	3021883a 	mov	r16,r6
 4416f10:	20000226 	beq	r4,zero,4416f1c <__swbuf_r+0x30>
 4416f14:	20800e17 	ldw	r2,56(r4)
 4416f18:	10004226 	beq	r2,zero,4417024 <__swbuf_r+0x138>
 4416f1c:	80800617 	ldw	r2,24(r16)
 4416f20:	8100030b 	ldhu	r4,12(r16)
 4416f24:	80800215 	stw	r2,8(r16)
 4416f28:	2080020c 	andi	r2,r4,8
 4416f2c:	10003626 	beq	r2,zero,4417008 <__swbuf_r+0x11c>
 4416f30:	80c00417 	ldw	r3,16(r16)
 4416f34:	18003426 	beq	r3,zero,4417008 <__swbuf_r+0x11c>
 4416f38:	2088000c 	andi	r2,r4,8192
 4416f3c:	9c403fcc 	andi	r17,r19,255
 4416f40:	10001a26 	beq	r2,zero,4416fac <__swbuf_r+0xc0>
 4416f44:	80800017 	ldw	r2,0(r16)
 4416f48:	81000517 	ldw	r4,20(r16)
 4416f4c:	10c7c83a 	sub	r3,r2,r3
 4416f50:	1900200e 	bge	r3,r4,4416fd4 <__swbuf_r+0xe8>
 4416f54:	18c00044 	addi	r3,r3,1
 4416f58:	81000217 	ldw	r4,8(r16)
 4416f5c:	11400044 	addi	r5,r2,1
 4416f60:	81400015 	stw	r5,0(r16)
 4416f64:	213fffc4 	addi	r4,r4,-1
 4416f68:	81000215 	stw	r4,8(r16)
 4416f6c:	14c00005 	stb	r19,0(r2)
 4416f70:	80800517 	ldw	r2,20(r16)
 4416f74:	10c01e26 	beq	r2,r3,4416ff0 <__swbuf_r+0x104>
 4416f78:	8080030b 	ldhu	r2,12(r16)
 4416f7c:	1080004c 	andi	r2,r2,1
 4416f80:	10000226 	beq	r2,zero,4416f8c <__swbuf_r+0xa0>
 4416f84:	00800284 	movi	r2,10
 4416f88:	88801926 	beq	r17,r2,4416ff0 <__swbuf_r+0x104>
 4416f8c:	8805883a 	mov	r2,r17
 4416f90:	dfc00417 	ldw	ra,16(sp)
 4416f94:	dcc00317 	ldw	r19,12(sp)
 4416f98:	dc800217 	ldw	r18,8(sp)
 4416f9c:	dc400117 	ldw	r17,4(sp)
 4416fa0:	dc000017 	ldw	r16,0(sp)
 4416fa4:	dec00504 	addi	sp,sp,20
 4416fa8:	f800283a 	ret
 4416fac:	81401917 	ldw	r5,100(r16)
 4416fb0:	00b7ffc4 	movi	r2,-8193
 4416fb4:	21080014 	ori	r4,r4,8192
 4416fb8:	2884703a 	and	r2,r5,r2
 4416fbc:	80801915 	stw	r2,100(r16)
 4416fc0:	80800017 	ldw	r2,0(r16)
 4416fc4:	8100030d 	sth	r4,12(r16)
 4416fc8:	81000517 	ldw	r4,20(r16)
 4416fcc:	10c7c83a 	sub	r3,r2,r3
 4416fd0:	193fe016 	blt	r3,r4,4416f54 <__reset+0xfb412f54>
 4416fd4:	800b883a 	mov	r5,r16
 4416fd8:	9009883a 	mov	r4,r18
 4416fdc:	44113b00 	call	44113b0 <_fflush_r>
 4416fe0:	1000071e 	bne	r2,zero,4417000 <__swbuf_r+0x114>
 4416fe4:	80800017 	ldw	r2,0(r16)
 4416fe8:	00c00044 	movi	r3,1
 4416fec:	003fda06 	br	4416f58 <__reset+0xfb412f58>
 4416ff0:	800b883a 	mov	r5,r16
 4416ff4:	9009883a 	mov	r4,r18
 4416ff8:	44113b00 	call	44113b0 <_fflush_r>
 4416ffc:	103fe326 	beq	r2,zero,4416f8c <__reset+0xfb412f8c>
 4417000:	00bfffc4 	movi	r2,-1
 4417004:	003fe206 	br	4416f90 <__reset+0xfb412f90>
 4417008:	800b883a 	mov	r5,r16
 441700c:	9009883a 	mov	r4,r18
 4417010:	440f7b80 	call	440f7b8 <__swsetup_r>
 4417014:	103ffa1e 	bne	r2,zero,4417000 <__reset+0xfb413000>
 4417018:	8100030b 	ldhu	r4,12(r16)
 441701c:	80c00417 	ldw	r3,16(r16)
 4417020:	003fc506 	br	4416f38 <__reset+0xfb412f38>
 4417024:	441178c0 	call	441178c <__sinit>
 4417028:	003fbc06 	br	4416f1c <__reset+0xfb412f1c>

0441702c <__swbuf>:
 441702c:	00811134 	movhi	r2,1092
 4417030:	10a15004 	addi	r2,r2,-31424
 4417034:	280d883a 	mov	r6,r5
 4417038:	200b883a 	mov	r5,r4
 441703c:	11000017 	ldw	r4,0(r2)
 4417040:	4416eec1 	jmpi	4416eec <__swbuf_r>

04417044 <_wcrtomb_r>:
 4417044:	defff604 	addi	sp,sp,-40
 4417048:	00811134 	movhi	r2,1092
 441704c:	dc800815 	stw	r18,32(sp)
 4417050:	dc400715 	stw	r17,28(sp)
 4417054:	dc000615 	stw	r16,24(sp)
 4417058:	10a15404 	addi	r2,r2,-31408
 441705c:	dfc00915 	stw	ra,36(sp)
 4417060:	2021883a 	mov	r16,r4
 4417064:	3823883a 	mov	r17,r7
 4417068:	14800017 	ldw	r18,0(r2)
 441706c:	28001426 	beq	r5,zero,44170c0 <_wcrtomb_r+0x7c>
 4417070:	d9400415 	stw	r5,16(sp)
 4417074:	d9800515 	stw	r6,20(sp)
 4417078:	44122d00 	call	44122d0 <__locale_charset>
 441707c:	d9800517 	ldw	r6,20(sp)
 4417080:	d9400417 	ldw	r5,16(sp)
 4417084:	100f883a 	mov	r7,r2
 4417088:	dc400015 	stw	r17,0(sp)
 441708c:	8009883a 	mov	r4,r16
 4417090:	903ee83a 	callr	r18
 4417094:	00ffffc4 	movi	r3,-1
 4417098:	10c0031e 	bne	r2,r3,44170a8 <_wcrtomb_r+0x64>
 441709c:	88000015 	stw	zero,0(r17)
 44170a0:	00c02284 	movi	r3,138
 44170a4:	80c00015 	stw	r3,0(r16)
 44170a8:	dfc00917 	ldw	ra,36(sp)
 44170ac:	dc800817 	ldw	r18,32(sp)
 44170b0:	dc400717 	ldw	r17,28(sp)
 44170b4:	dc000617 	ldw	r16,24(sp)
 44170b8:	dec00a04 	addi	sp,sp,40
 44170bc:	f800283a 	ret
 44170c0:	44122d00 	call	44122d0 <__locale_charset>
 44170c4:	100f883a 	mov	r7,r2
 44170c8:	dc400015 	stw	r17,0(sp)
 44170cc:	000d883a 	mov	r6,zero
 44170d0:	d9400104 	addi	r5,sp,4
 44170d4:	8009883a 	mov	r4,r16
 44170d8:	903ee83a 	callr	r18
 44170dc:	003fed06 	br	4417094 <__reset+0xfb413094>

044170e0 <wcrtomb>:
 44170e0:	defff604 	addi	sp,sp,-40
 44170e4:	00811134 	movhi	r2,1092
 44170e8:	dc800615 	stw	r18,24(sp)
 44170ec:	dc400515 	stw	r17,20(sp)
 44170f0:	10a15004 	addi	r2,r2,-31424
 44170f4:	dfc00915 	stw	ra,36(sp)
 44170f8:	dd000815 	stw	r20,32(sp)
 44170fc:	dcc00715 	stw	r19,28(sp)
 4417100:	dc000415 	stw	r16,16(sp)
 4417104:	3025883a 	mov	r18,r6
 4417108:	14400017 	ldw	r17,0(r2)
 441710c:	20001926 	beq	r4,zero,4417174 <wcrtomb+0x94>
 4417110:	00811134 	movhi	r2,1092
 4417114:	10a15404 	addi	r2,r2,-31408
 4417118:	15000017 	ldw	r20,0(r2)
 441711c:	2021883a 	mov	r16,r4
 4417120:	2827883a 	mov	r19,r5
 4417124:	44122d00 	call	44122d0 <__locale_charset>
 4417128:	100f883a 	mov	r7,r2
 441712c:	dc800015 	stw	r18,0(sp)
 4417130:	980d883a 	mov	r6,r19
 4417134:	800b883a 	mov	r5,r16
 4417138:	8809883a 	mov	r4,r17
 441713c:	a03ee83a 	callr	r20
 4417140:	00ffffc4 	movi	r3,-1
 4417144:	10c0031e 	bne	r2,r3,4417154 <wcrtomb+0x74>
 4417148:	90000015 	stw	zero,0(r18)
 441714c:	00c02284 	movi	r3,138
 4417150:	88c00015 	stw	r3,0(r17)
 4417154:	dfc00917 	ldw	ra,36(sp)
 4417158:	dd000817 	ldw	r20,32(sp)
 441715c:	dcc00717 	ldw	r19,28(sp)
 4417160:	dc800617 	ldw	r18,24(sp)
 4417164:	dc400517 	ldw	r17,20(sp)
 4417168:	dc000417 	ldw	r16,16(sp)
 441716c:	dec00a04 	addi	sp,sp,40
 4417170:	f800283a 	ret
 4417174:	00811134 	movhi	r2,1092
 4417178:	10a15404 	addi	r2,r2,-31408
 441717c:	14000017 	ldw	r16,0(r2)
 4417180:	44122d00 	call	44122d0 <__locale_charset>
 4417184:	100f883a 	mov	r7,r2
 4417188:	dc800015 	stw	r18,0(sp)
 441718c:	000d883a 	mov	r6,zero
 4417190:	d9400104 	addi	r5,sp,4
 4417194:	8809883a 	mov	r4,r17
 4417198:	803ee83a 	callr	r16
 441719c:	003fe806 	br	4417140 <__reset+0xfb413140>

044171a0 <__ascii_wctomb>:
 44171a0:	28000526 	beq	r5,zero,44171b8 <__ascii_wctomb+0x18>
 44171a4:	00803fc4 	movi	r2,255
 44171a8:	11800536 	bltu	r2,r6,44171c0 <__ascii_wctomb+0x20>
 44171ac:	29800005 	stb	r6,0(r5)
 44171b0:	00800044 	movi	r2,1
 44171b4:	f800283a 	ret
 44171b8:	0005883a 	mov	r2,zero
 44171bc:	f800283a 	ret
 44171c0:	00802284 	movi	r2,138
 44171c4:	20800015 	stw	r2,0(r4)
 44171c8:	00bfffc4 	movi	r2,-1
 44171cc:	f800283a 	ret

044171d0 <_wctomb_r>:
 44171d0:	00811134 	movhi	r2,1092
 44171d4:	defff904 	addi	sp,sp,-28
 44171d8:	10a15404 	addi	r2,r2,-31408
 44171dc:	dfc00615 	stw	ra,24(sp)
 44171e0:	dc400515 	stw	r17,20(sp)
 44171e4:	dc000415 	stw	r16,16(sp)
 44171e8:	3823883a 	mov	r17,r7
 44171ec:	14000017 	ldw	r16,0(r2)
 44171f0:	d9000115 	stw	r4,4(sp)
 44171f4:	d9400215 	stw	r5,8(sp)
 44171f8:	d9800315 	stw	r6,12(sp)
 44171fc:	44122d00 	call	44122d0 <__locale_charset>
 4417200:	d9800317 	ldw	r6,12(sp)
 4417204:	d9400217 	ldw	r5,8(sp)
 4417208:	d9000117 	ldw	r4,4(sp)
 441720c:	100f883a 	mov	r7,r2
 4417210:	dc400015 	stw	r17,0(sp)
 4417214:	803ee83a 	callr	r16
 4417218:	dfc00617 	ldw	ra,24(sp)
 441721c:	dc400517 	ldw	r17,20(sp)
 4417220:	dc000417 	ldw	r16,16(sp)
 4417224:	dec00704 	addi	sp,sp,28
 4417228:	f800283a 	ret

0441722c <__udivdi3>:
 441722c:	defff504 	addi	sp,sp,-44
 4417230:	dcc00415 	stw	r19,16(sp)
 4417234:	dc000115 	stw	r16,4(sp)
 4417238:	dfc00a15 	stw	ra,40(sp)
 441723c:	df000915 	stw	fp,36(sp)
 4417240:	ddc00815 	stw	r23,32(sp)
 4417244:	dd800715 	stw	r22,28(sp)
 4417248:	dd400615 	stw	r21,24(sp)
 441724c:	dd000515 	stw	r20,20(sp)
 4417250:	dc800315 	stw	r18,12(sp)
 4417254:	dc400215 	stw	r17,8(sp)
 4417258:	2027883a 	mov	r19,r4
 441725c:	2821883a 	mov	r16,r5
 4417260:	3800411e 	bne	r7,zero,4417368 <__udivdi3+0x13c>
 4417264:	3023883a 	mov	r17,r6
 4417268:	2025883a 	mov	r18,r4
 441726c:	2980522e 	bgeu	r5,r6,44173b8 <__udivdi3+0x18c>
 4417270:	00bfffd4 	movui	r2,65535
 4417274:	282d883a 	mov	r22,r5
 4417278:	1180a836 	bltu	r2,r6,441751c <__udivdi3+0x2f0>
 441727c:	00803fc4 	movi	r2,255
 4417280:	1185803a 	cmpltu	r2,r2,r6
 4417284:	100490fa 	slli	r2,r2,3
 4417288:	3086d83a 	srl	r3,r6,r2
 441728c:	010110f4 	movhi	r4,1091
 4417290:	2112e344 	addi	r4,r4,19341
 4417294:	20c7883a 	add	r3,r4,r3
 4417298:	18c00003 	ldbu	r3,0(r3)
 441729c:	1885883a 	add	r2,r3,r2
 44172a0:	00c00804 	movi	r3,32
 44172a4:	1887c83a 	sub	r3,r3,r2
 44172a8:	18000526 	beq	r3,zero,44172c0 <__udivdi3+0x94>
 44172ac:	80e0983a 	sll	r16,r16,r3
 44172b0:	9884d83a 	srl	r2,r19,r2
 44172b4:	30e2983a 	sll	r17,r6,r3
 44172b8:	98e4983a 	sll	r18,r19,r3
 44172bc:	142cb03a 	or	r22,r2,r16
 44172c0:	882ad43a 	srli	r21,r17,16
 44172c4:	b009883a 	mov	r4,r22
 44172c8:	8d3fffcc 	andi	r20,r17,65535
 44172cc:	a80b883a 	mov	r5,r21
 44172d0:	4407f040 	call	4407f04 <__umodsi3>
 44172d4:	b009883a 	mov	r4,r22
 44172d8:	a80b883a 	mov	r5,r21
 44172dc:	1027883a 	mov	r19,r2
 44172e0:	4407ea00 	call	4407ea0 <__udivsi3>
 44172e4:	102d883a 	mov	r22,r2
 44172e8:	9826943a 	slli	r19,r19,16
 44172ec:	9004d43a 	srli	r2,r18,16
 44172f0:	a5a1383a 	mul	r16,r20,r22
 44172f4:	14c4b03a 	or	r2,r2,r19
 44172f8:	1400052e 	bgeu	r2,r16,4417310 <__udivdi3+0xe4>
 44172fc:	1445883a 	add	r2,r2,r17
 4417300:	b0ffffc4 	addi	r3,r22,-1
 4417304:	14400136 	bltu	r2,r17,441730c <__udivdi3+0xe0>
 4417308:	14012336 	bltu	r2,r16,4417798 <__udivdi3+0x56c>
 441730c:	182d883a 	mov	r22,r3
 4417310:	1421c83a 	sub	r16,r2,r16
 4417314:	a80b883a 	mov	r5,r21
 4417318:	8009883a 	mov	r4,r16
 441731c:	4407f040 	call	4407f04 <__umodsi3>
 4417320:	1027883a 	mov	r19,r2
 4417324:	a80b883a 	mov	r5,r21
 4417328:	8009883a 	mov	r4,r16
 441732c:	4407ea00 	call	4407ea0 <__udivsi3>
 4417330:	9826943a 	slli	r19,r19,16
 4417334:	a0a9383a 	mul	r20,r20,r2
 4417338:	94bfffcc 	andi	r18,r18,65535
 441733c:	94e4b03a 	or	r18,r18,r19
 4417340:	9500052e 	bgeu	r18,r20,4417358 <__udivdi3+0x12c>
 4417344:	8ca5883a 	add	r18,r17,r18
 4417348:	10ffffc4 	addi	r3,r2,-1
 441734c:	9440f136 	bltu	r18,r17,4417714 <__udivdi3+0x4e8>
 4417350:	9500f02e 	bgeu	r18,r20,4417714 <__udivdi3+0x4e8>
 4417354:	10bfff84 	addi	r2,r2,-2
 4417358:	b00c943a 	slli	r6,r22,16
 441735c:	0007883a 	mov	r3,zero
 4417360:	3084b03a 	or	r2,r6,r2
 4417364:	00005906 	br	44174cc <__udivdi3+0x2a0>
 4417368:	29c05636 	bltu	r5,r7,44174c4 <__udivdi3+0x298>
 441736c:	00bfffd4 	movui	r2,65535
 4417370:	11c0622e 	bgeu	r2,r7,44174fc <__udivdi3+0x2d0>
 4417374:	00804034 	movhi	r2,256
 4417378:	10bfffc4 	addi	r2,r2,-1
 441737c:	11c0ee36 	bltu	r2,r7,4417738 <__udivdi3+0x50c>
 4417380:	00800404 	movi	r2,16
 4417384:	3886d83a 	srl	r3,r7,r2
 4417388:	010110f4 	movhi	r4,1091
 441738c:	2112e344 	addi	r4,r4,19341
 4417390:	20c7883a 	add	r3,r4,r3
 4417394:	18c00003 	ldbu	r3,0(r3)
 4417398:	05400804 	movi	r21,32
 441739c:	1885883a 	add	r2,r3,r2
 44173a0:	a8abc83a 	sub	r21,r21,r2
 44173a4:	a800621e 	bne	r21,zero,4417530 <__udivdi3+0x304>
 44173a8:	3c00e936 	bltu	r7,r16,4417750 <__udivdi3+0x524>
 44173ac:	9985403a 	cmpgeu	r2,r19,r6
 44173b0:	0007883a 	mov	r3,zero
 44173b4:	00004506 	br	44174cc <__udivdi3+0x2a0>
 44173b8:	3000041e 	bne	r6,zero,44173cc <__udivdi3+0x1a0>
 44173bc:	000b883a 	mov	r5,zero
 44173c0:	01000044 	movi	r4,1
 44173c4:	4407ea00 	call	4407ea0 <__udivsi3>
 44173c8:	1023883a 	mov	r17,r2
 44173cc:	00bfffd4 	movui	r2,65535
 44173d0:	14404e2e 	bgeu	r2,r17,441750c <__udivdi3+0x2e0>
 44173d4:	00804034 	movhi	r2,256
 44173d8:	10bfffc4 	addi	r2,r2,-1
 44173dc:	1440d836 	bltu	r2,r17,4417740 <__udivdi3+0x514>
 44173e0:	00800404 	movi	r2,16
 44173e4:	8886d83a 	srl	r3,r17,r2
 44173e8:	010110f4 	movhi	r4,1091
 44173ec:	2112e344 	addi	r4,r4,19341
 44173f0:	20c7883a 	add	r3,r4,r3
 44173f4:	18c00003 	ldbu	r3,0(r3)
 44173f8:	1885883a 	add	r2,r3,r2
 44173fc:	00c00804 	movi	r3,32
 4417400:	1887c83a 	sub	r3,r3,r2
 4417404:	18008f1e 	bne	r3,zero,4417644 <__udivdi3+0x418>
 4417408:	882ad43a 	srli	r21,r17,16
 441740c:	8461c83a 	sub	r16,r16,r17
 4417410:	8d3fffcc 	andi	r20,r17,65535
 4417414:	00c00044 	movi	r3,1
 4417418:	8009883a 	mov	r4,r16
 441741c:	a80b883a 	mov	r5,r21
 4417420:	d8c00015 	stw	r3,0(sp)
 4417424:	4407f040 	call	4407f04 <__umodsi3>
 4417428:	8009883a 	mov	r4,r16
 441742c:	a80b883a 	mov	r5,r21
 4417430:	1027883a 	mov	r19,r2
 4417434:	4407ea00 	call	4407ea0 <__udivsi3>
 4417438:	9826943a 	slli	r19,r19,16
 441743c:	9008d43a 	srli	r4,r18,16
 4417440:	1521383a 	mul	r16,r2,r20
 4417444:	102d883a 	mov	r22,r2
 4417448:	24c8b03a 	or	r4,r4,r19
 441744c:	d8c00017 	ldw	r3,0(sp)
 4417450:	2400052e 	bgeu	r4,r16,4417468 <__udivdi3+0x23c>
 4417454:	2449883a 	add	r4,r4,r17
 4417458:	b0bfffc4 	addi	r2,r22,-1
 441745c:	24400136 	bltu	r4,r17,4417464 <__udivdi3+0x238>
 4417460:	2400ca36 	bltu	r4,r16,441778c <__udivdi3+0x560>
 4417464:	102d883a 	mov	r22,r2
 4417468:	2421c83a 	sub	r16,r4,r16
 441746c:	a80b883a 	mov	r5,r21
 4417470:	8009883a 	mov	r4,r16
 4417474:	d8c00015 	stw	r3,0(sp)
 4417478:	4407f040 	call	4407f04 <__umodsi3>
 441747c:	1027883a 	mov	r19,r2
 4417480:	a80b883a 	mov	r5,r21
 4417484:	8009883a 	mov	r4,r16
 4417488:	4407ea00 	call	4407ea0 <__udivsi3>
 441748c:	9826943a 	slli	r19,r19,16
 4417490:	1529383a 	mul	r20,r2,r20
 4417494:	94bfffcc 	andi	r18,r18,65535
 4417498:	94e4b03a 	or	r18,r18,r19
 441749c:	d8c00017 	ldw	r3,0(sp)
 44174a0:	9500052e 	bgeu	r18,r20,44174b8 <__udivdi3+0x28c>
 44174a4:	8ca5883a 	add	r18,r17,r18
 44174a8:	113fffc4 	addi	r4,r2,-1
 44174ac:	94409736 	bltu	r18,r17,441770c <__udivdi3+0x4e0>
 44174b0:	9500962e 	bgeu	r18,r20,441770c <__udivdi3+0x4e0>
 44174b4:	10bfff84 	addi	r2,r2,-2
 44174b8:	b00c943a 	slli	r6,r22,16
 44174bc:	3084b03a 	or	r2,r6,r2
 44174c0:	00000206 	br	44174cc <__udivdi3+0x2a0>
 44174c4:	0007883a 	mov	r3,zero
 44174c8:	0005883a 	mov	r2,zero
 44174cc:	dfc00a17 	ldw	ra,40(sp)
 44174d0:	df000917 	ldw	fp,36(sp)
 44174d4:	ddc00817 	ldw	r23,32(sp)
 44174d8:	dd800717 	ldw	r22,28(sp)
 44174dc:	dd400617 	ldw	r21,24(sp)
 44174e0:	dd000517 	ldw	r20,20(sp)
 44174e4:	dcc00417 	ldw	r19,16(sp)
 44174e8:	dc800317 	ldw	r18,12(sp)
 44174ec:	dc400217 	ldw	r17,8(sp)
 44174f0:	dc000117 	ldw	r16,4(sp)
 44174f4:	dec00b04 	addi	sp,sp,44
 44174f8:	f800283a 	ret
 44174fc:	00803fc4 	movi	r2,255
 4417500:	11c5803a 	cmpltu	r2,r2,r7
 4417504:	100490fa 	slli	r2,r2,3
 4417508:	003f9e06 	br	4417384 <__reset+0xfb413384>
 441750c:	00803fc4 	movi	r2,255
 4417510:	1445803a 	cmpltu	r2,r2,r17
 4417514:	100490fa 	slli	r2,r2,3
 4417518:	003fb206 	br	44173e4 <__reset+0xfb4133e4>
 441751c:	00804034 	movhi	r2,256
 4417520:	10bfffc4 	addi	r2,r2,-1
 4417524:	11808836 	bltu	r2,r6,4417748 <__udivdi3+0x51c>
 4417528:	00800404 	movi	r2,16
 441752c:	003f5606 	br	4417288 <__reset+0xfb413288>
 4417530:	30aed83a 	srl	r23,r6,r2
 4417534:	3d4e983a 	sll	r7,r7,r21
 4417538:	80acd83a 	srl	r22,r16,r2
 441753c:	9884d83a 	srl	r2,r19,r2
 4417540:	3deeb03a 	or	r23,r7,r23
 4417544:	b824d43a 	srli	r18,r23,16
 4417548:	8560983a 	sll	r16,r16,r21
 441754c:	b009883a 	mov	r4,r22
 4417550:	900b883a 	mov	r5,r18
 4417554:	3568983a 	sll	r20,r6,r21
 4417558:	1420b03a 	or	r16,r2,r16
 441755c:	4407f040 	call	4407f04 <__umodsi3>
 4417560:	b009883a 	mov	r4,r22
 4417564:	900b883a 	mov	r5,r18
 4417568:	1023883a 	mov	r17,r2
 441756c:	4407ea00 	call	4407ea0 <__udivsi3>
 4417570:	8808943a 	slli	r4,r17,16
 4417574:	bf3fffcc 	andi	fp,r23,65535
 4417578:	8006d43a 	srli	r3,r16,16
 441757c:	e0a3383a 	mul	r17,fp,r2
 4417580:	100d883a 	mov	r6,r2
 4417584:	1906b03a 	or	r3,r3,r4
 4417588:	1c40042e 	bgeu	r3,r17,441759c <__udivdi3+0x370>
 441758c:	1dc7883a 	add	r3,r3,r23
 4417590:	10bfffc4 	addi	r2,r2,-1
 4417594:	1dc0752e 	bgeu	r3,r23,441776c <__udivdi3+0x540>
 4417598:	100d883a 	mov	r6,r2
 441759c:	1c63c83a 	sub	r17,r3,r17
 44175a0:	900b883a 	mov	r5,r18
 44175a4:	8809883a 	mov	r4,r17
 44175a8:	d9800015 	stw	r6,0(sp)
 44175ac:	4407f040 	call	4407f04 <__umodsi3>
 44175b0:	102d883a 	mov	r22,r2
 44175b4:	8809883a 	mov	r4,r17
 44175b8:	900b883a 	mov	r5,r18
 44175bc:	4407ea00 	call	4407ea0 <__udivsi3>
 44175c0:	b02c943a 	slli	r22,r22,16
 44175c4:	e089383a 	mul	r4,fp,r2
 44175c8:	843fffcc 	andi	r16,r16,65535
 44175cc:	85a0b03a 	or	r16,r16,r22
 44175d0:	d9800017 	ldw	r6,0(sp)
 44175d4:	8100042e 	bgeu	r16,r4,44175e8 <__udivdi3+0x3bc>
 44175d8:	85e1883a 	add	r16,r16,r23
 44175dc:	10ffffc4 	addi	r3,r2,-1
 44175e0:	85c05e2e 	bgeu	r16,r23,441775c <__udivdi3+0x530>
 44175e4:	1805883a 	mov	r2,r3
 44175e8:	300c943a 	slli	r6,r6,16
 44175ec:	a17fffcc 	andi	r5,r20,65535
 44175f0:	a028d43a 	srli	r20,r20,16
 44175f4:	3084b03a 	or	r2,r6,r2
 44175f8:	10ffffcc 	andi	r3,r2,65535
 44175fc:	100cd43a 	srli	r6,r2,16
 4417600:	194f383a 	mul	r7,r3,r5
 4417604:	1d07383a 	mul	r3,r3,r20
 4417608:	314b383a 	mul	r5,r6,r5
 441760c:	3810d43a 	srli	r8,r7,16
 4417610:	8121c83a 	sub	r16,r16,r4
 4417614:	1947883a 	add	r3,r3,r5
 4417618:	40c7883a 	add	r3,r8,r3
 441761c:	350d383a 	mul	r6,r6,r20
 4417620:	1940022e 	bgeu	r3,r5,441762c <__udivdi3+0x400>
 4417624:	01000074 	movhi	r4,1
 4417628:	310d883a 	add	r6,r6,r4
 441762c:	1828d43a 	srli	r20,r3,16
 4417630:	a18d883a 	add	r6,r20,r6
 4417634:	81803e36 	bltu	r16,r6,4417730 <__udivdi3+0x504>
 4417638:	81803826 	beq	r16,r6,441771c <__udivdi3+0x4f0>
 441763c:	0007883a 	mov	r3,zero
 4417640:	003fa206 	br	44174cc <__reset+0xfb4134cc>
 4417644:	88e2983a 	sll	r17,r17,r3
 4417648:	80a8d83a 	srl	r20,r16,r2
 441764c:	80e0983a 	sll	r16,r16,r3
 4417650:	882ad43a 	srli	r21,r17,16
 4417654:	9884d83a 	srl	r2,r19,r2
 4417658:	a009883a 	mov	r4,r20
 441765c:	a80b883a 	mov	r5,r21
 4417660:	142eb03a 	or	r23,r2,r16
 4417664:	98e4983a 	sll	r18,r19,r3
 4417668:	4407f040 	call	4407f04 <__umodsi3>
 441766c:	a009883a 	mov	r4,r20
 4417670:	a80b883a 	mov	r5,r21
 4417674:	1021883a 	mov	r16,r2
 4417678:	4407ea00 	call	4407ea0 <__udivsi3>
 441767c:	1039883a 	mov	fp,r2
 4417680:	8d3fffcc 	andi	r20,r17,65535
 4417684:	8020943a 	slli	r16,r16,16
 4417688:	b804d43a 	srli	r2,r23,16
 441768c:	a72d383a 	mul	r22,r20,fp
 4417690:	1404b03a 	or	r2,r2,r16
 4417694:	1580062e 	bgeu	r2,r22,44176b0 <__udivdi3+0x484>
 4417698:	1445883a 	add	r2,r2,r17
 441769c:	e0ffffc4 	addi	r3,fp,-1
 44176a0:	14403836 	bltu	r2,r17,4417784 <__udivdi3+0x558>
 44176a4:	1580372e 	bgeu	r2,r22,4417784 <__udivdi3+0x558>
 44176a8:	e73fff84 	addi	fp,fp,-2
 44176ac:	1445883a 	add	r2,r2,r17
 44176b0:	15adc83a 	sub	r22,r2,r22
 44176b4:	a80b883a 	mov	r5,r21
 44176b8:	b009883a 	mov	r4,r22
 44176bc:	4407f040 	call	4407f04 <__umodsi3>
 44176c0:	1027883a 	mov	r19,r2
 44176c4:	b009883a 	mov	r4,r22
 44176c8:	a80b883a 	mov	r5,r21
 44176cc:	4407ea00 	call	4407ea0 <__udivsi3>
 44176d0:	9826943a 	slli	r19,r19,16
 44176d4:	a0a1383a 	mul	r16,r20,r2
 44176d8:	b93fffcc 	andi	r4,r23,65535
 44176dc:	24c8b03a 	or	r4,r4,r19
 44176e0:	2400062e 	bgeu	r4,r16,44176fc <__udivdi3+0x4d0>
 44176e4:	2449883a 	add	r4,r4,r17
 44176e8:	10ffffc4 	addi	r3,r2,-1
 44176ec:	24402336 	bltu	r4,r17,441777c <__udivdi3+0x550>
 44176f0:	2400222e 	bgeu	r4,r16,441777c <__udivdi3+0x550>
 44176f4:	10bfff84 	addi	r2,r2,-2
 44176f8:	2449883a 	add	r4,r4,r17
 44176fc:	e038943a 	slli	fp,fp,16
 4417700:	2421c83a 	sub	r16,r4,r16
 4417704:	e086b03a 	or	r3,fp,r2
 4417708:	003f4306 	br	4417418 <__reset+0xfb413418>
 441770c:	2005883a 	mov	r2,r4
 4417710:	003f6906 	br	44174b8 <__reset+0xfb4134b8>
 4417714:	1805883a 	mov	r2,r3
 4417718:	003f0f06 	br	4417358 <__reset+0xfb413358>
 441771c:	1806943a 	slli	r3,r3,16
 4417720:	9d66983a 	sll	r19,r19,r21
 4417724:	39ffffcc 	andi	r7,r7,65535
 4417728:	19c7883a 	add	r3,r3,r7
 441772c:	98ffc32e 	bgeu	r19,r3,441763c <__reset+0xfb41363c>
 4417730:	10bfffc4 	addi	r2,r2,-1
 4417734:	003fc106 	br	441763c <__reset+0xfb41363c>
 4417738:	00800604 	movi	r2,24
 441773c:	003f1106 	br	4417384 <__reset+0xfb413384>
 4417740:	00800604 	movi	r2,24
 4417744:	003f2706 	br	44173e4 <__reset+0xfb4133e4>
 4417748:	00800604 	movi	r2,24
 441774c:	003ece06 	br	4417288 <__reset+0xfb413288>
 4417750:	0007883a 	mov	r3,zero
 4417754:	00800044 	movi	r2,1
 4417758:	003f5c06 	br	44174cc <__reset+0xfb4134cc>
 441775c:	813fa12e 	bgeu	r16,r4,44175e4 <__reset+0xfb4135e4>
 4417760:	10bfff84 	addi	r2,r2,-2
 4417764:	85e1883a 	add	r16,r16,r23
 4417768:	003f9f06 	br	44175e8 <__reset+0xfb4135e8>
 441776c:	1c7f8a2e 	bgeu	r3,r17,4417598 <__reset+0xfb413598>
 4417770:	31bfff84 	addi	r6,r6,-2
 4417774:	1dc7883a 	add	r3,r3,r23
 4417778:	003f8806 	br	441759c <__reset+0xfb41359c>
 441777c:	1805883a 	mov	r2,r3
 4417780:	003fde06 	br	44176fc <__reset+0xfb4136fc>
 4417784:	1839883a 	mov	fp,r3
 4417788:	003fc906 	br	44176b0 <__reset+0xfb4136b0>
 441778c:	b5bfff84 	addi	r22,r22,-2
 4417790:	2449883a 	add	r4,r4,r17
 4417794:	003f3406 	br	4417468 <__reset+0xfb413468>
 4417798:	b5bfff84 	addi	r22,r22,-2
 441779c:	1445883a 	add	r2,r2,r17
 44177a0:	003edb06 	br	4417310 <__reset+0xfb413310>

044177a4 <__umoddi3>:
 44177a4:	defff404 	addi	sp,sp,-48
 44177a8:	df000a15 	stw	fp,40(sp)
 44177ac:	dc400315 	stw	r17,12(sp)
 44177b0:	dc000215 	stw	r16,8(sp)
 44177b4:	dfc00b15 	stw	ra,44(sp)
 44177b8:	ddc00915 	stw	r23,36(sp)
 44177bc:	dd800815 	stw	r22,32(sp)
 44177c0:	dd400715 	stw	r21,28(sp)
 44177c4:	dd000615 	stw	r20,24(sp)
 44177c8:	dcc00515 	stw	r19,20(sp)
 44177cc:	dc800415 	stw	r18,16(sp)
 44177d0:	2021883a 	mov	r16,r4
 44177d4:	2823883a 	mov	r17,r5
 44177d8:	2839883a 	mov	fp,r5
 44177dc:	38003c1e 	bne	r7,zero,44178d0 <__umoddi3+0x12c>
 44177e0:	3027883a 	mov	r19,r6
 44177e4:	2029883a 	mov	r20,r4
 44177e8:	2980512e 	bgeu	r5,r6,4417930 <__umoddi3+0x18c>
 44177ec:	00bfffd4 	movui	r2,65535
 44177f0:	11809a36 	bltu	r2,r6,4417a5c <__umoddi3+0x2b8>
 44177f4:	01003fc4 	movi	r4,255
 44177f8:	2189803a 	cmpltu	r4,r4,r6
 44177fc:	200890fa 	slli	r4,r4,3
 4417800:	3104d83a 	srl	r2,r6,r4
 4417804:	00c110f4 	movhi	r3,1091
 4417808:	18d2e344 	addi	r3,r3,19341
 441780c:	1885883a 	add	r2,r3,r2
 4417810:	10c00003 	ldbu	r3,0(r2)
 4417814:	00800804 	movi	r2,32
 4417818:	1909883a 	add	r4,r3,r4
 441781c:	1125c83a 	sub	r18,r2,r4
 4417820:	90000526 	beq	r18,zero,4417838 <__umoddi3+0x94>
 4417824:	8ca2983a 	sll	r17,r17,r18
 4417828:	8108d83a 	srl	r4,r16,r4
 441782c:	34a6983a 	sll	r19,r6,r18
 4417830:	84a8983a 	sll	r20,r16,r18
 4417834:	2478b03a 	or	fp,r4,r17
 4417838:	982ed43a 	srli	r23,r19,16
 441783c:	e009883a 	mov	r4,fp
 4417840:	9dbfffcc 	andi	r22,r19,65535
 4417844:	b80b883a 	mov	r5,r23
 4417848:	4407f040 	call	4407f04 <__umodsi3>
 441784c:	e009883a 	mov	r4,fp
 4417850:	b80b883a 	mov	r5,r23
 4417854:	102b883a 	mov	r21,r2
 4417858:	4407ea00 	call	4407ea0 <__udivsi3>
 441785c:	a806943a 	slli	r3,r21,16
 4417860:	a008d43a 	srli	r4,r20,16
 4417864:	b085383a 	mul	r2,r22,r2
 4417868:	20c8b03a 	or	r4,r4,r3
 441786c:	2080032e 	bgeu	r4,r2,441787c <__umoddi3+0xd8>
 4417870:	24c9883a 	add	r4,r4,r19
 4417874:	24c00136 	bltu	r4,r19,441787c <__umoddi3+0xd8>
 4417878:	20811036 	bltu	r4,r2,4417cbc <__umoddi3+0x518>
 441787c:	20abc83a 	sub	r21,r4,r2
 4417880:	b80b883a 	mov	r5,r23
 4417884:	a809883a 	mov	r4,r21
 4417888:	4407f040 	call	4407f04 <__umodsi3>
 441788c:	1023883a 	mov	r17,r2
 4417890:	b80b883a 	mov	r5,r23
 4417894:	a809883a 	mov	r4,r21
 4417898:	4407ea00 	call	4407ea0 <__udivsi3>
 441789c:	8822943a 	slli	r17,r17,16
 44178a0:	b085383a 	mul	r2,r22,r2
 44178a4:	a0ffffcc 	andi	r3,r20,65535
 44178a8:	1c46b03a 	or	r3,r3,r17
 44178ac:	1880042e 	bgeu	r3,r2,44178c0 <__umoddi3+0x11c>
 44178b0:	1cc7883a 	add	r3,r3,r19
 44178b4:	1cc00236 	bltu	r3,r19,44178c0 <__umoddi3+0x11c>
 44178b8:	1880012e 	bgeu	r3,r2,44178c0 <__umoddi3+0x11c>
 44178bc:	1cc7883a 	add	r3,r3,r19
 44178c0:	1885c83a 	sub	r2,r3,r2
 44178c4:	1484d83a 	srl	r2,r2,r18
 44178c8:	0007883a 	mov	r3,zero
 44178cc:	00004f06 	br	4417a0c <__umoddi3+0x268>
 44178d0:	29c04c36 	bltu	r5,r7,4417a04 <__umoddi3+0x260>
 44178d4:	00bfffd4 	movui	r2,65535
 44178d8:	11c0582e 	bgeu	r2,r7,4417a3c <__umoddi3+0x298>
 44178dc:	00804034 	movhi	r2,256
 44178e0:	10bfffc4 	addi	r2,r2,-1
 44178e4:	11c0e736 	bltu	r2,r7,4417c84 <__umoddi3+0x4e0>
 44178e8:	01000404 	movi	r4,16
 44178ec:	3904d83a 	srl	r2,r7,r4
 44178f0:	00c110f4 	movhi	r3,1091
 44178f4:	18d2e344 	addi	r3,r3,19341
 44178f8:	1885883a 	add	r2,r3,r2
 44178fc:	14c00003 	ldbu	r19,0(r2)
 4417900:	00c00804 	movi	r3,32
 4417904:	9927883a 	add	r19,r19,r4
 4417908:	1ce9c83a 	sub	r20,r3,r19
 441790c:	a000581e 	bne	r20,zero,4417a70 <__umoddi3+0x2cc>
 4417910:	3c400136 	bltu	r7,r17,4417918 <__umoddi3+0x174>
 4417914:	8180eb36 	bltu	r16,r6,4417cc4 <__umoddi3+0x520>
 4417918:	8185c83a 	sub	r2,r16,r6
 441791c:	89e3c83a 	sub	r17,r17,r7
 4417920:	8089803a 	cmpltu	r4,r16,r2
 4417924:	8939c83a 	sub	fp,r17,r4
 4417928:	e007883a 	mov	r3,fp
 441792c:	00003706 	br	4417a0c <__umoddi3+0x268>
 4417930:	3000041e 	bne	r6,zero,4417944 <__umoddi3+0x1a0>
 4417934:	000b883a 	mov	r5,zero
 4417938:	01000044 	movi	r4,1
 441793c:	4407ea00 	call	4407ea0 <__udivsi3>
 4417940:	1027883a 	mov	r19,r2
 4417944:	00bfffd4 	movui	r2,65535
 4417948:	14c0402e 	bgeu	r2,r19,4417a4c <__umoddi3+0x2a8>
 441794c:	00804034 	movhi	r2,256
 4417950:	10bfffc4 	addi	r2,r2,-1
 4417954:	14c0cd36 	bltu	r2,r19,4417c8c <__umoddi3+0x4e8>
 4417958:	00800404 	movi	r2,16
 441795c:	9886d83a 	srl	r3,r19,r2
 4417960:	010110f4 	movhi	r4,1091
 4417964:	2112e344 	addi	r4,r4,19341
 4417968:	20c7883a 	add	r3,r4,r3
 441796c:	18c00003 	ldbu	r3,0(r3)
 4417970:	1887883a 	add	r3,r3,r2
 4417974:	00800804 	movi	r2,32
 4417978:	10e5c83a 	sub	r18,r2,r3
 441797c:	9000901e 	bne	r18,zero,4417bc0 <__umoddi3+0x41c>
 4417980:	982cd43a 	srli	r22,r19,16
 4417984:	8ce3c83a 	sub	r17,r17,r19
 4417988:	9d7fffcc 	andi	r21,r19,65535
 441798c:	b00b883a 	mov	r5,r22
 4417990:	8809883a 	mov	r4,r17
 4417994:	4407f040 	call	4407f04 <__umodsi3>
 4417998:	8809883a 	mov	r4,r17
 441799c:	b00b883a 	mov	r5,r22
 44179a0:	1021883a 	mov	r16,r2
 44179a4:	4407ea00 	call	4407ea0 <__udivsi3>
 44179a8:	8006943a 	slli	r3,r16,16
 44179ac:	a008d43a 	srli	r4,r20,16
 44179b0:	1545383a 	mul	r2,r2,r21
 44179b4:	20c8b03a 	or	r4,r4,r3
 44179b8:	2080042e 	bgeu	r4,r2,44179cc <__umoddi3+0x228>
 44179bc:	24c9883a 	add	r4,r4,r19
 44179c0:	24c00236 	bltu	r4,r19,44179cc <__umoddi3+0x228>
 44179c4:	2080012e 	bgeu	r4,r2,44179cc <__umoddi3+0x228>
 44179c8:	24c9883a 	add	r4,r4,r19
 44179cc:	20a1c83a 	sub	r16,r4,r2
 44179d0:	b00b883a 	mov	r5,r22
 44179d4:	8009883a 	mov	r4,r16
 44179d8:	4407f040 	call	4407f04 <__umodsi3>
 44179dc:	1023883a 	mov	r17,r2
 44179e0:	b00b883a 	mov	r5,r22
 44179e4:	8009883a 	mov	r4,r16
 44179e8:	4407ea00 	call	4407ea0 <__udivsi3>
 44179ec:	8822943a 	slli	r17,r17,16
 44179f0:	1545383a 	mul	r2,r2,r21
 44179f4:	a53fffcc 	andi	r20,r20,65535
 44179f8:	a446b03a 	or	r3,r20,r17
 44179fc:	18bfb02e 	bgeu	r3,r2,44178c0 <__reset+0xfb4138c0>
 4417a00:	003fab06 	br	44178b0 <__reset+0xfb4138b0>
 4417a04:	2005883a 	mov	r2,r4
 4417a08:	2807883a 	mov	r3,r5
 4417a0c:	dfc00b17 	ldw	ra,44(sp)
 4417a10:	df000a17 	ldw	fp,40(sp)
 4417a14:	ddc00917 	ldw	r23,36(sp)
 4417a18:	dd800817 	ldw	r22,32(sp)
 4417a1c:	dd400717 	ldw	r21,28(sp)
 4417a20:	dd000617 	ldw	r20,24(sp)
 4417a24:	dcc00517 	ldw	r19,20(sp)
 4417a28:	dc800417 	ldw	r18,16(sp)
 4417a2c:	dc400317 	ldw	r17,12(sp)
 4417a30:	dc000217 	ldw	r16,8(sp)
 4417a34:	dec00c04 	addi	sp,sp,48
 4417a38:	f800283a 	ret
 4417a3c:	04c03fc4 	movi	r19,255
 4417a40:	99c9803a 	cmpltu	r4,r19,r7
 4417a44:	200890fa 	slli	r4,r4,3
 4417a48:	003fa806 	br	44178ec <__reset+0xfb4138ec>
 4417a4c:	00803fc4 	movi	r2,255
 4417a50:	14c5803a 	cmpltu	r2,r2,r19
 4417a54:	100490fa 	slli	r2,r2,3
 4417a58:	003fc006 	br	441795c <__reset+0xfb41395c>
 4417a5c:	00804034 	movhi	r2,256
 4417a60:	10bfffc4 	addi	r2,r2,-1
 4417a64:	11808b36 	bltu	r2,r6,4417c94 <__umoddi3+0x4f0>
 4417a68:	01000404 	movi	r4,16
 4417a6c:	003f6406 	br	4417800 <__reset+0xfb413800>
 4417a70:	34c4d83a 	srl	r2,r6,r19
 4417a74:	3d0e983a 	sll	r7,r7,r20
 4417a78:	8cf8d83a 	srl	fp,r17,r19
 4417a7c:	8d10983a 	sll	r8,r17,r20
 4417a80:	38aab03a 	or	r21,r7,r2
 4417a84:	a82cd43a 	srli	r22,r21,16
 4417a88:	84e2d83a 	srl	r17,r16,r19
 4417a8c:	e009883a 	mov	r4,fp
 4417a90:	b00b883a 	mov	r5,r22
 4417a94:	8a22b03a 	or	r17,r17,r8
 4417a98:	3524983a 	sll	r18,r6,r20
 4417a9c:	4407f040 	call	4407f04 <__umodsi3>
 4417aa0:	e009883a 	mov	r4,fp
 4417aa4:	b00b883a 	mov	r5,r22
 4417aa8:	102f883a 	mov	r23,r2
 4417aac:	4407ea00 	call	4407ea0 <__udivsi3>
 4417ab0:	100d883a 	mov	r6,r2
 4417ab4:	b808943a 	slli	r4,r23,16
 4417ab8:	aa3fffcc 	andi	r8,r21,65535
 4417abc:	8804d43a 	srli	r2,r17,16
 4417ac0:	41af383a 	mul	r23,r8,r6
 4417ac4:	8520983a 	sll	r16,r16,r20
 4417ac8:	1104b03a 	or	r2,r2,r4
 4417acc:	15c0042e 	bgeu	r2,r23,4417ae0 <__umoddi3+0x33c>
 4417ad0:	1545883a 	add	r2,r2,r21
 4417ad4:	30ffffc4 	addi	r3,r6,-1
 4417ad8:	1540742e 	bgeu	r2,r21,4417cac <__umoddi3+0x508>
 4417adc:	180d883a 	mov	r6,r3
 4417ae0:	15efc83a 	sub	r23,r2,r23
 4417ae4:	b00b883a 	mov	r5,r22
 4417ae8:	b809883a 	mov	r4,r23
 4417aec:	d9800115 	stw	r6,4(sp)
 4417af0:	da000015 	stw	r8,0(sp)
 4417af4:	4407f040 	call	4407f04 <__umodsi3>
 4417af8:	b00b883a 	mov	r5,r22
 4417afc:	b809883a 	mov	r4,r23
 4417b00:	1039883a 	mov	fp,r2
 4417b04:	4407ea00 	call	4407ea0 <__udivsi3>
 4417b08:	da000017 	ldw	r8,0(sp)
 4417b0c:	e038943a 	slli	fp,fp,16
 4417b10:	100b883a 	mov	r5,r2
 4417b14:	4089383a 	mul	r4,r8,r2
 4417b18:	8a3fffcc 	andi	r8,r17,65535
 4417b1c:	4710b03a 	or	r8,r8,fp
 4417b20:	d9800117 	ldw	r6,4(sp)
 4417b24:	4100042e 	bgeu	r8,r4,4417b38 <__umoddi3+0x394>
 4417b28:	4551883a 	add	r8,r8,r21
 4417b2c:	10bfffc4 	addi	r2,r2,-1
 4417b30:	45405a2e 	bgeu	r8,r21,4417c9c <__umoddi3+0x4f8>
 4417b34:	100b883a 	mov	r5,r2
 4417b38:	300c943a 	slli	r6,r6,16
 4417b3c:	91ffffcc 	andi	r7,r18,65535
 4417b40:	9004d43a 	srli	r2,r18,16
 4417b44:	314cb03a 	or	r6,r6,r5
 4417b48:	317fffcc 	andi	r5,r6,65535
 4417b4c:	300cd43a 	srli	r6,r6,16
 4417b50:	29d3383a 	mul	r9,r5,r7
 4417b54:	288b383a 	mul	r5,r5,r2
 4417b58:	31cf383a 	mul	r7,r6,r7
 4417b5c:	4806d43a 	srli	r3,r9,16
 4417b60:	4111c83a 	sub	r8,r8,r4
 4417b64:	29cb883a 	add	r5,r5,r7
 4417b68:	194b883a 	add	r5,r3,r5
 4417b6c:	3085383a 	mul	r2,r6,r2
 4417b70:	29c0022e 	bgeu	r5,r7,4417b7c <__umoddi3+0x3d8>
 4417b74:	00c00074 	movhi	r3,1
 4417b78:	10c5883a 	add	r2,r2,r3
 4417b7c:	2808d43a 	srli	r4,r5,16
 4417b80:	280a943a 	slli	r5,r5,16
 4417b84:	4a7fffcc 	andi	r9,r9,65535
 4417b88:	2085883a 	add	r2,r4,r2
 4417b8c:	2a4b883a 	add	r5,r5,r9
 4417b90:	40803636 	bltu	r8,r2,4417c6c <__umoddi3+0x4c8>
 4417b94:	40804d26 	beq	r8,r2,4417ccc <__umoddi3+0x528>
 4417b98:	4089c83a 	sub	r4,r8,r2
 4417b9c:	280f883a 	mov	r7,r5
 4417ba0:	81cfc83a 	sub	r7,r16,r7
 4417ba4:	81c7803a 	cmpltu	r3,r16,r7
 4417ba8:	20c7c83a 	sub	r3,r4,r3
 4417bac:	1cc4983a 	sll	r2,r3,r19
 4417bb0:	3d0ed83a 	srl	r7,r7,r20
 4417bb4:	1d06d83a 	srl	r3,r3,r20
 4417bb8:	11c4b03a 	or	r2,r2,r7
 4417bbc:	003f9306 	br	4417a0c <__reset+0xfb413a0c>
 4417bc0:	9ca6983a 	sll	r19,r19,r18
 4417bc4:	88e8d83a 	srl	r20,r17,r3
 4417bc8:	80c4d83a 	srl	r2,r16,r3
 4417bcc:	982cd43a 	srli	r22,r19,16
 4417bd0:	8ca2983a 	sll	r17,r17,r18
 4417bd4:	a009883a 	mov	r4,r20
 4417bd8:	b00b883a 	mov	r5,r22
 4417bdc:	1478b03a 	or	fp,r2,r17
 4417be0:	4407f040 	call	4407f04 <__umodsi3>
 4417be4:	a009883a 	mov	r4,r20
 4417be8:	b00b883a 	mov	r5,r22
 4417bec:	1023883a 	mov	r17,r2
 4417bf0:	4407ea00 	call	4407ea0 <__udivsi3>
 4417bf4:	9d7fffcc 	andi	r21,r19,65535
 4417bf8:	880a943a 	slli	r5,r17,16
 4417bfc:	e008d43a 	srli	r4,fp,16
 4417c00:	a885383a 	mul	r2,r21,r2
 4417c04:	84a8983a 	sll	r20,r16,r18
 4417c08:	2148b03a 	or	r4,r4,r5
 4417c0c:	2080042e 	bgeu	r4,r2,4417c20 <__umoddi3+0x47c>
 4417c10:	24c9883a 	add	r4,r4,r19
 4417c14:	24c00236 	bltu	r4,r19,4417c20 <__umoddi3+0x47c>
 4417c18:	2080012e 	bgeu	r4,r2,4417c20 <__umoddi3+0x47c>
 4417c1c:	24c9883a 	add	r4,r4,r19
 4417c20:	20a3c83a 	sub	r17,r4,r2
 4417c24:	b00b883a 	mov	r5,r22
 4417c28:	8809883a 	mov	r4,r17
 4417c2c:	4407f040 	call	4407f04 <__umodsi3>
 4417c30:	102f883a 	mov	r23,r2
 4417c34:	8809883a 	mov	r4,r17
 4417c38:	b00b883a 	mov	r5,r22
 4417c3c:	4407ea00 	call	4407ea0 <__udivsi3>
 4417c40:	b82e943a 	slli	r23,r23,16
 4417c44:	a885383a 	mul	r2,r21,r2
 4417c48:	e13fffcc 	andi	r4,fp,65535
 4417c4c:	25c8b03a 	or	r4,r4,r23
 4417c50:	2080042e 	bgeu	r4,r2,4417c64 <__umoddi3+0x4c0>
 4417c54:	24c9883a 	add	r4,r4,r19
 4417c58:	24c00236 	bltu	r4,r19,4417c64 <__umoddi3+0x4c0>
 4417c5c:	2080012e 	bgeu	r4,r2,4417c64 <__umoddi3+0x4c0>
 4417c60:	24c9883a 	add	r4,r4,r19
 4417c64:	20a3c83a 	sub	r17,r4,r2
 4417c68:	003f4806 	br	441798c <__reset+0xfb41398c>
 4417c6c:	2c8fc83a 	sub	r7,r5,r18
 4417c70:	1545c83a 	sub	r2,r2,r21
 4417c74:	29cb803a 	cmpltu	r5,r5,r7
 4417c78:	1145c83a 	sub	r2,r2,r5
 4417c7c:	4089c83a 	sub	r4,r8,r2
 4417c80:	003fc706 	br	4417ba0 <__reset+0xfb413ba0>
 4417c84:	01000604 	movi	r4,24
 4417c88:	003f1806 	br	44178ec <__reset+0xfb4138ec>
 4417c8c:	00800604 	movi	r2,24
 4417c90:	003f3206 	br	441795c <__reset+0xfb41395c>
 4417c94:	01000604 	movi	r4,24
 4417c98:	003ed906 	br	4417800 <__reset+0xfb413800>
 4417c9c:	413fa52e 	bgeu	r8,r4,4417b34 <__reset+0xfb413b34>
 4417ca0:	297fff84 	addi	r5,r5,-2
 4417ca4:	4551883a 	add	r8,r8,r21
 4417ca8:	003fa306 	br	4417b38 <__reset+0xfb413b38>
 4417cac:	15ff8b2e 	bgeu	r2,r23,4417adc <__reset+0xfb413adc>
 4417cb0:	31bfff84 	addi	r6,r6,-2
 4417cb4:	1545883a 	add	r2,r2,r21
 4417cb8:	003f8906 	br	4417ae0 <__reset+0xfb413ae0>
 4417cbc:	24c9883a 	add	r4,r4,r19
 4417cc0:	003eee06 	br	441787c <__reset+0xfb41387c>
 4417cc4:	8005883a 	mov	r2,r16
 4417cc8:	003f1706 	br	4417928 <__reset+0xfb413928>
 4417ccc:	817fe736 	bltu	r16,r5,4417c6c <__reset+0xfb413c6c>
 4417cd0:	280f883a 	mov	r7,r5
 4417cd4:	0009883a 	mov	r4,zero
 4417cd8:	003fb106 	br	4417ba0 <__reset+0xfb413ba0>

04417cdc <__eqdf2>:
 4417cdc:	2804d53a 	srli	r2,r5,20
 4417ce0:	3806d53a 	srli	r3,r7,20
 4417ce4:	02000434 	movhi	r8,16
 4417ce8:	423fffc4 	addi	r8,r8,-1
 4417cec:	1081ffcc 	andi	r2,r2,2047
 4417cf0:	0281ffc4 	movi	r10,2047
 4417cf4:	2a12703a 	and	r9,r5,r8
 4417cf8:	18c1ffcc 	andi	r3,r3,2047
 4417cfc:	3a10703a 	and	r8,r7,r8
 4417d00:	280ad7fa 	srli	r5,r5,31
 4417d04:	380ed7fa 	srli	r7,r7,31
 4417d08:	12801026 	beq	r2,r10,4417d4c <__eqdf2+0x70>
 4417d0c:	0281ffc4 	movi	r10,2047
 4417d10:	1a800a26 	beq	r3,r10,4417d3c <__eqdf2+0x60>
 4417d14:	10c00226 	beq	r2,r3,4417d20 <__eqdf2+0x44>
 4417d18:	00800044 	movi	r2,1
 4417d1c:	f800283a 	ret
 4417d20:	4a3ffd1e 	bne	r9,r8,4417d18 <__reset+0xfb413d18>
 4417d24:	21bffc1e 	bne	r4,r6,4417d18 <__reset+0xfb413d18>
 4417d28:	29c00c26 	beq	r5,r7,4417d5c <__eqdf2+0x80>
 4417d2c:	103ffa1e 	bne	r2,zero,4417d18 <__reset+0xfb413d18>
 4417d30:	2244b03a 	or	r2,r4,r9
 4417d34:	1004c03a 	cmpne	r2,r2,zero
 4417d38:	f800283a 	ret
 4417d3c:	3214b03a 	or	r10,r6,r8
 4417d40:	503ff426 	beq	r10,zero,4417d14 <__reset+0xfb413d14>
 4417d44:	00800044 	movi	r2,1
 4417d48:	f800283a 	ret
 4417d4c:	2254b03a 	or	r10,r4,r9
 4417d50:	503fee26 	beq	r10,zero,4417d0c <__reset+0xfb413d0c>
 4417d54:	00800044 	movi	r2,1
 4417d58:	f800283a 	ret
 4417d5c:	0005883a 	mov	r2,zero
 4417d60:	f800283a 	ret

04417d64 <__gedf2>:
 4417d64:	2804d53a 	srli	r2,r5,20
 4417d68:	3806d53a 	srli	r3,r7,20
 4417d6c:	02000434 	movhi	r8,16
 4417d70:	423fffc4 	addi	r8,r8,-1
 4417d74:	1081ffcc 	andi	r2,r2,2047
 4417d78:	0241ffc4 	movi	r9,2047
 4417d7c:	2a14703a 	and	r10,r5,r8
 4417d80:	18c1ffcc 	andi	r3,r3,2047
 4417d84:	3a10703a 	and	r8,r7,r8
 4417d88:	280ad7fa 	srli	r5,r5,31
 4417d8c:	380ed7fa 	srli	r7,r7,31
 4417d90:	12401d26 	beq	r2,r9,4417e08 <__gedf2+0xa4>
 4417d94:	0241ffc4 	movi	r9,2047
 4417d98:	1a401226 	beq	r3,r9,4417de4 <__gedf2+0x80>
 4417d9c:	1000081e 	bne	r2,zero,4417dc0 <__gedf2+0x5c>
 4417da0:	2296b03a 	or	r11,r4,r10
 4417da4:	5813003a 	cmpeq	r9,r11,zero
 4417da8:	1800091e 	bne	r3,zero,4417dd0 <__gedf2+0x6c>
 4417dac:	3218b03a 	or	r12,r6,r8
 4417db0:	6000071e 	bne	r12,zero,4417dd0 <__gedf2+0x6c>
 4417db4:	0005883a 	mov	r2,zero
 4417db8:	5800101e 	bne	r11,zero,4417dfc <__gedf2+0x98>
 4417dbc:	f800283a 	ret
 4417dc0:	18000c1e 	bne	r3,zero,4417df4 <__gedf2+0x90>
 4417dc4:	3212b03a 	or	r9,r6,r8
 4417dc8:	48000c26 	beq	r9,zero,4417dfc <__gedf2+0x98>
 4417dcc:	0013883a 	mov	r9,zero
 4417dd0:	39c03fcc 	andi	r7,r7,255
 4417dd4:	48000826 	beq	r9,zero,4417df8 <__gedf2+0x94>
 4417dd8:	38000926 	beq	r7,zero,4417e00 <__gedf2+0x9c>
 4417ddc:	00800044 	movi	r2,1
 4417de0:	f800283a 	ret
 4417de4:	3212b03a 	or	r9,r6,r8
 4417de8:	483fec26 	beq	r9,zero,4417d9c <__reset+0xfb413d9c>
 4417dec:	00bfff84 	movi	r2,-2
 4417df0:	f800283a 	ret
 4417df4:	39c03fcc 	andi	r7,r7,255
 4417df8:	29c00626 	beq	r5,r7,4417e14 <__gedf2+0xb0>
 4417dfc:	283ff726 	beq	r5,zero,4417ddc <__reset+0xfb413ddc>
 4417e00:	00bfffc4 	movi	r2,-1
 4417e04:	f800283a 	ret
 4417e08:	2292b03a 	or	r9,r4,r10
 4417e0c:	483fe126 	beq	r9,zero,4417d94 <__reset+0xfb413d94>
 4417e10:	003ff606 	br	4417dec <__reset+0xfb413dec>
 4417e14:	18bff916 	blt	r3,r2,4417dfc <__reset+0xfb413dfc>
 4417e18:	10c00316 	blt	r2,r3,4417e28 <__gedf2+0xc4>
 4417e1c:	42bff736 	bltu	r8,r10,4417dfc <__reset+0xfb413dfc>
 4417e20:	52000326 	beq	r10,r8,4417e30 <__gedf2+0xcc>
 4417e24:	5200042e 	bgeu	r10,r8,4417e38 <__gedf2+0xd4>
 4417e28:	283fec1e 	bne	r5,zero,4417ddc <__reset+0xfb413ddc>
 4417e2c:	003ff406 	br	4417e00 <__reset+0xfb413e00>
 4417e30:	313ff236 	bltu	r6,r4,4417dfc <__reset+0xfb413dfc>
 4417e34:	21bffc36 	bltu	r4,r6,4417e28 <__reset+0xfb413e28>
 4417e38:	0005883a 	mov	r2,zero
 4417e3c:	f800283a 	ret

04417e40 <__floatunsidf>:
 4417e40:	defffe04 	addi	sp,sp,-8
 4417e44:	dc000015 	stw	r16,0(sp)
 4417e48:	dfc00115 	stw	ra,4(sp)
 4417e4c:	2021883a 	mov	r16,r4
 4417e50:	20002226 	beq	r4,zero,4417edc <__floatunsidf+0x9c>
 4417e54:	440a3540 	call	440a354 <__clzsi2>
 4417e58:	01010784 	movi	r4,1054
 4417e5c:	2089c83a 	sub	r4,r4,r2
 4417e60:	01810cc4 	movi	r6,1075
 4417e64:	310dc83a 	sub	r6,r6,r4
 4417e68:	00c007c4 	movi	r3,31
 4417e6c:	1980120e 	bge	r3,r6,4417eb8 <__floatunsidf+0x78>
 4417e70:	00c104c4 	movi	r3,1043
 4417e74:	1907c83a 	sub	r3,r3,r4
 4417e78:	80ca983a 	sll	r5,r16,r3
 4417e7c:	00800434 	movhi	r2,16
 4417e80:	10bfffc4 	addi	r2,r2,-1
 4417e84:	2101ffcc 	andi	r4,r4,2047
 4417e88:	0021883a 	mov	r16,zero
 4417e8c:	288a703a 	and	r5,r5,r2
 4417e90:	2008953a 	slli	r4,r4,20
 4417e94:	00c00434 	movhi	r3,16
 4417e98:	18ffffc4 	addi	r3,r3,-1
 4417e9c:	28c6703a 	and	r3,r5,r3
 4417ea0:	8005883a 	mov	r2,r16
 4417ea4:	1906b03a 	or	r3,r3,r4
 4417ea8:	dfc00117 	ldw	ra,4(sp)
 4417eac:	dc000017 	ldw	r16,0(sp)
 4417eb0:	dec00204 	addi	sp,sp,8
 4417eb4:	f800283a 	ret
 4417eb8:	00c002c4 	movi	r3,11
 4417ebc:	188bc83a 	sub	r5,r3,r2
 4417ec0:	814ad83a 	srl	r5,r16,r5
 4417ec4:	00c00434 	movhi	r3,16
 4417ec8:	18ffffc4 	addi	r3,r3,-1
 4417ecc:	81a0983a 	sll	r16,r16,r6
 4417ed0:	2101ffcc 	andi	r4,r4,2047
 4417ed4:	28ca703a 	and	r5,r5,r3
 4417ed8:	003fed06 	br	4417e90 <__reset+0xfb413e90>
 4417edc:	0009883a 	mov	r4,zero
 4417ee0:	000b883a 	mov	r5,zero
 4417ee4:	003fea06 	br	4417e90 <__reset+0xfb413e90>

04417ee8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4417ee8:	defff504 	addi	sp,sp,-44
 4417eec:	df000a15 	stw	fp,40(sp)
 4417ef0:	df000a04 	addi	fp,sp,40
 4417ef4:	e13ffc15 	stw	r4,-16(fp)
 4417ef8:	e17ffd15 	stw	r5,-12(fp)
 4417efc:	e1bffe15 	stw	r6,-8(fp)
 4417f00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4417f04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4417f08:	00811134 	movhi	r2,1092
 4417f0c:	10af1804 	addi	r2,r2,-17312
 4417f10:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4417f14:	10003f26 	beq	r2,zero,4418014 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4417f18:	e0bffc17 	ldw	r2,-16(fp)
 4417f1c:	10003b26 	beq	r2,zero,441800c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4417f20:	e0bffc17 	ldw	r2,-16(fp)
 4417f24:	e0fffe17 	ldw	r3,-8(fp)
 4417f28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4417f2c:	e0bffc17 	ldw	r2,-16(fp)
 4417f30:	e0ffff17 	ldw	r3,-4(fp)
 4417f34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4417f38:	0005303a 	rdctl	r2,status
 4417f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4417f40:	e0fff917 	ldw	r3,-28(fp)
 4417f44:	00bfff84 	movi	r2,-2
 4417f48:	1884703a 	and	r2,r3,r2
 4417f4c:	1001703a 	wrctl	status,r2
  
  return context;
 4417f50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4417f54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4417f58:	00811134 	movhi	r2,1092
 4417f5c:	10af1904 	addi	r2,r2,-17308
 4417f60:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4417f64:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4417f68:	e0fffd17 	ldw	r3,-12(fp)
 4417f6c:	e0bff617 	ldw	r2,-40(fp)
 4417f70:	1885883a 	add	r2,r3,r2
 4417f74:	10c00044 	addi	r3,r2,1
 4417f78:	e0bffc17 	ldw	r2,-16(fp)
 4417f7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4417f80:	e0bffc17 	ldw	r2,-16(fp)
 4417f84:	10c00217 	ldw	r3,8(r2)
 4417f88:	e0bff617 	ldw	r2,-40(fp)
 4417f8c:	1880042e 	bgeu	r3,r2,4417fa0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4417f90:	e0bffc17 	ldw	r2,-16(fp)
 4417f94:	00c00044 	movi	r3,1
 4417f98:	10c00405 	stb	r3,16(r2)
 4417f9c:	00000206 	br	4417fa8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4417fa0:	e0bffc17 	ldw	r2,-16(fp)
 4417fa4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4417fa8:	e0fffc17 	ldw	r3,-16(fp)
 4417fac:	00811134 	movhi	r2,1092
 4417fb0:	10a15d04 	addi	r2,r2,-31372
 4417fb4:	e0bffa15 	stw	r2,-24(fp)
 4417fb8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4417fbc:	e0bffb17 	ldw	r2,-20(fp)
 4417fc0:	e0fffa17 	ldw	r3,-24(fp)
 4417fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4417fc8:	e0bffa17 	ldw	r2,-24(fp)
 4417fcc:	10c00017 	ldw	r3,0(r2)
 4417fd0:	e0bffb17 	ldw	r2,-20(fp)
 4417fd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4417fd8:	e0bffa17 	ldw	r2,-24(fp)
 4417fdc:	10800017 	ldw	r2,0(r2)
 4417fe0:	e0fffb17 	ldw	r3,-20(fp)
 4417fe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4417fe8:	e0bffa17 	ldw	r2,-24(fp)
 4417fec:	e0fffb17 	ldw	r3,-20(fp)
 4417ff0:	10c00015 	stw	r3,0(r2)
 4417ff4:	e0bff817 	ldw	r2,-32(fp)
 4417ff8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4417ffc:	e0bff717 	ldw	r2,-36(fp)
 4418000:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4418004:	0005883a 	mov	r2,zero
 4418008:	00000306 	br	4418018 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 441800c:	00bffa84 	movi	r2,-22
 4418010:	00000106 	br	4418018 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4418014:	00bfde84 	movi	r2,-134
  }
}
 4418018:	e037883a 	mov	sp,fp
 441801c:	df000017 	ldw	fp,0(sp)
 4418020:	dec00104 	addi	sp,sp,4
 4418024:	f800283a 	ret

04418028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4418028:	defffe04 	addi	sp,sp,-8
 441802c:	dfc00115 	stw	ra,4(sp)
 4418030:	df000015 	stw	fp,0(sp)
 4418034:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4418038:	00811134 	movhi	r2,1092
 441803c:	10a15a04 	addi	r2,r2,-31384
 4418040:	10800017 	ldw	r2,0(r2)
 4418044:	10000526 	beq	r2,zero,441805c <alt_get_errno+0x34>
 4418048:	00811134 	movhi	r2,1092
 441804c:	10a15a04 	addi	r2,r2,-31384
 4418050:	10800017 	ldw	r2,0(r2)
 4418054:	103ee83a 	callr	r2
 4418058:	00000206 	br	4418064 <alt_get_errno+0x3c>
 441805c:	00811134 	movhi	r2,1092
 4418060:	10af1004 	addi	r2,r2,-17344
}
 4418064:	e037883a 	mov	sp,fp
 4418068:	dfc00117 	ldw	ra,4(sp)
 441806c:	df000017 	ldw	fp,0(sp)
 4418070:	dec00204 	addi	sp,sp,8
 4418074:	f800283a 	ret

04418078 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4418078:	defffb04 	addi	sp,sp,-20
 441807c:	dfc00415 	stw	ra,16(sp)
 4418080:	df000315 	stw	fp,12(sp)
 4418084:	df000304 	addi	fp,sp,12
 4418088:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 441808c:	e0bfff17 	ldw	r2,-4(fp)
 4418090:	10000616 	blt	r2,zero,44180ac <close+0x34>
 4418094:	e0bfff17 	ldw	r2,-4(fp)
 4418098:	10c00324 	muli	r3,r2,12
 441809c:	008110f4 	movhi	r2,1091
 44180a0:	109cd404 	addi	r2,r2,29520
 44180a4:	1885883a 	add	r2,r3,r2
 44180a8:	00000106 	br	44180b0 <close+0x38>
 44180ac:	0005883a 	mov	r2,zero
 44180b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 44180b4:	e0bffd17 	ldw	r2,-12(fp)
 44180b8:	10001926 	beq	r2,zero,4418120 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 44180bc:	e0bffd17 	ldw	r2,-12(fp)
 44180c0:	10800017 	ldw	r2,0(r2)
 44180c4:	10800417 	ldw	r2,16(r2)
 44180c8:	10000626 	beq	r2,zero,44180e4 <close+0x6c>
 44180cc:	e0bffd17 	ldw	r2,-12(fp)
 44180d0:	10800017 	ldw	r2,0(r2)
 44180d4:	10800417 	ldw	r2,16(r2)
 44180d8:	e13ffd17 	ldw	r4,-12(fp)
 44180dc:	103ee83a 	callr	r2
 44180e0:	00000106 	br	44180e8 <close+0x70>
 44180e4:	0005883a 	mov	r2,zero
 44180e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 44180ec:	e13fff17 	ldw	r4,-4(fp)
 44180f0:	4418a580 	call	4418a58 <alt_release_fd>
    if (rval < 0)
 44180f4:	e0bffe17 	ldw	r2,-8(fp)
 44180f8:	1000070e 	bge	r2,zero,4418118 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 44180fc:	44180280 	call	4418028 <alt_get_errno>
 4418100:	1007883a 	mov	r3,r2
 4418104:	e0bffe17 	ldw	r2,-8(fp)
 4418108:	0085c83a 	sub	r2,zero,r2
 441810c:	18800015 	stw	r2,0(r3)
      return -1;
 4418110:	00bfffc4 	movi	r2,-1
 4418114:	00000706 	br	4418134 <close+0xbc>
    }
    return 0;
 4418118:	0005883a 	mov	r2,zero
 441811c:	00000506 	br	4418134 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4418120:	44180280 	call	4418028 <alt_get_errno>
 4418124:	1007883a 	mov	r3,r2
 4418128:	00801444 	movi	r2,81
 441812c:	18800015 	stw	r2,0(r3)
    return -1;
 4418130:	00bfffc4 	movi	r2,-1
  }
}
 4418134:	e037883a 	mov	sp,fp
 4418138:	dfc00117 	ldw	ra,4(sp)
 441813c:	df000017 	ldw	fp,0(sp)
 4418140:	dec00204 	addi	sp,sp,8
 4418144:	f800283a 	ret

04418148 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4418148:	defffc04 	addi	sp,sp,-16
 441814c:	df000315 	stw	fp,12(sp)
 4418150:	df000304 	addi	fp,sp,12
 4418154:	e13ffd15 	stw	r4,-12(fp)
 4418158:	e17ffe15 	stw	r5,-8(fp)
 441815c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4418160:	e0bfff17 	ldw	r2,-4(fp)
}
 4418164:	e037883a 	mov	sp,fp
 4418168:	df000017 	ldw	fp,0(sp)
 441816c:	dec00104 	addi	sp,sp,4
 4418170:	f800283a 	ret

04418174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4418174:	defffe04 	addi	sp,sp,-8
 4418178:	dfc00115 	stw	ra,4(sp)
 441817c:	df000015 	stw	fp,0(sp)
 4418180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4418184:	00811134 	movhi	r2,1092
 4418188:	10a15a04 	addi	r2,r2,-31384
 441818c:	10800017 	ldw	r2,0(r2)
 4418190:	10000526 	beq	r2,zero,44181a8 <alt_get_errno+0x34>
 4418194:	00811134 	movhi	r2,1092
 4418198:	10a15a04 	addi	r2,r2,-31384
 441819c:	10800017 	ldw	r2,0(r2)
 44181a0:	103ee83a 	callr	r2
 44181a4:	00000206 	br	44181b0 <alt_get_errno+0x3c>
 44181a8:	00811134 	movhi	r2,1092
 44181ac:	10af1004 	addi	r2,r2,-17344
}
 44181b0:	e037883a 	mov	sp,fp
 44181b4:	dfc00117 	ldw	ra,4(sp)
 44181b8:	df000017 	ldw	fp,0(sp)
 44181bc:	dec00204 	addi	sp,sp,8
 44181c0:	f800283a 	ret

044181c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 44181c4:	defffb04 	addi	sp,sp,-20
 44181c8:	dfc00415 	stw	ra,16(sp)
 44181cc:	df000315 	stw	fp,12(sp)
 44181d0:	df000304 	addi	fp,sp,12
 44181d4:	e13ffe15 	stw	r4,-8(fp)
 44181d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 44181dc:	e0bffe17 	ldw	r2,-8(fp)
 44181e0:	10000616 	blt	r2,zero,44181fc <fstat+0x38>
 44181e4:	e0bffe17 	ldw	r2,-8(fp)
 44181e8:	10c00324 	muli	r3,r2,12
 44181ec:	008110f4 	movhi	r2,1091
 44181f0:	109cd404 	addi	r2,r2,29520
 44181f4:	1885883a 	add	r2,r3,r2
 44181f8:	00000106 	br	4418200 <fstat+0x3c>
 44181fc:	0005883a 	mov	r2,zero
 4418200:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4418204:	e0bffd17 	ldw	r2,-12(fp)
 4418208:	10001026 	beq	r2,zero,441824c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 441820c:	e0bffd17 	ldw	r2,-12(fp)
 4418210:	10800017 	ldw	r2,0(r2)
 4418214:	10800817 	ldw	r2,32(r2)
 4418218:	10000726 	beq	r2,zero,4418238 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 441821c:	e0bffd17 	ldw	r2,-12(fp)
 4418220:	10800017 	ldw	r2,0(r2)
 4418224:	10800817 	ldw	r2,32(r2)
 4418228:	e17fff17 	ldw	r5,-4(fp)
 441822c:	e13ffd17 	ldw	r4,-12(fp)
 4418230:	103ee83a 	callr	r2
 4418234:	00000a06 	br	4418260 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4418238:	e0bfff17 	ldw	r2,-4(fp)
 441823c:	00c80004 	movi	r3,8192
 4418240:	10c00115 	stw	r3,4(r2)
      return 0;
 4418244:	0005883a 	mov	r2,zero
 4418248:	00000506 	br	4418260 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 441824c:	44181740 	call	4418174 <alt_get_errno>
 4418250:	1007883a 	mov	r3,r2
 4418254:	00801444 	movi	r2,81
 4418258:	18800015 	stw	r2,0(r3)
    return -1;
 441825c:	00bfffc4 	movi	r2,-1
  }
}
 4418260:	e037883a 	mov	sp,fp
 4418264:	dfc00117 	ldw	ra,4(sp)
 4418268:	df000017 	ldw	fp,0(sp)
 441826c:	dec00204 	addi	sp,sp,8
 4418270:	f800283a 	ret

04418274 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4418274:	defff904 	addi	sp,sp,-28
 4418278:	dfc00615 	stw	ra,24(sp)
 441827c:	df000515 	stw	fp,20(sp)
 4418280:	df000504 	addi	fp,sp,20
 4418284:	e13ffc15 	stw	r4,-16(fp)
 4418288:	e17ffd15 	stw	r5,-12(fp)
 441828c:	e1bffe15 	stw	r6,-8(fp)
 4418290:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4418294:	e0800217 	ldw	r2,8(fp)
 4418298:	d8800015 	stw	r2,0(sp)
 441829c:	e1ffff17 	ldw	r7,-4(fp)
 44182a0:	e1bffe17 	ldw	r6,-8(fp)
 44182a4:	e17ffd17 	ldw	r5,-12(fp)
 44182a8:	e13ffc17 	ldw	r4,-16(fp)
 44182ac:	44184540 	call	4418454 <alt_iic_isr_register>
}  
 44182b0:	e037883a 	mov	sp,fp
 44182b4:	dfc00117 	ldw	ra,4(sp)
 44182b8:	df000017 	ldw	fp,0(sp)
 44182bc:	dec00204 	addi	sp,sp,8
 44182c0:	f800283a 	ret

044182c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 44182c4:	defff904 	addi	sp,sp,-28
 44182c8:	df000615 	stw	fp,24(sp)
 44182cc:	df000604 	addi	fp,sp,24
 44182d0:	e13ffe15 	stw	r4,-8(fp)
 44182d4:	e17fff15 	stw	r5,-4(fp)
 44182d8:	e0bfff17 	ldw	r2,-4(fp)
 44182dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 44182e0:	0005303a 	rdctl	r2,status
 44182e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 44182e8:	e0fffb17 	ldw	r3,-20(fp)
 44182ec:	00bfff84 	movi	r2,-2
 44182f0:	1884703a 	and	r2,r3,r2
 44182f4:	1001703a 	wrctl	status,r2
  
  return context;
 44182f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 44182fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4418300:	00c00044 	movi	r3,1
 4418304:	e0bffa17 	ldw	r2,-24(fp)
 4418308:	1884983a 	sll	r2,r3,r2
 441830c:	1007883a 	mov	r3,r2
 4418310:	00811134 	movhi	r2,1092
 4418314:	10af1404 	addi	r2,r2,-17328
 4418318:	10800017 	ldw	r2,0(r2)
 441831c:	1886b03a 	or	r3,r3,r2
 4418320:	00811134 	movhi	r2,1092
 4418324:	10af1404 	addi	r2,r2,-17328
 4418328:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 441832c:	00811134 	movhi	r2,1092
 4418330:	10af1404 	addi	r2,r2,-17328
 4418334:	10800017 	ldw	r2,0(r2)
 4418338:	100170fa 	wrctl	ienable,r2
 441833c:	e0bffc17 	ldw	r2,-16(fp)
 4418340:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4418344:	e0bffd17 	ldw	r2,-12(fp)
 4418348:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 441834c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4418350:	0001883a 	nop
}
 4418354:	e037883a 	mov	sp,fp
 4418358:	df000017 	ldw	fp,0(sp)
 441835c:	dec00104 	addi	sp,sp,4
 4418360:	f800283a 	ret

04418364 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4418364:	defff904 	addi	sp,sp,-28
 4418368:	df000615 	stw	fp,24(sp)
 441836c:	df000604 	addi	fp,sp,24
 4418370:	e13ffe15 	stw	r4,-8(fp)
 4418374:	e17fff15 	stw	r5,-4(fp)
 4418378:	e0bfff17 	ldw	r2,-4(fp)
 441837c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4418380:	0005303a 	rdctl	r2,status
 4418384:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4418388:	e0fffb17 	ldw	r3,-20(fp)
 441838c:	00bfff84 	movi	r2,-2
 4418390:	1884703a 	and	r2,r3,r2
 4418394:	1001703a 	wrctl	status,r2
  
  return context;
 4418398:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 441839c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 44183a0:	00c00044 	movi	r3,1
 44183a4:	e0bffa17 	ldw	r2,-24(fp)
 44183a8:	1884983a 	sll	r2,r3,r2
 44183ac:	0084303a 	nor	r2,zero,r2
 44183b0:	1007883a 	mov	r3,r2
 44183b4:	00811134 	movhi	r2,1092
 44183b8:	10af1404 	addi	r2,r2,-17328
 44183bc:	10800017 	ldw	r2,0(r2)
 44183c0:	1886703a 	and	r3,r3,r2
 44183c4:	00811134 	movhi	r2,1092
 44183c8:	10af1404 	addi	r2,r2,-17328
 44183cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 44183d0:	00811134 	movhi	r2,1092
 44183d4:	10af1404 	addi	r2,r2,-17328
 44183d8:	10800017 	ldw	r2,0(r2)
 44183dc:	100170fa 	wrctl	ienable,r2
 44183e0:	e0bffc17 	ldw	r2,-16(fp)
 44183e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 44183e8:	e0bffd17 	ldw	r2,-12(fp)
 44183ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 44183f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 44183f4:	0001883a 	nop
}
 44183f8:	e037883a 	mov	sp,fp
 44183fc:	df000017 	ldw	fp,0(sp)
 4418400:	dec00104 	addi	sp,sp,4
 4418404:	f800283a 	ret

04418408 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4418408:	defffc04 	addi	sp,sp,-16
 441840c:	df000315 	stw	fp,12(sp)
 4418410:	df000304 	addi	fp,sp,12
 4418414:	e13ffe15 	stw	r4,-8(fp)
 4418418:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 441841c:	000530fa 	rdctl	r2,ienable
 4418420:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4418424:	00c00044 	movi	r3,1
 4418428:	e0bfff17 	ldw	r2,-4(fp)
 441842c:	1884983a 	sll	r2,r3,r2
 4418430:	1007883a 	mov	r3,r2
 4418434:	e0bffd17 	ldw	r2,-12(fp)
 4418438:	1884703a 	and	r2,r3,r2
 441843c:	1004c03a 	cmpne	r2,r2,zero
 4418440:	10803fcc 	andi	r2,r2,255
}
 4418444:	e037883a 	mov	sp,fp
 4418448:	df000017 	ldw	fp,0(sp)
 441844c:	dec00104 	addi	sp,sp,4
 4418450:	f800283a 	ret

04418454 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4418454:	defff504 	addi	sp,sp,-44
 4418458:	dfc00a15 	stw	ra,40(sp)
 441845c:	df000915 	stw	fp,36(sp)
 4418460:	df000904 	addi	fp,sp,36
 4418464:	e13ffc15 	stw	r4,-16(fp)
 4418468:	e17ffd15 	stw	r5,-12(fp)
 441846c:	e1bffe15 	stw	r6,-8(fp)
 4418470:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4418474:	00bffa84 	movi	r2,-22
 4418478:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 441847c:	e0bffd17 	ldw	r2,-12(fp)
 4418480:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4418484:	e0bff817 	ldw	r2,-32(fp)
 4418488:	10800808 	cmpgei	r2,r2,32
 441848c:	1000271e 	bne	r2,zero,441852c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4418490:	0005303a 	rdctl	r2,status
 4418494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4418498:	e0fffb17 	ldw	r3,-20(fp)
 441849c:	00bfff84 	movi	r2,-2
 44184a0:	1884703a 	and	r2,r3,r2
 44184a4:	1001703a 	wrctl	status,r2
  
  return context;
 44184a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 44184ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 44184b0:	00811134 	movhi	r2,1092
 44184b4:	10af2504 	addi	r2,r2,-17260
 44184b8:	e0fff817 	ldw	r3,-32(fp)
 44184bc:	180690fa 	slli	r3,r3,3
 44184c0:	10c5883a 	add	r2,r2,r3
 44184c4:	e0fffe17 	ldw	r3,-8(fp)
 44184c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 44184cc:	00811134 	movhi	r2,1092
 44184d0:	10af2504 	addi	r2,r2,-17260
 44184d4:	e0fff817 	ldw	r3,-32(fp)
 44184d8:	180690fa 	slli	r3,r3,3
 44184dc:	10c5883a 	add	r2,r2,r3
 44184e0:	10800104 	addi	r2,r2,4
 44184e4:	e0ffff17 	ldw	r3,-4(fp)
 44184e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 44184ec:	e0bffe17 	ldw	r2,-8(fp)
 44184f0:	10000526 	beq	r2,zero,4418508 <alt_iic_isr_register+0xb4>
 44184f4:	e0bff817 	ldw	r2,-32(fp)
 44184f8:	100b883a 	mov	r5,r2
 44184fc:	e13ffc17 	ldw	r4,-16(fp)
 4418500:	44182c40 	call	44182c4 <alt_ic_irq_enable>
 4418504:	00000406 	br	4418518 <alt_iic_isr_register+0xc4>
 4418508:	e0bff817 	ldw	r2,-32(fp)
 441850c:	100b883a 	mov	r5,r2
 4418510:	e13ffc17 	ldw	r4,-16(fp)
 4418514:	44183640 	call	4418364 <alt_ic_irq_disable>
 4418518:	e0bff715 	stw	r2,-36(fp)
 441851c:	e0bffa17 	ldw	r2,-24(fp)
 4418520:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4418524:	e0bff917 	ldw	r2,-28(fp)
 4418528:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 441852c:	e0bff717 	ldw	r2,-36(fp)
}
 4418530:	e037883a 	mov	sp,fp
 4418534:	dfc00117 	ldw	ra,4(sp)
 4418538:	df000017 	ldw	fp,0(sp)
 441853c:	dec00204 	addi	sp,sp,8
 4418540:	f800283a 	ret

04418544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4418544:	defffe04 	addi	sp,sp,-8
 4418548:	dfc00115 	stw	ra,4(sp)
 441854c:	df000015 	stw	fp,0(sp)
 4418550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4418554:	00811134 	movhi	r2,1092
 4418558:	10a15a04 	addi	r2,r2,-31384
 441855c:	10800017 	ldw	r2,0(r2)
 4418560:	10000526 	beq	r2,zero,4418578 <alt_get_errno+0x34>
 4418564:	00811134 	movhi	r2,1092
 4418568:	10a15a04 	addi	r2,r2,-31384
 441856c:	10800017 	ldw	r2,0(r2)
 4418570:	103ee83a 	callr	r2
 4418574:	00000206 	br	4418580 <alt_get_errno+0x3c>
 4418578:	00811134 	movhi	r2,1092
 441857c:	10af1004 	addi	r2,r2,-17344
}
 4418580:	e037883a 	mov	sp,fp
 4418584:	dfc00117 	ldw	ra,4(sp)
 4418588:	df000017 	ldw	fp,0(sp)
 441858c:	dec00204 	addi	sp,sp,8
 4418590:	f800283a 	ret

04418594 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4418594:	deffed04 	addi	sp,sp,-76
 4418598:	dfc01215 	stw	ra,72(sp)
 441859c:	df001115 	stw	fp,68(sp)
 44185a0:	df001104 	addi	fp,sp,68
 44185a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 44185a8:	e0bfff17 	ldw	r2,-4(fp)
 44185ac:	10000616 	blt	r2,zero,44185c8 <isatty+0x34>
 44185b0:	e0bfff17 	ldw	r2,-4(fp)
 44185b4:	10c00324 	muli	r3,r2,12
 44185b8:	008110f4 	movhi	r2,1091
 44185bc:	109cd404 	addi	r2,r2,29520
 44185c0:	1885883a 	add	r2,r3,r2
 44185c4:	00000106 	br	44185cc <isatty+0x38>
 44185c8:	0005883a 	mov	r2,zero
 44185cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 44185d0:	e0bfef17 	ldw	r2,-68(fp)
 44185d4:	10000e26 	beq	r2,zero,4418610 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 44185d8:	e0bfef17 	ldw	r2,-68(fp)
 44185dc:	10800017 	ldw	r2,0(r2)
 44185e0:	10800817 	ldw	r2,32(r2)
 44185e4:	1000021e 	bne	r2,zero,44185f0 <isatty+0x5c>
    {
      return 1;
 44185e8:	00800044 	movi	r2,1
 44185ec:	00000d06 	br	4418624 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 44185f0:	e0bff004 	addi	r2,fp,-64
 44185f4:	100b883a 	mov	r5,r2
 44185f8:	e13fff17 	ldw	r4,-4(fp)
 44185fc:	44181c40 	call	44181c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4418600:	e0bff117 	ldw	r2,-60(fp)
 4418604:	10880020 	cmpeqi	r2,r2,8192
 4418608:	10803fcc 	andi	r2,r2,255
 441860c:	00000506 	br	4418624 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4418610:	44185440 	call	4418544 <alt_get_errno>
 4418614:	1007883a 	mov	r3,r2
 4418618:	00801444 	movi	r2,81
 441861c:	18800015 	stw	r2,0(r3)
    return 0;
 4418620:	0005883a 	mov	r2,zero
  }
}
 4418624:	e037883a 	mov	sp,fp
 4418628:	dfc00117 	ldw	ra,4(sp)
 441862c:	df000017 	ldw	fp,0(sp)
 4418630:	dec00204 	addi	sp,sp,8
 4418634:	f800283a 	ret

04418638 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4418638:	defffc04 	addi	sp,sp,-16
 441863c:	df000315 	stw	fp,12(sp)
 4418640:	df000304 	addi	fp,sp,12
 4418644:	e13ffd15 	stw	r4,-12(fp)
 4418648:	e17ffe15 	stw	r5,-8(fp)
 441864c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4418650:	e0fffe17 	ldw	r3,-8(fp)
 4418654:	e0bffd17 	ldw	r2,-12(fp)
 4418658:	18800c26 	beq	r3,r2,441868c <alt_load_section+0x54>
  {
    while( to != end )
 441865c:	00000806 	br	4418680 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4418660:	e0bffe17 	ldw	r2,-8(fp)
 4418664:	10c00104 	addi	r3,r2,4
 4418668:	e0fffe15 	stw	r3,-8(fp)
 441866c:	e0fffd17 	ldw	r3,-12(fp)
 4418670:	19000104 	addi	r4,r3,4
 4418674:	e13ffd15 	stw	r4,-12(fp)
 4418678:	18c00017 	ldw	r3,0(r3)
 441867c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4418680:	e0fffe17 	ldw	r3,-8(fp)
 4418684:	e0bfff17 	ldw	r2,-4(fp)
 4418688:	18bff51e 	bne	r3,r2,4418660 <__reset+0xfb414660>
    {
      *to++ = *from++;
    }
  }
}
 441868c:	0001883a 	nop
 4418690:	e037883a 	mov	sp,fp
 4418694:	df000017 	ldw	fp,0(sp)
 4418698:	dec00104 	addi	sp,sp,4
 441869c:	f800283a 	ret

044186a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 44186a0:	defffe04 	addi	sp,sp,-8
 44186a4:	dfc00115 	stw	ra,4(sp)
 44186a8:	df000015 	stw	fp,0(sp)
 44186ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 44186b0:	01811134 	movhi	r6,1092
 44186b4:	31a15f04 	addi	r6,r6,-31364
 44186b8:	014110f4 	movhi	r5,1091
 44186bc:	2953b204 	addi	r5,r5,20168
 44186c0:	01011134 	movhi	r4,1092
 44186c4:	21215f04 	addi	r4,r4,-31364
 44186c8:	44186380 	call	4418638 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 44186cc:	01811034 	movhi	r6,1088
 44186d0:	31808904 	addi	r6,r6,548
 44186d4:	01411034 	movhi	r5,1088
 44186d8:	29400004 	addi	r5,r5,0
 44186dc:	01011034 	movhi	r4,1088
 44186e0:	21000004 	addi	r4,r4,0
 44186e4:	44186380 	call	4418638 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 44186e8:	018110f4 	movhi	r6,1091
 44186ec:	3193b204 	addi	r6,r6,20168
 44186f0:	014110b4 	movhi	r5,1090
 44186f4:	296ad404 	addi	r5,r5,-21680
 44186f8:	010110b4 	movhi	r4,1090
 44186fc:	212ad404 	addi	r4,r4,-21680
 4418700:	44186380 	call	4418638 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4418704:	4419e300 	call	4419e30 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4418708:	441a02c0 	call	441a02c <alt_icache_flush_all>
}
 441870c:	0001883a 	nop
 4418710:	e037883a 	mov	sp,fp
 4418714:	dfc00117 	ldw	ra,4(sp)
 4418718:	df000017 	ldw	fp,0(sp)
 441871c:	dec00204 	addi	sp,sp,8
 4418720:	f800283a 	ret

04418724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4418724:	defffe04 	addi	sp,sp,-8
 4418728:	dfc00115 	stw	ra,4(sp)
 441872c:	df000015 	stw	fp,0(sp)
 4418730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4418734:	00811134 	movhi	r2,1092
 4418738:	10a15a04 	addi	r2,r2,-31384
 441873c:	10800017 	ldw	r2,0(r2)
 4418740:	10000526 	beq	r2,zero,4418758 <alt_get_errno+0x34>
 4418744:	00811134 	movhi	r2,1092
 4418748:	10a15a04 	addi	r2,r2,-31384
 441874c:	10800017 	ldw	r2,0(r2)
 4418750:	103ee83a 	callr	r2
 4418754:	00000206 	br	4418760 <alt_get_errno+0x3c>
 4418758:	00811134 	movhi	r2,1092
 441875c:	10af1004 	addi	r2,r2,-17344
}
 4418760:	e037883a 	mov	sp,fp
 4418764:	dfc00117 	ldw	ra,4(sp)
 4418768:	df000017 	ldw	fp,0(sp)
 441876c:	dec00204 	addi	sp,sp,8
 4418770:	f800283a 	ret

04418774 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4418774:	defff904 	addi	sp,sp,-28
 4418778:	dfc00615 	stw	ra,24(sp)
 441877c:	df000515 	stw	fp,20(sp)
 4418780:	df000504 	addi	fp,sp,20
 4418784:	e13ffd15 	stw	r4,-12(fp)
 4418788:	e17ffe15 	stw	r5,-8(fp)
 441878c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4418790:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4418794:	e0bffd17 	ldw	r2,-12(fp)
 4418798:	10000616 	blt	r2,zero,44187b4 <lseek+0x40>
 441879c:	e0bffd17 	ldw	r2,-12(fp)
 44187a0:	10c00324 	muli	r3,r2,12
 44187a4:	008110f4 	movhi	r2,1091
 44187a8:	109cd404 	addi	r2,r2,29520
 44187ac:	1885883a 	add	r2,r3,r2
 44187b0:	00000106 	br	44187b8 <lseek+0x44>
 44187b4:	0005883a 	mov	r2,zero
 44187b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 44187bc:	e0bffc17 	ldw	r2,-16(fp)
 44187c0:	10001026 	beq	r2,zero,4418804 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 44187c4:	e0bffc17 	ldw	r2,-16(fp)
 44187c8:	10800017 	ldw	r2,0(r2)
 44187cc:	10800717 	ldw	r2,28(r2)
 44187d0:	10000926 	beq	r2,zero,44187f8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 44187d4:	e0bffc17 	ldw	r2,-16(fp)
 44187d8:	10800017 	ldw	r2,0(r2)
 44187dc:	10800717 	ldw	r2,28(r2)
 44187e0:	e1bfff17 	ldw	r6,-4(fp)
 44187e4:	e17ffe17 	ldw	r5,-8(fp)
 44187e8:	e13ffc17 	ldw	r4,-16(fp)
 44187ec:	103ee83a 	callr	r2
 44187f0:	e0bffb15 	stw	r2,-20(fp)
 44187f4:	00000506 	br	441880c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 44187f8:	00bfde84 	movi	r2,-134
 44187fc:	e0bffb15 	stw	r2,-20(fp)
 4418800:	00000206 	br	441880c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4418804:	00bfebc4 	movi	r2,-81
 4418808:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 441880c:	e0bffb17 	ldw	r2,-20(fp)
 4418810:	1000070e 	bge	r2,zero,4418830 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4418814:	44187240 	call	4418724 <alt_get_errno>
 4418818:	1007883a 	mov	r3,r2
 441881c:	e0bffb17 	ldw	r2,-20(fp)
 4418820:	0085c83a 	sub	r2,zero,r2
 4418824:	18800015 	stw	r2,0(r3)
    rc = -1;
 4418828:	00bfffc4 	movi	r2,-1
 441882c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4418830:	e0bffb17 	ldw	r2,-20(fp)
}
 4418834:	e037883a 	mov	sp,fp
 4418838:	dfc00117 	ldw	ra,4(sp)
 441883c:	df000017 	ldw	fp,0(sp)
 4418840:	dec00204 	addi	sp,sp,8
 4418844:	f800283a 	ret

04418848 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4418848:	defffd04 	addi	sp,sp,-12
 441884c:	dfc00215 	stw	ra,8(sp)
 4418850:	df000115 	stw	fp,4(sp)
 4418854:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4418858:	0009883a 	mov	r4,zero
 441885c:	4418ec00 	call	4418ec0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4418860:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4418864:	4418ef80 	call	4418ef8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4418868:	018110f4 	movhi	r6,1091
 441886c:	3193aa04 	addi	r6,r6,20136
 4418870:	014110f4 	movhi	r5,1091
 4418874:	2953aa04 	addi	r5,r5,20136
 4418878:	010110f4 	movhi	r4,1091
 441887c:	2113aa04 	addi	r4,r4,20136
 4418880:	441a1c00 	call	441a1c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4418884:	4419f6c0 	call	4419f6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4418888:	010110b4 	movhi	r4,1090
 441888c:	2127f304 	addi	r4,r4,-24628
 4418890:	441a7bc0 	call	441a7bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4418894:	d0adc917 	ldw	r2,-18652(gp)
 4418898:	d0edca17 	ldw	r3,-18648(gp)
 441889c:	d12dcb17 	ldw	r4,-18644(gp)
 44188a0:	200d883a 	mov	r6,r4
 44188a4:	180b883a 	mov	r5,r3
 44188a8:	1009883a 	mov	r4,r2
 44188ac:	44053c80 	call	44053c8 <main>
 44188b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 44188b4:	01000044 	movi	r4,1
 44188b8:	44180780 	call	4418078 <close>
  exit (result);
 44188bc:	e13fff17 	ldw	r4,-4(fp)
 44188c0:	441a7d00 	call	441a7d0 <exit>

044188c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 44188c4:	defffe04 	addi	sp,sp,-8
 44188c8:	df000115 	stw	fp,4(sp)
 44188cc:	df000104 	addi	fp,sp,4
 44188d0:	e13fff15 	stw	r4,-4(fp)
}
 44188d4:	0001883a 	nop
 44188d8:	e037883a 	mov	sp,fp
 44188dc:	df000017 	ldw	fp,0(sp)
 44188e0:	dec00104 	addi	sp,sp,4
 44188e4:	f800283a 	ret

044188e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 44188e8:	defffe04 	addi	sp,sp,-8
 44188ec:	df000115 	stw	fp,4(sp)
 44188f0:	df000104 	addi	fp,sp,4
 44188f4:	e13fff15 	stw	r4,-4(fp)
}
 44188f8:	0001883a 	nop
 44188fc:	e037883a 	mov	sp,fp
 4418900:	df000017 	ldw	fp,0(sp)
 4418904:	dec00104 	addi	sp,sp,4
 4418908:	f800283a 	ret

0441890c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 441890c:	defffe04 	addi	sp,sp,-8
 4418910:	dfc00115 	stw	ra,4(sp)
 4418914:	df000015 	stw	fp,0(sp)
 4418918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 441891c:	00811134 	movhi	r2,1092
 4418920:	10a15a04 	addi	r2,r2,-31384
 4418924:	10800017 	ldw	r2,0(r2)
 4418928:	10000526 	beq	r2,zero,4418940 <alt_get_errno+0x34>
 441892c:	00811134 	movhi	r2,1092
 4418930:	10a15a04 	addi	r2,r2,-31384
 4418934:	10800017 	ldw	r2,0(r2)
 4418938:	103ee83a 	callr	r2
 441893c:	00000206 	br	4418948 <alt_get_errno+0x3c>
 4418940:	00811134 	movhi	r2,1092
 4418944:	10af1004 	addi	r2,r2,-17344
}
 4418948:	e037883a 	mov	sp,fp
 441894c:	dfc00117 	ldw	ra,4(sp)
 4418950:	df000017 	ldw	fp,0(sp)
 4418954:	dec00204 	addi	sp,sp,8
 4418958:	f800283a 	ret

0441895c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 441895c:	defff904 	addi	sp,sp,-28
 4418960:	dfc00615 	stw	ra,24(sp)
 4418964:	df000515 	stw	fp,20(sp)
 4418968:	df000504 	addi	fp,sp,20
 441896c:	e13ffd15 	stw	r4,-12(fp)
 4418970:	e17ffe15 	stw	r5,-8(fp)
 4418974:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4418978:	e0bffd17 	ldw	r2,-12(fp)
 441897c:	10000616 	blt	r2,zero,4418998 <read+0x3c>
 4418980:	e0bffd17 	ldw	r2,-12(fp)
 4418984:	10c00324 	muli	r3,r2,12
 4418988:	008110f4 	movhi	r2,1091
 441898c:	109cd404 	addi	r2,r2,29520
 4418990:	1885883a 	add	r2,r3,r2
 4418994:	00000106 	br	441899c <read+0x40>
 4418998:	0005883a 	mov	r2,zero
 441899c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 44189a0:	e0bffb17 	ldw	r2,-20(fp)
 44189a4:	10002226 	beq	r2,zero,4418a30 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 44189a8:	e0bffb17 	ldw	r2,-20(fp)
 44189ac:	10800217 	ldw	r2,8(r2)
 44189b0:	108000cc 	andi	r2,r2,3
 44189b4:	10800060 	cmpeqi	r2,r2,1
 44189b8:	1000181e 	bne	r2,zero,4418a1c <read+0xc0>
        (fd->dev->read))
 44189bc:	e0bffb17 	ldw	r2,-20(fp)
 44189c0:	10800017 	ldw	r2,0(r2)
 44189c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 44189c8:	10001426 	beq	r2,zero,4418a1c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 44189cc:	e0bffb17 	ldw	r2,-20(fp)
 44189d0:	10800017 	ldw	r2,0(r2)
 44189d4:	10800517 	ldw	r2,20(r2)
 44189d8:	e0ffff17 	ldw	r3,-4(fp)
 44189dc:	180d883a 	mov	r6,r3
 44189e0:	e17ffe17 	ldw	r5,-8(fp)
 44189e4:	e13ffb17 	ldw	r4,-20(fp)
 44189e8:	103ee83a 	callr	r2
 44189ec:	e0bffc15 	stw	r2,-16(fp)
 44189f0:	e0bffc17 	ldw	r2,-16(fp)
 44189f4:	1000070e 	bge	r2,zero,4418a14 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 44189f8:	441890c0 	call	441890c <alt_get_errno>
 44189fc:	1007883a 	mov	r3,r2
 4418a00:	e0bffc17 	ldw	r2,-16(fp)
 4418a04:	0085c83a 	sub	r2,zero,r2
 4418a08:	18800015 	stw	r2,0(r3)
          return -1;
 4418a0c:	00bfffc4 	movi	r2,-1
 4418a10:	00000c06 	br	4418a44 <read+0xe8>
        }
        return rval;
 4418a14:	e0bffc17 	ldw	r2,-16(fp)
 4418a18:	00000a06 	br	4418a44 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4418a1c:	441890c0 	call	441890c <alt_get_errno>
 4418a20:	1007883a 	mov	r3,r2
 4418a24:	00800344 	movi	r2,13
 4418a28:	18800015 	stw	r2,0(r3)
 4418a2c:	00000406 	br	4418a40 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4418a30:	441890c0 	call	441890c <alt_get_errno>
 4418a34:	1007883a 	mov	r3,r2
 4418a38:	00801444 	movi	r2,81
 4418a3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4418a40:	00bfffc4 	movi	r2,-1
}
 4418a44:	e037883a 	mov	sp,fp
 4418a48:	dfc00117 	ldw	ra,4(sp)
 4418a4c:	df000017 	ldw	fp,0(sp)
 4418a50:	dec00204 	addi	sp,sp,8
 4418a54:	f800283a 	ret

04418a58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4418a58:	defffe04 	addi	sp,sp,-8
 4418a5c:	df000115 	stw	fp,4(sp)
 4418a60:	df000104 	addi	fp,sp,4
 4418a64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4418a68:	e0bfff17 	ldw	r2,-4(fp)
 4418a6c:	108000d0 	cmplti	r2,r2,3
 4418a70:	10000d1e 	bne	r2,zero,4418aa8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4418a74:	008110f4 	movhi	r2,1091
 4418a78:	109cd404 	addi	r2,r2,29520
 4418a7c:	e0ffff17 	ldw	r3,-4(fp)
 4418a80:	18c00324 	muli	r3,r3,12
 4418a84:	10c5883a 	add	r2,r2,r3
 4418a88:	10800204 	addi	r2,r2,8
 4418a8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4418a90:	008110f4 	movhi	r2,1091
 4418a94:	109cd404 	addi	r2,r2,29520
 4418a98:	e0ffff17 	ldw	r3,-4(fp)
 4418a9c:	18c00324 	muli	r3,r3,12
 4418aa0:	10c5883a 	add	r2,r2,r3
 4418aa4:	10000015 	stw	zero,0(r2)
  }
}
 4418aa8:	0001883a 	nop
 4418aac:	e037883a 	mov	sp,fp
 4418ab0:	df000017 	ldw	fp,0(sp)
 4418ab4:	dec00104 	addi	sp,sp,4
 4418ab8:	f800283a 	ret

04418abc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4418abc:	defff904 	addi	sp,sp,-28
 4418ac0:	df000615 	stw	fp,24(sp)
 4418ac4:	df000604 	addi	fp,sp,24
 4418ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4418acc:	0005303a 	rdctl	r2,status
 4418ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4418ad4:	e0fffe17 	ldw	r3,-8(fp)
 4418ad8:	00bfff84 	movi	r2,-2
 4418adc:	1884703a 	and	r2,r3,r2
 4418ae0:	1001703a 	wrctl	status,r2
  
  return context;
 4418ae4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4418ae8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4418aec:	d0a01017 	ldw	r2,-32704(gp)
 4418af0:	10c000c4 	addi	r3,r2,3
 4418af4:	00bfff04 	movi	r2,-4
 4418af8:	1884703a 	and	r2,r3,r2
 4418afc:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4418b00:	d0e01017 	ldw	r3,-32704(gp)
 4418b04:	e0bfff17 	ldw	r2,-4(fp)
 4418b08:	1887883a 	add	r3,r3,r2
 4418b0c:	00820034 	movhi	r2,2048
 4418b10:	10800004 	addi	r2,r2,0
 4418b14:	10c0062e 	bgeu	r2,r3,4418b30 <sbrk+0x74>
 4418b18:	e0bffb17 	ldw	r2,-20(fp)
 4418b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4418b20:	e0bffa17 	ldw	r2,-24(fp)
 4418b24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4418b28:	00bfffc4 	movi	r2,-1
 4418b2c:	00000b06 	br	4418b5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4418b30:	d0a01017 	ldw	r2,-32704(gp)
 4418b34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4418b38:	d0e01017 	ldw	r3,-32704(gp)
 4418b3c:	e0bfff17 	ldw	r2,-4(fp)
 4418b40:	1885883a 	add	r2,r3,r2
 4418b44:	d0a01015 	stw	r2,-32704(gp)
 4418b48:	e0bffb17 	ldw	r2,-20(fp)
 4418b4c:	e0bffc15 	stw	r2,-16(fp)
 4418b50:	e0bffc17 	ldw	r2,-16(fp)
 4418b54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4418b58:	e0bffd17 	ldw	r2,-12(fp)
} 
 4418b5c:	e037883a 	mov	sp,fp
 4418b60:	df000017 	ldw	fp,0(sp)
 4418b64:	dec00104 	addi	sp,sp,4
 4418b68:	f800283a 	ret

04418b6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4418b6c:	defffa04 	addi	sp,sp,-24
 4418b70:	df000515 	stw	fp,20(sp)
 4418b74:	df000504 	addi	fp,sp,20
 4418b78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4418b7c:	0005303a 	rdctl	r2,status
 4418b80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4418b84:	e0fffc17 	ldw	r3,-16(fp)
 4418b88:	00bfff84 	movi	r2,-2
 4418b8c:	1884703a 	and	r2,r3,r2
 4418b90:	1001703a 	wrctl	status,r2
  
  return context;
 4418b94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4418b98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4418b9c:	e0bfff17 	ldw	r2,-4(fp)
 4418ba0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4418ba4:	e0bffd17 	ldw	r2,-12(fp)
 4418ba8:	10800017 	ldw	r2,0(r2)
 4418bac:	e0fffd17 	ldw	r3,-12(fp)
 4418bb0:	18c00117 	ldw	r3,4(r3)
 4418bb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4418bb8:	e0bffd17 	ldw	r2,-12(fp)
 4418bbc:	10800117 	ldw	r2,4(r2)
 4418bc0:	e0fffd17 	ldw	r3,-12(fp)
 4418bc4:	18c00017 	ldw	r3,0(r3)
 4418bc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4418bcc:	e0bffd17 	ldw	r2,-12(fp)
 4418bd0:	e0fffd17 	ldw	r3,-12(fp)
 4418bd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4418bd8:	e0bffd17 	ldw	r2,-12(fp)
 4418bdc:	e0fffd17 	ldw	r3,-12(fp)
 4418be0:	10c00015 	stw	r3,0(r2)
 4418be4:	e0bffb17 	ldw	r2,-20(fp)
 4418be8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4418bec:	e0bffe17 	ldw	r2,-8(fp)
 4418bf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4418bf4:	0001883a 	nop
 4418bf8:	e037883a 	mov	sp,fp
 4418bfc:	df000017 	ldw	fp,0(sp)
 4418c00:	dec00104 	addi	sp,sp,4
 4418c04:	f800283a 	ret

04418c08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4418c08:	defffb04 	addi	sp,sp,-20
 4418c0c:	dfc00415 	stw	ra,16(sp)
 4418c10:	df000315 	stw	fp,12(sp)
 4418c14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4418c18:	d0a01117 	ldw	r2,-32700(gp)
 4418c1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4418c20:	d0adcd17 	ldw	r2,-18636(gp)
 4418c24:	10800044 	addi	r2,r2,1
 4418c28:	d0adcd15 	stw	r2,-18636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4418c2c:	00002e06 	br	4418ce8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4418c30:	e0bffd17 	ldw	r2,-12(fp)
 4418c34:	10800017 	ldw	r2,0(r2)
 4418c38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4418c3c:	e0bffd17 	ldw	r2,-12(fp)
 4418c40:	10800403 	ldbu	r2,16(r2)
 4418c44:	10803fcc 	andi	r2,r2,255
 4418c48:	10000426 	beq	r2,zero,4418c5c <alt_tick+0x54>
 4418c4c:	d0adcd17 	ldw	r2,-18636(gp)
 4418c50:	1000021e 	bne	r2,zero,4418c5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4418c54:	e0bffd17 	ldw	r2,-12(fp)
 4418c58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4418c5c:	e0bffd17 	ldw	r2,-12(fp)
 4418c60:	10800217 	ldw	r2,8(r2)
 4418c64:	d0edcd17 	ldw	r3,-18636(gp)
 4418c68:	18801d36 	bltu	r3,r2,4418ce0 <alt_tick+0xd8>
 4418c6c:	e0bffd17 	ldw	r2,-12(fp)
 4418c70:	10800403 	ldbu	r2,16(r2)
 4418c74:	10803fcc 	andi	r2,r2,255
 4418c78:	1000191e 	bne	r2,zero,4418ce0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4418c7c:	e0bffd17 	ldw	r2,-12(fp)
 4418c80:	10800317 	ldw	r2,12(r2)
 4418c84:	e0fffd17 	ldw	r3,-12(fp)
 4418c88:	18c00517 	ldw	r3,20(r3)
 4418c8c:	1809883a 	mov	r4,r3
 4418c90:	103ee83a 	callr	r2
 4418c94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4418c98:	e0bfff17 	ldw	r2,-4(fp)
 4418c9c:	1000031e 	bne	r2,zero,4418cac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4418ca0:	e13ffd17 	ldw	r4,-12(fp)
 4418ca4:	4418b6c0 	call	4418b6c <alt_alarm_stop>
 4418ca8:	00000d06 	br	4418ce0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4418cac:	e0bffd17 	ldw	r2,-12(fp)
 4418cb0:	10c00217 	ldw	r3,8(r2)
 4418cb4:	e0bfff17 	ldw	r2,-4(fp)
 4418cb8:	1887883a 	add	r3,r3,r2
 4418cbc:	e0bffd17 	ldw	r2,-12(fp)
 4418cc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4418cc4:	e0bffd17 	ldw	r2,-12(fp)
 4418cc8:	10c00217 	ldw	r3,8(r2)
 4418ccc:	d0adcd17 	ldw	r2,-18636(gp)
 4418cd0:	1880032e 	bgeu	r3,r2,4418ce0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4418cd4:	e0bffd17 	ldw	r2,-12(fp)
 4418cd8:	00c00044 	movi	r3,1
 4418cdc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4418ce0:	e0bffe17 	ldw	r2,-8(fp)
 4418ce4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4418ce8:	e0fffd17 	ldw	r3,-12(fp)
 4418cec:	d0a01104 	addi	r2,gp,-32700
 4418cf0:	18bfcf1e 	bne	r3,r2,4418c30 <__reset+0xfb414c30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4418cf4:	0001883a 	nop
}
 4418cf8:	0001883a 	nop
 4418cfc:	e037883a 	mov	sp,fp
 4418d00:	dfc00117 	ldw	ra,4(sp)
 4418d04:	df000017 	ldw	fp,0(sp)
 4418d08:	dec00204 	addi	sp,sp,8
 4418d0c:	f800283a 	ret

04418d10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4418d10:	defffd04 	addi	sp,sp,-12
 4418d14:	dfc00215 	stw	ra,8(sp)
 4418d18:	df000115 	stw	fp,4(sp)
 4418d1c:	df000104 	addi	fp,sp,4
 4418d20:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4418d24:	e13fff17 	ldw	r4,-4(fp)
 4418d28:	4419cd80 	call	4419cd8 <alt_busy_sleep>
}
 4418d2c:	e037883a 	mov	sp,fp
 4418d30:	dfc00117 	ldw	ra,4(sp)
 4418d34:	df000017 	ldw	fp,0(sp)
 4418d38:	dec00204 	addi	sp,sp,8
 4418d3c:	f800283a 	ret

04418d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4418d40:	defffe04 	addi	sp,sp,-8
 4418d44:	dfc00115 	stw	ra,4(sp)
 4418d48:	df000015 	stw	fp,0(sp)
 4418d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4418d50:	00811134 	movhi	r2,1092
 4418d54:	10a15a04 	addi	r2,r2,-31384
 4418d58:	10800017 	ldw	r2,0(r2)
 4418d5c:	10000526 	beq	r2,zero,4418d74 <alt_get_errno+0x34>
 4418d60:	00811134 	movhi	r2,1092
 4418d64:	10a15a04 	addi	r2,r2,-31384
 4418d68:	10800017 	ldw	r2,0(r2)
 4418d6c:	103ee83a 	callr	r2
 4418d70:	00000206 	br	4418d7c <alt_get_errno+0x3c>
 4418d74:	00811134 	movhi	r2,1092
 4418d78:	10af1004 	addi	r2,r2,-17344
}
 4418d7c:	e037883a 	mov	sp,fp
 4418d80:	dfc00117 	ldw	ra,4(sp)
 4418d84:	df000017 	ldw	fp,0(sp)
 4418d88:	dec00204 	addi	sp,sp,8
 4418d8c:	f800283a 	ret

04418d90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4418d90:	defff904 	addi	sp,sp,-28
 4418d94:	dfc00615 	stw	ra,24(sp)
 4418d98:	df000515 	stw	fp,20(sp)
 4418d9c:	df000504 	addi	fp,sp,20
 4418da0:	e13ffd15 	stw	r4,-12(fp)
 4418da4:	e17ffe15 	stw	r5,-8(fp)
 4418da8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4418dac:	e0bffd17 	ldw	r2,-12(fp)
 4418db0:	10000616 	blt	r2,zero,4418dcc <write+0x3c>
 4418db4:	e0bffd17 	ldw	r2,-12(fp)
 4418db8:	10c00324 	muli	r3,r2,12
 4418dbc:	008110f4 	movhi	r2,1091
 4418dc0:	109cd404 	addi	r2,r2,29520
 4418dc4:	1885883a 	add	r2,r3,r2
 4418dc8:	00000106 	br	4418dd0 <write+0x40>
 4418dcc:	0005883a 	mov	r2,zero
 4418dd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4418dd4:	e0bffb17 	ldw	r2,-20(fp)
 4418dd8:	10002126 	beq	r2,zero,4418e60 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4418ddc:	e0bffb17 	ldw	r2,-20(fp)
 4418de0:	10800217 	ldw	r2,8(r2)
 4418de4:	108000cc 	andi	r2,r2,3
 4418de8:	10001826 	beq	r2,zero,4418e4c <write+0xbc>
 4418dec:	e0bffb17 	ldw	r2,-20(fp)
 4418df0:	10800017 	ldw	r2,0(r2)
 4418df4:	10800617 	ldw	r2,24(r2)
 4418df8:	10001426 	beq	r2,zero,4418e4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4418dfc:	e0bffb17 	ldw	r2,-20(fp)
 4418e00:	10800017 	ldw	r2,0(r2)
 4418e04:	10800617 	ldw	r2,24(r2)
 4418e08:	e0ffff17 	ldw	r3,-4(fp)
 4418e0c:	180d883a 	mov	r6,r3
 4418e10:	e17ffe17 	ldw	r5,-8(fp)
 4418e14:	e13ffb17 	ldw	r4,-20(fp)
 4418e18:	103ee83a 	callr	r2
 4418e1c:	e0bffc15 	stw	r2,-16(fp)
 4418e20:	e0bffc17 	ldw	r2,-16(fp)
 4418e24:	1000070e 	bge	r2,zero,4418e44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4418e28:	4418d400 	call	4418d40 <alt_get_errno>
 4418e2c:	1007883a 	mov	r3,r2
 4418e30:	e0bffc17 	ldw	r2,-16(fp)
 4418e34:	0085c83a 	sub	r2,zero,r2
 4418e38:	18800015 	stw	r2,0(r3)
        return -1;
 4418e3c:	00bfffc4 	movi	r2,-1
 4418e40:	00000c06 	br	4418e74 <write+0xe4>
      }
      return rval;
 4418e44:	e0bffc17 	ldw	r2,-16(fp)
 4418e48:	00000a06 	br	4418e74 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4418e4c:	4418d400 	call	4418d40 <alt_get_errno>
 4418e50:	1007883a 	mov	r3,r2
 4418e54:	00800344 	movi	r2,13
 4418e58:	18800015 	stw	r2,0(r3)
 4418e5c:	00000406 	br	4418e70 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4418e60:	4418d400 	call	4418d40 <alt_get_errno>
 4418e64:	1007883a 	mov	r3,r2
 4418e68:	00801444 	movi	r2,81
 4418e6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4418e70:	00bfffc4 	movi	r2,-1
}
 4418e74:	e037883a 	mov	sp,fp
 4418e78:	dfc00117 	ldw	ra,4(sp)
 4418e7c:	df000017 	ldw	fp,0(sp)
 4418e80:	dec00204 	addi	sp,sp,8
 4418e84:	f800283a 	ret

04418e88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4418e88:	defffd04 	addi	sp,sp,-12
 4418e8c:	dfc00215 	stw	ra,8(sp)
 4418e90:	df000115 	stw	fp,4(sp)
 4418e94:	df000104 	addi	fp,sp,4
 4418e98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4418e9c:	01411134 	movhi	r5,1092
 4418ea0:	29615704 	addi	r5,r5,-31396
 4418ea4:	e13fff17 	ldw	r4,-4(fp)
 4418ea8:	4419ec80 	call	4419ec8 <alt_dev_llist_insert>
}
 4418eac:	e037883a 	mov	sp,fp
 4418eb0:	dfc00117 	ldw	ra,4(sp)
 4418eb4:	df000017 	ldw	fp,0(sp)
 4418eb8:	dec00204 	addi	sp,sp,8
 4418ebc:	f800283a 	ret

04418ec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4418ec0:	defffd04 	addi	sp,sp,-12
 4418ec4:	dfc00215 	stw	ra,8(sp)
 4418ec8:	df000115 	stw	fp,4(sp)
 4418ecc:	df000104 	addi	fp,sp,4
 4418ed0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 4418ed4:	441a4b00 	call	441a4b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4418ed8:	00800044 	movi	r2,1
 4418edc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4418ee0:	0001883a 	nop
 4418ee4:	e037883a 	mov	sp,fp
 4418ee8:	dfc00117 	ldw	ra,4(sp)
 4418eec:	df000017 	ldw	fp,0(sp)
 4418ef0:	dec00204 	addi	sp,sp,8
 4418ef4:	f800283a 	ret

04418ef8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4418ef8:	defffe04 	addi	sp,sp,-8
 4418efc:	dfc00115 	stw	ra,4(sp)
 4418f00:	df000015 	stw	fp,0(sp)
 4418f04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4418f08:	01c0fa04 	movi	r7,1000
 4418f0c:	000d883a 	mov	r6,zero
 4418f10:	000b883a 	mov	r5,zero
 4418f14:	01020034 	movhi	r4,2048
 4418f18:	21000804 	addi	r4,r4,32
 4418f1c:	4419c4c0 	call	4419c4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4418f20:	01800044 	movi	r6,1
 4418f24:	000b883a 	mov	r5,zero
 4418f28:	010110f4 	movhi	r4,1091
 4418f2c:	211d3e04 	addi	r4,r4,29944
 4418f30:	44190c40 	call	44190c4 <altera_avalon_jtag_uart_init>
 4418f34:	010110f4 	movhi	r4,1091
 4418f38:	211d3404 	addi	r4,r4,29904
 4418f3c:	4418e880 	call	4418e88 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 4418f40:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 4418f44:	0001883a 	nop
}
 4418f48:	0001883a 	nop
 4418f4c:	e037883a 	mov	sp,fp
 4418f50:	dfc00117 	ldw	ra,4(sp)
 4418f54:	df000017 	ldw	fp,0(sp)
 4418f58:	dec00204 	addi	sp,sp,8
 4418f5c:	f800283a 	ret

04418f60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4418f60:	defffa04 	addi	sp,sp,-24
 4418f64:	dfc00515 	stw	ra,20(sp)
 4418f68:	df000415 	stw	fp,16(sp)
 4418f6c:	df000404 	addi	fp,sp,16
 4418f70:	e13ffd15 	stw	r4,-12(fp)
 4418f74:	e17ffe15 	stw	r5,-8(fp)
 4418f78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4418f7c:	e0bffd17 	ldw	r2,-12(fp)
 4418f80:	10800017 	ldw	r2,0(r2)
 4418f84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4418f88:	e0bffc17 	ldw	r2,-16(fp)
 4418f8c:	10c00a04 	addi	r3,r2,40
 4418f90:	e0bffd17 	ldw	r2,-12(fp)
 4418f94:	10800217 	ldw	r2,8(r2)
 4418f98:	100f883a 	mov	r7,r2
 4418f9c:	e1bfff17 	ldw	r6,-4(fp)
 4418fa0:	e17ffe17 	ldw	r5,-8(fp)
 4418fa4:	1809883a 	mov	r4,r3
 4418fa8:	44195980 	call	4419598 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4418fac:	e037883a 	mov	sp,fp
 4418fb0:	dfc00117 	ldw	ra,4(sp)
 4418fb4:	df000017 	ldw	fp,0(sp)
 4418fb8:	dec00204 	addi	sp,sp,8
 4418fbc:	f800283a 	ret

04418fc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4418fc0:	defffa04 	addi	sp,sp,-24
 4418fc4:	dfc00515 	stw	ra,20(sp)
 4418fc8:	df000415 	stw	fp,16(sp)
 4418fcc:	df000404 	addi	fp,sp,16
 4418fd0:	e13ffd15 	stw	r4,-12(fp)
 4418fd4:	e17ffe15 	stw	r5,-8(fp)
 4418fd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4418fdc:	e0bffd17 	ldw	r2,-12(fp)
 4418fe0:	10800017 	ldw	r2,0(r2)
 4418fe4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4418fe8:	e0bffc17 	ldw	r2,-16(fp)
 4418fec:	10c00a04 	addi	r3,r2,40
 4418ff0:	e0bffd17 	ldw	r2,-12(fp)
 4418ff4:	10800217 	ldw	r2,8(r2)
 4418ff8:	100f883a 	mov	r7,r2
 4418ffc:	e1bfff17 	ldw	r6,-4(fp)
 4419000:	e17ffe17 	ldw	r5,-8(fp)
 4419004:	1809883a 	mov	r4,r3
 4419008:	44197b40 	call	44197b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 441900c:	e037883a 	mov	sp,fp
 4419010:	dfc00117 	ldw	ra,4(sp)
 4419014:	df000017 	ldw	fp,0(sp)
 4419018:	dec00204 	addi	sp,sp,8
 441901c:	f800283a 	ret

04419020 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4419020:	defffc04 	addi	sp,sp,-16
 4419024:	dfc00315 	stw	ra,12(sp)
 4419028:	df000215 	stw	fp,8(sp)
 441902c:	df000204 	addi	fp,sp,8
 4419030:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4419034:	e0bfff17 	ldw	r2,-4(fp)
 4419038:	10800017 	ldw	r2,0(r2)
 441903c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4419040:	e0bffe17 	ldw	r2,-8(fp)
 4419044:	10c00a04 	addi	r3,r2,40
 4419048:	e0bfff17 	ldw	r2,-4(fp)
 441904c:	10800217 	ldw	r2,8(r2)
 4419050:	100b883a 	mov	r5,r2
 4419054:	1809883a 	mov	r4,r3
 4419058:	44194400 	call	4419440 <altera_avalon_jtag_uart_close>
}
 441905c:	e037883a 	mov	sp,fp
 4419060:	dfc00117 	ldw	ra,4(sp)
 4419064:	df000017 	ldw	fp,0(sp)
 4419068:	dec00204 	addi	sp,sp,8
 441906c:	f800283a 	ret

04419070 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4419070:	defffa04 	addi	sp,sp,-24
 4419074:	dfc00515 	stw	ra,20(sp)
 4419078:	df000415 	stw	fp,16(sp)
 441907c:	df000404 	addi	fp,sp,16
 4419080:	e13ffd15 	stw	r4,-12(fp)
 4419084:	e17ffe15 	stw	r5,-8(fp)
 4419088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 441908c:	e0bffd17 	ldw	r2,-12(fp)
 4419090:	10800017 	ldw	r2,0(r2)
 4419094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4419098:	e0bffc17 	ldw	r2,-16(fp)
 441909c:	10800a04 	addi	r2,r2,40
 44190a0:	e1bfff17 	ldw	r6,-4(fp)
 44190a4:	e17ffe17 	ldw	r5,-8(fp)
 44190a8:	1009883a 	mov	r4,r2
 44190ac:	44194a80 	call	44194a8 <altera_avalon_jtag_uart_ioctl>
}
 44190b0:	e037883a 	mov	sp,fp
 44190b4:	dfc00117 	ldw	ra,4(sp)
 44190b8:	df000017 	ldw	fp,0(sp)
 44190bc:	dec00204 	addi	sp,sp,8
 44190c0:	f800283a 	ret

044190c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 44190c4:	defffa04 	addi	sp,sp,-24
 44190c8:	dfc00515 	stw	ra,20(sp)
 44190cc:	df000415 	stw	fp,16(sp)
 44190d0:	df000404 	addi	fp,sp,16
 44190d4:	e13ffd15 	stw	r4,-12(fp)
 44190d8:	e17ffe15 	stw	r5,-8(fp)
 44190dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 44190e0:	e0bffd17 	ldw	r2,-12(fp)
 44190e4:	00c00044 	movi	r3,1
 44190e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 44190ec:	e0bffd17 	ldw	r2,-12(fp)
 44190f0:	10800017 	ldw	r2,0(r2)
 44190f4:	10800104 	addi	r2,r2,4
 44190f8:	1007883a 	mov	r3,r2
 44190fc:	e0bffd17 	ldw	r2,-12(fp)
 4419100:	10800817 	ldw	r2,32(r2)
 4419104:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4419108:	e0bffe17 	ldw	r2,-8(fp)
 441910c:	e0ffff17 	ldw	r3,-4(fp)
 4419110:	d8000015 	stw	zero,0(sp)
 4419114:	e1fffd17 	ldw	r7,-12(fp)
 4419118:	018110b4 	movhi	r6,1090
 441911c:	31a46304 	addi	r6,r6,-28276
 4419120:	180b883a 	mov	r5,r3
 4419124:	1009883a 	mov	r4,r2
 4419128:	44182740 	call	4418274 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 441912c:	e0bffd17 	ldw	r2,-12(fp)
 4419130:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4419134:	e0bffd17 	ldw	r2,-12(fp)
 4419138:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 441913c:	00811134 	movhi	r2,1092
 4419140:	10af1804 	addi	r2,r2,-17312
 4419144:	10800017 	ldw	r2,0(r2)
 4419148:	e1fffd17 	ldw	r7,-12(fp)
 441914c:	018110b4 	movhi	r6,1090
 4419150:	31a4e604 	addi	r6,r6,-27752
 4419154:	100b883a 	mov	r5,r2
 4419158:	1809883a 	mov	r4,r3
 441915c:	4417ee80 	call	4417ee8 <alt_alarm_start>
 4419160:	1000040e 	bge	r2,zero,4419174 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4419164:	e0fffd17 	ldw	r3,-12(fp)
 4419168:	00a00034 	movhi	r2,32768
 441916c:	10bfffc4 	addi	r2,r2,-1
 4419170:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4419174:	0001883a 	nop
 4419178:	e037883a 	mov	sp,fp
 441917c:	dfc00117 	ldw	ra,4(sp)
 4419180:	df000017 	ldw	fp,0(sp)
 4419184:	dec00204 	addi	sp,sp,8
 4419188:	f800283a 	ret

0441918c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 441918c:	defff804 	addi	sp,sp,-32
 4419190:	df000715 	stw	fp,28(sp)
 4419194:	df000704 	addi	fp,sp,28
 4419198:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 441919c:	e0bfff17 	ldw	r2,-4(fp)
 44191a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 44191a4:	e0bffb17 	ldw	r2,-20(fp)
 44191a8:	10800017 	ldw	r2,0(r2)
 44191ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 44191b0:	e0bffc17 	ldw	r2,-16(fp)
 44191b4:	10800104 	addi	r2,r2,4
 44191b8:	10800037 	ldwio	r2,0(r2)
 44191bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 44191c0:	e0bffd17 	ldw	r2,-12(fp)
 44191c4:	1080c00c 	andi	r2,r2,768
 44191c8:	10006d26 	beq	r2,zero,4419380 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 44191cc:	e0bffd17 	ldw	r2,-12(fp)
 44191d0:	1080400c 	andi	r2,r2,256
 44191d4:	10003526 	beq	r2,zero,44192ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 44191d8:	00800074 	movhi	r2,1
 44191dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 44191e0:	e0bffb17 	ldw	r2,-20(fp)
 44191e4:	10800a17 	ldw	r2,40(r2)
 44191e8:	10800044 	addi	r2,r2,1
 44191ec:	1081ffcc 	andi	r2,r2,2047
 44191f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 44191f4:	e0bffb17 	ldw	r2,-20(fp)
 44191f8:	10c00b17 	ldw	r3,44(r2)
 44191fc:	e0bffe17 	ldw	r2,-8(fp)
 4419200:	18801526 	beq	r3,r2,4419258 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4419204:	e0bffc17 	ldw	r2,-16(fp)
 4419208:	10800037 	ldwio	r2,0(r2)
 441920c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4419210:	e0bff917 	ldw	r2,-28(fp)
 4419214:	10a0000c 	andi	r2,r2,32768
 4419218:	10001126 	beq	r2,zero,4419260 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 441921c:	e0bffb17 	ldw	r2,-20(fp)
 4419220:	10800a17 	ldw	r2,40(r2)
 4419224:	e0fff917 	ldw	r3,-28(fp)
 4419228:	1809883a 	mov	r4,r3
 441922c:	e0fffb17 	ldw	r3,-20(fp)
 4419230:	1885883a 	add	r2,r3,r2
 4419234:	10800e04 	addi	r2,r2,56
 4419238:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 441923c:	e0bffb17 	ldw	r2,-20(fp)
 4419240:	10800a17 	ldw	r2,40(r2)
 4419244:	10800044 	addi	r2,r2,1
 4419248:	10c1ffcc 	andi	r3,r2,2047
 441924c:	e0bffb17 	ldw	r2,-20(fp)
 4419250:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4419254:	003fe206 	br	44191e0 <__reset+0xfb4151e0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4419258:	0001883a 	nop
 441925c:	00000106 	br	4419264 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4419260:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4419264:	e0bff917 	ldw	r2,-28(fp)
 4419268:	10bfffec 	andhi	r2,r2,65535
 441926c:	10000f26 	beq	r2,zero,44192ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4419270:	e0bffb17 	ldw	r2,-20(fp)
 4419274:	10c00817 	ldw	r3,32(r2)
 4419278:	00bfff84 	movi	r2,-2
 441927c:	1886703a 	and	r3,r3,r2
 4419280:	e0bffb17 	ldw	r2,-20(fp)
 4419284:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4419288:	e0bffc17 	ldw	r2,-16(fp)
 441928c:	10800104 	addi	r2,r2,4
 4419290:	1007883a 	mov	r3,r2
 4419294:	e0bffb17 	ldw	r2,-20(fp)
 4419298:	10800817 	ldw	r2,32(r2)
 441929c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 44192a0:	e0bffc17 	ldw	r2,-16(fp)
 44192a4:	10800104 	addi	r2,r2,4
 44192a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 44192ac:	e0bffd17 	ldw	r2,-12(fp)
 44192b0:	1080800c 	andi	r2,r2,512
 44192b4:	103fbe26 	beq	r2,zero,44191b0 <__reset+0xfb4151b0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 44192b8:	e0bffd17 	ldw	r2,-12(fp)
 44192bc:	1004d43a 	srli	r2,r2,16
 44192c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 44192c4:	00001406 	br	4419318 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 44192c8:	e0bffc17 	ldw	r2,-16(fp)
 44192cc:	e0fffb17 	ldw	r3,-20(fp)
 44192d0:	18c00d17 	ldw	r3,52(r3)
 44192d4:	e13ffb17 	ldw	r4,-20(fp)
 44192d8:	20c7883a 	add	r3,r4,r3
 44192dc:	18c20e04 	addi	r3,r3,2104
 44192e0:	18c00003 	ldbu	r3,0(r3)
 44192e4:	18c03fcc 	andi	r3,r3,255
 44192e8:	18c0201c 	xori	r3,r3,128
 44192ec:	18ffe004 	addi	r3,r3,-128
 44192f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 44192f4:	e0bffb17 	ldw	r2,-20(fp)
 44192f8:	10800d17 	ldw	r2,52(r2)
 44192fc:	10800044 	addi	r2,r2,1
 4419300:	10c1ffcc 	andi	r3,r2,2047
 4419304:	e0bffb17 	ldw	r2,-20(fp)
 4419308:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 441930c:	e0bffa17 	ldw	r2,-24(fp)
 4419310:	10bfffc4 	addi	r2,r2,-1
 4419314:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4419318:	e0bffa17 	ldw	r2,-24(fp)
 441931c:	10000526 	beq	r2,zero,4419334 <altera_avalon_jtag_uart_irq+0x1a8>
 4419320:	e0bffb17 	ldw	r2,-20(fp)
 4419324:	10c00d17 	ldw	r3,52(r2)
 4419328:	e0bffb17 	ldw	r2,-20(fp)
 441932c:	10800c17 	ldw	r2,48(r2)
 4419330:	18bfe51e 	bne	r3,r2,44192c8 <__reset+0xfb4152c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4419334:	e0bffa17 	ldw	r2,-24(fp)
 4419338:	103f9d26 	beq	r2,zero,44191b0 <__reset+0xfb4151b0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 441933c:	e0bffb17 	ldw	r2,-20(fp)
 4419340:	10c00817 	ldw	r3,32(r2)
 4419344:	00bfff44 	movi	r2,-3
 4419348:	1886703a 	and	r3,r3,r2
 441934c:	e0bffb17 	ldw	r2,-20(fp)
 4419350:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4419354:	e0bffb17 	ldw	r2,-20(fp)
 4419358:	10800017 	ldw	r2,0(r2)
 441935c:	10800104 	addi	r2,r2,4
 4419360:	1007883a 	mov	r3,r2
 4419364:	e0bffb17 	ldw	r2,-20(fp)
 4419368:	10800817 	ldw	r2,32(r2)
 441936c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4419370:	e0bffc17 	ldw	r2,-16(fp)
 4419374:	10800104 	addi	r2,r2,4
 4419378:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 441937c:	003f8c06 	br	44191b0 <__reset+0xfb4151b0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4419380:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4419384:	0001883a 	nop
 4419388:	e037883a 	mov	sp,fp
 441938c:	df000017 	ldw	fp,0(sp)
 4419390:	dec00104 	addi	sp,sp,4
 4419394:	f800283a 	ret

04419398 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4419398:	defff804 	addi	sp,sp,-32
 441939c:	df000715 	stw	fp,28(sp)
 44193a0:	df000704 	addi	fp,sp,28
 44193a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 44193a8:	e0bffb17 	ldw	r2,-20(fp)
 44193ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 44193b0:	e0bff917 	ldw	r2,-28(fp)
 44193b4:	10800017 	ldw	r2,0(r2)
 44193b8:	10800104 	addi	r2,r2,4
 44193bc:	10800037 	ldwio	r2,0(r2)
 44193c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 44193c4:	e0bffa17 	ldw	r2,-24(fp)
 44193c8:	1081000c 	andi	r2,r2,1024
 44193cc:	10000b26 	beq	r2,zero,44193fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 44193d0:	e0bff917 	ldw	r2,-28(fp)
 44193d4:	10800017 	ldw	r2,0(r2)
 44193d8:	10800104 	addi	r2,r2,4
 44193dc:	1007883a 	mov	r3,r2
 44193e0:	e0bff917 	ldw	r2,-28(fp)
 44193e4:	10800817 	ldw	r2,32(r2)
 44193e8:	10810014 	ori	r2,r2,1024
 44193ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 44193f0:	e0bff917 	ldw	r2,-28(fp)
 44193f4:	10000915 	stw	zero,36(r2)
 44193f8:	00000a06 	br	4419424 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 44193fc:	e0bff917 	ldw	r2,-28(fp)
 4419400:	10c00917 	ldw	r3,36(r2)
 4419404:	00a00034 	movhi	r2,32768
 4419408:	10bfff04 	addi	r2,r2,-4
 441940c:	10c00536 	bltu	r2,r3,4419424 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4419410:	e0bff917 	ldw	r2,-28(fp)
 4419414:	10800917 	ldw	r2,36(r2)
 4419418:	10c00044 	addi	r3,r2,1
 441941c:	e0bff917 	ldw	r2,-28(fp)
 4419420:	10c00915 	stw	r3,36(r2)
 4419424:	00811134 	movhi	r2,1092
 4419428:	10af1804 	addi	r2,r2,-17312
 441942c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4419430:	e037883a 	mov	sp,fp
 4419434:	df000017 	ldw	fp,0(sp)
 4419438:	dec00104 	addi	sp,sp,4
 441943c:	f800283a 	ret

04419440 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4419440:	defffd04 	addi	sp,sp,-12
 4419444:	df000215 	stw	fp,8(sp)
 4419448:	df000204 	addi	fp,sp,8
 441944c:	e13ffe15 	stw	r4,-8(fp)
 4419450:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4419454:	00000506 	br	441946c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4419458:	e0bfff17 	ldw	r2,-4(fp)
 441945c:	1090000c 	andi	r2,r2,16384
 4419460:	10000226 	beq	r2,zero,441946c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4419464:	00bffd44 	movi	r2,-11
 4419468:	00000b06 	br	4419498 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 441946c:	e0bffe17 	ldw	r2,-8(fp)
 4419470:	10c00d17 	ldw	r3,52(r2)
 4419474:	e0bffe17 	ldw	r2,-8(fp)
 4419478:	10800c17 	ldw	r2,48(r2)
 441947c:	18800526 	beq	r3,r2,4419494 <altera_avalon_jtag_uart_close+0x54>
 4419480:	e0bffe17 	ldw	r2,-8(fp)
 4419484:	10c00917 	ldw	r3,36(r2)
 4419488:	e0bffe17 	ldw	r2,-8(fp)
 441948c:	10800117 	ldw	r2,4(r2)
 4419490:	18bff136 	bltu	r3,r2,4419458 <__reset+0xfb415458>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4419494:	0005883a 	mov	r2,zero
}
 4419498:	e037883a 	mov	sp,fp
 441949c:	df000017 	ldw	fp,0(sp)
 44194a0:	dec00104 	addi	sp,sp,4
 44194a4:	f800283a 	ret

044194a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 44194a8:	defffa04 	addi	sp,sp,-24
 44194ac:	df000515 	stw	fp,20(sp)
 44194b0:	df000504 	addi	fp,sp,20
 44194b4:	e13ffd15 	stw	r4,-12(fp)
 44194b8:	e17ffe15 	stw	r5,-8(fp)
 44194bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 44194c0:	00bff9c4 	movi	r2,-25
 44194c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 44194c8:	e0bffe17 	ldw	r2,-8(fp)
 44194cc:	10da8060 	cmpeqi	r3,r2,27137
 44194d0:	1800031e 	bne	r3,zero,44194e0 <altera_avalon_jtag_uart_ioctl+0x38>
 44194d4:	109a80a0 	cmpeqi	r2,r2,27138
 44194d8:	1000181e 	bne	r2,zero,441953c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 44194dc:	00002906 	br	4419584 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 44194e0:	e0bffd17 	ldw	r2,-12(fp)
 44194e4:	10c00117 	ldw	r3,4(r2)
 44194e8:	00a00034 	movhi	r2,32768
 44194ec:	10bfffc4 	addi	r2,r2,-1
 44194f0:	18802126 	beq	r3,r2,4419578 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 44194f4:	e0bfff17 	ldw	r2,-4(fp)
 44194f8:	10800017 	ldw	r2,0(r2)
 44194fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4419500:	e0bffc17 	ldw	r2,-16(fp)
 4419504:	10800090 	cmplti	r2,r2,2
 4419508:	1000061e 	bne	r2,zero,4419524 <altera_avalon_jtag_uart_ioctl+0x7c>
 441950c:	e0fffc17 	ldw	r3,-16(fp)
 4419510:	00a00034 	movhi	r2,32768
 4419514:	10bfffc4 	addi	r2,r2,-1
 4419518:	18800226 	beq	r3,r2,4419524 <altera_avalon_jtag_uart_ioctl+0x7c>
 441951c:	e0bffc17 	ldw	r2,-16(fp)
 4419520:	00000206 	br	441952c <altera_avalon_jtag_uart_ioctl+0x84>
 4419524:	00a00034 	movhi	r2,32768
 4419528:	10bfff84 	addi	r2,r2,-2
 441952c:	e0fffd17 	ldw	r3,-12(fp)
 4419530:	18800115 	stw	r2,4(r3)
      rc = 0;
 4419534:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4419538:	00000f06 	br	4419578 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 441953c:	e0bffd17 	ldw	r2,-12(fp)
 4419540:	10c00117 	ldw	r3,4(r2)
 4419544:	00a00034 	movhi	r2,32768
 4419548:	10bfffc4 	addi	r2,r2,-1
 441954c:	18800c26 	beq	r3,r2,4419580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4419550:	e0bffd17 	ldw	r2,-12(fp)
 4419554:	10c00917 	ldw	r3,36(r2)
 4419558:	e0bffd17 	ldw	r2,-12(fp)
 441955c:	10800117 	ldw	r2,4(r2)
 4419560:	1885803a 	cmpltu	r2,r3,r2
 4419564:	10c03fcc 	andi	r3,r2,255
 4419568:	e0bfff17 	ldw	r2,-4(fp)
 441956c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4419570:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4419574:	00000206 	br	4419580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4419578:	0001883a 	nop
 441957c:	00000106 	br	4419584 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4419580:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4419584:	e0bffb17 	ldw	r2,-20(fp)
}
 4419588:	e037883a 	mov	sp,fp
 441958c:	df000017 	ldw	fp,0(sp)
 4419590:	dec00104 	addi	sp,sp,4
 4419594:	f800283a 	ret

04419598 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4419598:	defff304 	addi	sp,sp,-52
 441959c:	dfc00c15 	stw	ra,48(sp)
 44195a0:	df000b15 	stw	fp,44(sp)
 44195a4:	df000b04 	addi	fp,sp,44
 44195a8:	e13ffc15 	stw	r4,-16(fp)
 44195ac:	e17ffd15 	stw	r5,-12(fp)
 44195b0:	e1bffe15 	stw	r6,-8(fp)
 44195b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 44195b8:	e0bffd17 	ldw	r2,-12(fp)
 44195bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 44195c0:	00004706 	br	44196e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 44195c4:	e0bffc17 	ldw	r2,-16(fp)
 44195c8:	10800a17 	ldw	r2,40(r2)
 44195cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 44195d0:	e0bffc17 	ldw	r2,-16(fp)
 44195d4:	10800b17 	ldw	r2,44(r2)
 44195d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 44195dc:	e0fff717 	ldw	r3,-36(fp)
 44195e0:	e0bff817 	ldw	r2,-32(fp)
 44195e4:	18800536 	bltu	r3,r2,44195fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 44195e8:	e0fff717 	ldw	r3,-36(fp)
 44195ec:	e0bff817 	ldw	r2,-32(fp)
 44195f0:	1885c83a 	sub	r2,r3,r2
 44195f4:	e0bff615 	stw	r2,-40(fp)
 44195f8:	00000406 	br	441960c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 44195fc:	00c20004 	movi	r3,2048
 4419600:	e0bff817 	ldw	r2,-32(fp)
 4419604:	1885c83a 	sub	r2,r3,r2
 4419608:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 441960c:	e0bff617 	ldw	r2,-40(fp)
 4419610:	10001e26 	beq	r2,zero,441968c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4419614:	e0fffe17 	ldw	r3,-8(fp)
 4419618:	e0bff617 	ldw	r2,-40(fp)
 441961c:	1880022e 	bgeu	r3,r2,4419628 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4419620:	e0bffe17 	ldw	r2,-8(fp)
 4419624:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4419628:	e0bffc17 	ldw	r2,-16(fp)
 441962c:	10c00e04 	addi	r3,r2,56
 4419630:	e0bff817 	ldw	r2,-32(fp)
 4419634:	1885883a 	add	r2,r3,r2
 4419638:	e1bff617 	ldw	r6,-40(fp)
 441963c:	100b883a 	mov	r5,r2
 4419640:	e13ff517 	ldw	r4,-44(fp)
 4419644:	440abfc0 	call	440abfc <memcpy>
      ptr   += n;
 4419648:	e0fff517 	ldw	r3,-44(fp)
 441964c:	e0bff617 	ldw	r2,-40(fp)
 4419650:	1885883a 	add	r2,r3,r2
 4419654:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4419658:	e0fffe17 	ldw	r3,-8(fp)
 441965c:	e0bff617 	ldw	r2,-40(fp)
 4419660:	1885c83a 	sub	r2,r3,r2
 4419664:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4419668:	e0fff817 	ldw	r3,-32(fp)
 441966c:	e0bff617 	ldw	r2,-40(fp)
 4419670:	1885883a 	add	r2,r3,r2
 4419674:	10c1ffcc 	andi	r3,r2,2047
 4419678:	e0bffc17 	ldw	r2,-16(fp)
 441967c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4419680:	e0bffe17 	ldw	r2,-8(fp)
 4419684:	00bfcf16 	blt	zero,r2,44195c4 <__reset+0xfb4155c4>
 4419688:	00000106 	br	4419690 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 441968c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4419690:	e0fff517 	ldw	r3,-44(fp)
 4419694:	e0bffd17 	ldw	r2,-12(fp)
 4419698:	1880141e 	bne	r3,r2,44196ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 441969c:	e0bfff17 	ldw	r2,-4(fp)
 44196a0:	1090000c 	andi	r2,r2,16384
 44196a4:	1000131e 	bne	r2,zero,44196f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 44196a8:	0001883a 	nop
 44196ac:	e0bffc17 	ldw	r2,-16(fp)
 44196b0:	10c00a17 	ldw	r3,40(r2)
 44196b4:	e0bff717 	ldw	r2,-36(fp)
 44196b8:	1880051e 	bne	r3,r2,44196d0 <altera_avalon_jtag_uart_read+0x138>
 44196bc:	e0bffc17 	ldw	r2,-16(fp)
 44196c0:	10c00917 	ldw	r3,36(r2)
 44196c4:	e0bffc17 	ldw	r2,-16(fp)
 44196c8:	10800117 	ldw	r2,4(r2)
 44196cc:	18bff736 	bltu	r3,r2,44196ac <__reset+0xfb4156ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 44196d0:	e0bffc17 	ldw	r2,-16(fp)
 44196d4:	10c00a17 	ldw	r3,40(r2)
 44196d8:	e0bff717 	ldw	r2,-36(fp)
 44196dc:	18800726 	beq	r3,r2,44196fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 44196e0:	e0bffe17 	ldw	r2,-8(fp)
 44196e4:	00bfb716 	blt	zero,r2,44195c4 <__reset+0xfb4155c4>
 44196e8:	00000506 	br	4419700 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 44196ec:	0001883a 	nop
 44196f0:	00000306 	br	4419700 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 44196f4:	0001883a 	nop
 44196f8:	00000106 	br	4419700 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 44196fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4419700:	e0fff517 	ldw	r3,-44(fp)
 4419704:	e0bffd17 	ldw	r2,-12(fp)
 4419708:	18801826 	beq	r3,r2,441976c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 441970c:	0005303a 	rdctl	r2,status
 4419710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4419714:	e0fffb17 	ldw	r3,-20(fp)
 4419718:	00bfff84 	movi	r2,-2
 441971c:	1884703a 	and	r2,r3,r2
 4419720:	1001703a 	wrctl	status,r2
  
  return context;
 4419724:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4419728:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 441972c:	e0bffc17 	ldw	r2,-16(fp)
 4419730:	10800817 	ldw	r2,32(r2)
 4419734:	10c00054 	ori	r3,r2,1
 4419738:	e0bffc17 	ldw	r2,-16(fp)
 441973c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4419740:	e0bffc17 	ldw	r2,-16(fp)
 4419744:	10800017 	ldw	r2,0(r2)
 4419748:	10800104 	addi	r2,r2,4
 441974c:	1007883a 	mov	r3,r2
 4419750:	e0bffc17 	ldw	r2,-16(fp)
 4419754:	10800817 	ldw	r2,32(r2)
 4419758:	18800035 	stwio	r2,0(r3)
 441975c:	e0bffa17 	ldw	r2,-24(fp)
 4419760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4419764:	e0bff917 	ldw	r2,-28(fp)
 4419768:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 441976c:	e0fff517 	ldw	r3,-44(fp)
 4419770:	e0bffd17 	ldw	r2,-12(fp)
 4419774:	18800426 	beq	r3,r2,4419788 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4419778:	e0fff517 	ldw	r3,-44(fp)
 441977c:	e0bffd17 	ldw	r2,-12(fp)
 4419780:	1885c83a 	sub	r2,r3,r2
 4419784:	00000606 	br	44197a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4419788:	e0bfff17 	ldw	r2,-4(fp)
 441978c:	1090000c 	andi	r2,r2,16384
 4419790:	10000226 	beq	r2,zero,441979c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4419794:	00bffd44 	movi	r2,-11
 4419798:	00000106 	br	44197a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 441979c:	00bffec4 	movi	r2,-5
}
 44197a0:	e037883a 	mov	sp,fp
 44197a4:	dfc00117 	ldw	ra,4(sp)
 44197a8:	df000017 	ldw	fp,0(sp)
 44197ac:	dec00204 	addi	sp,sp,8
 44197b0:	f800283a 	ret

044197b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 44197b4:	defff304 	addi	sp,sp,-52
 44197b8:	dfc00c15 	stw	ra,48(sp)
 44197bc:	df000b15 	stw	fp,44(sp)
 44197c0:	df000b04 	addi	fp,sp,44
 44197c4:	e13ffc15 	stw	r4,-16(fp)
 44197c8:	e17ffd15 	stw	r5,-12(fp)
 44197cc:	e1bffe15 	stw	r6,-8(fp)
 44197d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 44197d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 44197d8:	e0bffd17 	ldw	r2,-12(fp)
 44197dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 44197e0:	00003706 	br	44198c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 44197e4:	e0bffc17 	ldw	r2,-16(fp)
 44197e8:	10800c17 	ldw	r2,48(r2)
 44197ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 44197f0:	e0bffc17 	ldw	r2,-16(fp)
 44197f4:	10800d17 	ldw	r2,52(r2)
 44197f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 44197fc:	e0fff917 	ldw	r3,-28(fp)
 4419800:	e0bff517 	ldw	r2,-44(fp)
 4419804:	1880062e 	bgeu	r3,r2,4419820 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4419808:	e0fff517 	ldw	r3,-44(fp)
 441980c:	e0bff917 	ldw	r2,-28(fp)
 4419810:	1885c83a 	sub	r2,r3,r2
 4419814:	10bfffc4 	addi	r2,r2,-1
 4419818:	e0bff615 	stw	r2,-40(fp)
 441981c:	00000b06 	br	441984c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4419820:	e0bff517 	ldw	r2,-44(fp)
 4419824:	10000526 	beq	r2,zero,441983c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4419828:	00c20004 	movi	r3,2048
 441982c:	e0bff917 	ldw	r2,-28(fp)
 4419830:	1885c83a 	sub	r2,r3,r2
 4419834:	e0bff615 	stw	r2,-40(fp)
 4419838:	00000406 	br	441984c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 441983c:	00c1ffc4 	movi	r3,2047
 4419840:	e0bff917 	ldw	r2,-28(fp)
 4419844:	1885c83a 	sub	r2,r3,r2
 4419848:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 441984c:	e0bff617 	ldw	r2,-40(fp)
 4419850:	10001e26 	beq	r2,zero,44198cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4419854:	e0fffe17 	ldw	r3,-8(fp)
 4419858:	e0bff617 	ldw	r2,-40(fp)
 441985c:	1880022e 	bgeu	r3,r2,4419868 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4419860:	e0bffe17 	ldw	r2,-8(fp)
 4419864:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4419868:	e0bffc17 	ldw	r2,-16(fp)
 441986c:	10c20e04 	addi	r3,r2,2104
 4419870:	e0bff917 	ldw	r2,-28(fp)
 4419874:	1885883a 	add	r2,r3,r2
 4419878:	e1bff617 	ldw	r6,-40(fp)
 441987c:	e17ffd17 	ldw	r5,-12(fp)
 4419880:	1009883a 	mov	r4,r2
 4419884:	440abfc0 	call	440abfc <memcpy>
      ptr   += n;
 4419888:	e0fffd17 	ldw	r3,-12(fp)
 441988c:	e0bff617 	ldw	r2,-40(fp)
 4419890:	1885883a 	add	r2,r3,r2
 4419894:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4419898:	e0fffe17 	ldw	r3,-8(fp)
 441989c:	e0bff617 	ldw	r2,-40(fp)
 44198a0:	1885c83a 	sub	r2,r3,r2
 44198a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 44198a8:	e0fff917 	ldw	r3,-28(fp)
 44198ac:	e0bff617 	ldw	r2,-40(fp)
 44198b0:	1885883a 	add	r2,r3,r2
 44198b4:	10c1ffcc 	andi	r3,r2,2047
 44198b8:	e0bffc17 	ldw	r2,-16(fp)
 44198bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 44198c0:	e0bffe17 	ldw	r2,-8(fp)
 44198c4:	00bfc716 	blt	zero,r2,44197e4 <__reset+0xfb4157e4>
 44198c8:	00000106 	br	44198d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 44198cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 44198d0:	0005303a 	rdctl	r2,status
 44198d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 44198d8:	e0fffb17 	ldw	r3,-20(fp)
 44198dc:	00bfff84 	movi	r2,-2
 44198e0:	1884703a 	and	r2,r3,r2
 44198e4:	1001703a 	wrctl	status,r2
  
  return context;
 44198e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 44198ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 44198f0:	e0bffc17 	ldw	r2,-16(fp)
 44198f4:	10800817 	ldw	r2,32(r2)
 44198f8:	10c00094 	ori	r3,r2,2
 44198fc:	e0bffc17 	ldw	r2,-16(fp)
 4419900:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4419904:	e0bffc17 	ldw	r2,-16(fp)
 4419908:	10800017 	ldw	r2,0(r2)
 441990c:	10800104 	addi	r2,r2,4
 4419910:	1007883a 	mov	r3,r2
 4419914:	e0bffc17 	ldw	r2,-16(fp)
 4419918:	10800817 	ldw	r2,32(r2)
 441991c:	18800035 	stwio	r2,0(r3)
 4419920:	e0bffa17 	ldw	r2,-24(fp)
 4419924:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4419928:	e0bff817 	ldw	r2,-32(fp)
 441992c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4419930:	e0bffe17 	ldw	r2,-8(fp)
 4419934:	0080100e 	bge	zero,r2,4419978 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4419938:	e0bfff17 	ldw	r2,-4(fp)
 441993c:	1090000c 	andi	r2,r2,16384
 4419940:	1000101e 	bne	r2,zero,4419984 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4419944:	0001883a 	nop
 4419948:	e0bffc17 	ldw	r2,-16(fp)
 441994c:	10c00d17 	ldw	r3,52(r2)
 4419950:	e0bff517 	ldw	r2,-44(fp)
 4419954:	1880051e 	bne	r3,r2,441996c <altera_avalon_jtag_uart_write+0x1b8>
 4419958:	e0bffc17 	ldw	r2,-16(fp)
 441995c:	10c00917 	ldw	r3,36(r2)
 4419960:	e0bffc17 	ldw	r2,-16(fp)
 4419964:	10800117 	ldw	r2,4(r2)
 4419968:	18bff736 	bltu	r3,r2,4419948 <__reset+0xfb415948>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 441996c:	e0bffc17 	ldw	r2,-16(fp)
 4419970:	10800917 	ldw	r2,36(r2)
 4419974:	1000051e 	bne	r2,zero,441998c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4419978:	e0bffe17 	ldw	r2,-8(fp)
 441997c:	00bfd016 	blt	zero,r2,44198c0 <__reset+0xfb4158c0>
 4419980:	00000306 	br	4419990 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4419984:	0001883a 	nop
 4419988:	00000106 	br	4419990 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 441998c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4419990:	e0fffd17 	ldw	r3,-12(fp)
 4419994:	e0bff717 	ldw	r2,-36(fp)
 4419998:	18800426 	beq	r3,r2,44199ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 441999c:	e0fffd17 	ldw	r3,-12(fp)
 44199a0:	e0bff717 	ldw	r2,-36(fp)
 44199a4:	1885c83a 	sub	r2,r3,r2
 44199a8:	00000606 	br	44199c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 44199ac:	e0bfff17 	ldw	r2,-4(fp)
 44199b0:	1090000c 	andi	r2,r2,16384
 44199b4:	10000226 	beq	r2,zero,44199c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 44199b8:	00bffd44 	movi	r2,-11
 44199bc:	00000106 	br	44199c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 44199c0:	00bffec4 	movi	r2,-5
}
 44199c4:	e037883a 	mov	sp,fp
 44199c8:	dfc00117 	ldw	ra,4(sp)
 44199cc:	df000017 	ldw	fp,0(sp)
 44199d0:	dec00204 	addi	sp,sp,8
 44199d4:	f800283a 	ret

044199d8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 44199d8:	defff404 	addi	sp,sp,-48
 44199dc:	df000b15 	stw	fp,44(sp)
 44199e0:	df000b04 	addi	fp,sp,44
 44199e4:	e13ffc15 	stw	r4,-16(fp)
 44199e8:	e17ffd15 	stw	r5,-12(fp)
 44199ec:	e1bffe15 	stw	r6,-8(fp)
 44199f0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 44199f4:	e0ffff17 	ldw	r3,-4(fp)
 44199f8:	e0bffe17 	ldw	r2,-8(fp)
 44199fc:	1885883a 	add	r2,r3,r2
 4419a00:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4419a04:	e0c00217 	ldw	r3,8(fp)
 4419a08:	e0800117 	ldw	r2,4(fp)
 4419a0c:	1885883a 	add	r2,r3,r2
 4419a10:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4419a14:	e0800117 	ldw	r2,4(fp)
 4419a18:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4419a1c:	e0bffe17 	ldw	r2,-8(fp)
 4419a20:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4419a24:	00800044 	movi	r2,1
 4419a28:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4419a2c:	e0bffc17 	ldw	r2,-16(fp)
 4419a30:	10800504 	addi	r2,r2,20
 4419a34:	1009883a 	mov	r4,r2
 4419a38:	00c00044 	movi	r3,1
 4419a3c:	e0bffd17 	ldw	r2,-12(fp)
 4419a40:	1884983a 	sll	r2,r3,r2
 4419a44:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4419a48:	e0800317 	ldw	r2,12(fp)
 4419a4c:	1080008c 	andi	r2,r2,2
 4419a50:	1000051e 	bne	r2,zero,4419a68 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4419a54:	e0bffc17 	ldw	r2,-16(fp)
 4419a58:	10800304 	addi	r2,r2,12
 4419a5c:	1007883a 	mov	r3,r2
 4419a60:	00810004 	movi	r2,1024
 4419a64:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4419a68:	e0bffc17 	ldw	r2,-16(fp)
 4419a6c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4419a70:	e0bffc17 	ldw	r2,-16(fp)
 4419a74:	10800204 	addi	r2,r2,8
 4419a78:	10800037 	ldwio	r2,0(r2)
 4419a7c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4419a80:	e0bffa17 	ldw	r2,-24(fp)
 4419a84:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4419a88:	10000226 	beq	r2,zero,4419a94 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4419a8c:	e0bff717 	ldw	r2,-36(fp)
 4419a90:	1000031e 	bne	r2,zero,4419aa0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4419a94:	e0bffa17 	ldw	r2,-24(fp)
 4419a98:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4419a9c:	103ff426 	beq	r2,zero,4419a70 <__reset+0xfb415a70>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4419aa0:	e0bffa17 	ldw	r2,-24(fp)
 4419aa4:	1080100c 	andi	r2,r2,64
 4419aa8:	10001e26 	beq	r2,zero,4419b24 <alt_avalon_spi_command+0x14c>
 4419aac:	e0bff717 	ldw	r2,-36(fp)
 4419ab0:	00801c0e 	bge	zero,r2,4419b24 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4419ab4:	e0bff717 	ldw	r2,-36(fp)
 4419ab8:	10bfffc4 	addi	r2,r2,-1
 4419abc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4419ac0:	e0ffff17 	ldw	r3,-4(fp)
 4419ac4:	e0bff817 	ldw	r2,-32(fp)
 4419ac8:	18800a2e 	bgeu	r3,r2,4419af4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4419acc:	e0bffc17 	ldw	r2,-16(fp)
 4419ad0:	10800104 	addi	r2,r2,4
 4419ad4:	1009883a 	mov	r4,r2
 4419ad8:	e0bfff17 	ldw	r2,-4(fp)
 4419adc:	10c00044 	addi	r3,r2,1
 4419ae0:	e0ffff15 	stw	r3,-4(fp)
 4419ae4:	10800003 	ldbu	r2,0(r2)
 4419ae8:	10803fcc 	andi	r2,r2,255
 4419aec:	20800035 	stwio	r2,0(r4)
 4419af0:	00000c06 	br	4419b24 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4419af4:	e0bff517 	ldw	r2,-44(fp)
 4419af8:	10000826 	beq	r2,zero,4419b1c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4419afc:	e0bff517 	ldw	r2,-44(fp)
 4419b00:	10bfffc4 	addi	r2,r2,-1
 4419b04:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4419b08:	e0bffc17 	ldw	r2,-16(fp)
 4419b0c:	10800104 	addi	r2,r2,4
 4419b10:	0007883a 	mov	r3,zero
 4419b14:	10c00035 	stwio	r3,0(r2)
 4419b18:	00000206 	br	4419b24 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4419b1c:	00bf0004 	movi	r2,-1024
 4419b20:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4419b24:	e0bffa17 	ldw	r2,-24(fp)
 4419b28:	1080200c 	andi	r2,r2,128
 4419b2c:	103fd026 	beq	r2,zero,4419a70 <__reset+0xfb415a70>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4419b30:	e0bffc17 	ldw	r2,-16(fp)
 4419b34:	10800037 	ldwio	r2,0(r2)
 4419b38:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4419b3c:	e0bff617 	ldw	r2,-40(fp)
 4419b40:	10000426 	beq	r2,zero,4419b54 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4419b44:	e0bff617 	ldw	r2,-40(fp)
 4419b48:	10bfffc4 	addi	r2,r2,-1
 4419b4c:	e0bff615 	stw	r2,-40(fp)
 4419b50:	00000506 	br	4419b68 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4419b54:	e0800217 	ldw	r2,8(fp)
 4419b58:	10c00044 	addi	r3,r2,1
 4419b5c:	e0c00215 	stw	r3,8(fp)
 4419b60:	e0fffb17 	ldw	r3,-20(fp)
 4419b64:	10c00005 	stb	r3,0(r2)
      credits++;
 4419b68:	e0bff717 	ldw	r2,-36(fp)
 4419b6c:	10800044 	addi	r2,r2,1
 4419b70:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4419b74:	e0bff617 	ldw	r2,-40(fp)
 4419b78:	103fbd1e 	bne	r2,zero,4419a70 <__reset+0xfb415a70>
 4419b7c:	e0c00217 	ldw	r3,8(fp)
 4419b80:	e0bff917 	ldw	r2,-28(fp)
 4419b84:	18bfba1e 	bne	r3,r2,4419a70 <__reset+0xfb415a70>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4419b88:	e0bffc17 	ldw	r2,-16(fp)
 4419b8c:	10800204 	addi	r2,r2,8
 4419b90:	10800037 	ldwio	r2,0(r2)
 4419b94:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4419b98:	e0bffa17 	ldw	r2,-24(fp)
 4419b9c:	1080080c 	andi	r2,r2,32
 4419ba0:	103ff926 	beq	r2,zero,4419b88 <__reset+0xfb415b88>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4419ba4:	e0800317 	ldw	r2,12(fp)
 4419ba8:	1080004c 	andi	r2,r2,1
 4419bac:	1000041e 	bne	r2,zero,4419bc0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4419bb0:	e0bffc17 	ldw	r2,-16(fp)
 4419bb4:	10800304 	addi	r2,r2,12
 4419bb8:	0007883a 	mov	r3,zero
 4419bbc:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4419bc0:	e0800117 	ldw	r2,4(fp)
}
 4419bc4:	e037883a 	mov	sp,fp
 4419bc8:	df000017 	ldw	fp,0(sp)
 4419bcc:	dec00104 	addi	sp,sp,4
 4419bd0:	f800283a 	ret

04419bd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4419bd4:	defffa04 	addi	sp,sp,-24
 4419bd8:	dfc00515 	stw	ra,20(sp)
 4419bdc:	df000415 	stw	fp,16(sp)
 4419be0:	df000404 	addi	fp,sp,16
 4419be4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4419be8:	0007883a 	mov	r3,zero
 4419bec:	e0bfff17 	ldw	r2,-4(fp)
 4419bf0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4419bf4:	e0bfff17 	ldw	r2,-4(fp)
 4419bf8:	10800104 	addi	r2,r2,4
 4419bfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4419c00:	0005303a 	rdctl	r2,status
 4419c04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4419c08:	e0fffd17 	ldw	r3,-12(fp)
 4419c0c:	00bfff84 	movi	r2,-2
 4419c10:	1884703a 	and	r2,r3,r2
 4419c14:	1001703a 	wrctl	status,r2
  
  return context;
 4419c18:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4419c1c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4419c20:	4418c080 	call	4418c08 <alt_tick>
 4419c24:	e0bffc17 	ldw	r2,-16(fp)
 4419c28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4419c2c:	e0bffe17 	ldw	r2,-8(fp)
 4419c30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4419c34:	0001883a 	nop
 4419c38:	e037883a 	mov	sp,fp
 4419c3c:	dfc00117 	ldw	ra,4(sp)
 4419c40:	df000017 	ldw	fp,0(sp)
 4419c44:	dec00204 	addi	sp,sp,8
 4419c48:	f800283a 	ret

04419c4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4419c4c:	defff804 	addi	sp,sp,-32
 4419c50:	dfc00715 	stw	ra,28(sp)
 4419c54:	df000615 	stw	fp,24(sp)
 4419c58:	df000604 	addi	fp,sp,24
 4419c5c:	e13ffc15 	stw	r4,-16(fp)
 4419c60:	e17ffd15 	stw	r5,-12(fp)
 4419c64:	e1bffe15 	stw	r6,-8(fp)
 4419c68:	e1ffff15 	stw	r7,-4(fp)
 4419c6c:	e0bfff17 	ldw	r2,-4(fp)
 4419c70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4419c74:	00811134 	movhi	r2,1092
 4419c78:	10af1804 	addi	r2,r2,-17312
 4419c7c:	10800017 	ldw	r2,0(r2)
 4419c80:	1000041e 	bne	r2,zero,4419c94 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 4419c84:	00811134 	movhi	r2,1092
 4419c88:	10af1804 	addi	r2,r2,-17312
 4419c8c:	e0fffb17 	ldw	r3,-20(fp)
 4419c90:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4419c94:	e0bffc17 	ldw	r2,-16(fp)
 4419c98:	10800104 	addi	r2,r2,4
 4419c9c:	00c001c4 	movi	r3,7
 4419ca0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4419ca4:	d8000015 	stw	zero,0(sp)
 4419ca8:	e1fffc17 	ldw	r7,-16(fp)
 4419cac:	018110b4 	movhi	r6,1090
 4419cb0:	31a6f504 	addi	r6,r6,-25644
 4419cb4:	e17ffe17 	ldw	r5,-8(fp)
 4419cb8:	e13ffd17 	ldw	r4,-12(fp)
 4419cbc:	44182740 	call	4418274 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4419cc0:	0001883a 	nop
 4419cc4:	e037883a 	mov	sp,fp
 4419cc8:	dfc00117 	ldw	ra,4(sp)
 4419ccc:	df000017 	ldw	fp,0(sp)
 4419cd0:	dec00204 	addi	sp,sp,8
 4419cd4:	f800283a 	ret

04419cd8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4419cd8:	defffa04 	addi	sp,sp,-24
 4419cdc:	dfc00515 	stw	ra,20(sp)
 4419ce0:	df000415 	stw	fp,16(sp)
 4419ce4:	df000404 	addi	fp,sp,16
 4419ce8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4419cec:	008000c4 	movi	r2,3
 4419cf0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4419cf4:	e0fffd17 	ldw	r3,-12(fp)
 4419cf8:	008003f4 	movhi	r2,15
 4419cfc:	10909004 	addi	r2,r2,16960
 4419d00:	1885383a 	mul	r2,r3,r2
 4419d04:	100b883a 	mov	r5,r2
 4419d08:	01017db4 	movhi	r4,1526
 4419d0c:	21384004 	addi	r4,r4,-7936
 4419d10:	4407ea00 	call	4407ea0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4419d14:	100b883a 	mov	r5,r2
 4419d18:	01200034 	movhi	r4,32768
 4419d1c:	213fffc4 	addi	r4,r4,-1
 4419d20:	4407ea00 	call	4407ea0 <__udivsi3>
 4419d24:	100b883a 	mov	r5,r2
 4419d28:	e13fff17 	ldw	r4,-4(fp)
 4419d2c:	4407ea00 	call	4407ea0 <__udivsi3>
 4419d30:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4419d34:	e0bffe17 	ldw	r2,-8(fp)
 4419d38:	10002a26 	beq	r2,zero,4419de4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4419d3c:	e03ffc15 	stw	zero,-16(fp)
 4419d40:	00001706 	br	4419da0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4419d44:	00a00034 	movhi	r2,32768
 4419d48:	10bfffc4 	addi	r2,r2,-1
 4419d4c:	10bfffc4 	addi	r2,r2,-1
 4419d50:	103ffe1e 	bne	r2,zero,4419d4c <__reset+0xfb415d4c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4419d54:	e0fffd17 	ldw	r3,-12(fp)
 4419d58:	008003f4 	movhi	r2,15
 4419d5c:	10909004 	addi	r2,r2,16960
 4419d60:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4419d64:	100b883a 	mov	r5,r2
 4419d68:	01017db4 	movhi	r4,1526
 4419d6c:	21384004 	addi	r4,r4,-7936
 4419d70:	4407ea00 	call	4407ea0 <__udivsi3>
 4419d74:	100b883a 	mov	r5,r2
 4419d78:	01200034 	movhi	r4,32768
 4419d7c:	213fffc4 	addi	r4,r4,-1
 4419d80:	4407ea00 	call	4407ea0 <__udivsi3>
 4419d84:	1007883a 	mov	r3,r2
 4419d88:	e0bfff17 	ldw	r2,-4(fp)
 4419d8c:	10c5c83a 	sub	r2,r2,r3
 4419d90:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4419d94:	e0bffc17 	ldw	r2,-16(fp)
 4419d98:	10800044 	addi	r2,r2,1
 4419d9c:	e0bffc15 	stw	r2,-16(fp)
 4419da0:	e0fffc17 	ldw	r3,-16(fp)
 4419da4:	e0bffe17 	ldw	r2,-8(fp)
 4419da8:	18bfe616 	blt	r3,r2,4419d44 <__reset+0xfb415d44>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4419dac:	e0fffd17 	ldw	r3,-12(fp)
 4419db0:	008003f4 	movhi	r2,15
 4419db4:	10909004 	addi	r2,r2,16960
 4419db8:	1885383a 	mul	r2,r3,r2
 4419dbc:	100b883a 	mov	r5,r2
 4419dc0:	01017db4 	movhi	r4,1526
 4419dc4:	21384004 	addi	r4,r4,-7936
 4419dc8:	4407ea00 	call	4407ea0 <__udivsi3>
 4419dcc:	1007883a 	mov	r3,r2
 4419dd0:	e0bfff17 	ldw	r2,-4(fp)
 4419dd4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4419dd8:	10bfffc4 	addi	r2,r2,-1
 4419ddc:	103ffe1e 	bne	r2,zero,4419dd8 <__reset+0xfb415dd8>
 4419de0:	00000d06 	br	4419e18 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4419de4:	e0fffd17 	ldw	r3,-12(fp)
 4419de8:	008003f4 	movhi	r2,15
 4419dec:	10909004 	addi	r2,r2,16960
 4419df0:	1885383a 	mul	r2,r3,r2
 4419df4:	100b883a 	mov	r5,r2
 4419df8:	01017db4 	movhi	r4,1526
 4419dfc:	21384004 	addi	r4,r4,-7936
 4419e00:	4407ea00 	call	4407ea0 <__udivsi3>
 4419e04:	1007883a 	mov	r3,r2
 4419e08:	e0bfff17 	ldw	r2,-4(fp)
 4419e0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4419e10:	10bfffc4 	addi	r2,r2,-1
 4419e14:	00bffe16 	blt	zero,r2,4419e10 <__reset+0xfb415e10>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4419e18:	0005883a 	mov	r2,zero
}
 4419e1c:	e037883a 	mov	sp,fp
 4419e20:	dfc00117 	ldw	ra,4(sp)
 4419e24:	df000017 	ldw	fp,0(sp)
 4419e28:	dec00204 	addi	sp,sp,8
 4419e2c:	f800283a 	ret

04419e30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4419e30:	defffe04 	addi	sp,sp,-8
 4419e34:	df000115 	stw	fp,4(sp)
 4419e38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4419e3c:	e03fff15 	stw	zero,-4(fp)
 4419e40:	00000506 	br	4419e58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4419e44:	e0bfff17 	ldw	r2,-4(fp)
 4419e48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4419e4c:	e0bfff17 	ldw	r2,-4(fp)
 4419e50:	10800804 	addi	r2,r2,32
 4419e54:	e0bfff15 	stw	r2,-4(fp)
 4419e58:	e0bfff17 	ldw	r2,-4(fp)
 4419e5c:	10820030 	cmpltui	r2,r2,2048
 4419e60:	103ff81e 	bne	r2,zero,4419e44 <__reset+0xfb415e44>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4419e64:	0001883a 	nop
 4419e68:	e037883a 	mov	sp,fp
 4419e6c:	df000017 	ldw	fp,0(sp)
 4419e70:	dec00104 	addi	sp,sp,4
 4419e74:	f800283a 	ret

04419e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4419e78:	defffe04 	addi	sp,sp,-8
 4419e7c:	dfc00115 	stw	ra,4(sp)
 4419e80:	df000015 	stw	fp,0(sp)
 4419e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4419e88:	00811134 	movhi	r2,1092
 4419e8c:	10a15a04 	addi	r2,r2,-31384
 4419e90:	10800017 	ldw	r2,0(r2)
 4419e94:	10000526 	beq	r2,zero,4419eac <alt_get_errno+0x34>
 4419e98:	00811134 	movhi	r2,1092
 4419e9c:	10a15a04 	addi	r2,r2,-31384
 4419ea0:	10800017 	ldw	r2,0(r2)
 4419ea4:	103ee83a 	callr	r2
 4419ea8:	00000206 	br	4419eb4 <alt_get_errno+0x3c>
 4419eac:	00811134 	movhi	r2,1092
 4419eb0:	10af1004 	addi	r2,r2,-17344
}
 4419eb4:	e037883a 	mov	sp,fp
 4419eb8:	dfc00117 	ldw	ra,4(sp)
 4419ebc:	df000017 	ldw	fp,0(sp)
 4419ec0:	dec00204 	addi	sp,sp,8
 4419ec4:	f800283a 	ret

04419ec8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4419ec8:	defffa04 	addi	sp,sp,-24
 4419ecc:	dfc00515 	stw	ra,20(sp)
 4419ed0:	df000415 	stw	fp,16(sp)
 4419ed4:	df000404 	addi	fp,sp,16
 4419ed8:	e13ffe15 	stw	r4,-8(fp)
 4419edc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4419ee0:	e0bffe17 	ldw	r2,-8(fp)
 4419ee4:	10000326 	beq	r2,zero,4419ef4 <alt_dev_llist_insert+0x2c>
 4419ee8:	e0bffe17 	ldw	r2,-8(fp)
 4419eec:	10800217 	ldw	r2,8(r2)
 4419ef0:	1000061e 	bne	r2,zero,4419f0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4419ef4:	4419e780 	call	4419e78 <alt_get_errno>
 4419ef8:	1007883a 	mov	r3,r2
 4419efc:	00800584 	movi	r2,22
 4419f00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4419f04:	00bffa84 	movi	r2,-22
 4419f08:	00001306 	br	4419f58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4419f0c:	e0bffe17 	ldw	r2,-8(fp)
 4419f10:	e0ffff17 	ldw	r3,-4(fp)
 4419f14:	e0fffc15 	stw	r3,-16(fp)
 4419f18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4419f1c:	e0bffd17 	ldw	r2,-12(fp)
 4419f20:	e0fffc17 	ldw	r3,-16(fp)
 4419f24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4419f28:	e0bffc17 	ldw	r2,-16(fp)
 4419f2c:	10c00017 	ldw	r3,0(r2)
 4419f30:	e0bffd17 	ldw	r2,-12(fp)
 4419f34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4419f38:	e0bffc17 	ldw	r2,-16(fp)
 4419f3c:	10800017 	ldw	r2,0(r2)
 4419f40:	e0fffd17 	ldw	r3,-12(fp)
 4419f44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4419f48:	e0bffc17 	ldw	r2,-16(fp)
 4419f4c:	e0fffd17 	ldw	r3,-12(fp)
 4419f50:	10c00015 	stw	r3,0(r2)

  return 0;  
 4419f54:	0005883a 	mov	r2,zero
}
 4419f58:	e037883a 	mov	sp,fp
 4419f5c:	dfc00117 	ldw	ra,4(sp)
 4419f60:	df000017 	ldw	fp,0(sp)
 4419f64:	dec00204 	addi	sp,sp,8
 4419f68:	f800283a 	ret

04419f6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4419f6c:	defffd04 	addi	sp,sp,-12
 4419f70:	dfc00215 	stw	ra,8(sp)
 4419f74:	df000115 	stw	fp,4(sp)
 4419f78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4419f7c:	008110b4 	movhi	r2,1090
 4419f80:	10aad304 	addi	r2,r2,-21684
 4419f84:	e0bfff15 	stw	r2,-4(fp)
 4419f88:	00000606 	br	4419fa4 <_do_ctors+0x38>
        (*ctor) (); 
 4419f8c:	e0bfff17 	ldw	r2,-4(fp)
 4419f90:	10800017 	ldw	r2,0(r2)
 4419f94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4419f98:	e0bfff17 	ldw	r2,-4(fp)
 4419f9c:	10bfff04 	addi	r2,r2,-4
 4419fa0:	e0bfff15 	stw	r2,-4(fp)
 4419fa4:	e0ffff17 	ldw	r3,-4(fp)
 4419fa8:	008110b4 	movhi	r2,1090
 4419fac:	10aad404 	addi	r2,r2,-21680
 4419fb0:	18bff62e 	bgeu	r3,r2,4419f8c <__reset+0xfb415f8c>
        (*ctor) (); 
}
 4419fb4:	0001883a 	nop
 4419fb8:	e037883a 	mov	sp,fp
 4419fbc:	dfc00117 	ldw	ra,4(sp)
 4419fc0:	df000017 	ldw	fp,0(sp)
 4419fc4:	dec00204 	addi	sp,sp,8
 4419fc8:	f800283a 	ret

04419fcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4419fcc:	defffd04 	addi	sp,sp,-12
 4419fd0:	dfc00215 	stw	ra,8(sp)
 4419fd4:	df000115 	stw	fp,4(sp)
 4419fd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4419fdc:	008110b4 	movhi	r2,1090
 4419fe0:	10aad304 	addi	r2,r2,-21684
 4419fe4:	e0bfff15 	stw	r2,-4(fp)
 4419fe8:	00000606 	br	441a004 <_do_dtors+0x38>
        (*dtor) (); 
 4419fec:	e0bfff17 	ldw	r2,-4(fp)
 4419ff0:	10800017 	ldw	r2,0(r2)
 4419ff4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4419ff8:	e0bfff17 	ldw	r2,-4(fp)
 4419ffc:	10bfff04 	addi	r2,r2,-4
 441a000:	e0bfff15 	stw	r2,-4(fp)
 441a004:	e0ffff17 	ldw	r3,-4(fp)
 441a008:	008110b4 	movhi	r2,1090
 441a00c:	10aad404 	addi	r2,r2,-21680
 441a010:	18bff62e 	bgeu	r3,r2,4419fec <__reset+0xfb415fec>
        (*dtor) (); 
}
 441a014:	0001883a 	nop
 441a018:	e037883a 	mov	sp,fp
 441a01c:	dfc00117 	ldw	ra,4(sp)
 441a020:	df000017 	ldw	fp,0(sp)
 441a024:	dec00204 	addi	sp,sp,8
 441a028:	f800283a 	ret

0441a02c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 441a02c:	defffe04 	addi	sp,sp,-8
 441a030:	dfc00115 	stw	ra,4(sp)
 441a034:	df000015 	stw	fp,0(sp)
 441a038:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 441a03c:	01440004 	movi	r5,4096
 441a040:	0009883a 	mov	r4,zero
 441a044:	441a72c0 	call	441a72c <alt_icache_flush>
#endif
}
 441a048:	0001883a 	nop
 441a04c:	e037883a 	mov	sp,fp
 441a050:	dfc00117 	ldw	ra,4(sp)
 441a054:	df000017 	ldw	fp,0(sp)
 441a058:	dec00204 	addi	sp,sp,8
 441a05c:	f800283a 	ret

0441a060 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 441a060:	defffe04 	addi	sp,sp,-8
 441a064:	df000115 	stw	fp,4(sp)
 441a068:	df000104 	addi	fp,sp,4
 441a06c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 441a070:	e0bfff17 	ldw	r2,-4(fp)
 441a074:	10bffe84 	addi	r2,r2,-6
 441a078:	10c00428 	cmpgeui	r3,r2,16
 441a07c:	18001a1e 	bne	r3,zero,441a0e8 <alt_exception_cause_generated_bad_addr+0x88>
 441a080:	100690ba 	slli	r3,r2,2
 441a084:	008110b4 	movhi	r2,1090
 441a088:	10a82604 	addi	r2,r2,-24424
 441a08c:	1885883a 	add	r2,r3,r2
 441a090:	10800017 	ldw	r2,0(r2)
 441a094:	1000683a 	jmp	r2
 441a098:	0441a0d8 	cmpnei	r17,zero,1667
 441a09c:	0441a0d8 	cmpnei	r17,zero,1667
 441a0a0:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0a4:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0a8:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0ac:	0441a0d8 	cmpnei	r17,zero,1667
 441a0b0:	0441a0e0 	cmpeqi	r17,zero,1667
 441a0b4:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0b8:	0441a0d8 	cmpnei	r17,zero,1667
 441a0bc:	0441a0d8 	cmpnei	r17,zero,1667
 441a0c0:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0c4:	0441a0d8 	cmpnei	r17,zero,1667
 441a0c8:	0441a0e0 	cmpeqi	r17,zero,1667
 441a0cc:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0d0:	0441a0e8 	cmpgeui	r17,zero,1667
 441a0d4:	0441a0d8 	cmpnei	r17,zero,1667
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 441a0d8:	00800044 	movi	r2,1
 441a0dc:	00000306 	br	441a0ec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 441a0e0:	0005883a 	mov	r2,zero
 441a0e4:	00000106 	br	441a0ec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 441a0e8:	0005883a 	mov	r2,zero
  }
}
 441a0ec:	e037883a 	mov	sp,fp
 441a0f0:	df000017 	ldw	fp,0(sp)
 441a0f4:	dec00104 	addi	sp,sp,4
 441a0f8:	f800283a 	ret

0441a0fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 441a0fc:	defff904 	addi	sp,sp,-28
 441a100:	dfc00615 	stw	ra,24(sp)
 441a104:	df000515 	stw	fp,20(sp)
 441a108:	df000504 	addi	fp,sp,20
 441a10c:	e13ffc15 	stw	r4,-16(fp)
 441a110:	e17ffd15 	stw	r5,-12(fp)
 441a114:	e1bffe15 	stw	r6,-8(fp)
 441a118:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 441a11c:	e1bfff17 	ldw	r6,-4(fp)
 441a120:	e17ffe17 	ldw	r5,-8(fp)
 441a124:	e13ffd17 	ldw	r4,-12(fp)
 441a128:	441a3580 	call	441a358 <open>
 441a12c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 441a130:	e0bffb17 	ldw	r2,-20(fp)
 441a134:	10001c16 	blt	r2,zero,441a1a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 441a138:	008110f4 	movhi	r2,1091
 441a13c:	109cd404 	addi	r2,r2,29520
 441a140:	e0fffb17 	ldw	r3,-20(fp)
 441a144:	18c00324 	muli	r3,r3,12
 441a148:	10c5883a 	add	r2,r2,r3
 441a14c:	10c00017 	ldw	r3,0(r2)
 441a150:	e0bffc17 	ldw	r2,-16(fp)
 441a154:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 441a158:	008110f4 	movhi	r2,1091
 441a15c:	109cd404 	addi	r2,r2,29520
 441a160:	e0fffb17 	ldw	r3,-20(fp)
 441a164:	18c00324 	muli	r3,r3,12
 441a168:	10c5883a 	add	r2,r2,r3
 441a16c:	10800104 	addi	r2,r2,4
 441a170:	10c00017 	ldw	r3,0(r2)
 441a174:	e0bffc17 	ldw	r2,-16(fp)
 441a178:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 441a17c:	008110f4 	movhi	r2,1091
 441a180:	109cd404 	addi	r2,r2,29520
 441a184:	e0fffb17 	ldw	r3,-20(fp)
 441a188:	18c00324 	muli	r3,r3,12
 441a18c:	10c5883a 	add	r2,r2,r3
 441a190:	10800204 	addi	r2,r2,8
 441a194:	10c00017 	ldw	r3,0(r2)
 441a198:	e0bffc17 	ldw	r2,-16(fp)
 441a19c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 441a1a0:	e13ffb17 	ldw	r4,-20(fp)
 441a1a4:	4418a580 	call	4418a58 <alt_release_fd>
  }
} 
 441a1a8:	0001883a 	nop
 441a1ac:	e037883a 	mov	sp,fp
 441a1b0:	dfc00117 	ldw	ra,4(sp)
 441a1b4:	df000017 	ldw	fp,0(sp)
 441a1b8:	dec00204 	addi	sp,sp,8
 441a1bc:	f800283a 	ret

0441a1c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 441a1c0:	defffb04 	addi	sp,sp,-20
 441a1c4:	dfc00415 	stw	ra,16(sp)
 441a1c8:	df000315 	stw	fp,12(sp)
 441a1cc:	df000304 	addi	fp,sp,12
 441a1d0:	e13ffd15 	stw	r4,-12(fp)
 441a1d4:	e17ffe15 	stw	r5,-8(fp)
 441a1d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 441a1dc:	01c07fc4 	movi	r7,511
 441a1e0:	01800044 	movi	r6,1
 441a1e4:	e17ffd17 	ldw	r5,-12(fp)
 441a1e8:	010110f4 	movhi	r4,1091
 441a1ec:	211cd704 	addi	r4,r4,29532
 441a1f0:	441a0fc0 	call	441a0fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 441a1f4:	01c07fc4 	movi	r7,511
 441a1f8:	000d883a 	mov	r6,zero
 441a1fc:	e17ffe17 	ldw	r5,-8(fp)
 441a200:	010110f4 	movhi	r4,1091
 441a204:	211cd404 	addi	r4,r4,29520
 441a208:	441a0fc0 	call	441a0fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 441a20c:	01c07fc4 	movi	r7,511
 441a210:	01800044 	movi	r6,1
 441a214:	e17fff17 	ldw	r5,-4(fp)
 441a218:	010110f4 	movhi	r4,1091
 441a21c:	211cda04 	addi	r4,r4,29544
 441a220:	441a0fc0 	call	441a0fc <alt_open_fd>
}  
 441a224:	0001883a 	nop
 441a228:	e037883a 	mov	sp,fp
 441a22c:	dfc00117 	ldw	ra,4(sp)
 441a230:	df000017 	ldw	fp,0(sp)
 441a234:	dec00204 	addi	sp,sp,8
 441a238:	f800283a 	ret

0441a23c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 441a23c:	defffe04 	addi	sp,sp,-8
 441a240:	dfc00115 	stw	ra,4(sp)
 441a244:	df000015 	stw	fp,0(sp)
 441a248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 441a24c:	00811134 	movhi	r2,1092
 441a250:	10a15a04 	addi	r2,r2,-31384
 441a254:	10800017 	ldw	r2,0(r2)
 441a258:	10000526 	beq	r2,zero,441a270 <alt_get_errno+0x34>
 441a25c:	00811134 	movhi	r2,1092
 441a260:	10a15a04 	addi	r2,r2,-31384
 441a264:	10800017 	ldw	r2,0(r2)
 441a268:	103ee83a 	callr	r2
 441a26c:	00000206 	br	441a278 <alt_get_errno+0x3c>
 441a270:	00811134 	movhi	r2,1092
 441a274:	10af1004 	addi	r2,r2,-17344
}
 441a278:	e037883a 	mov	sp,fp
 441a27c:	dfc00117 	ldw	ra,4(sp)
 441a280:	df000017 	ldw	fp,0(sp)
 441a284:	dec00204 	addi	sp,sp,8
 441a288:	f800283a 	ret

0441a28c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 441a28c:	defffd04 	addi	sp,sp,-12
 441a290:	df000215 	stw	fp,8(sp)
 441a294:	df000204 	addi	fp,sp,8
 441a298:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 441a29c:	e0bfff17 	ldw	r2,-4(fp)
 441a2a0:	10800217 	ldw	r2,8(r2)
 441a2a4:	10d00034 	orhi	r3,r2,16384
 441a2a8:	e0bfff17 	ldw	r2,-4(fp)
 441a2ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 441a2b0:	e03ffe15 	stw	zero,-8(fp)
 441a2b4:	00001d06 	br	441a32c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 441a2b8:	008110f4 	movhi	r2,1091
 441a2bc:	109cd404 	addi	r2,r2,29520
 441a2c0:	e0fffe17 	ldw	r3,-8(fp)
 441a2c4:	18c00324 	muli	r3,r3,12
 441a2c8:	10c5883a 	add	r2,r2,r3
 441a2cc:	10c00017 	ldw	r3,0(r2)
 441a2d0:	e0bfff17 	ldw	r2,-4(fp)
 441a2d4:	10800017 	ldw	r2,0(r2)
 441a2d8:	1880111e 	bne	r3,r2,441a320 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 441a2dc:	008110f4 	movhi	r2,1091
 441a2e0:	109cd404 	addi	r2,r2,29520
 441a2e4:	e0fffe17 	ldw	r3,-8(fp)
 441a2e8:	18c00324 	muli	r3,r3,12
 441a2ec:	10c5883a 	add	r2,r2,r3
 441a2f0:	10800204 	addi	r2,r2,8
 441a2f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 441a2f8:	1000090e 	bge	r2,zero,441a320 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 441a2fc:	e0bffe17 	ldw	r2,-8(fp)
 441a300:	10c00324 	muli	r3,r2,12
 441a304:	008110f4 	movhi	r2,1091
 441a308:	109cd404 	addi	r2,r2,29520
 441a30c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 441a310:	e0bfff17 	ldw	r2,-4(fp)
 441a314:	18800226 	beq	r3,r2,441a320 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 441a318:	00bffcc4 	movi	r2,-13
 441a31c:	00000a06 	br	441a348 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 441a320:	e0bffe17 	ldw	r2,-8(fp)
 441a324:	10800044 	addi	r2,r2,1
 441a328:	e0bffe15 	stw	r2,-8(fp)
 441a32c:	00811134 	movhi	r2,1092
 441a330:	10a15904 	addi	r2,r2,-31388
 441a334:	10800017 	ldw	r2,0(r2)
 441a338:	1007883a 	mov	r3,r2
 441a33c:	e0bffe17 	ldw	r2,-8(fp)
 441a340:	18bfdd2e 	bgeu	r3,r2,441a2b8 <__reset+0xfb4162b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 441a344:	0005883a 	mov	r2,zero
}
 441a348:	e037883a 	mov	sp,fp
 441a34c:	df000017 	ldw	fp,0(sp)
 441a350:	dec00104 	addi	sp,sp,4
 441a354:	f800283a 	ret

0441a358 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 441a358:	defff604 	addi	sp,sp,-40
 441a35c:	dfc00915 	stw	ra,36(sp)
 441a360:	df000815 	stw	fp,32(sp)
 441a364:	df000804 	addi	fp,sp,32
 441a368:	e13ffd15 	stw	r4,-12(fp)
 441a36c:	e17ffe15 	stw	r5,-8(fp)
 441a370:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 441a374:	00bfffc4 	movi	r2,-1
 441a378:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 441a37c:	00bffb44 	movi	r2,-19
 441a380:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 441a384:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 441a388:	01411134 	movhi	r5,1092
 441a38c:	29615704 	addi	r5,r5,-31396
 441a390:	e13ffd17 	ldw	r4,-12(fp)
 441a394:	441a4d40 	call	441a4d4 <alt_find_dev>
 441a398:	e0bff815 	stw	r2,-32(fp)
 441a39c:	e0bff817 	ldw	r2,-32(fp)
 441a3a0:	1000051e 	bne	r2,zero,441a3b8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 441a3a4:	e13ffd17 	ldw	r4,-12(fp)
 441a3a8:	441a5640 	call	441a564 <alt_find_file>
 441a3ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 441a3b0:	00800044 	movi	r2,1
 441a3b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 441a3b8:	e0bff817 	ldw	r2,-32(fp)
 441a3bc:	10002926 	beq	r2,zero,441a464 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 441a3c0:	e13ff817 	ldw	r4,-32(fp)
 441a3c4:	441a6780 	call	441a678 <alt_get_fd>
 441a3c8:	e0bff915 	stw	r2,-28(fp)
 441a3cc:	e0bff917 	ldw	r2,-28(fp)
 441a3d0:	1000030e 	bge	r2,zero,441a3e0 <open+0x88>
    {
      status = index;
 441a3d4:	e0bff917 	ldw	r2,-28(fp)
 441a3d8:	e0bffa15 	stw	r2,-24(fp)
 441a3dc:	00002306 	br	441a46c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 441a3e0:	e0bff917 	ldw	r2,-28(fp)
 441a3e4:	10c00324 	muli	r3,r2,12
 441a3e8:	008110f4 	movhi	r2,1091
 441a3ec:	109cd404 	addi	r2,r2,29520
 441a3f0:	1885883a 	add	r2,r3,r2
 441a3f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 441a3f8:	e0fffe17 	ldw	r3,-8(fp)
 441a3fc:	00900034 	movhi	r2,16384
 441a400:	10bfffc4 	addi	r2,r2,-1
 441a404:	1886703a 	and	r3,r3,r2
 441a408:	e0bffc17 	ldw	r2,-16(fp)
 441a40c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 441a410:	e0bffb17 	ldw	r2,-20(fp)
 441a414:	1000051e 	bne	r2,zero,441a42c <open+0xd4>
 441a418:	e13ffc17 	ldw	r4,-16(fp)
 441a41c:	441a28c0 	call	441a28c <alt_file_locked>
 441a420:	e0bffa15 	stw	r2,-24(fp)
 441a424:	e0bffa17 	ldw	r2,-24(fp)
 441a428:	10001016 	blt	r2,zero,441a46c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 441a42c:	e0bff817 	ldw	r2,-32(fp)
 441a430:	10800317 	ldw	r2,12(r2)
 441a434:	10000826 	beq	r2,zero,441a458 <open+0x100>
 441a438:	e0bff817 	ldw	r2,-32(fp)
 441a43c:	10800317 	ldw	r2,12(r2)
 441a440:	e1ffff17 	ldw	r7,-4(fp)
 441a444:	e1bffe17 	ldw	r6,-8(fp)
 441a448:	e17ffd17 	ldw	r5,-12(fp)
 441a44c:	e13ffc17 	ldw	r4,-16(fp)
 441a450:	103ee83a 	callr	r2
 441a454:	00000106 	br	441a45c <open+0x104>
 441a458:	0005883a 	mov	r2,zero
 441a45c:	e0bffa15 	stw	r2,-24(fp)
 441a460:	00000206 	br	441a46c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 441a464:	00bffb44 	movi	r2,-19
 441a468:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 441a46c:	e0bffa17 	ldw	r2,-24(fp)
 441a470:	1000090e 	bge	r2,zero,441a498 <open+0x140>
  {
    alt_release_fd (index);  
 441a474:	e13ff917 	ldw	r4,-28(fp)
 441a478:	4418a580 	call	4418a58 <alt_release_fd>
    ALT_ERRNO = -status;
 441a47c:	441a23c0 	call	441a23c <alt_get_errno>
 441a480:	1007883a 	mov	r3,r2
 441a484:	e0bffa17 	ldw	r2,-24(fp)
 441a488:	0085c83a 	sub	r2,zero,r2
 441a48c:	18800015 	stw	r2,0(r3)
    return -1;
 441a490:	00bfffc4 	movi	r2,-1
 441a494:	00000106 	br	441a49c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 441a498:	e0bff917 	ldw	r2,-28(fp)
}
 441a49c:	e037883a 	mov	sp,fp
 441a4a0:	dfc00117 	ldw	ra,4(sp)
 441a4a4:	df000017 	ldw	fp,0(sp)
 441a4a8:	dec00204 	addi	sp,sp,8
 441a4ac:	f800283a 	ret

0441a4b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 441a4b0:	deffff04 	addi	sp,sp,-4
 441a4b4:	df000015 	stw	fp,0(sp)
 441a4b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 441a4bc:	000170fa 	wrctl	ienable,zero
}
 441a4c0:	0001883a 	nop
 441a4c4:	e037883a 	mov	sp,fp
 441a4c8:	df000017 	ldw	fp,0(sp)
 441a4cc:	dec00104 	addi	sp,sp,4
 441a4d0:	f800283a 	ret

0441a4d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 441a4d4:	defffa04 	addi	sp,sp,-24
 441a4d8:	dfc00515 	stw	ra,20(sp)
 441a4dc:	df000415 	stw	fp,16(sp)
 441a4e0:	df000404 	addi	fp,sp,16
 441a4e4:	e13ffe15 	stw	r4,-8(fp)
 441a4e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 441a4ec:	e0bfff17 	ldw	r2,-4(fp)
 441a4f0:	10800017 	ldw	r2,0(r2)
 441a4f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 441a4f8:	e13ffe17 	ldw	r4,-8(fp)
 441a4fc:	440b1540 	call	440b154 <strlen>
 441a500:	10800044 	addi	r2,r2,1
 441a504:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 441a508:	00000d06 	br	441a540 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 441a50c:	e0bffc17 	ldw	r2,-16(fp)
 441a510:	10800217 	ldw	r2,8(r2)
 441a514:	e0fffd17 	ldw	r3,-12(fp)
 441a518:	180d883a 	mov	r6,r3
 441a51c:	e17ffe17 	ldw	r5,-8(fp)
 441a520:	1009883a 	mov	r4,r2
 441a524:	441a8080 	call	441a808 <memcmp>
 441a528:	1000021e 	bne	r2,zero,441a534 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 441a52c:	e0bffc17 	ldw	r2,-16(fp)
 441a530:	00000706 	br	441a550 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 441a534:	e0bffc17 	ldw	r2,-16(fp)
 441a538:	10800017 	ldw	r2,0(r2)
 441a53c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 441a540:	e0fffc17 	ldw	r3,-16(fp)
 441a544:	e0bfff17 	ldw	r2,-4(fp)
 441a548:	18bff01e 	bne	r3,r2,441a50c <__reset+0xfb41650c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 441a54c:	0005883a 	mov	r2,zero
}
 441a550:	e037883a 	mov	sp,fp
 441a554:	dfc00117 	ldw	ra,4(sp)
 441a558:	df000017 	ldw	fp,0(sp)
 441a55c:	dec00204 	addi	sp,sp,8
 441a560:	f800283a 	ret

0441a564 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 441a564:	defffb04 	addi	sp,sp,-20
 441a568:	dfc00415 	stw	ra,16(sp)
 441a56c:	df000315 	stw	fp,12(sp)
 441a570:	df000304 	addi	fp,sp,12
 441a574:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 441a578:	00811134 	movhi	r2,1092
 441a57c:	10a15504 	addi	r2,r2,-31404
 441a580:	10800017 	ldw	r2,0(r2)
 441a584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 441a588:	00003106 	br	441a650 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 441a58c:	e0bffd17 	ldw	r2,-12(fp)
 441a590:	10800217 	ldw	r2,8(r2)
 441a594:	1009883a 	mov	r4,r2
 441a598:	440b1540 	call	440b154 <strlen>
 441a59c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 441a5a0:	e0bffd17 	ldw	r2,-12(fp)
 441a5a4:	10c00217 	ldw	r3,8(r2)
 441a5a8:	e0bffe17 	ldw	r2,-8(fp)
 441a5ac:	10bfffc4 	addi	r2,r2,-1
 441a5b0:	1885883a 	add	r2,r3,r2
 441a5b4:	10800003 	ldbu	r2,0(r2)
 441a5b8:	10803fcc 	andi	r2,r2,255
 441a5bc:	1080201c 	xori	r2,r2,128
 441a5c0:	10bfe004 	addi	r2,r2,-128
 441a5c4:	10800bd8 	cmpnei	r2,r2,47
 441a5c8:	1000031e 	bne	r2,zero,441a5d8 <alt_find_file+0x74>
    {
      len -= 1;
 441a5cc:	e0bffe17 	ldw	r2,-8(fp)
 441a5d0:	10bfffc4 	addi	r2,r2,-1
 441a5d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 441a5d8:	e0bffe17 	ldw	r2,-8(fp)
 441a5dc:	e0ffff17 	ldw	r3,-4(fp)
 441a5e0:	1885883a 	add	r2,r3,r2
 441a5e4:	10800003 	ldbu	r2,0(r2)
 441a5e8:	10803fcc 	andi	r2,r2,255
 441a5ec:	1080201c 	xori	r2,r2,128
 441a5f0:	10bfe004 	addi	r2,r2,-128
 441a5f4:	10800be0 	cmpeqi	r2,r2,47
 441a5f8:	1000081e 	bne	r2,zero,441a61c <alt_find_file+0xb8>
 441a5fc:	e0bffe17 	ldw	r2,-8(fp)
 441a600:	e0ffff17 	ldw	r3,-4(fp)
 441a604:	1885883a 	add	r2,r3,r2
 441a608:	10800003 	ldbu	r2,0(r2)
 441a60c:	10803fcc 	andi	r2,r2,255
 441a610:	1080201c 	xori	r2,r2,128
 441a614:	10bfe004 	addi	r2,r2,-128
 441a618:	10000a1e 	bne	r2,zero,441a644 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 441a61c:	e0bffd17 	ldw	r2,-12(fp)
 441a620:	10800217 	ldw	r2,8(r2)
 441a624:	e0fffe17 	ldw	r3,-8(fp)
 441a628:	180d883a 	mov	r6,r3
 441a62c:	e17fff17 	ldw	r5,-4(fp)
 441a630:	1009883a 	mov	r4,r2
 441a634:	441a8080 	call	441a808 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 441a638:	1000021e 	bne	r2,zero,441a644 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 441a63c:	e0bffd17 	ldw	r2,-12(fp)
 441a640:	00000806 	br	441a664 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 441a644:	e0bffd17 	ldw	r2,-12(fp)
 441a648:	10800017 	ldw	r2,0(r2)
 441a64c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 441a650:	e0fffd17 	ldw	r3,-12(fp)
 441a654:	00811134 	movhi	r2,1092
 441a658:	10a15504 	addi	r2,r2,-31404
 441a65c:	18bfcb1e 	bne	r3,r2,441a58c <__reset+0xfb41658c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 441a660:	0005883a 	mov	r2,zero
}
 441a664:	e037883a 	mov	sp,fp
 441a668:	dfc00117 	ldw	ra,4(sp)
 441a66c:	df000017 	ldw	fp,0(sp)
 441a670:	dec00204 	addi	sp,sp,8
 441a674:	f800283a 	ret

0441a678 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 441a678:	defffc04 	addi	sp,sp,-16
 441a67c:	df000315 	stw	fp,12(sp)
 441a680:	df000304 	addi	fp,sp,12
 441a684:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 441a688:	00bffa04 	movi	r2,-24
 441a68c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 441a690:	e03ffd15 	stw	zero,-12(fp)
 441a694:	00001d06 	br	441a70c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 441a698:	008110f4 	movhi	r2,1091
 441a69c:	109cd404 	addi	r2,r2,29520
 441a6a0:	e0fffd17 	ldw	r3,-12(fp)
 441a6a4:	18c00324 	muli	r3,r3,12
 441a6a8:	10c5883a 	add	r2,r2,r3
 441a6ac:	10800017 	ldw	r2,0(r2)
 441a6b0:	1000131e 	bne	r2,zero,441a700 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 441a6b4:	008110f4 	movhi	r2,1091
 441a6b8:	109cd404 	addi	r2,r2,29520
 441a6bc:	e0fffd17 	ldw	r3,-12(fp)
 441a6c0:	18c00324 	muli	r3,r3,12
 441a6c4:	10c5883a 	add	r2,r2,r3
 441a6c8:	e0ffff17 	ldw	r3,-4(fp)
 441a6cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 441a6d0:	00811134 	movhi	r2,1092
 441a6d4:	10a15904 	addi	r2,r2,-31388
 441a6d8:	10c00017 	ldw	r3,0(r2)
 441a6dc:	e0bffd17 	ldw	r2,-12(fp)
 441a6e0:	1880040e 	bge	r3,r2,441a6f4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 441a6e4:	00811134 	movhi	r2,1092
 441a6e8:	10a15904 	addi	r2,r2,-31388
 441a6ec:	e0fffd17 	ldw	r3,-12(fp)
 441a6f0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 441a6f4:	e0bffd17 	ldw	r2,-12(fp)
 441a6f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 441a6fc:	00000606 	br	441a718 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 441a700:	e0bffd17 	ldw	r2,-12(fp)
 441a704:	10800044 	addi	r2,r2,1
 441a708:	e0bffd15 	stw	r2,-12(fp)
 441a70c:	e0bffd17 	ldw	r2,-12(fp)
 441a710:	10800810 	cmplti	r2,r2,32
 441a714:	103fe01e 	bne	r2,zero,441a698 <__reset+0xfb416698>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 441a718:	e0bffe17 	ldw	r2,-8(fp)
}
 441a71c:	e037883a 	mov	sp,fp
 441a720:	df000017 	ldw	fp,0(sp)
 441a724:	dec00104 	addi	sp,sp,4
 441a728:	f800283a 	ret

0441a72c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 441a72c:	defffb04 	addi	sp,sp,-20
 441a730:	df000415 	stw	fp,16(sp)
 441a734:	df000404 	addi	fp,sp,16
 441a738:	e13ffe15 	stw	r4,-8(fp)
 441a73c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 441a740:	e0bfff17 	ldw	r2,-4(fp)
 441a744:	10840070 	cmpltui	r2,r2,4097
 441a748:	1000021e 	bne	r2,zero,441a754 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 441a74c:	00840004 	movi	r2,4096
 441a750:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 441a754:	e0fffe17 	ldw	r3,-8(fp)
 441a758:	e0bfff17 	ldw	r2,-4(fp)
 441a75c:	1885883a 	add	r2,r3,r2
 441a760:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 441a764:	e0bffe17 	ldw	r2,-8(fp)
 441a768:	e0bffc15 	stw	r2,-16(fp)
 441a76c:	00000506 	br	441a784 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 441a770:	e0bffc17 	ldw	r2,-16(fp)
 441a774:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 441a778:	e0bffc17 	ldw	r2,-16(fp)
 441a77c:	10800804 	addi	r2,r2,32
 441a780:	e0bffc15 	stw	r2,-16(fp)
 441a784:	e0fffc17 	ldw	r3,-16(fp)
 441a788:	e0bffd17 	ldw	r2,-12(fp)
 441a78c:	18bff836 	bltu	r3,r2,441a770 <__reset+0xfb416770>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 441a790:	e0bffe17 	ldw	r2,-8(fp)
 441a794:	108007cc 	andi	r2,r2,31
 441a798:	10000226 	beq	r2,zero,441a7a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 441a79c:	e0bffc17 	ldw	r2,-16(fp)
 441a7a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 441a7a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 441a7a8:	0001883a 	nop
 441a7ac:	e037883a 	mov	sp,fp
 441a7b0:	df000017 	ldw	fp,0(sp)
 441a7b4:	dec00104 	addi	sp,sp,4
 441a7b8:	f800283a 	ret

0441a7bc <atexit>:
 441a7bc:	200b883a 	mov	r5,r4
 441a7c0:	000f883a 	mov	r7,zero
 441a7c4:	000d883a 	mov	r6,zero
 441a7c8:	0009883a 	mov	r4,zero
 441a7cc:	441a8841 	jmpi	441a884 <__register_exitproc>

0441a7d0 <exit>:
 441a7d0:	defffe04 	addi	sp,sp,-8
 441a7d4:	000b883a 	mov	r5,zero
 441a7d8:	dc000015 	stw	r16,0(sp)
 441a7dc:	dfc00115 	stw	ra,4(sp)
 441a7e0:	2021883a 	mov	r16,r4
 441a7e4:	441a99c0 	call	441a99c <__call_exitprocs>
 441a7e8:	00811134 	movhi	r2,1092
 441a7ec:	10a14f04 	addi	r2,r2,-31428
 441a7f0:	11000017 	ldw	r4,0(r2)
 441a7f4:	20800f17 	ldw	r2,60(r4)
 441a7f8:	10000126 	beq	r2,zero,441a800 <exit+0x30>
 441a7fc:	103ee83a 	callr	r2
 441a800:	8009883a 	mov	r4,r16
 441a804:	441ab1c0 	call	441ab1c <_exit>

0441a808 <memcmp>:
 441a808:	01c000c4 	movi	r7,3
 441a80c:	3980192e 	bgeu	r7,r6,441a874 <memcmp+0x6c>
 441a810:	2144b03a 	or	r2,r4,r5
 441a814:	11c4703a 	and	r2,r2,r7
 441a818:	10000f26 	beq	r2,zero,441a858 <memcmp+0x50>
 441a81c:	20800003 	ldbu	r2,0(r4)
 441a820:	28c00003 	ldbu	r3,0(r5)
 441a824:	10c0151e 	bne	r2,r3,441a87c <memcmp+0x74>
 441a828:	31bfff84 	addi	r6,r6,-2
 441a82c:	01ffffc4 	movi	r7,-1
 441a830:	00000406 	br	441a844 <memcmp+0x3c>
 441a834:	20800003 	ldbu	r2,0(r4)
 441a838:	28c00003 	ldbu	r3,0(r5)
 441a83c:	31bfffc4 	addi	r6,r6,-1
 441a840:	10c00e1e 	bne	r2,r3,441a87c <memcmp+0x74>
 441a844:	21000044 	addi	r4,r4,1
 441a848:	29400044 	addi	r5,r5,1
 441a84c:	31fff91e 	bne	r6,r7,441a834 <__reset+0xfb416834>
 441a850:	0005883a 	mov	r2,zero
 441a854:	f800283a 	ret
 441a858:	20c00017 	ldw	r3,0(r4)
 441a85c:	28800017 	ldw	r2,0(r5)
 441a860:	18bfee1e 	bne	r3,r2,441a81c <__reset+0xfb41681c>
 441a864:	31bfff04 	addi	r6,r6,-4
 441a868:	21000104 	addi	r4,r4,4
 441a86c:	29400104 	addi	r5,r5,4
 441a870:	39bff936 	bltu	r7,r6,441a858 <__reset+0xfb416858>
 441a874:	303fe91e 	bne	r6,zero,441a81c <__reset+0xfb41681c>
 441a878:	003ff506 	br	441a850 <__reset+0xfb416850>
 441a87c:	10c5c83a 	sub	r2,r2,r3
 441a880:	f800283a 	ret

0441a884 <__register_exitproc>:
 441a884:	defffa04 	addi	sp,sp,-24
 441a888:	dc000315 	stw	r16,12(sp)
 441a88c:	04011134 	movhi	r16,1092
 441a890:	84214f04 	addi	r16,r16,-31428
 441a894:	80c00017 	ldw	r3,0(r16)
 441a898:	dc400415 	stw	r17,16(sp)
 441a89c:	dfc00515 	stw	ra,20(sp)
 441a8a0:	18805217 	ldw	r2,328(r3)
 441a8a4:	2023883a 	mov	r17,r4
 441a8a8:	10003726 	beq	r2,zero,441a988 <__register_exitproc+0x104>
 441a8ac:	10c00117 	ldw	r3,4(r2)
 441a8b0:	010007c4 	movi	r4,31
 441a8b4:	20c00e16 	blt	r4,r3,441a8f0 <__register_exitproc+0x6c>
 441a8b8:	1a000044 	addi	r8,r3,1
 441a8bc:	8800221e 	bne	r17,zero,441a948 <__register_exitproc+0xc4>
 441a8c0:	18c00084 	addi	r3,r3,2
 441a8c4:	18c7883a 	add	r3,r3,r3
 441a8c8:	18c7883a 	add	r3,r3,r3
 441a8cc:	12000115 	stw	r8,4(r2)
 441a8d0:	10c7883a 	add	r3,r2,r3
 441a8d4:	19400015 	stw	r5,0(r3)
 441a8d8:	0005883a 	mov	r2,zero
 441a8dc:	dfc00517 	ldw	ra,20(sp)
 441a8e0:	dc400417 	ldw	r17,16(sp)
 441a8e4:	dc000317 	ldw	r16,12(sp)
 441a8e8:	dec00604 	addi	sp,sp,24
 441a8ec:	f800283a 	ret
 441a8f0:	00811074 	movhi	r2,1089
 441a8f4:	10a8f204 	addi	r2,r2,-23608
 441a8f8:	10002626 	beq	r2,zero,441a994 <__register_exitproc+0x110>
 441a8fc:	01006404 	movi	r4,400
 441a900:	d9400015 	stw	r5,0(sp)
 441a904:	d9800115 	stw	r6,4(sp)
 441a908:	d9c00215 	stw	r7,8(sp)
 441a90c:	440a3c80 	call	440a3c8 <malloc>
 441a910:	d9400017 	ldw	r5,0(sp)
 441a914:	d9800117 	ldw	r6,4(sp)
 441a918:	d9c00217 	ldw	r7,8(sp)
 441a91c:	10001d26 	beq	r2,zero,441a994 <__register_exitproc+0x110>
 441a920:	81000017 	ldw	r4,0(r16)
 441a924:	10000115 	stw	zero,4(r2)
 441a928:	02000044 	movi	r8,1
 441a92c:	22405217 	ldw	r9,328(r4)
 441a930:	0007883a 	mov	r3,zero
 441a934:	12400015 	stw	r9,0(r2)
 441a938:	20805215 	stw	r2,328(r4)
 441a93c:	10006215 	stw	zero,392(r2)
 441a940:	10006315 	stw	zero,396(r2)
 441a944:	883fde26 	beq	r17,zero,441a8c0 <__reset+0xfb4168c0>
 441a948:	18c9883a 	add	r4,r3,r3
 441a94c:	2109883a 	add	r4,r4,r4
 441a950:	1109883a 	add	r4,r2,r4
 441a954:	21802215 	stw	r6,136(r4)
 441a958:	01800044 	movi	r6,1
 441a95c:	12406217 	ldw	r9,392(r2)
 441a960:	30cc983a 	sll	r6,r6,r3
 441a964:	4992b03a 	or	r9,r9,r6
 441a968:	12406215 	stw	r9,392(r2)
 441a96c:	21c04215 	stw	r7,264(r4)
 441a970:	01000084 	movi	r4,2
 441a974:	893fd21e 	bne	r17,r4,441a8c0 <__reset+0xfb4168c0>
 441a978:	11006317 	ldw	r4,396(r2)
 441a97c:	218cb03a 	or	r6,r4,r6
 441a980:	11806315 	stw	r6,396(r2)
 441a984:	003fce06 	br	441a8c0 <__reset+0xfb4168c0>
 441a988:	18805304 	addi	r2,r3,332
 441a98c:	18805215 	stw	r2,328(r3)
 441a990:	003fc606 	br	441a8ac <__reset+0xfb4168ac>
 441a994:	00bfffc4 	movi	r2,-1
 441a998:	003fd006 	br	441a8dc <__reset+0xfb4168dc>

0441a99c <__call_exitprocs>:
 441a99c:	defff504 	addi	sp,sp,-44
 441a9a0:	df000915 	stw	fp,36(sp)
 441a9a4:	dd400615 	stw	r21,24(sp)
 441a9a8:	dc800315 	stw	r18,12(sp)
 441a9ac:	dfc00a15 	stw	ra,40(sp)
 441a9b0:	ddc00815 	stw	r23,32(sp)
 441a9b4:	dd800715 	stw	r22,28(sp)
 441a9b8:	dd000515 	stw	r20,20(sp)
 441a9bc:	dcc00415 	stw	r19,16(sp)
 441a9c0:	dc400215 	stw	r17,8(sp)
 441a9c4:	dc000115 	stw	r16,4(sp)
 441a9c8:	d9000015 	stw	r4,0(sp)
 441a9cc:	2839883a 	mov	fp,r5
 441a9d0:	04800044 	movi	r18,1
 441a9d4:	057fffc4 	movi	r21,-1
 441a9d8:	00811134 	movhi	r2,1092
 441a9dc:	10a14f04 	addi	r2,r2,-31428
 441a9e0:	12000017 	ldw	r8,0(r2)
 441a9e4:	45005217 	ldw	r20,328(r8)
 441a9e8:	44c05204 	addi	r19,r8,328
 441a9ec:	a0001c26 	beq	r20,zero,441aa60 <__call_exitprocs+0xc4>
 441a9f0:	a0800117 	ldw	r2,4(r20)
 441a9f4:	15ffffc4 	addi	r23,r2,-1
 441a9f8:	b8000d16 	blt	r23,zero,441aa30 <__call_exitprocs+0x94>
 441a9fc:	14000044 	addi	r16,r2,1
 441aa00:	8421883a 	add	r16,r16,r16
 441aa04:	8421883a 	add	r16,r16,r16
 441aa08:	84402004 	addi	r17,r16,128
 441aa0c:	a463883a 	add	r17,r20,r17
 441aa10:	a421883a 	add	r16,r20,r16
 441aa14:	e0001e26 	beq	fp,zero,441aa90 <__call_exitprocs+0xf4>
 441aa18:	80804017 	ldw	r2,256(r16)
 441aa1c:	e0801c26 	beq	fp,r2,441aa90 <__call_exitprocs+0xf4>
 441aa20:	bdffffc4 	addi	r23,r23,-1
 441aa24:	843fff04 	addi	r16,r16,-4
 441aa28:	8c7fff04 	addi	r17,r17,-4
 441aa2c:	bd7ff91e 	bne	r23,r21,441aa14 <__reset+0xfb416a14>
 441aa30:	00811074 	movhi	r2,1089
 441aa34:	10a8f704 	addi	r2,r2,-23588
 441aa38:	10000926 	beq	r2,zero,441aa60 <__call_exitprocs+0xc4>
 441aa3c:	a0800117 	ldw	r2,4(r20)
 441aa40:	1000301e 	bne	r2,zero,441ab04 <__call_exitprocs+0x168>
 441aa44:	a0800017 	ldw	r2,0(r20)
 441aa48:	10003226 	beq	r2,zero,441ab14 <__call_exitprocs+0x178>
 441aa4c:	a009883a 	mov	r4,r20
 441aa50:	98800015 	stw	r2,0(r19)
 441aa54:	440a3dc0 	call	440a3dc <free>
 441aa58:	9d000017 	ldw	r20,0(r19)
 441aa5c:	a03fe41e 	bne	r20,zero,441a9f0 <__reset+0xfb4169f0>
 441aa60:	dfc00a17 	ldw	ra,40(sp)
 441aa64:	df000917 	ldw	fp,36(sp)
 441aa68:	ddc00817 	ldw	r23,32(sp)
 441aa6c:	dd800717 	ldw	r22,28(sp)
 441aa70:	dd400617 	ldw	r21,24(sp)
 441aa74:	dd000517 	ldw	r20,20(sp)
 441aa78:	dcc00417 	ldw	r19,16(sp)
 441aa7c:	dc800317 	ldw	r18,12(sp)
 441aa80:	dc400217 	ldw	r17,8(sp)
 441aa84:	dc000117 	ldw	r16,4(sp)
 441aa88:	dec00b04 	addi	sp,sp,44
 441aa8c:	f800283a 	ret
 441aa90:	a0800117 	ldw	r2,4(r20)
 441aa94:	80c00017 	ldw	r3,0(r16)
 441aa98:	10bfffc4 	addi	r2,r2,-1
 441aa9c:	15c01426 	beq	r2,r23,441aaf0 <__call_exitprocs+0x154>
 441aaa0:	80000015 	stw	zero,0(r16)
 441aaa4:	183fde26 	beq	r3,zero,441aa20 <__reset+0xfb416a20>
 441aaa8:	95c8983a 	sll	r4,r18,r23
 441aaac:	a0806217 	ldw	r2,392(r20)
 441aab0:	a5800117 	ldw	r22,4(r20)
 441aab4:	2084703a 	and	r2,r4,r2
 441aab8:	10000b26 	beq	r2,zero,441aae8 <__call_exitprocs+0x14c>
 441aabc:	a0806317 	ldw	r2,396(r20)
 441aac0:	2088703a 	and	r4,r4,r2
 441aac4:	20000c1e 	bne	r4,zero,441aaf8 <__call_exitprocs+0x15c>
 441aac8:	89400017 	ldw	r5,0(r17)
 441aacc:	d9000017 	ldw	r4,0(sp)
 441aad0:	183ee83a 	callr	r3
 441aad4:	a0800117 	ldw	r2,4(r20)
 441aad8:	15bfbf1e 	bne	r2,r22,441a9d8 <__reset+0xfb4169d8>
 441aadc:	98800017 	ldw	r2,0(r19)
 441aae0:	153fcf26 	beq	r2,r20,441aa20 <__reset+0xfb416a20>
 441aae4:	003fbc06 	br	441a9d8 <__reset+0xfb4169d8>
 441aae8:	183ee83a 	callr	r3
 441aaec:	003ff906 	br	441aad4 <__reset+0xfb416ad4>
 441aaf0:	a5c00115 	stw	r23,4(r20)
 441aaf4:	003feb06 	br	441aaa4 <__reset+0xfb416aa4>
 441aaf8:	89000017 	ldw	r4,0(r17)
 441aafc:	183ee83a 	callr	r3
 441ab00:	003ff406 	br	441aad4 <__reset+0xfb416ad4>
 441ab04:	a0800017 	ldw	r2,0(r20)
 441ab08:	a027883a 	mov	r19,r20
 441ab0c:	1029883a 	mov	r20,r2
 441ab10:	003fb606 	br	441a9ec <__reset+0xfb4169ec>
 441ab14:	0005883a 	mov	r2,zero
 441ab18:	003ffb06 	br	441ab08 <__reset+0xfb416b08>

0441ab1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 441ab1c:	defffd04 	addi	sp,sp,-12
 441ab20:	df000215 	stw	fp,8(sp)
 441ab24:	df000204 	addi	fp,sp,8
 441ab28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 441ab2c:	0001883a 	nop
 441ab30:	e0bfff17 	ldw	r2,-4(fp)
 441ab34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 441ab38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 441ab3c:	10000226 	beq	r2,zero,441ab48 <_exit+0x2c>
    ALT_SIM_FAIL();
 441ab40:	002af070 	cmpltui	zero,zero,43969
 441ab44:	00000106 	br	441ab4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 441ab48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 441ab4c:	003fff06 	br	441ab4c <__reset+0xfb416b4c>
